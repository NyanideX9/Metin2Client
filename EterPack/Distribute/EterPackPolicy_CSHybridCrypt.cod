; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterPack\Distribute\EterPackPolicy_CSHybridCrypt.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
PUBLIC	?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetExtension
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$hash_value@K@boost@@YAIK@Z			; boost::hash_value<unsigned long>
PUBLIC	??1Exception@CryptoPP@@UAE@XZ			; CryptoPP::Exception::~Exception
PUBLIC	?what@Exception@CryptoPP@@UBEPBDXZ		; CryptoPP::Exception::what
PUBLIC	??0Exception@CryptoPP@@QAE@ABV01@@Z		; CryptoPP::Exception::Exception
PUBLIC	??_GException@CryptoPP@@UAEPAXI@Z		; CryptoPP::Exception::`scalar deleting destructor'
PUBLIC	??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::InvalidArgument::InvalidArgument
PUBLIC	??1InvalidArgument@CryptoPP@@UAE@XZ		; CryptoPP::InvalidArgument::~InvalidArgument
PUBLIC	??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z	; CryptoPP::InvalidArgument::InvalidArgument
PUBLIC	??_GInvalidArgument@CryptoPP@@UAEPAXI@Z		; CryptoPP::InvalidArgument::`scalar deleting destructor'
PUBLIC	??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
PUBLIC	??1NotImplemented@CryptoPP@@UAE@XZ		; CryptoPP::NotImplemented::~NotImplemented
PUBLIC	??0NotImplemented@CryptoPP@@QAE@ABV01@@Z	; CryptoPP::NotImplemented::NotImplemented
PUBLIC	??_GNotImplemented@CryptoPP@@UAEPAXI@Z		; CryptoPP::NotImplemented::`scalar deleting destructor'
PUBLIC	??1NameValuePairs@CryptoPP@@UAE@XZ		; CryptoPP::NameValuePairs::~NameValuePairs
PUBLIC	??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
PUBLIC	??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ ; CryptoPP::NameValuePairs::ValueTypeMismatch::~ValueTypeMismatch
PUBLIC	??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
PUBLIC	??_GValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z ; CryptoPP::NameValuePairs::ValueTypeMismatch::`scalar deleting destructor'
PUBLIC	?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z ; CryptoPP::NameValuePairs::ThrowIfTypeMismatch
PUBLIC	??_GNameValuePairs@CryptoPP@@UAEPAXI@Z		; CryptoPP::NameValuePairs::`scalar deleting destructor'
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1Clonable@CryptoPP@@UAE@XZ			; CryptoPP::Clonable::~Clonable
PUBLIC	?Clone@Clonable@CryptoPP@@UBEPAV12@XZ		; CryptoPP::Clonable::Clone
PUBLIC	??1Algorithm@CryptoPP@@UAE@XZ			; CryptoPP::Algorithm::~Algorithm
PUBLIC	?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::Algorithm::AlgorithmName
PUBLIC	?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::Algorithm::AlgorithmProvider
PUBLIC	??1SimpleKeyingInterface@CryptoPP@@UAE@XZ	; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface
PUBLIC	?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z ; CryptoPP::SimpleKeyingInterface::IsValidKeyLength
PUBLIC	?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterface::MinIVLength
PUBLIC	?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterface::MaxIVLength
PUBLIC	?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z ; CryptoPP::SimpleKeyingInterface::Resynchronize
PUBLIC	??1BlockTransformation@CryptoPP@@UAE@XZ		; CryptoPP::BlockTransformation::~BlockTransformation
PUBLIC	?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ ; CryptoPP::BlockTransformation::IsPermutation
PUBLIC	?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ ; CryptoPP::BlockTransformation::OptimalNumberOfParallelBlocks
PUBLIC	??1StreamTransformation@CryptoPP@@UAE@XZ	; CryptoPP::StreamTransformation::~StreamTransformation
PUBLIC	?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ; CryptoPP::StreamTransformation::MandatoryBlockSize
PUBLIC	?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ ; CryptoPP::StreamTransformation::GetOptimalBlockSizeUsed
PUBLIC	?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ; CryptoPP::StreamTransformation::MinLastBlockSize
PUBLIC	?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ ; CryptoPP::StreamTransformation::IsLastBlockSpecial
PUBLIC	?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ; CryptoPP::BlockCipher::GetAlgorithm
PUBLIC	?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ; CryptoPP::SymmetricCipher::GetAlgorithm
PUBLIC	??1RandomNumberGenerator@CryptoPP@@UAE@XZ	; CryptoPP::RandomNumberGenerator::~RandomNumberGenerator
PUBLIC	?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z ; CryptoPP::RandomNumberGenerator::IncorporateEntropy
PUBLIC	?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ ; CryptoPP::RandomNumberGenerator::CanIncorporateEntropy
PUBLIC	??1Waitable@CryptoPP@@UAE@XZ			; CryptoPP::Waitable::~Waitable
PUBLIC	??1BufferedTransformation@CryptoPP@@UAE@XZ	; CryptoPP::BufferedTransformation::~BufferedTransformation
PUBLIC	?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z ; CryptoPP::BufferedTransformation::CreatePutSpace
PUBLIC	?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ ; CryptoPP::BufferedTransformation::CanModifyInput
PUBLIC	?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z ; CryptoPP::BufferedTransformation::PutModifiable2
PUBLIC	?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z ; CryptoPP::BufferedTransformation::IsolatedMessageSeriesEnd
PUBLIC	?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z ; CryptoPP::BufferedTransformation::SetAutoSignalPropagation
PUBLIC	?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ ; CryptoPP::BufferedTransformation::GetAutoSignalPropagation
PUBLIC	?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ ; CryptoPP::BufferedTransformation::GetNextMessageSeries
PUBLIC	?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ ; CryptoPP::BufferedTransformation::NumberOfMessagesInThisSeries
PUBLIC	?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ ; CryptoPP::BufferedTransformation::NumberOfMessageSeries
PUBLIC	?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ ; CryptoPP::BufferedTransformation::Attachable
PUBLIC	?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ ; CryptoPP::BufferedTransformation::AttachedTransformation
PUBLIC	?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ ; CryptoPP::BufferedTransformation::AttachedTransformation
PUBLIC	?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z ; CryptoPP::BufferedTransformation::Detach
PUBLIC	?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::Put2
PUBLIC	?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedFlush
PUBLIC	?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedMessageSeriesEnd
PUBLIC	?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelPut2
PUBLIC	?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelMessageSeriesEnd
PUBLIC	?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::SetAutoSignalPropagation
PUBLIC	?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::GetAutoSignalPropagation
PUBLIC	?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z ; CryptoPP::Store::IsolatedInitialize
PUBLIC	?NumberOfMessages@Store@CryptoPP@@UBEIXZ	; CryptoPP::Store::NumberOfMessages
PUBLIC	?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::Sink::TransferTo2
PUBLIC	?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::Sink::CopyRangeTo2
PUBLIC	?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ; CryptoPP::Bufferless<CryptoPP::Sink>::IsolatedFlush
PUBLIC	?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z ; CryptoPP::AllocatorWithCleanup<unsigned int,0>::allocate
PUBLIC	?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::MinKeyLength
PUBLIC	?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::MaxKeyLength
PUBLIC	?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::DefaultKeyLength
PUBLIC	?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::GetValidKeyLength
PUBLIC	?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::IVRequirement
PUBLIC	?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::IVSize
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::AlgorithmName
PUBLIC	?BlockSize@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::BlockSize
PUBLIC	?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::MinKeyLength
PUBLIC	?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::MaxKeyLength
PUBLIC	?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::DefaultKeyLength
PUBLIC	?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::GetValidKeyLength
PUBLIC	?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::IVRequirement
PUBLIC	?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::IVSize
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::AlgorithmName
PUBLIC	?BlockSize@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::BlockSize
PUBLIC	??1Base@Twofish@CryptoPP@@UAE@XZ		; CryptoPP::Twofish::Base::~Base
PUBLIC	??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z		; CryptoPP::Twofish::Base::Base
PUBLIC	?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::MinKeyLength
PUBLIC	?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::MaxKeyLength
PUBLIC	?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::DefaultKeyLength
PUBLIC	?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::GetValidKeyLength
PUBLIC	?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::IVRequirement
PUBLIC	?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::IVSize
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::AlgorithmName
PUBLIC	?BlockSize@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::BlockSize
PUBLIC	??1EterPackPolicy_CSHybridCrypt@@QAE@XZ		; EterPackPolicy_CSHybridCrypt::~EterPackPolicy_CSHybridCrypt
PUBLIC	?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; EterPackPolicy_CSHybridCrypt::GenerateCryptKey
PUBLIC	?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z ; EterPackPolicy_CSHybridCrypt::EncryptMemory
PUBLIC	?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z ; EterPackPolicy_CSHybridCrypt::DecryptMemory
PUBLIC	?IsContainingCryptKey@EterPackPolicy_CSHybridCrypt@@QBE_NXZ ; EterPackPolicy_CSHybridCrypt::IsContainingCryptKey
PUBLIC	?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z ; EterPackPolicy_CSHybridCrypt::GenerateSupplementaryDataBlock
PUBLIC	?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z ; EterPackPolicy_CSHybridCrypt::GetSupplementaryDataBlock
PUBLIC	?IsContainingSDBFile@EterPackPolicy_CSHybridCrypt@@QBE_NXZ ; EterPackPolicy_CSHybridCrypt::IsContainingSDBFile
PUBLIC	?WriteCryptKeyToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z ; EterPackPolicy_CSHybridCrypt::WriteCryptKeyToFile
PUBLIC	?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z ; EterPackPolicy_CSHybridCrypt::ReadCryptKeyInfoFromStream
PUBLIC	?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z ; EterPackPolicy_CSHybridCrypt::WriteSupplementaryDataBlockToFile
PUBLIC	?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z ; EterPackPolicy_CSHybridCrypt::ReadSupplementatyDataBlockFromStream
PUBLIC	?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
PUBLIC	?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
PUBLIC	?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
PUBLIC	??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >
PUBLIC	?clear@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEXXZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::clear
PUBLIC	?find@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::find
PUBLIC	??A?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::operator[]
PUBLIC	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
PUBLIC	?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Change_array
PUBLIC	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
PUBLIC	??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ ; EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo::~SSupplementaryDataBlockInfo
PUBLIC	?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
PUBLIC	?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
PUBLIC	?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
PUBLIC	??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >
PUBLIC	?find@?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::find
PUBLIC	??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[]
PUBLIC	?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z ; EterPackPolicy_CSHybridCrypt::GetPerFileCryptKey
PUBLIC	??1AdditiveCipherAbstractPolicy@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherAbstractPolicy::~AdditiveCipherAbstractPolicy
PUBLIC	?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ ; CryptoPP::AdditiveCipherAbstractPolicy::GetOptimalBlockSize
PUBLIC	??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
PUBLIC	??1ConstByteArrayParameter@CryptoPP@@QAE@XZ	; CryptoPP::ConstByteArrayParameter::~ConstByteArrayParameter
PUBLIC	??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::ConstByteArrayParameter::ConstByteArrayParameter
PUBLIC	??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
PUBLIC	??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::~ParameterNotUsed
PUBLIC	??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
PUBLIC	??_GParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`scalar deleting destructor'
PUBLIC	??1AlgorithmParametersBase@CryptoPP@@UAE@XZ	; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
PUBLIC	??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
PUBLIC	?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset
PUBLIC	??_GAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z	; CryptoPP::AlgorithmParametersBase::`scalar deleting destructor'
PUBLIC	?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::AssignValue
PUBLIC	?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::MoveInto
PUBLIC	??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`scalar deleting destructor'
PUBLIC	??1AlgorithmParameters@CryptoPP@@UAE@XZ		; CryptoPP::AlgorithmParameters::~AlgorithmParameters
PUBLIC	??1CipherModeBase@CryptoPP@@UAE@XZ		; CryptoPP::CipherModeBase::~CipherModeBase
PUBLIC	?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ	; CryptoPP::CipherModeBase::MinKeyLength
PUBLIC	?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ	; CryptoPP::CipherModeBase::MaxKeyLength
PUBLIC	?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ ; CryptoPP::CipherModeBase::DefaultKeyLength
PUBLIC	?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z ; CryptoPP::CipherModeBase::GetValidKeyLength
PUBLIC	?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z ; CryptoPP::CipherModeBase::IsValidKeyLength
PUBLIC	?IVSize@CipherModeBase@CryptoPP@@UBEIXZ		; CryptoPP::CipherModeBase::IVSize
PUBLIC	?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z ; CryptoPP::CipherModeBase::SetFeedbackSize
PUBLIC	?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::CipherSetKey
PUBLIC	??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::~ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>
PUBLIC	??1CTR_ModePolicy@CryptoPP@@UAE@XZ		; CryptoPP::CTR_ModePolicy::~CTR_ModePolicy
PUBLIC	?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ ; CryptoPP::CTR_ModePolicy::CipherIsRandomAccess
PUBLIC	?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ; CryptoPP::CTR_ModePolicy::IVRequirement
PUBLIC	?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ	; CryptoPP::CTR_ModePolicy::GetAlignment
PUBLIC	?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ ; CryptoPP::CTR_ModePolicy::GetBytesPerIteration
PUBLIC	?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ ; CryptoPP::CTR_ModePolicy::GetIterationsToBuffer
PUBLIC	?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z ; CryptoPP::CTR_ModePolicy::WriteKeystream
PUBLIC	?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ ; CryptoPP::CTR_ModePolicy::CanOperateKeystream
PUBLIC	??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::~AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>
PUBLIC	??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
PUBLIC	?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::OptimalBlockSize
PUBLIC	?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::OptimalDataAlignment
PUBLIC	?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsSelfInverting
PUBLIC	?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsForwardTransformation
PUBLIC	?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsRandomAccess
PUBLIC	?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AlgorithmProvider
PUBLIC	??1?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::~ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>
PUBLIC	?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::GetPolicy
PUBLIC	?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::AccessPolicy
PUBLIC	??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>
PUBLIC	??_G?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`scalar deleting destructor'
PUBLIC	??1Filter@CryptoPP@@UAE@XZ			; CryptoPP::Filter::~Filter
PUBLIC	?Attachable@Filter@CryptoPP@@UAE_NXZ		; CryptoPP::Filter::Attachable
PUBLIC	?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ ; CryptoPP::Filter::ShouldPropagateMessageEnd
PUBLIC	?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ ; CryptoPP::Filter::ShouldPropagateMessageSeriesEnd
PUBLIC	??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
PUBLIC	??1?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAE@XZ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??0?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::IsolatedInitialize
PUBLIC	?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::Put2
PUBLIC	??_G?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor'
PUBLIC	??_GStringStore@CryptoPP@@UAEPAXI@Z		; CryptoPP::StringStore::`scalar deleting destructor'
PUBLIC	??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>
PUBLIC	?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::Put2
PUBLIC	?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedFlush
PUBLIC	?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedMessageSeriesEnd
PUBLIC	?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelPut2
PUBLIC	?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelMessageSeriesEnd
PUBLIC	??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::~InputRejecting<CryptoPP::Filter>
PUBLIC	??1Source@CryptoPP@@UAE@XZ			; CryptoPP::Source::~Source
PUBLIC	??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate<CryptoPP::StringStore>
PUBLIC	?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::IsolatedInitialize
PUBLIC	?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::Pump2
PUBLIC	?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpMessages2
PUBLIC	?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2
PUBLIC	?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceExhausted
PUBLIC	?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SetAutoSignalPropagation
PUBLIC	?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::GetAutoSignalPropagation
PUBLIC	??_G?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`scalar deleting destructor'
PUBLIC	??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
PUBLIC	??_GStringSource@CryptoPP@@UAEPAXI@Z		; CryptoPP::StringSource::`scalar deleting destructor'
PUBLIC	?CanIncorporateEntropy@RandomPool@CryptoPP@@UBE_NXZ ; CryptoPP::RandomPool::CanIncorporateEntropy
PUBLIC	??1?$member_ptr@VBlockCipher@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipher>::~member_ptr<CryptoPP::BlockCipher>
PUBLIC	??1RandomPool@CryptoPP@@UAE@XZ			; CryptoPP::RandomPool::~RandomPool
PUBLIC	??_GAutoSeededRandomPool@CryptoPP@@UAEPAXI@Z	; CryptoPP::AutoSeededRandomPool::`scalar deleting destructor'
PUBLIC	?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::Clone
PUBLIC	?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::IsForwardTransformation
PUBLIC	??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`scalar deleting destructor'
PUBLIC	??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
PUBLIC	??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >
PUBLIC	??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
PUBLIC	?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider
PUBLIC	??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
PUBLIC	??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor'
PUBLIC	?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::Clone
PUBLIC	?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::IsForwardTransformation
PUBLIC	??_G?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`scalar deleting destructor'
PUBLIC	??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
PUBLIC	??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >
PUBLIC	??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
PUBLIC	?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider
PUBLIC	??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
PUBLIC	??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor'
PUBLIC	?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::Clone
PUBLIC	?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::IsForwardTransformation
PUBLIC	??_G?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`scalar deleting destructor'
PUBLIC	??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
PUBLIC	??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >
PUBLIC	??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
PUBLIC	?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider
PUBLIC	??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
PUBLIC	??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor'
PUBLIC	??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
PUBLIC	??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::~InputRejected
PUBLIC	??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
PUBLIC	??_GInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`scalar deleting destructor'
PUBLIC	??$_Assign_counted_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXPAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_counted_range<unsigned char *>
PUBLIC	??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
PUBLIC	??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::~InputRejected
PUBLIC	??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
PUBLIC	??_GInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`scalar deleting destructor'
PUBLIC	??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
PUBLIC	??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
PUBLIC	??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
PUBLIC	??$_Copy_memmove_n@PAEPAE@std@@YAPAEPAEI0@Z	; std::_Copy_memmove_n<unsigned char *,unsigned char *>
PUBLIC	??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
PUBLIC	??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
PUBLIC	??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
PUBLIC	?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
PUBLIC	??$_Zero_range@PAE@std@@YAPAEQAE0@Z		; std::_Zero_range<unsigned char *>
PUBLIC	??$_Copy_memmove_tail@PAE@std@@YAPAEQBDQAEII@Z	; std::_Copy_memmove_tail<unsigned char *>
PUBLIC	??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z	; std::_Copy_memmove<unsigned char *,unsigned char *>
PUBLIC	??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
PUBLIC	??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
PUBLIC	??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
PUBLIC	?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::create_node
PUBLIC	??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
PUBLIC	?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::create_node
PUBLIC	??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vector deleting destructor'
PUBLIC	??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vector deleting destructor'
PUBLIC	??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vector deleting destructor'
PUBLIC	?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AlgorithmProvider`adjustor{24}'
PUBLIC	?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AlgorithmProvider`adjustor{44}'
PUBLIC	??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
PUBLIC	??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WBM@AEPAXI@Z ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
PUBLIC	??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WDA@AEPAXI@Z ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
PUBLIC	??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vector deleting destructor'
PUBLIC	??_EStringStore@CryptoPP@@W3AEPAXI@Z		; [thunk]:CryptoPP::StringStore::`vector deleting destructor'
PUBLIC	??_EStringSource@CryptoPP@@W3AEPAXI@Z		; [thunk]:CryptoPP::StringSource::`vector deleting destructor'
PUBLIC	??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vector deleting destructor'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{24}'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{44}'
PUBLIC	?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{44}'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{24}'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{44}'
PUBLIC	?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{44}'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{24}'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{44}'
PUBLIC	?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{44}'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB ; boost::unordered::detail::prime_list_template<unsigned int>::value
PUBLIC	??_7Exception@CryptoPP@@6B@			; CryptoPP::Exception::`vftable'
PUBLIC	??_7InvalidArgument@CryptoPP@@6B@		; CryptoPP::InvalidArgument::`vftable'
PUBLIC	??_7NotImplemented@CryptoPP@@6B@		; CryptoPP::NotImplemented::`vftable'
PUBLIC	??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ ; CryptoPP::NameValuePairs::ValueTypeMismatch::`vftable'
PUBLIC	??_7NameValuePairs@CryptoPP@@6B@		; CryptoPP::NameValuePairs::`vftable'
PUBLIC	??_C@_01GEODFPGF@?8@				; `string'
PUBLIC	??_C@_0BI@CPJAGCKP@?8?0?5trying?5to?5retrieve?5?8@ ; `string'
PUBLIC	??_C@_0M@PGGGIJHH@?8?0?5stored?5?8@		; `string'
PUBLIC	??_C@_0CE@LNMKHLKF@NameValuePairs?3?5type?5mismatch?5f@ ; `string'
PUBLIC	__TI4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
PUBLIC	__CTA4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
PUBLIC	??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z48
PUBLIC	??_R0?AVInvalidArgument@CryptoPP@@@8		; CryptoPP::InvalidArgument `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVException@CryptoPP@@@8			; CryptoPP::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
PUBLIC	__TI3?AVInvalidArgument@CryptoPP@@
PUBLIC	__CTA3?AVInvalidArgument@CryptoPP@@
PUBLIC	__TI3?AVNotImplemented@CryptoPP@@
PUBLIC	__CTA3?AVNotImplemented@CryptoPP@@
PUBLIC	??_R0?AVNotImplemented@CryptoPP@@@8		; CryptoPP::NotImplemented `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
PUBLIC	??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4@ ; `string'
PUBLIC	??_C@_07CIFAGBMG@unknown@			; `string'
PUBLIC	??_C@_03BFHCIDFI@C?$CL?$CL@			; `string'
PUBLIC	??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5r@ ; `string'
PUBLIC	??_C@_0DK@CFJCNMFC@RandomNumberGenerator?3?5Incorpor@ ; `string'
PUBLIC	??_C@_0DG@FIHMKEGL@BufferedTransformation?3?5this?5ob@ ; `string'
PUBLIC	??_C@_08EGCCLPME@Camellia@			; `string'
PUBLIC	??_C@_07DABDIDEC@Twofish@			; `string'
PUBLIC	??_C@_04OKOCCFHC@XTEA@				; `string'
PUBLIC	??_C@_0N@GKFFKNHD@FeedbackSize@			; `string'
PUBLIC	??_C@_0M@JMHEFFAI@InputBuffer@			; `string'
PUBLIC	??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`vftable'
PUBLIC	??_7AlgorithmParametersBase@CryptoPP@@6B@	; CryptoPP::AlgorithmParametersBase::`vftable'
PUBLIC	??_C@_0L@IAABKFFP@?$CC?5not?5used@		; `string'
PUBLIC	??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@ ; `string'
PUBLIC	__TI3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
PUBLIC	__CTA3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
PUBLIC	??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z40
PUBLIC	??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`vftable'
PUBLIC	??_C@_0EH@FMNEDLJE@CipherModeBase?3?5feedback?5size?5c@ ; `string'
PUBLIC	??_C@_03LECCGOIK@CTR@				; `string'
PUBLIC	??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
PUBLIC	??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
PUBLIC	??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
PUBLIC	??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
PUBLIC	??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
PUBLIC	??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
PUBLIC	??_7StringStore@CryptoPP@@6BAlgorithm@1@@	; CryptoPP::StringStore::`vftable'
PUBLIC	??_7StringStore@CryptoPP@@6BWaitable@1@@	; CryptoPP::StringStore::`vftable'
PUBLIC	??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vftable'
PUBLIC	??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vftable'
PUBLIC	??_7StringSource@CryptoPP@@6BAlgorithm@1@@	; CryptoPP::StringSource::`vftable'
PUBLIC	??_7StringSource@CryptoPP@@6BWaitable@1@@	; CryptoPP::StringSource::`vftable'
PUBLIC	??_7AutoSeededRandomPool@CryptoPP@@6B@		; CryptoPP::AutoSeededRandomPool::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`vftable'
PUBLIC	__TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
PUBLIC	__CTA4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
PUBLIC	??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
PUBLIC	??_C@_0BE@NDOICOBI@OutputStringPointer@		; `string'
PUBLIC	??_C@_0CO@DDPAKADP@StringSink?3?5OutputStringPointer@ ; `string'
PUBLIC	??_C@_01KMDKNFGN@?1@				; `string'
PUBLIC	??_R0?AVConstByteArrayParameter@CryptoPP@@@8	; CryptoPP::ConstByteArrayParameter `RTTI Type Descriptor'
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
PUBLIC	??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`vftable'
PUBLIC	__TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
PUBLIC	__CTA4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
PUBLIC	??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
PUBLIC	??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0DL@LFCPKOMM@AllocatorBase?3?5requested?5size?5w@ ; `string'
PUBLIC	??_R0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_string<char,std::char_traits<char>,std::allocator<char> > * `RTTI Type Descriptor'
PUBLIC	??_R0?AVRandomNumberGenerator@CryptoPP@@@8	; CryptoPP::RandomNumberGenerator `RTTI Type Descriptor'
PUBLIC	??_R3RandomNumberGenerator@CryptoPP@@8		; CryptoPP::RandomNumberGenerator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RandomNumberGenerator@CryptoPP@@8		; CryptoPP::RandomNumberGenerator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8	; CryptoPP::RandomNumberGenerator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAlgorithm@CryptoPP@@@8			; CryptoPP::Algorithm `RTTI Type Descriptor'
PUBLIC	??_R3Algorithm@CryptoPP@@8			; CryptoPP::Algorithm::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Algorithm@CryptoPP@@8			; CryptoPP::Algorithm::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVClonable@CryptoPP@@@8			; CryptoPP::Clonable `RTTI Type Descriptor'
PUBLIC	??_R3Clonable@CryptoPP@@8			; CryptoPP::Clonable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Clonable@CryptoPP@@8			; CryptoPP::Clonable::`RTTI Base Class Array'
PUBLIC	??_R0?AVBufferedTransformation@CryptoPP@@@8	; CryptoPP::BufferedTransformation `RTTI Type Descriptor'
PUBLIC	??_R3BufferedTransformation@CryptoPP@@8		; CryptoPP::BufferedTransformation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BufferedTransformation@CryptoPP@@8		; CryptoPP::BufferedTransformation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8 ; CryptoPP::BufferedTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@Waitable@CryptoPP@@8		; CryptoPP::Waitable::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVWaitable@CryptoPP@@@8			; CryptoPP::Waitable `RTTI Type Descriptor'
PUBLIC	??_R3Waitable@CryptoPP@@8			; CryptoPP::Waitable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Waitable@CryptoPP@@8			; CryptoPP::Waitable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Waitable@CryptoPP@@8		; CryptoPP::Waitable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@CryptoPP@@6B@			; CryptoPP::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@CryptoPP@@8			; CryptoPP::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@CryptoPP@@8			; CryptoPP::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@CryptoPP@@8		; CryptoPP::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InvalidArgument@CryptoPP@@6B@		; CryptoPP::InvalidArgument::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidArgument@CryptoPP@@8		; CryptoPP::InvalidArgument::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidArgument@CryptoPP@@8		; CryptoPP::InvalidArgument::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8	; CryptoPP::InvalidArgument::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4NotImplemented@CryptoPP@@6B@		; CryptoPP::NotImplemented::`RTTI Complete Object Locator'
PUBLIC	??_R3NotImplemented@CryptoPP@@8			; CryptoPP::NotImplemented::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NotImplemented@CryptoPP@@8			; CryptoPP::NotImplemented::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NotImplemented@CryptoPP@@8	; CryptoPP::NotImplemented::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4NameValuePairs@CryptoPP@@6B@		; CryptoPP::NameValuePairs::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNameValuePairs@CryptoPP@@@8		; CryptoPP::NameValuePairs `RTTI Type Descriptor'
PUBLIC	??_R3NameValuePairs@CryptoPP@@8			; CryptoPP::NameValuePairs::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NameValuePairs@CryptoPP@@8			; CryptoPP::NameValuePairs::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NameValuePairs@CryptoPP@@8	; CryptoPP::NameValuePairs::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Complete Object Locator'
PUBLIC	??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ValueTypeMismatch@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ValueTypeMismatch@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimpleKeyingInterface@CryptoPP@@@8	; CryptoPP::SimpleKeyingInterface `RTTI Type Descriptor'
PUBLIC	??_R3SimpleKeyingInterface@CryptoPP@@8		; CryptoPP::SimpleKeyingInterface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimpleKeyingInterface@CryptoPP@@8		; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8	; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBlockTransformation@CryptoPP@@@8	; CryptoPP::BlockTransformation `RTTI Type Descriptor'
PUBLIC	??_R3BlockTransformation@CryptoPP@@8		; CryptoPP::BlockTransformation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BlockTransformation@CryptoPP@@8		; CryptoPP::BlockTransformation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BlockTransformation@CryptoPP@@8	; CryptoPP::BlockTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVStreamTransformation@CryptoPP@@@8	; CryptoPP::StreamTransformation `RTTI Type Descriptor'
PUBLIC	??_R3StreamTransformation@CryptoPP@@8		; CryptoPP::StreamTransformation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StreamTransformation@CryptoPP@@8		; CryptoPP::StreamTransformation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8	; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBlockCipher@CryptoPP@@@8		; CryptoPP::BlockCipher `RTTI Type Descriptor'
PUBLIC	??_R3BlockCipher@CryptoPP@@8			; CryptoPP::BlockCipher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BlockCipher@CryptoPP@@8			; CryptoPP::BlockCipher::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BlockCipher@CryptoPP@@8		; CryptoPP::BlockCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@BlockTransformation@CryptoPP@@8	; CryptoPP::BlockTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R13?0A@EA@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R13?0A@EA@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVSymmetricCipher@CryptoPP@@@8		; CryptoPP::SymmetricCipher `RTTI Type Descriptor'
PUBLIC	??_R3SymmetricCipher@CryptoPP@@8		; CryptoPP::SymmetricCipher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SymmetricCipher@CryptoPP@@8		; CryptoPP::SymmetricCipher::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8	; CryptoPP::SymmetricCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@StreamTransformation@CryptoPP@@8	; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R13?0A@EC@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R13?0A@EC@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R0?AVStore@CryptoPP@@@8			; CryptoPP::Store `RTTI Type Descriptor'
PUBLIC	??_R3Store@CryptoPP@@8				; CryptoPP::Store::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Store@CryptoPP@@8				; CryptoPP::Store::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Store@CryptoPP@@8			; CryptoPP::Store::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> > `RTTI Type Descriptor'
PUBLIC	??_R3?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> `RTTI Type Descriptor'
PUBLIC	??_R3?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Base Class Array'
PUBLIC	??_R4InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Complete Object Locator'
PUBLIC	??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSink@CryptoPP@@@8			; CryptoPP::Sink `RTTI Type Descriptor'
PUBLIC	??_R3Sink@CryptoPP@@8				; CryptoPP::Sink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Sink@CryptoPP@@8				; CryptoPP::Sink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Sink@CryptoPP@@8			; CryptoPP::Sink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::Bufferless<CryptoPP::Sink> `RTTI Type Descriptor'
PUBLIC	??_R3?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8	; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8	; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 ; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBase@Camellia@CryptoPP@@@8		; CryptoPP::Camellia::Base `RTTI Type Descriptor'
PUBLIC	??_R3Base@Camellia@CryptoPP@@8			; CryptoPP::Camellia::Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Base@Camellia@CryptoPP@@8			; CryptoPP::Camellia::Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Base@Camellia@CryptoPP@@8		; CryptoPP::Camellia::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > `RTTI Type Descriptor'
PUBLIC	??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> `RTTI Type Descriptor'
PUBLIC	??_R3?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@Camellia_Info@CryptoPP@@8		; CryptoPP::Camellia_Info::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUCamellia_Info@CryptoPP@@@8		; CryptoPP::Camellia_Info `RTTI Type Descriptor'
PUBLIC	??_R3Camellia_Info@CryptoPP@@8			; CryptoPP::Camellia_Info::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Camellia_Info@CryptoPP@@8			; CryptoPP::Camellia_Info::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Camellia_Info@CryptoPP@@8		; CryptoPP::Camellia_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8 ; CryptoPP::FixedBlockSize<16>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$FixedBlockSize@$0BA@@CryptoPP@@@8	; CryptoPP::FixedBlockSize<16> `RTTI Type Descriptor'
PUBLIC	??_R3?$FixedBlockSize@$0BA@@CryptoPP@@8		; CryptoPP::FixedBlockSize<16>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$FixedBlockSize@$0BA@@CryptoPP@@8		; CryptoPP::FixedBlockSize<16>::`RTTI Base Class Array'
PUBLIC	??_R10?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
PUBLIC	??_R0?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0> `RTTI Type Descriptor'
PUBLIC	??_R3?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8	; CryptoPP::FixedBlockSize<16>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Descriptor at (9,-1,0,64)'
PUBLIC	??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base> `RTTI Type Descriptor'
PUBLIC	??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::`RTTI Base Class Array'
PUBLIC	??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBase@Twofish@CryptoPP@@@8		; CryptoPP::Twofish::Base `RTTI Type Descriptor'
PUBLIC	??_R3Base@Twofish@CryptoPP@@8			; CryptoPP::Twofish::Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Base@Twofish@CryptoPP@@8			; CryptoPP::Twofish::Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8		; CryptoPP::Twofish::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > `RTTI Type Descriptor'
PUBLIC	??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> `RTTI Type Descriptor'
PUBLIC	??_R3?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@Twofish_Info@CryptoPP@@8		; CryptoPP::Twofish_Info::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUTwofish_Info@CryptoPP@@@8		; CryptoPP::Twofish_Info `RTTI Type Descriptor'
PUBLIC	??_R3Twofish_Info@CryptoPP@@8			; CryptoPP::Twofish_Info::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Twofish_Info@CryptoPP@@8			; CryptoPP::Twofish_Info::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Twofish_Info@CryptoPP@@8		; CryptoPP::Twofish_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R11?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8	; CryptoPP::FixedRounds<16>::`RTTI Base Class Descriptor at (2,-1,0,64)'
PUBLIC	??_R0?AV?$FixedRounds@$0BA@@CryptoPP@@@8	; CryptoPP::FixedRounds<16> `RTTI Type Descriptor'
PUBLIC	??_R3?$FixedRounds@$0BA@@CryptoPP@@8		; CryptoPP::FixedRounds<16>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$FixedRounds@$0BA@@CryptoPP@@8		; CryptoPP::FixedRounds<16>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8	; CryptoPP::FixedRounds<16>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R19?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8	; CryptoPP::FixedRounds<16>::`RTTI Base Class Descriptor at (10,-1,0,64)'
PUBLIC	??_R0?AVEnc@Twofish@CryptoPP@@@8		; CryptoPP::Twofish::Enc `RTTI Type Descriptor'
PUBLIC	??_R3Enc@Twofish@CryptoPP@@8			; CryptoPP::Twofish::Enc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Enc@Twofish@CryptoPP@@8			; CryptoPP::Twofish::Enc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Enc@Twofish@CryptoPP@@8		; CryptoPP::Twofish::Enc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc> `RTTI Type Descriptor'
PUBLIC	??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::`RTTI Base Class Array'
PUBLIC	??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBase@XTEA@CryptoPP@@@8			; CryptoPP::XTEA::Base `RTTI Type Descriptor'
PUBLIC	??_R3Base@XTEA@CryptoPP@@8			; CryptoPP::XTEA::Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Base@XTEA@CryptoPP@@8			; CryptoPP::XTEA::Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8		; CryptoPP::XTEA::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > `RTTI Type Descriptor'
PUBLIC	??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> `RTTI Type Descriptor'
PUBLIC	??_R3?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@XTEA_Info@CryptoPP@@8		; CryptoPP::XTEA_Info::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUXTEA_Info@CryptoPP@@@8			; CryptoPP::XTEA_Info `RTTI Type Descriptor'
PUBLIC	??_R3XTEA_Info@CryptoPP@@8			; CryptoPP::XTEA_Info::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XTEA_Info@CryptoPP@@8			; CryptoPP::XTEA_Info::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@XTEA_Info@CryptoPP@@8		; CryptoPP::XTEA_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8	; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8	; CryptoPP::FixedBlockSize<8> `RTTI Type Descriptor'
PUBLIC	??_R3?$FixedBlockSize@$07@CryptoPP@@8		; CryptoPP::FixedBlockSize<8>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$FixedBlockSize@$07@CryptoPP@@8		; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Array'
PUBLIC	??_R10?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
PUBLIC	??_R0?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<16,4,0> `RTTI Type Descriptor'
PUBLIC	??_R3?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8	; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8	; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R11?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Descriptor at (2,-1,0,64)'
PUBLIC	??_R0?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@@8 ; CryptoPP::VariableRounds<32,1,2147483647> `RTTI Type Descriptor'
PUBLIC	??_R3?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8	; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R18?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Descriptor at (9,-1,0,64)'
PUBLIC	??_R19?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Descriptor at (10,-1,0,64)'
PUBLIC	??_R0?AVEnc@XTEA@CryptoPP@@@8			; CryptoPP::XTEA::Enc `RTTI Type Descriptor'
PUBLIC	??_R3Enc@XTEA@CryptoPP@@8			; CryptoPP::XTEA::Enc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Enc@XTEA@CryptoPP@@8			; CryptoPP::XTEA::Enc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Enc@XTEA@CryptoPP@@8		; CryptoPP::XTEA::Enc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc> `RTTI Type Descriptor'
PUBLIC	??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::`RTTI Base Class Array'
PUBLIC	??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8 ; CryptoPP::AdditiveCipherAbstractPolicy `RTTI Type Descriptor'
PUBLIC	??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8	; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AdditiveCipherAbstractPolicy@CryptoPP@@8	; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4AlgorithmParametersBase@CryptoPP@@6B@	; CryptoPP::AlgorithmParametersBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAlgorithmParametersBase@CryptoPP@@@8	; CryptoPP::AlgorithmParametersBase `RTTI Type Descriptor'
PUBLIC	??_R3AlgorithmParametersBase@CryptoPP@@8	; CryptoPP::AlgorithmParametersBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AlgorithmParametersBase@CryptoPP@@8	; CryptoPP::AlgorithmParametersBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Complete Object Locator'
PUBLIC	??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter> `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCipherModeBase@CryptoPP@@@8		; CryptoPP::CipherModeBase `RTTI Type Descriptor'
PUBLIC	??_R3CipherModeBase@CryptoPP@@8			; CryptoPP::CipherModeBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CipherModeBase@CryptoPP@@8			; CryptoPP::CipherModeBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8	; CryptoPP::CipherModeBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy> `RTTI Type Descriptor'
PUBLIC	??_R3?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Descriptor at (28,-1,0,64)'
PUBLIC	??_R0?AVCTR_ModePolicy@CryptoPP@@@8		; CryptoPP::CTR_ModePolicy `RTTI Type Descriptor'
PUBLIC	??_R3CTR_ModePolicy@CryptoPP@@8			; CryptoPP::CTR_ModePolicy::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTR_ModePolicy@CryptoPP@@8			; CryptoPP::CTR_ModePolicy::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8	; CryptoPP::CTR_ModePolicy::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> `RTTI Type Descriptor'
PUBLIC	??_R3?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> > `RTTI Type Descriptor'
PUBLIC	??_R3?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1DA@?0A@EA@RandomNumberGenerator@CryptoPP@@8 ; CryptoPP::RandomNumberGenerator::`RTTI Base Class Descriptor at (48,-1,0,64)'
PUBLIC	??_R1DA@?0A@EC@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (48,-1,0,66)'
PUBLIC	??_R1DA@?0A@EC@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (48,-1,0,66)'
PUBLIC	??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> `RTTI Type Descriptor'
PUBLIC	??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1EJ@?0A@EN@Empty@CryptoPP@@8		; CryptoPP::Empty::`RTTI Base Class Descriptor at (73,-1,0,77)'
PUBLIC	??_R0?AVEmpty@CryptoPP@@@8			; CryptoPP::Empty `RTTI Type Descriptor'
PUBLIC	??_R3Empty@CryptoPP@@8				; CryptoPP::Empty::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Empty@CryptoPP@@8				; CryptoPP::Empty::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Empty@CryptoPP@@8			; CryptoPP::Empty::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFilter@CryptoPP@@@8			; CryptoPP::Filter `RTTI Type Descriptor'
PUBLIC	??_R3Filter@CryptoPP@@8				; CryptoPP::Filter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Filter@CryptoPP@@8				; CryptoPP::Filter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Filter@CryptoPP@@8		; CryptoPP::Filter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EA@NotCopyable@CryptoPP@@8		; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AVNotCopyable@CryptoPP@@@8		; CryptoPP::NotCopyable `RTTI Type Descriptor'
PUBLIC	??_R3NotCopyable@CryptoPP@@8			; CryptoPP::NotCopyable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NotCopyable@CryptoPP@@8			; CryptoPP::NotCopyable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NotCopyable@CryptoPP@@8		; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R4StringStore@CryptoPP@@6BAlgorithm@1@@	; CryptoPP::StringStore::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringStore@CryptoPP@@@8		; CryptoPP::StringStore `RTTI Type Descriptor'
PUBLIC	??_R3StringStore@CryptoPP@@8			; CryptoPP::StringStore::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringStore@CryptoPP@@8			; CryptoPP::StringStore::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringStore@CryptoPP@@8		; CryptoPP::StringStore::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringStore@CryptoPP@@6BWaitable@1@@	; CryptoPP::StringStore::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSource@CryptoPP@@@8			; CryptoPP::Source `RTTI Type Descriptor'
PUBLIC	??_R3Source@CryptoPP@@8				; CryptoPP::Source::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Source@CryptoPP@@8				; CryptoPP::Source::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Source@CryptoPP@@8		; CryptoPP::Source::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter> `RTTI Type Descriptor'
PUBLIC	??_R3?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Base Class Array'
PUBLIC	??_R4InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Complete Object Locator'
PUBLIC	??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringSource@CryptoPP@@6BAlgorithm@1@@	; CryptoPP::StringSource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringSource@CryptoPP@@@8		; CryptoPP::StringSource `RTTI Type Descriptor'
PUBLIC	??_R3StringSource@CryptoPP@@8			; CryptoPP::StringSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringSource@CryptoPP@@8			; CryptoPP::StringSource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringSource@CryptoPP@@8		; CryptoPP::StringSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore> `RTTI Type Descriptor'
PUBLIC	??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Base Class Array'
PUBLIC	??_R4StringSource@CryptoPP@@6BWaitable@1@@	; CryptoPP::StringSource::`RTTI Complete Object Locator'
PUBLIC	??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Complete Object Locator'
PUBLIC	??_R4AutoSeededRandomPool@CryptoPP@@6B@		; CryptoPP::AutoSeededRandomPool::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAutoSeededRandomPool@CryptoPP@@@8	; CryptoPP::AutoSeededRandomPool `RTTI Type Descriptor'
PUBLIC	??_R3AutoSeededRandomPool@CryptoPP@@8		; CryptoPP::AutoSeededRandomPool::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AutoSeededRandomPool@CryptoPP@@8		; CryptoPP::AutoSeededRandomPool::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AutoSeededRandomPool@CryptoPP@@8	; CryptoPP::AutoSeededRandomPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@RandomPool@CryptoPP@@8		; CryptoPP::RandomPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVRandomPool@CryptoPP@@@8			; CryptoPP::RandomPool `RTTI Type Descriptor'
PUBLIC	??_R3RandomPool@CryptoPP@@8			; CryptoPP::RandomPool::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RandomPool@CryptoPP@@8			; CryptoPP::RandomPool::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@NotCopyable@CryptoPP@@8		; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > `RTTI Type Descriptor'
PUBLIC	??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1EM@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Base Class Descriptor at (76,-1,0,77)'
PUBLIC	??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> > `RTTI Type Descriptor'
PUBLIC	??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Array'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > `RTTI Type Descriptor'
PUBLIC	??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1FA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Base Class Descriptor at (80,-1,0,77)'
PUBLIC	??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> > `RTTI Type Descriptor'
PUBLIC	??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Array'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > `RTTI Type Descriptor'
PUBLIC	??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1FA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Base Class Descriptor at (80,-1,0,77)'
PUBLIC	??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> > `RTTI Type Descriptor'
PUBLIC	??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Array'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@41efffffffe00000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__errno:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?uncaught_exceptions@std@@YAHXZ:PROC		; std::uncaught_exceptions
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	___std_type_info_compare:PROC
EXTRN	___std_type_info_name:PROC
EXTRN	??_EException@CryptoPP@@UAEPAXI@Z:PROC		; CryptoPP::Exception::`vector deleting destructor'
EXTRN	??_EInvalidArgument@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::InvalidArgument::`vector deleting destructor'
EXTRN	??_ENotImplemented@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::NotImplemented::`vector deleting destructor'
EXTRN	??_EValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::`vector deleting destructor'
EXTRN	??_ENameValuePairs@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::NameValuePairs::`vector deleting destructor'
EXTRN	??0Algorithm@CryptoPP@@QAE@_N@Z:PROC		; CryptoPP::Algorithm::Algorithm
EXTRN	?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z:PROC ; CryptoPP::SimpleKeyingInterface::SetKey
EXTRN	?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z:PROC ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV
EXTRN	?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z:PROC ; CryptoPP::SimpleKeyingInterface::GetNextIV
EXTRN	?OptimalDataAlignment@BlockTransformation@CryptoPP@@UBEIXZ:PROC ; CryptoPP::BlockTransformation::OptimalDataAlignment
EXTRN	?AdvancedProcessBlocks@BlockTransformation@CryptoPP@@UBEIPBE0PAEII@Z:PROC ; CryptoPP::BlockTransformation::AdvancedProcessBlocks
EXTRN	?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEIPAEIPBEI@Z:PROC ; CryptoPP::StreamTransformation::ProcessLastBlock
EXTRN	?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ:PROC ; CryptoPP::RandomNumberGenerator::GenerateByte
EXTRN	?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ:PROC ; CryptoPP::RandomNumberGenerator::GenerateBit
EXTRN	?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z:PROC ; CryptoPP::RandomNumberGenerator::GenerateWord32
EXTRN	?GenerateBlock@RandomNumberGenerator@CryptoPP@@UAEXPAEI@Z:PROC ; CryptoPP::RandomNumberGenerator::GenerateBlock
EXTRN	?GenerateIntoBufferedTransformation@RandomNumberGenerator@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z:PROC ; CryptoPP::RandomNumberGenerator::GenerateIntoBufferedTransformation
EXTRN	?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z:PROC ; CryptoPP::RandomNumberGenerator::DiscardBytes
EXTRN	?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ:PROC ; CryptoPP::BufferedTransformation::GetMaxWaitObjectCount
EXTRN	?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z:PROC ; CryptoPP::BufferedTransformation::GetWaitObjects
EXTRN	?Initialize@BufferedTransformation@CryptoPP@@UAEXABVNameValuePairs@2@H@Z:PROC ; CryptoPP::BufferedTransformation::Initialize
EXTRN	?Flush@BufferedTransformation@CryptoPP@@UAE_N_NH0@Z:PROC ; CryptoPP::BufferedTransformation::Flush
EXTRN	?MessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NH_N@Z:PROC ; CryptoPP::BufferedTransformation::MessageSeriesEnd
EXTRN	?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ:PROC ; CryptoPP::BufferedTransformation::MaxRetrievable
EXTRN	?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ:PROC ; CryptoPP::BufferedTransformation::AnyRetrievable
EXTRN	?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z:PROC ; CryptoPP::BufferedTransformation::Get
EXTRN	?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z:PROC ; CryptoPP::BufferedTransformation::Get
EXTRN	?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z:PROC ; CryptoPP::BufferedTransformation::Peek
EXTRN	?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z:PROC ; CryptoPP::BufferedTransformation::Peek
EXTRN	?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z:PROC ; CryptoPP::BufferedTransformation::Skip
EXTRN	?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ:PROC ; CryptoPP::BufferedTransformation::TotalBytesRetrievable
EXTRN	?NumberOfMessages@BufferedTransformation@CryptoPP@@UBEIXZ:PROC ; CryptoPP::BufferedTransformation::NumberOfMessages
EXTRN	?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ:PROC ; CryptoPP::BufferedTransformation::AnyMessages
EXTRN	?GetNextMessage@BufferedTransformation@CryptoPP@@UAE_NXZ:PROC ; CryptoPP::BufferedTransformation::GetNextMessage
EXTRN	?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z:PROC ; CryptoPP::BufferedTransformation::SkipMessages
EXTRN	?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ:PROC ; CryptoPP::BufferedTransformation::SkipAll
EXTRN	?TransferMessagesTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@AAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::BufferedTransformation::TransferMessagesTo2
EXTRN	?TransferAllTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::BufferedTransformation::TransferAllTo2
EXTRN	?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z:PROC ; CryptoPP::BufferedTransformation::ChannelCreatePutSpace
EXTRN	?ChannelPut2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z:PROC ; CryptoPP::BufferedTransformation::ChannelPut2
EXTRN	?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z:PROC ; CryptoPP::BufferedTransformation::ChannelPutModifiable2
EXTRN	?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z:PROC ; CryptoPP::BufferedTransformation::ChannelFlush
EXTRN	?ChannelMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z:PROC ; CryptoPP::BufferedTransformation::ChannelMessageSeriesEnd
EXTRN	?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CryptoPP::BufferedTransformation::SetRetrievalChannel
EXTRN	?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z:PROC ; CryptoPP::BufferedTransformation::Attach
EXTRN	?AlignedAllocate@CryptoPP@@YAPAXI@Z:PROC	; CryptoPP::AlignedAllocate
EXTRN	?AlignedDeallocate@CryptoPP@@YAXPAX@Z:PROC	; CryptoPP::AlignedDeallocate
EXTRN	?UnalignedAllocate@CryptoPP@@YAPAXI@Z:PROC	; CryptoPP::UnalignedAllocate
EXTRN	?UnalignedDeallocate@CryptoPP@@YAXPAX@Z:PROC	; CryptoPP::UnalignedDeallocate
EXTRN	?GetNextMessage@Store@CryptoPP@@UAE_NXZ:PROC	; CryptoPP::Store::GetNextMessage
EXTRN	?UncheckedSetKey@Base@Camellia@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z:PROC ; CryptoPP::Camellia::Base::UncheckedSetKey
EXTRN	?ProcessAndXorBlock@Base@Camellia@CryptoPP@@UBEXPBE0PAE@Z:PROC ; CryptoPP::Camellia::Base::ProcessAndXorBlock
EXTRN	?UncheckedSetKey@Base@Twofish@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z:PROC ; CryptoPP::Twofish::Base::UncheckedSetKey
EXTRN	?ProcessAndXorBlock@Enc@Twofish@CryptoPP@@UBEXPBE0PAE@Z:PROC ; CryptoPP::Twofish::Enc::ProcessAndXorBlock
EXTRN	?UncheckedSetKey@Base@XTEA@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z:PROC ; CryptoPP::XTEA::Base::UncheckedSetKey
EXTRN	?ProcessAndXorBlock@Enc@XTEA@CryptoPP@@UBEXPBE0PAE@Z:PROC ; CryptoPP::XTEA::Enc::ProcessAndXorBlock
EXTRN	?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; stl_lowers
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	?AllocBuffer@CLZObject@@QAEXK@Z:PROC		; CLZObject::AllocBuffer
EXTRN	?random_range@@YAJJJ@Z:PROC			; random_range
EXTRN	?AssignIntToInteger@CryptoPP@@YA_NABVtype_info@@PAXPBX@Z:PROC ; CryptoPP::AssignIntToInteger
EXTRN	??_EParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`vector deleting destructor'
EXTRN	??_EAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::AlgorithmParametersBase::`vector deleting destructor'
EXTRN	??_E?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`vector deleting destructor'
EXTRN	??0AlgorithmParameters@CryptoPP@@QAE@XZ:PROC	; CryptoPP::AlgorithmParameters::AlgorithmParameters
EXTRN	??0AlgorithmParameters@CryptoPP@@QAE@ABV01@@Z:PROC ; CryptoPP::AlgorithmParameters::AlgorithmParameters
EXTRN	?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ:PROC ; CryptoPP::CipherModeBase::ResizeBuffers
EXTRN	?IncrementCounterBy256@CTR_ModePolicy@CryptoPP@@MAEXXZ:PROC ; CryptoPP::CTR_ModePolicy::IncrementCounterBy256
EXTRN	?OperateKeystream@CTR_ModePolicy@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z:PROC ; CryptoPP::CTR_ModePolicy::OperateKeystream
EXTRN	?CipherResynchronize@CTR_ModePolicy@CryptoPP@@MAEXPAEPBEI@Z:PROC ; CryptoPP::CTR_ModePolicy::CipherResynchronize
EXTRN	?SeekToIteration@CTR_ModePolicy@CryptoPP@@MAEX_K@Z:PROC ; CryptoPP::CTR_ModePolicy::SeekToIteration
EXTRN	?GenerateBlock@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEI@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::GenerateBlock
EXTRN	?ProcessData@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEPBEI@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::ProcessData
EXTRN	?Resynchronize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPBEH@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::Resynchronize
EXTRN	?Seek@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEX_K@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::Seek
EXTRN	?UncheckedSetKey@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@MAEXPBEIABVNameValuePairs@2@@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::UncheckedSetKey
EXTRN	??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
EXTRN	??0Filter@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z:PROC ; CryptoPP::Filter::Filter
EXTRN	?AttachedTransformation@Filter@CryptoPP@@UAEPAVBufferedTransformation@2@XZ:PROC ; CryptoPP::Filter::AttachedTransformation
EXTRN	?AttachedTransformation@Filter@CryptoPP@@UBEPBVBufferedTransformation@2@XZ:PROC ; CryptoPP::Filter::AttachedTransformation
EXTRN	?Detach@Filter@CryptoPP@@UAEXPAVBufferedTransformation@2@@Z:PROC ; CryptoPP::Filter::Detach
EXTRN	?TransferTo2@Filter@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::Filter::TransferTo2
EXTRN	?CopyRangeTo2@Filter@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::Filter::CopyRangeTo2
EXTRN	?Initialize@Filter@CryptoPP@@UAEXABVNameValuePairs@2@H@Z:PROC ; CryptoPP::Filter::Initialize
EXTRN	?Flush@Filter@CryptoPP@@UAE_N_NH0@Z:PROC	; CryptoPP::Filter::Flush
EXTRN	?MessageSeriesEnd@Filter@CryptoPP@@UAE_NH_N@Z:PROC ; CryptoPP::Filter::MessageSeriesEnd
EXTRN	?NewDefaultAttachment@Filter@CryptoPP@@MBEPAVBufferedTransformation@2@XZ:PROC ; CryptoPP::Filter::NewDefaultAttachment
EXTRN	??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@@Z:PROC ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
EXTRN	??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vector deleting destructor'
EXTRN	?TransferTo2@StringStore@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::StringStore::TransferTo2
EXTRN	?CopyRangeTo2@StringStore@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::StringStore::CopyRangeTo2
EXTRN	?StoreInitialize@StringStore@CryptoPP@@EAEXABVNameValuePairs@2@@Z:PROC ; CryptoPP::StringStore::StoreInitialize
EXTRN	??_EStringStore@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::StringStore::`vector deleting destructor'
EXTRN	??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vector deleting destructor'
EXTRN	??_EStringSource@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::StringSource::`vector deleting destructor'
EXTRN	??0RandomPool@CryptoPP@@QAE@XZ:PROC		; CryptoPP::RandomPool::RandomPool
EXTRN	?IncorporateEntropy@RandomPool@CryptoPP@@UAEXPBEI@Z:PROC ; CryptoPP::RandomPool::IncorporateEntropy
EXTRN	?GenerateIntoBufferedTransformation@RandomPool@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z:PROC ; CryptoPP::RandomPool::GenerateIntoBufferedTransformation
EXTRN	?Reseed@AutoSeededRandomPool@CryptoPP@@QAEX_NI@Z:PROC ; CryptoPP::AutoSeededRandomPool::Reseed
EXTRN	??_EAutoSeededRandomPool@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::AutoSeededRandomPool::`vector deleting destructor'
EXTRN	??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vector deleting destructor'
EXTRN	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
EXTRN	??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vector deleting destructor'
EXTRN	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
EXTRN	??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vector deleting destructor'
EXTRN	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
EXTRN	??_EInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`vector deleting destructor'
EXTRN	??_EInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	__dtol3:PROC
EXTRN	_ceil:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?__type_info_root_node@@3U__type_info_node@@A:BYTE ; __type_info_root_node
EXTRN	?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B:BYTE ; CryptoPP::DEFAULT_CHANNEL
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
_BSS	SEGMENT
?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A DB 080H DUP (?) ; `EterPackPolicy_CSHybridCrypt::GenerateCryptKey'::`2'::rnd
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 01H DUP (?) ; `EterPackPolicy_CSHybridCrypt::GenerateCryptKey'::`2'::$TSS0
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@41efffffffe00000
CONST	SEGMENT
__real@41efffffffe00000 DQ 041efffffffe00000r	; 4.29497e+09
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	030H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	01cH
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1EJ@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	011H
	DD	FLAT:??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@Crypt'
	DB	'oPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAddit'
	DB	'iveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP'
	DB	'@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherMode'
	DB	'FinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@'
	DB	'CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@'
	DB	'@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveC'
	DB	'ipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2'
	DB	'@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	010H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@Cry'
	DB	'ptoPP@@@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1FA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1FA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Base Class Descriptor at (80,-1,0,77)'
	DD	00H
	DD	050H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	012H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Array'
	DD	FLAT:??_R1FA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1EJ@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	013H
	DD	FLAT:??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCiphe'
	DB	'rFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHo'
	DB	'lder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPo'
	DB	'licyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModeP'
	DB	'olicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@Cry'
	DB	'ptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	030H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	01cH
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1EJ@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	011H
	DD	FLAT:??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@Crypt'
	DB	'oPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAddit'
	DB	'iveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP'
	DB	'@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherMode'
	DB	'FinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofi'
	DB	'sh@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@Crypto'
	DB	'PP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditi'
	DB	'veCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@'
	DB	'@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	010H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@'
	DB	'CryptoPP@@@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1FA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1FA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Base Class Descriptor at (80,-1,0,77)'
	DD	00H
	DD	050H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	012H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Array'
	DD	FLAT:??_R1FA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1EJ@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	013H
	DD	FLAT:??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCiphe'
	DB	'rFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolic'
	DB	'yHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$Abstrac'
	DB	'tPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_Mo'
	DB	'dePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@'
	DB	'CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	030H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	01cH
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1EJ@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	011H
	DD	FLAT:??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@Crypt'
	DB	'oPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAddit'
	DB	'iveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP'
	DB	'@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherMode'
	DB	'FinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Came'
	DB	'llia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@Cryp'
	DB	'toPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAddi'
	DB	'tiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoP'
	DB	'P@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	010H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camelli'
	DB	'a@CryptoPP@@@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1EM@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1EM@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Base Class Descriptor at (76,-1,0,77)'
	DD	00H
	DD	04cH
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	012H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Array'
	DD	FLAT:??_R1EM@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1EJ@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	013H
	DD	FLAT:??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCiphe'
	DB	'rFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePol'
	DB	'icyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$Abstr'
	DB	'actPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_'
	DB	'ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2'
	DB	'@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@NotCopyable@CryptoPP@@8 DD FLAT:??_R0?AVNotCopyable@CryptoPP@@@8 ; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2RandomPool@CryptoPP@@8
rdata$r	SEGMENT
??_R2RandomPool@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@RandomPool@CryptoPP@@8 ; CryptoPP::RandomPool::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3RandomPool@CryptoPP@@8
rdata$r	SEGMENT
??_R3RandomPool@CryptoPP@@8 DD 00H			; CryptoPP::RandomPool::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2RandomPool@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRandomPool@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVRandomPool@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::RandomPool `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRandomPool@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@RandomPool@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RandomPool@CryptoPP@@8 DD FLAT:??_R0?AVRandomPool@CryptoPP@@@8 ; CryptoPP::RandomPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RandomPool@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AutoSeededRandomPool@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AutoSeededRandomPool@CryptoPP@@8 DD FLAT:??_R0?AVAutoSeededRandomPool@CryptoPP@@@8 ; CryptoPP::AutoSeededRandomPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AutoSeededRandomPool@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2AutoSeededRandomPool@CryptoPP@@8
rdata$r	SEGMENT
??_R2AutoSeededRandomPool@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@AutoSeededRandomPool@CryptoPP@@8 ; CryptoPP::AutoSeededRandomPool::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@RandomPool@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3AutoSeededRandomPool@CryptoPP@@8
rdata$r	SEGMENT
??_R3AutoSeededRandomPool@CryptoPP@@8 DD 00H		; CryptoPP::AutoSeededRandomPool::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2AutoSeededRandomPool@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAutoSeededRandomPool@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVAutoSeededRandomPool@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AutoSeededRandomPool `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAutoSeededRandomPool@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4AutoSeededRandomPool@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4AutoSeededRandomPool@CryptoPP@@6B@ DD 00H		; CryptoPP::AutoSeededRandomPool::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAutoSeededRandomPool@CryptoPP@@@8
	DD	FLAT:??_R3AutoSeededRandomPool@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@
rdata$r	SEGMENT
??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ DD 00H ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
rdata$r	SEGMENT
??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ DD 00H ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4StringSource@CryptoPP@@6BWaitable@1@@
rdata$r	SEGMENT
??_R4StringSource@CryptoPP@@6BWaitable@1@@ DD 00H	; CryptoPP::StringSource::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVStringSource@CryptoPP@@@8
	DD	FLAT:??_R3StringSource@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Source@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringSource@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringSource@CryptoPP@@8 DD FLAT:??_R0?AVStringSource@CryptoPP@@@8 ; CryptoPP::StringSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringSource@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2StringSource@CryptoPP@@8
rdata$r	SEGMENT
??_R2StringSource@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@StringSource@CryptoPP@@8 ; CryptoPP::StringSource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Source@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3StringSource@CryptoPP@@8
rdata$r	SEGMENT
??_R3StringSource@CryptoPP@@8 DD 00H			; CryptoPP::StringSource::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2StringSource@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringSource@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVStringSource@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::StringSource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringSource@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4StringSource@CryptoPP@@6BAlgorithm@1@@
rdata$r	SEGMENT
??_R4StringSource@CryptoPP@@6BAlgorithm@1@@ DD 00H	; CryptoPP::StringSource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringSource@CryptoPP@@@8
	DD	FLAT:??_R3StringSource@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@NotImplemented@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ DD 00H ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Source@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Source@CryptoPP@@8 DD FLAT:??_R0?AVSource@CryptoPP@@@8 ; CryptoPP::Source::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Source@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Source@CryptoPP@@8
rdata$r	SEGMENT
??_R2Source@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Source@CryptoPP@@8 ; CryptoPP::Source::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Source@CryptoPP@@8
rdata$r	SEGMENT
??_R3Source@CryptoPP@@8 DD 00H				; CryptoPP::Source::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2Source@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSource@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVSource@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Source `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSource@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4StringStore@CryptoPP@@6BWaitable@1@@
rdata$r	SEGMENT
??_R4StringStore@CryptoPP@@6BWaitable@1@@ DD 00H	; CryptoPP::StringStore::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVStringStore@CryptoPP@@@8
	DD	FLAT:??_R3StringStore@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringStore@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringStore@CryptoPP@@8 DD FLAT:??_R0?AVStringStore@CryptoPP@@@8 ; CryptoPP::StringStore::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringStore@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2StringStore@CryptoPP@@8
rdata$r	SEGMENT
??_R2StringStore@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@StringStore@CryptoPP@@8 ; CryptoPP::StringStore::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Store@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3StringStore@CryptoPP@@8
rdata$r	SEGMENT
??_R3StringStore@CryptoPP@@8 DD 00H			; CryptoPP::StringStore::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2StringStore@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringStore@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVStringStore@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::StringStore `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringStore@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4StringStore@CryptoPP@@6BAlgorithm@1@@
rdata$r	SEGMENT
??_R4StringStore@CryptoPP@@6BAlgorithm@1@@ DD 00H	; CryptoPP::StringStore::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringStore@CryptoPP@@@8
	DD	FLAT:??_R3StringStore@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
rdata$r	SEGMENT
??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ DD 00H ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8
	DD	FLAT:??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 DD FLAT:??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Sink@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 DD 00H ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits'
	DB	'@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
rdata$r	SEGMENT
??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ DD 00H ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8
	DD	FLAT:??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NotCopyable@CryptoPP@@8 DD FLAT:??_R0?AVNotCopyable@CryptoPP@@@8 ; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R2NotCopyable@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@NotCopyable@CryptoPP@@8 ; CryptoPP::NotCopyable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R3NotCopyable@CryptoPP@@8 DD 00H			; CryptoPP::NotCopyable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNotCopyable@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVNotCopyable@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NotCopyable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNotCopyable@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@NotCopyable@CryptoPP@@8 DD FLAT:??_R0?AVNotCopyable@CryptoPP@@@8 ; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Filter@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Filter@CryptoPP@@8 DD FLAT:??_R0?AVFilter@CryptoPP@@@8 ; CryptoPP::Filter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Filter@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Filter@CryptoPP@@8
rdata$r	SEGMENT
??_R2Filter@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8 ; CryptoPP::Filter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Filter@CryptoPP@@8
rdata$r	SEGMENT
??_R3Filter@CryptoPP@@8 DD 00H				; CryptoPP::Filter::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2Filter@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFilter@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVFilter@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Filter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFilter@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
rdata$r	SEGMENT
??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
	DD	030H
	DD	00H
	DD	FLAT:??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
rdata$r	SEGMENT
??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
	DD	01cH
	DD	00H
	DD	FLAT:??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
rdata$r	SEGMENT
??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Empty@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Empty@CryptoPP@@8 DD FLAT:??_R0?AVEmpty@CryptoPP@@@8 ; CryptoPP::Empty::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Empty@CryptoPP@@8
rdata$r	SEGMENT
??_R2Empty@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Empty@CryptoPP@@8 ; CryptoPP::Empty::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Empty@CryptoPP@@8
rdata$r	SEGMENT
??_R3Empty@CryptoPP@@8 DD 00H				; CryptoPP::Empty::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVEmpty@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVEmpty@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Empty `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVEmpty@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1EJ@?0A@EN@Empty@CryptoPP@@8
rdata$r	SEGMENT
??_R1EJ@?0A@EN@Empty@CryptoPP@@8 DD FLAT:??_R0?AVEmpty@CryptoPP@@@8 ; CryptoPP::Empty::`RTTI Base Class Descriptor at (73,-1,0,77)'
	DD	00H
	DD	049H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0fH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1EJ@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	010H
	DD	FLAT:??_R2?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveC'
	DB	'ipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstract'
	DB	'Policy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCip'
	DB	'herAbstractPolicy@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1DA@?0A@EC@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R1DA@?0A@EC@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (48,-1,0,66)'
	DD	00H
	DD	030H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1DA@?0A@EC@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R1DA@?0A@EC@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (48,-1,0,66)'
	DD	01H
	DD	030H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1DA@?0A@EA@RandomNumberGenerator@CryptoPP@@8
rdata$r	SEGMENT
??_R1DA@?0A@EA@RandomNumberGenerator@CryptoPP@@8 DD FLAT:??_R0?AVRandomNumberGenerator@CryptoPP@@@8 ; CryptoPP::RandomNumberGenerator::`RTTI Base Class Descriptor at (48,-1,0,64)'
	DD	02H
	DD	030H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RandomNumberGenerator@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0dH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1DA@?0A@EC@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0eH
	DD	FLAT:??_R2?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAd'
	DB	'ditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@Crypt'
	DB	'oPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 DD 00H ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy'
	DB	'@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8 DD FLAT:??_R0?AVCTR_ModePolicy@CryptoPP@@@8 ; CryptoPP::CTR_ModePolicy::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTR_ModePolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2CTR_ModePolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R2CTR_ModePolicy@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8 ; CryptoPP::CTR_ModePolicy::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3CTR_ModePolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R3CTR_ModePolicy@CryptoPP@@8 DD 00H			; CryptoPP::CTR_ModePolicy::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2CTR_ModePolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTR_ModePolicy@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVCTR_ModePolicy@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::CTR_ModePolicy `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTR_ModePolicy@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8 DD FLAT:??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Descriptor at (28,-1,0,64)'
	DD	00H
	DD	01cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BM@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPo'
	DB	'licy@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8 DD FLAT:??_R0?AVCipherModeBase@CryptoPP@@@8 ; CryptoPP::CipherModeBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CipherModeBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2CipherModeBase@CryptoPP@@8
rdata$r	SEGMENT
??_R2CipherModeBase@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8 ; CryptoPP::CipherModeBase::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3CipherModeBase@CryptoPP@@8
rdata$r	SEGMENT
??_R3CipherModeBase@CryptoPP@@8 DD 00H			; CryptoPP::CipherModeBase::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CipherModeBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCipherModeBase@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVCipherModeBase@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::CipherModeBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCipherModeBase@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmParametersTemplate@VConstByteArrayParamet'
	DB	'er@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ DD 00H ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 DD FLAT:??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R2ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ DD 00H ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8
	DD	FLAT:??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithmParametersBase@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R2AlgorithmParametersBase@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R3AlgorithmParametersBase@CryptoPP@@8 DD 00H		; CryptoPP::AlgorithmParametersBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAlgorithmParametersBase@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVAlgorithmParametersBase@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmParametersBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAlgorithmParametersBase@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4AlgorithmParametersBase@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4AlgorithmParametersBase@CryptoPP@@6B@ DD 00H	; CryptoPP::AlgorithmParametersBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAlgorithmParametersBase@CryptoPP@@@8
	DD	FLAT:??_R3AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8 DD FLAT:??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R2AdditiveCipherAbstractPolicy@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8 DD 00H	; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AdditiveCipherAbstractPolicy `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUAdditiveCipherAbstractPolicy@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Enc@XTEA@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 DD 00H ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	010H
	DD	FLAT:??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@Cry'
	DB	'ptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0fH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	010H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Enc@XTEA@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	011H
	DD	FLAT:??_R2?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP'
	DB	'@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Enc@XTEA@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Enc@XTEA@CryptoPP@@8 DD FLAT:??_R0?AVEnc@XTEA@CryptoPP@@@8 ; CryptoPP::XTEA::Enc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0eH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Enc@XTEA@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Enc@XTEA@CryptoPP@@8
rdata$r	SEGMENT
??_R2Enc@XTEA@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Enc@XTEA@CryptoPP@@8 ; CryptoPP::XTEA::Enc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Enc@XTEA@CryptoPP@@8
rdata$r	SEGMENT
??_R3Enc@XTEA@CryptoPP@@8 DD 00H			; CryptoPP::XTEA::Enc::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0fH
	DD	FLAT:??_R2Enc@XTEA@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVEnc@XTEA@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVEnc@XTEA@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::XTEA::Enc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVEnc@XTEA@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R19?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	SEGMENT
??_R19?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Descriptor at (10,-1,0,64)'
	DD	00H
	DD	0aH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R18?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R18?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Descriptor at (9,-1,0,64)'
	DD	00H
	DD	09H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8 ; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 DD 00H ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::VariableRounds<32,1,2147483647> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R11?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	SEGMENT
??_R11?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Descriptor at (2,-1,0,64)'
	DD	00H
	DD	02H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 DD 00H	; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::FixedKeyLength<16,4,0> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R10?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R10?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$FixedBlockSize@$07@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8 ; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$FixedBlockSize@$07@CryptoPP@@8 DD 00H		; CryptoPP::FixedBlockSize<8>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::FixedBlockSize<8> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$FixedBlockSize@$07@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8 ; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XTEA_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XTEA_Info@CryptoPP@@8 DD FLAT:??_R0?AUXTEA_Info@CryptoPP@@@8 ; CryptoPP::XTEA_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XTEA_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2XTEA_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R2XTEA_Info@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@XTEA_Info@CryptoPP@@8 ; CryptoPP::XTEA_Info::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R10?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R11?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3XTEA_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R3XTEA_Info@CryptoPP@@8 DD 00H			; CryptoPP::XTEA_Info::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2XTEA_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUXTEA_Info@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AUXTEA_Info@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::XTEA_Info `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUXTEA_Info@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R17?0A@EA@XTEA_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R17?0A@EA@XTEA_Info@CryptoPP@@8 DD FLAT:??_R0?AUXTEA_Info@CryptoPP@@@8 ; CryptoPP::XTEA_Info::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	03H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XTEA_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 DD 00H ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@Cryp'
	DB	'toPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0bH
	DD	FLAT:??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher'
	DB	'@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0aH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0cH
	DD	FLAT:??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoB'
	DB	'ases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@Cryp'
	DB	'toPP@@V12@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0bH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0dH
	DD	FLAT:??_R2?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@'
	DB	'2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0cH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8 DD FLAT:??_R0?AVBase@XTEA@CryptoPP@@@8 ; CryptoPP::XTEA::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0dH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Base@XTEA@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Base@XTEA@CryptoPP@@8
rdata$r	SEGMENT
??_R2Base@XTEA@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8 ; CryptoPP::XTEA::Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Base@XTEA@CryptoPP@@8
rdata$r	SEGMENT
??_R3Base@XTEA@CryptoPP@@8 DD 00H			; CryptoPP::XTEA::Base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0eH
	DD	FLAT:??_R2Base@XTEA@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBase@XTEA@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVBase@XTEA@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::XTEA::Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBase@XTEA@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Enc@Twofish@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 DD 00H ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	010H
	DD	FLAT:??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@'
	DB	'CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0fH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	010H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Enc@Twofish@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	011H
	DD	FLAT:??_R2?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@Crypt'
	DB	'oPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Enc@Twofish@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Enc@Twofish@CryptoPP@@8 DD FLAT:??_R0?AVEnc@Twofish@CryptoPP@@@8 ; CryptoPP::Twofish::Enc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0eH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Enc@Twofish@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Enc@Twofish@CryptoPP@@8
rdata$r	SEGMENT
??_R2Enc@Twofish@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Enc@Twofish@CryptoPP@@8 ; CryptoPP::Twofish::Enc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Enc@Twofish@CryptoPP@@8
rdata$r	SEGMENT
??_R3Enc@Twofish@CryptoPP@@8 DD 00H			; CryptoPP::Twofish::Enc::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0fH
	DD	FLAT:??_R2Enc@Twofish@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVEnc@Twofish@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVEnc@Twofish@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Twofish::Enc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVEnc@Twofish@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R19?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R19?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedRounds@$0BA@@CryptoPP@@@8 ; CryptoPP::FixedRounds<16>::`RTTI Base Class Descriptor at (10,-1,0,64)'
	DD	00H
	DD	0aH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedRounds@$0BA@@CryptoPP@@@8 ; CryptoPP::FixedRounds<16>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$FixedRounds@$0BA@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8 ; CryptoPP::FixedRounds<16>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$FixedRounds@$0BA@@CryptoPP@@8 DD 00H		; CryptoPP::FixedRounds<16>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$FixedRounds@$0BA@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$FixedRounds@$0BA@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::FixedRounds<16> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$FixedRounds@$0BA@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R11?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R11?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedRounds@$0BA@@CryptoPP@@@8 ; CryptoPP::FixedRounds<16>::`RTTI Base Class Descriptor at (2,-1,0,64)'
	DD	00H
	DD	02H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Twofish_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Twofish_Info@CryptoPP@@8 DD FLAT:??_R0?AUTwofish_Info@CryptoPP@@@8 ; CryptoPP::Twofish_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Twofish_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Twofish_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R2Twofish_Info@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Twofish_Info@CryptoPP@@8 ; CryptoPP::Twofish_Info::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R10?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
	DD	FLAT:??_R11?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Twofish_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R3Twofish_Info@CryptoPP@@8 DD 00H			; CryptoPP::Twofish_Info::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2Twofish_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUTwofish_Info@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AUTwofish_Info@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Twofish_Info `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUTwofish_Info@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R17?0A@EA@Twofish_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R17?0A@EA@Twofish_Info@CryptoPP@@8 DD FLAT:??_R0?AUTwofish_Info@CryptoPP@@@8 ; CryptoPP::Twofish_Info::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	03H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Twofish_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 DD 00H ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@C'
	DB	'ryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0bH
	DD	FLAT:??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher'
	DB	'@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0aH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0cH
	DD	FLAT:??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoB'
	DB	'ases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@C'
	DB	'ryptoPP@@V12@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0bH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0dH
	DD	FLAT:??_R2?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCiph'
	DB	'er@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0cH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8 DD FLAT:??_R0?AVBase@Twofish@CryptoPP@@@8 ; CryptoPP::Twofish::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0dH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Base@Twofish@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Base@Twofish@CryptoPP@@8
rdata$r	SEGMENT
??_R2Base@Twofish@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8 ; CryptoPP::Twofish::Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
	DD	FLAT:??_R19?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Base@Twofish@CryptoPP@@8
rdata$r	SEGMENT
??_R3Base@Twofish@CryptoPP@@8 DD 00H			; CryptoPP::Twofish::Base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0eH
	DD	FLAT:??_R2Base@Twofish@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBase@Twofish@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVBase@Twofish@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Twofish::Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBase@Twofish@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Base@Camellia@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 DD 00H ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0eH
	DD	FLAT:??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camelli'
	DB	'a@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0dH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0eH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Base@Camellia@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0fH
	DD	FLAT:??_R2?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@Cry'
	DB	'ptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Descriptor at (9,-1,0,64)'
	DD	00H
	DD	09H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedBlockSize@$0BA@@CryptoPP@@@8 ; CryptoPP::FixedBlockSize<16>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 DD 00H ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::VariableKeyLength<16,16,32,8,4,0> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@Crypto'
	DB	'PP@@', 00H
data$rs	ENDS
;	COMDAT ??_R10?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R10?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$FixedBlockSize@$0BA@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8 ; CryptoPP::FixedBlockSize<16>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$FixedBlockSize@$0BA@@CryptoPP@@8 DD 00H		; CryptoPP::FixedBlockSize<16>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$FixedBlockSize@$0BA@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$FixedBlockSize@$0BA@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::FixedBlockSize<16> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$FixedBlockSize@$0BA@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedBlockSize@$0BA@@CryptoPP@@@8 ; CryptoPP::FixedBlockSize<16>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Camellia_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Camellia_Info@CryptoPP@@8 DD FLAT:??_R0?AUCamellia_Info@CryptoPP@@@8 ; CryptoPP::Camellia_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Camellia_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Camellia_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R2Camellia_Info@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Camellia_Info@CryptoPP@@8 ; CryptoPP::Camellia_Info::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R10?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Camellia_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R3Camellia_Info@CryptoPP@@8 DD 00H			; CryptoPP::Camellia_Info::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2Camellia_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCamellia_Info@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AUCamellia_Info@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Camellia_Info `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCamellia_Info@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R17?0A@EA@Camellia_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R17?0A@EA@Camellia_Info@CryptoPP@@8 DD FLAT:??_R0?AUCamellia_Info@CryptoPP@@@8 ; CryptoPP::Camellia_Info::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	02H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Camellia_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 DD 00H ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@'
	DB	'CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher'
	DB	'@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0bH
	DD	FLAT:??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoB'
	DB	'ases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@'
	DB	'CryptoPP@@V12@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0aH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0cH
	DD	FLAT:??_R2?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCip'
	DB	'her@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0bH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Base@Camellia@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Base@Camellia@CryptoPP@@8 DD FLAT:??_R0?AVBase@Camellia@CryptoPP@@@8 ; CryptoPP::Camellia::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0cH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Base@Camellia@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Base@Camellia@CryptoPP@@8
rdata$r	SEGMENT
??_R2Base@Camellia@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Base@Camellia@CryptoPP@@8 ; CryptoPP::Camellia::Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R17?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R18?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Base@Camellia@CryptoPP@@8
rdata$r	SEGMENT
??_R3Base@Camellia@CryptoPP@@8 DD 00H			; CryptoPP::Camellia::Base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0dH
	DD	FLAT:??_R2Base@Camellia@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBase@Camellia@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVBase@Camellia@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Camellia::Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBase@Camellia@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 ; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Sink@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 DD 00H	; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Bufferless<CryptoPP::Sink> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@Sink@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Sink@CryptoPP@@8 DD FLAT:??_R0?AVSink@CryptoPP@@@8 ; CryptoPP::Sink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Sink@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Sink@CryptoPP@@8
rdata$r	SEGMENT
??_R2Sink@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Sink@CryptoPP@@8 ; CryptoPP::Sink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Sink@CryptoPP@@8
rdata$r	SEGMENT
??_R3Sink@CryptoPP@@8 DD 00H				; CryptoPP::Sink::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2Sink@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSink@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVSink@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Sink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSink@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@NotImplemented@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ DD 00H ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@'
	DB	'CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransform'
	DB	'ation@CryptoPP@@@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Store@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Store@CryptoPP@@8 DD FLAT:??_R0?AVStore@CryptoPP@@@8 ; CryptoPP::Store::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Store@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Store@CryptoPP@@8
rdata$r	SEGMENT
??_R2Store@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Store@CryptoPP@@8 ; CryptoPP::Store::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Store@CryptoPP@@8
rdata$r	SEGMENT
??_R3Store@CryptoPP@@8 DD 00H				; CryptoPP::Store::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2Store@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStore@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVStore@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Store `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStore@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R13?0A@EC@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EC@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EC@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@StreamTransformation@CryptoPP@@8 DD FLAT:??_R0?AVStreamTransformation@CryptoPP@@@8 ; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	02H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StreamTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8 DD FLAT:??_R0?AVSymmetricCipher@CryptoPP@@@8 ; CryptoPP::SymmetricCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SymmetricCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2SymmetricCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R2SymmetricCipher@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8 ; CryptoPP::SymmetricCipher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3SymmetricCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R3SymmetricCipher@CryptoPP@@8 DD 00H			; CryptoPP::SymmetricCipher::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2SymmetricCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSymmetricCipher@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVSymmetricCipher@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SymmetricCipher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSymmetricCipher@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@BlockTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@BlockTransformation@CryptoPP@@8 DD FLAT:??_R0?AVBlockTransformation@CryptoPP@@@8 ; CryptoPP::BlockTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	02H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BlockTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BlockCipher@CryptoPP@@8 DD FLAT:??_R0?AVBlockCipher@CryptoPP@@@8 ; CryptoPP::BlockCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BlockCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2BlockCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R2BlockCipher@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8 ; CryptoPP::BlockCipher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3BlockCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R3BlockCipher@CryptoPP@@8 DD 00H			; CryptoPP::BlockCipher::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2BlockCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBlockCipher@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVBlockCipher@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBlockCipher@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8 DD FLAT:??_R0?AVStreamTransformation@CryptoPP@@@8 ; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StreamTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R2StreamTransformation@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8 ; CryptoPP::StreamTransformation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R3StreamTransformation@CryptoPP@@8 DD 00H		; CryptoPP::StreamTransformation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2StreamTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStreamTransformation@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVStreamTransformation@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::StreamTransformation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStreamTransformation@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@BlockTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BlockTransformation@CryptoPP@@8 DD FLAT:??_R0?AVBlockTransformation@CryptoPP@@@8 ; CryptoPP::BlockTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BlockTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2BlockTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R2BlockTransformation@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@BlockTransformation@CryptoPP@@8 ; CryptoPP::BlockTransformation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3BlockTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R3BlockTransformation@CryptoPP@@8 DD 00H		; CryptoPP::BlockTransformation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BlockTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBlockTransformation@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVBlockTransformation@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockTransformation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBlockTransformation@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8 DD FLAT:??_R0?AVSimpleKeyingInterface@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimpleKeyingInterface@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2SimpleKeyingInterface@CryptoPP@@8
rdata$r	SEGMENT
??_R2SimpleKeyingInterface@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SimpleKeyingInterface@CryptoPP@@8
rdata$r	SEGMENT
??_R3SimpleKeyingInterface@CryptoPP@@8 DD 00H		; CryptoPP::SimpleKeyingInterface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SimpleKeyingInterface@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimpleKeyingInterface@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVSimpleKeyingInterface@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SimpleKeyingInterface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimpleKeyingInterface@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ValueTypeMismatch@NameValuePairs@CryptoPP@@8 DD FLAT:??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R2ValueTypeMismatch@NameValuePairs@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@ValueTypeMismatch@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8 DD 00H ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ DD 00H ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8
	DD	FLAT:??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NameValuePairs@CryptoPP@@8 DD FLAT:??_R0?AVNameValuePairs@CryptoPP@@@8 ; CryptoPP::NameValuePairs::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R2NameValuePairs@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R3NameValuePairs@CryptoPP@@8 DD 00H			; CryptoPP::NameValuePairs::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNameValuePairs@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVNameValuePairs@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NameValuePairs `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNameValuePairs@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4NameValuePairs@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4NameValuePairs@CryptoPP@@6B@ DD 00H		; CryptoPP::NameValuePairs::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNameValuePairs@CryptoPP@@@8
	DD	FLAT:??_R3NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NotImplemented@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NotImplemented@CryptoPP@@8 DD FLAT:??_R0?AVNotImplemented@CryptoPP@@@8 ; CryptoPP::NotImplemented::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotImplemented@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2NotImplemented@CryptoPP@@8
rdata$r	SEGMENT
??_R2NotImplemented@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@NotImplemented@CryptoPP@@8 ; CryptoPP::NotImplemented::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3NotImplemented@CryptoPP@@8
rdata$r	SEGMENT
??_R3NotImplemented@CryptoPP@@8 DD 00H			; CryptoPP::NotImplemented::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2NotImplemented@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4NotImplemented@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4NotImplemented@CryptoPP@@6B@ DD 00H		; CryptoPP::NotImplemented::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNotImplemented@CryptoPP@@@8
	DD	FLAT:??_R3NotImplemented@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8 DD FLAT:??_R0?AVInvalidArgument@CryptoPP@@@8 ; CryptoPP::InvalidArgument::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidArgument@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidArgument@CryptoPP@@8
rdata$r	SEGMENT
??_R2InvalidArgument@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8 ; CryptoPP::InvalidArgument::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidArgument@CryptoPP@@8
rdata$r	SEGMENT
??_R3InvalidArgument@CryptoPP@@8 DD 00H			; CryptoPP::InvalidArgument::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InvalidArgument@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidArgument@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4InvalidArgument@CryptoPP@@6B@ DD 00H		; CryptoPP::InvalidArgument::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidArgument@CryptoPP@@@8
	DD	FLAT:??_R3InvalidArgument@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@CryptoPP@@8 DD FLAT:??_R0?AVException@CryptoPP@@@8 ; CryptoPP::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@CryptoPP@@8
rdata$r	SEGMENT
??_R2Exception@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8 ; CryptoPP::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@CryptoPP@@8
rdata$r	SEGMENT
??_R3Exception@CryptoPP@@8 DD 00H			; CryptoPP::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4Exception@CryptoPP@@6B@ DD 00H			; CryptoPP::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@CryptoPP@@@8
	DD	FLAT:??_R3Exception@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Waitable@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Waitable@CryptoPP@@8 DD FLAT:??_R0?AVWaitable@CryptoPP@@@8 ; CryptoPP::Waitable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Waitable@CryptoPP@@8
rdata$r	SEGMENT
??_R2Waitable@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Waitable@CryptoPP@@8 ; CryptoPP::Waitable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Waitable@CryptoPP@@8
rdata$r	SEGMENT
??_R3Waitable@CryptoPP@@8 DD 00H			; CryptoPP::Waitable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVWaitable@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVWaitable@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Waitable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVWaitable@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@Waitable@CryptoPP@@8 DD FLAT:??_R0?AVWaitable@CryptoPP@@@8 ; CryptoPP::Waitable::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8 DD FLAT:??_R0?AVBufferedTransformation@CryptoPP@@@8 ; CryptoPP::BufferedTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BufferedTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2BufferedTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R2BufferedTransformation@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8 ; CryptoPP::BufferedTransformation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3BufferedTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R3BufferedTransformation@CryptoPP@@8 DD 00H		; CryptoPP::BufferedTransformation::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2BufferedTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBufferedTransformation@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVBufferedTransformation@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BufferedTransformation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBufferedTransformation@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R2Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R2Clonable@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8 ; CryptoPP::Clonable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R3Clonable@CryptoPP@@8 DD 00H			; CryptoPP::Clonable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVClonable@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVClonable@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Clonable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVClonable@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R2Algorithm@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8 ; CryptoPP::Algorithm::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R3Algorithm@CryptoPP@@8 DD 00H			; CryptoPP::Algorithm::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAlgorithm@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVAlgorithm@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Algorithm `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAlgorithm@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8 DD FLAT:??_R0?AVRandomNumberGenerator@CryptoPP@@@8 ; CryptoPP::RandomNumberGenerator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RandomNumberGenerator@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2RandomNumberGenerator@CryptoPP@@8
rdata$r	SEGMENT
??_R2RandomNumberGenerator@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8 ; CryptoPP::RandomNumberGenerator::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3RandomNumberGenerator@CryptoPP@@8
rdata$r	SEGMENT
??_R3RandomNumberGenerator@CryptoPP@@8 DD 00H		; CryptoPP::RandomNumberGenerator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2RandomNumberGenerator@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRandomNumberGenerator@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVRandomNumberGenerator@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::RandomNumberGenerator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRandomNumberGenerator@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> > * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D'
	DB	'@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0DL@LFCPKOMM@AllocatorBase?3?5requested?5size?5w@
CONST	SEGMENT
??_C@_0DL@LFCPKOMM@AllocatorBase?3?5requested?5size?5w@ DB 'AllocatorBase'
	DB	': requested size would cause integer overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@
CONST	SEGMENT
??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@ DB 'BufferedTransf'
	DB	'ormation: this object doesn''t allow input', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
xdata$x	SEGMENT
__CT??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40 DD 00H
	DD	FLAT:??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUInputRejected@?$InputRejecting@VBufferedTransformati'
	DB	'on@CryptoPP@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
xdata$x	SEGMENT
__CTA4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@ DD 04H
	DD	FLAT:__CT??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
	DD	FLAT:__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
xdata$x	SEGMENT
__TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@ DD 00H
	DD	FLAT:??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@
CONST	SEGMENT
??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ DD FLAT:??_R4InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`vftable'
	DD	FLAT:??_EInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R0H@8
data$r	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
data$r	ENDS
;	COMDAT ??_R0?AVConstByteArrayParameter@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVConstByteArrayParameter@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ConstByteArrayParameter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVConstByteArrayParameter@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DDPAKADP@StringSink?3?5OutputStringPointer@
CONST	SEGMENT
??_C@_0CO@DDPAKADP@StringSink?3?5OutputStringPointer@ DB 'StringSink: Out'
	DB	'putStringPointer not specified', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NDOICOBI@OutputStringPointer@
CONST	SEGMENT
??_C@_0BE@NDOICOBI@OutputStringPointer@ DB 'OutputStringPointer', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
xdata$x	SEGMENT
__CT??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40 DD 00H
	DD	FLAT:??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@Cr'
	DB	'yptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
xdata$x	SEGMENT
__CTA4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@ DD 04H
	DD	FLAT:__CT??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
	DD	FLAT:__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
xdata$x	SEGMENT
__TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@ DD 00H
	DD	FLAT:??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@
CONST	SEGMENT
??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ DD FLAT:??_R4InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`vftable'
	DD	FLAT:??_EInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ
	DD	FLAT:?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ
	DD	FLAT:?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ
	DD	FLAT:?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z
	DD	FLAT:?GenerateBlock@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?GenerateIntoBufferedTransformation@RandomNumberGenerator@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z
	DD	FLAT:?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z
	DD	FLAT:?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
	DD	FLAT:?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z
	DD	FLAT:?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ
	DD	FLAT:?OperateKeystream@CTR_ModePolicy@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z
	DD	FLAT:?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z
	DD	FLAT:?CipherResynchronize@CTR_ModePolicy@CryptoPP@@MAEXPAEPBEI@Z
	DD	FLAT:?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ
	DD	FLAT:?SeekToIteration@CTR_ModePolicy@CryptoPP@@MAEX_K@Z
	DD	FLAT:?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?ProcessData@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEIPAEIPBEI@Z
	DD	FLAT:?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?Seek@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEX_K@Z
	DD	FLAT:?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@MAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
	DD	FLAT:?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ
	DD	FLAT:?IncrementCounterBy256@CTR_ModePolicy@CryptoPP@@MAEXXZ
	DD	FLAT:?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ
	DD	FLAT:?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?ProcessAndXorBlock@Enc@XTEA@CryptoPP@@UBEXPBE0PAE@Z
	DD	FLAT:?BlockSize@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AdvancedProcessBlocks@BlockTransformation@CryptoPP@@UBEIPBE0PAEII@Z
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@Base@XTEA@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ
	DD	FLAT:?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ
	DD	FLAT:?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ
	DD	FLAT:?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z
	DD	FLAT:?GenerateBlock@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?GenerateIntoBufferedTransformation@RandomNumberGenerator@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z
	DD	FLAT:?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z
	DD	FLAT:?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
	DD	FLAT:?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z
	DD	FLAT:?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ
	DD	FLAT:?OperateKeystream@CTR_ModePolicy@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z
	DD	FLAT:?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z
	DD	FLAT:?CipherResynchronize@CTR_ModePolicy@CryptoPP@@MAEXPAEPBEI@Z
	DD	FLAT:?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ
	DD	FLAT:?SeekToIteration@CTR_ModePolicy@CryptoPP@@MAEX_K@Z
	DD	FLAT:?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?ProcessData@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEIPAEIPBEI@Z
	DD	FLAT:?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?Seek@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEX_K@Z
	DD	FLAT:?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@MAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
	DD	FLAT:?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ
	DD	FLAT:?IncrementCounterBy256@CTR_ModePolicy@CryptoPP@@MAEXXZ
	DD	FLAT:?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ
	DD	FLAT:?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?ProcessAndXorBlock@Enc@Twofish@CryptoPP@@UBEXPBE0PAE@Z
	DD	FLAT:?BlockSize@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AdvancedProcessBlocks@BlockTransformation@CryptoPP@@UBEIPBE0PAEII@Z
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@Base@Twofish@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ
	DD	FLAT:?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ
	DD	FLAT:?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ
	DD	FLAT:?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z
	DD	FLAT:?GenerateBlock@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?GenerateIntoBufferedTransformation@RandomNumberGenerator@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z
	DD	FLAT:?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z
	DD	FLAT:?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
	DD	FLAT:?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z
	DD	FLAT:?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ
	DD	FLAT:?OperateKeystream@CTR_ModePolicy@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z
	DD	FLAT:?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z
	DD	FLAT:?CipherResynchronize@CTR_ModePolicy@CryptoPP@@MAEXPAEPBEI@Z
	DD	FLAT:?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ
	DD	FLAT:?SeekToIteration@CTR_ModePolicy@CryptoPP@@MAEX_K@Z
	DD	FLAT:?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?ProcessData@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEIPAEIPBEI@Z
	DD	FLAT:?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?Seek@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEX_K@Z
	DD	FLAT:?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@MAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
	DD	FLAT:?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ
	DD	FLAT:?IncrementCounterBy256@CTR_ModePolicy@CryptoPP@@MAEXXZ
	DD	FLAT:?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ
	DD	FLAT:?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?ProcessAndXorBlock@Base@Camellia@CryptoPP@@UBEXPBE0PAE@Z
	DD	FLAT:?BlockSize@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AdvancedProcessBlocks@BlockTransformation@CryptoPP@@UBEIPBE0PAEII@Z
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@Base@Camellia@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z
CONST	ENDS
;	COMDAT ??_7AutoSeededRandomPool@CryptoPP@@6B@
CONST	SEGMENT
??_7AutoSeededRandomPool@CryptoPP@@6B@ DD FLAT:??_R4AutoSeededRandomPool@CryptoPP@@6B@ ; CryptoPP::AutoSeededRandomPool::`vftable'
	DD	FLAT:??_EAutoSeededRandomPool@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?IncorporateEntropy@RandomPool@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CanIncorporateEntropy@RandomPool@CryptoPP@@UBE_NXZ
	DD	FLAT:?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ
	DD	FLAT:?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ
	DD	FLAT:?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z
	DD	FLAT:?GenerateBlock@RandomNumberGenerator@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?GenerateIntoBufferedTransformation@RandomPool@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z
	DD	FLAT:?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z
CONST	ENDS
;	COMDAT ??_7StringSource@CryptoPP@@6BWaitable@1@@
CONST	SEGMENT
??_7StringSource@CryptoPP@@6BWaitable@1@@ DD FLAT:??_R4StringSource@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringSource::`vftable'
	DD	FLAT:??_EStringSource@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z
CONST	ENDS
;	COMDAT ??_7StringSource@CryptoPP@@6BAlgorithm@1@@
CONST	SEGMENT
??_7StringSource@CryptoPP@@6BAlgorithm@1@@ DD FLAT:??_R4StringSource@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringSource::`vftable'
	DD	FLAT:??_EStringSource@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
	DD	FLAT:?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
	DD	FLAT:?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	FLAT:?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
	DD	FLAT:?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z
	DD	FLAT:?Initialize@Filter@CryptoPP@@UAEXABVNameValuePairs@2@H@Z
	DD	FLAT:?Flush@Filter@CryptoPP@@UAE_N_NH0@Z
	DD	FLAT:?MessageSeriesEnd@Filter@CryptoPP@@UAE_NH_N@Z
	DD	FLAT:?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z
	DD	FLAT:?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ
	DD	FLAT:?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z
	DD	FLAT:?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z
	DD	FLAT:?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?NumberOfMessages@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?GetNextMessage@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z
	DD	FLAT:?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ
	DD	FLAT:?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?TransferTo2@Filter@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?CopyRangeTo2@Filter@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z
	DD	FLAT:?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
	DD	FLAT:?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z
	DD	FLAT:?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z
	DD	FLAT:?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
	DD	FLAT:?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?Attachable@Filter@CryptoPP@@UAE_NXZ
	DD	FLAT:?AttachedTransformation@Filter@CryptoPP@@UBEPBVBufferedTransformation@2@XZ
	DD	FLAT:?AttachedTransformation@Filter@CryptoPP@@UAEPAVBufferedTransformation@2@XZ
	DD	FLAT:?Detach@Filter@CryptoPP@@UAEXPAVBufferedTransformation@2@@Z
	DD	FLAT:?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?NewDefaultAttachment@Filter@CryptoPP@@MBEPAVBufferedTransformation@2@XZ
	DD	FLAT:?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ
	DD	FLAT:?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ
	DD	FLAT:?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z
	DD	FLAT:?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z
	DD	FLAT:?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z
	DD	FLAT:?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@
CONST	SEGMENT
??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ DD FLAT:??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vftable'
	DD	FLAT:??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z
CONST	ENDS
;	COMDAT ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
CONST	SEGMENT
??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ DD FLAT:??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vftable'
	DD	FLAT:??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
	DD	FLAT:?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
	DD	FLAT:?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	FLAT:?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
	DD	FLAT:?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z
	DD	FLAT:?Initialize@Filter@CryptoPP@@UAEXABVNameValuePairs@2@H@Z
	DD	FLAT:?Flush@Filter@CryptoPP@@UAE_N_NH0@Z
	DD	FLAT:?MessageSeriesEnd@Filter@CryptoPP@@UAE_NH_N@Z
	DD	FLAT:?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z
	DD	FLAT:?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ
	DD	FLAT:?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z
	DD	FLAT:?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z
	DD	FLAT:?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?NumberOfMessages@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?GetNextMessage@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z
	DD	FLAT:?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ
	DD	FLAT:?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?TransferTo2@Filter@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?CopyRangeTo2@Filter@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z
	DD	FLAT:?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
	DD	FLAT:?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z
	DD	FLAT:?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z
	DD	FLAT:?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
	DD	FLAT:?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?Attachable@Filter@CryptoPP@@UAE_NXZ
	DD	FLAT:?AttachedTransformation@Filter@CryptoPP@@UBEPBVBufferedTransformation@2@XZ
	DD	FLAT:?AttachedTransformation@Filter@CryptoPP@@UAEPAVBufferedTransformation@2@XZ
	DD	FLAT:?Detach@Filter@CryptoPP@@UAEXPAVBufferedTransformation@2@@Z
	DD	FLAT:?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?NewDefaultAttachment@Filter@CryptoPP@@MBEPAVBufferedTransformation@2@XZ
	DD	FLAT:?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ
	DD	FLAT:?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ
	DD	FLAT:?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z
	DD	FLAT:?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z
	DD	FLAT:?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z
	DD	FLAT:?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7StringStore@CryptoPP@@6BWaitable@1@@
CONST	SEGMENT
??_7StringStore@CryptoPP@@6BWaitable@1@@ DD FLAT:??_R4StringStore@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringStore::`vftable'
	DD	FLAT:??_EStringStore@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z
CONST	ENDS
;	COMDAT ??_7StringStore@CryptoPP@@6BAlgorithm@1@@
CONST	SEGMENT
??_7StringStore@CryptoPP@@6BAlgorithm@1@@ DD FLAT:??_R4StringStore@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringStore::`vftable'
	DD	FLAT:??_EStringStore@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
	DD	FLAT:?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
	DD	FLAT:?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	FLAT:?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
	DD	FLAT:?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z
	DD	FLAT:?Initialize@BufferedTransformation@CryptoPP@@UAEXABVNameValuePairs@2@H@Z
	DD	FLAT:?Flush@BufferedTransformation@CryptoPP@@UAE_N_NH0@Z
	DD	FLAT:?MessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NH_N@Z
	DD	FLAT:?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z
	DD	FLAT:?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ
	DD	FLAT:?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z
	DD	FLAT:?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z
	DD	FLAT:?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?NumberOfMessages@Store@CryptoPP@@UBEIXZ
	DD	FLAT:?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?GetNextMessage@Store@CryptoPP@@UAE_NXZ
	DD	FLAT:?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z
	DD	FLAT:?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ
	DD	FLAT:?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?TransferTo2@StringStore@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?CopyRangeTo2@StringStore@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z
	DD	FLAT:?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
	DD	FLAT:?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z
	DD	FLAT:?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z
	DD	FLAT:?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
	DD	FLAT:?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ
	DD	FLAT:?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?StoreInitialize@StringStore@CryptoPP@@EAEXABVNameValuePairs@2@@Z
CONST	ENDS
;	COMDAT ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
CONST	SEGMENT
??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ DD FLAT:??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
	DD	FLAT:??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z
CONST	ENDS
;	COMDAT ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
CONST	SEGMENT
??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ DD FLAT:??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
	DD	FLAT:??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z
	DD	FLAT:?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
	DD	FLAT:?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	FLAT:?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
	DD	FLAT:?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z
	DD	FLAT:?Initialize@BufferedTransformation@CryptoPP@@UAEXABVNameValuePairs@2@H@Z
	DD	FLAT:?Flush@BufferedTransformation@CryptoPP@@UAE_N_NH0@Z
	DD	FLAT:?MessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NH_N@Z
	DD	FLAT:?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z
	DD	FLAT:?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ
	DD	FLAT:?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z
	DD	FLAT:?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z
	DD	FLAT:?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?NumberOfMessages@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?GetNextMessage@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z
	DD	FLAT:?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ
	DD	FLAT:?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z
	DD	FLAT:?ChannelPut2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
	DD	FLAT:?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z
	DD	FLAT:?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z
	DD	FLAT:?ChannelMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
	DD	FLAT:?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ
	DD	FLAT:?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
CONST	ENDS
;	COMDAT ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
CONST	SEGMENT
??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD FLAT:??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
	DD	FLAT:??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WDA@AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ
	DD	FLAT:?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ
	DD	FLAT:?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ
	DD	FLAT:?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z
	DD	FLAT:?GenerateBlock@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?GenerateIntoBufferedTransformation@RandomNumberGenerator@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z
	DD	FLAT:?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z
CONST	ENDS
;	COMDAT ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
CONST	SEGMENT
??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD FLAT:??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
	DD	FLAT:??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WBM@AEPAXI@Z
	DD	FLAT:?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
	DD	FLAT:?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z
	DD	FLAT:?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ
	DD	FLAT:?OperateKeystream@CTR_ModePolicy@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z
	DD	FLAT:?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z
	DD	FLAT:?CipherResynchronize@CTR_ModePolicy@CryptoPP@@MAEXPAEPBEI@Z
	DD	FLAT:?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ
	DD	FLAT:?SeekToIteration@CTR_ModePolicy@CryptoPP@@MAEX_K@Z
	DD	FLAT:?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
CONST	ENDS
;	COMDAT ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
CONST	SEGMENT
??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ DD FLAT:??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
	DD	FLAT:??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?ProcessData@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEIPAEIPBEI@Z
	DD	FLAT:?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?Seek@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEX_K@Z
	DD	FLAT:?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
	DD	FLAT:??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@MAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
	DD	FLAT:?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ
	DD	FLAT:?IncrementCounterBy256@CTR_ModePolicy@CryptoPP@@MAEXXZ
	DD	FLAT:?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ
	DD	FLAT:?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ
CONST	ENDS
;	COMDAT ??_C@_03LECCGOIK@CTR@
CONST	SEGMENT
??_C@_03LECCGOIK@CTR@ DB 'CTR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@FMNEDLJE@CipherModeBase?3?5feedback?5size?5c@
CONST	SEGMENT
??_C@_0EH@FMNEDLJE@CipherModeBase?3?5feedback?5size?5c@ DB 'CipherModeBas'
	DB	'e: feedback size cannot be specified for this cipher mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@
CONST	SEGMENT
??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ DD FLAT:??_R4?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`vftable'
	DD	FLAT:??_E?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z
	DD	FLAT:?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z40
xdata$x	SEGMENT
__CT??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z40 DD 00H
	DD	FLAT:??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
xdata$x	SEGMENT
__CTA3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@ DD 03H
	DD	FLAT:__CT??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
xdata$x	SEGMENT
__TI3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@ DD 00H
	DD	FLAT:??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@
CONST	SEGMENT
??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@ DB 'AlgorithmParame'
	DB	'tersBase: parameter "', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IAABKFFP@?$CC?5not?5used@
CONST	SEGMENT
??_C@_0L@IAABKFFP@?$CC?5not?5used@ DB '" not used', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7AlgorithmParametersBase@CryptoPP@@6B@
CONST	SEGMENT
??_7AlgorithmParametersBase@CryptoPP@@6B@ DD FLAT:??_R4AlgorithmParametersBase@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersBase::`vftable'
	DD	FLAT:??_EAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@
CONST	SEGMENT
??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ DD FLAT:??_R4ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`vftable'
	DD	FLAT:??_EParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0M@JMHEFFAI@InputBuffer@
CONST	SEGMENT
??_C@_0M@JMHEFFAI@InputBuffer@ DB 'InputBuffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GKFFKNHD@FeedbackSize@
CONST	SEGMENT
??_C@_0N@GKFFKNHD@FeedbackSize@ DB 'FeedbackSize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKOCCFHC@XTEA@
CONST	SEGMENT
??_C@_04OKOCCFHC@XTEA@ DB 'XTEA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DABDIDEC@Twofish@
CONST	SEGMENT
??_C@_07DABDIDEC@Twofish@ DB 'Twofish', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EGCCLPME@Camellia@
CONST	SEGMENT
??_C@_08EGCCLPME@Camellia@ DB 'Camellia', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@FIHMKEGL@BufferedTransformation?3?5this?5ob@
CONST	SEGMENT
??_C@_0DG@FIHMKEGL@BufferedTransformation?3?5this?5ob@ DB 'BufferedTransf'
	DB	'ormation: this object is not attachable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@CFJCNMFC@RandomNumberGenerator?3?5Incorpor@
CONST	SEGMENT
??_C@_0DK@CFJCNMFC@RandomNumberGenerator?3?5Incorpor@ DB 'RandomNumberGen'
	DB	'erator: IncorporateEntropy not implemented', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5r@
CONST	SEGMENT
??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5r@ DB ': this obj'
	DB	'ect doesn''t support resynchronization', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BFHCIDFI@C?$CL?$CL@
CONST	SEGMENT
??_C@_03BFHCIDFI@C?$CL?$CL@ DB 'C++', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CIFAGBMG@unknown@
CONST	SEGMENT
??_C@_07CIFAGBMG@unknown@ DB 'unknown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4@
CONST	SEGMENT
??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4@ DB 'Clone('
	DB	') is not implemented yet.', 00H		; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVNotImplemented@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVNotImplemented@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVNotImplemented@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NotImplemented `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNotImplemented@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVNotImplemented@CryptoPP@@
xdata$x	SEGMENT
__CTA3?AVNotImplemented@CryptoPP@@ DD 03H
	DD	FLAT:__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVNotImplemented@CryptoPP@@
xdata$x	SEGMENT
__TI3?AVNotImplemented@CryptoPP@@ DD 00H
	DD	FLAT:??1NotImplemented@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVNotImplemented@CryptoPP@@
xdata$x	ENDS
;	COMDAT __CTA3?AVInvalidArgument@CryptoPP@@
xdata$x	SEGMENT
__CTA3?AVInvalidArgument@CryptoPP@@ DD 03H
	DD	FLAT:__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVInvalidArgument@CryptoPP@@
xdata$x	SEGMENT
__TI3?AVInvalidArgument@CryptoPP@@ DD 00H
	DD	FLAT:??1InvalidArgument@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVInvalidArgument@CryptoPP@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVException@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0Exception@CryptoPP@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVException@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVInvalidArgument@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidArgument@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVInvalidArgument@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InvalidArgument `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidArgument@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z48
xdata$x	SEGMENT
__CT??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z48 DD 00H
	DD	FLAT:??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	FLAT:??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NameValuePairs::ValueTypeMismatch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVValueTypeMismatch@NameValuePairs@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
xdata$x	SEGMENT
__CTA4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@ DD 04H
	DD	FLAT:__CT??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z48
	DD	FLAT:__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
xdata$x	SEGMENT
__TI4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@ DD 00H
	DD	FLAT:??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_C@_0CE@LNMKHLKF@NameValuePairs?3?5type?5mismatch?5f@
CONST	SEGMENT
??_C@_0CE@LNMKHLKF@NameValuePairs?3?5type?5mismatch?5f@ DB 'NameValuePair'
	DB	's: type mismatch for ''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PGGGIJHH@?8?0?5stored?5?8@
CONST	SEGMENT
??_C@_0M@PGGGIJHH@?8?0?5stored?5?8@ DB ''', stored ''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CPJAGCKP@?8?0?5trying?5to?5retrieve?5?8@
CONST	SEGMENT
??_C@_0BI@CPJAGCKP@?8?0?5trying?5to?5retrieve?5?8@ DB ''', trying to retr'
	DB	'ieve ''', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01GEODFPGF@?8@
CONST	SEGMENT
??_C@_01GEODFPGF@?8@ DB '''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7NameValuePairs@CryptoPP@@6B@
CONST	SEGMENT
??_7NameValuePairs@CryptoPP@@6B@ DD FLAT:??_R4NameValuePairs@CryptoPP@@6B@ ; CryptoPP::NameValuePairs::`vftable'
	DD	FLAT:??_ENameValuePairs@CryptoPP@@UAEPAXI@Z
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@
CONST	SEGMENT
??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ DD FLAT:??_R4ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ ; CryptoPP::NameValuePairs::ValueTypeMismatch::`vftable'
	DD	FLAT:??_EValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7NotImplemented@CryptoPP@@6B@
CONST	SEGMENT
??_7NotImplemented@CryptoPP@@6B@ DD FLAT:??_R4NotImplemented@CryptoPP@@6B@ ; CryptoPP::NotImplemented::`vftable'
	DD	FLAT:??_ENotImplemented@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7InvalidArgument@CryptoPP@@6B@
CONST	SEGMENT
??_7InvalidArgument@CryptoPP@@6B@ DD FLAT:??_R4InvalidArgument@CryptoPP@@6B@ ; CryptoPP::InvalidArgument::`vftable'
	DD	FLAT:??_EInvalidArgument@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@CryptoPP@@6B@
CONST	SEGMENT
??_7Exception@CryptoPP@@6B@ DD FLAT:??_R4Exception@CryptoPP@@6B@ ; CryptoPP::Exception::`vftable'
	DD	FLAT:??_EException@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB
CONST	SEGMENT
?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB DD 011H ; boost::unordered::detail::prime_list_template<unsigned int>::value
	DD	01dH
	DD	025H
	DD	035H
	DD	043H
	DD	04fH
	DD	061H
	DD	083H
	DD	0c1H
	DD	0101H
	DD	0185H
	DD	0209H
	DD	0301H
	DD	0407H
	DD	0607H
	DD	0805H
	DD	0c07H
	DD	01807H
	DD	03001H
	DD	06011H
	DD	0c005H
	DD	01800dH
	DD	030005H
	DD	060019H
	DD	0c0001H
	DD	0180005H
	DD	030000bH
	DD	060000dH
	DD	0c00005H
	DD	01800013H
	DD	03000005H
	DD	06000017H
	DD	0c000013H
	DD	018000005H
	DD	030000059H
	DD	060000005H
	DD	0c0000001H
	DD	0fffffffbH
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z$0
__ehfuncinfo$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z$0
__ehfuncinfo$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z$1
__ehfuncinfo$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z$5
__ehfuncinfo$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z$1
__ehfuncinfo$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z$2
__ehfuncinfo$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ$5
__ehfuncinfo$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z$2
__ehfuncinfo$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ$5
__ehfuncinfo$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$1
__ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
__ehfuncinfo$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2
__ehfuncinfo$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$1
__ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
__ehfuncinfo$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2
__ehfuncinfo$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$1
__ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
__ehfuncinfo$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2
__ehfuncinfo$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ$0
__ehfuncinfo$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AutoSeededRandomPool@CryptoPP@@QAE@_NI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AutoSeededRandomPool@CryptoPP@@QAE@_NI@Z$0
__ehfuncinfo$??0AutoSeededRandomPool@CryptoPP@@QAE@_NI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AutoSeededRandomPool@CryptoPP@@QAE@_NI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$8
	DD	01H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$7
	DD	01H
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$0
	DD	06H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$12
	DD	06H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$1
	DD	08H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$2
	DD	06H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$4
	DD	01H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Source@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Source@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$0
__ehfuncinfo$??0Source@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Source@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$3
__ehfuncinfo$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0StringStore@CryptoPP@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StringStore@CryptoPP@@QAE@PBD@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0StringStore@CryptoPP@@QAE@PBD@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??0StringStore@CryptoPP@@QAE@PBD@Z$1
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0StringStore@CryptoPP@@QAE@PBD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0StringStore@CryptoPP@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z$0
__ehfuncinfo$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ$1
__ehfuncinfo$??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ$0
__ehfuncinfo$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@QAE@XZ$1
__ehfuncinfo$??0?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CTR_ModePolicy@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CTR_ModePolicy@CryptoPP@@QAE@XZ$0
__ehfuncinfo$??0CTR_ModePolicy@CryptoPP@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CTR_ModePolicy@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CTR_ModePolicy@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CTR_ModePolicy@CryptoPP@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CTR_ModePolicy@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z$0
__ehfuncinfo$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CipherModeBase@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CipherModeBase@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CipherModeBase@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z$0
__ehfuncinfo$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@PBDABVConstByteArrayParameter@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@PBDABVConstByteArrayParameter@1@_N@Z$0
__ehfuncinfo$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@PBDABVConstByteArrayParameter@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@QAE@PBDABVConstByteArrayParameter@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z$0
__ehfuncinfo$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ$0
__ehfuncinfo$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z$1
__ehfuncinfo$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$14
__ehfuncinfo$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ConstByteArrayParameter@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1ConstByteArrayParameter@CryptoPP@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ConstByteArrayParameter@CryptoPP@@QAE@PBEI_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ConstByteArrayParameter@CryptoPP@@QAE@PBEI_N@Z$0
__ehfuncinfo$??0ConstByteArrayParameter@CryptoPP@@QAE@PBEI_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ConstByteArrayParameter@CryptoPP@@QAE@PBEI_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z$0
__ehfuncinfo$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z$1
__ehfuncinfo$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z$0
__ehfuncinfo$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z$0
__ehfuncinfo$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z$0
__ehfuncinfo$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z$0
__ehfuncinfo$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z$0
__ehfuncinfo$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z$1
__ehfuncinfo$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$9
	DD	07H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$10
	DD	08H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$11
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$9
	DD	07H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$10
	DD	08H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$11
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
__ehfuncinfo$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Base@Camellia@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1Base@Camellia@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Base@Camellia@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z$0
__ehfuncinfo$?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z$0
__ehfuncinfo$?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z$0
__ehfuncinfo$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z$0
__ehfuncinfo$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$1
__ehfuncinfo$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ$0
__ehfuncinfo$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z$0
__ehfuncinfo$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z$2
__ehfuncinfo$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$29
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z$1
__ehfuncinfo$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z$1
__ehfuncinfo$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@CryptoPP@@QAE@ABV01@@Z$0
__ehfuncinfo$??0Exception@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z$0
__ehfuncinfo$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{44}', COMDAT
  00000	83 e9 2c	 sub	 ecx, 44			; 0000002cH
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{44}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{44}', COMDAT
  00000	83 e9 2c	 sub	 ecx, 44			; 0000002cH
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{44}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 30	 sub	 ecx, 48			; 00000030H
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{24}', COMDAT
  00000	83 e9 18	 sub	 ecx, 24			; 00000018H
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{24}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 1c	 sub	 ecx, 28			; 0000001cH
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{44}', COMDAT
  00000	83 e9 2c	 sub	 ecx, 44			; 0000002cH
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{44}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{44}', COMDAT
  00000	83 e9 2c	 sub	 ecx, 44			; 0000002cH
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{44}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 30	 sub	 ecx, 48			; 00000030H
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{24}', COMDAT
  00000	83 e9 18	 sub	 ecx, 24			; 00000018H
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{24}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 1c	 sub	 ecx, 28			; 0000001cH
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{44}', COMDAT
  00000	83 e9 2c	 sub	 ecx, 44			; 0000002cH
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{44}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{44}', COMDAT
  00000	83 e9 2c	 sub	 ecx, 44			; 0000002cH
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{44}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 30	 sub	 ecx, 48			; 00000030H
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WDA@AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{24}', COMDAT
  00000	83 e9 18	 sub	 ecx, 24			; 00000018H
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider`adjustor{24}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 1c	 sub	 ecx, 28			; 0000001cH
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBM@AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z
??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_EStringSource@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_EStringSource@CryptoPP@@W3AEPAXI@Z PROC		; [thunk]:CryptoPP::StringSource::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_EStringSource@CryptoPP@@UAEPAXI@Z
??_EStringSource@CryptoPP@@W3AEPAXI@Z ENDP		; [thunk]:CryptoPP::StringSource::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_EStringStore@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_EStringStore@CryptoPP@@W3AEPAXI@Z PROC		; [thunk]:CryptoPP::StringStore::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_EStringStore@CryptoPP@@UAEPAXI@Z
??_EStringStore@CryptoPP@@W3AEPAXI@Z ENDP		; [thunk]:CryptoPP::StringStore::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z
??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WDA@AEPAXI@Z
_TEXT	SEGMENT
??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WDA@AEPAXI@Z PROC ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor', COMDAT
  00000	83 e9 30	 sub	 ecx, 48			; 00000030H
  00003	e9 00 00 00 00	 jmp	 ??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WDA@AEPAXI@Z ENDP ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WBM@AEPAXI@Z
_TEXT	SEGMENT
??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WBM@AEPAXI@Z PROC ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor', COMDAT
  00000	83 e9 1c	 sub	 ecx, 28			; 0000001cH
  00003	e9 00 00 00 00	 jmp	 ??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WBM@AEPAXI@Z ENDP ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AlgorithmProvider`adjustor{44}', COMDAT
  00000	83 e9 2c	 sub	 ecx, 44			; 0000002cH
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AlgorithmProvider
?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@WCM@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AlgorithmProvider`adjustor{44}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AlgorithmProvider`adjustor{24}', COMDAT
  00000	83 e9 18	 sub	 ecx, 24			; 00000018H
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AlgorithmProvider
?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@WBI@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AlgorithmProvider`adjustor{24}'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z
??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z
??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z
??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::create_node, COMDAT
; _this$ = ecx

; 1983 :       {

  00000	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00001	6a 30		 push	 48			; 00000030H
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 1983 :       {

  00003	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 1985 :         node_ = node_allocator_traits::allocate(alloc_, 1);

  0000a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000d	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00010	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2579 :         ptr_bucket() : next_(0) {}

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4865 :         ptr_node() : bucket_base(), bucket_info_(0) {}

  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 754  :         value_base() : data_() {}

  00020	0f 11 40 08	 movups	 XMMWORD PTR [eax+8], xmm0
  00024	5e		 pop	 esi
  00025	0f 11 40 18	 movups	 XMMWORD PTR [eax+24], xmm0
  00029	66 0f d6 40 28	 movq	 QWORD PTR [eax+40], xmm0

; 1986 :         new ((void*)boost::to_address(node_)) node();
; 1987 :       }

  0002e	c3		 ret	 0
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::create_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >, COMDAT
; _this$ = ecx

; 1976 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@node_const
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 30		 push	 48			; 00000030H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@node_const:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 1980 :       }

  00012	c3		 ret	 0
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::create_node, COMDAT
; _this$ = ecx

; 1983 :       {

  00000	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00001	6a 2c		 push	 44			; 0000002cH
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 1983 :       {

  00003	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 1985 :         node_ = node_allocator_traits::allocate(alloc_, 1);

  0000a	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0000d	83 c4 04	 add	 esp, 4
  00010	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2579 :         ptr_bucket() : next_(0) {}

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4865 :         ptr_node() : bucket_base(), bucket_info_(0) {}

  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 754  :         value_base() : data_() {}

  00020	0f 11 40 08	 movups	 XMMWORD PTR [eax+8], xmm0
  00024	5e		 pop	 esi
  00025	0f 11 40 18	 movups	 XMMWORD PTR [eax+24], xmm0
  00029	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 1986 :         new ((void*)boost::to_address(node_)) node();
; 1987 :       }

  00030	c3		 ret	 0
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::create_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >, COMDAT
; _this$ = ecx

; 1976 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@node_const
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@node_const:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 1980 :       }

  00012	c3		 ret	 0
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >, COMDAT
; _this$ = ecx

; 2014 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@node_tmp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@node_tmp:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2020 :       }

  00012	c3		 ret	 0
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >, COMDAT
; _this$ = ecx

; 2013 :       {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2014 :         if (node_) {

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 15		 je	 SHORT $LN21@node_tmp

; 2015 :           BOOST_UNORDERED_CALL_DESTROY(

  0000a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000d	e8 00 00 00 00	 call	 ??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00012	6a 30		 push	 48			; 00000030H
  00014	ff 76 04	 push	 DWORD PTR [esi+4]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN21@node_tmp:
  0001f	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2020 :       }

  00020	c3		 ret	 0
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z PROC		; std::_Copy_memmove<unsigned char *,unsigned char *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  0000b	50		 push	 eax
  0000c	50		 push	 eax
  0000d	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAE@std@@YAPAEQBDQAEII@Z ; std::_Copy_memmove_tail<unsigned char *>
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z ENDP		; std::_Copy_memmove<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAE@std@@YAPAEQBDQAEII@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAE@std@@YAPAEQBDQAEII@Z PROC	; std::_Copy_memmove_tail<unsigned char *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAE@std@@YAPAEQBDQAEII@Z ENDP	; std::_Copy_memmove_tail<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Zero_range@PAE@std@@YAPAEQAE0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAE@std@@YAPAEQAE0@Z PROC		; std::_Zero_range<unsigned char *>, COMDAT

; 2032 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2033 :     char* const _First_ch = reinterpret_cast<char*>(_STD _To_address(_First));
; 2034 :     char* const _Last_ch  = reinterpret_cast<char*>(_STD _To_address(_Last));
; 2035 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 2036 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2037 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAE@std@@YAPAEQAE0@Z ENDP		; std::_Zero_range<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z
_TEXT	SEGMENT
_min$ = 8						; size = 4
?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z PROC ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count, COMDAT

; 2608 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 7457 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _STD _Get_unwrapped(_Last));

  00005	8b 7d 08	 mov	 edi, DWORD PTR _min$[ebp]
  00008	be 00 00 00 00	 mov	 esi, OFFSET ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB ; boost::unordered::detail::prime_list_template<unsigned int>::value
  0000d	b8 26 00 00 00	 mov	 eax, 38			; 00000026H
$LL9@new_bucket:

; 7460 :         const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00012	8b d0		 mov	 edx, eax
  00014	d1 ea		 shr	 edx, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2422 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00016	39 3c 96	 cmp	 DWORD PTR [esi+edx*4], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1664 :         _Where += _Off;

  00019	8d 0c 96	 lea	 ecx, DWORD PTR [esi+edx*4]

; 7462 :         if (_Pred(*_UMid, _Val)) { // try top half

  0001c	73 0c		 jae	 SHORT $LN11@new_bucket

; 7463 :             _UFirst = _STD _Next_iter(_UMid);

  0001e	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]

; 7464 :             _Count -= _Count2 + 1;

  00021	83 c9 ff	 or	 ecx, -1
  00024	2b ca		 sub	 ecx, edx
  00026	03 c1		 add	 eax, ecx

; 7465 :         } else {

  00028	eb 02		 jmp	 SHORT $LN12@new_bucket
$LN11@new_bucket:

; 7466 :             _Count = _Count2;

  0002a	8b c2		 mov	 eax, edx
$LN12@new_bucket:

; 7458 : 
; 7459 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0002c	85 c0		 test	 eax, eax
  0002e	7f e2		 jg	 SHORT $LL9@new_bucket
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2609 :           return boost::unordered::detail::next_prime(min);

  00030	81 fe 98 00 00
	00		 cmp	 esi, OFFSET ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB+152
  00036	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00039	5f		 pop	 edi
  0003a	0f 45 c6	 cmovne	 eax, esi
  0003d	5e		 pop	 esi
  0003e	8b 00		 mov	 eax, DWORD PTR [eax]

; 2610 :         }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ENDP ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z
_TEXT	SEGMENT
tv450 = -12						; size = 4
__New_size$1$ = -8					; size = 4
tv447 = -8						; size = 4
__Old_size$1$ = -4					; size = 4
tv449 = -4						; size = 4
__Size_increase$ = 8					; size = 4
$T1 = 8							; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 2988 :     _CONSTEXPR20 basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 2989 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 2990 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 2991 :         auto& _My_data            = _Mypair._Myval2;
; 2992 :         const size_type _Old_size = _My_data._Mysize;
; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00008	8b 75 08	 mov	 esi, DWORD PTR __Size_increase$[ebp]
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00013	8b c1		 mov	 eax, ecx
  00015	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00018	2b c2		 sub	 eax, edx
  0001a	89 55 fc	 mov	 DWORD PTR __Old_size$1$[ebp], edx
  0001d	3b c6		 cmp	 eax, esi
  0001f	0f 82 2c 01 00
	00		 jb	 $LN86@Reallocate

; 2998 :         const size_type _Old_capacity = _My_data._Myres;

  00025	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00028	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0002b	8b f0		 mov	 esi, eax

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0002d	89 45 f8	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00030	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2998 :         const size_type _Old_capacity = _My_data._Myres;

  00033	89 5d 08	 mov	 DWORD PTR $T1[ebp], ebx

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00036	3b f1		 cmp	 esi, ecx

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00038	76 0f		 jbe	 SHORT $LN10@Reallocate

; 2944 :             return _Max;

  0003a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0003f	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00047	eb 43		 jmp	 SHORT $LN84@Reallocate
$LN10@Reallocate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00049	8b c3		 mov	 eax, ebx
  0004b	d1 e8		 shr	 eax, 1
  0004d	2b c8		 sub	 ecx, eax
  0004f	3b d9		 cmp	 ebx, ecx
  00051	76 12		 jbe	 SHORT $LN11@Reallocate

; 2948 :             return _Max;

  00053	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00058	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00063	eb 27		 jmp	 SHORT $LN84@Reallocate
$LN11@Reallocate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00065	03 c3		 add	 eax, ebx
  00067	3b f0		 cmp	 esi, eax
  00069	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0006c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0006f	85 c0		 test	 eax, eax
  00071	75 04		 jne	 SHORT $LN24@Reallocate

; 228  :         return nullptr;

  00073	33 db		 xor	 ebx, ebx
  00075	eb 1d		 jmp	 SHORT $LN23@Reallocate
$LN24@Reallocate:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00077	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007c	72 08		 jb	 SHORT $LN25@Reallocate

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00084	eb 06		 jmp	 SHORT $LN84@Reallocate
$LN25@Reallocate:

; 136  :         return ::operator new(_Bytes);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN84@Reallocate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  0008c	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]
  0008f	8b d8		 mov	 ebx, eax
  00091	83 c4 04	 add	 esp, 4
$LN23@Reallocate:
  00094	8b 45 f8	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00097	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  0009a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0009d	2b d0		 sub	 edx, eax
  0009f	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000a2	50		 push	 eax
  000a3	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  000a6	89 4d fc	 mov	 DWORD PTR tv449[ebp], ecx
  000a9	8d 34 03	 lea	 esi, DWORD PTR [ebx+eax]
  000ac	8b 4d 18	 mov	 ecx, DWORD PTR _<_Args_2>$[ebp]
  000af	03 ce		 add	 ecx, esi
  000b1	89 75 f4	 mov	 DWORD PTR tv450[ebp], esi
  000b4	83 7d 08 0f	 cmp	 DWORD PTR $T1[ebp], 15	; 0000000fH
  000b8	89 4d f8	 mov	 DWORD PTR tv447[ebp], ecx
  000bb	76 60		 jbe	 SHORT $LN3@Reallocate

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000bd	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	56		 push	 esi
  000c0	53		 push	 ebx
  000c1	e8 00 00 00 00	 call	 _memcpy
  000c6	ff 75 18	 push	 DWORD PTR _<_Args_2>$[ebp]
  000c9	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  000cc	ff 75 f4	 push	 DWORD PTR tv450[ebp]
  000cf	e8 00 00 00 00	 call	 _memcpy
  000d4	ff 75 fc	 push	 DWORD PTR tv449[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1749 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  000d7	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000da	03 c6		 add	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000dc	50		 push	 eax
  000dd	ff 75 f8	 push	 DWORD PTR tv447[ebp]
  000e0	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000e5	8b 4d 08	 mov	 ecx, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e8	83 c4 24	 add	 esp, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000eb	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ec	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f2	72 12		 jb	 SHORT $LN59@Reallocate

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f4	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000f7	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fa	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fc	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000ff	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00102	77 52		 ja	 SHORT $LN56@Reallocate

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00104	8b f2		 mov	 esi, edx
$LN59@Reallocate:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00106	51		 push	 ecx
  00107	56		 push	 esi
  00108	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010d	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3019 :         return *this;

  00110	89 1f		 mov	 DWORD PTR [edi], ebx
  00112	8b c7		 mov	 eax, edi

; 3020 :     }

  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	5b		 pop	 ebx
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 14 00	 ret	 20			; 00000014H
$LN3@Reallocate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	57		 push	 edi
  0011e	53		 push	 ebx
  0011f	e8 00 00 00 00	 call	 _memcpy
  00124	ff 75 18	 push	 DWORD PTR _<_Args_2>$[ebp]
  00127	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  0012a	56		 push	 esi
  0012b	e8 00 00 00 00	 call	 _memcpy
  00130	ff 75 fc	 push	 DWORD PTR tv449[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1749 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00133	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00136	03 c7		 add	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00138	50		 push	 eax
  00139	ff 75 f8	 push	 DWORD PTR tv447[ebp]
  0013c	e8 00 00 00 00	 call	 _memcpy
  00141	83 c4 24	 add	 esp, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3019 :         return *this;

  00144	89 1f		 mov	 DWORD PTR [edi], ebx
  00146	8b c7		 mov	 eax, edi

; 3020 :     }

  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	5b		 pop	 ebx
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c2 14 00	 ret	 20			; 00000014H
$LN86@Reallocate:

; 2994 :             _Xlen_string(); // result too long

  00151	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@Reallocate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00156	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN83@Reallocate:
  0015b	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z
_TEXT	SEGMENT
_key_hash$ = 8						; size = 4
_k$ = 12						; size = 4
_eq$ = 16						; size = 4
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >, COMDAT
; _this$ = ecx

; 3587 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2604 :           return hash % bucket_count;

  00003	8b 45 08	 mov	 eax, DWORD PTR _key_hash$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	f7 71 04	 div	 DWORD PTR [ecx+4]

; 3046 :           if (!size_)

  0000b	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0

; 3587 :         {

  0000f	56		 push	 esi

; 3588 :           std::size_t bucket_index = this->hash_to_bucket(key_hash);

  00010	8b f2		 mov	 esi, edx

; 3046 :           if (!size_)

  00012	74 4a		 je	 SHORT $LN17@find_node_

; 3047 :             return node_pointer();
; 3048 :           link_pointer prev = get_previous_start(bucket_index);

  00014	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00017	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 3049 :           return prev ? next_node(prev) : node_pointer();

  0001a	85 c0		 test	 eax, eax
  0001c	74 40		 je	 SHORT $LN17@find_node_
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00020	85 c0		 test	 eax, eax
  00022	74 3c		 je	 SHORT $LN3@find_node_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 635  :         return _Left == _Right;

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _k$[ebp]
  00027	8b 11		 mov	 edx, DWORD PTR [ecx]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@find_node_:
  00030	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3595 :             if (eq(k, this->get_key(n))) {

  00033	74 2b		 je	 SHORT $LN3@find_node_

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH

; 3596 :               return n;
; 3597 :             } else if (this->node_bucket(n) != bucket_index) {

  0003e	3b ce		 cmp	 ecx, esi
  00040	75 1c		 jne	 SHORT $LN17@find_node_
$LL33@find_node_:

; 2971 :             n2 = next_node(n2);

  00042	8b 00		 mov	 eax, DWORD PTR [eax]

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00044	85 c0		 test	 eax, eax
  00046	74 18		 je	 SHORT $LN3@find_node_

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004e	f7 d1		 not	 ecx
  00050	f6 c1 01	 test	 cl, 1

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00053	74 ed		 je	 SHORT $LL33@find_node_

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00055	85 c0		 test	 eax, eax
  00057	75 d7		 jne	 SHORT $LL4@find_node_
  00059	5e		 pop	 esi

; 3598 :               return node_pointer();
; 3599 :             }
; 3600 : 
; 3601 :             n = next_for_find(n);
; 3602 :           }
; 3603 :         }

  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
$LN17@find_node_:
  0005e	33 c0		 xor	 eax, eax
$LN3@find_node_:
  00060	5e		 pop	 esi
  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z
_TEXT	SEGMENT
_key_hash$ = 8						; size = 4
_k$ = 12						; size = 4
_eq$ = 16						; size = 4
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >, COMDAT
; _this$ = ecx

; 3587 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2604 :           return hash % bucket_count;

  00003	8b 45 08	 mov	 eax, DWORD PTR _key_hash$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	f7 71 04	 div	 DWORD PTR [ecx+4]

; 3046 :           if (!size_)

  0000b	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0

; 3587 :         {

  0000f	56		 push	 esi

; 3588 :           std::size_t bucket_index = this->hash_to_bucket(key_hash);

  00010	8b f2		 mov	 esi, edx

; 3046 :           if (!size_)

  00012	74 4a		 je	 SHORT $LN17@find_node_

; 3047 :             return node_pointer();
; 3048 :           link_pointer prev = get_previous_start(bucket_index);

  00014	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00017	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 3049 :           return prev ? next_node(prev) : node_pointer();

  0001a	85 c0		 test	 eax, eax
  0001c	74 40		 je	 SHORT $LN17@find_node_
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00020	85 c0		 test	 eax, eax
  00022	74 3c		 je	 SHORT $LN3@find_node_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 635  :         return _Left == _Right;

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _k$[ebp]
  00027	8b 11		 mov	 edx, DWORD PTR [ecx]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@find_node_:
  00030	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3595 :             if (eq(k, this->get_key(n))) {

  00033	74 2b		 je	 SHORT $LN3@find_node_

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH

; 3596 :               return n;
; 3597 :             } else if (this->node_bucket(n) != bucket_index) {

  0003e	3b ce		 cmp	 ecx, esi
  00040	75 1c		 jne	 SHORT $LN17@find_node_
$LL33@find_node_:

; 2971 :             n2 = next_node(n2);

  00042	8b 00		 mov	 eax, DWORD PTR [eax]

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00044	85 c0		 test	 eax, eax
  00046	74 18		 je	 SHORT $LN3@find_node_

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004e	f7 d1		 not	 ecx
  00050	f6 c1 01	 test	 cl, 1

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00053	74 ed		 je	 SHORT $LL33@find_node_

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00055	85 c0		 test	 eax, eax
  00057	75 d7		 jne	 SHORT $LL4@find_node_
  00059	5e		 pop	 esi

; 3598 :               return node_pointer();
; 3599 :             }
; 3600 : 
; 3601 :             n = next_for_find(n);
; 3602 :           }
; 3603 :         }

  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
$LN17@find_node_:
  0005e	33 c0		 xor	 eax, eax
$LN3@find_node_:
  00060	5e		 pop	 esi
  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_n@PAEPAE@std@@YAPAEPAEI0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Object_count$ = 12					; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove_n@PAEPAE@std@@YAPAEPAEI0@Z PROC	; std::_Copy_memmove_n<unsigned char *,unsigned char *>, COMDAT

; 4790 : _OutCtgIt _Copy_memmove_n(_CtgIt _First, const size_t _Object_count, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4791 :     const auto _First_ptr  = _STD _To_address(_First);
; 4792 :     const auto _First_ch   = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4793 :     const auto _Byte_count = _Object_count * sizeof(*_First_ptr);
; 4794 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Object_count$[ebp]
  00006	50		 push	 eax
  00007	50		 push	 eax
  00008	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAE@std@@YAPAEQBDQAEII@Z ; std::_Copy_memmove_tail<unsigned char *>
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 4795 : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Copy_memmove_n@PAEPAE@std@@YAPAEPAEI0@Z ENDP	; std::_Copy_memmove_n<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
_TEXT	SEGMENT
_a$2 = -28						; size = 8
_b$3 = -28						; size = 8
_key_hash$1$ = -20					; size = 4
_b$1$ = -20						; size = 4
_p$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
tv905 = 12						; size = 4
tv922 = 12						; size = 4
??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>, COMDAT
; _this$ = ecx

; 3791 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00029	8b 75 0c	 mov	 esi, DWORD PTR _k$[ebp]
  0002c	ff 36		 push	 DWORD PTR [esi]
  0002e	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00033	0f b6 17	 movzx	 edx, BYTE PTR [edi]
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00036	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00039	83 e2 01	 and	 edx, 1

; 3792 :           std::size_t key_hash = this->hash(k);

  0003c	89 45 ec	 mov	 DWORD PTR _key_hash$1$[ebp], eax

; 2791 :           return *static_cast<function_pair const*>(

  0003f	42		 inc	 edx
  00040	03 d7		 add	 edx, edi

; 3576 :           return this->find_node_impl(key_hash, k, this->key_eq());

  00042	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  00045	f7 da		 neg	 edx
  00047	1b d2		 sbb	 edx, edx
  00049	23 d1		 and	 edx, ecx
  0004b	8b cf		 mov	 ecx, edi
  0004d	52		 push	 edx
  0004e	56		 push	 esi
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 3793 :           node_pointer pos = this->find_node(key_hash, k);

  00055	8b c8		 mov	 ecx, eax

; 3794 :           if (pos) {

  00057	85 c9		 test	 ecx, ecx
  00059	74 1c		 je	 SHORT $LN2@try_emplac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0005b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005e	89 08		 mov	 DWORD PTR [eax], ecx
  00060	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3804 :         }

  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 08 00	 ret	 8
$LN2@try_emplac:

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00077	8d 77 03	 lea	 esi, DWORD PTR [edi+3]

; 1946 :         node_constructor(node_allocator& n) : alloc_(n), node_() {}

  0007a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _a$2[ebp+4], 0
  00081	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00084	f7 de		 neg	 esi
  00086	1b f6		 sbb	 esi, esi
  00088	23 f0		 and	 esi, eax
  0008a	89 75 e4	 mov	 DWORD PTR _a$2[ebp], esi

; 2066 :           a.create_node();

  0008d	8d 4d e4	 lea	 ecx, DWORD PTR _a$2[ebp]
  00090	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00097	e8 00 00 00 00	 call	 ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::create_node

; 2067 :           boost::unordered::detail::allocator_traits<Alloc>::construct(alloc,

  0009c	8b 4d e8	 mov	 ecx, DWORD PTR _a$2[ebp+4]
  0009f	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 478  :         : first(_STD _Tuple_get<_Indices1>(_STD move(_Val1))...),

  000a2	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2067 :           boost::unordered::detail::allocator_traits<Alloc>::construct(alloc,

  000a5	89 4d f0	 mov	 DWORD PTR _p$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 478  :         : first(_STD _Tuple_get<_Indices1>(_STD move(_Val1))...),

  000a8	8b 00		 mov	 eax, DWORD PTR [eax]
  000aa	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 479  :           second(_STD _Tuple_get<_Indices2>(_STD move(_Val2))...) {}

  000ad	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  000b4	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  000bb	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  000c2	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  000c9	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000d0	0f 11 41 0c	 movups	 XMMWORD PTR [ecx+12], xmm0

; 836  :         _My_data._Mysize = 0;

  000d4	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  000db	c7 41 20 0f 00
	00 00		 mov	 DWORD PTR [ecx+32], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000e2	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000e6	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  000ed	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  000f4	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2071 :           return a.release();

  000fb	8d 4d e4	 lea	 ecx, DWORD PTR _a$2[ebp]

; 1957 :           node_ = node_pointer();

  000fe	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _a$2[ebp+4], 0

; 2071 :           return a.release();

  00105	e8 00 00 00 00	 call	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >

; 1999 :         explicit node_tmp(node_pointer n, NodeAlloc& a) : alloc_(a), node_(n) {}

  0010a	89 75 e4	 mov	 DWORD PTR _b$3[ebp], esi
  0010d	8b 75 f0	 mov	 esi, DWORD PTR _p$1$[ebp]
  00110	89 75 e8	 mov	 DWORD PTR _b$3[ebp+4], esi

; 4542 :         if (!buckets_) {

  00113	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0

; 3717 :           this->reserve_for_insert(this->size_ + 1);

  00117	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  0011a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00121	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00124	89 45 0c	 mov	 DWORD PTR tv905[ebp], eax

; 4542 :         if (!buckets_) {

  00127	75 1a		 jne	 SHORT $LN109@try_emplac

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  00129	50		 push	 eax
  0012a	8b cf		 mov	 ecx, edi
  0012c	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 77   :     return _Left < _Right ? _Right : _Left;

  00131	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00134	3b c8		 cmp	 ecx, eax
  00136	0f 42 c8	 cmovb	 ecx, eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  00139	51		 push	 ecx
  0013a	8b cf		 mov	 ecx, edi
  0013c	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
  00141	eb 2f		 jmp	 SHORT $LN112@try_emplac
$LN109@try_emplac:

; 4544 :         } else if (size > max_load_) {

  00143	3b 47 10	 cmp	 eax, DWORD PTR [edi+16]
  00146	76 2a		 jbe	 SHORT $LN112@try_emplac

; 4545 :           std::size_t num_buckets =

  00148	8b ca		 mov	 ecx, edx
  0014a	d1 e9		 shr	 ecx, 1
  0014c	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  0014f	ba 01 00 00 00	 mov	 edx, 1
  00154	39 45 0c	 cmp	 DWORD PTR tv905[ebp], eax
  00157	0f 42 d1	 cmovb	 edx, ecx
  0015a	8b cf		 mov	 ecx, edi
  0015c	03 57 08	 add	 edx, DWORD PTR [edi+8]
  0015f	52		 push	 edx
  00160	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size

; 4546 :             min_buckets_for_size((std::max)(size, size_ + (size_ >> 1)));
; 4547 : 
; 4548 :           if (num_buckets != bucket_count_)

  00165	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  00168	74 08		 je	 SHORT $LN112@try_emplac

; 4549 :             this->rehash_impl(num_buckets);

  0016a	50		 push	 eax
  0016b	8b cf		 mov	 ecx, edi
  0016d	e8 00 00 00 00	 call	 ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
$LN112@try_emplac:

; 2604 :           return hash % bucket_count;

  00172	8b 45 ec	 mov	 eax, DWORD PTR _key_hash$1$[ebp]

; 3054 :           return policy::to_bucket(bucket_count_, hash_value);

  00175	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]

; 2604 :           return hash % bucket_count;

  00178	33 d2		 xor	 edx, edx

; 3054 :           return policy::to_bucket(bucket_count_, hash_value);

  0017a	89 4d 0c	 mov	 DWORD PTR tv922[ebp], ecx

; 2604 :           return hash % bucket_count;

  0017d	f7 31		 div	 DWORD PTR [ecx]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0017f	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 2007 :           node_ = node_pointer();

  00182	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _b$3[ebp+4], 0

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00189	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  0018c	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00192	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 3693 :           if (!b->next_) {

  00195	8b 01		 mov	 eax, DWORD PTR [ecx]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00197	89 4d ec	 mov	 DWORD PTR _b$1$[ebp], ecx

; 3693 :           if (!b->next_) {

  0019a	85 c0		 test	 eax, eax
  0019c	75 29		 jne	 SHORT $LN123@try_emplac

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0019e	8b 45 0c	 mov	 eax, DWORD PTR tv922[ebp]
  001a1	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  001a4	8b 00		 mov	 eax, DWORD PTR [eax]
  001a6	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]

; 3696 :             if (start_node->next_) {

  001a9	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ab	85 c0		 test	 eax, eax
  001ad	74 0b		 je	 SHORT $LN125@try_emplac

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  001af	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001b2	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 3697 :               this->get_bucket_pointer(node_bucket(next_node(start_node)))

  001b7	89 34 82	 mov	 DWORD PTR [edx+eax*4], esi
$LN125@try_emplac:

; 3698 :                 ->next_ = n;
; 3699 :             }
; 3700 : 
; 3701 :             b->next_ = start_node;

  001ba	8b 45 ec	 mov	 eax, DWORD PTR _b$1$[ebp]
  001bd	89 08		 mov	 DWORD PTR [eax], ecx

; 3702 :             n->next_ = start_node->next_;

  001bf	8b 01		 mov	 eax, DWORD PTR [ecx]
  001c1	89 06		 mov	 DWORD PTR [esi], eax

; 3703 :             start_node->next_ = n;

  001c3	89 31		 mov	 DWORD PTR [ecx], esi

; 3704 :           } else {

  001c5	eb 08		 jmp	 SHORT $LN124@try_emplac
$LN123@try_emplac:

; 3705 :             n->next_ = b->next_->next_;

  001c7	8b 00		 mov	 eax, DWORD PTR [eax]
  001c9	89 06		 mov	 DWORD PTR [esi], eax

; 3706 :             b->next_->next_ = n;

  001cb	8b 01		 mov	 eax, DWORD PTR [ecx]
  001cd	89 30		 mov	 DWORD PTR [eax], esi
$LN124@try_emplac:

; 3707 :           }
; 3708 : 
; 3709 :           ++this->size_;

  001cf	ff 47 08	 inc	 DWORD PTR [edi+8]

; 3718 :           return this->add_node_unique(b.release(), key_hash);

  001d2	8d 4d e4	 lea	 ecx, DWORD PTR _b$3[ebp]
  001d5	e8 00 00 00 00	 call	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001da	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001dd	89 30		 mov	 DWORD PTR [eax], esi
  001df	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3804 :         }

  001e3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001e6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ed	59		 pop	 ecx
  001ee	5f		 pop	 edi
  001ef	5e		 pop	 esi
  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _a$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
__unwindfunclet$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z$5:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR _b$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
_TEXT	SEGMENT
_a$2 = -28						; size = 8
_b$3 = -28						; size = 8
_key_hash$1$ = -20					; size = 4
_b$1$ = -20						; size = 4
_p$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
tv764 = 12						; size = 4
tv777 = 12						; size = 4
??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>, COMDAT
; _this$ = ecx

; 3791 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00029	8b 75 0c	 mov	 esi, DWORD PTR _k$[ebp]
  0002c	ff 36		 push	 DWORD PTR [esi]
  0002e	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00033	0f b6 17	 movzx	 edx, BYTE PTR [edi]
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00036	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00039	83 e2 01	 and	 edx, 1

; 3792 :           std::size_t key_hash = this->hash(k);

  0003c	89 45 ec	 mov	 DWORD PTR _key_hash$1$[ebp], eax

; 2791 :           return *static_cast<function_pair const*>(

  0003f	42		 inc	 edx
  00040	03 d7		 add	 edx, edi

; 3576 :           return this->find_node_impl(key_hash, k, this->key_eq());

  00042	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  00045	f7 da		 neg	 edx
  00047	1b d2		 sbb	 edx, edx
  00049	23 d1		 and	 edx, ecx
  0004b	8b cf		 mov	 ecx, edi
  0004d	52		 push	 edx
  0004e	56		 push	 esi
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 3793 :           node_pointer pos = this->find_node(key_hash, k);

  00055	8b c8		 mov	 ecx, eax

; 3794 :           if (pos) {

  00057	85 c9		 test	 ecx, ecx
  00059	74 1c		 je	 SHORT $LN2@try_emplac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0005b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005e	89 08		 mov	 DWORD PTR [eax], ecx
  00060	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3804 :         }

  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 08 00	 ret	 8
$LN2@try_emplac:

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00077	8d 77 03	 lea	 esi, DWORD PTR [edi+3]

; 1946 :         node_constructor(node_allocator& n) : alloc_(n), node_() {}

  0007a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _a$2[ebp+4], 0
  00081	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00084	f7 de		 neg	 esi
  00086	1b f6		 sbb	 esi, esi
  00088	23 f0		 and	 esi, eax
  0008a	89 75 e4	 mov	 DWORD PTR _a$2[ebp], esi

; 2066 :           a.create_node();

  0008d	8d 4d e4	 lea	 ecx, DWORD PTR _a$2[ebp]
  00090	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00097	e8 00 00 00 00	 call	 ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::create_node

; 2067 :           boost::unordered::detail::allocator_traits<Alloc>::construct(alloc,

  0009c	8b 4d e8	 mov	 ecx, DWORD PTR _a$2[ebp+4]
  0009f	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 478  :         : first(_STD _Tuple_get<_Indices1>(_STD move(_Val1))...),

  000a2	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2067 :           boost::unordered::detail::allocator_traits<Alloc>::construct(alloc,

  000a5	89 4d f0	 mov	 DWORD PTR _p$1$[ebp], ecx

; 1957 :           node_ = node_pointer();

  000a8	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _a$2[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 478  :         : first(_STD _Tuple_get<_Indices1>(_STD move(_Val1))...),

  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 479  :           second(_STD _Tuple_get<_Indices2>(_STD move(_Val2))...) {}

  000b4	0f 11 41 0c	 movups	 XMMWORD PTR [ecx+12], xmm0
  000b8	0f 11 41 1c	 movups	 XMMWORD PTR [ecx+28], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2071 :           return a.release();

  000bc	8d 4d e4	 lea	 ecx, DWORD PTR _a$2[ebp]
  000bf	e8 00 00 00 00	 call	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >

; 1999 :         explicit node_tmp(node_pointer n, NodeAlloc& a) : alloc_(a), node_(n) {}

  000c4	89 75 e4	 mov	 DWORD PTR _b$3[ebp], esi
  000c7	8b 75 f0	 mov	 esi, DWORD PTR _p$1$[ebp]
  000ca	89 75 e8	 mov	 DWORD PTR _b$3[ebp+4], esi

; 4542 :         if (!buckets_) {

  000cd	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0

; 3717 :           this->reserve_for_insert(this->size_ + 1);

  000d1	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  000d4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000db	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000de	89 45 0c	 mov	 DWORD PTR tv764[ebp], eax

; 4542 :         if (!buckets_) {

  000e1	75 1a		 jne	 SHORT $LN75@try_emplac

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  000e3	50		 push	 eax
  000e4	8b cf		 mov	 ecx, edi
  000e6	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 77   :     return _Left < _Right ? _Right : _Left;

  000eb	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000ee	3b c8		 cmp	 ecx, eax
  000f0	0f 42 c8	 cmovb	 ecx, eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  000f3	51		 push	 ecx
  000f4	8b cf		 mov	 ecx, edi
  000f6	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
  000fb	eb 2f		 jmp	 SHORT $LN78@try_emplac
$LN75@try_emplac:

; 4544 :         } else if (size > max_load_) {

  000fd	3b 47 10	 cmp	 eax, DWORD PTR [edi+16]
  00100	76 2a		 jbe	 SHORT $LN78@try_emplac

; 4545 :           std::size_t num_buckets =

  00102	8b ca		 mov	 ecx, edx
  00104	d1 e9		 shr	 ecx, 1
  00106	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00109	ba 01 00 00 00	 mov	 edx, 1
  0010e	39 45 0c	 cmp	 DWORD PTR tv764[ebp], eax
  00111	0f 42 d1	 cmovb	 edx, ecx
  00114	8b cf		 mov	 ecx, edi
  00116	03 57 08	 add	 edx, DWORD PTR [edi+8]
  00119	52		 push	 edx
  0011a	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size

; 4546 :             min_buckets_for_size((std::max)(size, size_ + (size_ >> 1)));
; 4547 : 
; 4548 :           if (num_buckets != bucket_count_)

  0011f	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  00122	74 08		 je	 SHORT $LN78@try_emplac

; 4549 :             this->rehash_impl(num_buckets);

  00124	50		 push	 eax
  00125	8b cf		 mov	 ecx, edi
  00127	e8 00 00 00 00	 call	 ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
$LN78@try_emplac:

; 2604 :           return hash % bucket_count;

  0012c	8b 45 ec	 mov	 eax, DWORD PTR _key_hash$1$[ebp]

; 3054 :           return policy::to_bucket(bucket_count_, hash_value);

  0012f	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]

; 2604 :           return hash % bucket_count;

  00132	33 d2		 xor	 edx, edx

; 3054 :           return policy::to_bucket(bucket_count_, hash_value);

  00134	89 4d 0c	 mov	 DWORD PTR tv777[ebp], ecx

; 2604 :           return hash % bucket_count;

  00137	f7 31		 div	 DWORD PTR [ecx]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00139	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 2007 :           node_ = node_pointer();

  0013c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _b$3[ebp+4], 0

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00143	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00146	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0014c	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 3693 :           if (!b->next_) {

  0014f	8b 01		 mov	 eax, DWORD PTR [ecx]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00151	89 4d ec	 mov	 DWORD PTR _b$1$[ebp], ecx

; 3693 :           if (!b->next_) {

  00154	85 c0		 test	 eax, eax
  00156	75 29		 jne	 SHORT $LN89@try_emplac

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00158	8b 45 0c	 mov	 eax, DWORD PTR tv777[ebp]
  0015b	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0015e	8b 00		 mov	 eax, DWORD PTR [eax]
  00160	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]

; 3696 :             if (start_node->next_) {

  00163	8b 01		 mov	 eax, DWORD PTR [ecx]
  00165	85 c0		 test	 eax, eax
  00167	74 0b		 je	 SHORT $LN91@try_emplac

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00169	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0016c	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 3697 :               this->get_bucket_pointer(node_bucket(next_node(start_node)))

  00171	89 34 82	 mov	 DWORD PTR [edx+eax*4], esi
$LN91@try_emplac:

; 3698 :                 ->next_ = n;
; 3699 :             }
; 3700 : 
; 3701 :             b->next_ = start_node;

  00174	8b 45 ec	 mov	 eax, DWORD PTR _b$1$[ebp]
  00177	89 08		 mov	 DWORD PTR [eax], ecx

; 3702 :             n->next_ = start_node->next_;

  00179	8b 01		 mov	 eax, DWORD PTR [ecx]
  0017b	89 06		 mov	 DWORD PTR [esi], eax

; 3703 :             start_node->next_ = n;

  0017d	89 31		 mov	 DWORD PTR [ecx], esi

; 3704 :           } else {

  0017f	eb 08		 jmp	 SHORT $LN90@try_emplac
$LN89@try_emplac:

; 3705 :             n->next_ = b->next_->next_;

  00181	8b 00		 mov	 eax, DWORD PTR [eax]
  00183	89 06		 mov	 DWORD PTR [esi], eax

; 3706 :             b->next_->next_ = n;

  00185	8b 01		 mov	 eax, DWORD PTR [ecx]
  00187	89 30		 mov	 DWORD PTR [eax], esi
$LN90@try_emplac:

; 3707 :           }
; 3708 : 
; 3709 :           ++this->size_;

  00189	ff 47 08	 inc	 DWORD PTR [edi+8]

; 3718 :           return this->add_node_unique(b.release(), key_hash);

  0018c	8d 4d e4	 lea	 ecx, DWORD PTR _b$3[ebp]
  0018f	e8 00 00 00 00	 call	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00194	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00197	89 30		 mov	 DWORD PTR [eax], esi
  00199	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3804 :         }

  0019d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a7	59		 pop	 ecx
  001a8	5f		 pop	 edi
  001a9	5e		 pop	 esi
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _a$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
__unwindfunclet$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR _b$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
;	COMDAT ??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z
_TEXT	SEGMENT
_alloc$ = 8						; size = 4
_oldPtr$ = 12						; size = 4
_oldSize$ = 16						; size = 4
$T1 = 16						; size = 4
_newSize$ = 20						; size = 4
_preserve$ = 24						; size = 1
??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z PROC ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >, COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 150  : 	CRYPTOPP_ASSERT((oldPtr && oldSize) || !(oldPtr || oldSize));
; 151  : 	if (oldSize == newSize)

  00004	8b 5d 10	 mov	 ebx, DWORD PTR _oldSize$[ebp]
  00007	56		 push	 esi
  00008	8b 75 14	 mov	 esi, DWORD PTR _newSize$[ebp]
  0000b	3b de		 cmp	 ebx, esi
  0000d	75 07		 jne	 SHORT $LN2@StandardRe

; 152  : 		return oldPtr;

  0000f	8b 45 0c	 mov	 eax, DWORD PTR _oldPtr$[ebp]
  00012	5e		 pop	 esi

; 162  : 	}
; 163  : 	else
; 164  : 	{
; 165  : 		alloc.deallocate(oldPtr, oldSize);
; 166  : 		return alloc.allocate(newSize, NULLPTR);
; 167  : 	}
; 168  : }

  00013	5b		 pop	 ebx
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN2@StandardRe:

; 153  : 
; 154  : 	if (preserve)

  00016	80 7d 18 00	 cmp	 BYTE PTR _preserve$[ebp], 0
  0001a	57		 push	 edi
  0001b	74 4e		 je	 SHORT $LN3@StandardRe

; 203  : 		if (size == 0)

  0001d	85 f6		 test	 esi, esi
  0001f	75 04		 jne	 SHORT $LN8@StandardRe

; 204  : 			return NULLPTR;

  00021	33 c0		 xor	 eax, eax
  00023	eb 09		 jmp	 SHORT $LN76@StandardRe
$LN8@StandardRe:

; 205  : 
; 206  : #if CRYPTOPP_BOOL_ALIGN16
; 207  : 		// TODO: Does this need the test 'size*sizeof(T) >= 16'?
; 208  : 		if (T_Align16 && size)
; 209  : 			return reinterpret_cast<pointer>(AlignedAllocate(size*sizeof(T)));
; 210  : #endif
; 211  : 
; 212  : 		return reinterpret_cast<pointer>(UnalignedAllocate(size*sizeof(T)));

  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  0002b	83 c4 04	 add	 esp, 4
$LN76@StandardRe:

; 155  : 	{
; 156  : 		typename A::pointer newPointer = alloc.allocate(newSize, NULLPTR);

  0002e	3b f3		 cmp	 esi, ebx
  00030	89 45 10	 mov	 DWORD PTR $T1[ebp], eax
  00033	8b cb		 mov	 ecx, ebx
  00035	0f 42 ce	 cmovb	 ecx, esi

; 157  : 		const size_t copySize = STDMIN(oldSize, newSize) * sizeof(T);
; 158  : 
; 159  : 		if (oldPtr && newPointer) {memcpy_s(newPointer, copySize, oldPtr, copySize);}

  00038	8b 75 0c	 mov	 esi, DWORD PTR _oldPtr$[ebp]
  0003b	85 f6		 test	 esi, esi
  0003d	74 13		 je	 SHORT $LN19@StandardRe
  0003f	85 c0		 test	 eax, eax
  00041	74 0f		 je	 SHORT $LN19@StandardRe
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h

; 46   :         if (_SourceSize == 0)

  00043	85 c9		 test	 ecx, ecx
  00045	74 0b		 je	 SHORT $LN19@StandardRe

; 47   :         {
; 48   :             return 0;
; 49   :         }
; 50   : 
; 51   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);
; 52   :         if (_Source == NULL || _DestinationSize < _SourceSize)
; 53   :         {
; 54   :             memset(_Destination, 0, _DestinationSize);
; 55   : 
; 56   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 57   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);
; 58   : 
; 59   :             // Unreachable, but required to suppress /analyze warnings:
; 60   :             return EINVAL;
; 61   :         }
; 62   :         memcpy(_Destination, _Source, _SourceSize);

  00047	51		 push	 ecx
  00048	56		 push	 esi
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _memcpy
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@StandardRe:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00052	32 c0		 xor	 al, al
  00054	8b fe		 mov	 edi, esi
  00056	8b cb		 mov	 ecx, ebx
  00058	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate

; 160  : 		alloc.deallocate(oldPtr, oldSize);
; 161  : 		return newPointer;

  00060	8b 45 10	 mov	 eax, DWORD PTR $T1[ebp]

; 212  : 		return reinterpret_cast<pointer>(UnalignedAllocate(size*sizeof(T)));

  00063	83 c4 04	 add	 esp, 4
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi

; 162  : 	}
; 163  : 	else
; 164  : 	{
; 165  : 		alloc.deallocate(oldPtr, oldSize);
; 166  : 		return alloc.allocate(newSize, NULLPTR);
; 167  : 	}
; 168  : }

  00068	5b		 pop	 ebx
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN3@StandardRe:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0006b	8b 55 0c	 mov	 edx, DWORD PTR _oldPtr$[ebp]
  0006e	32 c0		 xor	 al, al
  00070	8b fa		 mov	 edi, edx
  00072	8b cb		 mov	 ecx, ebx
  00074	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  0007c	83 c4 04	 add	 esp, 4

; 203  : 		if (size == 0)

  0007f	85 f6		 test	 esi, esi
  00081	75 07		 jne	 SHORT $LN64@StandardRe
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi

; 204  : 			return NULLPTR;

  00085	33 c0		 xor	 eax, eax

; 162  : 	}
; 163  : 	else
; 164  : 	{
; 165  : 		alloc.deallocate(oldPtr, oldSize);
; 166  : 		return alloc.allocate(newSize, NULLPTR);
; 167  : 	}
; 168  : }

  00087	5b		 pop	 ebx
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN64@StandardRe:

; 212  : 		return reinterpret_cast<pointer>(UnalignedAllocate(size*sizeof(T)));

  0008a	56		 push	 esi
  0008b	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  00090	83 c4 04	 add	 esp, 4
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi

; 162  : 	}
; 163  : 	else
; 164  : 	{
; 165  : 		alloc.deallocate(oldPtr, oldSize);
; 166  : 		return alloc.allocate(newSize, NULLPTR);
; 167  : 	}
; 168  : }

  00095	5b		 pop	 ebx
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ENDP ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN15@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN15@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@
  0006f	8b c7		 mov	 eax, edi
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
; Function compile flags: /Ogtp
;	COMDAT ??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::~InputRejected, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::~InputRejected
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$GSCopy$ = -48					; size = 4
_this$ = -44						; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected, COMDAT
; _this$ = ecx

; 138  : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	89 75 d4	 mov	 DWORD PTR _this$[ebp], esi
  0002e	0f 57 c0	 xorps	 xmm0, xmm0
  00031	89 75 d0	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00034	6a 40		 push	 64			; 00000040H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00036	0f 11 45 d8	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003f	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 256  :         return _Traits::_Allocate(_Bytes);

  00046	8b c8		 mov	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  00048	c7 45 e8 37 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 55 ; 00000037H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0004f	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00052	89 4d d8	 mov	 DWORD PTR $T2[ebp], ecx

; 892  :         _My_data._Myres  = _New_capacity;

  00055	c7 45 ec 3f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 63 ; 0000003fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0005c	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0005f	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+16
  00066	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0006a	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+32
  00071	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0
  00075	a1 30 00 00 00	 mov	 eax, DWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+48
  0007a	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  0007d	66 a1 34 00 00
	00		 mov	 ax, WORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+52
  00083	66 89 41 34	 mov	 WORD PTR [ecx+52], ax
  00087	a0 36 00 00 00	 mov	 al, BYTE PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+54
  0008c	88 41 36	 mov	 BYTE PTR [ecx+54], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0008f	c6 41 37 00	 mov	 BYTE PTR [ecx+55], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 138  : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  00093	0f 57 c0	 xorps	 xmm0, xmm0
  00096	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h

; 54   :         : _Data()

  0009d	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 183  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  000a2	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  000a5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a9	50		 push	 eax
  000aa	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  000ad	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  000b3	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000ba	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000bf	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 226  : 	explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}

  000c2	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NotImplemented@CryptoPP@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000c8	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000cb	76 28		 jbe	 SHORT $LN85@InputRejec
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000cd	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d0	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d1	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000d3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000d9	72 10		 jb	 SHORT $LN96@InputRejec

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000db	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000de	83 c1 23	 add	 ecx, 35			; 00000023H
  000e1	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e3	83 c0 fc	 add	 eax, -4			; fffffffcH
  000e6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000e9	77 2c		 ja	 SHORT $LN105@InputRejec
$LN96@InputRejec:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000eb	51		 push	 ecx
  000ec	52		 push	 edx
  000ed	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000f2	83 c4 08	 add	 esp, 8
$LN85@InputRejec:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 138  : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  000f5	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@
  000fb	8b c6		 mov	 eax, esi
  000fd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00100	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00107	59		 pop	 ecx
  00108	5e		 pop	 esi
  00109	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010c	33 cd		 xor	 ecx, ebp
  0010e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c3		 ret	 0
$LN105@InputRejec:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00117	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN103@InputRejec:
  0011c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ$5:
  00008	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Assign_counted_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXPAEI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__First$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Oldsize$1$ = 12					; size = 4
$T1 = 12						; size = 4
??$_Assign_counted_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXPAEI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_counted_range<unsigned char *>, COMDAT
; _this$ = ecx

; 1405 :     _CONSTEXPR20 void _Assign_counted_range(_Iter _First, const size_type _Newsize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1406 :         // assign elements from counted range _First + [0, _Newsize)
; 1407 :         auto& _Al         = _Getal();
; 1408 :         auto& _My_data    = _Mypair._Myval2;
; 1409 :         pointer& _Myfirst = _My_data._Myfirst;
; 1410 :         pointer& _Mylast  = _My_data._Mylast;
; 1411 :         pointer& _Myend   = _My_data._Myend;
; 1412 : 
; 1413 :         constexpr bool _Nothrow_construct = conjunction_v<is_nothrow_constructible<_Ty, _Iter_ref_t<_Iter>>,
; 1414 :             _Uses_default_construct<_Alloc, _Ty*, _Iter_ref_t<_Iter>>>;
; 1415 : 
; 1416 :         _My_data._Orphan_all();
; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1418 :         if (_Newsize > _Oldcapacity) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi
  0000f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00012	8b 3e		 mov	 edi, DWORD PTR [esi]
  00014	2b cf		 sub	 ecx, edi
  00016	3b d9		 cmp	 ebx, ecx
  00018	0f 86 b7 00 00
	00		 jbe	 $LN5@Assign_cou

; 1688 :         if (_Newsize > max_size()) {

  0001e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00024	0f 87 e8 00 00
	00		 ja	 $LN98@Assign_cou

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0002a	8b d1		 mov	 edx, ecx
  0002c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00031	d1 ea		 shr	 edx, 1
  00033	2b c2		 sub	 eax, edx
  00035	3b c8		 cmp	 ecx, eax
  00037	76 07		 jbe	 SHORT $LN15@Assign_cou

; 1997 :             return _Max; // geometric growth would overflow

  00039	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0003e	eb 08		 jmp	 SHORT $LN95@Assign_cou
$LN15@Assign_cou:

; 1998 :         }
; 1999 : 
; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00040	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00043	3b c3		 cmp	 eax, ebx
  00045	0f 42 c3	 cmovb	 eax, ebx
$LN95@Assign_cou:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00048	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
  0004b	85 ff		 test	 edi, edi
  0004d	74 3c		 je	 SHORT $LN12@Assign_cou
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0004f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00055	72 16		 jb	 SHORT $LN37@Assign_cou

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00057	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  0005a	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005d	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00062	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00065	0f 87 ac 00 00
	00		 ja	 $LN34@Assign_cou

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006b	8b fa		 mov	 edi, edx
$LN37@Assign_cou:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006d	51		 push	 ecx
  0006e	57		 push	 edi
  0006f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1699 :             _Myfirst = nullptr;

  00074	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007a	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1700 :             _Mylast  = nullptr;

  0007d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1701 :             _Myend   = nullptr;

  00084	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN12@Assign_cou:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0008b	8b 7d 0c	 mov	 edi, DWORD PTR $T1[ebp]
  0008e	85 ff		 test	 edi, edi
  00090	74 1a		 je	 SHORT $LN47@Assign_cou
$LN48@Assign_cou:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00092	57		 push	 edi
  00093	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  00099	72 07		 jb	 SHORT $LN49@Assign_cou

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a0	eb 05		 jmp	 SHORT $LN96@Assign_cou
$LN49@Assign_cou:

; 136  :         return ::operator new(_Bytes);

  000a2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@Assign_cou:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  000a7	8b f8		 mov	 edi, eax
  000a9	83 c4 04	 add	 esp, 4
$LN47@Assign_cou:

; 2021 :         _Mylast               = _Newvec;
; 2022 :         _Myend                = _Newvec + _Newcapacity;

  000ac	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  000af	89 3e		 mov	 DWORD PTR [esi], edi
  000b1	03 c7		 add	 eax, edi
  000b3	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  000b6	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN6@Assign_cou:

; 1465 :     }

  000b9	57		 push	 edi
  000ba	53		 push	 ebx
  000bb	ff 75 08	 push	 DWORD PTR __First$[ebp]
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAEPAE@std@@YAPAEPAEI0@Z ; std::_Copy_memmove_n<unsigned char *,unsigned char *>
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  000c9	89 46 04	 mov	 DWORD PTR [esi+4], eax
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 08 00	 ret	 8
$LN5@Assign_cou:

; 1419 :             _Clear_and_reserve_geometric(_Newsize);
; 1420 :             if constexpr (_Nothrow_construct) {
; 1421 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);
; 1422 :                 _ASAN_VECTOR_CREATE;
; 1423 :             } else {
; 1424 :                 _ASAN_VECTOR_CREATE_GUARD;
; 1425 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);
; 1426 :             }
; 1427 :             return;
; 1428 :         }
; 1429 : 
; 1430 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  000d5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000d8	2b c7		 sub	 eax, edi
  000da	89 45 0c	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1431 :         if (_Newsize > _Oldsize) {

  000dd	3b d8		 cmp	 ebx, eax
  000df	76 d8		 jbe	 SHORT $LN6@Assign_cou

; 1432 :             bool _Copied = false;
; 1433 :             if constexpr (_Iter_copy_cat<_Iter, pointer>::_Bitcopy_assignable) {
; 1434 : #if _HAS_CXX20
; 1435 :                 if (!_STD is_constant_evaluated())
; 1436 : #endif // _HAS_CXX20
; 1437 :                 {
; 1438 :                     _Copy_memmove_n(_First, static_cast<size_t>(_Oldsize), _Myfirst);

  000e1	57		 push	 edi
  000e2	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  000e5	50		 push	 eax
  000e6	57		 push	 edi
  000e7	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAEPAE@std@@YAPAEPAEI0@Z ; std::_Copy_memmove_n<unsigned char *,unsigned char *>

; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  000ec	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ef	2b 5d 0c	 sub	 ebx, DWORD PTR __Oldsize$1$[ebp]
  000f2	03 7d 0c	 add	 edi, DWORD PTR __Oldsize$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  000f5	56		 push	 esi
  000f6	53		 push	 ebx
  000f7	57		 push	 edi
  000f8	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAEPAE@std@@YAPAEPAEI0@Z ; std::_Copy_memmove_n<unsigned char *,unsigned char *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  000fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1894 :             _Dest += _Count;

  00100	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  00103	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  00106	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00109	5f		 pop	 edi

; 1465 :     }

  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 08 00	 ret	 8
$LN98@Assign_cou:

; 1689 :             _Xlength();

  00112	e8 00 00 00 00	 call	 ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
$LN34@Assign_cou:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00117	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN94@Assign_cou:
  0011c	cc		 int	 3
??$_Assign_counted_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXPAEI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_counted_range<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN15@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN15@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@
  0006f	8b c7		 mov	 eax, edi
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
; Function compile flags: /Ogtp
;	COMDAT ??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::~InputRejected, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::~InputRejected
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$GSCopy$ = -48					; size = 4
_this$ = -44						; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected, COMDAT
; _this$ = ecx

; 138  : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	89 75 d4	 mov	 DWORD PTR _this$[ebp], esi
  0002e	0f 57 c0	 xorps	 xmm0, xmm0
  00031	89 75 d0	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00034	6a 40		 push	 64			; 00000040H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00036	0f 11 45 d8	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003f	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 256  :         return _Traits::_Allocate(_Bytes);

  00046	8b c8		 mov	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  00048	c7 45 e8 37 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 55 ; 00000037H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0004f	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00052	89 4d d8	 mov	 DWORD PTR $T2[ebp], ecx

; 892  :         _My_data._Myres  = _New_capacity;

  00055	c7 45 ec 3f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 63 ; 0000003fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0005c	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0005f	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+16
  00066	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0006a	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+32
  00071	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0
  00075	a1 30 00 00 00	 mov	 eax, DWORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+48
  0007a	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  0007d	66 a1 34 00 00
	00		 mov	 ax, WORD PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+52
  00083	66 89 41 34	 mov	 WORD PTR [ecx+52], ax
  00087	a0 36 00 00 00	 mov	 al, BYTE PTR ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@+54
  0008c	88 41 36	 mov	 BYTE PTR [ecx+54], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0008f	c6 41 37 00	 mov	 BYTE PTR [ecx+55], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 138  : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  00093	0f 57 c0	 xorps	 xmm0, xmm0
  00096	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h

; 54   :         : _Data()

  0009d	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 183  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  000a2	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  000a5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a9	50		 push	 eax
  000aa	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  000ad	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  000b3	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000ba	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000bf	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 226  : 	explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}

  000c2	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NotImplemented@CryptoPP@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000c8	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000cb	76 28		 jbe	 SHORT $LN85@InputRejec
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000cd	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d0	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d1	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000d3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000d9	72 10		 jb	 SHORT $LN96@InputRejec

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000db	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000de	83 c1 23	 add	 ecx, 35			; 00000023H
  000e1	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e3	83 c0 fc	 add	 eax, -4			; fffffffcH
  000e6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000e9	77 2c		 ja	 SHORT $LN105@InputRejec
$LN96@InputRejec:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000eb	51		 push	 ecx
  000ec	52		 push	 edx
  000ed	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000f2	83 c4 08	 add	 esp, 8
$LN85@InputRejec:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 138  : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  000f5	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@
  000fb	8b c6		 mov	 eax, esi
  000fd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00100	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00107	59		 pop	 ecx
  00108	5e		 pop	 esi
  00109	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010c	33 cd		 xor	 ecx, ebp
  0010e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c3		 ret	 0
$LN105@InputRejec:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00117	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN103@InputRejec:
  0011c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ$5:
  00008	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
;	COMDAT ??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0000d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  00014	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  0001b	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  00022	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00027	8b 4e 7c	 mov	 ecx, DWORD PTR [esi+124]
  0002a	8d 56 60	 lea	 edx, DWORD PTR [esi+96]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002d	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  00030	8b 7a 20	 mov	 edi, DWORD PTR [edx+32]
  00033	0f 42 4a 18	 cmovb	 ecx, DWORD PTR [edx+24]

; 614  : 		if (ptr == GetAlignedArray())

  00037	3b fa		 cmp	 edi, edx
  00039	75 08		 jne	 SHORT $LN65@scalar
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0003b	33 c0		 xor	 eax, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  0003d	c6 42 11 00	 mov	 BYTE PTR [edx+17], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00041	f3 ab		 rep stosd
$LN65@scalar:
  00043	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00047	74 0e		 je	 SHORT $LN77@scalar
  00049	68 90 00 00 00	 push	 144			; 00000090H
  0004e	56		 push	 esi
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
$LN77@scalar:
  00057	5f		 pop	 edi
  00058	8b c6		 mov	 eax, esi
  0005a	5e		 pop	 esi
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
;	COMDAT ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >, COMDAT
; _this$ = ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0000a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  00011	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  00018	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  0001f	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00024	8b 4e 7c	 mov	 ecx, DWORD PTR [esi+124]
  00027	83 c6 60	 add	 esi, 96			; 00000060H
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002a	39 4e 18	 cmp	 DWORD PTR [esi+24], ecx
  0002d	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]
  00030	0f 42 4e 18	 cmovb	 ecx, DWORD PTR [esi+24]

; 614  : 		if (ptr == GetAlignedArray())

  00034	3b fe		 cmp	 edi, esi
  00036	75 08		 jne	 SHORT $LN59@CipherMode
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00038	33 c0		 xor	 eax, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  0003a	c6 46 11 00	 mov	 BYTE PTR [esi+17], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0003e	f3 ab		 rep stosd
$LN59@CipherMode:
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	c3		 ret	 0
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider, COMDAT
; _this$ = ecx

; 399  : 	std::string AlgorithmProvider() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 400  : 		return this->m_cipher->AlgorithmProvider();

  00004	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00007	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0000a	83 c1 04	 add	 ecx, 4
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	ff 52 0c	 call	 DWORD PTR [edx+12]
  00012	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 401  : 	}

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >, COMDAT
; _this$ = ecx

; 356  : 	CipherModeFinalTemplate_CipherHolder()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx

; 357  : 	{

  0002d	8d 7b 50	 lea	 edi, DWORD PTR [ebx+80]
  00030	6a 01		 push	 1
  00032	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00035	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi
  00038	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0003d	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 597  : 			m_allocated = true;

  00040	c6 40 11 01	 mov	 BYTE PTR [eax+17], 1

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  00044	c7 40 18 ff ff
	ff 3f		 mov	 DWORD PTR [eax+24], 1073741823 ; 3fffffffH
  0004b	c7 40 1c 04 00
	00 00		 mov	 DWORD PTR [eax+28], 4
  00052	89 40 20	 mov	 DWORD PTR [eax+32], eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h

; 322  :  	BlockCipherFinal() {}

  00055	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0005b	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 357  : 	{

  00062	8b cb		 mov	 ecx, ebx
  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006b	e8 00 00 00 00	 call	 ??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ

; 358  : 		this->m_cipher = &this->m_object;
; 359  : 		this->ResizeBuffers();

  00070	8b cb		 mov	 ecx, ebx
  00072	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00076	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0007c	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
  00083	c7 43 1c 00 00
	00 00		 mov	 DWORD PTR [ebx+28], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  0008a	c7 43 30 00 00
	00 00		 mov	 DWORD PTR [ebx+48], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  00091	89 7b 08	 mov	 DWORD PTR [ebx+8], edi
  00094	e8 00 00 00 00	 call	 ?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ ; CryptoPP::CipherModeBase::ResizeBuffers

; 360  : 	}

  00099	8b c3		 mov	 eax, ebx
  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a5	59		 pop	 ecx
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 50	 add	 ecx, 80			; 00000050H
  00006	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >, COMDAT
; _this$ = ecx

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  0000d	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  00014	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  0001b	e9 00 00 00 00	 jmp	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -68				; size = 4
$T2 = -64						; size = 24
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0002c	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0002f	0f 11 45 c0	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00033	89 75 bc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00036	c7 45 d0 04 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 4

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0003d	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00044	c7 45 c0 58 54
	45 41		 mov	 DWORD PTR $T2[ebp], 1095062616 ; 41455458H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0004b	c6 45 c4 00	 mov	 BYTE PTR $T2[ebp+4], 0

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0004f	6a 01		 push	 1
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1@
  00056	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 353  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00060	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00065	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0
  0006c	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0006f	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00073	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0007a	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0007d	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0
  00081	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00086	66 0f d6 45 e8	 movq	 QWORD PTR $T3[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  0008b	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00092	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00099	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0009c	6a 03		 push	 3
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_03LECCGOIK@CTR@
  000a3	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 353  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  000a6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000aa	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000af	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000b2	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000b5	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000bc	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000c3	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000c6	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000c9	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000ce	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  000d3	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  000da	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  000e1	c6 00 00	 mov	 BYTE PTR [eax], 0

; 434  :         return _Myres > _Small_string_capacity;

  000e4	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  000e7	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000ea	76 28		 jbe	 SHORT $LN162@AlgorithmN
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ec	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000ef	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f0	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000f2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f8	72 10		 jb	 SHORT $LN173@AlgorithmN

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fa	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fd	83 c1 23	 add	 ecx, 35			; 00000023H
  00100	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00102	83 c0 fc	 add	 eax, -4			; fffffffcH
  00105	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00108	77 6a		 ja	 SHORT $LN207@AlgorithmN
$LN173@AlgorithmN:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	52		 push	 edx
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN162@AlgorithmN:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00114	8b 4d d4	 mov	 ecx, DWORD PTR $T2[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  00117	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0011e	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00125	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  00129	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0012c	76 28		 jbe	 SHORT $LN199@AlgorithmN
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012e	8b 55 c0	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00131	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00132	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00134	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0013a	72 10		 jb	 SHORT $LN210@AlgorithmN

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0013c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0013f	83 c1 23	 add	 ecx, 35			; 00000023H
  00142	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00144	83 c0 fc	 add	 eax, -4			; fffffffcH
  00147	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0014a	77 28		 ja	 SHORT $LN207@AlgorithmN
$LN210@AlgorithmN:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0014c	51		 push	 ecx
  0014d	52		 push	 edx
  0014e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00153	83 c4 08	 add	 esp, 8
$LN199@AlgorithmN:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00156	8b c6		 mov	 eax, esi
  00158	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00162	59		 pop	 ecx
  00163	5e		 pop	 esi
  00164	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00167	33 cd		 xor	 ecx, ebp
  00169	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c2 04 00	 ret	 4
$LN207@AlgorithmN:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00174	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN219@AlgorithmN:
  00179	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
;	COMDAT ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >, COMDAT
; _this$ = ecx

; 569  : 	return b < a ? b : a;

  00000	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	57		 push	 edi
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00007	39 51 18	 cmp	 DWORD PTR [ecx+24], edx
  0000a	8b 79 20	 mov	 edi, DWORD PTR [ecx+32]
  0000d	0f 42 51 18	 cmovb	 edx, DWORD PTR [ecx+24]

; 614  : 		if (ptr == GetAlignedArray())

  00011	3b f9		 cmp	 edi, ecx
  00013	75 0a		 jne	 SHORT $LN44@ObjectHold

; 615  : 		{
; 616  : 			// If the m_allocated assert fires then
; 617  : 			// something overwrote the flag.
; 618  : 			CRYPTOPP_ASSERT(size <= S);
; 619  : 			CRYPTOPP_ASSERT(m_allocated);
; 620  : 			m_allocated = false;

  00015	c6 41 11 00	 mov	 BYTE PTR [ecx+17], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00019	33 c0		 xor	 eax, eax
  0001b	8b ca		 mov	 ecx, edx
  0001d	f3 ab		 rep stosd
$LN44@ObjectHold:
  0001f	5f		 pop	 edi
  00020	c3		 ret	 0
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
;	COMDAT ??_G?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 569  : 	return b < a ? b : a;

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00009	39 4e 28	 cmp	 DWORD PTR [esi+40], ecx
  0000c	8d 56 10	 lea	 edx, DWORD PTR [esi+16]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  0000f	57		 push	 edi
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00010	0f 42 4a 18	 cmovb	 ecx, DWORD PTR [edx+24]
  00014	8b 7a 20	 mov	 edi, DWORD PTR [edx+32]

; 614  : 		if (ptr == GetAlignedArray())

  00017	3b fa		 cmp	 edi, edx
  00019	75 08		 jne	 SHORT $LN45@scalar
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0001b	33 c0		 xor	 eax, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  0001d	c6 42 11 00	 mov	 BYTE PTR [edx+17], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00021	f3 ab		 rep stosd
$LN45@scalar:
  00023	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00027	74 0b		 je	 SHORT $LN57@scalar
  00029	6a 40		 push	 64			; 00000040H
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00031	83 c4 08	 add	 esp, 8
$LN57@scalar:
  00034	5f		 pop	 edi
  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
??_G?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::IsForwardTransformation, COMDAT
; _this$ = ecx

; 351  : 	bool IsForwardTransformation() const {return DIR == ENCRYPTION;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::IsForwardTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::Clone, COMDAT
; _this$ = ecx

; 28   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	6a 40		 push	 64			; 00000040H
  00008	8b f9		 mov	 edi, ecx
  0000a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000f	8b f0		 mov	 esi, eax
  00011	83 c4 04	 add	 esp, 4
  00014	89 75 fc	 mov	 DWORD PTR $T1[ebp], esi
  00017	85 f6		 test	 esi, esi
  00019	0f 84 a1 00 00
	00		 je	 $LN3@Clone
  0001f	66 8b 47 04	 mov	 ax, WORD PTR [edi+4]
  00023	66 89 46 08	 mov	 WORD PTR [esi+8], ax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 553  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  00027	c6 46 21 00	 mov	 BYTE PTR [esi+33], 0

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  0002b	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  0002e	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00031	8b 57 28	 mov	 edx, DWORD PTR [edi+40]
  00034	89 56 2c	 mov	 DWORD PTR [esi+44], edx

; 595  : 		if (size <= S && !m_allocated)

  00037	83 7f 28 04	 cmp	 DWORD PTR [edi+40], 4
  0003b	77 09		 ja	 SHORT $LN44@Clone

; 596  : 		{
; 597  : 			m_allocated = true;

  0003d	c6 46 21 01	 mov	 BYTE PTR [esi+33], 1

; 598  : 			return GetAlignedArray();

  00041	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00044	eb 02		 jmp	 SHORT $LN45@Clone
$LN44@Clone:

; 599  : 		}
; 600  : 		else
; 601  : 			return m_fallbackAllocator.allocate(size, hint);

  00046	33 c0		 xor	 eax, eax
$LN45@Clone:

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  00048	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 731  : 			CRYPTOPP_ASSERT((!t.m_ptr && !m_size) || (t.m_ptr && m_size));
; 732  : 			if (t.m_ptr) {memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, t.m_size*sizeof(T));}

  0004b	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  0004f	74 4d		 je	 SHORT $LN53@Clone
  00051	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  00054	c1 e1 02	 shl	 ecx, 2
  00057	c1 e2 02	 shl	 edx, 2
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h

; 46   :         if (_SourceSize == 0)

  0005a	85 c9		 test	 ecx, ecx
  0005c	74 40		 je	 SHORT $LN53@Clone

; 47   :         {
; 48   :             return 0;
; 49   :         }
; 50   : 
; 51   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  0005e	85 c0		 test	 eax, eax
  00060	75 0d		 jne	 SHORT $LN49@Clone
  00062	e8 00 00 00 00	 call	 __errno
  00067	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  0006d	eb 2a		 jmp	 SHORT $LN61@Clone
$LN49@Clone:

; 52   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  0006f	3b d1		 cmp	 edx, ecx
  00071	72 0f		 jb	 SHORT $LN51@Clone

; 58   : 
; 59   :             // Unreachable, but required to suppress /analyze warnings:
; 60   :             return EINVAL;
; 61   :         }
; 62   :         memcpy(_Destination, _Source, _SourceSize);

  00073	51		 push	 ecx
  00074	ff 77 2c	 push	 DWORD PTR [edi+44]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _memcpy
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	eb 1c		 jmp	 SHORT $LN53@Clone
$LN51@Clone:

; 53   :         {
; 54   :             memset(_Destination, 0, _DestinationSize);

  00082	52		 push	 edx
  00083	6a 00		 push	 0
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _memset
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 
; 56   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 57   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  0008e	e8 00 00 00 00	 call	 __errno
  00093	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
$LN61@Clone:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 28   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00099	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN53@Clone:
  0009e	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  000a1	89 46 38	 mov	 DWORD PTR [esi+56], eax
  000a4	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a7	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  000ad	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  000b4	f7 de		 neg	 esi
  000b6	5f		 pop	 edi
  000b7	1b f6		 sbb	 esi, esi
  000b9	23 c6		 and	 eax, esi
  000bb	5e		 pop	 esi
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN3@Clone:
  000c0	33 f6		 xor	 esi, esi
  000c2	5f		 pop	 edi
  000c3	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000c6	f7 de		 neg	 esi
  000c8	1b f6		 sbb	 esi, esi
  000ca	23 c6		 and	 eax, esi
  000cc	5e		 pop	 esi
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::Clone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0000c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  00013	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  0001a	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  00021	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
  00026	8d 4e 50	 lea	 ecx, DWORD PTR [esi+80]
  00029	e8 00 00 00 00	 call	 ??1Base@Twofish@CryptoPP@@UAE@XZ
  0002e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00032	74 0e		 je	 SHORT $LN40@scalar
  00034	68 30 11 00 00	 push	 4400			; 00001130H
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003f	83 c4 08	 add	 esp, 8
$LN40@scalar:
  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >, COMDAT
; _this$ = ecx

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  00010	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  00017	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  0001e	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
  00023	8d 4e 50	 lea	 ecx, DWORD PTR [esi+80]
  00026	5e		 pop	 esi
  00027	e9 00 00 00 00	 jmp	 ??1Base@Twofish@CryptoPP@@UAE@XZ
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider, COMDAT
; _this$ = ecx

; 399  : 	std::string AlgorithmProvider() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 400  : 		return this->m_cipher->AlgorithmProvider();

  00004	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00007	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0000a	83 c1 04	 add	 ecx, 4
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	ff 52 0c	 call	 DWORD PTR [edx+12]
  00012	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 401  : 	}

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >, COMDAT
; _this$ = ecx

; 356  : 	CipherModeFinalTemplate_CipherHolder()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx

; 357  : 	{

  0002d	8d 7b 50	 lea	 edi, DWORD PTR [ebx+80]
  00030	6a 01		 push	 1
  00032	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00035	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi
  00038	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 597  : 			m_allocated = true;

  0003d	c6 87 b1 00 00
	00 01		 mov	 BYTE PTR [edi+177], 1
  00044	8d 47 10	 lea	 eax, DWORD PTR [edi+16]

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  00047	c7 80 a8 00 00
	00 ff ff ff 3f	 mov	 DWORD PTR [eax+168], 1073741823 ; 3fffffffH
  00051	c7 80 ac 00 00
	00 28 00 00 00	 mov	 DWORD PTR [eax+172], 40	; 00000028H
  0005b	89 80 b0 00 00
	00		 mov	 DWORD PTR [eax+176], eax
  00061	8d 87 c8 00 00
	00		 lea	 eax, DWORD PTR [edi+200]

; 597  : 			m_allocated = true;

  00067	c6 80 01 10 00
	00 01		 mov	 BYTE PTR [eax+4097], 1

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  0006e	c7 80 08 10 00
	00 ff ff ff 3f	 mov	 DWORD PTR [eax+4104], 1073741823 ; 3fffffffH
  00078	c7 80 0c 10 00
	00 00 04 00 00	 mov	 DWORD PTR [eax+4108], 1024 ; 00000400H
  00082	89 80 10 10 00
	00		 mov	 DWORD PTR [eax+4112], eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h

; 322  :  	BlockCipherFinal() {}

  00088	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0008e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 357  : 	{

  00095	8b cb		 mov	 ecx, ebx
  00097	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009e	e8 00 00 00 00	 call	 ??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ

; 358  : 		this->m_cipher = &this->m_object;
; 359  : 		this->ResizeBuffers();

  000a3	8b cb		 mov	 ecx, ebx
  000a5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a9	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  000af	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
  000b6	c7 43 1c 00 00
	00 00		 mov	 DWORD PTR [ebx+28], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  000bd	c7 43 30 00 00
	00 00		 mov	 DWORD PTR [ebx+48], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  000c4	89 7b 08	 mov	 DWORD PTR [ebx+8], edi
  000c7	e8 00 00 00 00	 call	 ?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ ; CryptoPP::CipherModeBase::ResizeBuffers

; 360  : 	}

  000cc	8b c3		 mov	 eax, ebx
  000ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d8	59		 pop	 ecx
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 50	 add	 ecx, 80			; 00000050H
  00006	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >, COMDAT
; _this$ = ecx

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  0000d	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  00014	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  0001b	e9 00 00 00 00	 jmp	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -68				; size = 4
$T2 = -64						; size = 24
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07DABDIDEC@Twofish@
  0002e	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00031	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00034	0f 11 45 c0	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00038	89 45 c0	 mov	 DWORD PTR $T2[ebp], eax
  0003b	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_07DABDIDEC@Twofish@+4
  00041	66 89 45 c4	 mov	 WORD PTR $T2[ebp+4], ax
  00045	a0 06 00 00 00	 mov	 al, BYTE PTR ??_C@_07DABDIDEC@Twofish@+6
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  0004a	89 75 bc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0004d	c7 45 d0 07 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 7

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00054	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0005b	88 45 c6	 mov	 BYTE PTR $T2[ebp+6], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0005e	c6 45 c7 00	 mov	 BYTE PTR $T2[ebp+7], 0

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00062	6a 01		 push	 1
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1@
  00069	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 353  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00073	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00078	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0
  0007f	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00082	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00086	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0008d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00090	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0
  00094	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00099	66 0f d6 45 e8	 movq	 QWORD PTR $T3[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  0009e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  000a5	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  000ac	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000af	6a 03		 push	 3
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_03LECCGOIK@CTR@
  000b6	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 353  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  000b9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000bd	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000c2	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000c5	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000c8	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000cf	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000d6	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000d9	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000dc	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000e1	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  000e6	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  000ed	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  000f4	c6 00 00	 mov	 BYTE PTR [eax], 0

; 434  :         return _Myres > _Small_string_capacity;

  000f7	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  000fa	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000fd	76 28		 jbe	 SHORT $LN162@AlgorithmN
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ff	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00102	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00103	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00105	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0010b	72 10		 jb	 SHORT $LN173@AlgorithmN

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00110	83 c1 23	 add	 ecx, 35			; 00000023H
  00113	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00115	83 c0 fc	 add	 eax, -4			; fffffffcH
  00118	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011b	77 6a		 ja	 SHORT $LN207@AlgorithmN
$LN173@AlgorithmN:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0011d	51		 push	 ecx
  0011e	52		 push	 edx
  0011f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00124	83 c4 08	 add	 esp, 8
$LN162@AlgorithmN:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00127	8b 4d d4	 mov	 ecx, DWORD PTR $T2[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  0012a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00131	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00138	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  0013c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0013f	76 28		 jbe	 SHORT $LN199@AlgorithmN
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00141	8b 55 c0	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00144	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00145	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00147	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0014d	72 10		 jb	 SHORT $LN210@AlgorithmN

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0014f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00152	83 c1 23	 add	 ecx, 35			; 00000023H
  00155	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00157	83 c0 fc	 add	 eax, -4			; fffffffcH
  0015a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0015d	77 28		 ja	 SHORT $LN207@AlgorithmN
$LN210@AlgorithmN:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0015f	51		 push	 ecx
  00160	52		 push	 edx
  00161	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00166	83 c4 08	 add	 esp, 8
$LN199@AlgorithmN:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00169	8b c6		 mov	 eax, esi
  0016b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00175	59		 pop	 ecx
  00176	5e		 pop	 esi
  00177	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017a	33 cd		 xor	 ecx, ebp
  0017c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c2 04 00	 ret	 4
$LN207@AlgorithmN:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00187	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN219@AlgorithmN:
  0018c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
; Function compile flags: /Ogtp
;	COMDAT ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1Base@Twofish@CryptoPP@@UAE@XZ
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1Base@Twofish@CryptoPP@@UAE@XZ
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN20@scalar
  00011	68 e0 10 00 00	 push	 4320			; 000010e0H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN20@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_G?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::IsForwardTransformation, COMDAT
; _this$ = ecx

; 351  : 	bool IsForwardTransformation() const {return DIR == ENCRYPTION;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::IsForwardTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::Clone, COMDAT
; _this$ = ecx

; 28   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	68 e0 10 00 00	 push	 4320			; 000010e0H
  0000b	8b f9		 mov	 edi, ecx
  0000d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00012	8b f0		 mov	 esi, eax
  00014	83 c4 04	 add	 esp, 4
  00017	89 75 fc	 mov	 DWORD PTR $T1[ebp], esi
  0001a	85 f6		 test	 esi, esi
  0001c	74 27		 je	 SHORT $LN3@Clone
  0001e	8d 4f fc	 lea	 ecx, DWORD PTR [edi-4]
  00021	51		 push	 ecx
  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z
  00029	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00032	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  00039	f7 de		 neg	 esi
  0003b	5f		 pop	 edi
  0003c	1b f6		 sbb	 esi, esi
  0003e	23 c6		 and	 eax, esi
  00040	5e		 pop	 esi
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
$LN3@Clone:
  00045	33 f6		 xor	 esi, esi
  00047	5f		 pop	 edi
  00048	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0004b	f7 de		 neg	 esi
  0004d	1b f6		 sbb	 esi, esi
  0004f	23 c6		 and	 eax, esi
  00051	5e		 pop	 esi
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::Clone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
;	COMDAT ??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0002c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  00033	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  0003a	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  00041	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00046	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00049	39 4e 60	 cmp	 DWORD PTR [esi+96], ecx
  0004c	8b 56 68	 mov	 edx, DWORD PTR [esi+104]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0004f	8b fa		 mov	 edi, edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00051	0f 42 4e 60	 cmovb	 ecx, DWORD PTR [esi+96]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00055	33 c0		 xor	 eax, eax
  00057	f3 ab		 rep stosd
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00059	52		 push	 edx

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 235  : 		UnalignedDeallocate(ptr);

  00061	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00066	83 c4 04	 add	 esp, 4
  00069	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0006d	74 0b		 je	 SHORT $LN68@scalar
  0006f	6a 6c		 push	 108			; 0000006cH
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00077	83 c4 08	 add	 esp, 8
$LN68@scalar:
  0007a	8b c6		 mov	 eax, esi
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00086	59		 pop	 ecx
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
  0008f	cc		 int	 3
  00090	cc		 int	 3
  00091	cc		 int	 3
  00092	cc		 int	 3
  00093	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
;	COMDAT ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0002c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  00033	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  0003a	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  00041	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00046	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00049	39 4e 60	 cmp	 DWORD PTR [esi+96], ecx
  0004c	8b 56 68	 mov	 edx, DWORD PTR [esi+104]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0004f	8b fa		 mov	 edi, edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00051	0f 42 4e 60	 cmovb	 ecx, DWORD PTR [esi+96]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00055	33 c0		 xor	 eax, eax
  00057	f3 ab		 rep stosd
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00059	52		 push	 edx

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 235  : 		UnalignedDeallocate(ptr);

  00061	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00066	83 c4 04	 add	 esp, 4
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
  0007a	cc		 int	 3
  0007b	cc		 int	 3
  0007c	cc		 int	 3
  0007d	cc		 int	 3
  0007e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider, COMDAT
; _this$ = ecx

; 399  : 	std::string AlgorithmProvider() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 400  : 		return this->m_cipher->AlgorithmProvider();

  00004	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00007	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0000a	83 c1 04	 add	 ecx, 4
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	ff 52 0c	 call	 DWORD PTR [edx+12]
  00012	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 401  : 	}

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?AlgorithmProvider@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::AlgorithmProvider
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >, COMDAT
; _this$ = ecx

; 356  : 	CipherModeFinalTemplate_CipherHolder()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 357  : 	{

  0002b	8d 59 4c	 lea	 ebx, DWORD PTR [ecx+76]
  0002e	6a 01		 push	 1
  00030	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00033	89 5d ec	 mov	 DWORD PTR _this$[ebp], ebx
  00036	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  0003b	6a 00		 push	 0
  0003d	6a 00		 push	 0
  0003f	8d 4b 10	 lea	 ecx, DWORD PTR [ebx+16]
  00042	c7 43 14 ff ff
	ff 3f		 mov	 DWORD PTR [ebx+20], 1073741823 ; 3fffffffH
  00049	c7 43 18 00 00
	00 00		 mov	 DWORD PTR [ebx+24], 0
  00050	e8 00 00 00 00	 call	 ?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z ; CryptoPP::AllocatorWithCleanup<unsigned int,0>::allocate
  00055	89 43 1c	 mov	 DWORD PTR [ebx+28], eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h

; 322  :  	BlockCipherFinal() {}

  00058	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0005e	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 357  : 	{

  00065	8b 75 f0	 mov	 esi, DWORD PTR _this$[ebp]
  00068	8b ce		 mov	 ecx, esi
  0006a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00071	e8 00 00 00 00	 call	 ??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ

; 358  : 		this->m_cipher = &this->m_object;
; 359  : 		this->ResizeBuffers();

  00076	8b ce		 mov	 ecx, esi
  00078	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0007c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00082	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
  00089	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  00090	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  00097	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0009a	e8 00 00 00 00	 call	 ?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ ; CryptoPP::CipherModeBase::ResizeBuffers

; 360  : 	}

  0009f	8b c6		 mov	 eax, esi
  000a1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ab	59		 pop	 ecx
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00006	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >, COMDAT
; _this$ = ecx

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  0000d	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  00014	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  0001b	e9 00 00 00 00	 jmp	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -68				; size = 4
$T2 = -64						; size = 24
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0002c	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0002f	0f 11 45 c0	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00033	89 75 bc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00036	c7 45 d0 08 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 8

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0003d	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00044	c7 45 c0 43 61
	6d 65		 mov	 DWORD PTR $T2[ebp], 1701667139 ; 656d6143H
  0004b	c7 45 c4 6c 6c
	69 61		 mov	 DWORD PTR $T2[ebp+4], 1634298988 ; 61696c6cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00052	c6 45 c8 00	 mov	 BYTE PTR $T2[ebp+8], 0

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00056	6a 01		 push	 1
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1@
  0005d	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 353  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  00060	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00067	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0006c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0
  00073	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00076	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0007a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00081	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00084	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0
  00088	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0008d	66 0f d6 45 e8	 movq	 QWORD PTR $T3[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00092	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00099	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  000a0	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000a3	6a 03		 push	 3
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_03LECCGOIK@CTR@
  000aa	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 353  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  000ad	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000b1	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000b6	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000b9	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000bc	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000c3	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ca	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000cd	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000d0	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000d5	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  000da	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  000e1	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  000e8	c6 00 00	 mov	 BYTE PTR [eax], 0

; 434  :         return _Myres > _Small_string_capacity;

  000eb	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  000ee	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000f1	76 28		 jbe	 SHORT $LN162@AlgorithmN
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f3	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000f6	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f7	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000f9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ff	72 10		 jb	 SHORT $LN173@AlgorithmN

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00101	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00104	83 c1 23	 add	 ecx, 35			; 00000023H
  00107	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00109	83 c0 fc	 add	 eax, -4			; fffffffcH
  0010c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010f	77 6a		 ja	 SHORT $LN207@AlgorithmN
$LN173@AlgorithmN:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00111	51		 push	 ecx
  00112	52		 push	 edx
  00113	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00118	83 c4 08	 add	 esp, 8
$LN162@AlgorithmN:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0011b	8b 4d d4	 mov	 ecx, DWORD PTR $T2[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  0011e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00125	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0012c	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  00130	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00133	76 28		 jbe	 SHORT $LN199@AlgorithmN
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00135	8b 55 c0	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00138	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00139	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0013b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00141	72 10		 jb	 SHORT $LN210@AlgorithmN

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00143	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00146	83 c1 23	 add	 ecx, 35			; 00000023H
  00149	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0014e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00151	77 28		 ja	 SHORT $LN207@AlgorithmN
$LN210@AlgorithmN:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00153	51		 push	 ecx
  00154	52		 push	 edx
  00155	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0015a	83 c4 08	 add	 esp, 8
$LN199@AlgorithmN:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  0015d	8b c6		 mov	 eax, esi
  0015f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00162	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00169	59		 pop	 ecx
  0016a	5e		 pop	 esi
  0016b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016e	33 cd		 xor	 ecx, ebp
  00170	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 04 00	 ret	 4
$LN207@AlgorithmN:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0017b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN219@AlgorithmN:
  00180	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
;	COMDAT ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00025	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00028	39 4a 14	 cmp	 DWORD PTR [edx+20], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	0f 42 4a 14	 cmovb	 ecx, DWORD PTR [edx+20]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00036	33 c0		 xor	 eax, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00038	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0003b	8b fa		 mov	 edi, edx
  0003d	f3 ab		 rep stosd
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00045	83 c4 04	 add	 esp, 4
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5f		 pop	 edi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
  0005c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
;	COMDAT ??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00029	39 4e 14	 cmp	 DWORD PTR [esi+20], ecx
  0002c	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0002f	8b fa		 mov	 edi, edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00031	0f 42 4e 14	 cmovb	 ecx, DWORD PTR [esi+20]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00035	33 c0		 xor	 eax, eax
  00037	f3 ab		 rep stosd
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00039	52		 push	 edx

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 235  : 		UnalignedDeallocate(ptr);

  00041	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00046	83 c4 04	 add	 esp, 4
  00049	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0004d	74 0b		 je	 SHORT $LN48@scalar
  0004f	6a 20		 push	 32			; 00000020H
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00057	83 c4 08	 add	 esp, 8
$LN48@scalar:
  0005a	8b c6		 mov	 eax, esi
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
  0006f	cc		 int	 3
  00070	cc		 int	 3
  00071	cc		 int	 3
  00072	cc		 int	 3
  00073	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::IsForwardTransformation, COMDAT
; _this$ = ecx

; 351  : 	bool IsForwardTransformation() const {return DIR == ENCRYPTION;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::IsForwardTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::Clone, COMDAT
; _this$ = ecx

; 28   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	6a 20		 push	 32			; 00000020H
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b f0		 mov	 esi, eax
  00031	83 c4 04	 add	 esp, 4
  00034	89 75 f0	 mov	 DWORD PTR $T2[ebp], esi
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	85 f6		 test	 esi, esi
  00040	0f 84 9c 00 00
	00		 je	 $LN3@Clone
  00046	8a 47 04	 mov	 al, BYTE PTR [edi+4]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  00049	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  0004c	88 46 08	 mov	 BYTE PTR [esi+8], al
  0004f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00052	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00055	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00058	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0005b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0005e	6a 00		 push	 0
  00060	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00063	ff 77 14	 push	 DWORD PTR [edi+20]
  00066	e8 00 00 00 00	 call	 ?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z ; CryptoPP::AllocatorWithCleanup<unsigned int,0>::allocate
  0006b	8b d0		 mov	 edx, eax
  0006d	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 731  : 			CRYPTOPP_ASSERT((!t.m_ptr && !m_size) || (t.m_ptr && m_size));
; 732  : 			if (t.m_ptr) {memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, t.m_size*sizeof(T));}

  00070	83 7f 18 00	 cmp	 DWORD PTR [edi+24], 0
  00074	74 5d		 je	 SHORT $LN46@Clone
  00076	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00079	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0007c	c1 e1 02	 shl	 ecx, 2
  0007f	c1 e0 02	 shl	 eax, 2
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h

; 46   :         if (_SourceSize == 0)

  00082	85 c9		 test	 ecx, ecx
  00084	74 4d		 je	 SHORT $LN46@Clone

; 47   :         {
; 48   :             return 0;
; 49   :         }
; 50   : 
; 51   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  00086	85 d2		 test	 edx, edx
  00088	75 0d		 jne	 SHORT $LN42@Clone
  0008a	e8 00 00 00 00	 call	 __errno
  0008f	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  00095	eb 37		 jmp	 SHORT $LN49@Clone
$LN42@Clone:

; 52   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  00097	3b c1		 cmp	 eax, ecx
  00099	72 1c		 jb	 SHORT $LN44@Clone

; 58   : 
; 59   :             // Unreachable, but required to suppress /analyze warnings:
; 60   :             return EINVAL;
; 61   :         }
; 62   :         memcpy(_Destination, _Source, _SourceSize);

  0009b	51		 push	 ecx
  0009c	ff 77 18	 push	 DWORD PTR [edi+24]
  0009f	52		 push	 edx
  000a0	e8 00 00 00 00	 call	 _memcpy
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  000ae	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 28   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  000b5	eb 2d		 jmp	 SHORT $LN4@Clone
$LN44@Clone:
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h

; 54   :             memset(_Destination, 0, _DestinationSize);

  000b7	50		 push	 eax
  000b8	6a 00		 push	 0
  000ba	52		 push	 edx
  000bb	e8 00 00 00 00	 call	 _memset
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 
; 56   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 57   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  000c3	e8 00 00 00 00	 call	 __errno
  000c8	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
$LN49@Clone:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 28   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  000ce	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN46@Clone:
  000d3	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  000d9	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  000e0	eb 02		 jmp	 SHORT $LN4@Clone
$LN3@Clone:
  000e2	33 f6		 xor	 esi, esi
$LN4@Clone:
  000e4	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e7	f7 de		 neg	 esi
  000e9	1b f6		 sbb	 esi, esi
  000eb	23 c6		 and	 eax, esi
  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f7	59		 pop	 ecx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ$0:
  00000	6a 20		 push	 32			; 00000020H
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::Clone
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\osrng.h
;	COMDAT ??__Frnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ
text$yd	SEGMENT
??__Frnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ PROC ; `EterPackPolicy_CSHybridCrypt::GenerateCryptKey'::`2'::`dynamic atexit destructor for 'rnd'', COMDAT

; 160  : 	~AutoSeededRandomPool() {}

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A, OFFSET ??_7AutoSeededRandomPool@CryptoPP@@6B@
  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
  0000f	e9 00 00 00 00	 jmp	 ??1RandomPool@CryptoPP@@UAE@XZ
??__Frnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ ENDP ; `EterPackPolicy_CSHybridCrypt::GenerateCryptKey'::`2'::`dynamic atexit destructor for 'rnd''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\osrng.h
;	COMDAT ??_GAutoSeededRandomPool@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GAutoSeededRandomPool@CryptoPP@@UAEPAXI@Z PROC	; CryptoPP::AutoSeededRandomPool::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 160  : 	~AutoSeededRandomPool() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7AutoSeededRandomPool@CryptoPP@@6B@
  0000c	e8 00 00 00 00	 call	 ??1RandomPool@CryptoPP@@UAE@XZ
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 0e		 je	 SHORT $LN10@scalar
  00017	68 80 00 00 00	 push	 128			; 00000080H
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN10@scalar:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_GAutoSeededRandomPool@CryptoPP@@UAEPAXI@Z ENDP	; CryptoPP::AutoSeededRandomPool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
;	COMDAT ??1RandomPool@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1RandomPool@CryptoPP@@UAE@XZ PROC			; CryptoPP::RandomPool::~RandomPool, COMDAT
; _this$ = ecx

; 569  : 	return b < a ? b : a;

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi
  00005	8d 4e 78	 lea	 ecx, DWORD PTR [esi+120]
  00008	e8 00 00 00 00	 call	 ??1?$member_ptr@VBlockCipher@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipher>::~member_ptr<CryptoPP::BlockCipher>
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0000d	8b 7e 70	 mov	 edi, DWORD PTR [esi+112]
  00010	8d 56 38	 lea	 edx, DWORD PTR [esi+56]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00013	8b 5a 30	 mov	 ebx, DWORD PTR [edx+48]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 506  : 		T* p_array = reinterpret_cast<T*>(static_cast<void*>((reinterpret_cast<byte*>(m_array)) + (0-reinterpret_cast<size_t>(m_array))%16));

  00016	8b c2		 mov	 eax, edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00018	8b 4a 34	 mov	 ecx, DWORD PTR [edx+52]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 506  : 		T* p_array = reinterpret_cast<T*>(static_cast<void*>((reinterpret_cast<byte*>(m_array)) + (0-reinterpret_cast<size_t>(m_array))%16));

  0001b	f7 d8		 neg	 eax
  0001d	83 e0 0f	 and	 eax, 15			; 0000000fH
  00020	03 c2		 add	 eax, edx

; 415  : 		if (ptr == GetAlignedArray())

  00022	3b f8		 cmp	 edi, eax
  00024	75 0d		 jne	 SHORT $LN20@RandomPool

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00026	3b d9		 cmp	 ebx, ecx

; 423  : 			m_allocated = false;

  00028	c6 42 29 00	 mov	 BYTE PTR [edx+41], 0

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002c	0f 42 cb	 cmovb	 ecx, ebx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0002f	32 c0		 xor	 al, al
  00031	f3 aa		 rep stosb
$LN20@RandomPool:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00033	8b 7e 30	 mov	 edi, DWORD PTR [esi+48]
  00036	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00039	8b 72 20	 mov	 esi, DWORD PTR [edx+32]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 506  : 		T* p_array = reinterpret_cast<T*>(static_cast<void*>((reinterpret_cast<byte*>(m_array)) + (0-reinterpret_cast<size_t>(m_array))%16));

  0003c	8b c2		 mov	 eax, edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  0003e	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 506  : 		T* p_array = reinterpret_cast<T*>(static_cast<void*>((reinterpret_cast<byte*>(m_array)) + (0-reinterpret_cast<size_t>(m_array))%16));

  00041	f7 d8		 neg	 eax
  00043	83 e0 0f	 and	 eax, 15			; 0000000fH
  00046	03 c2		 add	 eax, edx

; 415  : 		if (ptr == GetAlignedArray())

  00048	3b f8		 cmp	 edi, eax
  0004a	75 0d		 jne	 SHORT $LN59@RandomPool

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0004c	3b f1		 cmp	 esi, ecx

; 423  : 			m_allocated = false;

  0004e	c6 42 19 00	 mov	 BYTE PTR [edx+25], 0

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00052	0f 42 ce	 cmovb	 ecx, esi
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00055	32 c0		 xor	 al, al
  00057	f3 aa		 rep stosb
$LN59@RandomPool:
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	c3		 ret	 0
??1RandomPool@CryptoPP@@UAE@XZ ENDP			; CryptoPP::RandomPool::~RandomPool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h
;	COMDAT ??1?$member_ptr@VBlockCipher@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$member_ptr@VBlockCipher@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::member_ptr<CryptoPP::BlockCipher>::~member_ptr<CryptoPP::BlockCipher>, COMDAT
; _this$ = ecx

; 68   : template <class T> member_ptr<T>::~member_ptr() {delete m_p;}

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN3@member_ptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	ff 10		 call	 DWORD PTR [eax]
$LN3@member_ptr:
  0000c	c3		 ret	 0
??1?$member_ptr@VBlockCipher@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::member_ptr<CryptoPP::BlockCipher>::~member_ptr<CryptoPP::BlockCipher>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\randpool.h
;	COMDAT ?CanIncorporateEntropy@RandomPool@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?CanIncorporateEntropy@RandomPool@CryptoPP@@UBE_NXZ PROC ; CryptoPP::RandomPool::CanIncorporateEntropy, COMDAT
; _this$ = ecx

; 47   : 	bool CanIncorporateEntropy() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?CanIncorporateEntropy@RandomPool@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::RandomPool::CanIncorporateEntropy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ??_GStringSource@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GStringSource@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::StringSource::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1365 : 	virtual ~SourceTemplate() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 38   : 	virtual ~Filter() {}

  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]

; 1365 : 	virtual ~SourceTemplate() {}

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  0000f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  00016	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
  0001b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001f	74 0b		 je	 SHORT $LN35@scalar
  00021	6a 38		 push	 56			; 00000038H
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN35@scalar:
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??_GStringSource@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::StringSource::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z
_TEXT	SEGMENT
$T2 = -56						; size = 28
$T3 = -56						; size = 28
$T4 = -28						; size = 12
$T5 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_string$ = 8						; size = 4
_length$ = 12						; size = 4
_pumpAll$ = 16						; size = 1
_attachment$ = 20					; size = 4
??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z PROC ; CryptoPP::StringSource::StringSource, COMDAT
; _this$ = ecx

; 1412 : 	StringSource(const byte *string, size_t length, bool pumpAll, BufferedTransformation *attachment = NULLPTR)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002d	6a 00		 push	 0
  0002f	e8 00 00 00 00	 call	 ??0Filter@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z ; CryptoPP::Filter::Filter

; 1289 : 		{Source::Detach(attachment);}

  00034	ff 75 14	 push	 DWORD PTR _attachment$[ebp]
  00037	8b ce		 mov	 ecx, esi
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	e8 00 00 00 00	 call	 ?Detach@Filter@CryptoPP@@UAEXPAVBufferedTransformation@2@@Z ; CryptoPP::Filter::Detach
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 1604 : 	BufferedTransformation() : Algorithm(false) {}

  00045	6a 00		 push	 0
  00047	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1370 : 		: Source(attachment) {}

  0004a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00051	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  00057	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 1604 : 	BufferedTransformation() : Algorithm(false) {}

  0005e	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 294  : 	AutoSignaling(int propagation=-1) : m_autoSignalPropagation(propagation) {}

  00063	c7 46 24 ff ff
	ff ff		 mov	 DWORD PTR [esi+36], -1

; 310  : 	Store() : m_messageEnd(false) {}

  0006a	c6 46 28 00	 mov	 BYTE PTR [esi+40], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1201 : 		{StoreInitialize(MakeParameters("InputBuffer", ConstByteArrayParameter(string)));}

  0006e	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], OFFSET ??_7StringStore@CryptoPP@@6BAlgorithm@1@@
  00075	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7StringStore@CryptoPP@@6BWaitable@1@@
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  0007c	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR $T3[ebp+16], -1
  00083	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 0
  0008a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+24], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 73   : 			m_data = data;

  00091	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 74   : 			m_size = size;

  00098	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+8], 0

; 75   : 		}
; 76   : 		m_deepCopy = deepCopy;

  0009f	c6 45 c8 00	 mov	 BYTE PTR $T3[ebp], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1201 : 		{StoreInitialize(MakeParameters("InputBuffer", ConstByteArrayParameter(string)));}

  000a3	6a 01		 push	 1
  000a5	8d 45 c8	 lea	 eax, DWORD PTR $T3[ebp]
  000a8	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000ac	50		 push	 eax
  000ad	8d 45 e4	 lea	 eax, DWORD PTR $T5[ebp]
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JMHEFFAI@InputBuffer@
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>
  000bb	83 c4 10	 add	 esp, 16			; 00000010H
  000be	50		 push	 eax
  000bf	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  000c2	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000c6	e8 00 00 00 00	 call	 ?StoreInitialize@StringStore@CryptoPP@@EAEXABVNameValuePairs@2@@Z ; CryptoPP::StringStore::StoreInitialize
  000cb	8d 4d e8	 lea	 ecx, DWORD PTR $T5[ebp+4]
  000ce	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 296  : 	virtual ~NameValuePairs() {}

  000d3	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  000da	8b 45 d8	 mov	 eax, DWORD PTR $T3[ebp+16]
  000dd	8b 4d dc	 mov	 ecx, DWORD PTR $T3[ebp+20]
  000e0	3b c1		 cmp	 eax, ecx

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  000e2	8b 55 e0	 mov	 edx, DWORD PTR $T3[ebp+24]
  000e5	8b fa		 mov	 edi, edx

; 569  : 	return b < a ? b : a;

  000e7	0f 42 c8	 cmovb	 ecx, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  000ea	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  000ee	32 c0		 xor	 al, al
  000f0	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  000f2	52		 push	 edx
  000f3	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1413 : 		: SourceTemplate<StringStore>(attachment) {SourceInitialize(pumpAll, MakeParameters("InputBuffer", ConstByteArrayParameter(string, length)));}

  000f8	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  000ff	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7StringSource@CryptoPP@@6BAlgorithm@1@@
  00105	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7StringSource@CryptoPP@@6BWaitable@1@@
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  0010c	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR $T2[ebp+16], -1
  00113	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0
  0011a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+24], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 73   : 			m_data = data;

  00121	8b 45 08	 mov	 eax, DWORD PTR _string$[ebp]
  00124	89 45 cc	 mov	 DWORD PTR $T2[ebp+4], eax

; 74   : 			m_size = size;

  00127	8b 45 0c	 mov	 eax, DWORD PTR _length$[ebp]
  0012a	89 45 d0	 mov	 DWORD PTR $T2[ebp+8], eax

; 75   : 		}
; 76   : 		m_deepCopy = deepCopy;

  0012d	c6 45 c8 00	 mov	 BYTE PTR $T2[ebp], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1413 : 		: SourceTemplate<StringStore>(attachment) {SourceInitialize(pumpAll, MakeParameters("InputBuffer", ConstByteArrayParameter(string, length)));}

  00131	6a 01		 push	 1
  00133	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  00136	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0013a	50		 push	 eax
  0013b	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JMHEFFAI@InputBuffer@
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>
  00149	83 c4 14	 add	 esp, 20			; 00000014H
  0014c	8b d0		 mov	 edx, eax
  0014e	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9

; 1352 : 		IsolatedInitialize(parameters);

  00152	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00154	52		 push	 edx
  00155	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00158	3d 00 00 00 00	 cmp	 eax, OFFSET ?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::IsolatedInitialize
  0015d	75 0b		 jne	 SHORT $LN130@StringSour

; 1372 : 		{m_store.IsolatedInitialize(parameters);}

  0015f	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00162	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00165	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00168	eb 02		 jmp	 SHORT $LN180@StringSour
$LN130@StringSour:
  0016a	8b ce		 mov	 ecx, esi
$LN180@StringSour:

; 1353 : 		if (pumpAll)

  0016c	ff d0		 call	 eax
  0016e	80 7d 10 00	 cmp	 BYTE PTR _pumpAll$[ebp], 0
  00172	74 1c		 je	 SHORT $LN135@StringSour

; 1319 : 		{PumpAll2();}

  00174	8b 06		 mov	 eax, DWORD PTR [esi]
  00176	8b ce		 mov	 ecx, esi
  00178	6a 01		 push	 1
  0017a	8b 80 c8 00 00
	00		 mov	 eax, DWORD PTR [eax+200]
  00180	3d 00 00 00 00	 cmp	 eax, OFFSET ?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2
  00185	75 07		 jne	 SHORT $LN136@StringSour
  00187	e8 00 00 00 00	 call	 ?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2
  0018c	eb 02		 jmp	 SHORT $LN135@StringSour
$LN136@StringSour:
  0018e	ff d0		 call	 eax
$LN135@StringSour:
  00190	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp+4]
  00193	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 296  : 	virtual ~NameValuePairs() {}

  00198	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  0019f	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp+16]
  001a2	8b 4d dc	 mov	 ecx, DWORD PTR $T2[ebp+20]
  001a5	3b c1		 cmp	 eax, ecx

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  001a7	8b 55 e0	 mov	 edx, DWORD PTR $T2[ebp+24]
  001aa	8b fa		 mov	 edi, edx

; 569  : 	return b < a ? b : a;

  001ac	0f 42 c8	 cmovb	 ecx, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  001af	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  001b3	32 c0		 xor	 al, al
  001b5	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  001b7	52		 push	 edx
  001b8	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  001bd	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1413 : 		: SourceTemplate<StringStore>(attachment) {SourceInitialize(pumpAll, MakeParameters("InputBuffer", ConstByteArrayParameter(string, length)));}

  001c0	8b c6		 mov	 eax, esi
  001c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001cc	59		 pop	 ecx
  001cd	5f		 pop	 edi
  001ce	5e		 pop	 esi
  001cf	5b		 pop	 ebx
  001d0	8b e5		 mov	 esp, ebp
  001d2	5d		 pop	 ebp
  001d3	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$4:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$3:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Source@CryptoPP@@UAE@XZ ; CryptoPP::Source::~Source
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$8:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp+12]
  00013	e9 00 00 00 00	 jmp	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$6:
  00018	8d 4d c8	 lea	 ecx, DWORD PTR $T3[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$7:
  00020	8d 4d e4	 lea	 ecx, DWORD PTR $T5[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1AlgorithmParameters@CryptoPP@@UAE@XZ
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$0:
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate<CryptoPP::StringStore>
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$12:
  00030	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp+12]
  00033	e9 00 00 00 00	 jmp	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$1:
  00038	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$2:
  00040	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  00043	e9 00 00 00 00	 jmp	 ??1AlgorithmParameters@CryptoPP@@UAE@XZ
  00048	cc		 int	 3
  00049	cc		 int	 3
  0004a	cc		 int	 3
  0004b	cc		 int	 3
  0004c	cc		 int	 3
__ehhandler$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z:
  0004d	90		 npad	 1
  0004e	90		 npad	 1
  0004f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00053	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00056	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00059	33 c8		 xor	 ecx, eax
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z
  00065	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ENDP ; CryptoPP::StringSource::StringSource
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ??_G?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1365 : 	virtual ~SourceTemplate() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 38   : 	virtual ~Filter() {}

  00006	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]

; 1365 : 	virtual ~SourceTemplate() {}

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  0000f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  00016	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
  0001b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001f	74 0b		 je	 SHORT $LN30@scalar
  00021	6a 38		 push	 56			; 00000038H
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN30@scalar:
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??_G?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ
_TEXT	SEGMENT
?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::GetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 1384 : 		{return m_store.GetAutoSignalPropagation();}

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	ff 60 3c	 jmp	 DWORD PTR [eax+60]
?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::GetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z
_TEXT	SEGMENT
_propagation$ = 8					; size = 4
?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 1382 : 		{m_store.SetAutoSignalPropagation(propagation);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00006	83 c1 18	 add	 ecx, 24			; 00000018H
  00009	5d		 pop	 ebp
  0000a	ff 60 38	 jmp	 DWORD PTR [eax+56]
?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceExhausted, COMDAT
; _this$ = ecx

; 1380 : 		{return !m_store.AnyRetrievable() && !m_store.AnyMessages();}

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	56		 push	 esi
  00004	8d 71 18	 lea	 esi, DWORD PTR [ecx+24]
  00007	8b ce		 mov	 ecx, esi
  00009	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0000c	ff d0		 call	 eax
  0000e	84 c0		 test	 al, al
  00010	75 11		 jne	 SHORT $LN3@SourceExha
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	8b ce		 mov	 ecx, esi
  00016	8b 40 64	 mov	 eax, DWORD PTR [eax+100]
  00019	ff d0		 call	 eax
  0001b	84 c0		 test	 al, al
  0001d	75 04		 jne	 SHORT $LN3@SourceExha
  0001f	b0 01		 mov	 al, 1
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
$LN3@SourceExha:
  00023	32 c0		 xor	 al, al
  00025	5e		 pop	 esi
  00026	c3		 ret	 0
?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceExhausted
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z
_TEXT	SEGMENT
_blocking$ = 8						; size = 1
?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2, COMDAT
; _this$ = ecx

; 1378 : 		{return m_store.TransferAllTo2(*AttachedTransformation(), DEFAULT_CHANNEL, blocking);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 08	 push	 DWORD PTR _blocking$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
  00016	50		 push	 eax
  00017	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0001a	e8 00 00 00 00	 call	 ?TransferAllTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::BufferedTransformation::TransferAllTo2
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z
_TEXT	SEGMENT
_messageCount$ = 8					; size = 4
_blocking$ = 12						; size = 1
?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpMessages2, COMDAT
; _this$ = ecx

; 1376 : 		{return m_store.TransferMessagesTo2(*AttachedTransformation(), messageCount, DEFAULT_CHANNEL, blocking);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	ff 75 0c	 push	 DWORD PTR _blocking$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  0000e	ff 75 08	 push	 DWORD PTR _messageCount$[ebp]
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
  00019	50		 push	 eax
  0001a	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0001d	e8 00 00 00 00	 call	 ?TransferMessagesTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@AAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::BufferedTransformation::TransferMessagesTo2
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpMessages2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z
_TEXT	SEGMENT
_byteCount$ = 8						; size = 4
_blocking$ = 12						; size = 1
?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::Pump2, COMDAT
; _this$ = ecx

; 1374 : 		{return m_store.TransferTo2(*AttachedTransformation(), byteCount, DEFAULT_CHANNEL, blocking);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 79 18	 lea	 edi, DWORD PTR [ecx+24]
  0000b	8b b0 80 00 00
	00		 mov	 esi, DWORD PTR [eax+128]
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]
  00019	ff 75 0c	 push	 DWORD PTR _blocking$[ebp]
  0001c	8b cf		 mov	 ecx, edi
  0001e	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  00023	ff 75 08	 push	 DWORD PTR _byteCount$[ebp]
  00026	50		 push	 eax
  00027	ff d6		 call	 esi
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::Pump2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
_TEXT	SEGMENT
_parameters$ = 8					; size = 4
?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::IsolatedInitialize, COMDAT
; _this$ = ecx

; 1372 : 		{m_store.IsolatedInitialize(parameters);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00006	83 c1 18	 add	 ecx, 24			; 00000018H
  00009	5d		 pop	 ebp
  0000a	ff 60 20	 jmp	 DWORD PTR [eax+32]
?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::IsolatedInitialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate<CryptoPP::StringStore>, COMDAT
; _this$ = ecx

; 1365 : 	virtual ~SourceTemplate() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  0000d	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00010	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate<CryptoPP::StringStore>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ??1Source@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Source@CryptoPP@@UAE@XZ PROC				; CryptoPP::Source::~Source, COMDAT
; _this$ = ecx

; 38   : 	virtual ~Filter() {}

  00000	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00003	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
??1Source@CryptoPP@@UAE@XZ ENDP				; CryptoPP::Source::~Source
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::~InputRejecting<CryptoPP::Filter>, COMDAT
; _this$ = ecx

; 38   : 	virtual ~Filter() {}

  00000	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00003	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::~InputRejecting<CryptoPP::Filter>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_channel$ = 8						; size = 4
_messageEnd$ = 12					; size = 4
_blocking$ = 16						; size = 1
?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelMessageSeriesEnd, COMDAT
; _this$ = ecx

; 164  : 		{CRYPTOPP_UNUSED(channel); CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@ChannelMes:
  00026	cc		 int	 3
?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_channel$ = 8						; size = 4
_inString$ = 12						; size = 4
_length$ = 16						; size = 4
_messageEnd$ = 20					; size = 4
_blocking$ = 24						; size = 1
?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelPut2, COMDAT
; _this$ = ecx

; 162  : 		{CRYPTOPP_UNUSED(channel); CRYPTOPP_UNUSED(inString); CRYPTOPP_UNUSED(length); CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@ChannelPut:
  00026	cc		 int	 3
?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelPut2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_blocking$ = 8						; size = 1
?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedMessageSeriesEnd, COMDAT
; _this$ = ecx

; 160  : 		{CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@IsolatedMe:
  00026	cc		 int	 3
?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
_TEXT	SEGMENT
_hardFlush$ = 8						; size = 1
_blocking$ = 12						; size = 1
?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedFlush, COMDAT
; _this$ = ecx

; 158  : 		{CRYPTOPP_UNUSED(hardFlush); CRYPTOPP_UNUSED(blocking); return false;}

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedFlush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_inString$ = 8						; size = 4
_length$ = 12						; size = 4
_messageEnd$ = 16					; size = 4
_blocking$ = 20						; size = 1
?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::Put2, COMDAT
; _this$ = ecx

; 152  : 		{CRYPTOPP_UNUSED(inString); CRYPTOPP_UNUSED(length); CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Put2:
  00026	cc		 int	 3
?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::Put2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
;	COMDAT ??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z
_TEXT	SEGMENT
$T2 = -36						; size = 12
$T3 = -24						; size = 4
$T4 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_name$ = 12						; size = 4
_value$ = 16						; size = 4
_throwIfNotUsed$ = 20					; size = 1
_p$5 = 20						; size = 4
??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z PROC ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>, COMDAT

; 503  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 504  : 	return AlgorithmParameters()(name, value, throwIfNotUsed);

  00028	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  0002b	e8 00 00 00 00	 call	 ??0AlgorithmParameters@CryptoPP@@QAE@XZ ; CryptoPP::AlgorithmParameters::AlgorithmParameters
  00030	8b f0		 mov	 esi, eax
  00032	89 75 f0	 mov	 DWORD PTR $T4[ebp], esi

; 462  : 		member_ptr<AlgorithmParametersBase> p(new AlgorithmParametersTemplate<T>(name, value, throwIfNotUsed));

  00035	6a 2c		 push	 44			; 0000002cH

; 504  : 	return AlgorithmParameters()(name, value, throwIfNotUsed);

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 462  : 		member_ptr<AlgorithmParametersBase> p(new AlgorithmParametersTemplate<T>(name, value, throwIfNotUsed));

  0003e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00043	8b f8		 mov	 edi, eax
  00045	83 c4 04	 add	 esp, 4
  00048	89 7d e8	 mov	 DWORD PTR $T3[ebp], edi
  0004b	8a 5d 14	 mov	 bl, BYTE PTR _throwIfNotUsed$[ebp]
  0004e	85 ff		 test	 edi, edi
  00050	74 2b		 je	 SHORT $LN8@MakeParame

; 344  : 		: m_name(name), m_throwIfNotUsed(throwIfNotUsed), m_used(false) {}

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _name$[ebp]
  00055	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  00058	88 5f 08	 mov	 BYTE PTR [edi+8], bl
  0005b	c6 47 09 00	 mov	 BYTE PTR [edi+9], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h

; 39   : 	explicit member_ptr(T *p = NULLPTR) : m_p(p) {}

  0005f	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 374  : 		: AlgorithmParametersBase(name, throwIfNotUsed), m_value(value)

  00066	ff 75 10	 push	 DWORD PTR _value$[ebp]
  00069	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0006c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 375  : 	{

  00070	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@
  00076	e8 00 00 00 00	 call	 ??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z

; 462  : 		member_ptr<AlgorithmParametersBase> p(new AlgorithmParametersTemplate<T>(name, value, throwIfNotUsed));

  0007b	eb 02		 jmp	 SHORT $LN9@MakeParame
$LN8@MakeParame:
  0007d	33 ff		 xor	 edi, edi
$LN9@MakeParame:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h

; 39   : 	explicit member_ptr(T *p = NULLPTR) : m_p(p) {}

  0007f	89 7d 14	 mov	 DWORD PTR _p$5[ebp], edi

; 54   : 		T *old_p = m_p;

  00082	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 462  : 		member_ptr<AlgorithmParametersBase> p(new AlgorithmParametersTemplate<T>(name, value, throwIfNotUsed));

  00085	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]

; 463  : 		p->m_next.reset(m_next.release());

  00088	50		 push	 eax
  00089	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h

; 55   : 		m_p = NULLPTR;

  0008d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 463  : 		p->m_next.reset(m_next.release());

  00094	e8 00 00 00 00	 call	 ?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset

; 464  : 		m_next.reset(p.release());

  00099	57		 push	 edi
  0009a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h

; 55   : 		m_p = NULLPTR;

  0009d	c7 45 14 00 00
	00 00		 mov	 DWORD PTR _p$5[ebp], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 464  : 		m_next.reset(p.release());

  000a4	e8 00 00 00 00	 call	 ?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset

; 465  : 		m_defaultThrowIfNotUsed = throwIfNotUsed;

  000a9	8b 75 f0	 mov	 esi, DWORD PTR $T4[ebp]

; 466  : 		return *this;

  000ac	8d 4d 14	 lea	 ecx, DWORD PTR _p$5[ebp]
  000af	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b3	88 5e 08	 mov	 BYTE PTR [esi+8], bl
  000b6	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>

; 504  : 	return AlgorithmParameters()(name, value, throwIfNotUsed);

  000bb	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000be	56		 push	 esi
  000bf	e8 00 00 00 00	 call	 ??0AlgorithmParameters@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::AlgorithmParameters::AlgorithmParameters
  000c4	8d 4d e0	 lea	 ecx, DWORD PTR $T2[ebp+4]
  000c7	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  000cc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 505  : }

  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d9	59		 pop	 ecx
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1AlgorithmParameters@CryptoPP@@UAE@XZ
__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$2:
  00008	6a 2c		 push	 44			; 0000002cH
  0000a	8b 45 e8	 mov	 eax, DWORD PTR $T3[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$4:
  00017	8b 4d e8	 mov	 ecx, DWORD PTR $T3[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$3:
  0001f	8d 4d 14	 lea	 ecx, DWORD PTR _p$5[ebp]
  00022	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  00027	cc		 int	 3
  00028	cc		 int	 3
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
__ehhandler$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z:
  0002c	90		 npad	 1
  0002d	90		 npad	 1
  0002e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00032	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00035	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z ENDP ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>
; Function compile flags: /Ogtp
;	COMDAT ??_GStringStore@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GStringStore@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::StringStore::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 0b		 je	 SHORT $LN5@scalar
  0000c	6a 20		 push	 32			; 00000020H
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00014	83 c4 08	 add	 esp, 8
$LN5@scalar:
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??_GStringStore@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::StringStore::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ??_G?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 1067 : 	virtual ~StringSinkTemplate() {}

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  00017	74 0b		 je	 SHORT $LN10@scalar
  00019	6a 10		 push	 16			; 00000010H
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	83 c4 08	 add	 esp, 8
$LN10@scalar:
  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??_G?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z
_TEXT	SEGMENT
__Off$1$ = -4						; size = 4
_inString$ = 8						; size = 4
_length$ = 12						; size = 4
$T1 = 12						; size = 1
tv552 = 12						; size = 4
_messageEnd$ = 16					; size = 4
_blocking$ = 20						; size = 1
?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::Put2, COMDAT
; _this$ = ecx

; 1078 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1079 : 		CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking);
; 1080 : 		if (length > 0)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _length$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	85 f6		 test	 esi, esi
  0000d	0f 84 dc 00 00
	00		 je	 $LN30@Put2

; 1081 : 		{
; 1082 : 			typename T::size_type size = m_output->size();

  00013	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00016	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]

; 1083 : 			if (length < size && size + length > m_output->capacity())

  00019	3b f2		 cmp	 esi, edx
  0001b	73 11		 jae	 SHORT $LN3@Put2
  0001d	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00020	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00023	76 09		 jbe	 SHORT $LN3@Put2

; 1084 : 				m_output->reserve(2*size);

  00025	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
$LN3@Put2:

; 1085 : 			m_output->insert(m_output->end(), (const value_type *)inString, (const value_type *)inString+length);

  0002e	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00031	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00032	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  00035	8d 51 10	 lea	 edx, DWORD PTR [ecx+16]
  00038	89 55 0c	 mov	 DWORD PTR tv552[ebp], edx
  0003b	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0003e	76 09		 jbe	 SHORT $LN87@Put2

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
  00042	8b 12		 mov	 edx, DWORD PTR [edx]
  00044	8d 1c 02	 lea	 ebx, DWORD PTR [edx+eax]
  00047	eb 0a		 jmp	 SHORT $LN86@Put2
$LN87@Put2:
  00049	89 55 0c	 mov	 DWORD PTR tv552[ebp], edx
  0004c	8b c1		 mov	 eax, ecx
  0004e	8b 12		 mov	 edx, DWORD PTR [edx]
  00050	8d 1c 0a	 lea	 ebx, DWORD PTR [edx+ecx]
$LN86@Put2:

; 1811 :         const auto _Off = static_cast<size_type>(_Unfancy(_Where._Ptr) - _Mypair._Myval2._Myptr());

  00053	2b d8		 sub	 ebx, eax
  00055	89 5d fc	 mov	 DWORD PTR __Off$1$[ebp], ebx

; 450  :         if (_Mysize < _Off) {

  00058	3b d3		 cmp	 edx, ebx
  0005a	0f 82 99 00 00
	00		 jb	 $LN103@Put2

; 1716 :         const bool _Check_overlap = _Count <= _Mypair._Myval2._Myres - _Old_size;

  00060	8b c7		 mov	 eax, edi
  00062	2b c2		 sub	 eax, edx
  00064	3b f0		 cmp	 esi, eax

; 1717 : #endif // ^^^ !_HAS_CXX20 ^^^
; 1718 : 
; 1719 :         if (_Check_overlap) {

  00066	77 74		 ja	 SHORT $LN31@Put2

; 1720 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1721 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00068	8b 5d 0c	 mov	 ebx, DWORD PTR tv552[ebp]
  0006b	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  0006e	89 03		 mov	 DWORD PTR [ebx], eax

; 417  :         if (_Large_mode_engaged()) {

  00070	8b 5d fc	 mov	 ebx, DWORD PTR __Off$1$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  00073	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00076	76 02		 jbe	 SHORT $LN43@Put2

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00078	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN43@Put2:

; 1727 :             if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size) {

  0007a	8b 45 08	 mov	 eax, DWORD PTR _inString$[ebp]
  0007d	03 d9		 add	 ebx, ecx
  0007f	03 c6		 add	 eax, esi
  00081	3b c3		 cmp	 eax, ebx
  00083	76 18		 jbe	 SHORT $LN34@Put2
  00085	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00088	8b 4d 08	 mov	 ecx, DWORD PTR _inString$[ebp]
  0008b	3b c8		 cmp	 ecx, eax
  0008d	77 0e		 ja	 SHORT $LN34@Put2

; 1730 :             } else if (_Insert_at <= _Ptr) { // all of [_Ptr, _Ptr + _Count) shifts

  0008f	3b d9		 cmp	 ebx, ecx
  00091	77 04		 ja	 SHORT $LN35@Put2

; 1731 :                 _Ptr_shifted_after = 0;

  00093	33 ff		 xor	 edi, edi

; 1732 :             } else { // [_Ptr, _Ptr + _Count) contains _Insert_at, so only the part after _Insert_at shifts

  00095	eb 08		 jmp	 SHORT $LN36@Put2
$LN35@Put2:

; 1733 :                 _Ptr_shifted_after = static_cast<size_type>(_Insert_at - _Ptr);

  00097	8b fb		 mov	 edi, ebx
  00099	2b f9		 sub	 edi, ecx
  0009b	eb 02		 jmp	 SHORT $LN36@Put2
$LN34@Put2:

; 1728 :                 // inserted content is before the shifted region, or does not alias
; 1729 :                 _Ptr_shifted_after = _Count; // none of _Ptr's data shifts

  0009d	8b fe		 mov	 edi, esi
$LN36@Put2:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0009f	2b 55 fc	 sub	 edx, DWORD PTR __Off$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1736 :             _Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  000a2	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  000a5	42		 inc	 edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000a6	52		 push	 edx
  000a7	53		 push	 ebx
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _memmove

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ae	57		 push	 edi
  000af	ff 75 08	 push	 DWORD PTR _inString$[ebp]
  000b2	53		 push	 ebx
  000b3	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1738 :             _Traits::copy(

  000b8	8b c6		 mov	 eax, esi
  000ba	2b c7		 sub	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bc	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1738 :             _Traits::copy(

  000bd	8b 45 08	 mov	 eax, DWORD PTR _inString$[ebp]
  000c0	03 c7		 add	 eax, edi
  000c2	03 c6		 add	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c4	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1738 :             _Traits::copy(

  000c5	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 _memcpy
  000ce	83 c4 24	 add	 esp, 36			; 00000024H
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1087 : 		return 0;

  000d1	33 c0		 xor	 eax, eax
  000d3	5b		 pop	 ebx
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi

; 1088 : 	}

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 10 00	 ret	 16			; 00000010H
$LN31@Put2:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1743 :         return _Reallocate_grow_by(

  000dc	56		 push	 esi
  000dd	ff 75 08	 push	 DWORD PTR _inString$[ebp]
  000e0	c6 45 0c 00	 mov	 BYTE PTR $T1[ebp], 0
  000e4	53		 push	 ebx
  000e5	ff 75 0c	 push	 DWORD PTR $T1[ebp]
  000e8	56		 push	 esi
  000e9	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
  000ee	5b		 pop	 ebx
$LN30@Put2:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1087 : 		return 0;

  000ef	5f		 pop	 edi
  000f0	33 c0		 xor	 eax, eax
  000f2	5e		 pop	 esi

; 1088 : 	}

  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 10 00	 ret	 16			; 00000010H
$LN103@Put2:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 451  :             _Xran();

  000f9	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN101@Put2:
  000fe	cc		 int	 3
?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z ENDP ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::Put2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
_TEXT	SEGMENT
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_parameters$ = 8					; size = 4
?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::IsolatedInitialize, COMDAT
; _this$ = ecx

; 1075 : 		{if (!parameters.GetValue("OutputStringPointer", m_output)) throw InvalidArgument("StringSink: OutputStringPointer not specified");}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b 75 08	 mov	 esi, DWORD PTR _parameters$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 352  : 		return GetVoidValue(name, typeid(T), &value);

  0002c	8b 06		 mov	 eax, DWORD PTR [esi]
  0002e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1075 : 		{if (!parameters.GetValue("OutputStringPointer", m_output)) throw InvalidArgument("StringSink: OutputStringPointer not specified");}

  00031	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 352  : 		return GetVoidValue(name, typeid(T), &value);

  00034	50		 push	 eax
  00035	68 00 00 00 00	 push	 OFFSET ??_R0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NDOICOBI@OutputStringPointer@
  0003f	8b ce		 mov	 ecx, esi
  00041	ff d2		 call	 edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1075 : 		{if (!parameters.GetValue("OutputStringPointer", m_output)) throw InvalidArgument("StringSink: OutputStringPointer not specified");}

  00043	84 c0		 test	 al, al
  00045	74 1c		 je	 SHORT $LN10@IsolatedIn
  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5e		 pop	 esi
  00053	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN10@IsolatedIn:
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@DDPAKADP@StringSink?3?5OutputStringPointer@
  00068	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0006b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00070	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007a	50		 push	 eax
  0007b	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  0007e	e8 00 00 00 00	 call	 ??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::InvalidArgument::InvalidArgument
  00083	68 00 00 00 00	 push	 OFFSET __TI3?AVInvalidArgument@CryptoPP@@
  00088	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@IsolatedIn:
  00091	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ENDP ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::IsolatedInitialize
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ??0?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_output$ = 8						; size = 4
??0?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1071 : 	StringSinkTemplate(T &output)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 1604 : 	BufferedTransformation() : Algorithm(false) {}

  00004	6a 00		 push	 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1071 : 	StringSinkTemplate(T &output)

  00006	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 1604 : 	BufferedTransformation() : Algorithm(false) {}

  00008	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1072 : 		: m_output(&output) {CRYPTOPP_ASSERT(sizeof(value_type)==1);}

  0000d	8b 45 08	 mov	 eax, DWORD PTR _output$[ebp]
  00010	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00013	8b c6		 mov	 eax, esi
  00015	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  0001b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??0?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ??1?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1067 : 	virtual ~StringSinkTemplate() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  0000d	c3		 ret	 0
??1?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h
;	COMDAT ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>, COMDAT
; _this$ = ecx

; 68   : template <class T> member_ptr<T>::~member_ptr() {delete m_p;}

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN3@member_ptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	ff 10		 call	 DWORD PTR [eax]
$LN3@member_ptr:
  0000c	c3		 ret	 0
??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ
_TEXT	SEGMENT
?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ PROC ; CryptoPP::Filter::ShouldPropagateMessageSeriesEnd, COMDAT
; _this$ = ecx

; 83   : 	virtual bool ShouldPropagateMessageSeriesEnd() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ ENDP ; CryptoPP::Filter::ShouldPropagateMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ
_TEXT	SEGMENT
?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ PROC ; CryptoPP::Filter::ShouldPropagateMessageEnd, COMDAT
; _this$ = ecx

; 82   : 	virtual bool ShouldPropagateMessageEnd() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ ENDP ; CryptoPP::Filter::ShouldPropagateMessageEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ?Attachable@Filter@CryptoPP@@UAE_NXZ
_TEXT	SEGMENT
?Attachable@Filter@CryptoPP@@UAE_NXZ PROC		; CryptoPP::Filter::Attachable, COMDAT
; _this$ = ecx

; 51   : 	bool Attachable() {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?Attachable@Filter@CryptoPP@@UAE_NXZ ENDP		; CryptoPP::Filter::Attachable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
;	COMDAT ??1Filter@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Filter@CryptoPP@@UAE@XZ PROC				; CryptoPP::Filter::~Filter, COMDAT
; _this$ = ecx

; 38   : 	virtual ~Filter() {}

  00000	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00003	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
??1Filter@CryptoPP@@UAE@XZ ENDP				; CryptoPP::Filter::~Filter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ??_G?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0000c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  00013	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  0001a	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  00021	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
  00026	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0002a	74 0b		 je	 SHORT $LN10@scalar
  0002c	6a 4c		 push	 76			; 0000004cH
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00034	83 c4 08	 add	 esp, 8
$LN10@scalar:
  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
??_G?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  0002b	6a 01		 push	 1
  0002d	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00030	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 128  : 	CipherModeBase() : m_cipher(NULLPTR) {}

  00035	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  0003c	c7 43 10 ff ff
	ff ff		 mov	 DWORD PTR [ebx+16], -1
  00043	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  0004a	c7 43 18 00 00
	00 00		 mov	 DWORD PTR [ebx+24], 0
  00051	c7 43 24 ff ff
	ff ff		 mov	 DWORD PTR [ebx+36], -1
  00058	c7 43 28 00 00
	00 00		 mov	 DWORD PTR [ebx+40], 0
  0005f	c7 43 2c 00 00
	00 00		 mov	 DWORD PTR [ebx+44], 0
  00066	6a 01		 push	 1
  00068	8d 4b 30	 lea	 ecx, DWORD PTR [ebx+48]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h

; 303  : 	AdditiveCipherTemplate() : m_leftOver(0) {}

  0006b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00072	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 724  : 		: m_mark(ELEMS_MAX), m_size(size), m_ptr(m_alloc.allocate(size, NULLPTR)) { }

  00077	c7 43 38 ff ff
	ff ff		 mov	 DWORD PTR [ebx+56], -1
  0007e	8b c3		 mov	 eax, ebx
  00080	c7 43 3c 00 00
	00 00		 mov	 DWORD PTR [ebx+60], 0
  00087	c7 43 40 00 00
	00 00		 mov	 DWORD PTR [ebx+64], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h

; 303  : 	AdditiveCipherTemplate() : m_leftOver(0) {}

  0008e	c7 43 44 00 00
	00 00		 mov	 DWORD PTR [ebx+68], 0
  00095	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0009b	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  000a2	c7 43 1c 00 00
	00 00		 mov	 DWORD PTR [ebx+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  000a9	c7 43 30 00 00
	00 00		 mov	 DWORD PTR [ebx+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ$4:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ
__unwindfunclet$??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::~AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ
_TEXT	SEGMENT
?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::AccessPolicy, COMDAT
; _this$ = ecx

; 70   : 	POLICY_INTERFACE & AccessPolicy() {return *this;}

  00000	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::AccessPolicy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ
_TEXT	SEGMENT
?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::GetPolicy, COMDAT
; _this$ = ecx

; 69   : 	const POLICY_INTERFACE & GetPolicy() const {return *this;}

  00000	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::GetPolicy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ??1?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::~ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>, COMDAT
; _this$ = ecx

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  0000d	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  00014	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  0001b	e9 00 00 00 00	 jmp	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
??1?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::~ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AlgorithmProvider, COMDAT
; _this$ = ecx

; 381  : 	std::string AlgorithmProvider() const { return this->GetPolicy().AlgorithmProvider(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00007	83 c1 fc	 add	 ecx, -4			; fffffffcH
  0000a	ff 50 48	 call	 DWORD PTR [eax+72]
  0000d	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00010	8b c8		 mov	 ecx, eax
  00012	8b 10		 mov	 edx, DWORD PTR [eax]
  00014	ff 52 30	 call	 DWORD PTR [edx+48]
  00017	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?AlgorithmProvider@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AlgorithmProvider
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsRandomAccess, COMDAT
; _this$ = ecx

; 360  : 	bool IsRandomAccess() const {return this->GetPolicy().CipherIsRandomAccess();}

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00006	ff 50 48	 call	 DWORD PTR [eax+72]
  00009	8b c8		 mov	 ecx, eax
  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00010	ff e0		 jmp	 eax
?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsRandomAccess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsForwardTransformation, COMDAT
; _this$ = ecx

; 355  : 	bool IsForwardTransformation() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsForwardTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsSelfInverting, COMDAT
; _this$ = ecx

; 351  : 	bool IsSelfInverting() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsSelfInverting
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::OptimalDataAlignment, COMDAT
; _this$ = ecx

; 347  : 	unsigned int OptimalDataAlignment() const {return this->GetPolicy().GetAlignment();}

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00006	ff 50 48	 call	 DWORD PTR [eax+72]
  00009	8b c8		 mov	 ecx, eax
  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	ff 62 04	 jmp	 DWORD PTR [edx+4]
?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::OptimalDataAlignment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::OptimalBlockSize, COMDAT
; _this$ = ecx

; 336  : 	unsigned int OptimalBlockSize() const {return this->GetPolicy().GetOptimalBlockSize();}

  00000	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00003	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00006	ff 50 48	 call	 DWORD PTR [eax+72]
  00009	8b c8		 mov	 ecx, eax
  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	ff 62 0c	 jmp	 DWORD PTR [edx+12]
?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::OptimalBlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >, COMDAT
; _this$ = ecx

; 302  : 	virtual ~AdditiveCipherTemplate() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00027	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0002a	8b 56 3c	 mov	 edx, DWORD PTR [esi+60]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002d	3b c2		 cmp	 eax, edx
  0002f	8b 5e 40	 mov	 ebx, DWORD PTR [esi+64]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00032	8b fb		 mov	 edi, ebx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00034	0f 42 d0	 cmovb	 edx, eax
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0003e	32 c0		 xor	 al, al
  00040	8b ca		 mov	 ecx, edx
  00042	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 231  : 		if (T_Align16 && size)

  00044	53		 push	 ebx
  00045	85 d2		 test	 edx, edx
  00047	74 07		 je	 SHORT $LN12@AdditiveCi

; 232  : 			return AlignedDeallocate(ptr);

  00049	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
  0004e	eb 05		 jmp	 SHORT $LN109@AdditiveCi
$LN12@AdditiveCi:

; 235  : 		UnalignedDeallocate(ptr);

  00050	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
$LN109@AdditiveCi:

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00055	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00058	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0005b	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0005e	3b c1		 cmp	 eax, ecx
  00060	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00063	8b fa		 mov	 edi, edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00065	0f 42 c8	 cmovb	 ecx, eax
  00068	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0006f	32 c0		 xor	 al, al
  00071	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00079	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0007c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0007f	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00081	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00084	8b fa		 mov	 edi, edx
  00086	0f 42 c8	 cmovb	 ecx, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00089	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00090	32 c0		 xor	 al, al
  00092	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  0009a	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h

; 302  : 	virtual ~AdditiveCipherTemplate() {}

  0009d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a7	59		 pop	 ecx
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
  000af	cc		 int	 3
  000b0	cc		 int	 3
  000b1	cc		 int	 3
  000b2	cc		 int	 3
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::~AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>, COMDAT
; _this$ = ecx

; 53   : 	virtual ~AbstractPolicyHolder() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00026	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00029	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002c	3b c1		 cmp	 eax, ecx
  0002e	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00031	8b fa		 mov	 edi, edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00033	0f 42 c8	 cmovb	 ecx, eax
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0003d	32 c0		 xor	 al, al
  0003f	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00047	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0004a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0004d	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0004f	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00052	8b fa		 mov	 edi, edx
  00054	0f 42 c8	 cmovb	 ecx, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00057	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0005e	32 c0		 xor	 al, al
  00060	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00068	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h

; 53   : 	virtual ~AbstractPolicyHolder() {}

  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
  0007c	cc		 int	 3
  0007d	cc		 int	 3
  0007e	cc		 int	 3
  0007f	cc		 int	 3
  00080	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::~AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ
_TEXT	SEGMENT
?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ PROC ; CryptoPP::CTR_ModePolicy::CanOperateKeystream, COMDAT
; _this$ = ecx

; 240  : 	bool CanOperateKeystream() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ ENDP ; CryptoPP::CTR_ModePolicy::CanOperateKeystream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_iterationCount$ = 12					; size = 4
?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z PROC ; CryptoPP::CTR_ModePolicy::WriteKeystream, COMDAT
; _this$ = ecx

; 239  : 		{OperateKeystream(WRITE_KEYSTREAM, buffer, NULLPTR, iterationCount);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 0c	 push	 DWORD PTR _iterationCount$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 00		 push	 0
  0000a	ff 75 08	 push	 DWORD PTR _buffer$[ebp]
  0000d	6a 04		 push	 4
  0000f	ff 50 1c	 call	 DWORD PTR [eax+28]
  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z ENDP ; CryptoPP::CTR_ModePolicy::WriteKeystream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ
_TEXT	SEGMENT
?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ PROC ; CryptoPP::CTR_ModePolicy::GetIterationsToBuffer, COMDAT
; _this$ = ecx

; 237  : 	unsigned int GetIterationsToBuffer() const {return m_cipher->OptimalNumberOfParallelBlocks();}

  00000	8b 49 ec	 mov	 ecx, DWORD PTR [ecx-20]
  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8d 49 04	 lea	 ecx, DWORD PTR [ecx+4]
  00009	ff 60 24	 jmp	 DWORD PTR [eax+36]
?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ ENDP ; CryptoPP::CTR_ModePolicy::GetIterationsToBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ
_TEXT	SEGMENT
?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ PROC ; CryptoPP::CTR_ModePolicy::GetBytesPerIteration, COMDAT
; _this$ = ecx

; 236  : 	unsigned int GetBytesPerIteration() const {return BlockSize();}

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	c3		 ret	 0
?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ ENDP ; CryptoPP::CTR_ModePolicy::GetBytesPerIteration
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ
_TEXT	SEGMENT
?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ PROC	; CryptoPP::CTR_ModePolicy::GetAlignment, COMDAT
; _this$ = ecx

; 235  : 	unsigned int GetAlignment() const {return m_cipher->OptimalDataAlignment();}

  00000	8b 49 ec	 mov	 ecx, DWORD PTR [ecx-20]
  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8d 49 04	 lea	 ecx, DWORD PTR [ecx+4]
  00009	ff 60 18	 jmp	 DWORD PTR [eax+24]
?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ ENDP	; CryptoPP::CTR_ModePolicy::GetAlignment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
_TEXT	SEGMENT
?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ PROC ; CryptoPP::CTR_ModePolicy::IVRequirement, COMDAT
; _this$ = ecx

; 231  : 	IV_Requirement IVRequirement() const {return RANDOM_IV;}

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ENDP ; CryptoPP::CTR_ModePolicy::IVRequirement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ PROC ; CryptoPP::CTR_ModePolicy::CipherIsRandomAccess, COMDAT
; _this$ = ecx

; 230  : 	bool CipherIsRandomAccess() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::CTR_ModePolicy::CipherIsRandomAccess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ??1CTR_ModePolicy@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CTR_ModePolicy@CryptoPP@@UAE@XZ PROC			; CryptoPP::CTR_ModePolicy::~CTR_ModePolicy, COMDAT
; _this$ = ecx

; 229  : 	virtual ~CTR_ModePolicy() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CTR_ModePolicy@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00026	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00029	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002c	3b c1		 cmp	 eax, ecx
  0002e	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00031	8b fa		 mov	 edi, edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00033	0f 42 c8	 cmovb	 ecx, eax
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0003d	32 c0		 xor	 al, al
  0003f	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00047	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0004a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0004d	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0004f	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00052	8b fa		 mov	 edi, edx
  00054	0f 42 c8	 cmovb	 ecx, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00057	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0005e	32 c0		 xor	 al, al
  00060	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00068	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 229  : 	virtual ~CTR_ModePolicy() {}

  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
  0007c	cc		 int	 3
  0007d	cc		 int	 3
  0007e	cc		 int	 3
  0007f	cc		 int	 3
  00080	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CTR_ModePolicy@CryptoPP@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CTR_ModePolicy@CryptoPP@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CTR_ModePolicy@CryptoPP@@UAE@XZ ENDP			; CryptoPP::CTR_ModePolicy::~CTR_ModePolicy
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
;	COMDAT ??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::~ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00023	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00026	8b fa		 mov	 edi, edx

; 569  : 	return b < a ? b : a;

  00028	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0002b	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0002e	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00030	52		 push	 edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00031	0f 42 c8	 cmovb	 ecx, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0003b	32 c0		 xor	 al, al
  0003d	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  0003f	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00044	83 c4 04	 add	 esp, 4
  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5f		 pop	 edi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::~ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z
_TEXT	SEGMENT
_params$ = 8						; size = 4
_value$1 = 8						; size = 4
_key$ = 12						; size = 4
_length$ = 16						; size = 4
?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z PROC ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::CipherSetKey, COMDAT
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 158  : 	m_cipher->SetKey(key, length, params);

  00007	8b 7d 08	 mov	 edi, DWORD PTR _params$[ebp]
  0000a	57		 push	 edi
  0000b	8b 4e ec	 mov	 ecx, DWORD PTR [esi-20]
  0000e	ff 75 10	 push	 DWORD PTR _length$[ebp]
  00011	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	ff 50 18	 call	 DWORD PTR [eax+24]

; 159  : 	ResizeBuffers();

  00019	8b 46 e4	 mov	 eax, DWORD PTR [esi-28]
  0001c	8d 4e e4	 lea	 ecx, DWORD PTR [esi-28]
  0001f	ff 50 40	 call	 DWORD PTR [eax+64]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 352  : 		return GetVoidValue(name, typeid(T), &value);

  00022	8b 07		 mov	 eax, DWORD PTR [edi]
  00024	8d 4d 08	 lea	 ecx, DWORD PTR _value$1[ebp]
  00027	51		 push	 ecx
  00028	68 00 00 00 00	 push	 OFFSET ??_R0H@8
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GKFFKNHD@FeedbackSize@
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00035	8b cf		 mov	 ecx, edi
  00037	ff d0		 call	 eax

; 368  : 		if (result) {return value;}

  00039	33 d2		 xor	 edx, edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 161  : 	SetFeedbackSize(feedbackSize);

  0003b	8d 4e e4	 lea	 ecx, DWORD PTR [esi-28]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 368  : 		if (result) {return value;}

  0003e	84 c0		 test	 al, al
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 161  : 	SetFeedbackSize(feedbackSize);

  00040	8b 46 e4	 mov	 eax, DWORD PTR [esi-28]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 368  : 		if (result) {return value;}

  00043	0f 45 55 08	 cmovne	 edx, DWORD PTR _value$1[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 161  : 	SetFeedbackSize(feedbackSize);

  00047	52		 push	 edx
  00048	ff 50 3c	 call	 DWORD PTR [eax+60]
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 162  : }

  0004d	5d		 pop	 ebp
  0004e	c2 0c 00	 ret	 12			; 0000000cH
?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z ENDP ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::CipherSetKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
_TEXT	SEGMENT
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_feedbackSize$ = 8					; size = 4
?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z PROC	; CryptoPP::CipherModeBase::SetFeedbackSize, COMDAT
; _this$ = ecx

; 135  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 136  : 		if (!(feedbackSize == 0 || feedbackSize == BlockSize()))

  00028	8b 45 08	 mov	 eax, DWORD PTR _feedbackSize$[ebp]
  0002b	85 c0		 test	 eax, eax
  0002d	74 05		 je	 SHORT $LN2@SetFeedbac
  0002f	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00032	75 1b		 jne	 SHORT $LN8@SetFeedbac
$LN2@SetFeedbac:

; 138  : 	}

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00042	33 cd		 xor	 ecx, ebp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
$LN8@SetFeedbac:

; 137  : 			throw InvalidArgument("CipherModeBase: feedback size cannot be specified for this cipher mode");

  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@FMNEDLJE@CipherModeBase?3?5feedback?5size?5c@
  00054	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00057	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005c	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00066	50		 push	 eax
  00067	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	e8 00 00 00 00	 call	 ??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::InvalidArgument::InvalidArgument
  0006f	68 00 00 00 00	 push	 OFFSET __TI3?AVInvalidArgument@CryptoPP@@
  00074	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@SetFeedbac:
  0007d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z ENDP	; CryptoPP::CipherModeBase::SetFeedbackSize
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?IVSize@CipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?IVSize@CipherModeBase@CryptoPP@@UBEIXZ PROC		; CryptoPP::CipherModeBase::IVSize, COMDAT
; _this$ = ecx

; 96   : 	unsigned int IVSize() const {return BlockSize();}

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	c3		 ret	 0
?IVSize@CipherModeBase@CryptoPP@@UBEIXZ ENDP		; CryptoPP::CipherModeBase::IVSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z
_TEXT	SEGMENT
_keylength$ = 8						; size = 4
?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z PROC ; CryptoPP::CipherModeBase::IsValidKeyLength, COMDAT
; _this$ = ecx

; 85   : 	bool IsValidKeyLength(size_t keylength) const {return m_cipher->IsValidKeyLength(keylength);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0000b	5d		 pop	 ebp
  0000c	ff e0		 jmp	 eax
?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z ENDP ; CryptoPP::CipherModeBase::IsValidKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z
_TEXT	SEGMENT
_keylength$ = 8						; size = 4
?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z PROC ; CryptoPP::CipherModeBase::GetValidKeyLength, COMDAT
; _this$ = ecx

; 79   : 	size_t GetValidKeyLength(size_t keylength) const {return m_cipher->GetValidKeyLength(keylength);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	5d		 pop	 ebp
  00009	ff 60 10	 jmp	 DWORD PTR [eax+16]
?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z ENDP ; CryptoPP::CipherModeBase::GetValidKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ PROC	; CryptoPP::CipherModeBase::DefaultKeyLength, COMDAT
; _this$ = ecx

; 69   : 	size_t DefaultKeyLength() const {return m_cipher->DefaultKeyLength();}

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	ff 60 0c	 jmp	 DWORD PTR [eax+12]
?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ ENDP	; CryptoPP::CipherModeBase::DefaultKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ PROC	; CryptoPP::CipherModeBase::MaxKeyLength, COMDAT
; _this$ = ecx

; 65   : 	size_t MaxKeyLength() const {return m_cipher->MaxKeyLength();}

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	ff 60 08	 jmp	 DWORD PTR [eax+8]
?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ ENDP	; CryptoPP::CipherModeBase::MaxKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ PROC	; CryptoPP::CipherModeBase::MinKeyLength, COMDAT
; _this$ = ecx

; 61   : 	size_t MinKeyLength() const {return m_cipher->MinKeyLength();}

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	ff 60 04	 jmp	 DWORD PTR [eax+4]
?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ ENDP	; CryptoPP::CipherModeBase::MinKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h
;	COMDAT ??1CipherModeBase@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CipherModeBase@CryptoPP@@UAE@XZ PROC			; CryptoPP::CipherModeBase::~CipherModeBase, COMDAT
; _this$ = ecx

; 52   : 	virtual ~CipherModeBase() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CipherModeBase@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00023	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00026	8b fa		 mov	 edi, edx

; 569  : 	return b < a ? b : a;

  00028	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0002b	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0002e	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00030	52		 push	 edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00031	0f 42 c8	 cmovb	 ecx, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0003b	32 c0		 xor	 al, al
  0003d	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  0003f	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00044	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\modes.h

; 52   : 	virtual ~CipherModeBase() {}

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5f		 pop	 edi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CipherModeBase@CryptoPP@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CipherModeBase@CryptoPP@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CipherModeBase@CryptoPP@@UAE@XZ ENDP			; CryptoPP::CipherModeBase::~CipherModeBase
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1AlgorithmParameters@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1AlgorithmParameters@CryptoPP@@UAE@XZ PROC		; CryptoPP::AlgorithmParameters::~AlgorithmParameters, COMDAT
; _this$ = ecx

; 296  : 	virtual ~NameValuePairs() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00006	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
  00011	5e		 pop	 esi
  00012	c3		 ret	 0
??1AlgorithmParameters@CryptoPP@@UAE@XZ ENDP		; CryptoPP::AlgorithmParameters::~AlgorithmParameters
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
;	COMDAT ??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00026	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00029	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0002c	3b c1		 cmp	 eax, ecx
  0002e	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00031	8b fa		 mov	 edi, edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00033	0f 42 c8	 cmovb	 ecx, eax
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0003d	32 c0		 xor	 al, al
  0003f	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00047	83 c4 04	 add	 esp, 4

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0004a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
  00058	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0005c	74 0b		 je	 SHORT $LN41@scalar
  0005e	6a 2c		 push	 44			; 0000002cH
  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00066	83 c4 08	 add	 esp, 8
$LN41@scalar:
  00069	8b c6		 mov	 eax, esi
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
  0007e	cc		 int	 3
  0007f	cc		 int	 3
  00080	cc		 int	 3
  00081	cc		 int	 3
  00082	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
;	COMDAT ?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_buffer$ = 8						; size = 4
$T2 = 8							; size = 4
?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z PROC ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::MoveInto, COMDAT
; _this$ = ecx

; 396  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 397  : 		AlgorithmParametersTemplate<T>* p = new(buffer) AlgorithmParametersTemplate<T>(*this);

  00026	8b 7d 08	 mov	 edi, DWORD PTR _buffer$[ebp]

; 333  : 	{

  00029	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]

; 397  : 		AlgorithmParametersTemplate<T>* p = new(buffer) AlgorithmParametersTemplate<T>(*this);

  0002c	89 7d 08	 mov	 DWORD PTR $T2[ebp], edi

; 333  : 	{

  0002f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7AlgorithmParametersBase@CryptoPP@@6B@
  00035	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00038	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0003b	0f b6 46 08	 movzx	 eax, BYTE PTR [esi+8]
  0003f	88 47 08	 mov	 BYTE PTR [edi+8], al
  00042	0f b6 46 09	 movzx	 eax, BYTE PTR [esi+9]
  00046	88 47 09	 mov	 BYTE PTR [edi+9], al
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h

; 39   : 	explicit member_ptr(T *p = NULLPTR) : m_p(p) {}

  00049	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 54   : 		T *old_p = m_p;

  0004f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 334  : 		m_next.reset(const_cast<AlgorithmParametersBase &>(x).m_next.release());

  00052	50		 push	 eax
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h

; 55   : 		m_p = NULLPTR;

  0005a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 334  : 		m_next.reset(const_cast<AlgorithmParametersBase &>(x).m_next.release());

  00061	e8 00 00 00 00	 call	 ?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset

; 335  : 		x.m_used = true;

  00066	c6 46 09 01	 mov	 BYTE PTR [esi+9], 1
  0006a	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0006d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00074	50		 push	 eax
  00075	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00078	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@
  0007e	e8 00 00 00 00	 call	 ??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z

; 398  : 		CRYPTOPP_UNUSED(p);	// silence warning
; 399  : 	}

  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z$2:
  00000	8b 4d 08	 mov	 ecx, DWORD PTR $T2[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
__unwindfunclet$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z$0:
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR $T2[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z ENDP ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::MoveInto
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
;	COMDAT ?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
_valueType$ = 12					; size = 4
_pValue$ = 16						; size = 4
?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z PROC ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::AssignValue, COMDAT
; _this$ = ecx

; 379  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h

; 99   :         return __std_type_info_compare(&_Data, &_Other._Data) == 0;

  00006	68 04 00 00 00	 push	 OFFSET ??_R0H@8+4
  0000b	68 04 00 00 00	 push	 OFFSET ??_R0?AVConstByteArrayParameter@CryptoPP@@@8+4
  00010	8d 71 10	 lea	 esi, DWORD PTR [ecx+16]
  00013	e8 00 00 00 00	 call	 ___std_type_info_compare
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 382  : 		if (!(typeid(T) == typeid(int) && AssignIntToInteger(valueType, pValue, &m_value)))

  00018	8b 7d 10	 mov	 edi, DWORD PTR _pValue$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h

; 99   :         return __std_type_info_compare(&_Data, &_Other._Data) == 0;

  0001b	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 382  : 		if (!(typeid(T) == typeid(int) && AssignIntToInteger(valueType, pValue, &m_value)))

  0001e	8b 5d 0c	 mov	 ebx, DWORD PTR _valueType$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h

; 99   :         return __std_type_info_compare(&_Data, &_Other._Data) == 0;

  00021	85 c0		 test	 eax, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 382  : 		if (!(typeid(T) == typeid(int) && AssignIntToInteger(valueType, pValue, &m_value)))

  00023	75 13		 jne	 SHORT $LN28@AssignValu
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	53		 push	 ebx
  00028	e8 00 00 00 00	 call	 ?AssignIntToInteger@CryptoPP@@YA_NABVtype_info@@PAXPBX@Z ; CryptoPP::AssignIntToInteger
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00030	84 c0		 test	 al, al
  00032	0f 85 a1 00 00
	00		 jne	 $LN2@AssignValu
$LN28@AssignValu:

; 383  : #endif
; 384  : 		{
; 385  : 			NameValuePairs::ThrowIfTypeMismatch(name, typeid(T), valueType);

  00038	53		 push	 ebx
  00039	68 00 00 00 00	 push	 OFFSET ??_R0?AVConstByteArrayParameter@CryptoPP@@@8
  0003e	ff 75 08	 push	 DWORD PTR _name$[ebp]
  00041	e8 00 00 00 00	 call	 ?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z ; CryptoPP::NameValuePairs::ThrowIfTypeMismatch
  00046	8a 06		 mov	 al, BYTE PTR [esi]
  00048	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]
  0004b	88 07		 mov	 BYTE PTR [edi], al
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00053	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00056	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00059	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  0005c	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 871  : 		if (this != &t)

  0005f	3b f3		 cmp	 esi, ebx
  00061	74 6f		 je	 SHORT $LN26@AssignValu

; 872  : 		{
; 873  : 			New(t.m_size);

  00063	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 254  : 		return StandardReallocate(*this, oldPtr, oldSize, newSize, preserve);

  00066	6a 00		 push	 0
  00068	57		 push	 edi
  00069	ff 76 08	 push	 DWORD PTR [esi+8]
  0006c	ff 76 0c	 push	 DWORD PTR [esi+12]
  0006f	56		 push	 esi
  00070	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >

; 967  : 		m_ptr = m_alloc.reallocate(m_ptr, m_size, newSize, false);

  00075	8b c8		 mov	 ecx, eax

; 968  : 		m_size = newSize;

  00077	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 254  : 		return StandardReallocate(*this, oldPtr, oldSize, newSize, preserve);

  0007a	83 c4 14	 add	 esp, 20			; 00000014H

; 967  : 		m_ptr = m_alloc.reallocate(m_ptr, m_size, newSize, false);

  0007d	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx

; 969  : 		m_mark = ELEMS_MAX;

  00080	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1

; 874  : 			if (m_ptr && t.m_ptr)

  00087	85 c9		 test	 ecx, ecx
  00089	74 47		 je	 SHORT $LN26@AssignValu
  0008b	8b 53 0c	 mov	 edx, DWORD PTR [ebx+12]
  0008e	85 d2		 test	 edx, edx
  00090	74 40		 je	 SHORT $LN26@AssignValu

; 875  : 				{memcpy_s(m_ptr, m_size*sizeof(T), t, t.m_size*sizeof(T));}

  00092	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h

; 46   :         if (_SourceSize == 0)

  00095	85 c0		 test	 eax, eax
  00097	74 39		 je	 SHORT $LN26@AssignValu

; 47   :         {
; 48   :             return 0;
; 49   :         }
; 50   : 
; 51   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);
; 52   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  00099	3b f8		 cmp	 edi, eax
  0009b	72 19		 jb	 SHORT $LN24@AssignValu

; 58   : 
; 59   :             // Unreachable, but required to suppress /analyze warnings:
; 60   :             return EINVAL;
; 61   :         }
; 62   :         memcpy(_Destination, _Source, _SourceSize);

  0009d	50		 push	 eax
  0009e	52		 push	 edx
  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 _memcpy
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 877  : 		m_mark = ELEMS_MAX;

  000a8	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
  000af	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 388  : 	}

  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	5d		 pop	 ebp
  000b3	c2 0c 00	 ret	 12			; 0000000cH
$LN24@AssignValu:
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h

; 54   :             memset(_Destination, 0, _DestinationSize);

  000b6	57		 push	 edi
  000b7	6a 00		 push	 0
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 _memset
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 
; 56   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 57   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  000c2	e8 00 00 00 00	 call	 __errno
  000c7	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN26@AssignValu:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 877  : 		m_mark = ELEMS_MAX;

  000d2	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
$LN2@AssignValu:
  000d9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 388  : 	}

  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx
  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z ENDP ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::AssignValue
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z PROC	; CryptoPP::AlgorithmParametersBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 10		 push	 16			; 00000010H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z ENDP	; CryptoPP::AlgorithmParametersBase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h
;	COMDAT ?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z PROC ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset, COMDAT
; _this$ = ecx

; 69   : template <class T> void member_ptr<T>::reset(T *p) {delete m_p; m_p = p;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00008	85 c9		 test	 ecx, ecx
  0000a	74 06		 je	 SHORT $LN5@reset
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	6a 01		 push	 1
  00010	ff 10		 call	 DWORD PTR [eax]
$LN5@reset:
  00012	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00015	89 06		 mov	 DWORD PTR [esi], eax
  00017	5e		 pop	 esi
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ENDP ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\smartptr.h
;	COMDAT ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>, COMDAT
; _this$ = ecx

; 68   : template <class T> member_ptr<T>::~member_ptr() {delete m_p;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $LN3@member_ptr
  00028	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002a	6a 01		 push	 1
  0002c	ff 10		 call	 DWORD PTR [eax]
$LN3@member_ptr:
  0002e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00031	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00038	59		 pop	 ecx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
  00041	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
;	COMDAT ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$GSCopy$ = -64					; size = 4
_this$ = -60						; size = 4
$T2 = -56						; size = 40
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??1AlgorithmParametersBase@CryptoPP@@UAE@XZ PROC	; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase, COMDAT
; _this$ = ecx

; 310  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	89 75 c4	 mov	 DWORD PTR _this$[ebp], esi
  0002e	89 75 c0	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7AlgorithmParametersBase@CryptoPP@@6B@
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 311  : 
; 312  : #if defined(CRYPTOPP_CXX17_EXCEPTIONS)
; 313  : 		if (std::uncaught_exceptions() == 0)

  0003e	e8 00 00 00 00	 call	 ?uncaught_exceptions@std@@YAHXZ ; std::uncaught_exceptions
  00043	85 c0		 test	 eax, eax
  00045	75 0a		 jne	 SHORT $LN3@AlgorithmP

; 314  : #elif defined(CRYPTOPP_UNCAUGHT_EXCEPTION_AVAILABLE)
; 315  : 		if (std::uncaught_exception() == false)
; 316  : #else
; 317  : 		try
; 318  : #endif
; 319  : 		{
; 320  : 			if (m_throwIfNotUsed && !m_used)

  00047	38 46 08	 cmp	 BYTE PTR [esi+8], al
  0004a	74 05		 je	 SHORT $LN3@AlgorithmP
  0004c	38 46 09	 cmp	 BYTE PTR [esi+9], al
  0004f	74 22		 je	 SHORT $LN9@AlgorithmP
$LN3@AlgorithmP:

; 322  : 		}
; 323  : #if !defined(CRYPTOPP_CXX17_EXCEPTIONS) && !defined(CRYPTOPP_UNCAUGHT_EXCEPTION_AVAILABLE)
; 324  : 		catch(const Exception&)
; 325  : 		{
; 326  : 		}
; 327  : #endif
; 328  : 	}

  00051	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00054	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5e		 pop	 esi
  00065	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00068	33 cd		 xor	 ecx, ebp
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
$LN9@AlgorithmP:

; 321  : 				throw ParameterNotUsed(m_name);

  00073	ff 76 04	 push	 DWORD PTR [esi+4]
  00076	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  00079	e8 00 00 00 00	 call	 ??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
  0007e	68 00 00 00 00	 push	 OFFSET __TI3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
  00083	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@AlgorithmP:
  0008c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ$0:
  00000	8b 4d c0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ENDP	; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
; Function compile flags: /Ogtp
;	COMDAT ??_GParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN10@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@
  0006f	8b c7		 mov	 eax, edi
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z ENDP ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
; Function compile flags: /Ogtp
;	COMDAT ??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::~ParameterNotUsed, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::~ParameterNotUsed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h
;	COMDAT ??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z
_TEXT	SEGMENT
_this$GSCopy$ = -96					; size = 4
_this$ = -92						; size = 4
$T2 = -88						; size = 24
$T3 = -64						; size = 24
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed, COMDAT
; _this$ = ecx

; 306  : 		ParameterNotUsed(const char *name) : Exception(OTHER_ERROR, std::string("AlgorithmParametersBase: parameter \"") + name + "\" not used") {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 a4	 mov	 DWORD PTR _this$[ebp], esi
  0002f	8b 7d 08	 mov	 edi, DWORD PTR _name$[ebp]
  00032	0f 57 c0	 xorps	 xmm0, xmm0
  00035	89 75 a0	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00038	6a 30		 push	 48			; 00000030H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003a	0f 11 45 c0	 movups	 XMMWORD PTR $T3[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0003e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00045	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00051	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 256  :         return _Traits::_Allocate(_Bytes);

  00058	8b c8		 mov	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  0005a	c7 45 d0 24 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 36 ; 00000024H
  00061	89 4d c0	 mov	 DWORD PTR $T3[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00064	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 892  :         _My_data._Myres  = _New_capacity;

  00067	c7 45 d4 2f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 47 ; 0000002fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0006e	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00071	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@+16
  00078	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0007c	a1 20 00 00 00	 mov	 eax, DWORD PTR ??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@+32
  00081	89 41 20	 mov	 DWORD PTR [ecx+32], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00084	c6 41 24 00	 mov	 BYTE PTR [ecx+36], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00088	8b cf		 mov	 ecx, edi
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 306  : 		ParameterNotUsed(const char *name) : Exception(OTHER_ERROR, std::string("AlgorithmParametersBase: parameter \"") + name + "\" not used") {}

  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00091	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL251@ParameterN:
  00094	8a 01		 mov	 al, BYTE PTR [ecx]
  00096	41		 inc	 ecx
  00097	84 c0		 test	 al, al
  00099	75 f9		 jne	 SHORT $LL251@ParameterN
  0009b	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0009d	51		 push	 ecx
  0009e	57		 push	 edi
  0009f	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  000a2	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000a7	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0
  000ae	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000b1	0f 11 45 d8	 movups	 XMMWORD PTR $T4[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000b5	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000bc	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000bf	0f 11 45 d8	 movups	 XMMWORD PTR $T4[ebp], xmm0
  000c3	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000c8	66 0f d6 45 e8	 movq	 QWORD PTR $T4[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  000cd	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  000d4	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  000db	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000de	6a 0a		 push	 10			; 0000000aH
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IAABKFFP@?$CC?5not?5used@
  000e5	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 306  : 		ParameterNotUsed(const char *name) : Exception(OTHER_ERROR, std::string("AlgorithmParametersBase: parameter \"") + name + "\" not used") {}

  000e8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ec	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000f1	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000f4	0f 11 45 a8	 movups	 XMMWORD PTR $T2[ebp], xmm0
  000f8	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000fd	66 0f d6 45 b8	 movq	 QWORD PTR $T2[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00102	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00109	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00110	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 306  : 		ParameterNotUsed(const char *name) : Exception(OTHER_ERROR, std::string("AlgorithmParametersBase: parameter \"") + name + "\" not used") {}

  00113	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h

; 54   :         : _Data()

  00116	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 183  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  0011b	8d 45 a8	 lea	 eax, DWORD PTR $T2[ebp]
  0011e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00122	50		 push	 eax
  00123	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00126	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  0012c	c7 46 0c 06 00
	00 00		 mov	 DWORD PTR [esi+12], 6
  00133	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00138	8b 4d bc	 mov	 ecx, DWORD PTR $T2[ebp+20]
  0013b	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0013e	76 2c		 jbe	 SHORT $LN160@ParameterN
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00140	8b 55 a8	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00143	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00144	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00146	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0014c	72 14		 jb	 SHORT $LN171@ParameterN

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0014e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00151	83 c1 23	 add	 ecx, 35			; 00000023H
  00154	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00156	83 c0 fc	 add	 eax, -4			; fffffffcH
  00159	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0015c	0f 87 a1 00 00
	00		 ja	 $LN242@ParameterN
$LN171@ParameterN:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00162	51		 push	 ecx
  00163	52		 push	 edx
  00164	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00169	83 c4 08	 add	 esp, 8
$LN160@ParameterN:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0016c	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp+20]
  0016f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00172	76 28		 jbe	 SHORT $LN197@ParameterN
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00174	8b 55 d8	 mov	 edx, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00177	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00178	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0017a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00180	72 10		 jb	 SHORT $LN208@ParameterN

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00182	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00185	83 c1 23	 add	 ecx, 35			; 00000023H
  00188	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0018d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00190	77 71		 ja	 SHORT $LN242@ParameterN
$LN208@ParameterN:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00192	51		 push	 ecx
  00193	52		 push	 edx
  00194	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00199	83 c4 08	 add	 esp, 8
$LN197@ParameterN:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0019c	8b 4d d4	 mov	 ecx, DWORD PTR $T3[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  0019f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  001a6	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001ad	c6 45 d8 00	 mov	 BYTE PTR $T4[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  001b1	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001b4	76 28		 jbe	 SHORT $LN234@ParameterN
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b6	8b 55 c0	 mov	 edx, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001b9	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001ba	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001bc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001c2	72 10		 jb	 SHORT $LN245@ParameterN

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001c4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001c7	83 c1 23	 add	 ecx, 35			; 00000023H
  001ca	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001cc	83 c0 fc	 add	 eax, -4			; fffffffcH
  001cf	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001d2	77 2f		 ja	 SHORT $LN242@ParameterN
$LN245@ParameterN:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001d4	51		 push	 ecx
  001d5	52		 push	 edx
  001d6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001db	83 c4 08	 add	 esp, 8
$LN234@ParameterN:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\algparam.h

; 306  : 		ParameterNotUsed(const char *name) : Exception(OTHER_ERROR, std::string("AlgorithmParametersBase: parameter \"") + name + "\" not used") {}

  001de	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@
  001e4	8b c6		 mov	 eax, esi
  001e6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f0	59		 pop	 ecx
  001f1	5f		 pop	 edi
  001f2	5e		 pop	 esi
  001f3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f6	33 cd		 xor	 ecx, ebp
  001f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fd	8b e5		 mov	 esp, ebp
  001ff	5d		 pop	 ebp
  00200	c2 04 00	 ret	 4
$LN242@ParameterN:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00203	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN253@ParameterN:
  00208	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$2:
  00010	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$14:
  00018	8b 4d a0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z ENDP ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h
;	COMDAT ??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z PROC	; CryptoPP::ConstByteArrayParameter::ConstByteArrayParameter, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000e	8a 07		 mov	 al, BYTE PTR [edi]
  00010	88 06		 mov	 BYTE PTR [esi], al
  00012	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00015	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00018	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001b	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001e	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00021	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00024	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00027	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0002a	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 203  : 		if (size == 0)

  0002d	85 c0		 test	 eax, eax
  0002f	74 09		 je	 SHORT $LN7@ConstByteA
$LN8@ConstByteA:

; 204  : 			return NULLPTR;
; 205  : 
; 206  : #if CRYPTOPP_BOOL_ALIGN16
; 207  : 		// TODO: Does this need the test 'size*sizeof(T) >= 16'?
; 208  : 		if (T_Align16 && size)
; 209  : 			return reinterpret_cast<pointer>(AlignedAllocate(size*sizeof(T)));
; 210  : #endif
; 211  : 
; 212  : 		return reinterpret_cast<pointer>(UnalignedAllocate(size*sizeof(T)));

  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  00037	83 c4 04	 add	 esp, 4
$LN7@ConstByteA:

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  0003a	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 731  : 			CRYPTOPP_ASSERT((!t.m_ptr && !m_size) || (t.m_ptr && m_size));
; 732  : 			if (t.m_ptr) {memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, t.m_size*sizeof(T));}

  0003d	83 7f 18 00	 cmp	 DWORD PTR [edi+24], 0
  00041	74 5f		 je	 SHORT $LN20@ConstByteA
  00043	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00046	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h

; 46   :         if (_SourceSize == 0)

  00049	85 c9		 test	 ecx, ecx
  0004b	74 55		 je	 SHORT $LN20@ConstByteA

; 47   :         {
; 48   :             return 0;
; 49   :         }
; 50   : 
; 51   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  0004d	85 c0		 test	 eax, eax
  0004f	75 1a		 jne	 SHORT $LN13@ConstByteA
  00051	e8 00 00 00 00	 call	 __errno
  00056	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H

; 55   : 
; 56   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 57   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  0005c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00061	5f		 pop	 edi
  00062	8b c6		 mov	 eax, esi
  00064	5e		 pop	 esi
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN13@ConstByteA:

; 52   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  0006b	3b d1		 cmp	 edx, ecx
  0006d	72 17		 jb	 SHORT $LN15@ConstByteA

; 58   : 
; 59   :             // Unreachable, but required to suppress /analyze warnings:
; 60   :             return EINVAL;
; 61   :         }
; 62   :         memcpy(_Destination, _Source, _SourceSize);

  0006f	51		 push	 ecx
  00070	ff 77 18	 push	 DWORD PTR [edi+24]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _memcpy
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	8b c6		 mov	 eax, esi
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
$LN15@ConstByteA:

; 53   :         {
; 54   :             memset(_Destination, 0, _DestinationSize);

  00086	52		 push	 edx
  00087	6a 00		 push	 0
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _memset
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 
; 56   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 57   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  00092	e8 00 00 00 00	 call	 __errno
  00097	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  0009d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN20@ConstByteA:
  000a2	5f		 pop	 edi
  000a3	8b c6		 mov	 eax, esi
  000a5	5e		 pop	 esi
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z ENDP	; CryptoPP::ConstByteArrayParameter::ConstByteArrayParameter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
;	COMDAT ??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1ConstByteArrayParameter@CryptoPP@@QAE@XZ PROC	; CryptoPP::ConstByteArrayParameter::~ConstByteArrayParameter, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00023	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00026	8b fa		 mov	 edi, edx

; 569  : 	return b < a ? b : a;

  00028	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0002b	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0002e	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00030	52		 push	 edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00031	0f 42 c8	 cmovb	 ecx, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0003b	32 c0		 xor	 al, al
  0003d	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  0003f	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00044	83 c4 04	 add	 esp, 4
  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5f		 pop	 edi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1ConstByteArrayParameter@CryptoPP@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ConstByteArrayParameter@CryptoPP@@QAE@XZ ENDP	; CryptoPP::ConstByteArrayParameter::~ConstByteArrayParameter
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
;	COMDAT ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >, COMDAT
; _this$ = ecx

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	57		 push	 edi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00026	8b fa		 mov	 edi, edx

; 569  : 	return b < a ? b : a;

  00028	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002b	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  0002e	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00030	52		 push	 edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1310 : 	__stosb(reinterpret_cast<byte *>(reinterpret_cast<size_t>(p)), 0, n);

  00031	0f 42 c8	 cmovb	 ecx, eax
  00034	32 c0		 xor	 al, al
  00036	f3 aa		 rep stosb
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 235  : 		UnalignedDeallocate(ptr);

  00038	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  0003d	83 c4 04	 add	 esp, 4

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004a	59		 pop	 ecx
  0004b	5f		 pop	 edi
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
  00050	cc		 int	 3
  00051	cc		 int	 3
  00052	cc		 int	 3
  00053	cc		 int	 3
  00054	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ PROC ; CryptoPP::AdditiveCipherAbstractPolicy::GetOptimalBlockSize, COMDAT
; _this$ = ecx

; 123  : 	virtual unsigned int GetOptimalBlockSize() const {return GetBytesPerIteration();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 08	 jmp	 DWORD PTR [eax+8]
?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ ENDP ; CryptoPP::AdditiveCipherAbstractPolicy::GetOptimalBlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
;	COMDAT ??1AdditiveCipherAbstractPolicy@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1AdditiveCipherAbstractPolicy@CryptoPP@@UAE@XZ PROC	; CryptoPP::AdditiveCipherAbstractPolicy::~AdditiveCipherAbstractPolicy, COMDAT
; _this$ = ecx

; 106  : 	virtual ~AdditiveCipherAbstractPolicy() {}

  00000	c2 00 00	 ret	 0
??1AdditiveCipherAbstractPolicy@CryptoPP@@UAE@XZ ENDP	; CryptoPP::AdditiveCipherAbstractPolicy::~AdditiveCipherAbstractPolicy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z
_TEXT	SEGMENT
$T2 = -92						; size = 4
_iv$GSCopy$1$ = -88					; size = 4
_key$GSCopy$1$ = -84					; size = 4
_eAlgorithm$GSCopy$1$ = -80				; size = 4
_this$GSCopy$1$ = -76					; size = 4
$T3 = -72						; size = 4
$T4 = -65						; size = 1
_fileNamelower$ = -64					; size = 24
_extName$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rfileName$ = 8						; size = 4
_eAlgorithm$ = 12					; size = 4
_key$ = 16						; size = 4
_iv$ = 20						; size = 4
?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z PROC ; EterPackPolicy_CSHybridCrypt::GetPerFileCryptKey, COMDAT
; _this$ = ecx

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d b4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _eAlgorithm$[ebp]
  00030	8b 45 08	 mov	 eax, DWORD PTR _rfileName$[ebp]
  00033	89 4d b0	 mov	 DWORD PTR _eAlgorithm$GSCopy$1$[ebp], ecx
  00036	8b 4d 10	 mov	 ecx, DWORD PTR _key$[ebp]
  00039	89 4d ac	 mov	 DWORD PTR _key$GSCopy$1$[ebp], ecx
  0003c	8b 4d 14	 mov	 ecx, DWORD PTR _iv$[ebp]
  0003f	89 4d a8	 mov	 DWORD PTR _iv$GSCopy$1$[ebp], ecx

; 109  : #ifdef __THEMIDA__
; 110  : 	VM_START
; 111  : #endif
; 112  : 
; 113  : 	std::string fileNamelower = rfileName;

  00042	8d 4d c0	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 114  : 	stl_lowers(fileNamelower);

  0004b	8d 45 c0	 lea	 eax, DWORD PTR _fileNamelower$[ebp]
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers

; 51   : 	stl_lowers(rfileName);

  0005b	8d 45 c0	 lea	 eax, DWORD PTR _fileNamelower$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers

; 52   : 	return CFileNameHelper::GetExtension(rfileName);

  00064	8d 45 c0	 lea	 eax, DWORD PTR _fileNamelower$[ebp]
  00067	50		 push	 eax
  00068	8d 45 d8	 lea	 eax, DWORD PTR _extName$[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetExtension
  00071	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00074	83 7d ec 0f	 cmp	 DWORD PTR _extName$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00078	8d 45 d8	 lea	 eax, DWORD PTR _extName$[ebp]

; 426  :         if (_Large_mode_engaged()) {

  0007b	8b 7d d8	 mov	 edi, DWORD PTR _extName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h

; 496  :        const unsigned char * end = s + str.size();

  0007e	8b 75 e8	 mov	 esi, DWORD PTR _extName$[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00081	0f 47 c7	 cmova	 eax, edi
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h

; 496  :        const unsigned char * end = s + str.size();

  00084	03 f0		 add	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 116  : 	std::string extName = GetFileExt(fileNamelower);

  00086	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h

; 497  :        size_t h = 0;

  0008a	33 d2		 xor	 edx, edx

; 498  : 
; 499  :        while (s < end)

  0008c	3b c6		 cmp	 eax, esi
  0008e	73 10		 jae	 SHORT $LN94@GetPerFile
$LL171@GetPerFile:

; 500  :        {
; 501  :            h *= 16777619;
; 502  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00090	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00093	40		 inc	 eax
  00094	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  0009a	33 d1		 xor	 edx, ecx
  0009c	3b c6		 cmp	 eax, esi
  0009e	72 f0		 jb	 SHORT $LL171@GetPerFile
$LN94@GetPerFile:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 118  : 	TCSHybridCryptKeyMap::const_iterator cit = m_mapHybridCryptKey.find( stringhash().GetHash(extName));

  000a0	8b 4d b4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000a3	8d 45 b8	 lea	 eax, DWORD PTR $T3[ebp]
  000a6	50		 push	 eax
  000a7	8d 45 a4	 lea	 eax, DWORD PTR $T2[ebp]
  000aa	89 55 b8	 mov	 DWORD PTR $T3[ebp], edx
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?find@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::find
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  000b3	8b 30		 mov	 esi, DWORD PTR [eax]

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  000b5	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 120  : 	if( cit == m_mapHybridCryptKey.end() )

  000b7	75 06		 jne	 SHORT $LN8@GetPerFile
  000b9	c6 45 bf 00	 mov	 BYTE PTR $T4[ebp], 0
  000bd	eb 65		 jmp	 SHORT $LN12@GetPerFile
$LN8@GetPerFile:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000bf	83 7d d4 0f	 cmp	 DWORD PTR _fileNamelower$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  000c3	8d 45 c0	 lea	 eax, DWORD PTR _fileNamelower$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 126  : 	DWORD dwfileNameCrc = GetCRC32(fileNamelower.c_str(), fileNamelower.size());

  000c6	ff 75 d0	 push	 DWORD PTR _fileNamelower$[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000c9	0f 47 45 c0	 cmova	 eax, DWORD PTR _fileNamelower$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 126  : 	DWORD dwfileNameCrc = GetCRC32(fileNamelower.c_str(), fileNamelower.size());

  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  000d3	8b f8		 mov	 edi, eax

; 148  : 	return true;

  000d5	c6 45 bf 01	 mov	 BYTE PTR $T4[ebp], 1
  000d9	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  000de	83 c4 08	 add	 esp, 8
  000e1	f7 e7		 mul	 edi
  000e3	66 0f 6e c7	 movd	 xmm0, edi
  000e7	66 0f 70 d0 00	 pshufd	 xmm2, xmm0, 0
  000ec	0f 28 ca	 movaps	 xmm1, xmm2
  000ef	8b 45 b0	 mov	 eax, DWORD PTR _eAlgorithm$GSCopy$1$[ebp]
  000f2	d1 ea		 shr	 edx, 1
  000f4	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  000f7	2b f9		 sub	 edi, ecx
  000f9	8b 4d a8	 mov	 ecx, DWORD PTR _iv$GSCopy$1$[ebp]
  000fc	89 38		 mov	 DWORD PTR [eax], edi
  000fe	0f 10 46 0c	 movups	 xmm0, XMMWORD PTR [esi+12]
  00102	8b 45 ac	 mov	 eax, DWORD PTR _key$GSCopy$1$[ebp]
  00105	8b 7d d8	 mov	 edi, DWORD PTR _extName$[ebp]
  00108	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0010b	0f 10 46 1c	 movups	 xmm0, XMMWORD PTR [esi+28]
  0010f	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00112	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00115	0f 57 c8	 xorps	 xmm1, xmm0
  00118	0f 11 08	 movups	 XMMWORD PTR [eax], xmm1
  0011b	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0011e	0f 57 c2	 xorps	 xmm0, xmm2
  00121	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
$LN12@GetPerFile:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00124	8b 45 ec	 mov	 eax, DWORD PTR _extName$[ebp+20]
  00127	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0012a	76 27		 jbe	 SHORT $LN33@GetPerFile

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0012c	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012f	8b c7		 mov	 eax, edi

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00131	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00137	72 10		 jb	 SHORT $LN44@GetPerFile

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00139	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
  0013c	83 c1 23	 add	 ecx, 35			; 00000023H
  0013f	2b c7		 sub	 eax, edi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00141	83 c0 fc	 add	 eax, -4			; fffffffcH
  00144	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00147	77 6c		 ja	 SHORT $LN79@GetPerFile
$LN44@GetPerFile:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00149	51		 push	 ecx
  0014a	57		 push	 edi
  0014b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00150	83 c4 08	 add	 esp, 8
$LN33@GetPerFile:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00153	8b 4d d4	 mov	 ecx, DWORD PTR _fileNamelower$[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  00156	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _extName$[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0015d	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _extName$[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00164	c6 45 d8 00	 mov	 BYTE PTR _extName$[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  00168	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0016b	76 28		 jbe	 SHORT $LN71@GetPerFile
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0016d	8b 55 c0	 mov	 edx, DWORD PTR _fileNamelower$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00170	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00171	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00173	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00179	72 10		 jb	 SHORT $LN82@GetPerFile

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0017b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0017e	83 c1 23	 add	 ecx, 35			; 00000023H
  00181	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00183	83 c0 fc	 add	 eax, -4			; fffffffcH
  00186	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00189	77 2a		 ja	 SHORT $LN79@GetPerFile
$LN82@GetPerFile:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0018b	51		 push	 ecx
  0018c	52		 push	 edx
  0018d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00192	83 c4 08	 add	 esp, 8
$LN71@GetPerFile:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 148  : 	return true;

  00195	8a 45 bf	 mov	 al, BYTE PTR $T4[ebp]

; 149  : }

  00198	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0019b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a2	59		 pop	 ecx
  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a8	33 cd		 xor	 ecx, ebp
  001aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001af	8b e5		 mov	 esp, ebp
  001b1	5d		 pop	 ebp
  001b2	c2 10 00	 ret	 16			; 00000010H
$LN79@GetPerFile:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN184@GetPerFile:
  001ba	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR _extName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z ENDP ; EterPackPolicy_CSHybridCrypt::GetPerFileCryptKey
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_k$ = 8							; size = 4
??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[], COMDAT
; _this$ = ecx

; 1865 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1866 :       return table_.try_emplace_unique(k).first->second;

  00006	8d 45 f8	 lea	 eax, DWORD PTR $T1[ebp]
  00009	ff 75 08	 push	 DWORD PTR _k$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
  00012	8b 00		 mov	 eax, DWORD PTR [eax]
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH

; 1867 :     }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ?find@?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
?find@?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::find, COMDAT
; _this$ = ecx

; 1803 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00006	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00009	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0000c	83 e0 01	 and	 eax, 1
  0000f	03 d0		 add	 edx, eax

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00011	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00014	f7 da		 neg	 edx
  00016	1b d2		 sbb	 edx, edx
  00018	23 d0		 and	 edx, eax
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  0001d	52		 push	 edx
  0001e	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0001f	ff 30		 push	 DWORD PTR [eax]
  00021	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
  00026	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 2371 :           : node_(static_cast<node_pointer>(x))

  00031	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00034	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2371 :           : node_(static_cast<node_pointer>(x))

  00035	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00037	8b c1		 mov	 eax, ecx

; 1805 :     }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?find@?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >, COMDAT
; _this$ = ecx

; 1645 :     {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	57		 push	 edi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3345 :           if (buckets_) {

  00004	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  00007	85 ff		 test	 edi, edi
  00009	74 6d		 je	 SHORT $LN12@unordered_

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 3346 :             node_pointer n = static_cast<node_pointer>(

  0000e	8b 3c 87	 mov	 edi, DWORD PTR [edi+eax*4]

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00011	85 ff		 test	 edi, edi
  00013	74 1d		 je	 SHORT $LN91@unordered_
  00015	56		 push	 esi
$LL10@unordered_:

; 3357 :               node_pointer next = next_node(n);

  00016	8b 37		 mov	 esi, DWORD PTR [edi]

; 3337 :           BOOST_UNORDERED_CALL_DESTROY(

  00018	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  0001b	e8 00 00 00 00	 call	 ??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00020	6a 30		 push	 48			; 00000030H
  00022	57		 push	 edi
  00023	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00028	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3359 :               n = next;

  0002b	8b fe		 mov	 edi, esi
  0002d	85 f6		 test	 esi, esi
  0002f	75 e5		 jne	 SHORT $LL10@unordered_

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00031	5e		 pop	 esi
$LN91@unordered_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 723  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00032	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00035	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+4]
  0003c	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0003f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00045	72 12		 jb	 SHORT $LN111@unordered_

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00047	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0004a	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00052	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00055	77 24		 ja	 SHORT $LN108@unordered_

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b c2		 mov	 eax, edx
$LN111@unordered_:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00059	51		 push	 ecx
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00060	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3363 :             buckets_ = bucket_pointer();

  00063	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 3364 :             max_load_ = 0;

  0006a	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 3365 :             size_ = 0;

  00071	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN12@unordered_:
  00078	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1646 :     }

  00079	5b		 pop	 ebx
  0007a	c3		 ret	 0
$LN108@unordered_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN131@unordered_:
  00080	cc		 int	 3
??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_num_buckets$ = 8					; size = 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl, COMDAT
; _this$ = ecx

; 4577 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 4578 :         BOOST_ASSERT(this->buckets_);
; 4579 : 
; 4580 :         this->create_buckets(num_buckets);

  00006	ff 75 08	 push	 DWORD PTR _num_buckets$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0000e	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00013	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00016	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00019	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0001c	8d 1c 88	 lea	 ebx, DWORD PTR [eax+ecx*4]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  0001f	85 ff		 test	 edi, edi
  00021	74 77		 je	 SHORT $LN3@rehash_imp
  00023	56		 push	 esi
$LL2@rehash_imp:
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00024	ff 77 08	 push	 DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4585 :             node_pointer n = next_node(prev);

  00027	8b f7		 mov	 esi, edi
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00029	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00031	33 d2		 xor	 edx, edx
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00033	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  00036	f7 71 04	 div	 DWORD PTR [ecx+4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00039	8b c2		 mov	 eax, edx
  0003b	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00040	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  00043	8b 07		 mov	 eax, DWORD PTR [edi]

; 4596 :               if (!next || next->is_first_in_group()) {

  00045	85 c0		 test	 eax, eax
  00047	74 27		 je	 SHORT $LN53@rehash_imp
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@rehash_imp:

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00056	f7 d1		 not	 ecx
  00058	f6 c1 01	 test	 cl, 1

; 4596 :               if (!next || next->is_first_in_group()) {

  0005b	75 13		 jne	 SHORT $LN53@rehash_imp

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  0005d	8b ca		 mov	 ecx, edx

; 4597 :                 break;
; 4598 :               }
; 4599 :               n = next;

  0005f	8b f0		 mov	 esi, eax

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  00061	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  00067	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  0006a	8b 00		 mov	 eax, DWORD PTR [eax]

; 4596 :               if (!next || next->is_first_in_group()) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 e0		 jne	 SHORT $LL6@rehash_imp
$LN53@rehash_imp:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00073	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00076	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]

; 4600 :               n->bucket_info_ = bucket_index;
; 4601 :               n->reset_first_in_group();
; 4602 :             }
; 4603 : 
; 4604 :             // n is now the last node in the group
; 4605 :             bucket_pointer b = this->get_bucket_pointer(bucket_index);
; 4606 :             if (!b->next_) {

  00079	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007b	85 c0		 test	 eax, eax
  0007d	75 08		 jne	 SHORT $LN12@rehash_imp

; 4607 :               b->next_ = prev;

  0007f	89 19		 mov	 DWORD PTR [ecx], ebx

; 4608 :               prev = n;

  00081	8b de		 mov	 ebx, esi
  00083	8b 3e		 mov	 edi, DWORD PTR [esi]

; 4609 :             } else {

  00085	eb 0e		 jmp	 SHORT $LN13@rehash_imp
$LN12@rehash_imp:

; 4610 :               link_pointer next = n->next_;
; 4611 :               n->next_ = b->next_->next_;

  00087	8b 00		 mov	 eax, DWORD PTR [eax]
  00089	8b 3e		 mov	 edi, DWORD PTR [esi]
  0008b	89 06		 mov	 DWORD PTR [esi], eax

; 4612 :               b->next_->next_ = prev->next_;

  0008d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00091	89 01		 mov	 DWORD PTR [ecx], eax

; 4613 :               prev->next_ = next;

  00093	89 3b		 mov	 DWORD PTR [ebx], edi
$LN13@rehash_imp:

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00095	85 ff		 test	 edi, edi
  00097	75 8b		 jne	 SHORT $LL2@rehash_imp
  00099	5e		 pop	 esi
$LN3@rehash_imp:
  0009a	5f		 pop	 edi

; 4614 :             }
; 4615 :           }
; 4616 :         }
; 4617 :         BOOST_CATCH(...)
; 4618 :         {
; 4619 :           node_pointer n = next_node(prev);
; 4620 :           prev->next_ = node_pointer();
; 4621 :           while (n) {
; 4622 :             node_pointer next = next_node(n);
; 4623 :             destroy_node(n);
; 4624 :             --size_;
; 4625 :             n = next;
; 4626 :           }
; 4627 :           BOOST_RETHROW
; 4628 :         }
; 4629 :         BOOST_CATCH_END
; 4630 :       }

  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_f$ = -8						; size = 8
tv524 = -8						; size = 8
_new_count$ = 8						; size = 4
_dummy_node$1$ = 8					; size = 4
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets, COMDAT
; _this$ = ecx

; 3178 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3179 :           link_pointer dummy_node;
; 3180 : 
; 3181 :           // Construct the new buckets and dummy node, and destroy the old
; 3182 :           // buckets
; 3183 :           if (buckets_) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _new_count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00011	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00014	85 d2		 test	 edx, edx
  00016	74 74		 je	 SHORT $LN5@create_buc

; 3184 :             dummy_node =

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001e	89 45 08	 mov	 DWORD PTR _dummy_node$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00021	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00027	0f 87 25 01 00
	00		 ja	 $LN107@create_buc

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0002d	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 227  :     if (_Bytes == 0) {

  00034	85 c0		 test	 eax, eax
  00036	75 04		 jne	 SHORT $LN30@create_buc

; 228  :         return nullptr;

  00038	33 f6		 xor	 esi, esi
  0003a	eb 19		 jmp	 SHORT $LN29@create_buc
$LN30@create_buc:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0003c	50		 push	 eax
  0003d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00042	72 07		 jb	 SHORT $LN31@create_buc

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00044	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00049	eb 05		 jmp	 SHORT $LN121@create_buc
$LN31@create_buc:

; 136  :         return ::operator new(_Bytes);

  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@create_buc:

; 723  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
$LN29@create_buc:
  00055	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00058	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+4]
  0005f	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00062	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00068	72 16		 jb	 SHORT $LN59@create_buc

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0006a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00070	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00072	83 c0 fc	 add	 eax, -4			; fffffffcH
  00075	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00078	0f 87 cf 00 00
	00		 ja	 $LN56@create_buc

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0007e	8b c2		 mov	 eax, edx
$LN59@create_buc:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00080	51		 push	 ecx
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00087	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3189 :             buckets_ = new_buckets;

  0008a	eb 3b		 jmp	 SHORT $LN93@create_buc
$LN5@create_buc:

; 3190 :           } else if (bucket::extra_node) {
; 3191 :             node_constructor a(node_alloc());
; 3192 :             a.create_node();
; 3193 :             buckets_ =
; 3194 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3195 :             dummy_node = a.release();
; 3196 :           } else {
; 3197 :             dummy_node = link_pointer();

  0008c	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _dummy_node$1$[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00093	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00099	0f 87 b3 00 00
	00		 ja	 $LN107@create_buc

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0009f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 227  :     if (_Bytes == 0) {

  000a6	85 c0		 test	 eax, eax
  000a8	75 04		 jne	 SHORT $LN94@create_buc

; 228  :         return nullptr;

  000aa	33 f6		 xor	 esi, esi
  000ac	eb 19		 jmp	 SHORT $LN93@create_buc
$LN94@create_buc:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ae	50		 push	 eax
  000af	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b4	72 07		 jb	 SHORT $LN95@create_buc

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000bb	eb 05		 jmp	 SHORT $LN122@create_buc
$LN95@create_buc:

; 136  :         return ::operator new(_Bytes);

  000bd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN122@create_buc:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3203 :           bucket_count_ = new_count;

  000c2	8b f0		 mov	 esi, eax
  000c4	83 c4 04	 add	 esp, 4
$LN93@create_buc:
  000c7	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000ca	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000cd	85 f6		 test	 esi, esi
  000cf	74 55		 je	 SHORT $LN17@create_buc
  000d1	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  000d6	0f 57 c0	 xorps	 xmm0, xmm0
  000d9	f2 0f 2a c3	 cvtsi2sd xmm0, ebx
  000dd	8b c3		 mov	 eax, ebx
  000df	83 ec 08	 sub	 esp, 8
  000e2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e5	0f 5a c9	 cvtps2pd xmm1, xmm1
  000e8	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000f1	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000f5	f2 0f 11 4d f8	 movsd	 QWORD PTR tv524[ebp], xmm1
  000fa	dd 45 f8	 fld	 QWORD PTR tv524[ebp]
  000fd	dd 1c 24	 fstp	 QWORD PTR [esp]
  00100	e8 00 00 00 00	 call	 _ceil
  00105	dd 5d f8	 fstp	 QWORD PTR _f$[ebp]

; 2893 :         return f >= static_cast<double>(

  00108	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _f$[ebp]

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  0010d	83 c4 08	 add	 esp, 8

; 2893 :         return f >= static_cast<double>(

  00110	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  00118	72 05		 jb	 SHORT $LN21@create_buc
  0011a	83 c8 ff	 or	 eax, -1
  0011d	eb 09		 jmp	 SHORT $LN18@create_buc
$LN21@create_buc:
  0011f	e8 00 00 00 00	 call	 __dtol3

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  00124	eb 02		 jmp	 SHORT $LN18@create_buc
$LN17@create_buc:
  00126	33 c0		 xor	 eax, eax
$LN18@create_buc:
  00128	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 3204 :           recalculate_max_load();
; 3205 : 
; 3206 :           bucket_pointer end =

  0012b	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  0012e	3b f0		 cmp	 esi, eax
  00130	74 0d		 je	 SHORT $LN3@create_buc
$LL4@create_buc:

; 2579 :         ptr_bucket() : next_(0) {}

  00132	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  00138	83 c6 04	 add	 esi, 4
  0013b	3b f0		 cmp	 esi, eax
  0013d	75 f3		 jne	 SHORT $LL4@create_buc
$LN3@create_buc:

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  0013f	8b 4d 08	 mov	 ecx, DWORD PTR _dummy_node$1$[ebp]
  00142	5f		 pop	 edi

; 3212 :         }

  00143	5e		 pop	 esi

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  00144	89 08		 mov	 DWORD PTR [eax], ecx

; 3212 :         }

  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 04 00	 ret	 4
$LN56@create_buc:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN107@create_buc:

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00152	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@create_buc:
  00157	cc		 int	 3
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z
_TEXT	SEGMENT
tv80 = -8						; size = 8
tv132 = -8						; size = 8
_size$ = 8						; size = 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size, COMDAT
; _this$ = ecx

; 3095 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00006	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00009	83 ec 08	 sub	 esp, 8
  0000c	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	66 0f 6e c8	 movd	 xmm1, eax
  00018	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0001c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001f	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00028	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0002c	f2 0f 11 4d f8	 movsd	 QWORD PTR tv132[ebp], xmm1
  00031	dd 45 f8	 fld	 QWORD PTR tv132[ebp]
  00034	dd 1c 24	 fstp	 QWORD PTR [esp]
  00037	e8 00 00 00 00	 call	 _floor
  0003c	dd 5d f8	 fstp	 QWORD PTR tv80[ebp]
  0003f	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv80[ebp]
  00044	83 c4 08	 add	 esp, 8
  00047	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000

; 2893 :         return f >= static_cast<double>(

  0004f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  00057	72 12		 jb	 SHORT $LN5@min_bucket
  00059	83 c8 ff	 or	 eax, -1

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00062	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN5@min_bucket:

; 2893 :         return f >= static_cast<double>(

  0006b	e8 00 00 00 00	 call	 __dtol3

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00076	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ
_TEXT	SEGMENT
??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ PROC ; EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo::~SSupplementaryDataBlockInfo, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00006	85 c0		 test	 eax, eax
  00008	74 3e		 je	 SHORT $LN8@SSupplemen

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0000d	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN27@SSupplemen

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 63		 ja	 SHORT $LN61@SSupplemen

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN27@SSupplemen:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00030	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00037	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 2082 :             _Myend   = nullptr;

  00041	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN8@SSupplemen:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00048	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0004b	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0004e	76 27		 jbe	 SHORT $LN53@SSupplemen
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00050	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00052	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00053	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00059	72 12		 jb	 SHORT $LN64@SSupplemen

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00061	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00063	83 c0 fc	 add	 eax, -4			; fffffffcH
  00066	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00069	77 1f		 ja	 SHORT $LN61@SSupplemen

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006b	8b c2		 mov	 eax, edx
$LN64@SSupplemen:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006d	51		 push	 ecx
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00074	83 c4 08	 add	 esp, 8
$LN53@SSupplemen:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00077	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0007e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00085	c6 06 00	 mov	 BYTE PTR [esi], 0
  00088	5e		 pop	 esi
  00089	c3		 ret	 0
$LN61@SSupplemen:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@SSupplemen:
  0008f	cc		 int	 3
??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ ENDP ; EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo::~SSupplementaryDataBlockInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Change_array, COMDAT
; _this$ = ecx

; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 29		 je	 SHORT $LN10@Change_arr

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN21@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 26		 ja	 SHORT $LN18@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN21@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
$LN10@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2060 :         _Myfirst = _Newvec;

  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00038	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003b	03 c1		 add	 eax, ecx
  0003d	89 0e		 mov	 DWORD PTR [esi], ecx
  0003f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00042	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00045	03 c1		 add	 eax, ecx
  00047	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004a	5e		 pop	 esi

; 2064 :     }

  0004b	5d		 pop	 ebp
  0004c	c2 0c 00	 ret	 12			; 0000000cH
$LN18@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Change_arr:
  00054	cc		 int	 3
?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Oldsize$1$ = -8					; size = 4
tv559 = -4						; size = 4
__Newsize$ = 8						; size = 4
$T1 = 8							; size = 4
?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::resize, COMDAT
; _this$ = ecx

; 1613 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	57		 push	 edi

; 1581 :         if (_Newsize < _Oldsize) { // trim

  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000d	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00010	8b ca		 mov	 ecx, edx
  00012	8b 03		 mov	 eax, DWORD PTR [ebx]
  00014	2b c8		 sub	 ecx, eax
  00016	89 4d f8	 mov	 DWORD PTR __Oldsize$1$[ebp], ecx
  00019	3b f9		 cmp	 edi, ecx
  0001b	73 0d		 jae	 SHORT $LN4@resize

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  0001d	03 c7		 add	 eax, edi
  0001f	5f		 pop	 edi

; 1583 :             _Orphan_range(_Newlast, _Mylast);
; 1584 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1585 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1586 :             _Mylast = _Newlast;

  00020	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1614 :         // trim or append value-initialized elements, provide strong guarantee
; 1615 :         _Resize(_Newsize, _Value_init_tag{});
; 1616 :     }

  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN4@resize:

; 1590 :         if (_Newsize > _Oldsize) { // append

  0002a	0f 86 a3 00 00
	00		 jbe	 $LN5@resize

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00030	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00033	2b c8		 sub	 ecx, eax
  00035	56		 push	 esi

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  00036	3b f9		 cmp	 edi, ecx
  00038	0f 86 84 00 00
	00		 jbe	 $LN6@resize

; 1538 :         if (_Newsize > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN105@resize

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004a	8b d1		 mov	 edx, ecx
  0004c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00051	d1 ea		 shr	 edx, 1
  00053	2b c2		 sub	 eax, edx
  00055	3b c8		 cmp	 ecx, eax
  00057	76 0d		 jbe	 SHORT $LN13@resize

; 1997 :             return _Max; // geometric growth would overflow

  00059	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00064	eb 23		 jmp	 SHORT $LN103@resize
$LN13@resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00066	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00069	3b f7		 cmp	 esi, edi
  0006b	0f 42 f7	 cmovb	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0006e	8b c6		 mov	 eax, esi
  00070	85 f6		 test	 esi, esi
  00072	74 18		 je	 SHORT $LN102@resize
$LN24@resize:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00074	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00079	72 08		 jb	 SHORT $LN25@resize

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	56		 push	 esi
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	eb 06		 jmp	 SHORT $LN103@resize
$LN25@resize:

; 136  :         return ::operator new(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN103@resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00089	83 c4 04	 add	 esp, 4
$LN102@resize:
  0008c	8b 4d f8	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]
  0008f	03 c8		 add	 ecx, eax
  00091	89 45 08	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);

  00094	03 c7		 add	 eax, edi
  00096	50		 push	 eax
  00097	51		 push	 ecx
  00098	e8 00 00 00 00	 call	 ??$_Zero_range@PAE@std@@YAPAEQAE0@Z ; std::_Zero_range<unsigned char *>

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  0009d	ff 75 08	 push	 DWORD PTR $T1[ebp]
  000a0	ff 73 04	 push	 DWORD PTR [ebx+4]
  000a3	ff 33		 push	 DWORD PTR [ebx]
  000a5	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z ; std::_Copy_memmove<unsigned char *,unsigned char *>
  000aa	83 c4 14	 add	 esp, 20			; 00000014H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1570 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000ad	8b cb		 mov	 ecx, ebx
  000af	56		 push	 esi
  000b0	57		 push	 edi
  000b1	ff 75 08	 push	 DWORD PTR $T1[ebp]
  000b4	e8 00 00 00 00	 call	 ?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Change_array
  000b9	5e		 pop	 esi
  000ba	5f		 pop	 edi

; 1614 :         // trim or append value-initialized elements, provide strong guarantee
; 1615 :         _Resize(_Newsize, _Value_init_tag{});
; 1616 :     }

  000bb	5b		 pop	 ebx
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 04 00	 ret	 4
$LN6@resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);

  000c2	8d 34 38	 lea	 esi, DWORD PTR [eax+edi]
  000c5	56		 push	 esi
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 ??$_Zero_range@PAE@std@@YAPAEQAE0@Z ; std::_Zero_range<unsigned char *>
  000cc	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  000cf	89 73 04	 mov	 DWORD PTR [ebx+4], esi
  000d2	5e		 pop	 esi
$LN5@resize:
  000d3	5f		 pop	 edi

; 1614 :         // trim or append value-initialized elements, provide strong guarantee
; 1615 :         _Resize(_Newsize, _Value_init_tag{});
; 1616 :     }

  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 04 00	 ret	 4
$LN105@resize:

; 1539 :             _Xlength();

  000db	e8 00 00 00 00	 call	 ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
$LN101@resize:
  000e0	cc		 int	 3
?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??A?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@ABK@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
_k$ = 8							; size = 4
??A?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@ABK@Z PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::operator[], COMDAT
; _this$ = ecx

; 1865 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1866 :       return table_.try_emplace_unique(k).first->second;

  00006	8d 45 f8	 lea	 eax, DWORD PTR $T1[ebp]
  00009	ff 75 08	 push	 DWORD PTR _k$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
  00012	8b 00		 mov	 eax, DWORD PTR [eax]
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH

; 1867 :     }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??A?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@ABK@Z ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ?find@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
?find@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::find, COMDAT
; _this$ = ecx

; 1803 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00006	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00009	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0000c	83 e0 01	 and	 eax, 1
  0000f	03 d0		 add	 edx, eax

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00011	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00014	f7 da		 neg	 edx
  00016	1b d2		 sbb	 edx, edx
  00018	23 d0		 and	 edx, eax
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  0001d	52		 push	 edx
  0001e	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0001f	ff 30		 push	 DWORD PTR [eax]
  00021	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
  00026	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 2371 :           : node_(static_cast<node_pointer>(x))

  00031	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00034	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2371 :           : node_(static_cast<node_pointer>(x))

  00035	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00037	8b c1		 mov	 eax, ecx

; 1805 :     }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?find@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ?clear@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
?clear@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEXXZ PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::clear, COMDAT
; _this$ = ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4516 :         if (size_) {

  00000	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00004	74 42		 je	 SHORT $LN54@clear

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00006	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00009	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000c	8d 14 90	 lea	 edx, DWORD PTR [eax+edx*4]

; 4518 :           for (bucket_pointer it = buckets_; it != end; ++it) {

  0000f	3b c2		 cmp	 eax, edx
  00011	74 0d		 je	 SHORT $LN6@clear
$LL7@clear:

; 4519 :             it->next_ = node_pointer();

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00019	83 c0 04	 add	 eax, 4
  0001c	3b c2		 cmp	 eax, edx
  0001e	75 f3		 jne	 SHORT $LL7@clear
$LN6@clear:

; 4520 :           }
; 4521 : 
; 4522 :           link_pointer prev = end->first_from_start();
; 4523 :           node_pointer n = next_node(prev);

  00020	8b 02		 mov	 eax, DWORD PTR [edx]

; 4524 :           prev->next_ = node_pointer();

  00022	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 4525 :           size_ = 0;

  00028	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 4526 : 
; 4527 :           while (n) {

  0002f	85 c0		 test	 eax, eax
  00031	74 15		 je	 SHORT $LN54@clear
  00033	56		 push	 esi
$LL8@clear:

; 4528 :             node_pointer next = next_node(n);

  00034	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00036	6a 2c		 push	 44			; 0000002cH
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4530 :             n = next;

  00041	8b c6		 mov	 eax, esi
  00043	85 f6		 test	 esi, esi
  00045	75 ed		 jne	 SHORT $LL8@clear

; 4526 : 
; 4527 :           while (n) {

  00047	5e		 pop	 esi
$LN54@clear:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 722  :       void clear() BOOST_NOEXCEPT { table_.clear_impl(); }

  00048	c3		 ret	 0
?clear@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEXXZ ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >, COMDAT
; _this$ = ecx

; 1645 :     {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3345 :           if (buckets_) {

  00003	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00006	85 c9		 test	 ecx, ecx
  00008	74 65		 je	 SHORT $LN12@unordered_

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 3346 :             node_pointer n = static_cast<node_pointer>(

  0000d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN80@unordered_
  00014	56		 push	 esi
$LL10@unordered_:

; 3357 :               node_pointer next = next_node(n);

  00015	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 2c		 push	 44			; 0000002cH
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3359 :               n = next;

  00022	8b c6		 mov	 eax, esi
  00024	85 f6		 test	 esi, esi
  00026	75 ed		 jne	 SHORT $LL10@unordered_

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00028	5e		 pop	 esi
$LN80@unordered_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 723  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00029	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002c	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+4]
  00033	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00036	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003c	72 12		 jb	 SHORT $LN100@unordered_

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00041	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00044	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00046	83 c0 fc	 add	 eax, -4			; fffffffcH
  00049	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004c	77 23		 ja	 SHORT $LN97@unordered_

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004e	8b c2		 mov	 eax, edx
$LN100@unordered_:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00050	51		 push	 ecx
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00057	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3363 :             buckets_ = bucket_pointer();

  0005a	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 3364 :             max_load_ = 0;

  00061	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3365 :             size_ = 0;

  00068	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN12@unordered_:
  0006f	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1646 :     }

  00070	c3		 ret	 0
$LN97@unordered_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00071	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN120@unordered_:
  00076	cc		 int	 3
??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_num_buckets$ = 8					; size = 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl, COMDAT
; _this$ = ecx

; 4577 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 4578 :         BOOST_ASSERT(this->buckets_);
; 4579 : 
; 4580 :         this->create_buckets(num_buckets);

  00006	ff 75 08	 push	 DWORD PTR _num_buckets$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0000e	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00013	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00016	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00019	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0001c	8d 1c 88	 lea	 ebx, DWORD PTR [eax+ecx*4]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  0001f	85 ff		 test	 edi, edi
  00021	74 77		 je	 SHORT $LN3@rehash_imp
  00023	56		 push	 esi
$LL2@rehash_imp:
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00024	ff 77 08	 push	 DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4585 :             node_pointer n = next_node(prev);

  00027	8b f7		 mov	 esi, edi
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00029	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00031	33 d2		 xor	 edx, edx
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00033	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  00036	f7 71 04	 div	 DWORD PTR [ecx+4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00039	8b c2		 mov	 eax, edx
  0003b	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00040	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  00043	8b 07		 mov	 eax, DWORD PTR [edi]

; 4596 :               if (!next || next->is_first_in_group()) {

  00045	85 c0		 test	 eax, eax
  00047	74 27		 je	 SHORT $LN53@rehash_imp
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@rehash_imp:

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00056	f7 d1		 not	 ecx
  00058	f6 c1 01	 test	 cl, 1

; 4596 :               if (!next || next->is_first_in_group()) {

  0005b	75 13		 jne	 SHORT $LN53@rehash_imp

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  0005d	8b ca		 mov	 ecx, edx

; 4597 :                 break;
; 4598 :               }
; 4599 :               n = next;

  0005f	8b f0		 mov	 esi, eax

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  00061	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  00067	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  0006a	8b 00		 mov	 eax, DWORD PTR [eax]

; 4596 :               if (!next || next->is_first_in_group()) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 e0		 jne	 SHORT $LL6@rehash_imp
$LN53@rehash_imp:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00073	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00076	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]

; 4600 :               n->bucket_info_ = bucket_index;
; 4601 :               n->reset_first_in_group();
; 4602 :             }
; 4603 : 
; 4604 :             // n is now the last node in the group
; 4605 :             bucket_pointer b = this->get_bucket_pointer(bucket_index);
; 4606 :             if (!b->next_) {

  00079	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007b	85 c0		 test	 eax, eax
  0007d	75 08		 jne	 SHORT $LN12@rehash_imp

; 4607 :               b->next_ = prev;

  0007f	89 19		 mov	 DWORD PTR [ecx], ebx

; 4608 :               prev = n;

  00081	8b de		 mov	 ebx, esi
  00083	8b 3e		 mov	 edi, DWORD PTR [esi]

; 4609 :             } else {

  00085	eb 0e		 jmp	 SHORT $LN13@rehash_imp
$LN12@rehash_imp:

; 4610 :               link_pointer next = n->next_;
; 4611 :               n->next_ = b->next_->next_;

  00087	8b 00		 mov	 eax, DWORD PTR [eax]
  00089	8b 3e		 mov	 edi, DWORD PTR [esi]
  0008b	89 06		 mov	 DWORD PTR [esi], eax

; 4612 :               b->next_->next_ = prev->next_;

  0008d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00091	89 01		 mov	 DWORD PTR [ecx], eax

; 4613 :               prev->next_ = next;

  00093	89 3b		 mov	 DWORD PTR [ebx], edi
$LN13@rehash_imp:

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00095	85 ff		 test	 edi, edi
  00097	75 8b		 jne	 SHORT $LL2@rehash_imp
  00099	5e		 pop	 esi
$LN3@rehash_imp:
  0009a	5f		 pop	 edi

; 4614 :             }
; 4615 :           }
; 4616 :         }
; 4617 :         BOOST_CATCH(...)
; 4618 :         {
; 4619 :           node_pointer n = next_node(prev);
; 4620 :           prev->next_ = node_pointer();
; 4621 :           while (n) {
; 4622 :             node_pointer next = next_node(n);
; 4623 :             destroy_node(n);
; 4624 :             --size_;
; 4625 :             n = next;
; 4626 :           }
; 4627 :           BOOST_RETHROW
; 4628 :         }
; 4629 :         BOOST_CATCH_END
; 4630 :       }

  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_f$ = -8						; size = 8
tv524 = -8						; size = 8
_new_count$ = 8						; size = 4
_dummy_node$1$ = 8					; size = 4
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets, COMDAT
; _this$ = ecx

; 3178 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3179 :           link_pointer dummy_node;
; 3180 : 
; 3181 :           // Construct the new buckets and dummy node, and destroy the old
; 3182 :           // buckets
; 3183 :           if (buckets_) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _new_count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00011	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00014	85 d2		 test	 edx, edx
  00016	74 74		 je	 SHORT $LN5@create_buc

; 3184 :             dummy_node =

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001e	89 45 08	 mov	 DWORD PTR _dummy_node$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00021	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00027	0f 87 25 01 00
	00		 ja	 $LN107@create_buc

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0002d	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 227  :     if (_Bytes == 0) {

  00034	85 c0		 test	 eax, eax
  00036	75 04		 jne	 SHORT $LN30@create_buc

; 228  :         return nullptr;

  00038	33 f6		 xor	 esi, esi
  0003a	eb 19		 jmp	 SHORT $LN29@create_buc
$LN30@create_buc:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0003c	50		 push	 eax
  0003d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00042	72 07		 jb	 SHORT $LN31@create_buc

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00044	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00049	eb 05		 jmp	 SHORT $LN121@create_buc
$LN31@create_buc:

; 136  :         return ::operator new(_Bytes);

  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@create_buc:

; 723  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
$LN29@create_buc:
  00055	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00058	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+4]
  0005f	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00062	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00068	72 16		 jb	 SHORT $LN59@create_buc

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0006a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00070	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00072	83 c0 fc	 add	 eax, -4			; fffffffcH
  00075	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00078	0f 87 cf 00 00
	00		 ja	 $LN56@create_buc

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0007e	8b c2		 mov	 eax, edx
$LN59@create_buc:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00080	51		 push	 ecx
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00087	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3189 :             buckets_ = new_buckets;

  0008a	eb 3b		 jmp	 SHORT $LN93@create_buc
$LN5@create_buc:

; 3190 :           } else if (bucket::extra_node) {
; 3191 :             node_constructor a(node_alloc());
; 3192 :             a.create_node();
; 3193 :             buckets_ =
; 3194 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3195 :             dummy_node = a.release();
; 3196 :           } else {
; 3197 :             dummy_node = link_pointer();

  0008c	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _dummy_node$1$[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00093	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00099	0f 87 b3 00 00
	00		 ja	 $LN107@create_buc

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0009f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 227  :     if (_Bytes == 0) {

  000a6	85 c0		 test	 eax, eax
  000a8	75 04		 jne	 SHORT $LN94@create_buc

; 228  :         return nullptr;

  000aa	33 f6		 xor	 esi, esi
  000ac	eb 19		 jmp	 SHORT $LN93@create_buc
$LN94@create_buc:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ae	50		 push	 eax
  000af	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b4	72 07		 jb	 SHORT $LN95@create_buc

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000bb	eb 05		 jmp	 SHORT $LN122@create_buc
$LN95@create_buc:

; 136  :         return ::operator new(_Bytes);

  000bd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN122@create_buc:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3203 :           bucket_count_ = new_count;

  000c2	8b f0		 mov	 esi, eax
  000c4	83 c4 04	 add	 esp, 4
$LN93@create_buc:
  000c7	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000ca	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000cd	85 f6		 test	 esi, esi
  000cf	74 55		 je	 SHORT $LN17@create_buc
  000d1	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  000d6	0f 57 c0	 xorps	 xmm0, xmm0
  000d9	f2 0f 2a c3	 cvtsi2sd xmm0, ebx
  000dd	8b c3		 mov	 eax, ebx
  000df	83 ec 08	 sub	 esp, 8
  000e2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e5	0f 5a c9	 cvtps2pd xmm1, xmm1
  000e8	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000f1	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000f5	f2 0f 11 4d f8	 movsd	 QWORD PTR tv524[ebp], xmm1
  000fa	dd 45 f8	 fld	 QWORD PTR tv524[ebp]
  000fd	dd 1c 24	 fstp	 QWORD PTR [esp]
  00100	e8 00 00 00 00	 call	 _ceil
  00105	dd 5d f8	 fstp	 QWORD PTR _f$[ebp]

; 2893 :         return f >= static_cast<double>(

  00108	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _f$[ebp]

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  0010d	83 c4 08	 add	 esp, 8

; 2893 :         return f >= static_cast<double>(

  00110	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  00118	72 05		 jb	 SHORT $LN21@create_buc
  0011a	83 c8 ff	 or	 eax, -1
  0011d	eb 09		 jmp	 SHORT $LN18@create_buc
$LN21@create_buc:
  0011f	e8 00 00 00 00	 call	 __dtol3

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  00124	eb 02		 jmp	 SHORT $LN18@create_buc
$LN17@create_buc:
  00126	33 c0		 xor	 eax, eax
$LN18@create_buc:
  00128	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 3204 :           recalculate_max_load();
; 3205 : 
; 3206 :           bucket_pointer end =

  0012b	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  0012e	3b f0		 cmp	 esi, eax
  00130	74 0d		 je	 SHORT $LN3@create_buc
$LL4@create_buc:

; 2579 :         ptr_bucket() : next_(0) {}

  00132	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  00138	83 c6 04	 add	 esi, 4
  0013b	3b f0		 cmp	 esi, eax
  0013d	75 f3		 jne	 SHORT $LL4@create_buc
$LN3@create_buc:

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  0013f	8b 4d 08	 mov	 ecx, DWORD PTR _dummy_node$1$[ebp]
  00142	5f		 pop	 edi

; 3212 :         }

  00143	5e		 pop	 esi

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  00144	89 08		 mov	 DWORD PTR [eax], ecx

; 3212 :         }

  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 04 00	 ret	 4
$LN56@create_buc:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN107@create_buc:

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00152	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@create_buc:
  00157	cc		 int	 3
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z
_TEXT	SEGMENT
tv80 = -8						; size = 8
tv132 = -8						; size = 8
_size$ = 8						; size = 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size, COMDAT
; _this$ = ecx

; 3095 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00006	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00009	83 ec 08	 sub	 esp, 8
  0000c	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	66 0f 6e c8	 movd	 xmm1, eax
  00018	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0001c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001f	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00028	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0002c	f2 0f 11 4d f8	 movsd	 QWORD PTR tv132[ebp], xmm1
  00031	dd 45 f8	 fld	 QWORD PTR tv132[ebp]
  00034	dd 1c 24	 fstp	 QWORD PTR [esp]
  00037	e8 00 00 00 00	 call	 _floor
  0003c	dd 5d f8	 fstp	 QWORD PTR tv80[ebp]
  0003f	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv80[ebp]
  00044	83 c4 08	 add	 esp, 8
  00047	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000

; 2893 :         return f >= static_cast<double>(

  0004f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  00057	72 12		 jb	 SHORT $LN5@min_bucket
  00059	83 c8 ff	 or	 eax, -1

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00062	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN5@min_bucket:

; 2893 :         return f >= static_cast<double>(

  0006b	e8 00 00 00 00	 call	 __dtol3

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00076	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -60					; size = 4
_dwFileNameHash$ = -56					; size = 4
_info$ = -52						; size = 36
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pStream$ = 8						; size = 4
?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z PROC ; EterPackPolicy_CSHybridCrypt::ReadSupplementatyDataBlockFromStream, COMDAT
; _this$ = ecx

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d c4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 7d 08	 mov	 edi, DWORD PTR _pStream$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00033	0f 11 45 cc	 movups	 XMMWORD PTR _info$[ebp], xmm0

; 836  :         _My_data._Mysize = 0;

  00037	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0003e	c7 45 e0 0f 00
	00 00		 mov	 DWORD PTR _info$[ebp+20], 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 482  : 	memcpy(&dwFileNameHash, pStream + iStreamOffset, sizeof(DWORD) );

  00045	8b 07		 mov	 eax, DWORD PTR [edi]
  00047	89 45 c8	 mov	 DWORD PTR _dwFileNameHash$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004a	c6 45 cc 00	 mov	 BYTE PTR _info$[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+24], 0
  00055	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+28], 0
  0005c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+32], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 491  : 		info.vecStream.resize( bSDBSize );

  00063	0f b6 77 04	 movzx	 esi, BYTE PTR [edi+4]
  00067	8d 4d e4	 lea	 ecx, DWORD PTR _info$[ebp+24]
  0006a	56		 push	 esi
  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00072	e8 00 00 00 00	 call	 ?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize

; 492  : 		memcpy(&info.vecStream[0],  pStream + iStreamOffset, bSDBSize );

  00077	56		 push	 esi
  00078	8d 47 05	 lea	 eax, DWORD PTR [edi+5]
  0007b	50		 push	 eax
  0007c	ff 75 e4	 push	 DWORD PTR _info$[ebp+24]
  0007f	e8 00 00 00 00	 call	 _memcpy

; 493  : 		iStreamOffset += bSDBSize;
; 494  : 
; 495  : 		m_mapSDBMap[dwFileNameHash] = info;

  00084	8b 4d c4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00087	8d 45 c8	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	8d 7e 05	 lea	 edi, DWORD PTR [esi+5]
  00090	83 c1 18	 add	 ecx, 24			; 00000018H
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[]
  00099	8b f0		 mov	 esi, eax
  0009b	8d 45 cc	 lea	 eax, DWORD PTR _info$[ebp]
  0009e	50		 push	 eax
  0009f	8b ce		 mov	 ecx, esi
  000a1	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  000a6	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1509 :         if (this == _STD addressof(_Right)) {

  000a9	8d 45 e4	 lea	 eax, DWORD PTR _info$[ebp+24]
  000ac	3b c8		 cmp	 ecx, eax
  000ae	74 0f		 je	 SHORT $LN43@ReadSupple

; 1510 :             return *this;
; 1511 :         }
; 1512 : 
; 1513 :         auto& _Al       = _Getal();
; 1514 :         auto& _Right_al = _Right._Getal();
; 1515 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1516 :             if (_Al != _Right_al) {
; 1517 :                 _Tidy();
; 1518 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1519 :             }
; 1520 :         }
; 1521 : 
; 1522 :         _Pocca(_Al, _Right_al);
; 1523 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  000b0	8b 45 e8	 mov	 eax, DWORD PTR _info$[ebp+28]
  000b3	8b 55 e4	 mov	 edx, DWORD PTR _info$[ebp+24]
  000b6	2b c2		 sub	 eax, edx
  000b8	50		 push	 eax
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 ??$_Assign_counted_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXPAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_counted_range<unsigned char *>
$LN43@ReadSupple:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  000bf	8b 4d e4	 mov	 ecx, DWORD PTR _info$[ebp+24]
  000c2	85 c9		 test	 ecx, ecx
  000c4	74 3e		 je	 SHORT $LN55@ReadSupple

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000c6	8b 55 ec	 mov	 edx, DWORD PTR _info$[ebp+32]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c9	8b c1		 mov	 eax, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000cb	2b d1		 sub	 edx, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000cd	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000d3	72 10		 jb	 SHORT $LN74@ReadSupple

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000d5	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  000d8	83 c2 23	 add	 edx, 35			; 00000023H
  000db	2b c1		 sub	 eax, ecx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000dd	83 c0 fc	 add	 eax, -4			; fffffffcH
  000e0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000e3	77 6e		 ja	 SHORT $LN108@ReadSupple
$LN74@ReadSupple:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000e5	52		 push	 edx
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ec	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000ef	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+24], 0

; 2081 :             _Mylast  = nullptr;

  000f6	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+28], 0

; 2082 :             _Myend   = nullptr;

  000fd	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+32], 0
$LN55@ReadSupple:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00104	8b 4d e0	 mov	 ecx, DWORD PTR _info$[ebp+20]
  00107	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0010a	76 28		 jbe	 SHORT $LN100@ReadSupple
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010c	8b 55 cc	 mov	 edx, DWORD PTR _info$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0010f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00110	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00112	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00118	72 10		 jb	 SHORT $LN111@ReadSupple

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0011a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0011d	83 c1 23	 add	 ecx, 35			; 00000023H
  00120	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00122	83 c0 fc	 add	 eax, -4			; fffffffcH
  00125	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00128	77 29		 ja	 SHORT $LN108@ReadSupple
$LN111@ReadSupple:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0012a	51		 push	 ecx
  0012b	52		 push	 edx
  0012c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00131	83 c4 08	 add	 esp, 8
$LN100@ReadSupple:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 502  : 	return iStreamOffset;

  00134	8b c7		 mov	 eax, edi

; 503  : }

  00136	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00139	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00140	59		 pop	 ecx
  00141	5f		 pop	 edi
  00142	5e		 pop	 esi
  00143	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00146	33 cd		 xor	 ecx, ebp
  00148	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c2 04 00	 ret	 4
$LN108@ReadSupple:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00153	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN119@ReadSupple:
  00158	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _info$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z ENDP ; EterPackPolicy_CSHybridCrypt::ReadSupplementatyDataBlockFromStream
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z
_TEXT	SEGMENT
_rFile$GSCopy$1$ = -68					; size = 4
_dwFileNamehash$2 = -64					; size = 4
_dwSDBMapSize$ = -60					; size = 4
_dwMapNameSize$3 = -56					; size = 4
__Result$1$ = -52					; size = 4
_strRelatedMapName$1$ = -48				; size = 4
_bSDBSize$4 = -41					; size = 1
_strRelatedMapName$5 = -40				; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rFile$ = 8						; size = 4
?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z PROC ; EterPackPolicy_CSHybridCrypt::WriteSupplementaryDataBlockToFile, COMDAT
; _this$ = ecx

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	8b 7d 08	 mov	 edi, DWORD PTR _rFile$[ebp]

; 438  : 	//about SDB data
; 439  : 	//		sdb file cnt( 4byte )
; 440  : 	//		for	sdb file cnt
; 441  : 	//			filename hash ( stl.h stringhash )
; 442  : 	//			related map name size(4), relate map name
; 443  : 	//			sdb block size( 1byte )
; 444  : 	//			sdb blocks
; 445  : 
; 446  : 	DWORD dwSDBMapSize = m_mapSDBMap.size();
; 447  : 	rFile.Write( &dwSDBMapSize, sizeof(DWORD) );

  0002f	8d 4d c4	 lea	 ecx, DWORD PTR _dwSDBMapSize$[ebp]
  00032	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00035	89 45 c4	 mov	 DWORD PTR _dwSDBMapSize$[ebp], eax
  00038	6a 04		 push	 4
  0003a	8b 07		 mov	 eax, DWORD PTR [edi]
  0003c	51		 push	 ecx
  0003d	8b cf		 mov	 ecx, edi
  0003f	89 7d bc	 mov	 DWORD PTR _rFile$GSCopy$1$[ebp], edi
  00042	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00045	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
  00049	74 0b		 je	 SHORT $LN143@WriteSuppl

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0004b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0004e	8b 76 2c	 mov	 esi, DWORD PTR [esi+44]
  00051	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]
  00054	eb 02		 jmp	 SHORT $LN144@WriteSuppl
$LN143@WriteSuppl:
  00056	33 f6		 xor	 esi, esi
$LN144@WriteSuppl:

; 2459 :           return x.node_ != y.node_;

  00058	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 450  : 	for( cit = m_mapSDBMap.begin(); cit != m_mapSDBMap.end(); ++cit )

  0005a	0f 84 6b 01 00
	00		 je	 $LN3@WriteSuppl
$LL4@WriteSuppl:

; 452  : 		DWORD dwFileNamehash = cit->first;

  00060	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 453  : 		rFile.Write( &dwFileNamehash, sizeof(DWORD) );

  00063	8d 4d c0	 lea	 ecx, DWORD PTR _dwFileNamehash$2[ebp]
  00066	89 45 c0	 mov	 DWORD PTR _dwFileNamehash$2[ebp], eax
  00069	8b 07		 mov	 eax, DWORD PTR [edi]
  0006b	6a 04		 push	 4
  0006d	51		 push	 ecx
  0006e	8b cf		 mov	 ecx, edi
  00070	ff 50 04	 call	 DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00073	83 7e 20 0f	 cmp	 DWORD PTR [esi+32], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 455  : 		const std::string strRelatedMapName = cit->second.strRelatedMapName;

  00077	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0007a	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0007d	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 455  : 		const std::string strRelatedMapName = cit->second.strRelatedMapName;

  00080	89 7d cc	 mov	 DWORD PTR __Result$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00083	0f 11 45 d8	 movups	 XMMWORD PTR _strRelatedMapName$5[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00087	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strRelatedMapName$5[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0008e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _strRelatedMapName$5[ebp+20], 0

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00095	89 45 d0	 mov	 DWORD PTR _strRelatedMapName$1$[ebp], eax

; 426  :         if (_Large_mode_engaged()) {

  00098	76 05		 jbe	 SHORT $LN42@WriteSuppl

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0009a	8b 3f		 mov	 edi, DWORD PTR [edi]
  0009c	89 7d cc	 mov	 DWORD PTR __Result$1$[ebp], edi
$LN42@WriteSuppl:

; 857  :         if (_Count > max_size()) {

  0009f	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000a4	0f 87 3e 01 00
	00		 ja	 $LN156@WriteSuppl

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  000aa	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000ad	77 13		 ja	 SHORT $LN50@WriteSuppl

; 866  :             _My_data._Mysize = _Count;

  000af	89 45 e8	 mov	 DWORD PTR _strRelatedMapName$5[ebp+16], eax

; 867  :             _My_data._Myres  = _Small_string_capacity;

  000b2	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strRelatedMapName$5[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b9	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  000bc	0f 11 45 d8	 movups	 XMMWORD PTR _strRelatedMapName$5[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 884  :             return;

  000c0	eb 69		 jmp	 SHORT $LN76@WriteSuppl
$LN50@WriteSuppl:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  000c2	8b f8		 mov	 edi, eax
  000c4	83 cf 0f	 or	 edi, 15			; 0000000fH
  000c7	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000cd	76 12		 jbe	 SHORT $LN56@WriteSuppl

; 2944 :             return _Max;

  000cf	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  000d4	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000df	eb 28		 jmp	 SHORT $LN164@WriteSuppl
$LN56@WriteSuppl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000e1	83 ff 16	 cmp	 edi, 22			; 00000016H
  000e4	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  000e9	0f 42 f9	 cmovb	 edi, ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  000ec	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000ef	85 c9		 test	 ecx, ecx
  000f1	74 1e		 je	 SHORT $LN69@WriteSuppl
$LN70@WriteSuppl:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000f3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f9	72 08		 jb	 SHORT $LN71@WriteSuppl

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00101	eb 06		 jmp	 SHORT $LN164@WriteSuppl
$LN71@WriteSuppl:

; 136  :         return ::operator new(_Bytes);

  00103	51		 push	 ecx
  00104	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN164@WriteSuppl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00109	8b c8		 mov	 ecx, eax
  0010b	83 c4 04	 add	 esp, 4
  0010e	8b 45 d0	 mov	 eax, DWORD PTR _strRelatedMapName$1$[ebp]
$LN69@WriteSuppl:

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  00111	89 45 e8	 mov	 DWORD PTR _strRelatedMapName$5[ebp+16], eax

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00114	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00115	50		 push	 eax
  00116	ff 75 cc	 push	 DWORD PTR __Result$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00119	89 4d d8	 mov	 DWORD PTR _strRelatedMapName$5[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011c	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 892  :         _My_data._Myres  = _New_capacity;

  0011d	89 7d ec	 mov	 DWORD PTR _strRelatedMapName$5[ebp+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00120	e8 00 00 00 00	 call	 _memcpy
  00125	8b 45 e8	 mov	 eax, DWORD PTR _strRelatedMapName$5[ebp+16]
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN76@WriteSuppl:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 457  : 		rFile.Write( &dwMapNameSize, sizeof(DWORD) );

  0012b	8b 7d bc	 mov	 edi, DWORD PTR _rFile$GSCopy$1$[ebp]
  0012e	8d 4d c8	 lea	 ecx, DWORD PTR _dwMapNameSize$3[ebp]
  00131	89 45 c8	 mov	 DWORD PTR _dwMapNameSize$3[ebp], eax
  00134	6a 04		 push	 4
  00136	51		 push	 ecx
  00137	8b 07		 mov	 eax, DWORD PTR [edi]
  00139	8b cf		 mov	 ecx, edi
  0013b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00142	ff 50 04	 call	 DWORD PTR [eax+4]

; 458  : 		rFile.Write( strRelatedMapName.c_str(), dwMapNameSize );

  00145	8b 07		 mov	 eax, DWORD PTR [edi]
  00147	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00149	83 7d ec 0f	 cmp	 DWORD PTR _strRelatedMapName$5[ebp+20], 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 458  : 		rFile.Write( strRelatedMapName.c_str(), dwMapNameSize );

  0014d	ff 75 c8	 push	 DWORD PTR _dwMapNameSize$3[ebp]
  00150	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00153	8d 45 d8	 lea	 eax, DWORD PTR _strRelatedMapName$5[ebp]

; 426  :         if (_Large_mode_engaged()) {

  00156	0f 47 45 d8	 cmova	 eax, DWORD PTR _strRelatedMapName$5[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 458  : 		rFile.Write( strRelatedMapName.c_str(), dwMapNameSize );

  0015a	50		 push	 eax
  0015b	ff d2		 call	 edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0015d	8a 46 28	 mov	 al, BYTE PTR [esi+40]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 463  : 		rFile.Write( &bSDBSize, sizeof(bSDBSize) );

  00160	8d 4d d7	 lea	 ecx, DWORD PTR _bSDBSize$4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00163	2a 46 24	 sub	 al, BYTE PTR [esi+36]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 461  : 		BYTE bSDBSize = (BYTE)(sdbVector.size());

  00166	88 45 d7	 mov	 BYTE PTR _bSDBSize$4[ebp], al

; 463  : 		rFile.Write( &bSDBSize, sizeof(bSDBSize) );

  00169	8b 07		 mov	 eax, DWORD PTR [edi]
  0016b	6a 01		 push	 1
  0016d	51		 push	 ecx
  0016e	8b cf		 mov	 ecx, edi
  00170	ff 50 04	 call	 DWORD PTR [eax+4]

; 464  : 		if( bSDBSize > 0 )

  00173	8a 4d d7	 mov	 cl, BYTE PTR _bSDBSize$4[ebp]
  00176	84 c9		 test	 cl, cl
  00178	74 10		 je	 SHORT $LN5@WriteSuppl

; 465  : 			rFile.Write( &sdbVector[0], bSDBSize );

  0017a	8b 07		 mov	 eax, DWORD PTR [edi]
  0017c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0017f	0f b6 c1	 movzx	 eax, cl
  00182	8b cf		 mov	 ecx, edi
  00184	50		 push	 eax
  00185	ff 76 24	 push	 DWORD PTR [esi+36]
  00188	ff d2		 call	 edx
$LN5@WriteSuppl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0018a	8b 4d ec	 mov	 ecx, DWORD PTR _strRelatedMapName$5[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 466  : 	}

  0018d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00194	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00197	76 28		 jbe	 SHORT $LN115@WriteSuppl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00199	8b 55 d8	 mov	 edx, DWORD PTR _strRelatedMapName$5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0019c	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0019d	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0019f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001a5	72 10		 jb	 SHORT $LN126@WriteSuppl

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001a7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001aa	83 c1 23	 add	 ecx, 35			; 00000023H
  001ad	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001af	83 c0 fc	 add	 eax, -4			; fffffffcH
  001b2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001b5	77 36		 ja	 SHORT $LN123@WriteSuppl
$LN126@WriteSuppl:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001b7	51		 push	 ecx
  001b8	52		 push	 edx
  001b9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001be	83 c4 08	 add	 esp, 8
$LN115@WriteSuppl:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  001c1	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 451  : 	{

  001c3	85 f6		 test	 esi, esi
  001c5	0f 85 95 fe ff
	ff		 jne	 $LL4@WriteSuppl
$LN3@WriteSuppl:

; 467  : }

  001cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d5	59		 pop	 ecx
  001d6	5f		 pop	 edi
  001d7	5e		 pop	 esi
  001d8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001db	33 cd		 xor	 ecx, ebp
  001dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e2	8b e5		 mov	 esp, ebp
  001e4	5d		 pop	 ebp
  001e5	c2 04 00	 ret	 4
$LN156@WriteSuppl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 858  :             _Xlen_string(); // result too long

  001e8	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN123@WriteSuppl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ed	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN163@WriteSuppl:
  001f2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strRelatedMapName$5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z ENDP ; EterPackPolicy_CSHybridCrypt::WriteSupplementaryDataBlockToFile
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z
_TEXT	SEGMENT
_info$2$ = -48						; size = 16
_info$1$ = -32						; size = 16
_iStreamOffset$1$ = -12					; size = 4
_this$1$ = -8						; size = 4
_dwExtHash$ = -4					; size = 4
_pStream$ = 8						; size = 4
?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z PROC ; EterPackPolicy_CSHybridCrypt::ReadCryptKeyInfoFromStream, COMDAT
; _this$ = ecx

; 306  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 38	 sub	 esp, 56			; 00000038H
  00019	56		 push	 esi

; 307  : 	int	iStreamOffset = 0;
; 308  : 
; 309  : 	DWORD dwCryptoInfoSize;
; 310  : 	memcpy(&dwCryptoInfoSize, pStream, sizeof(DWORD) );

  0001a	8b 73 08	 mov	 esi, DWORD PTR _pStream$[ebx]
  0001d	8b c1		 mov	 eax, ecx
  0001f	57		 push	 edi
  00020	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  00023	8b 3e		 mov	 edi, DWORD PTR [esi]

; 311  : 	iStreamOffset += sizeof(DWORD);
; 312  : 
; 313  : 	DWORD dwExtHash;
; 314  : 
; 315  : 	m_mapHybridCryptKey.clear();

  00025	e8 00 00 00 00	 call	 ?clear@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEXXZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::clear

; 316  : 
; 317  : 	for( int i = 0; i < dwCryptoInfoSize; ++i )

  0002a	85 ff		 test	 edi, edi
  0002c	74 59		 je	 SHORT $LN10@ReadCryptK

; 307  : 	int	iStreamOffset = 0;
; 308  : 
; 309  : 	DWORD dwCryptoInfoSize;
; 310  : 	memcpy(&dwCryptoInfoSize, pStream, sizeof(DWORD) );

  0002e	8d 04 ff	 lea	 eax, DWORD PTR [edi+edi*8]
  00031	83 c6 18	 add	 esi, 24			; 00000018H
  00034	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  0003b	89 45 f4	 mov	 DWORD PTR _iStreamOffset$1$[ebp], eax
  0003e	66 90		 npad	 2
$LL4@ReadCryptK:

; 318  : 	{
; 319  : 		memcpy(&dwExtHash, pStream + iStreamOffset, sizeof(DWORD) );
; 320  : 		iStreamOffset += sizeof(DWORD);
; 321  : 
; 322  : 		TCSHybridCryptKey info;
; 323  : 		{
; 324  : 			memcpy(info.uEncryptKey.key, pStream + iStreamOffset, sizeof(TEncryptKey) );

  00040	0f 10 46 f0	 movups	 xmm0, XMMWORD PTR [esi-16]
  00044	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]

; 325  : 			iStreamOffset += sizeof(TEncryptKey);
; 326  : 
; 327  : 			memcpy(info.uEncryptIV.iv, pStream + iStreamOffset, sizeof(TEncryptIV) );
; 328  : 			iStreamOffset += sizeof(TEncryptIV);

  00047	8d 76 24	 lea	 esi, DWORD PTR [esi+36]

; 329  : 		}
; 330  : 
; 331  : 		m_mapHybridCryptKey[dwExtHash] = info;

  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0004d	0f 29 45 e0	 movaps	 XMMWORD PTR _info$1$[ebp], xmm0
  00051	0f 10 46 dc	 movups	 xmm0, XMMWORD PTR [esi-36]
  00055	89 45 fc	 mov	 DWORD PTR _dwExtHash$[ebp], eax
  00058	8d 45 fc	 lea	 eax, DWORD PTR _dwExtHash$[ebp]
  0005b	50		 push	 eax
  0005c	0f 29 45 d0	 movaps	 XMMWORD PTR _info$2$[ebp], xmm0
  00060	e8 00 00 00 00	 call	 ??A?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::operator[]
  00065	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _info$1$[ebp]
  00069	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0006c	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _info$2$[ebp]
  00070	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00074	83 ef 01	 sub	 edi, 1
  00077	75 c7		 jne	 SHORT $LL4@ReadCryptK

; 332  : 	}
; 333  : 
; 334  : 	return iStreamOffset;

  00079	8b 45 f4	 mov	 eax, DWORD PTR _iStreamOffset$1$[ebp]

; 335  : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	8b e3		 mov	 esp, ebx
  00083	5b		 pop	 ebx
  00084	c2 04 00	 ret	 4
$LN10@ReadCryptK:
  00087	5f		 pop	 edi
  00088	b8 04 00 00 00	 mov	 eax, 4
  0008d	5e		 pop	 esi
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	8b e3		 mov	 esp, ebx
  00093	5b		 pop	 ebx
  00094	c2 04 00	 ret	 4
?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z ENDP ; EterPackPolicy_CSHybridCrypt::ReadCryptKeyInfoFromStream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?WriteCryptKeyToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z
_TEXT	SEGMENT
_dwCryptKeySize$ = -4					; size = 4
_rFile$ = 8						; size = 4
_extNamehash$1 = 8					; size = 4
?WriteCryptKeyToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z PROC ; EterPackPolicy_CSHybridCrypt::WriteCryptKeyToFile, COMDAT
; _this$ = ecx

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 285  : 	//		ext cnt 4byte
; 286  : 	//		for	ext hash ( crc32 )
; 287  : 	//			key-16byte
; 288  : 	//			iv-16byte
; 289  : 
; 290  : 	DWORD dwCryptKeySize = m_mapHybridCryptKey.size();
; 291  : 	rFile.Write( &dwCryptKeySize, sizeof(DWORD) );

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _rFile$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8d 4d fc	 lea	 ecx, DWORD PTR _dwCryptKeySize$[ebp]
  0000e	6a 04		 push	 4
  00010	51		 push	 ecx
  00011	8b cb		 mov	 ecx, ebx
  00013	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00016	89 45 fc	 mov	 DWORD PTR _dwCryptKeySize$[ebp], eax
  00019	8b 03		 mov	 eax, DWORD PTR [ebx]
  0001b	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0001e	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00022	74 42		 je	 SHORT $LN3@WriteCrypt

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00024	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00027	8b 76 14	 mov	 esi, DWORD PTR [esi+20]
  0002a	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  0002d	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 294  : 	for( cit = m_mapHybridCryptKey.begin(); cit != m_mapHybridCryptKey.end(); ++cit )

  0002f	74 35		 je	 SHORT $LN3@WriteCrypt
  00031	57		 push	 edi
$LL4@WriteCrypt:

; 295  : 	{
; 296  : 		DWORD extNamehash = cit->first;

  00032	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 297  : 		const TCSHybridCryptKey& CryptKey = cit->second;
; 298  : 
; 299  : 		rFile.Write( &extNamehash, sizeof(DWORD) );

  00035	8d 4d 08	 lea	 ecx, DWORD PTR _extNamehash$1[ebp]
  00038	89 45 08	 mov	 DWORD PTR _extNamehash$1[ebp], eax
  0003b	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  0003e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00040	6a 04		 push	 4
  00042	51		 push	 ecx
  00043	8b cb		 mov	 ecx, ebx
  00045	ff 50 04	 call	 DWORD PTR [eax+4]

; 300  : 		rFile.Write( CryptKey.uEncryptKey.key, sizeof(TEncryptKey) );

  00048	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004a	8b cb		 mov	 ecx, ebx
  0004c	6a 10		 push	 16			; 00000010H
  0004e	57		 push	 edi
  0004f	ff 50 04	 call	 DWORD PTR [eax+4]

; 301  : 		rFile.Write( CryptKey.uEncryptIV.iv, sizeof(TEncryptIV) );

  00052	8b 13		 mov	 edx, DWORD PTR [ebx]
  00054	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00057	6a 10		 push	 16			; 00000010H
  00059	50		 push	 eax
  0005a	8b cb		 mov	 ecx, ebx
  0005c	ff 52 04	 call	 DWORD PTR [edx+4]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  0005f	8b 36		 mov	 esi, DWORD PTR [esi]

; 2459 :           return x.node_ != y.node_;

  00061	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 294  : 	for( cit = m_mapHybridCryptKey.begin(); cit != m_mapHybridCryptKey.end(); ++cit )

  00063	75 cd		 jne	 SHORT $LL4@WriteCrypt
  00065	5f		 pop	 edi
$LN3@WriteCrypt:
  00066	5e		 pop	 esi

; 302  : 	}
; 303  : }

  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
?WriteCryptKeyToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z ENDP ; EterPackPolicy_CSHybridCrypt::WriteCryptKeyToFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?IsContainingSDBFile@EterPackPolicy_CSHybridCrypt@@QBE_NXZ
_TEXT	SEGMENT
?IsContainingSDBFile@EterPackPolicy_CSHybridCrypt@@QBE_NXZ PROC ; EterPackPolicy_CSHybridCrypt::IsContainingSDBFile, COMDAT
; _this$ = ecx

; 433  : 	return m_mapSDBMap.size() > 0 ? true : false;

  00000	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00004	0f 97 c0	 seta	 al

; 434  : }

  00007	c3		 ret	 0
?IsContainingSDBFile@EterPackPolicy_CSHybridCrypt@@QBE_NXZ ENDP ; EterPackPolicy_CSHybridCrypt::IsContainingSDBFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z
_TEXT	SEGMENT
$T2 = -56						; size = 4
_iSDBSize$GSCopy$1$ = -52				; size = 4
_this$GSCopy$1$ = -48					; size = 4
_dwFileNameHash$ = -44					; size = 4
_fileNamelower$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rfilename$ = 8						; size = 4
_pSDB$ = 12						; size = 4
_iSDBSize$ = 16						; size = 4
?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z PROC ; EterPackPolicy_CSHybridCrypt::GetSupplementaryDataBlock, COMDAT
; _this$ = ecx

; 396  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d d0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _iSDBSize$[ebp]
  00031	8b 45 08	 mov	 eax, DWORD PTR _rfilename$[ebp]
  00034	8b 5d 0c	 mov	 ebx, DWORD PTR _pSDB$[ebp]
  00037	89 4d cc	 mov	 DWORD PTR _iSDBSize$GSCopy$1$[ebp], ecx

; 397  : #ifdef __THEMIDA__
; 398  : 	VM_START
; 399  : #endif
; 400  : 
; 401  : 	std::string fileNamelower = rfilename;

  0003a	8d 4d d8	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 402  : 	stl_lowers( fileNamelower );

  00043	8d 45 d8	 lea	 eax, DWORD PTR _fileNamelower$[ebp]
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00053	8b 75 d8	 mov	 esi, DWORD PTR _fileNamelower$[ebp]
  00056	8d 4d d8	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h

; 496  :        const unsigned char * end = s + str.size();

  00059	8b 7d e8	 mov	 edi, DWORD PTR _fileNamelower$[ebp+16]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 402  : 	stl_lowers( fileNamelower );

  0005c	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0005f	83 7d ec 0f	 cmp	 DWORD PTR _fileNamelower$[ebp+20], 15 ; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00063	0f 47 ce	 cmova	 ecx, esi
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h

; 497  :        size_t h = 0;

  00066	33 d2		 xor	 edx, edx
  00068	03 f9		 add	 edi, ecx

; 498  : 
; 499  :        while (s < end)

  0006a	3b cf		 cmp	 ecx, edi
  0006c	73 12		 jae	 SHORT $LN10@GetSupplem
  0006e	66 90		 npad	 2
$LL85@GetSupplem:

; 500  :        {
; 501  :            h *= 16777619;
; 502  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00070	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00073	41		 inc	 ecx
  00074	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  0007a	33 d0		 xor	 edx, eax
  0007c	3b cf		 cmp	 ecx, edi
  0007e	72 f0		 jb	 SHORT $LL85@GetSupplem
$LN10@GetSupplem:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 405  : 	TSupplementaryDataBlockMap::const_iterator cit = m_mapSDBMap.find( dwFileNameHash );

  00080	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00083	8d 45 d4	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  00086	50		 push	 eax
  00087	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  0008a	89 55 d4	 mov	 DWORD PTR _dwFileNameHash$[ebp], edx
  0008d	50		 push	 eax
  0008e	83 c1 18	 add	 ecx, 24			; 00000018H
  00091	e8 00 00 00 00	 call	 ?find@?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::find
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  00096	8b 00		 mov	 eax, DWORD PTR [eax]

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00098	85 c0		 test	 eax, eax
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 407  : 	if( cit == m_mapSDBMap.end() )

  0009a	74 15		 je	 SHORT $LN6@GetSupplem
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0009c	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 415  : 	iSDBSize = vecSDB.size();

  0009f	8b 55 cc	 mov	 edx, DWORD PTR _iSDBSize$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000a2	2b 48 24	 sub	 ecx, DWORD PTR [eax+36]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 415  : 	iSDBSize = vecSDB.size();

  000a5	89 0a		 mov	 DWORD PTR [edx], ecx

; 416  : 
; 417  : 	if(iSDBSize <= 0)

  000a7	85 c9		 test	 ecx, ecx
  000a9	7f 2f		 jg	 SHORT $LN3@GetSupplem

; 418  : 	{
; 419  : 		pSDB = NULL;

  000ab	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
$LN6@GetSupplem:
  000b1	32 db		 xor	 bl, bl
$LN7@GetSupplem:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000b3	8b 45 ec	 mov	 eax, DWORD PTR _fileNamelower$[ebp+20]
  000b6	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000b9	76 32		 jbe	 SHORT $LN65@GetSupplem

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000bb	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000be	8b c6		 mov	 eax, esi

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000c0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000c6	72 1b		 jb	 SHORT $LN76@GetSupplem

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000c8	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  000cb	83 c1 23	 add	 ecx, 35			; 00000023H
  000ce	2b c6		 sub	 eax, esi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000d3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d6	77 35		 ja	 SHORT $LN92@GetSupplem
  000d8	eb 09		 jmp	 SHORT $LN76@GetSupplem
$LN3@GetSupplem:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 423  : 	pSDB = (BYTE*)&vecSDB[0];

  000da	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  000dd	89 03		 mov	 DWORD PTR [ebx], eax

; 428  : 	return true;

  000df	b3 01		 mov	 bl, 1
  000e1	eb d0		 jmp	 SHORT $LN7@GetSupplem
$LN76@GetSupplem:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000e3	51		 push	 ecx
  000e4	56		 push	 esi
  000e5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ea	83 c4 08	 add	 esp, 8
$LN65@GetSupplem:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 428  : 	return true;

  000ed	8a c3		 mov	 al, bl

; 429  : }

  000ef	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f9	59		 pop	 ecx
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00100	33 cd		 xor	 ecx, ebp
  00102	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c2 0c 00	 ret	 12			; 0000000cH
$LN92@GetSupplem:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN90@GetSupplem:
  00112	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z ENDP ; EterPackPolicy_CSHybridCrypt::GetSupplementaryDataBlock
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z
_TEXT	SEGMENT
$T2 = -104						; size = 4
_pDestData$GSCopy$1$ = -100				; size = 4
_iDestLen$GSCopy$1$ = -96				; size = 4
_strMapName$GSCopy$1$ = -92				; size = 4
_dwFileNameHash$ = -88					; size = 4
_sdbVector$1$ = -84					; size = 4
_this$GSCopy$1$ = -84					; size = 4
$T3 = -77						; size = 1
_fileNamelower$ = -76					; size = 24
_info$ = -52						; size = 36
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rfilename$ = 8						; size = 4
_strMapName$ = 12					; size = 4
_pSrcData$ = 16						; size = 4
_iSrcLen$ = 20						; size = 4
_pDestData$ = 24					; size = 4
_iDestLen$ = 28						; size = 4
?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z PROC ; EterPackPolicy_CSHybridCrypt::GenerateSupplementaryDataBlock, COMDAT
; _this$ = ecx

; 338  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d ac	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _strMapName$[ebp]
  00030	8b 45 08	 mov	 eax, DWORD PTR _rfilename$[ebp]
  00033	89 4d a4	 mov	 DWORD PTR _strMapName$GSCopy$1$[ebp], ecx
  00036	8b 4d 18	 mov	 ecx, DWORD PTR _pDestData$[ebp]
  00039	89 4d 9c	 mov	 DWORD PTR _pDestData$GSCopy$1$[ebp], ecx
  0003c	8b 4d 1c	 mov	 ecx, DWORD PTR _iDestLen$[ebp]
  0003f	89 4d a0	 mov	 DWORD PTR _iDestLen$GSCopy$1$[ebp], ecx

; 339  : #ifdef __THEMIDA__
; 340  : 	VM_START
; 341  : #endif
; 342  : 
; 343  : 	std::string fileNamelower = rfilename;

  00042	8d 4d b4	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 344  : 	stl_lowers( fileNamelower );

  0004b	8d 45 b4	 lea	 eax, DWORD PTR _fileNamelower$[ebp]
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0005b	8b 75 c8	 mov	 esi, DWORD PTR _fileNamelower$[ebp+20]

; 425  :         const value_type* _Result = _Bx._Buf;

  0005e	8d 4d b4	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h

; 496  :        const unsigned char * end = s + str.size();

  00061	8b 7d c4	 mov	 edi, DWORD PTR _fileNamelower$[ebp+16]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 344  : 	stl_lowers( fileNamelower );

  00064	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00067	83 fe 0f	 cmp	 esi, 15			; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0006a	0f 47 4d b4	 cmova	 ecx, DWORD PTR _fileNamelower$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h

; 497  :        size_t h = 0;

  0006e	33 d2		 xor	 edx, edx
  00070	03 f9		 add	 edi, ecx

; 498  : 
; 499  :        while (s < end)

  00072	3b cf		 cmp	 ecx, edi
  00074	73 10		 jae	 SHORT $LN12@GenerateSu
$LL256@GenerateSu:

; 500  :        {
; 501  :            h *= 16777619;
; 502  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00076	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00079	41		 inc	 ecx
  0007a	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  00080	33 d0		 xor	 edx, eax
  00082	3b cf		 cmp	 ecx, edi
  00084	72 f0		 jb	 SHORT $LL256@GenerateSu
$LN12@GenerateSu:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 347  : 	TSupplementaryDataBlockMap::const_iterator cit = m_mapSDBMap.find( dwFileNameHash );

  00086	8b 7d ac	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  00089	8d 45 a8	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  0008c	50		 push	 eax
  0008d	8d 45 98	 lea	 eax, DWORD PTR $T2[ebp]
  00090	89 55 a8	 mov	 DWORD PTR _dwFileNameHash$[ebp], edx
  00093	50		 push	 eax
  00094	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00097	e8 00 00 00 00	 call	 ?find@?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::find
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2459 :           return x.node_ != y.node_;

  0009c	83 38 00	 cmp	 DWORD PTR [eax], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 349  : 	if( cit != m_mapSDBMap.end() )

  0009f	74 09		 je	 SHORT $LN2@GenerateSu
  000a1	c6 45 b3 00	 mov	 BYTE PTR $T3[ebp], 0
  000a5	e9 4f 01 00 00	 jmp	 $LN170@GenerateSu
$LN2@GenerateSu:
  000aa	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  000ad	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000b4	0f 11 45 cc	 movups	 XMMWORD PTR _info$[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  000b8	c7 45 e0 0f 00
	00 00		 mov	 DWORD PTR _info$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000bf	c6 45 cc 00	 mov	 BYTE PTR _info$[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000c3	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+24], 0
  000ca	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+28], 0
  000d1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+32], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 359  : 	m_mapSDBMap[dwFileNameHash] = info;

  000d8	8d 45 a8	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  000db	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000df	50		 push	 eax
  000e0	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  000e3	e8 00 00 00 00	 call	 ??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[]
  000e8	8b f0		 mov	 esi, eax
  000ea	8d 45 cc	 lea	 eax, DWORD PTR _info$[ebp]
  000ed	50		 push	 eax
  000ee	8b ce		 mov	 ecx, esi
  000f0	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1509 :         if (this == _STD addressof(_Right)) {

  000f5	8b 7d e4	 mov	 edi, DWORD PTR _info$[ebp+24]
  000f8	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  000fb	8d 45 e4	 lea	 eax, DWORD PTR _info$[ebp+24]
  000fe	3b c8		 cmp	 ecx, eax
  00100	74 0c		 je	 SHORT $LN113@GenerateSu

; 1510 :             return *this;
; 1511 :         }
; 1512 : 
; 1513 :         auto& _Al       = _Getal();
; 1514 :         auto& _Right_al = _Right._Getal();
; 1515 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1516 :             if (_Al != _Right_al) {
; 1517 :                 _Tidy();
; 1518 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1519 :             }
; 1520 :         }
; 1521 : 
; 1522 :         _Pocca(_Al, _Right_al);
; 1523 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00102	8b 45 e8	 mov	 eax, DWORD PTR _info$[ebp+28]
  00105	2b c7		 sub	 eax, edi
  00107	50		 push	 eax
  00108	57		 push	 edi
  00109	e8 00 00 00 00	 call	 ??$_Assign_counted_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXPAEI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_counted_range<unsigned char *>
$LN113@GenerateSu:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 361  : 	std::string& strRelatedMapName = m_mapSDBMap[dwFileNameHash].strRelatedMapName;

  0010e	8b 4d ac	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00111	8d 45 a8	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  00114	50		 push	 eax
  00115	8d 49 18	 lea	 ecx, DWORD PTR [ecx+24]
  00118	e8 00 00 00 00	 call	 ??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[]

; 362  : 	std::vector<BYTE>& sdbVector   = m_mapSDBMap[dwFileNameHash].vecStream;

  0011d	8b 4d ac	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00120	8b f0		 mov	 esi, eax
  00122	8d 45 a8	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  00125	50		 push	 eax
  00126	8d 49 18	 lea	 ecx, DWORD PTR [ecx+24]
  00129	e8 00 00 00 00	 call	 ??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[]

; 363  : 
; 364  : 
; 365  : 	//fill the data!!
; 366  : 	{
; 367  : 		strRelatedMapName = strMapName;

  0012e	ff 75 a4	 push	 DWORD PTR _strMapName$GSCopy$1$[ebp]
  00131	83 c0 18	 add	 eax, 24			; 00000018H
  00134	8b ce		 mov	 ecx, esi
  00136	89 45 ac	 mov	 DWORD PTR _sdbVector$1$[ebp], eax
  00139	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 368  : 
; 369  : 		int iSDBSize = random_range( 64, 128 );

  0013e	68 80 00 00 00	 push	 128			; 00000080H
  00143	6a 40		 push	 64			; 00000040H
  00145	e8 00 00 00 00	 call	 ?random_range@@YAJJJ@Z	; random_range
  0014a	8b f0		 mov	 esi, eax
  0014c	83 c4 08	 add	 esp, 8

; 370  : 
; 371  : 		if( iSrcLen < iSDBSize )

  0014f	8b 45 14	 mov	 eax, DWORD PTR _iSrcLen$[ebp]
  00152	3b c6		 cmp	 eax, esi
  00154	7d 0d		 jge	 SHORT $LN4@GenerateSu

; 372  : 		{
; 373  : 			iSDBSize = iSrcLen - 1;

  00156	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]

; 374  : 			if( iSDBSize <= 0 )

  00159	85 f6		 test	 esi, esi
  0015b	7f 06		 jg	 SHORT $LN4@GenerateSu
  0015d	c6 45 b3 00	 mov	 BYTE PTR $T3[ebp], 0
  00161	eb 32		 jmp	 SHORT $LN9@GenerateSu
$LN4@GenerateSu:

; 375  : 			{
; 376  : 				//TODO : is there 1byte file exist???
; 377  : 				return false;
; 378  : 			}
; 379  : 		}
; 380  : 
; 381  : 		sdbVector.resize( iSDBSize );

  00163	8b 4d ac	 mov	 ecx, DWORD PTR _sdbVector$1$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 ?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::resize

; 382  : 
; 383  : 		iDestLen  = iSrcLen - iSDBSize;

  0016c	8b 55 a0	 mov	 edx, DWORD PTR _iDestLen$GSCopy$1$[ebp]
  0016f	8b 45 14	 mov	 eax, DWORD PTR _iSrcLen$[ebp]

; 384  : 		pDestData = (LPBYTE)pSrcData;

  00172	8b 4d 10	 mov	 ecx, DWORD PTR _pSrcData$[ebp]
  00175	2b c6		 sub	 eax, esi

; 385  : 
; 386  : 		memcpy( &sdbVector[0], pDestData + iDestLen, iSDBSize );

  00177	56		 push	 esi
  00178	89 02		 mov	 DWORD PTR [edx], eax
  0017a	8b 45 9c	 mov	 eax, DWORD PTR _pDestData$GSCopy$1$[ebp]
  0017d	89 08		 mov	 DWORD PTR [eax], ecx
  0017f	8b 02		 mov	 eax, DWORD PTR [edx]
  00181	03 c1		 add	 eax, ecx
  00183	50		 push	 eax
  00184	8b 45 ac	 mov	 eax, DWORD PTR _sdbVector$1$[ebp]
  00187	ff 30		 push	 DWORD PTR [eax]
  00189	e8 00 00 00 00	 call	 _memcpy
  0018e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 391  : 	return true;

  00191	c6 45 b3 01	 mov	 BYTE PTR $T3[ebp], 1
$LN9@GenerateSu:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00195	85 ff		 test	 edi, edi
  00197	74 2d		 je	 SHORT $LN125@GenerateSu

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00199	8b 4d ec	 mov	 ecx, DWORD PTR _info$[ebp+32]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0019c	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0019e	2b cf		 sub	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001a0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001a6	72 14		 jb	 SHORT $LN144@GenerateSu

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001a8	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
  001ab	83 c1 23	 add	 ecx, 35			; 00000023H
  001ae	2b c7		 sub	 eax, edi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b0	83 c0 fc	 add	 eax, -4			; fffffffcH
  001b3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001b6	0f 87 8c 00 00
	00		 ja	 $LN67@GenerateSu
$LN144@GenerateSu:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001bc	51		 push	 ecx
  001bd	57		 push	 edi
  001be	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001c3	83 c4 08	 add	 esp, 8
$LN125@GenerateSu:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001c6	8b 4d e0	 mov	 ecx, DWORD PTR _info$[ebp+20]
  001c9	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001cc	76 28		 jbe	 SHORT $LN260@GenerateSu
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001ce	8b 55 cc	 mov	 edx, DWORD PTR _info$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001d1	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d2	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001d4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001da	72 10		 jb	 SHORT $LN181@GenerateSu

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001dc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001df	83 c1 23	 add	 ecx, 35			; 00000023H
  001e2	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001e4	83 c0 fc	 add	 eax, -4			; fffffffcH
  001e7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001ea	77 5c		 ja	 SHORT $LN67@GenerateSu
$LN181@GenerateSu:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ec	51		 push	 ecx
  001ed	52		 push	 edx
  001ee	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001f3	83 c4 08	 add	 esp, 8
$LN260@GenerateSu:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001f6	8b 75 c8	 mov	 esi, DWORD PTR _fileNamelower$[ebp+20]
$LN170@GenerateSu:
  001f9	83 fe 0f	 cmp	 esi, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001fc	76 2a		 jbe	 SHORT $LN59@GenerateSu
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001fe	8b 55 b4	 mov	 edx, DWORD PTR _fileNamelower$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00201	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00204	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00206	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0020c	72 10		 jb	 SHORT $LN70@GenerateSu

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0020e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00211	83 c1 23	 add	 ecx, 35			; 00000023H
  00214	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00216	83 c0 fc	 add	 eax, -4			; fffffffcH
  00219	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0021c	77 2a		 ja	 SHORT $LN67@GenerateSu
$LN70@GenerateSu:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0021e	51		 push	 ecx
  0021f	52		 push	 edx
  00220	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00225	83 c4 08	 add	 esp, 8
$LN59@GenerateSu:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 391  : 	return true;

  00228	8a 45 b3	 mov	 al, BYTE PTR $T3[ebp]

; 392  : }

  0022b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0022e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00235	59		 pop	 ecx
  00236	5f		 pop	 edi
  00237	5e		 pop	 esi
  00238	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023b	33 cd		 xor	 ecx, ebp
  0023d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00242	8b e5		 mov	 esp, ebp
  00244	5d		 pop	 ebp
  00245	c2 18 00	 ret	 24			; 00000018H
$LN67@GenerateSu:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00248	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN262@GenerateSu:
  0024d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z$0:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z$1:
  00008	8d 4d cc	 lea	 ecx, DWORD PTR _info$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z ENDP ; EterPackPolicy_CSHybridCrypt::GenerateSupplementaryDataBlock
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?IsContainingCryptKey@EterPackPolicy_CSHybridCrypt@@QBE_NXZ
_TEXT	SEGMENT
?IsContainingCryptKey@EterPackPolicy_CSHybridCrypt@@QBE_NXZ PROC ; EterPackPolicy_CSHybridCrypt::IsContainingCryptKey, COMDAT
; _this$ = ecx

; 63   : 	return (m_mapHybridCryptKey.size() > 0) ? true : false;

  00000	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00004	0f 97 c0	 seta	 al

; 64   : }

  00007	c3		 ret	 0
?IsContainingCryptKey@EterPackPolicy_CSHybridCrypt@@QBE_NXZ ENDP ; EterPackPolicy_CSHybridCrypt::IsContainingCryptKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
_TEXT	SEGMENT
_zObj$GSCopy$1$ = -4556					; size = 4
$T2 = -4552						; size = 4
$T3 = -4552						; size = 4
$T4 = -4552						; size = 4
_pEncryptedData$GSCopy$1$ = -4548			; size = 4
_eAlgorithm$ = -4544					; size = 4
$T5 = -4544						; size = 4
$T6 = -4544						; size = 4
$T7 = -4544						; size = 4
$T8 = -4537						; size = 1
_Decryptor$9 = -4536					; size = 4400
_Decryptor$10 = -280					; size = 144
_Decryptor$11 = -248					; size = 108
$T12 = -132						; size = 56
$T13 = -132						; size = 56
$T14 = -132						; size = 56
_key$ = -76						; size = 16
_iv$ = -60						; size = 16
_strDecipher$ = -44					; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_rfilename$ = 8						; size = 4
_pEncryptedData$ = 12					; size = 4
_iEncryptedLen$ = 16					; size = 4
_zObj$ = 20						; size = 4
?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z PROC ; EterPackPolicy_CSHybridCrypt::DecryptMemory, COMDAT
; _this$ = ecx

; 218  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	b8 c0 11 00 00	 mov	 eax, 4544		; 000011c0H
  0002a	e8 00 00 00 00	 call	 __chkstk
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00039	56		 push	 esi
  0003a	57		 push	 edi
  0003b	50		 push	 eax
  0003c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00045	8b 53 0c	 mov	 edx, DWORD PTR _pEncryptedData$[ebx]
  00048	8b 43 08	 mov	 eax, DWORD PTR _rfilename$[ebx]
  0004b	8b 7b 10	 mov	 edi, DWORD PTR _iEncryptedLen$[ebx]
  0004e	89 95 3c ee ff
	ff		 mov	 DWORD PTR _pEncryptedData$GSCopy$1$[ebp], edx
  00054	8b 53 14	 mov	 edx, DWORD PTR _zObj$[ebx]
  00057	89 95 34 ee ff
	ff		 mov	 DWORD PTR _zObj$GSCopy$1$[ebp], edx

; 219  : #ifdef __THEMIDA__
; 220  : 	VM_START
; 221  : #endif
; 222  : 
; 223  : 	eHybridCipherAlgorithm eAlgorithm;
; 224  : 	TEncryptKey			   key;
; 225  : 	TEncryptIV			   iv;
; 226  : 
; 227  : 	if( !GetPerFileCryptKey( rfilename, eAlgorithm, key, iv ) )

  0005d	8d 55 c4	 lea	 edx, DWORD PTR _iv$[ebp]
  00060	52		 push	 edx
  00061	8d 55 b4	 lea	 edx, DWORD PTR _key$[ebp]
  00064	52		 push	 edx
  00065	8d 95 40 ee ff
	ff		 lea	 edx, DWORD PTR _eAlgorithm$[ebp]
  0006b	52		 push	 edx
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z ; EterPackPolicy_CSHybridCrypt::GetPerFileCryptKey
  00072	84 c0		 test	 al, al
  00074	0f 84 50 03 00
	00		 je	 $LN1@DecryptMem
$LN2@DecryptMem:
  0007a	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  0007d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _strDecipher$[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00084	0f 11 45 d4	 movups	 XMMWORD PTR _strDecipher$[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00088	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR _strDecipher$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0008f	c6 45 d4 00	 mov	 BYTE PTR _strDecipher$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 236  : 	strDecipher.reserve(iEncryptedLen);

  00093	57		 push	 edi
  00094	8d 4d d4	 lea	 ecx, DWORD PTR _strDecipher$[ebp]
  00097	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009e	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve

; 237  : 
; 238  : 	if( eAlgorithm == e_Cipher_Camellia )

  000a3	8b 85 40 ee ff
	ff		 mov	 eax, DWORD PTR _eAlgorithm$[ebp]
  000a9	85 c0		 test	 eax, eax
  000ab	0f 85 db 00 00
	00		 jne	 $LN3@DecryptMem

; 239  : 	{
; 240  : 		// Decryptor
; 241  : 		CIPHER_MODE<Camellia>::Decryption Decryptor;

  000b1	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$11[ebp]
  000b7	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >

; 242  : 		Decryptor.SetKeyWithIV(key.keyCamellia, sizeof(key.keyCamellia), iv.ivCamellia, sizeof(iv.ivCamellia));

  000bc	6a 10		 push	 16			; 00000010H
  000be	8d 45 c4	 lea	 eax, DWORD PTR _iv$[ebp]
  000c1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c5	50		 push	 eax
  000c6	6a 10		 push	 16			; 00000010H
  000c8	8d 45 b4	 lea	 eax, DWORD PTR _key$[ebp]
  000cb	50		 push	 eax
  000cc	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$11[ebp]
  000d2	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 244  : 		ArraySource(pEncryptedData, iEncryptedLen, true,

  000d7	6a 78		 push	 120			; 00000078H
  000d9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000de	83 c4 04	 add	 esp, 4
  000e1	89 85 40 ee ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  000e7	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000eb	85 c0		 test	 eax, eax
  000ed	74 55		 je	 SHORT $LN12@DecryptMem
  000ef	6a 10		 push	 16			; 00000010H
  000f1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f6	8b f0		 mov	 esi, eax
  000f8	83 c4 04	 add	 esp, 4
  000fb	89 b5 38 ee ff
	ff		 mov	 DWORD PTR $T2[ebp], esi
  00101	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00105	85 f6		 test	 esi, esi
  00107	74 1e		 je	 SHORT $LN10@DecryptMem
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 1604 : 	BufferedTransformation() : Algorithm(false) {}

  00109	6a 00		 push	 0
  0010b	8b ce		 mov	 ecx, esi
  0010d	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1072 : 		: m_output(&output) {CRYPTOPP_ASSERT(sizeof(value_type)==1);}

  00112	8d 45 d4	 lea	 eax, DWORD PTR _strDecipher$[ebp]
  00115	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  0011b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  00122	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 244  : 		ArraySource(pEncryptedData, iEncryptedLen, true,

  00125	eb 02		 jmp	 SHORT $LN11@DecryptMem
$LN10@DecryptMem:
  00127	33 f6		 xor	 esi, esi
$LN11@DecryptMem:
  00129	8b 8d 40 ee ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp]
  0012f	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _Decryptor$11[ebp+4]
  00135	6a 05		 push	 5
  00137	56		 push	 esi
  00138	50		 push	 eax
  00139	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0013d	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  00142	eb 02		 jmp	 SHORT $LN13@DecryptMem
$LN12@DecryptMem:
  00144	33 c0		 xor	 eax, eax
$LN13@DecryptMem:
  00146	50		 push	 eax
  00147	6a 01		 push	 1
  00149	57		 push	 edi
  0014a	ff b5 3c ee ff
	ff		 push	 DWORD PTR _pEncryptedData$GSCopy$1$[ebp]
  00150	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00156	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0015a	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 38   : 	virtual ~Filter() {}

  0015f	8d 4d 88	 lea	 ecx, DWORD PTR $T12[ebp+12]

; 1365 : 	virtual ~SourceTemplate() {}

  00162	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  0016c	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T12[ebp+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  00173	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 246  : 	}

  00178	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$11[ebp]
  0017e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00182	e8 00 00 00 00	 call	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
  00187	e9 cc 01 00 00	 jmp	 $LN7@DecryptMem
$LN3@DecryptMem:

; 247  : 	else if( eAlgorithm == e_Cipher_Twofish )

  0018c	83 f8 01	 cmp	 eax, 1
  0018f	0f 85 f9 00 00
	00		 jne	 $LN5@DecryptMem

; 248  : 	{
; 249  : 		// Decryptor
; 250  : 		CIPHER_MODE<Twofish>::Decryption Decryptor;

  00195	8d 8d 48 ee ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$9[ebp]
  0019b	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >

; 251  : 		Decryptor.SetKeyWithIV(key.keyTwofish, sizeof(key.keyTwofish), iv.ivTwofish, sizeof(iv.ivTwofish));

  001a0	6a 10		 push	 16			; 00000010H
  001a2	8d 45 c4	 lea	 eax, DWORD PTR _iv$[ebp]
  001a5	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001a9	50		 push	 eax
  001aa	6a 10		 push	 16			; 00000010H
  001ac	8d 45 b4	 lea	 eax, DWORD PTR _key$[ebp]
  001af	50		 push	 eax
  001b0	8d 8d 48 ee ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$9[ebp]
  001b6	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 252  : 
; 253  : 		ArraySource(pEncryptedData, iEncryptedLen, true,

  001bb	6a 78		 push	 120			; 00000078H
  001bd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001c2	8b f0		 mov	 esi, eax
  001c4	83 c4 04	 add	 esp, 4
  001c7	89 b5 38 ee ff
	ff		 mov	 DWORD PTR $T3[ebp], esi
  001cd	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  001d1	85 f6		 test	 esi, esi
  001d3	74 3e		 je	 SHORT $LN16@DecryptMem
  001d5	6a 10		 push	 16			; 00000010H
  001d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001dc	83 c4 04	 add	 esp, 4
  001df	89 85 40 ee ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  001e5	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  001e9	85 c0		 test	 eax, eax
  001eb	74 0d		 je	 SHORT $LN14@DecryptMem
  001ed	8d 4d d4	 lea	 ecx, DWORD PTR _strDecipher$[ebp]
  001f0	51		 push	 ecx
  001f1	8b c8		 mov	 ecx, eax
  001f3	e8 00 00 00 00	 call	 ??0?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  001f8	eb 02		 jmp	 SHORT $LN15@DecryptMem
$LN14@DecryptMem:
  001fa	33 c0		 xor	 eax, eax
$LN15@DecryptMem:
  001fc	6a 05		 push	 5
  001fe	50		 push	 eax
  001ff	8d 85 4c ee ff
	ff		 lea	 eax, DWORD PTR _Decryptor$9[ebp+4]
  00205	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00209	50		 push	 eax
  0020a	8b ce		 mov	 ecx, esi
  0020c	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  00211	eb 02		 jmp	 SHORT $LN17@DecryptMem
$LN16@DecryptMem:
  00213	33 c0		 xor	 eax, eax
$LN17@DecryptMem:
  00215	50		 push	 eax
  00216	6a 01		 push	 1
  00218	57		 push	 edi
  00219	ff b5 3c ee ff
	ff		 push	 DWORD PTR _pEncryptedData$GSCopy$1$[ebp]
  0021f	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00225	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00229	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 38   : 	virtual ~Filter() {}

  0022e	8d 4d 88	 lea	 ecx, DWORD PTR $T13[ebp+12]

; 1365 : 	virtual ~SourceTemplate() {}

  00231	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T13[ebp], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  0023b	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T13[ebp+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  00242	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00247	8d 8d 48 ee ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$9[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 255  : 	}

  0024d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00251	c7 85 48 ee ff
	ff 00 00 00 00	 mov	 DWORD PTR _Decryptor$9[ebp], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0025b	c7 85 4c ee ff
	ff 00 00 00 00	 mov	 DWORD PTR _Decryptor$9[ebp+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  00265	c7 85 64 ee ff
	ff 00 00 00 00	 mov	 DWORD PTR _Decryptor$9[ebp+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  0026f	c7 85 78 ee ff
	ff 00 00 00 00	 mov	 DWORD PTR _Decryptor$9[ebp+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  00279	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
  0027e	8d 8d 98 ee ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$9[ebp+80]
  00284	e8 00 00 00 00	 call	 ??1Base@Twofish@CryptoPP@@UAE@XZ
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 255  : 	}

  00289	e9 ca 00 00 00	 jmp	 $LN7@DecryptMem
$LN5@DecryptMem:

; 256  : 	else if( eAlgorithm == e_Cipher_XTEA )

  0028e	83 f8 02	 cmp	 eax, 2
  00291	0f 85 c1 00 00
	00		 jne	 $LN7@DecryptMem

; 257  : 	{
; 258  : 		// Decryptor
; 259  : 		CIPHER_MODE<XTEA>::Decryption Decryptor;

  00297	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$10[ebp]
  0029d	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >

; 260  : 		Decryptor.SetKeyWithIV(key.keyXTEA, sizeof(key.keyXTEA), iv.ivXTEA, sizeof(iv.ivXTEA));

  002a2	6a 08		 push	 8
  002a4	8d 45 c4	 lea	 eax, DWORD PTR _iv$[ebp]
  002a7	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  002ab	50		 push	 eax
  002ac	6a 10		 push	 16			; 00000010H
  002ae	8d 45 b4	 lea	 eax, DWORD PTR _key$[ebp]
  002b1	50		 push	 eax
  002b2	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$10[ebp]
  002b8	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 261  : 
; 262  : 		ArraySource(pEncryptedData, iEncryptedLen, true,

  002bd	6a 78		 push	 120			; 00000078H
  002bf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002c4	8b f0		 mov	 esi, eax
  002c6	83 c4 04	 add	 esp, 4
  002c9	89 b5 38 ee ff
	ff		 mov	 DWORD PTR $T4[ebp], esi
  002cf	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  002d3	85 f6		 test	 esi, esi
  002d5	74 3e		 je	 SHORT $LN20@DecryptMem
  002d7	6a 10		 push	 16			; 00000010H
  002d9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002de	83 c4 04	 add	 esp, 4
  002e1	89 85 40 ee ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  002e7	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  002eb	85 c0		 test	 eax, eax
  002ed	74 0d		 je	 SHORT $LN18@DecryptMem
  002ef	8d 4d d4	 lea	 ecx, DWORD PTR _strDecipher$[ebp]
  002f2	51		 push	 ecx
  002f3	8b c8		 mov	 ecx, eax
  002f5	e8 00 00 00 00	 call	 ??0?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  002fa	eb 02		 jmp	 SHORT $LN19@DecryptMem
$LN18@DecryptMem:
  002fc	33 c0		 xor	 eax, eax
$LN19@DecryptMem:
  002fe	6a 05		 push	 5
  00300	50		 push	 eax
  00301	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _Decryptor$10[ebp+4]
  00307	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0030b	50		 push	 eax
  0030c	8b ce		 mov	 ecx, esi
  0030e	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  00313	eb 02		 jmp	 SHORT $LN21@DecryptMem
$LN20@DecryptMem:
  00315	33 c0		 xor	 eax, eax
$LN21@DecryptMem:
  00317	50		 push	 eax
  00318	6a 01		 push	 1
  0031a	57		 push	 edi
  0031b	ff b5 3c ee ff
	ff		 push	 DWORD PTR _pEncryptedData$GSCopy$1$[ebp]
  00321	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00327	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0032b	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 38   : 	virtual ~Filter() {}

  00330	8d 4d 88	 lea	 ecx, DWORD PTR $T14[ebp+12]

; 1365 : 	virtual ~SourceTemplate() {}

  00333	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T14[ebp], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  0033d	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T14[ebp+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  00344	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 264  : 	}

  00349	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$10[ebp]
  0034f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00353	e8 00 00 00 00	 call	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
$LN7@DecryptMem:

; 265  : 
; 266  : 
; 267  : 	if (strDecipher.length() != iEncryptedLen)

  00358	39 7d e4	 cmp	 DWORD PTR _strDecipher$[ebp+16], edi
  0035b	74 09		 je	 SHORT $LN8@DecryptMem
  0035d	c6 85 47 ee ff
	ff 00		 mov	 BYTE PTR $T8[ebp], 0
  00364	eb 2e		 jmp	 SHORT $LN35@DecryptMem
$LN8@DecryptMem:

; 268  : 	{
; 269  : 		//TODO: size error log
; 270  : 		return false;
; 271  : 	}
; 272  : 
; 273  : 	zObj.AllocBuffer(iEncryptedLen);

  00366	8b b5 34 ee ff
	ff		 mov	 esi, DWORD PTR _zObj$GSCopy$1$[ebp]
  0036c	8b ce		 mov	 ecx, esi
  0036e	57		 push	 edi
  0036f	e8 00 00 00 00	 call	 ?AllocBuffer@CLZObject@@QAEXK@Z ; CLZObject::AllocBuffer
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00374	83 7d e8 0f	 cmp	 DWORD PTR _strDecipher$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00378	8d 45 d4	 lea	 eax, DWORD PTR _strDecipher$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 274  : 	memcpy(zObj.GetBuffer(), strDecipher.c_str(), strDecipher.length() );

  0037b	ff 75 e4	 push	 DWORD PTR _strDecipher$[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0037e	0f 47 45 d4	 cmova	 eax, DWORD PTR _strDecipher$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 274  : 	memcpy(zObj.GetBuffer(), strDecipher.c_str(), strDecipher.length() );

  00382	50		 push	 eax
  00383	ff 36		 push	 DWORD PTR [esi]
  00385	e8 00 00 00 00	 call	 _memcpy
  0038a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 280  : 	return true;

  0038d	c6 85 47 ee ff
	ff 01		 mov	 BYTE PTR $T8[ebp], 1
$LN35@DecryptMem:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00394	8b 4d e8	 mov	 ecx, DWORD PTR _strDecipher$[ebp+20]
  00397	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0039a	76 28		 jbe	 SHORT $LN76@DecryptMem
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0039c	8b 55 d4	 mov	 edx, DWORD PTR _strDecipher$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0039f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003a0	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  003a2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003a8	72 10		 jb	 SHORT $LN87@DecryptMem

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003aa	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003ad	83 c1 23	 add	 ecx, 35			; 00000023H
  003b0	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003b2	83 c0 fc	 add	 eax, -4			; fffffffcH
  003b5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003b8	77 30		 ja	 SHORT $LN258@DecryptMem
$LN87@DecryptMem:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003ba	51		 push	 ecx
  003bb	52		 push	 edx
  003bc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003c1	83 c4 08	 add	 esp, 8
$LN76@DecryptMem:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 280  : 	return true;

  003c4	8a 85 47 ee ff
	ff		 mov	 al, BYTE PTR $T8[ebp]
$LN1@DecryptMem:

; 281  : }

  003ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003d4	59		 pop	 ecx
  003d5	5f		 pop	 edi
  003d6	5e		 pop	 esi
  003d7	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003da	33 cd		 xor	 ecx, ebp
  003dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e1	8b e5		 mov	 esp, ebp
  003e3	5d		 pop	 ebp
  003e4	8b e3		 mov	 esp, ebx
  003e6	5b		 pop	 ebx
  003e7	c2 10 00	 ret	 16			; 00000010H
$LN258@DecryptMem:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003ea	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN256@DecryptMem:
  003ef	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _strDecipher$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$1:
  00008	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$11[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$2:
  00013	6a 78		 push	 120			; 00000078H
  00015	8b 85 40 ee ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	83 c4 08	 add	 esp, 8
  00024	c3		 ret	 0
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$3:
  00025	6a 10		 push	 16			; 00000010H
  00027	8b 85 38 ee ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8
  00036	c3		 ret	 0
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$5:
  00037	8d 8d 48 ee ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$9[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$6:
  00042	6a 78		 push	 120			; 00000078H
  00044	8b 85 38 ee ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	83 c4 08	 add	 esp, 8
  00053	c3		 ret	 0
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$7:
  00054	6a 10		 push	 16			; 00000010H
  00056	8b 85 40 ee ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00062	83 c4 08	 add	 esp, 8
  00065	c3		 ret	 0
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$9:
  00066	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$10[ebp]
  0006c	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$10:
  00071	6a 78		 push	 120			; 00000078H
  00073	8b 85 38 ee ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007f	83 c4 08	 add	 esp, 8
  00082	c3		 ret	 0
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$11:
  00083	6a 10		 push	 16			; 00000010H
  00085	8b 85 40 ee ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00091	83 c4 08	 add	 esp, 8
  00094	c3		 ret	 0
  00095	cc		 int	 3
  00096	cc		 int	 3
  00097	cc		 int	 3
  00098	cc		 int	 3
  00099	cc		 int	 3
__ehhandler$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z:
  0009a	90		 npad	 1
  0009b	90		 npad	 1
  0009c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000a0	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000a3	8b 8a 30 ee ff
	ff		 mov	 ecx, DWORD PTR [edx-4560]
  000a9	33 c8		 xor	 ecx, eax
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  000b3	33 c8		 xor	 ecx, eax
  000b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ba	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
  000bf	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z ENDP ; EterPackPolicy_CSHybridCrypt::DecryptMemory
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
_TEXT	SEGMENT
_zObj$GSCopy$1$ = -4556					; size = 4
$T2 = -4552						; size = 4
$T3 = -4552						; size = 4
$T4 = -4552						; size = 4
_pSrcData$GSCopy$1$ = -4548				; size = 4
_eAlgorithm$ = -4544					; size = 4
$T5 = -4544						; size = 4
$T6 = -4544						; size = 4
$T7 = -4544						; size = 4
$T8 = -4537						; size = 1
_Encryptor$9 = -4536					; size = 4400
_Encryptor$10 = -280					; size = 144
_Encryptor$11 = -248					; size = 108
$T12 = -132						; size = 56
$T13 = -132						; size = 56
$T14 = -132						; size = 56
_key$ = -76						; size = 16
_iv$ = -60						; size = 16
_strCipher$ = -44					; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_rfileName$ = 8						; size = 4
_pSrcData$ = 12						; size = 4
_iSrcLen$ = 16						; size = 4
_zObj$ = 20						; size = 4
?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z PROC ; EterPackPolicy_CSHybridCrypt::EncryptMemory, COMDAT
; _this$ = ecx

; 153  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	b8 c0 11 00 00	 mov	 eax, 4544		; 000011c0H
  0002a	e8 00 00 00 00	 call	 __chkstk
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00039	56		 push	 esi
  0003a	57		 push	 edi
  0003b	50		 push	 eax
  0003c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00045	8b 53 0c	 mov	 edx, DWORD PTR _pSrcData$[ebx]
  00048	8b 43 08	 mov	 eax, DWORD PTR _rfileName$[ebx]
  0004b	8b 7b 10	 mov	 edi, DWORD PTR _iSrcLen$[ebx]
  0004e	89 95 3c ee ff
	ff		 mov	 DWORD PTR _pSrcData$GSCopy$1$[ebp], edx
  00054	8b 53 14	 mov	 edx, DWORD PTR _zObj$[ebx]
  00057	89 95 34 ee ff
	ff		 mov	 DWORD PTR _zObj$GSCopy$1$[ebp], edx

; 154  : #ifdef __THEMIDA__
; 155  : 	VM_START
; 156  : #endif
; 157  : 
; 158  : 	eHybridCipherAlgorithm eAlgorithm;
; 159  : 	TEncryptKey			   key;
; 160  : 	TEncryptIV			   iv;
; 161  : 
; 162  : 	if( !GetPerFileCryptKey( rfileName, eAlgorithm, key, iv ) )

  0005d	8d 55 c4	 lea	 edx, DWORD PTR _iv$[ebp]
  00060	52		 push	 edx
  00061	8d 55 b4	 lea	 edx, DWORD PTR _key$[ebp]
  00064	52		 push	 edx
  00065	8d 95 40 ee ff
	ff		 lea	 edx, DWORD PTR _eAlgorithm$[ebp]
  0006b	52		 push	 edx
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z ; EterPackPolicy_CSHybridCrypt::GetPerFileCryptKey
  00072	84 c0		 test	 al, al
  00074	0f 84 50 03 00
	00		 je	 $LN1@EncryptMem
$LN2@EncryptMem:
  0007a	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  0007d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _strCipher$[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00084	0f 11 45 d4	 movups	 XMMWORD PTR _strCipher$[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00088	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR _strCipher$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0008f	c6 45 d4 00	 mov	 BYTE PTR _strCipher$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 171  : 	strCipher.reserve(iSrcLen);

  00093	57		 push	 edi
  00094	8d 4d d4	 lea	 ecx, DWORD PTR _strCipher$[ebp]
  00097	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009e	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve

; 172  : 
; 173  : 	if( eAlgorithm == e_Cipher_Camellia )

  000a3	8b 85 40 ee ff
	ff		 mov	 eax, DWORD PTR _eAlgorithm$[ebp]
  000a9	85 c0		 test	 eax, eax
  000ab	0f 85 db 00 00
	00		 jne	 $LN3@EncryptMem

; 174  : 	{
; 175  : 		// Encryptor
; 176  : 		CIPHER_MODE<Camellia>::Encryption Encryptor;

  000b1	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$11[ebp]
  000b7	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >

; 177  : 		Encryptor.SetKeyWithIV(key.keyCamellia, sizeof(key.keyCamellia), iv.ivCamellia, sizeof(iv.ivCamellia));

  000bc	6a 10		 push	 16			; 00000010H
  000be	8d 45 c4	 lea	 eax, DWORD PTR _iv$[ebp]
  000c1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c5	50		 push	 eax
  000c6	6a 10		 push	 16			; 00000010H
  000c8	8d 45 b4	 lea	 eax, DWORD PTR _key$[ebp]
  000cb	50		 push	 eax
  000cc	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$11[ebp]
  000d2	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 179  : 		ArraySource(pSrcData, iSrcLen, true,

  000d7	6a 78		 push	 120			; 00000078H
  000d9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000de	83 c4 04	 add	 esp, 4
  000e1	89 85 40 ee ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  000e7	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000eb	85 c0		 test	 eax, eax
  000ed	74 55		 je	 SHORT $LN12@EncryptMem
  000ef	6a 10		 push	 16			; 00000010H
  000f1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f6	8b f0		 mov	 esi, eax
  000f8	83 c4 04	 add	 esp, 4
  000fb	89 b5 38 ee ff
	ff		 mov	 DWORD PTR $T2[ebp], esi
  00101	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00105	85 f6		 test	 esi, esi
  00107	74 1e		 je	 SHORT $LN10@EncryptMem
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 1604 : 	BufferedTransformation() : Algorithm(false) {}

  00109	6a 00		 push	 0
  0010b	8b ce		 mov	 ecx, esi
  0010d	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 1072 : 		: m_output(&output) {CRYPTOPP_ASSERT(sizeof(value_type)==1);}

  00112	8d 45 d4	 lea	 eax, DWORD PTR _strCipher$[ebp]
  00115	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  0011b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  00122	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 179  : 		ArraySource(pSrcData, iSrcLen, true,

  00125	eb 02		 jmp	 SHORT $LN11@EncryptMem
$LN10@EncryptMem:
  00127	33 f6		 xor	 esi, esi
$LN11@EncryptMem:
  00129	8b 8d 40 ee ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp]
  0012f	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _Encryptor$11[ebp+4]
  00135	6a 05		 push	 5
  00137	56		 push	 esi
  00138	50		 push	 eax
  00139	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0013d	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  00142	eb 02		 jmp	 SHORT $LN13@EncryptMem
$LN12@EncryptMem:
  00144	33 c0		 xor	 eax, eax
$LN13@EncryptMem:
  00146	50		 push	 eax
  00147	6a 01		 push	 1
  00149	57		 push	 edi
  0014a	ff b5 3c ee ff
	ff		 push	 DWORD PTR _pSrcData$GSCopy$1$[ebp]
  00150	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00156	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0015a	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 38   : 	virtual ~Filter() {}

  0015f	8d 4d 88	 lea	 ecx, DWORD PTR $T12[ebp+12]

; 1365 : 	virtual ~SourceTemplate() {}

  00162	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  0016c	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T12[ebp+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  00173	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 181  : 	}

  00178	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$11[ebp]
  0017e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00182	e8 00 00 00 00	 call	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
  00187	e9 cc 01 00 00	 jmp	 $LN7@EncryptMem
$LN3@EncryptMem:

; 182  : 	else if( eAlgorithm == e_Cipher_Twofish )

  0018c	83 f8 01	 cmp	 eax, 1
  0018f	0f 85 f9 00 00
	00		 jne	 $LN5@EncryptMem

; 183  : 	{
; 184  : 		// Encryptor
; 185  : 		CIPHER_MODE<Twofish>::Encryption Encryptor;

  00195	8d 8d 48 ee ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$9[ebp]
  0019b	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >

; 186  : 		Encryptor.SetKeyWithIV(key.keyTwofish, sizeof(key.keyTwofish), iv.ivTwofish, sizeof(iv.ivTwofish));

  001a0	6a 10		 push	 16			; 00000010H
  001a2	8d 45 c4	 lea	 eax, DWORD PTR _iv$[ebp]
  001a5	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001a9	50		 push	 eax
  001aa	6a 10		 push	 16			; 00000010H
  001ac	8d 45 b4	 lea	 eax, DWORD PTR _key$[ebp]
  001af	50		 push	 eax
  001b0	8d 8d 48 ee ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$9[ebp]
  001b6	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 187  : 
; 188  : 		ArraySource(pSrcData, iSrcLen, true,

  001bb	6a 78		 push	 120			; 00000078H
  001bd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001c2	8b f0		 mov	 esi, eax
  001c4	83 c4 04	 add	 esp, 4
  001c7	89 b5 38 ee ff
	ff		 mov	 DWORD PTR $T3[ebp], esi
  001cd	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  001d1	85 f6		 test	 esi, esi
  001d3	74 3e		 je	 SHORT $LN16@EncryptMem
  001d5	6a 10		 push	 16			; 00000010H
  001d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001dc	83 c4 04	 add	 esp, 4
  001df	89 85 40 ee ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  001e5	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  001e9	85 c0		 test	 eax, eax
  001eb	74 0d		 je	 SHORT $LN14@EncryptMem
  001ed	8d 4d d4	 lea	 ecx, DWORD PTR _strCipher$[ebp]
  001f0	51		 push	 ecx
  001f1	8b c8		 mov	 ecx, eax
  001f3	e8 00 00 00 00	 call	 ??0?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  001f8	eb 02		 jmp	 SHORT $LN15@EncryptMem
$LN14@EncryptMem:
  001fa	33 c0		 xor	 eax, eax
$LN15@EncryptMem:
  001fc	6a 05		 push	 5
  001fe	50		 push	 eax
  001ff	8d 85 4c ee ff
	ff		 lea	 eax, DWORD PTR _Encryptor$9[ebp+4]
  00205	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00209	50		 push	 eax
  0020a	8b ce		 mov	 ecx, esi
  0020c	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  00211	eb 02		 jmp	 SHORT $LN17@EncryptMem
$LN16@EncryptMem:
  00213	33 c0		 xor	 eax, eax
$LN17@EncryptMem:
  00215	50		 push	 eax
  00216	6a 01		 push	 1
  00218	57		 push	 edi
  00219	ff b5 3c ee ff
	ff		 push	 DWORD PTR _pSrcData$GSCopy$1$[ebp]
  0021f	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00225	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00229	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 38   : 	virtual ~Filter() {}

  0022e	8d 4d 88	 lea	 ecx, DWORD PTR $T13[ebp+12]

; 1365 : 	virtual ~SourceTemplate() {}

  00231	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T13[ebp], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  0023b	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T13[ebp+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  00242	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00247	8d 8d 48 ee ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$9[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 190  : 	}

  0024d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\strciphr.h

; 67   : 	virtual ~ConcretePolicyHolder() {}

  00251	c7 85 48 ee ff
	ff 00 00 00 00	 mov	 DWORD PTR _Encryptor$9[ebp], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0025b	c7 85 4c ee ff
	ff 00 00 00 00	 mov	 DWORD PTR _Encryptor$9[ebp+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  00265	c7 85 64 ee ff
	ff 00 00 00 00	 mov	 DWORD PTR _Encryptor$9[ebp+28], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  0026f	c7 85 78 ee ff
	ff 00 00 00 00	 mov	 DWORD PTR _Encryptor$9[ebp+48], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  00279	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
  0027e	8d 8d 98 ee ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$9[ebp+80]
  00284	e8 00 00 00 00	 call	 ??1Base@Twofish@CryptoPP@@UAE@XZ
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 190  : 	}

  00289	e9 ca 00 00 00	 jmp	 $LN7@EncryptMem
$LN5@EncryptMem:

; 191  : 	else if( eAlgorithm == e_Cipher_XTEA )

  0028e	83 f8 02	 cmp	 eax, 2
  00291	0f 85 c1 00 00
	00		 jne	 $LN7@EncryptMem

; 192  : 	{
; 193  : 		// Encryptor
; 194  : 		CIPHER_MODE<XTEA>::Encryption Encryptor;

  00297	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$10[ebp]
  0029d	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >

; 195  : 		Encryptor.SetKeyWithIV(key.keyXTEA, sizeof(key.keyXTEA), iv.ivXTEA, sizeof(iv.ivXTEA));

  002a2	6a 08		 push	 8
  002a4	8d 45 c4	 lea	 eax, DWORD PTR _iv$[ebp]
  002a7	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  002ab	50		 push	 eax
  002ac	6a 10		 push	 16			; 00000010H
  002ae	8d 45 b4	 lea	 eax, DWORD PTR _key$[ebp]
  002b1	50		 push	 eax
  002b2	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$10[ebp]
  002b8	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 196  : 
; 197  : 		ArraySource(pSrcData, iSrcLen, true,

  002bd	6a 78		 push	 120			; 00000078H
  002bf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002c4	8b f0		 mov	 esi, eax
  002c6	83 c4 04	 add	 esp, 4
  002c9	89 b5 38 ee ff
	ff		 mov	 DWORD PTR $T4[ebp], esi
  002cf	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  002d3	85 f6		 test	 esi, esi
  002d5	74 3e		 je	 SHORT $LN20@EncryptMem
  002d7	6a 10		 push	 16			; 00000010H
  002d9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002de	83 c4 04	 add	 esp, 4
  002e1	89 85 40 ee ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  002e7	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  002eb	85 c0		 test	 eax, eax
  002ed	74 0d		 je	 SHORT $LN18@EncryptMem
  002ef	8d 4d d4	 lea	 ecx, DWORD PTR _strCipher$[ebp]
  002f2	51		 push	 ecx
  002f3	8b c8		 mov	 ecx, eax
  002f5	e8 00 00 00 00	 call	 ??0?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  002fa	eb 02		 jmp	 SHORT $LN19@EncryptMem
$LN18@EncryptMem:
  002fc	33 c0		 xor	 eax, eax
$LN19@EncryptMem:
  002fe	6a 05		 push	 5
  00300	50		 push	 eax
  00301	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _Encryptor$10[ebp+4]
  00307	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0030b	50		 push	 eax
  0030c	8b ce		 mov	 ecx, esi
  0030e	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  00313	eb 02		 jmp	 SHORT $LN21@EncryptMem
$LN20@EncryptMem:
  00315	33 c0		 xor	 eax, eax
$LN21@EncryptMem:
  00317	50		 push	 eax
  00318	6a 01		 push	 1
  0031a	57		 push	 edi
  0031b	ff b5 3c ee ff
	ff		 push	 DWORD PTR _pSrcData$GSCopy$1$[ebp]
  00321	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00327	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0032b	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\filters.h

; 38   : 	virtual ~Filter() {}

  00330	8d 4d 88	 lea	 ecx, DWORD PTR $T14[ebp+12]

; 1365 : 	virtual ~SourceTemplate() {}

  00333	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T14[ebp], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  0033d	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T14[ebp+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@

; 38   : 	virtual ~Filter() {}

  00344	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 199  : 	}

  00349	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$10[ebp]
  0034f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00353	e8 00 00 00 00	 call	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
$LN7@EncryptMem:

; 200  : 
; 201  : 	if (strCipher.length() != iSrcLen)

  00358	39 7d e4	 cmp	 DWORD PTR _strCipher$[ebp+16], edi
  0035b	74 09		 je	 SHORT $LN8@EncryptMem
  0035d	c6 85 47 ee ff
	ff 00		 mov	 BYTE PTR $T8[ebp], 0
  00364	eb 2e		 jmp	 SHORT $LN35@EncryptMem
$LN8@EncryptMem:

; 202  : 	{
; 203  : 		//TODO: size error log
; 204  : 		return false;
; 205  : 	}
; 206  : 
; 207  : 	zObj.AllocBuffer(iSrcLen);

  00366	8b b5 34 ee ff
	ff		 mov	 esi, DWORD PTR _zObj$GSCopy$1$[ebp]
  0036c	8b ce		 mov	 ecx, esi
  0036e	57		 push	 edi
  0036f	e8 00 00 00 00	 call	 ?AllocBuffer@CLZObject@@QAEXK@Z ; CLZObject::AllocBuffer
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00374	83 7d e8 0f	 cmp	 DWORD PTR _strCipher$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00378	8d 45 d4	 lea	 eax, DWORD PTR _strCipher$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 208  : 	memcpy(zObj.GetBuffer(), strCipher.c_str(), strCipher.length() );

  0037b	ff 75 e4	 push	 DWORD PTR _strCipher$[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0037e	0f 47 45 d4	 cmova	 eax, DWORD PTR _strCipher$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 208  : 	memcpy(zObj.GetBuffer(), strCipher.c_str(), strCipher.length() );

  00382	50		 push	 eax
  00383	ff 36		 push	 DWORD PTR [esi]
  00385	e8 00 00 00 00	 call	 _memcpy
  0038a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 214  : 	return true;

  0038d	c6 85 47 ee ff
	ff 01		 mov	 BYTE PTR $T8[ebp], 1
$LN35@EncryptMem:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00394	8b 4d e8	 mov	 ecx, DWORD PTR _strCipher$[ebp+20]
  00397	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0039a	76 28		 jbe	 SHORT $LN76@EncryptMem
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0039c	8b 55 d4	 mov	 edx, DWORD PTR _strCipher$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0039f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003a0	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  003a2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003a8	72 10		 jb	 SHORT $LN87@EncryptMem

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003aa	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003ad	83 c1 23	 add	 ecx, 35			; 00000023H
  003b0	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003b2	83 c0 fc	 add	 eax, -4			; fffffffcH
  003b5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003b8	77 30		 ja	 SHORT $LN258@EncryptMem
$LN87@EncryptMem:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003ba	51		 push	 ecx
  003bb	52		 push	 edx
  003bc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003c1	83 c4 08	 add	 esp, 8
$LN76@EncryptMem:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 214  : 	return true;

  003c4	8a 85 47 ee ff
	ff		 mov	 al, BYTE PTR $T8[ebp]
$LN1@EncryptMem:

; 215  : }

  003ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003d4	59		 pop	 ecx
  003d5	5f		 pop	 edi
  003d6	5e		 pop	 esi
  003d7	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003da	33 cd		 xor	 ecx, ebp
  003dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e1	8b e5		 mov	 esp, ebp
  003e3	5d		 pop	 ebp
  003e4	8b e3		 mov	 esp, ebx
  003e6	5b		 pop	 ebx
  003e7	c2 10 00	 ret	 16			; 00000010H
$LN258@EncryptMem:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003ea	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN256@EncryptMem:
  003ef	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _strCipher$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$1:
  00008	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$11[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$2:
  00013	6a 78		 push	 120			; 00000078H
  00015	8b 85 40 ee ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	83 c4 08	 add	 esp, 8
  00024	c3		 ret	 0
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$3:
  00025	6a 10		 push	 16			; 00000010H
  00027	8b 85 38 ee ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8
  00036	c3		 ret	 0
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$5:
  00037	8d 8d 48 ee ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$9[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$6:
  00042	6a 78		 push	 120			; 00000078H
  00044	8b 85 38 ee ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	83 c4 08	 add	 esp, 8
  00053	c3		 ret	 0
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$7:
  00054	6a 10		 push	 16			; 00000010H
  00056	8b 85 40 ee ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00062	83 c4 08	 add	 esp, 8
  00065	c3		 ret	 0
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$9:
  00066	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$10[ebp]
  0006c	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$10:
  00071	6a 78		 push	 120			; 00000078H
  00073	8b 85 38 ee ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007f	83 c4 08	 add	 esp, 8
  00082	c3		 ret	 0
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$11:
  00083	6a 10		 push	 16			; 00000010H
  00085	8b 85 40 ee ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00091	83 c4 08	 add	 esp, 8
  00094	c3		 ret	 0
  00095	cc		 int	 3
  00096	cc		 int	 3
  00097	cc		 int	 3
  00098	cc		 int	 3
  00099	cc		 int	 3
__ehhandler$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z:
  0009a	90		 npad	 1
  0009b	90		 npad	 1
  0009c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000a0	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000a3	8b 8a 30 ee ff
	ff		 mov	 ecx, DWORD PTR [edx-4560]
  000a9	33 c8		 xor	 ecx, eax
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  000b3	33 c8		 xor	 ecx, eax
  000b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ba	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
  000bf	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z ENDP ; EterPackPolicy_CSHybridCrypt::EncryptMemory
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\osrng.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\osrng.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T2 = -128						; size = 16
$T3 = -112						; size = 16
$T4 = -92						; size = 4
_this$GSCopy$1$ = -88					; size = 4
_dwExtHash$ = -84					; size = 4
$T5 = -77						; size = 1
_info$ = -76						; size = 32
_extName$ = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_rfileName$ = 8						; size = 4
?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; EterPackPolicy_CSHybridCrypt::GenerateCryptKey, COMDAT
; _this$ = ecx

; 68   : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	83 ec 70	 sub	 esp, 112		; 00000070H
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00032	56		 push	 esi
  00033	57		 push	 edi
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 4d a8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00041	8b 73 08	 mov	 esi, DWORD PTR _rfileName$[ebx]

; 51   : 	stl_lowers(rfileName);

  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers

; 52   : 	return CFileNameHelper::GetExtension(rfileName);

  0004a	8d 45 d4	 lea	 eax, DWORD PTR _extName$[ebp]
  0004d	56		 push	 esi
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetExtension

; 75   : 	stl_lowers(extName);

  00054	8d 45 d4	 lea	 eax, DWORD PTR _extName$[ebp]
  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00064	8b 75 d4	 mov	 esi, DWORD PTR _extName$[ebp]
  00067	8d 4d d4	 lea	 ecx, DWORD PTR _extName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h

; 496  :        const unsigned char * end = s + str.size();

  0006a	8b 7d e4	 mov	 edi, DWORD PTR _extName$[ebp+16]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 75   : 	stl_lowers(extName);

  0006d	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00070	83 7d e8 0f	 cmp	 DWORD PTR _extName$[ebp+20], 15 ; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00074	0f 47 ce	 cmova	 ecx, esi
; File C:\Marty 5.5\Src-Client\Client\EterBase\Stl.h

; 497  :        size_t h = 0;

  00077	33 d2		 xor	 edx, edx
  00079	03 f9		 add	 edi, ecx

; 498  : 
; 499  :        while (s < end)

  0007b	3b cf		 cmp	 ecx, edi
  0007d	73 11		 jae	 SHORT $LN14@GenerateCr
  0007f	90		 npad	 1
$LL84@GenerateCr:

; 500  :        {
; 501  :            h *= 16777619;
; 502  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00080	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00083	41		 inc	 ecx
  00084	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  0008a	33 d0		 xor	 edx, eax
  0008c	3b cf		 cmp	 ecx, edi
  0008e	72 f0		 jb	 SHORT $LL84@GenerateCr
$LN14@GenerateCr:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 79   : 	TCSHybridCryptKeyMap::const_iterator cit = m_mapHybridCryptKey.find( dwExtHash );

  00090	8b 7d a8	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  00093	8d 45 ac	 lea	 eax, DWORD PTR _dwExtHash$[ebp]
  00096	50		 push	 eax
  00097	8d 45 a4	 lea	 eax, DWORD PTR $T4[ebp]
  0009a	89 55 ac	 mov	 DWORD PTR _dwExtHash$[ebp], edx
  0009d	50		 push	 eax
  0009e	8b cf		 mov	 ecx, edi
  000a0	e8 00 00 00 00	 call	 ?find@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::find
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2459 :           return x.node_ != y.node_;

  000a5	83 38 00	 cmp	 DWORD PTR [eax], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 81   : 	if( cit != m_mapHybridCryptKey.end() )

  000a8	74 06		 je	 SHORT $LN3@GenerateCr
  000aa	c6 45 b3 00	 mov	 BYTE PTR $T5[ebp], 0
  000ae	eb 71		 jmp	 SHORT $LN7@GenerateCr
$LN3@GenerateCr:

; 87   : 	static AutoSeededRandomPool rnd;

  000b0	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  000b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  000bc	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  000c4	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  000ca	0f 8f a7 00 00
	00		 jg	 $LN91@GenerateCr
$LN2@GenerateCr:

; 88   : 
; 89   : 	TCSHybridCryptKey info;
; 90   : 	{
; 91   : 		rnd.GenerateBlock( &(info.uEncryptKey.key[0]), sizeof(info.uEncryptKey) );

  000d0	6a 10		 push	 16			; 00000010H
  000d2	8d 45 b4	 lea	 eax, DWORD PTR _info$[ebp]
  000d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 ?GenerateBlock@RandomNumberGenerator@CryptoPP@@UAEXPAEI@Z ; CryptoPP::RandomNumberGenerator::GenerateBlock

; 92   : 		rnd.GenerateBlock( &(info.uEncryptIV.iv[0]), sizeof(info.uEncryptIV) );

  000e0	6a 10		 push	 16			; 00000010H
  000e2	8d 45 c4	 lea	 eax, DWORD PTR _info$[ebp+16]
  000e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ?GenerateBlock@RandomNumberGenerator@CryptoPP@@UAEXPAEI@Z ; CryptoPP::RandomNumberGenerator::GenerateBlock

; 93   : 
; 94   : 		//for test
; 95   : 	/*	memset( &info.uEncryptKey.key, 0x10, sizeof(info.uEncryptKey) );
; 96   : 		memset( &info.uEncryptIV.iv, 0x10, sizeof(info.uEncryptIV) ); */
; 97   : 	}
; 98   : 	m_mapHybridCryptKey[dwExtHash] = info;

  000f0	0f 10 45 b4	 movups	 xmm0, XMMWORD PTR _info$[ebp]
  000f4	8d 45 ac	 lea	 eax, DWORD PTR _dwExtHash$[ebp]
  000f7	8b cf		 mov	 ecx, edi
  000f9	50		 push	 eax
  000fa	0f 11 45 90	 movups	 XMMWORD PTR $T3[ebp], xmm0
  000fe	0f 10 45 c4	 movups	 xmm0, XMMWORD PTR _info$[ebp+16]
  00102	0f 11 45 80	 movups	 XMMWORD PTR $T2[ebp], xmm0
  00106	e8 00 00 00 00	 call	 ??A?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::operator[]
  0010b	0f 10 45 90	 movups	 xmm0, XMMWORD PTR $T3[ebp]

; 104  : 	return true;

  0010f	c6 45 b3 01	 mov	 BYTE PTR $T5[ebp], 1
  00113	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00116	0f 10 45 80	 movups	 xmm0, XMMWORD PTR $T2[ebp]
  0011a	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  0011e	8b 75 d4	 mov	 esi, DWORD PTR _extName$[ebp]
$LN7@GenerateCr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00121	8b 45 e8	 mov	 eax, DWORD PTR _extName$[ebp+20]
  00124	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00127	76 2b		 jbe	 SHORT $LN64@GenerateCr

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00129	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012c	8b c6		 mov	 eax, esi

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0012e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00134	72 14		 jb	 SHORT $LN75@GenerateCr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00136	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  00139	83 c1 23	 add	 ecx, 35			; 00000023H
  0013c	2b c6		 sub	 eax, esi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0013e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00141	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00144	0f 87 91 00 00
	00		 ja	 $LN92@GenerateCr
$LN75@GenerateCr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0014a	51		 push	 ecx
  0014b	56		 push	 esi
  0014c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00151	83 c4 08	 add	 esp, 8
$LN64@GenerateCr:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 104  : 	return true;

  00154	8a 45 b3	 mov	 al, BYTE PTR $T5[ebp]

; 105  : }

  00157	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00161	59		 pop	 ecx
  00162	5f		 pop	 edi
  00163	5e		 pop	 esi
  00164	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00167	33 cd		 xor	 ecx, ebp
  00169	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	8b e3		 mov	 esp, ebx
  00173	5b		 pop	 ebx
  00174	c2 04 00	 ret	 4
$LN91@GenerateCr:

; 87   : 	static AutoSeededRandomPool rnd;

  00177	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  0017c	e8 00 00 00 00	 call	 __Init_thread_header
  00181	83 c4 04	 add	 esp, 4
  00184	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA, -1
  0018b	0f 85 3f ff ff
	ff		 jne	 $LN2@GenerateCr
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\osrng.h

; 168  : 		{Reseed(blocking, seedSize);}

  00191	b9 00 00 00 00	 mov	 ecx, OFFSET ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 87   : 	static AutoSeededRandomPool rnd;

  00196	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\osrng.h

; 168  : 		{Reseed(blocking, seedSize);}

  0019a	e8 00 00 00 00	 call	 ??0RandomPool@CryptoPP@@QAE@XZ ; CryptoPP::RandomPool::RandomPool
  0019f	6a 20		 push	 32			; 00000020H
  001a1	6a 00		 push	 0
  001a3	b9 00 00 00 00	 mov	 ecx, OFFSET ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
  001a8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001ac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A, OFFSET ??_7AutoSeededRandomPool@CryptoPP@@6B@
  001b6	e8 00 00 00 00	 call	 ?Reseed@AutoSeededRandomPool@CryptoPP@@QAEX_NI@Z ; CryptoPP::AutoSeededRandomPool::Reseed
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 87   : 	static AutoSeededRandomPool rnd;

  001bb	68 00 00 00 00	 push	 OFFSET ??__Frnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ ; `EterPackPolicy_CSHybridCrypt::GenerateCryptKey'::`2'::`dynamic atexit destructor for 'rnd''
  001c0	e8 00 00 00 00	 call	 _atexit
  001c5	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  001ca	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001ce	e8 00 00 00 00	 call	 __Init_thread_footer
  001d3	83 c4 08	 add	 esp, 8
  001d6	e9 f5 fe ff ff	 jmp	 $LN2@GenerateCr
$LN92@GenerateCr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001db	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@GenerateCr:
  001e0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _extName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  0000d	e8 00 00 00 00	 call	 __Init_thread_abort
  00012	59		 pop	 ecx
  00013	c3		 ret	 0
__unwindfunclet$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
  00019	e9 00 00 00 00	 jmp	 ??1RandomPool@CryptoPP@@UAE@XZ
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; EterPackPolicy_CSHybridCrypt::GenerateCryptKey
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ??1EterPackPolicy_CSHybridCrypt@@QAE@XZ
_TEXT	SEGMENT
??1EterPackPolicy_CSHybridCrypt@@QAE@XZ PROC		; EterPackPolicy_CSHybridCrypt::~EterPackPolicy_CSHybridCrypt, COMDAT
; _this$ = ecx

; 56   : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 57   : 	m_mapHybridCryptKey.clear();

  00003	e8 00 00 00 00	 call	 ?clear@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEXXZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::clear
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4516 :         if (size_) {

  00008	83 7b 20 00	 cmp	 DWORD PTR [ebx+32], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 722  :       void clear() BOOST_NOEXCEPT { table_.clear_impl(); }

  0000c	8d 53 18	 lea	 edx, DWORD PTR [ebx+24]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4516 :         if (size_) {

  0000f	74 51		 je	 SHORT $LN69@EterPackPo

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00011	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  00014	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  00017	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]

; 4518 :           for (bucket_pointer it = buckets_; it != end; ++it) {

  0001a	3b c1		 cmp	 eax, ecx
  0001c	74 0f		 je	 SHORT $LN9@EterPackPo
  0001e	66 90		 npad	 2
$LL10@EterPackPo:

; 4519 :             it->next_ = node_pointer();

  00020	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00026	83 c0 04	 add	 eax, 4
  00029	3b c1		 cmp	 eax, ecx
  0002b	75 f3		 jne	 SHORT $LL10@EterPackPo
$LN9@EterPackPo:
  0002d	57		 push	 edi

; 4520 :           }
; 4521 : 
; 4522 :           link_pointer prev = end->first_from_start();
; 4523 :           node_pointer n = next_node(prev);

  0002e	8b 39		 mov	 edi, DWORD PTR [ecx]

; 4524 :           prev->next_ = node_pointer();

  00030	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 4525 :           size_ = 0;

  00036	c7 43 20 00 00
	00 00		 mov	 DWORD PTR [ebx+32], 0

; 4526 : 
; 4527 :           while (n) {

  0003d	85 ff		 test	 edi, edi
  0003f	74 20		 je	 SHORT $LN78@EterPackPo
  00041	56		 push	 esi
$LL11@EterPackPo:

; 4528 :             node_pointer next = next_node(n);

  00042	8b 37		 mov	 esi, DWORD PTR [edi]

; 3337 :           BOOST_UNORDERED_CALL_DESTROY(

  00044	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00047	e8 00 00 00 00	 call	 ??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004c	6a 30		 push	 48			; 00000030H
  0004e	57		 push	 edi
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4530 :             n = next;

  00057	8b fe		 mov	 edi, esi
  00059	85 f6		 test	 esi, esi
  0005b	75 e5		 jne	 SHORT $LL11@EterPackPo

; 4526 : 
; 4527 :           while (n) {

  0005d	5e		 pop	 esi
  0005e	8d 53 18	 lea	 edx, DWORD PTR [ebx+24]
$LN78@EterPackPo:
  00061	5f		 pop	 edi
$LN69@EterPackPo:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 59   : }

  00062	8b ca		 mov	 ecx, edx
  00064	e8 00 00 00 00	 call	 ??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >
  00069	8b cb		 mov	 ecx, ebx
  0006b	5b		 pop	 ebx
  0006c	e9 00 00 00 00	 jmp	 ??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >
??1EterPackPolicy_CSHybridCrypt@@QAE@XZ ENDP		; EterPackPolicy_CSHybridCrypt::~EterPackPolicy_CSHybridCrypt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?BlockSize@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?BlockSize@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::BlockSize, COMDAT
; _this$ = ecx

; 310  : 	unsigned int BlockSize() const {return this->BLOCKSIZE;}

  00000	b8 08 00 00 00	 mov	 eax, 8
  00005	c3		 ret	 0
?BlockSize@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::BlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0000d	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00014	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 866  :             _My_data._Mysize = _Count;

  0001b	c7 40 10 04 00
	00 00		 mov	 DWORD PTR [eax+16], 4

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00022	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	c7 00 58 54 45
	41		 mov	 DWORD PTR [eax], 1095062616 ; 41455458H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0002f	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::IVSize, COMDAT
; _this$ = ecx

; 295  : 		{return INFO::IV_LENGTH;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::IVSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
_TEXT	SEGMENT
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::IVRequirement, COMDAT
; _this$ = ecx

; 289  : 		{return static_cast<SimpleKeyingInterface::IV_Requirement>(INFO::IV_REQUIREMENT);}

  00000	b8 04 00 00 00	 mov	 eax, 4
  00005	c3		 ret	 0
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::IVRequirement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
_TEXT	SEGMENT
_keylength$ = 8						; size = 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::GetValidKeyLength, COMDAT
; _this$ = ecx

; 283  : 	size_t GetValidKeyLength(size_t keylength) const {return INFO::StaticGetValidKeyLength(keylength);}

  00000	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00005	c2 04 00	 ret	 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::GetValidKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::DefaultKeyLength, COMDAT
; _this$ = ecx

; 273  : 		{return INFO::DEFAULT_KEYLENGTH;}

  00000	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00005	c3		 ret	 0
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::DefaultKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::MaxKeyLength, COMDAT
; _this$ = ecx

; 268  : 		{return static_cast<size_t>(INFO::MAX_KEYLENGTH);}

  00000	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00005	c3		 ret	 0
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::MaxKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::MinKeyLength, COMDAT
; _this$ = ecx

; 263  : 		{return INFO::MIN_KEYLENGTH;}

  00000	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00005	c3		 ret	 0
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::MinKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h
;	COMDAT ??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z PROC		; CryptoPP::Twofish::Base::Base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 553  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0000c	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000f	66 8b 47 08	 mov	 ax, WORD PTR [edi+8]
  00013	66 89 46 08	 mov	 WORD PTR [esi+8], ax
  00017	c6 86 b1 00 00
	00 00		 mov	 BYTE PTR [esi+177], 0

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  0001e	8b 87 b8 00 00
	00		 mov	 eax, DWORD PTR [edi+184]
  00024	89 86 b8 00 00
	00		 mov	 DWORD PTR [esi+184], eax
  0002a	8b 9f bc 00 00
	00		 mov	 ebx, DWORD PTR [edi+188]
  00030	89 9e bc 00 00
	00		 mov	 DWORD PTR [esi+188], ebx

; 595  : 		if (size <= S && !m_allocated)

  00036	83 bf bc 00 00
	00 28		 cmp	 DWORD PTR [edi+188], 40	; 00000028H
  0003d	77 0c		 ja	 SHORT $LN33@Base

; 596  : 		{
; 597  : 			m_allocated = true;

  0003f	c6 86 b1 00 00
	00 01		 mov	 BYTE PTR [esi+177], 1

; 598  : 			return GetAlignedArray();

  00046	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00049	eb 02		 jmp	 SHORT $LN34@Base
$LN33@Base:

; 599  : 		}
; 600  : 		else
; 601  : 			return m_fallbackAllocator.allocate(size, hint);

  0004b	33 c0		 xor	 eax, eax
$LN34@Base:

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  0004d	89 86 c0 00 00
	00		 mov	 DWORD PTR [esi+192], eax

; 731  : 			CRYPTOPP_ASSERT((!t.m_ptr && !m_size) || (t.m_ptr && m_size));
; 732  : 			if (t.m_ptr) {memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, t.m_size*sizeof(T));}

  00053	8b 97 c0 00 00
	00		 mov	 edx, DWORD PTR [edi+192]
  00059	85 d2		 test	 edx, edx
  0005b	74 4e		 je	 SHORT $LN42@Base
  0005d	8b 8f bc 00 00
	00		 mov	 ecx, DWORD PTR [edi+188]
  00063	c1 e1 02	 shl	 ecx, 2
  00066	c1 e3 02	 shl	 ebx, 2
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h

; 46   :         if (_SourceSize == 0)

  00069	85 c9		 test	 ecx, ecx
  0006b	74 3e		 je	 SHORT $LN42@Base

; 47   :         {
; 48   :             return 0;
; 49   :         }
; 50   : 
; 51   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  0006d	85 c0		 test	 eax, eax
  0006f	75 0d		 jne	 SHORT $LN38@Base
  00071	e8 00 00 00 00	 call	 __errno
  00076	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  0007c	eb 28		 jmp	 SHORT $LN75@Base
$LN38@Base:

; 52   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  0007e	3b d9		 cmp	 ebx, ecx
  00080	72 0d		 jb	 SHORT $LN40@Base

; 58   : 
; 59   :             // Unreachable, but required to suppress /analyze warnings:
; 60   :             return EINVAL;
; 61   :         }
; 62   :         memcpy(_Destination, _Source, _SourceSize);

  00082	51		 push	 ecx
  00083	52		 push	 edx
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 _memcpy
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	eb 1c		 jmp	 SHORT $LN42@Base
$LN40@Base:

; 53   :         {
; 54   :             memset(_Destination, 0, _DestinationSize);

  0008f	53		 push	 ebx
  00090	6a 00		 push	 0
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 _memset
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 
; 56   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 57   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  0009b	e8 00 00 00 00	 call	 __errno
  000a0	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
$LN75@Base:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 553  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  000a6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN42@Base:
  000ab	8d 8e c8 00 00
	00		 lea	 ecx, DWORD PTR [esi+200]
  000b1	c6 81 01 10 00
	00 00		 mov	 BYTE PTR [ecx+4097], 0

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  000b8	8b 87 d0 10 00
	00		 mov	 eax, DWORD PTR [edi+4304]
  000be	89 81 08 10 00
	00		 mov	 DWORD PTR [ecx+4104], eax
  000c4	8b 9f d4 10 00
	00		 mov	 ebx, DWORD PTR [edi+4308]
  000ca	89 99 0c 10 00
	00		 mov	 DWORD PTR [ecx+4108], ebx

; 595  : 		if (size <= S && !m_allocated)

  000d0	81 bf d4 10 00
	00 00 04 00 00	 cmp	 DWORD PTR [edi+4308], 1024 ; 00000400H
  000da	77 0b		 ja	 SHORT $LN52@Base

; 596  : 		{
; 597  : 			m_allocated = true;

  000dc	c6 81 01 10 00
	00 01		 mov	 BYTE PTR [ecx+4097], 1

; 598  : 			return GetAlignedArray();

  000e3	8b c1		 mov	 eax, ecx
  000e5	eb 02		 jmp	 SHORT $LN53@Base
$LN52@Base:

; 599  : 		}
; 600  : 		else
; 601  : 			return m_fallbackAllocator.allocate(size, hint);

  000e7	33 c0		 xor	 eax, eax
$LN53@Base:

; 730  : 		: m_mark(t.m_mark), m_size(t.m_size), m_ptr(m_alloc.allocate(t.m_size, NULLPTR)) {

  000e9	89 81 10 10 00
	00		 mov	 DWORD PTR [ecx+4112], eax

; 731  : 			CRYPTOPP_ASSERT((!t.m_ptr && !m_size) || (t.m_ptr && m_size));
; 732  : 			if (t.m_ptr) {memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, t.m_size*sizeof(T));}

  000ef	8b 97 d8 10 00
	00		 mov	 edx, DWORD PTR [edi+4312]
  000f5	85 d2		 test	 edx, edx
  000f7	74 69		 je	 SHORT $LN64@Base
  000f9	8b 8f d4 10 00
	00		 mov	 ecx, DWORD PTR [edi+4308]
  000ff	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  00106	c1 e1 02	 shl	 ecx, 2
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_memcpy_s.h

; 46   :         if (_SourceSize == 0)

  00109	85 c9		 test	 ecx, ecx
  0010b	74 55		 je	 SHORT $LN64@Base

; 47   :         {
; 48   :             return 0;
; 49   :         }
; 50   : 
; 51   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  0010d	85 c0		 test	 eax, eax
  0010f	75 1b		 jne	 SHORT $LN57@Base
  00111	e8 00 00 00 00	 call	 __errno
  00116	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H

; 55   : 
; 56   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 57   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  0011c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00121	5f		 pop	 edi
  00122	8b c6		 mov	 eax, esi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 04 00	 ret	 4
$LN57@Base:

; 52   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  0012c	3b f9		 cmp	 edi, ecx
  0012e	72 16		 jb	 SHORT $LN59@Base

; 58   : 
; 59   :             // Unreachable, but required to suppress /analyze warnings:
; 60   :             return EINVAL;
; 61   :         }
; 62   :         memcpy(_Destination, _Source, _SourceSize);

  00130	51		 push	 ecx
  00131	52		 push	 edx
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 _memcpy
  00138	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013b	8b c6		 mov	 eax, esi
  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi
  0013f	5b		 pop	 ebx
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c2 04 00	 ret	 4
$LN59@Base:

; 53   :         {
; 54   :             memset(_Destination, 0, _DestinationSize);

  00146	57		 push	 edi
  00147	6a 00		 push	 0
  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 _memset
  0014f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 
; 56   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);
; 57   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  00152	e8 00 00 00 00	 call	 __errno
  00157	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  0015d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
$LN64@Base:
  00162	5f		 pop	 edi
  00163	8b c6		 mov	 eax, esi
  00165	5e		 pop	 esi
  00166	5b		 pop	 ebx
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c2 04 00	 ret	 4
??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z ENDP		; CryptoPP::Twofish::Base::Base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h
;	COMDAT ??1Base@Twofish@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Base@Twofish@CryptoPP@@UAE@XZ PROC			; CryptoPP::Twofish::Base::~Base, COMDAT
; _this$ = ecx

; 569  : 	return b < a ? b : a;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 8e d4 10 00
	00		 mov	 ecx, DWORD PTR [esi+4308]
  00009	8b 86 d0 10 00
	00		 mov	 eax, DWORD PTR [esi+4304]
  0000f	8d 96 c8 00 00
	00		 lea	 edx, DWORD PTR [esi+200]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00015	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 569  : 	return b < a ? b : a;

  00017	57		 push	 edi
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  00018	8b ba 10 10 00
	00		 mov	 edi, DWORD PTR [edx+4112]
  0001e	0f 42 c8	 cmovb	 ecx, eax

; 614  : 		if (ptr == GetAlignedArray())

  00021	3b fa		 cmp	 edi, edx
  00023	75 0b		 jne	 SHORT $LN24@Base
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00025	33 c0		 xor	 eax, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00027	c6 82 01 10 00
	00 00		 mov	 BYTE PTR [edx+4097], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0002e	f3 ab		 rep stosd
$LN24@Base:

; 569  : 	return b < a ? b : a;

  00030	8b 86 b8 00 00
	00		 mov	 eax, DWORD PTR [esi+184]
  00036	8d 56 10	 lea	 edx, DWORD PTR [esi+16]
  00039	8b 8a ac 00 00
	00		 mov	 ecx, DWORD PTR [edx+172]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 753  : 		{m_alloc.deallocate(m_ptr, STDMIN(m_size, m_mark));}

  0003f	3b c1		 cmp	 eax, ecx
  00041	8b ba b0 00 00
	00		 mov	 edi, DWORD PTR [edx+176]
  00047	0f 42 c8	 cmovb	 ecx, eax

; 614  : 		if (ptr == GetAlignedArray())

  0004a	3b fa		 cmp	 edi, edx
  0004c	75 0b		 jne	 SHORT $LN56@Base
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  0004e	33 c0		 xor	 eax, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h

; 620  : 			m_allocated = false;

  00050	c6 82 a1 00 00
	00 00		 mov	 BYTE PTR [edx+161], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\misc.h

; 1340 : 	__stosd(reinterpret_cast<unsigned long *>(reinterpret_cast<size_t>(p)), 0, n);

  00057	f3 ab		 rep stosd
$LN56@Base:
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	c3		 ret	 0
??1Base@Twofish@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Twofish::Base::~Base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?BlockSize@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?BlockSize@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::BlockSize, COMDAT
; _this$ = ecx

; 310  : 	unsigned int BlockSize() const {return this->BLOCKSIZE;}

  00000	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00005	c3		 ret	 0
?BlockSize@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::BlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0000d	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00014	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 866  :             _My_data._Mysize = _Count;

  0001b	c7 40 10 07 00
	00 00		 mov	 DWORD PTR [eax+16], 7

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00022	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07DABDIDEC@Twofish@
  0002f	89 08		 mov	 DWORD PTR [eax], ecx
  00031	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_07DABDIDEC@Twofish@+4
  00038	66 89 48 04	 mov	 WORD PTR [eax+4], cx
  0003c	8a 0d 06 00 00
	00		 mov	 cl, BYTE PTR ??_C@_07DABDIDEC@Twofish@+6
  00042	88 48 06	 mov	 BYTE PTR [eax+6], cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00045	c6 40 07 00	 mov	 BYTE PTR [eax+7], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::IVSize, COMDAT
; _this$ = ecx

; 295  : 		{return INFO::IV_LENGTH;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::IVSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
_TEXT	SEGMENT
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::IVRequirement, COMDAT
; _this$ = ecx

; 289  : 		{return static_cast<SimpleKeyingInterface::IV_Requirement>(INFO::IV_REQUIREMENT);}

  00000	b8 04 00 00 00	 mov	 eax, 4
  00005	c3		 ret	 0
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::IVRequirement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
_TEXT	SEGMENT
_keylength$ = 8						; size = 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::GetValidKeyLength, COMDAT
; _this$ = ecx

; 283  : 	size_t GetValidKeyLength(size_t keylength) const {return INFO::StaticGetValidKeyLength(keylength);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  : 		return (keylength <= N) ? N :

  00003	8b 45 08	 mov	 eax, DWORD PTR _keylength$[ebp]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H
  00009	77 09		 ja	 SHORT $LN7@GetValidKe

; 283  : 	size_t GetValidKeyLength(size_t keylength) const {return INFO::StaticGetValidKeyLength(keylength);}

  0000b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
$LN7@GetValidKe:

; 205  : 		return (keylength <= N) ? N :

  00014	83 f8 20	 cmp	 eax, 32			; 00000020H
  00017	72 09		 jb	 SHORT $LN5@GetValidKe

; 283  : 	size_t GetValidKeyLength(size_t keylength) const {return INFO::StaticGetValidKeyLength(keylength);}

  00019	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN5@GetValidKe:

; 205  : 		return (keylength <= N) ? N :

  00022	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00025	83 e1 07	 and	 ecx, 7
  00028	2b c1		 sub	 eax, ecx
  0002a	83 c0 07	 add	 eax, 7

; 283  : 	size_t GetValidKeyLength(size_t keylength) const {return INFO::StaticGetValidKeyLength(keylength);}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::GetValidKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::DefaultKeyLength, COMDAT
; _this$ = ecx

; 273  : 		{return INFO::DEFAULT_KEYLENGTH;}

  00000	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00005	c3		 ret	 0
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::DefaultKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::MaxKeyLength, COMDAT
; _this$ = ecx

; 268  : 		{return static_cast<size_t>(INFO::MAX_KEYLENGTH);}

  00000	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00005	c3		 ret	 0
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::MaxKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::MinKeyLength, COMDAT
; _this$ = ecx

; 263  : 		{return INFO::MIN_KEYLENGTH;}

  00000	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00005	c3		 ret	 0
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::MinKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?BlockSize@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?BlockSize@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::BlockSize, COMDAT
; _this$ = ecx

; 310  : 	unsigned int BlockSize() const {return this->BLOCKSIZE;}

  00000	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00005	c3		 ret	 0
?BlockSize@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::BlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0000d	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00014	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 866  :             _My_data._Mysize = _Count;

  0001b	c7 40 10 08 00
	00 00		 mov	 DWORD PTR [eax+16], 8

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00022	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	c7 00 43 61 6d
	65		 mov	 DWORD PTR [eax], 1701667139 ; 656d6143H
  0002f	c7 40 04 6c 6c
	69 61		 mov	 DWORD PTR [eax+4], 1634298988 ; 61696c6cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00036	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h

; 48   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::IVSize, COMDAT
; _this$ = ecx

; 295  : 		{return INFO::IV_LENGTH;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::IVSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
_TEXT	SEGMENT
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::IVRequirement, COMDAT
; _this$ = ecx

; 289  : 		{return static_cast<SimpleKeyingInterface::IV_Requirement>(INFO::IV_REQUIREMENT);}

  00000	b8 04 00 00 00	 mov	 eax, 4
  00005	c3		 ret	 0
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::IVRequirement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
_TEXT	SEGMENT
_keylength$ = 8						; size = 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::GetValidKeyLength, COMDAT
; _this$ = ecx

; 283  : 	size_t GetValidKeyLength(size_t keylength) const {return INFO::StaticGetValidKeyLength(keylength);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  : 		return (keylength <= N) ? N :

  00003	8b 45 08	 mov	 eax, DWORD PTR _keylength$[ebp]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H
  00009	77 09		 ja	 SHORT $LN7@GetValidKe

; 283  : 	size_t GetValidKeyLength(size_t keylength) const {return INFO::StaticGetValidKeyLength(keylength);}

  0000b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
$LN7@GetValidKe:

; 205  : 		return (keylength <= N) ? N :

  00014	83 f8 20	 cmp	 eax, 32			; 00000020H
  00017	72 09		 jb	 SHORT $LN5@GetValidKe

; 283  : 	size_t GetValidKeyLength(size_t keylength) const {return INFO::StaticGetValidKeyLength(keylength);}

  00019	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN5@GetValidKe:

; 205  : 		return (keylength <= N) ? N :

  00022	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00025	83 e1 07	 and	 ecx, 7
  00028	2b c1		 sub	 eax, ecx
  0002a	83 c0 07	 add	 eax, 7

; 283  : 	size_t GetValidKeyLength(size_t keylength) const {return INFO::StaticGetValidKeyLength(keylength);}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::GetValidKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::DefaultKeyLength, COMDAT
; _this$ = ecx

; 273  : 		{return INFO::DEFAULT_KEYLENGTH;}

  00000	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00005	c3		 ret	 0
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::DefaultKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::MaxKeyLength, COMDAT
; _this$ = ecx

; 268  : 		{return static_cast<size_t>(INFO::MAX_KEYLENGTH);}

  00000	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00005	c3		 ret	 0
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::MaxKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\seckey.h
;	COMDAT ?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::MinKeyLength, COMDAT
; _this$ = ecx

; 263  : 		{return INFO::MIN_KEYLENGTH;}

  00000	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00005	c3		 ret	 0
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::MinKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\secblock.h
;	COMDAT ?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z
_TEXT	SEGMENT
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_size$ = 8						; size = 4
_ptr$ = 12						; size = 4
?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z PROC ; CryptoPP::AllocatorWithCleanup<unsigned int,0>::allocate, COMDAT
; _this$ = ecx

; 200  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]

; 123  : 		if (sizeof(T) != 1 && size > ELEMS_MAX)

  0002b	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00030	77 2b		 ja	 SHORT $LN13@allocate

; 201  : 		CRYPTOPP_UNUSED(ptr); CRYPTOPP_ASSERT(ptr == NULLPTR);
; 202  : 		this->CheckSize(size);
; 203  : 		if (size == 0)

  00032	85 c0		 test	 eax, eax
  00034	74 0c		 je	 SHORT $LN1@allocate
$LN2@allocate:

; 204  : 			return NULLPTR;
; 205  : 
; 206  : #if CRYPTOPP_BOOL_ALIGN16
; 207  : 		// TODO: Does this need the test 'size*sizeof(T) >= 16'?
; 208  : 		if (T_Align16 && size)
; 209  : 			return reinterpret_cast<pointer>(AlignedAllocate(size*sizeof(T)));
; 210  : #endif
; 211  : 
; 212  : 		return reinterpret_cast<pointer>(UnalignedAllocate(size*sizeof(T)));

  00036	c1 e0 02	 shl	 eax, 2
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  0003f	83 c4 04	 add	 esp, 4
$LN1@allocate:

; 213  : 	}

  00042	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00045	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004c	59		 pop	 ecx
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00050	33 cd		 xor	 ecx, ebp
  00052	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
$LN13@allocate:

; 124  : 			throw InvalidArgument("AllocatorBase: requested size would cause integer overflow");

  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@LFCPKOMM@AllocatorBase?3?5requested?5size?5w@
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006a	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00074	50		 push	 eax
  00075	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00078	e8 00 00 00 00	 call	 ??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::InvalidArgument::InvalidArgument
  0007d	68 00 00 00 00	 push	 OFFSET __TI3?AVInvalidArgument@CryptoPP@@
  00082	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN11@allocate:
  0008b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?allocate@?$AllocatorWithCleanup@I$0A@@CryptoPP@@QAEPAIIPBX@Z ENDP ; CryptoPP::AllocatorWithCleanup<unsigned int,0>::allocate
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
_TEXT	SEGMENT
_hardFlush$ = 8						; size = 1
_blocking$ = 12						; size = 1
?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z PROC ; CryptoPP::Bufferless<CryptoPP::Sink>::IsolatedFlush, COMDAT
; _this$ = ecx

; 102  : 		{CRYPTOPP_UNUSED(hardFlush); CRYPTOPP_UNUSED(blocking); return false;}

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ENDP ; CryptoPP::Bufferless<CryptoPP::Sink>::IsolatedFlush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
_TEXT	SEGMENT
_target$ = 8						; size = 4
_begin$ = 12						; size = 4
_end$ = 16						; size = 8
_channel$ = 24						; size = 4
_blocking$ = 28						; size = 1
?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z PROC ; CryptoPP::Sink::CopyRangeTo2, COMDAT
; _this$ = ecx

; 343  : 		{CRYPTOPP_UNUSED(target); CRYPTOPP_UNUSED(begin); CRYPTOPP_UNUSED(end); CRYPTOPP_UNUSED(channel); CRYPTOPP_UNUSED(blocking); return 0;}

  00000	33 c0		 xor	 eax, eax
  00002	c2 18 00	 ret	 24			; 00000018H
?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ENDP ; CryptoPP::Sink::CopyRangeTo2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
_TEXT	SEGMENT
_target$ = 8						; size = 4
_transferBytes$ = 12					; size = 4
_channel$ = 16						; size = 4
_blocking$ = 20						; size = 1
?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z PROC ; CryptoPP::Sink::TransferTo2, COMDAT
; _this$ = ecx

; 341  : 		{CRYPTOPP_UNUSED(target); CRYPTOPP_UNUSED(transferBytes); CRYPTOPP_UNUSED(channel); CRYPTOPP_UNUSED(blocking); transferBytes = 0; return 0;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR _transferBytes$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00013	33 c0		 xor	 eax, eax
  00015	5d		 pop	 ebp
  00016	c2 10 00	 ret	 16			; 00000010H
?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ENDP ; CryptoPP::Sink::TransferTo2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?NumberOfMessages@Store@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?NumberOfMessages@Store@CryptoPP@@UBEIXZ PROC		; CryptoPP::Store::NumberOfMessages, COMDAT
; _this$ = ecx

; 318  : 	unsigned int NumberOfMessages() const {return m_messageEnd ? 0 : 1;}

  00000	33 c0		 xor	 eax, eax
  00002	38 41 10	 cmp	 BYTE PTR [ecx+16], al
  00005	0f 94 c0	 sete	 al
  00008	c3		 ret	 0
?NumberOfMessages@Store@CryptoPP@@UBEIXZ ENDP		; CryptoPP::Store::NumberOfMessages
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z
_TEXT	SEGMENT
_parameters$ = 8					; size = 4
?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z PROC ; CryptoPP::Store::IsolatedInitialize, COMDAT
; _this$ = ecx

; 313  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 314  : 		m_messageEnd = false;
; 315  : 		StoreInitialize(parameters);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0

; 316  : 	}

  00009	5d		 pop	 ebp

; 314  : 		m_messageEnd = false;
; 315  : 		StoreInitialize(parameters);

  0000a	ff a0 b4 00 00
	00		 jmp	 DWORD PTR [eax+180]
?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z ENDP ; CryptoPP::Store::IsolatedInitialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ
_TEXT	SEGMENT
?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ PROC ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::GetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 299  : 		{return m_autoSignalPropagation;}

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	c3		 ret	 0
?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ ENDP ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::GetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z
_TEXT	SEGMENT
_propagation$ = 8					; size = 4
?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z PROC ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::SetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 297  : 		{m_autoSignalPropagation = propagation;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _propagation$[ebp]
  00006	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z ENDP ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::SetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_channel$ = 8						; size = 4
_messageEnd$ = 12					; size = 4
_blocking$ = 16						; size = 1
?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelMessageSeriesEnd, COMDAT
; _this$ = ecx

; 164  : 		{CRYPTOPP_UNUSED(channel); CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@ChannelMes:
  00026	cc		 int	 3
?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_channel$ = 8						; size = 4
_inString$ = 12						; size = 4
_length$ = 16						; size = 4
_messageEnd$ = 20					; size = 4
_blocking$ = 24						; size = 1
?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelPut2, COMDAT
; _this$ = ecx

; 162  : 		{CRYPTOPP_UNUSED(channel); CRYPTOPP_UNUSED(inString); CRYPTOPP_UNUSED(length); CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@ChannelPut:
  00026	cc		 int	 3
?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelPut2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_blocking$ = 8						; size = 1
?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedMessageSeriesEnd, COMDAT
; _this$ = ecx

; 160  : 		{CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@IsolatedMe:
  00026	cc		 int	 3
?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
_TEXT	SEGMENT
_hardFlush$ = 8						; size = 1
_blocking$ = 12						; size = 1
?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedFlush, COMDAT
; _this$ = ecx

; 158  : 		{CRYPTOPP_UNUSED(hardFlush); CRYPTOPP_UNUSED(blocking); return false;}

  00000	32 c0		 xor	 al, al
  00002	c2 08 00	 ret	 8
?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedFlush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\simple.h
;	COMDAT ?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
_TEXT	SEGMENT
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_inString$ = 8						; size = 4
_length$ = 12						; size = 4
_messageEnd$ = 16					; size = 4
_blocking$ = 20						; size = 1
?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::Put2, COMDAT
; _this$ = ecx

; 152  : 		{CRYPTOPP_UNUSED(inString); CRYPTOPP_UNUSED(length); CRYPTOPP_UNUSED(messageEnd); CRYPTOPP_UNUSED(blocking); throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00013	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
  00018	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
  0001d	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Put2:
  00026	cc		 int	 3
?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::Put2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
_TEXT	SEGMENT
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_newAttachment$ = 8					; size = 4
?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z PROC ; CryptoPP::BufferedTransformation::Detach, COMDAT
; _this$ = ecx

; 2258 : 		virtual void Detach(BufferedTransformation *newAttachment = NULLPTR) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2259 : 			CRYPTOPP_UNUSED(newAttachment); CRYPTOPP_ASSERT(!Attachable());
; 2260 : 			throw NotImplemented("BufferedTransformation: this object is not attachable");

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@FIHMKEGL@BufferedTransformation?3?5this?5ob@
  0002d	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00030	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00035	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	50		 push	 eax
  00040	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00043	e8 00 00 00 00	 call	 ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
  00048	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  0004d	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@Detach:
  00056	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z ENDP ; CryptoPP::BufferedTransformation::Detach
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ
_TEXT	SEGMENT
?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ PROC ; CryptoPP::BufferedTransformation::AttachedTransformation, COMDAT
; _this$ = ecx

; 2250 : 			{return const_cast<BufferedTransformation *>(this)->AttachedTransformation();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff a0 a8 00 00
	00		 jmp	 DWORD PTR [eax+168]
?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ ENDP ; CryptoPP::BufferedTransformation::AttachedTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ
_TEXT	SEGMENT
?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ PROC ; CryptoPP::BufferedTransformation::AttachedTransformation, COMDAT
; _this$ = ecx

; 2243 : 		virtual BufferedTransformation *AttachedTransformation() {CRYPTOPP_ASSERT(!Attachable()); return NULLPTR;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ ENDP ; CryptoPP::BufferedTransformation::AttachedTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ
_TEXT	SEGMENT
?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ PROC ; CryptoPP::BufferedTransformation::Attachable, COMDAT
; _this$ = ecx

; 2237 : 		virtual bool Attachable() {return false;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ ENDP ; CryptoPP::BufferedTransformation::Attachable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::BufferedTransformation::NumberOfMessageSeries, COMDAT
; _this$ = ecx

; 2023 : 		virtual unsigned int NumberOfMessageSeries() const {return 0;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BufferedTransformation::NumberOfMessageSeries
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::BufferedTransformation::NumberOfMessagesInThisSeries, COMDAT
; _this$ = ecx

; 2020 : 		virtual unsigned int NumberOfMessagesInThisSeries() const {return NumberOfMessages();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 60	 jmp	 DWORD PTR [eax+96]
?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BufferedTransformation::NumberOfMessagesInThisSeries
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
_TEXT	SEGMENT
?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ PROC ; CryptoPP::BufferedTransformation::GetNextMessageSeries, COMDAT
; _this$ = ecx

; 2017 : 		virtual bool GetNextMessageSeries() {return false;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ ENDP ; CryptoPP::BufferedTransformation::GetNextMessageSeries
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ
_TEXT	SEGMENT
?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ PROC ; CryptoPP::BufferedTransformation::GetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 1818 : 		virtual int GetAutoSignalPropagation() const {return 0;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ ENDP ; CryptoPP::BufferedTransformation::GetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z
_TEXT	SEGMENT
_propagation$ = 8					; size = 4
?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z PROC ; CryptoPP::BufferedTransformation::SetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 1813 : 			{CRYPTOPP_UNUSED(propagation);}

  00000	c2 04 00	 ret	 4
?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z ENDP ; CryptoPP::BufferedTransformation::SetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z
_TEXT	SEGMENT
_blocking$ = 8						; size = 1
?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z PROC ; CryptoPP::BufferedTransformation::IsolatedMessageSeriesEnd, COMDAT
; _this$ = ecx

; 1770 : 			{CRYPTOPP_UNUSED(blocking); return false;}

  00000	32 c0		 xor	 al, al
  00002	c2 04 00	 ret	 4
?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z ENDP ; CryptoPP::BufferedTransformation::IsolatedMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
_TEXT	SEGMENT
_inString$ = 8						; size = 4
_length$ = 12						; size = 4
_messageEnd$ = 16					; size = 4
_blocking$ = 20						; size = 1
?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z PROC ; CryptoPP::BufferedTransformation::PutModifiable2, COMDAT
; _this$ = ecx

; 1718 : 			{return Put2(inString, length, messageEnd, blocking);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	5d		 pop	 ebp
  00006	ff 60 18	 jmp	 DWORD PTR [eax+24]
?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z ENDP ; CryptoPP::BufferedTransformation::PutModifiable2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BufferedTransformation::CanModifyInput, COMDAT
; _this$ = ecx

; 1666 : 			{return false;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BufferedTransformation::CanModifyInput
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z PROC ; CryptoPP::BufferedTransformation::CreatePutSpace, COMDAT
; _this$ = ecx

; 1660 : 			{size=0; return NULLPTR;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0000c	33 c0		 xor	 eax, eax
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z ENDP ; CryptoPP::BufferedTransformation::CreatePutSpace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1BufferedTransformation@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1BufferedTransformation@CryptoPP@@UAE@XZ PROC		; CryptoPP::BufferedTransformation::~BufferedTransformation, COMDAT
; _this$ = ecx

; 1601 : 	virtual ~BufferedTransformation() {}

  00000	c2 00 00	 ret	 0
??1BufferedTransformation@CryptoPP@@UAE@XZ ENDP		; CryptoPP::BufferedTransformation::~BufferedTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1Waitable@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Waitable@CryptoPP@@UAE@XZ PROC			; CryptoPP::Waitable::~Waitable, COMDAT
; _this$ = ecx

; 1552 : 	virtual ~Waitable() {}

  00000	c2 00 00	 ret	 0
??1Waitable@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Waitable::~Waitable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ PROC ; CryptoPP::RandomNumberGenerator::CanIncorporateEntropy, COMDAT
; _this$ = ecx

; 1404 : 	virtual bool CanIncorporateEntropy() const {return false;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::RandomNumberGenerator::CanIncorporateEntropy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
_TEXT	SEGMENT
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_input$ = 8						; size = 4
_length$ = 12						; size = 4
?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z PROC ; CryptoPP::RandomNumberGenerator::IncorporateEntropy, COMDAT
; _this$ = ecx

; 1397 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1398 : 		CRYPTOPP_UNUSED(input); CRYPTOPP_UNUSED(length);
; 1399 : 		throw NotImplemented("RandomNumberGenerator: IncorporateEntropy not implemented");

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@CFJCNMFC@RandomNumberGenerator?3?5Incorpor@
  0002d	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00030	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00035	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	50		 push	 eax
  00040	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00043	e8 00 00 00 00	 call	 ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
  00048	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  0004d	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@Incorporat:
  00056	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z ENDP ; CryptoPP::RandomNumberGenerator::IncorporateEntropy
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1RandomNumberGenerator@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1RandomNumberGenerator@CryptoPP@@UAE@XZ PROC		; CryptoPP::RandomNumberGenerator::~RandomNumberGenerator, COMDAT
; _this$ = ecx

; 1386 : 	virtual ~RandomNumberGenerator() {}

  00000	c2 00 00	 ret	 0
??1RandomNumberGenerator@CryptoPP@@UAE@XZ ENDP		; CryptoPP::RandomNumberGenerator::~RandomNumberGenerator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
_TEXT	SEGMENT
?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ PROC ; CryptoPP::SymmetricCipher::GetAlgorithm, COMDAT
; _this$ = ecx

; 1261 : 	const Algorithm & GetAlgorithm() const {return *this;}

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ENDP ; CryptoPP::SymmetricCipher::GetAlgorithm
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
_TEXT	SEGMENT
?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ PROC ; CryptoPP::BlockCipher::GetAlgorithm, COMDAT
; _this$ = ecx

; 1253 : 	const Algorithm & GetAlgorithm() const {return *this;}

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ENDP ; CryptoPP::BlockCipher::GetAlgorithm
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ PROC ; CryptoPP::StreamTransformation::IsLastBlockSpecial, COMDAT
; _this$ = ecx

; 1026 : 	virtual bool IsLastBlockSpecial() const {return false;}

  00000	32 c0		 xor	 al, al
  00002	c3		 ret	 0
?IsLastBlockSpecial@StreamTransformation@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::StreamTransformation::IsLastBlockSpecial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::StreamTransformation::MinLastBlockSize, COMDAT
; _this$ = ecx

; 993  : 	virtual unsigned int MinLastBlockSize() const {return 0;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::StreamTransformation::MinLastBlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::StreamTransformation::GetOptimalBlockSizeUsed, COMDAT
; _this$ = ecx

; 948  : 	virtual unsigned int GetOptimalBlockSizeUsed() const {return 0;}

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::StreamTransformation::GetOptimalBlockSizeUsed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::StreamTransformation::MandatoryBlockSize, COMDAT
; _this$ = ecx

; 937  : 	virtual unsigned int MandatoryBlockSize() const {return 1;}

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::StreamTransformation::MandatoryBlockSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1StreamTransformation@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1StreamTransformation@CryptoPP@@UAE@XZ PROC		; CryptoPP::StreamTransformation::~StreamTransformation, COMDAT
; _this$ = ecx

; 920  : 	virtual ~StreamTransformation() {}

  00000	c2 00 00	 ret	 0
??1StreamTransformation@CryptoPP@@UAE@XZ ENDP		; CryptoPP::StreamTransformation::~StreamTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::BlockTransformation::OptimalNumberOfParallelBlocks, COMDAT
; _this$ = ecx

; 884  : 	virtual unsigned int OptimalNumberOfParallelBlocks() const {return 1;}

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BlockTransformation::OptimalNumberOfParallelBlocks
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockTransformation::IsPermutation, COMDAT
; _this$ = ecx

; 874  : 	virtual bool IsPermutation() const {return true;}

  00000	b0 01		 mov	 al, 1
  00002	c3		 ret	 0
?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockTransformation::IsPermutation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1BlockTransformation@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1BlockTransformation@CryptoPP@@UAE@XZ PROC		; CryptoPP::BlockTransformation::~BlockTransformation, COMDAT
; _this$ = ecx

; 830  : 	virtual ~BlockTransformation() {}

  00000	c2 00 00	 ret	 0
??1BlockTransformation@CryptoPP@@UAE@XZ ENDP		; CryptoPP::BlockTransformation::~BlockTransformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
_TEXT	SEGMENT
$T2 = -104						; size = 24
$T3 = -80						; size = 24
$T4 = -56						; size = 40
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iv$ = 8						; size = 4
_ivLength$ = 12						; size = 4
?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z PROC ; CryptoPP::SimpleKeyingInterface::Resynchronize, COMDAT
; _this$ = ecx

; 755  : 	virtual void Resynchronize(const byte *iv, int ivLength=-1) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 756  : 		CRYPTOPP_UNUSED(iv); CRYPTOPP_UNUSED(ivLength);
; 757  : 		throw NotImplemented(GetAlgorithm().AlgorithmName() + ": this object doesn't support resynchronization");

  00028	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002a	ff 50 34	 call	 DWORD PTR [eax+52]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00032	8d 4d b0	 lea	 ecx, DWORD PTR $T3[ebp]
  00035	51		 push	 ecx
  00036	8b c8		 mov	 ecx, eax
  00038	ff d2		 call	 edx
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5r@
  0003f	50		 push	 eax
  00040	8d 45 98	 lea	 eax, DWORD PTR $T2[ebp]
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	50		 push	 eax
  00054	8d 4d c8	 lea	 ecx, DWORD PTR $T4[ebp]
  00057	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005b	e8 00 00 00 00	 call	 ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
  00060	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  00065	8d 45 c8	 lea	 eax, DWORD PTR $T4[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@Resynchron:
  0006e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$1:
  00008	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z ENDP ; CryptoPP::SimpleKeyingInterface::Resynchronize
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterface::MaxIVLength, COMDAT
; _this$ = ecx

; 748  : 	virtual unsigned int MaxIVLength() const {return IVSize();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 20	 jmp	 DWORD PTR [eax+32]
?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterface::MaxIVLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterface::MinIVLength, COMDAT
; _this$ = ecx

; 743  : 	virtual unsigned int MinIVLength() const {return IVSize();}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 20	 jmp	 DWORD PTR [eax+32]
?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterface::MinIVLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
_TEXT	SEGMENT
_keylength$ = 8						; size = 4
?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z PROC ; CryptoPP::SimpleKeyingInterface::IsValidKeyLength, COMDAT
; _this$ = ecx

; 645  : 		{return keylength == GetValidKeyLength(keylength);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	ff 75 08	 push	 DWORD PTR _keylength$[ebp]
  00008	ff 50 10	 call	 DWORD PTR [eax+16]
  0000b	39 45 08	 cmp	 DWORD PTR _keylength$[ebp], eax
  0000e	0f 94 c0	 sete	 al
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z ENDP ; CryptoPP::SimpleKeyingInterface::IsValidKeyLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1SimpleKeyingInterface@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1SimpleKeyingInterface@CryptoPP@@UAE@XZ PROC		; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface, COMDAT
; _this$ = ecx

; 616  : 	virtual ~SimpleKeyingInterface() {}

  00000	c2 00 00	 ret	 0
??1SimpleKeyingInterface@CryptoPP@@UAE@XZ ENDP		; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::Algorithm::AlgorithmProvider, COMDAT
; _this$ = ecx

; 608  : 	virtual std::string AlgorithmProvider() const {return "C++";}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0000d	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00014	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 866  :             _My_data._Mysize = _Count;

  0001b	c7 40 10 03 00
	00 00		 mov	 DWORD PTR [eax+16], 3

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00022	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ??_C@_03BFHCIDFI@C?$CL?$CL@
  00030	66 89 08	 mov	 WORD PTR [eax], cx
  00033	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_03BFHCIDFI@C?$CL?$CL@+2
  00039	88 48 02	 mov	 BYTE PTR [eax+2], cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0003c	c6 40 03 00	 mov	 BYTE PTR [eax+3], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 608  : 	virtual std::string AlgorithmProvider() const {return "C++";}

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?AlgorithmProvider@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::Algorithm::AlgorithmProvider
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::Algorithm::AlgorithmName, COMDAT
; _this$ = ecx

; 591  : 	virtual std::string AlgorithmName() const {return "unknown";}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00004	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0000d	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00014	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 866  :             _My_data._Mysize = _Count;

  0001b	c7 40 10 07 00
	00 00		 mov	 DWORD PTR [eax+16], 7

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00022	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07CIFAGBMG@unknown@
  0002f	89 08		 mov	 DWORD PTR [eax], ecx
  00031	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_07CIFAGBMG@unknown@+4
  00038	66 89 48 04	 mov	 WORD PTR [eax+4], cx
  0003c	8a 0d 06 00 00
	00		 mov	 cl, BYTE PTR ??_C@_07CIFAGBMG@unknown@+6
  00042	88 48 06	 mov	 BYTE PTR [eax+6], cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00045	c6 40 07 00	 mov	 BYTE PTR [eax+7], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 591  : 	virtual std::string AlgorithmName() const {return "unknown";}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::Algorithm::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1Algorithm@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Algorithm@CryptoPP@@UAE@XZ PROC			; CryptoPP::Algorithm::~Algorithm, COMDAT
; _this$ = ecx

; 573  : 	virtual ~Algorithm() {}

  00000	c2 00 00	 ret	 0
??1Algorithm@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Algorithm::~Algorithm
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
_TEXT	SEGMENT
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Clone@Clonable@CryptoPP@@UBEPAV12@XZ PROC		; CryptoPP::Clonable::Clone, COMDAT
; _this$ = ecx

; 566  : 	virtual Clonable* Clone() const {throw NotImplemented("Clone() is not implemented yet.");}	// TODO: make this =0

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4@
  0002d	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00030	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00035	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	50		 push	 eax
  00040	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00043	e8 00 00 00 00	 call	 ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
  00048	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  0004d	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@Clone:
  00056	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@Clonable@CryptoPP@@UBEPAV12@XZ ENDP		; CryptoPP::Clonable::Clone
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1Clonable@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Clonable@CryptoPP@@UAE@XZ PROC			; CryptoPP::Clonable::~Clonable, COMDAT
; _this$ = ecx

; 559  : 	virtual ~Clonable() {}

  00000	c2 00 00	 ret	 0
??1Clonable@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Clonable::~Clonable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3209 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00004	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  00007	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3209 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, _In_z_ const _Elem* const _Right) {

  00009	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0000a	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000d	0f 1f 00	 npad	 3
$LL39@operator:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL39@operator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00017	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0001a	2b c6		 sub	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0001c	50		 push	 eax
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3210 :     return _STD move(_Left.append(_Right));

  00023	8b c8		 mov	 ecx, eax
  00025	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3210 :     return _STD move(_Left.append(_Right));

  0002b	5e		 pop	 esi

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0002c	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0002f	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00036	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0003d	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00040	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00043	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  00048	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  0004d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00054	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  0005b	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 3211 : }

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GNameValuePairs@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNameValuePairs@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::NameValuePairs::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GNameValuePairs@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::NameValuePairs::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z
_TEXT	SEGMENT
$T2 = -88						; size = 48
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_stored$ = 12						; size = 4
_retrieving$ = 16					; size = 4
?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z PROC ; CryptoPP::NameValuePairs::ThrowIfTypeMismatch, COMDAT

; 426  : 		{if (stored != retrieving) throw ValueTypeMismatch(name, stored, retrieving);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 7d 10	 mov	 edi, DWORD PTR _retrieving$[ebp]
  0002e	8b 75 0c	 mov	 esi, DWORD PTR _stored$[ebp]
  00031	8b 5d 08	 mov	 ebx, DWORD PTR _name$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h

; 105  :         return __std_type_info_compare(&_Data, &_Other._Data) != 0;

  00034	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00037	50		 push	 eax
  00038	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ___std_type_info_compare
  00041	83 c4 08	 add	 esp, 8
  00044	85 c0		 test	 eax, eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 426  : 		{if (stored != retrieving) throw ValueTypeMismatch(name, stored, retrieving);}

  00046	75 1c		 jne	 SHORT $LN11@ThrowIfTyp
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	33 cd		 xor	 ecx, ebp
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
$LN11@ThrowIfTyp:
  00064	53		 push	 ebx
  00065	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00068	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006d	57		 push	 edi
  0006e	56		 push	 esi
  0006f	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00072	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00079	50		 push	 eax
  0007a	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  0007d	e8 00 00 00 00	 call	 ??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
  00082	68 00 00 00 00	 push	 OFFSET __TI4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
  00087	8d 45 a8	 lea	 eax, DWORD PTR $T2[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN9@ThrowIfTyp:
  00090	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z ENDP ; CryptoPP::NameValuePairs::ThrowIfTypeMismatch
; Function compile flags: /Ogtp
;	COMDAT ??_GValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN15@scalar
  00011	6a 30		 push	 48			; 00000030H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN15@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::NameValuePairs::ValueTypeMismatch::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@
  0006f	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00072	89 47 28	 mov	 DWORD PTR [edi+40], eax
  00075	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00078	89 47 2c	 mov	 DWORD PTR [edi+44], eax
  0007b	8b c7		 mov	 eax, edi
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z ENDP ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
; Function compile flags: /Ogtp
;	COMDAT ??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::~ValueTypeMismatch, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ ENDP ; CryptoPP::NameValuePairs::ValueTypeMismatch::~ValueTypeMismatch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z
_TEXT	SEGMENT
_this$GSCopy$ = -180					; size = 4
$T2 = -180						; size = 1
_retrieving$GSCopy$1$ = -176				; size = 4
$T3 = -172						; size = 4
_stored$GSCopy$1$ = -168				; size = 4
_this$ = -164						; size = 4
$T4 = -164						; size = 4
$T5 = -160						; size = 24
$T6 = -136						; size = 24
$T7 = -112						; size = 24
$T8 = -88						; size = 24
$T9 = -64						; size = 24
$T10 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_stored$ = 12						; size = 4
_retrieving$ = 16					; size = 4
??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch, COMDAT
; _this$ = ecx

; 309  : 			, m_stored(stored), m_retrieving(retrieving) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f1		 mov	 esi, ecx
  0002f	89 b5 5c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], esi
  00035	8b 45 0c	 mov	 eax, DWORD PTR _stored$[ebp]
  00038	8b 7d 08	 mov	 edi, DWORD PTR _name$[ebp]
  0003b	89 85 58 ff ff
	ff		 mov	 DWORD PTR _stored$GSCopy$1$[ebp], eax
  00041	8b 45 10	 mov	 eax, DWORD PTR _retrieving$[ebp]
  00044	89 85 50 ff ff
	ff		 mov	 DWORD PTR _retrieving$GSCopy$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h

; 119  :         return __std_type_info_name(&_Data, &__type_info_root_node);

  0004a	83 c0 04	 add	 eax, 4
  0004d	68 00 00 00 00	 push	 OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
  00052	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 309  : 			, m_stored(stored), m_retrieving(retrieving) {}

  00053	89 b5 4c ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h

; 119  :         return __std_type_info_name(&_Data, &__type_info_root_node);

  00059	e8 00 00 00 00	 call	 ___std_type_info_name
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 308  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  0005e	89 85 5c ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h

; 119  :         return __std_type_info_name(&_Data, &__type_info_root_node);

  00064	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _stored$GSCopy$1$[ebp]
  0006a	83 c0 04	 add	 eax, 4
  0006d	68 00 00 00 00	 push	 OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ___std_type_info_name
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3127 :     const auto _Right_size = _Right.size();

  00078	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h

; 119  :         return __std_type_info_name(&_Data, &__type_info_root_node);

  0007b	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 308  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  0007e	89 85 54 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3128 :     if (_Right.max_size() - _Right_size < _Left_size) {

  00084	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00089	2b c1		 sub	 eax, ecx
  0008b	83 f8 23	 cmp	 eax, 35			; 00000023H
  0008e	0f 82 98 03 00
	00		 jb	 $LN462@ValueTypeM

; 434  :         return _Myres > _Small_string_capacity;

  00094	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00098	8b c7		 mov	 eax, edi

; 426  :         if (_Large_mode_engaged()) {

  0009a	76 02		 jbe	 SHORT $LN28@ValueTypeM

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0009c	8b 07		 mov	 eax, DWORD PTR [edi]
$LN28@ValueTypeM:

; 3132 :     return {_String_constructor_concat_tag{}, _Right, _Left, _Left_size, _Right.c_str(), _Right_size};

  0009e	51		 push	 ecx
  0009f	50		 push	 eax
  000a0	6a 23		 push	 35			; 00000023H
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LNMKHLKF@NameValuePairs?3?5type?5mismatch?5f@
  000a7	57		 push	 edi
  000a8	ff b5 4c ff ff
	ff		 push	 DWORD PTR $T2[ebp]
  000ae	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  000b4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000b9	6a 0b		 push	 11			; 0000000bH
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PGGGIJHH@?8?0?5stored?5?8@
  000c0	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 308  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  000c6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000cd	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000d2	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0
  000d9	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000dc	0f 11 45 90	 movups	 XMMWORD PTR $T7[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000e0	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000e7	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000ea	0f 11 45 90	 movups	 XMMWORD PTR $T7[ebp], xmm0
  000ee	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000f3	66 0f d6 45 a0	 movq	 QWORD PTR $T7[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  000f8	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  000ff	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00106	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00109	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR $T3[ebp]
  0010f	8b ca		 mov	 ecx, edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 308  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  00111	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00115	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL457@ValueTypeM:
  00118	8a 01		 mov	 al, BYTE PTR [ecx]
  0011a	41		 inc	 ecx
  0011b	84 c0		 test	 al, al
  0011d	75 f9		 jne	 SHORT $LL457@ValueTypeM
  0011f	2b cf		 sub	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00121	51		 push	 ecx
  00122	52		 push	 edx
  00123	8d 4d 90	 lea	 ecx, DWORD PTR $T7[ebp]
  00126	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0012b	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0
  00132	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00135	0f 11 45 a8	 movups	 XMMWORD PTR $T8[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00139	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00140	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00143	0f 11 45 a8	 movups	 XMMWORD PTR $T8[ebp], xmm0
  00147	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0014c	66 0f d6 45 b8	 movq	 QWORD PTR $T8[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00151	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00158	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  0015f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00162	6a 17		 push	 23			; 00000017H
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CPJAGCKP@?8?0?5trying?5to?5retrieve?5?8@
  00169	8d 4d a8	 lea	 ecx, DWORD PTR $T8[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 308  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  0016c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00170	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00175	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+16], 0
  0017c	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0017f	0f 11 45 c0	 movups	 XMMWORD PTR $T9[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00183	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0018a	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0018d	0f 11 45 c0	 movups	 XMMWORD PTR $T9[ebp], xmm0
  00191	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00196	66 0f d6 45 d0	 movq	 QWORD PTR $T9[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  0019b	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  001a2	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  001a9	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  001ac	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR $T4[ebp]
  001b2	8b ca		 mov	 ecx, edx
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 308  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  001b4	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  001b8	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  001bb	0f 1f 44 00 00	 npad	 5
$LL458@ValueTypeM:
  001c0	8a 01		 mov	 al, BYTE PTR [ecx]
  001c2	41		 inc	 ecx
  001c3	84 c0		 test	 al, al
  001c5	75 f9		 jne	 SHORT $LL458@ValueTypeM
  001c7	2b cf		 sub	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  001c9	51		 push	 ecx
  001ca	52		 push	 edx
  001cb	8d 4d c0	 lea	 ecx, DWORD PTR $T9[ebp]
  001ce	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 498  :     size_type _Mysize = 0; // current length of string (size)

  001d3	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+16], 0
  001da	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001dd	0f 11 45 d8	 movups	 XMMWORD PTR $T10[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  001e1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  001e8	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001eb	0f 11 45 d8	 movups	 XMMWORD PTR $T10[ebp], xmm0
  001ef	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  001f4	66 0f d6 45 e8	 movq	 QWORD PTR $T10[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  001f9	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00200	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00207	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0020a	6a 01		 push	 1
  0020c	68 00 00 00 00	 push	 OFFSET ??_C@_01GEODFPGF@?8@
  00211	8d 4d d8	 lea	 ecx, DWORD PTR $T10[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 308  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  00214	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00218	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0021d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00220	0f 11 85 78 ff
	ff ff		 movups	 XMMWORD PTR $T6[ebp], xmm0
  00227	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0022c	66 0f d6 45 88	 movq	 QWORD PTR $T6[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00231	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00238	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  0023f	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 308  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  00242	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h

; 54   :         : _Data()

  00245	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 183  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  0024a	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00250	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00254	50		 push	 eax
  00255	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00258	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  0025e	c7 46 0c 01 00
	00 00		 mov	 DWORD PTR [esi+12], 1
  00265	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0026a	8b 4d 8c	 mov	 ecx, DWORD PTR $T6[ebp+20]
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 205  : 	explicit InvalidArgument(const std::string &s) : Exception(INVALID_ARGUMENT, s) {}

  0026d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InvalidArgument@CryptoPP@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00273	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00276	76 2f		 jbe	 SHORT $LN255@ValueTypeM
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00278	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0027e	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0027f	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00281	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00287	72 14		 jb	 SHORT $LN266@ValueTypeM

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00289	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0028c	83 c1 23	 add	 ecx, 35			; 00000023H
  0028f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00291	83 c0 fc	 add	 eax, -4			; fffffffcH
  00294	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00297	0f 87 94 01 00
	00		 ja	 $LN448@ValueTypeM
$LN266@ValueTypeM:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0029d	51		 push	 ecx
  0029e	52		 push	 edx
  0029f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002a4	83 c4 08	 add	 esp, 8
$LN255@ValueTypeM:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002a7	8b 4d ec	 mov	 ecx, DWORD PTR $T10[ebp+20]
  002aa	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  002ad	76 2c		 jbe	 SHORT $LN292@ValueTypeM
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002af	8b 55 d8	 mov	 edx, DWORD PTR $T10[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  002b2	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002b3	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  002b5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002bb	72 14		 jb	 SHORT $LN303@ValueTypeM

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002bd	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002c0	83 c1 23	 add	 ecx, 35			; 00000023H
  002c3	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002c5	83 c0 fc	 add	 eax, -4			; fffffffcH
  002c8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002cb	0f 87 60 01 00
	00		 ja	 $LN448@ValueTypeM
$LN303@ValueTypeM:

; 289  :         ::operator delete(_Ptr, _Bytes);

  002d1	51		 push	 ecx
  002d2	52		 push	 edx
  002d3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002d8	83 c4 08	 add	 esp, 8
$LN292@ValueTypeM:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002db	8b 4d d4	 mov	 ecx, DWORD PTR $T9[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  002de	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  002e5	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T10[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  002ec	c6 45 d8 00	 mov	 BYTE PTR $T10[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  002f0	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  002f3	76 2c		 jbe	 SHORT $LN329@ValueTypeM
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002f5	8b 55 c0	 mov	 edx, DWORD PTR $T9[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  002f8	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002f9	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  002fb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00301	72 14		 jb	 SHORT $LN340@ValueTypeM

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00303	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00306	83 c1 23	 add	 ecx, 35			; 00000023H
  00309	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0030b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0030e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00311	0f 87 1a 01 00
	00		 ja	 $LN448@ValueTypeM
$LN340@ValueTypeM:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00317	51		 push	 ecx
  00318	52		 push	 edx
  00319	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0031e	83 c4 08	 add	 esp, 8
$LN329@ValueTypeM:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00321	8b 4d bc	 mov	 ecx, DWORD PTR $T8[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  00324	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0032b	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T9[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00332	c6 45 c0 00	 mov	 BYTE PTR $T9[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  00336	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00339	76 2c		 jbe	 SHORT $LN366@ValueTypeM
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0033b	8b 55 a8	 mov	 edx, DWORD PTR $T8[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0033e	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0033f	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00341	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00347	72 14		 jb	 SHORT $LN377@ValueTypeM

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00349	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0034c	83 c1 23	 add	 ecx, 35			; 00000023H
  0034f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00351	83 c0 fc	 add	 eax, -4			; fffffffcH
  00354	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00357	0f 87 d4 00 00
	00		 ja	 $LN448@ValueTypeM
$LN377@ValueTypeM:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0035d	51		 push	 ecx
  0035e	52		 push	 edx
  0035f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00364	83 c4 08	 add	 esp, 8
$LN366@ValueTypeM:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00367	8b 4d a4	 mov	 ecx, DWORD PTR $T7[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  0036a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00371	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00378	c6 45 a8 00	 mov	 BYTE PTR $T8[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  0037c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0037f	76 2c		 jbe	 SHORT $LN403@ValueTypeM
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00381	8b 55 90	 mov	 edx, DWORD PTR $T7[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00384	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00385	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00387	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0038d	72 14		 jb	 SHORT $LN414@ValueTypeM

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0038f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00392	83 c1 23	 add	 ecx, 35			; 00000023H
  00395	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00397	83 c0 fc	 add	 eax, -4			; fffffffcH
  0039a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0039d	0f 87 8e 00 00
	00		 ja	 $LN448@ValueTypeM
$LN414@ValueTypeM:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003a3	51		 push	 ecx
  003a4	52		 push	 edx
  003a5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003aa	83 c4 08	 add	 esp, 8
$LN403@ValueTypeM:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  003ad	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  003b3	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  003ba	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003c1	c6 45 90 00	 mov	 BYTE PTR $T7[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  003c5	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  003c8	76 2b		 jbe	 SHORT $LN440@ValueTypeM
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003ca	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  003d0	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003d1	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  003d3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003d9	72 10		 jb	 SHORT $LN451@ValueTypeM

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003db	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003de	83 c1 23	 add	 ecx, 35			; 00000023H
  003e1	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003e3	83 c0 fc	 add	 eax, -4			; fffffffcH
  003e6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003e9	77 46		 ja	 SHORT $LN448@ValueTypeM
$LN451@ValueTypeM:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003eb	51		 push	 ecx
  003ec	52		 push	 edx
  003ed	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003f2	83 c4 08	 add	 esp, 8
$LN440@ValueTypeM:
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 309  : 			, m_stored(stored), m_retrieving(retrieving) {}

  003f5	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _stored$GSCopy$1$[ebp]
  003fb	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _retrieving$GSCopy$1$[ebp]
  00401	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00404	8b c6		 mov	 eax, esi
  00406	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@
  0040c	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx
  0040f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00412	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00419	59		 pop	 ecx
  0041a	5f		 pop	 edi
  0041b	5e		 pop	 esi
  0041c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0041f	33 cd		 xor	 ecx, ebp
  00421	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00426	8b e5		 mov	 esp, ebp
  00428	5d		 pop	 ebp
  00429	c2 0c 00	 ret	 12			; 0000000cH
$LN462@ValueTypeM:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3129 :         _Xlen_string();

  0042c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN448@ValueTypeM:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00431	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN460@ValueTypeM:
  00436	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$0:
  00000	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$1:
  0000b	8d 4d 90	 lea	 ecx, DWORD PTR $T7[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$2:
  00013	8d 4d a8	 lea	 ecx, DWORD PTR $T8[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$3:
  0001b	8d 4d c0	 lea	 ecx, DWORD PTR $T9[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$4:
  00023	8d 4d d8	 lea	 ecx, DWORD PTR $T10[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$5:
  0002b	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00031	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$29:
  00036	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0003c	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00041	cc		 int	 3
  00042	cc		 int	 3
  00043	cc		 int	 3
  00044	cc		 int	 3
  00045	cc		 int	 3
__ehhandler$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z:
  00046	90		 npad	 1
  00047	90		 npad	 1
  00048	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004f	8b 8a 4c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-180]
  00055	33 c8		 xor	 ecx, eax
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0005f	33 c8		 xor	 ecx, eax
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z
  0006b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z ENDP ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1NameValuePairs@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1NameValuePairs@CryptoPP@@UAE@XZ PROC			; CryptoPP::NameValuePairs::~NameValuePairs, COMDAT
; _this$ = ecx

; 296  : 	virtual ~NameValuePairs() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NameValuePairs@CryptoPP@@6B@
  00006	c3		 ret	 0
??1NameValuePairs@CryptoPP@@UAE@XZ ENDP			; CryptoPP::NameValuePairs::~NameValuePairs
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GNotImplemented@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNotImplemented@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::NotImplemented::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN10@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GNotImplemented@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::NotImplemented::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0NotImplemented@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::NotImplemented::NotImplemented, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7NotImplemented@CryptoPP@@6B@
  0006f	8b c7		 mov	 eax, edi
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0NotImplemented@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::NotImplemented::NotImplemented
; Function compile flags: /Ogtp
;	COMDAT ??1NotImplemented@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1NotImplemented@CryptoPP@@UAE@XZ PROC			; CryptoPP::NotImplemented::~NotImplemented, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
??1NotImplemented@CryptoPP@@UAE@XZ ENDP			; CryptoPP::NotImplemented::~NotImplemented
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CryptoPP::NotImplemented::NotImplemented, COMDAT
; _this$ = ecx

; 226  : 	explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h

; 54   :         : _Data()

  0002c	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 183  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  00031	ff 75 08	 push	 DWORD PTR _s$[ebp]
  00034	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  00044	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 226  : 	explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}

  00050	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NotImplemented@CryptoPP@@6B@
  00056	8b c6		 mov	 eax, esi
  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	5e		 pop	 esi
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CryptoPP::NotImplemented::NotImplemented
; Function compile flags: /Ogtp
;	COMDAT ??_GInvalidArgument@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GInvalidArgument@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::InvalidArgument::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN10@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GInvalidArgument@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::InvalidArgument::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::InvalidArgument::InvalidArgument, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7InvalidArgument@CryptoPP@@6B@
  0006f	8b c7		 mov	 eax, edi
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::InvalidArgument::InvalidArgument
; Function compile flags: /Ogtp
;	COMDAT ??1InvalidArgument@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1InvalidArgument@CryptoPP@@UAE@XZ PROC		; CryptoPP::InvalidArgument::~InvalidArgument, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
??1InvalidArgument@CryptoPP@@UAE@XZ ENDP		; CryptoPP::InvalidArgument::~InvalidArgument
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CryptoPP::InvalidArgument::InvalidArgument, COMDAT
; _this$ = ecx

; 205  : 	explicit InvalidArgument(const std::string &s) : Exception(INVALID_ARGUMENT, s) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h

; 54   :         : _Data()

  0002c	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 183  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  00031	ff 75 08	 push	 DWORD PTR _s$[ebp]
  00034	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
  00044	c7 46 0c 01 00
	00 00		 mov	 DWORD PTR [esi+12], 1
  0004b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 205  : 	explicit InvalidArgument(const std::string &s) : Exception(INVALID_ARGUMENT, s) {}

  00050	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InvalidArgument@CryptoPP@@6B@
  00056	8b c6		 mov	 eax, esi
  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	5e		 pop	 esi
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CryptoPP::InvalidArgument::InvalidArgument
; Function compile flags: /Ogtp
;	COMDAT ??_GException@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GException@CryptoPP@@UAEPAXI@Z PROC			; CryptoPP::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GException@CryptoPP@@UAEPAXI@Z ENDP			; CryptoPP::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0Exception@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Exception@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::Exception::Exception, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@CryptoPP@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00030	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :     {

  00033	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	50		 push	 eax
  0003a	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0003e	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ___std_exception_copy
  00047	83 c4 08	 add	 esp, 8
  0004a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7Exception@CryptoPP@@6B@
  00050	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00053	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00056	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00059	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  0005c	50		 push	 eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00069	8b c7		 mov	 eax, edi
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@CryptoPP@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0Exception@CryptoPP@@QAE@ABV01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@CryptoPP@@QAE@ABV01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::Exception::Exception
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ?what@Exception@CryptoPP@@UBEPBDXZ
_TEXT	SEGMENT
?what@Exception@CryptoPP@@UBEPBDXZ PROC			; CryptoPP::Exception::what, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00000	83 79 24 0f	 cmp	 DWORD PTR [ecx+36], 15	; 0000000fH

; 2328 :         return _Mypair._Myval2._Myptr();

  00004	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 426  :         if (_Large_mode_engaged()) {

  00007	76 02		 jbe	 SHORT $LN8@what
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 186  : 	const char *what() const throw() {return (m_what.c_str());}

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@what:
  0000b	c3		 ret	 0
?what@Exception@CryptoPP@@UBEPBDXZ ENDP			; CryptoPP::Exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h
;	COMDAT ??1Exception@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
??1Exception@CryptoPP@@UAE@XZ PROC			; CryptoPP::Exception::~Exception, COMDAT
; _this$ = ecx

; 180  : 	virtual ~Exception() throw() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@CryptoPP@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00009	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0000c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0000f	76 28		 jbe	 SHORT $LN24@Exception
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00014	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN35@Exception

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 32		 ja	 SHORT $LN32@Exception

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN35@Exception:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
$LN24@Exception:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h

; 91   :         __std_exception_destroy(&_Data);

  00039	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0003c	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00043	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004a	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h

; 91   :         __std_exception_destroy(&_Data);

  0004e	50		 push	 eax
  0004f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00055	e8 00 00 00 00	 call	 ___std_exception_destroy
  0005a	83 c4 04	 add	 esp, 4
  0005d	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\extern\include\cryptopp\cryptlib.h

; 180  : 	virtual ~Exception() throw() {}

  0005e	c3		 ret	 0
$LN32@Exception:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@Exception:
  00064	cc		 int	 3
??1Exception@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Exception::~Exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
;	COMDAT ??$hash_value@K@boost@@YAIK@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$hash_value@K@boost@@YAIK@Z PROC			; boost::hash_value<unsigned long>, COMDAT

; 359  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 360  :         return static_cast<std::size_t>(v);

  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]

; 361  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$hash_value@K@boost@@YAIK@Z ENDP			; boost::hash_value<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
$T1 = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 847  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 848  :         auto& _My_data = _Mypair._Myval2;
; 849  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 850  : 
; 851  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 852  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 853  :         } else {
; 854  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 855  :         }
; 856  : 
; 857  :         if (_Count > max_size()) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00010	0f 87 95 00 00
	00		 ja	 $LN40@Construct

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00016	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00019	77 21		 ja	 SHORT $LN3@Construct
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0001b	56		 push	 esi
  0001c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0001f	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00023	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
  00036	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	57		 push	 edi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003d	8b fe		 mov	 edi, esi
  0003f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00042	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 12		 jbe	 SHORT $LN9@Construct

; 2944 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	eb 26		 jmp	 SHORT $LN38@Construct
$LN9@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005c	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00061	3b f8		 cmp	 edi, eax
  00063	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00066	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00069	85 c0		 test	 eax, eax
  0006b	74 18		 je	 SHORT $LN37@Construct
$LN23@Construct:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0006d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00072	72 08		 jb	 SHORT $LN24@Construct

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007a	eb 06		 jmp	 SHORT $LN38@Construct
$LN24@Construct:

; 136  :         return ::operator new(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN38@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00082	83 c4 04	 add	 esp, 4
$LN37@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	56		 push	 esi
  00086	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00089	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0008d	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0008f	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  00092	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00095	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0009a	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a0	5f		 pop	 edi
  000a1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
  000a5	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  000a6	5b		 pop	 ebx
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@Construct:

; 858  :             _Xlen_string(); // result too long

  000ab	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN36@Construct:
  000b0	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
;	COMDAT ?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -48				; size = 4
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::GetExtension, COMDAT

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	0f 57 c0	 xorps	 xmm0, xmm0
  00030	8b 45 0c	 mov	 eax, DWORD PTR _str$[ebp]
  00033	89 75 d0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  00036	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003d	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00040	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00047	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 836  :         _My_data._Mysize = 0;

  0004e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00055	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0005c	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 295  : 	return strExtension;

  0005f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00069	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00070	85 c9		 test	 ecx, ecx
  00072	0f 84 0a 01 00
	00		 je	 $LN147@GetExtensi

; 287  : 		for (size_t i = nLength - 1; i > 0 && str[i] != '/'; i--)

  00078	83 c1 ff	 add	 ecx, -1
  0007b	0f 84 01 01 00
	00		 je	 $LN147@GetExtensi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00081	8b 78 14	 mov	 edi, DWORD PTR [eax+20]
$LL4@GetExtensi:

; 416  :         value_type* _Result = _Bx._Buf;

  00084	8b d0		 mov	 edx, eax

; 434  :         return _Myres > _Small_string_capacity;

  00086	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00089	76 02		 jbe	 SHORT $LN172@GetExtensi

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0008b	8b 10		 mov	 edx, DWORD PTR [eax]
$LN172@GetExtensi:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 287  : 		for (size_t i = nLength - 1; i > 0 && str[i] != '/'; i--)

  0008d	80 3c 0a 2f	 cmp	 BYTE PTR [edx+ecx], 47	; 0000002fH
  00091	0f 84 eb 00 00
	00		 je	 $LN147@GetExtensi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  00097	8b d0		 mov	 edx, eax

; 434  :         return _Myres > _Small_string_capacity;

  00099	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0009c	76 02		 jbe	 SHORT $LN171@GetExtensi

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0009e	8b 10		 mov	 edx, DWORD PTR [eax]
$LN171@GetExtensi:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 288  : 			if (str[i] == '.')

  000a0	80 3c 0a 2e	 cmp	 BYTE PTR [edx+ecx], 46	; 0000002eH
  000a4	74 0a		 je	 SHORT $LN165@GetExtensi

; 287  : 		for (size_t i = nLength - 1; i > 0 && str[i] != '/'; i--)

  000a6	83 e9 01	 sub	 ecx, 1
  000a9	75 d9		 jne	 SHORT $LL4@GetExtensi

; 288  : 			if (str[i] == '.')

  000ab	e9 d2 00 00 00	 jmp	 $LN147@GetExtensi
$LN165@GetExtensi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000b0	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  000b3	76 02		 jbe	 SHORT $LN55@GetExtensi

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000b5	8b 00		 mov	 eax, DWORD PTR [eax]
$LN55@GetExtensi:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 290  : 				strExtension = string(str.c_str( ) + i + 1);

  000b7	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000ba	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 290  : 				strExtension = string(str.c_str( ) + i + 1);

  000c1	03 d0		 add	 edx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000c3	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  000ca	8b ca		 mov	 ecx, edx
  000cc	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000cf	0f 11 45 d8	 movups	 XMMWORD PTR $T3[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  000d3	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL173@GetExtensi:
  000d6	8a 01		 mov	 al, BYTE PTR [ecx]
  000d8	41		 inc	 ecx
  000d9	84 c0		 test	 al, al
  000db	75 f9		 jne	 SHORT $LL173@GetExtensi
  000dd	2b cf		 sub	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000df	51		 push	 ecx
  000e0	52		 push	 edx
  000e1	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  000e4	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 1202 :         if (this == _STD addressof(_Right)) {

  000e9	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  000ec	3b f0		 cmp	 esi, eax
  000ee	74 60		 je	 SHORT $LN174@GetExtensi

; 434  :         return _Myres > _Small_string_capacity;

  000f0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000f3	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000f6	76 2b		 jbe	 SHORT $LN98@GetExtensi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f8	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000fa	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000fb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00101	72 16		 jb	 SHORT $LN109@GetExtensi

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00103	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00106	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00109	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0010e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00111	0f 87 88 00 00
	00		 ja	 $LN155@GetExtensi

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00117	8b c2		 mov	 eax, edx
$LN109@GetExtensi:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00119	51		 push	 ecx
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00120	83 c4 08	 add	 esp, 8
$LN98@GetExtensi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00123	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T3[ebp]

; 3054 :         _My_data._Mysize = 0;

  00127	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0012e	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00133	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0013a	c6 06 00	 mov	 BYTE PTR [esi], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0013d	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00140	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0
  00144	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T3[ebp+16]
  00149	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1202 :         if (this == _STD addressof(_Right)) {

  0014e	eb 03		 jmp	 SHORT $LN115@GetExtensi
$LN174@GetExtensi:
  00150	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp+20]
$LN115@GetExtensi:

; 434  :         return _Myres > _Small_string_capacity;

  00153	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00156	76 2a		 jbe	 SHORT $LN147@GetExtensi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00158	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0015b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0015e	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00160	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00166	72 10		 jb	 SHORT $LN158@GetExtensi

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00168	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0016b	83 c1 23	 add	 ecx, 35			; 00000023H
  0016e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00170	83 c0 fc	 add	 eax, -4			; fffffffcH
  00173	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00176	77 27		 ja	 SHORT $LN155@GetExtensi
$LN158@GetExtensi:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00178	51		 push	 ecx
  00179	52		 push	 edx
  0017a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0017f	83 c4 08	 add	 esp, 8
$LN147@GetExtensi:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 295  : 	return strExtension;

  00182	8b c6		 mov	 eax, esi

; 296  : }

  00184	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00187	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018e	59		 pop	 ecx
  0018f	5f		 pop	 edi
  00190	5e		 pop	 esi
  00191	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00194	33 cd		 xor	 ecx, ebp
  00196	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
$LN155@GetExtensi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0019f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN176@GetExtensi:
  001a4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z$0:
  00000	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN9@GetExtensi
  0000c	83 65 d4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d d0	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN9@GetExtensi:
  00018	c3		 ret	 0
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
__ehhandler$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z:
  0001e	90		 npad	 1
  0001f	90		 npad	 1
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::GetExtension
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Old_size$1$ = -8					; size = 4
$T1 = -4						; size = 4
__Newcap$ = 8						; size = 4
$T2 = 8							; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 2428 :     void reserve(_CRT_GUARDOVERFLOW const size_type _Newcap = 0) { // determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2429 :         if (_Mypair._Myval2._Mysize > _Newcap) { // requested capacity is not large enough for current size, ignore

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newcap$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00010	89 45 f8	 mov	 DWORD PTR __Old_size$1$[ebp], eax
  00013	3b c3		 cmp	 eax, ebx
  00015	0f 87 54 01 00
	00		 ja	 $LN5@reserve

; 2430 :             return; // nothing to do
; 2431 :         }
; 2432 : 
; 2433 :         if (_Mypair._Myval2._Myres == _Newcap) { // we're already at the requested capacity

  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	89 55 08	 mov	 DWORD PTR $T2[ebp], edx
  00021	3b d3		 cmp	 edx, ebx
  00023	0f 84 46 01 00
	00		 je	 $LN5@reserve

; 2434 :             return; // nothing to do
; 2435 :         }
; 2436 : 
; 2437 :         if (_Mypair._Myval2._Myres < _Newcap) { // reallocate to grow

  00029	57		 push	 edi
  0002a	0f 83 f7 00 00
	00		 jae	 $LN4@reserve

; 2438 :             const size_type _Old_size = _Mypair._Myval2._Mysize;
; 2439 :             _Reallocate_grow_by(_Newcap - _Old_size,

  00030	8b cb		 mov	 ecx, ebx
  00032	2b c8		 sub	 ecx, eax

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00034	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00039	2b 45 f8	 sub	 eax, DWORD PTR __Old_size$1$[ebp]
  0003c	3b c1		 cmp	 eax, ecx
  0003e	0f 82 38 01 00
	00		 jb	 $LN123@reserve

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00044	8b fb		 mov	 edi, ebx
  00046	83 cf 0f	 or	 edi, 15			; 0000000fH
  00049	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0004f	76 12		 jbe	 SHORT $LN16@reserve

; 2944 :             return _Max;

  00051	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00056	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	eb 45		 jmp	 SHORT $LN121@reserve
$LN16@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00063	8b ca		 mov	 ecx, edx
  00065	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0006a	d1 e9		 shr	 ecx, 1
  0006c	2b c1		 sub	 eax, ecx
  0006e	3b d0		 cmp	 edx, eax
  00070	76 12		 jbe	 SHORT $LN17@reserve

; 2948 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 24		 jmp	 SHORT $LN121@reserve
$LN17@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00084	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00087	3b f8		 cmp	 edi, eax
  00089	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0008c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0008f	85 c0		 test	 eax, eax
  00091	74 1b		 je	 SHORT $LN120@reserve
$LN30@reserve:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00093	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00098	72 08		 jb	 SHORT $LN31@reserve

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a0	eb 06		 jmp	 SHORT $LN121@reserve
$LN31@reserve:

; 136  :         return ::operator new(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000a8	8b 55 08	 mov	 edx, DWORD PTR $T2[ebp]
  000ab	83 c4 04	 add	 esp, 4
$LN120@reserve:
  000ae	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b1	8b 5d f8	 mov	 ebx, DWORD PTR __Old_size$1$[ebp]
  000b4	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000b7	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000ba	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000bd	51		 push	 ecx
  000be	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000c1	76 49		 jbe	 SHORT $LN9@reserve

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000c3	8b 3e		 mov	 edi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	57		 push	 edi
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000cc	8b 4d 08	 mov	 ecx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d2	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000d3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000d9	72 16		 jb	 SHORT $LN59@reserve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000db	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000de	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e1	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e3	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000e6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000e9	0f 87 88 00 00
	00		 ja	 $LN95@reserve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ef	8b fa		 mov	 edi, edx
$LN59@reserve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f1	51		 push	 ecx
  000f2	57		 push	 edi
  000f3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2443 :             _Mypair._Myval2._Mysize = _Old_size;

  000f8	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000fb	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2443 :             _Mypair._Myval2._Mysize = _Old_size;

  000fe	89 06		 mov	 DWORD PTR [esi], eax
  00100	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi

; 2448 :             // deallocate everything; switch back to "small" mode
; 2449 :             _Become_small();
; 2450 :             return;
; 2451 :         }
; 2452 : 
; 2453 :         // ignore requests to reserve to [_Small_string_capacity + 1, _Myres)
; 2454 :     }

  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 04 00	 ret	 4
$LN9@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0010c	56		 push	 esi
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2443 :             _Mypair._Myval2._Mysize = _Old_size;

  00113	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00116	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2443 :             _Mypair._Myval2._Mysize = _Old_size;

  00119	89 06		 mov	 DWORD PTR [esi], eax
  0011b	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi

; 2448 :             // deallocate everything; switch back to "small" mode
; 2449 :             _Become_small();
; 2450 :             return;
; 2451 :         }
; 2452 : 
; 2453 :         // ignore requests to reserve to [_Small_string_capacity + 1, _Myres)
; 2454 :     }

  00120	5b		 pop	 ebx
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 04 00	 ret	 4
$LN4@reserve:

; 2444 :             return;
; 2445 :         }
; 2446 : 
; 2447 :         if (_Newcap <= _Small_string_capacity && _Mypair._Myval2._Large_mode_engaged()) {

  00127	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  0012a	77 42		 ja	 SHORT $LN118@reserve

; 434  :         return _Myres > _Small_string_capacity;

  0012c	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 2444 :             return;
; 2445 :         }
; 2446 : 
; 2447 :         if (_Newcap <= _Small_string_capacity && _Mypair._Myval2._Large_mode_engaged()) {

  0012f	76 3d		 jbe	 SHORT $LN118@reserve

; 3030 :         const pointer _Ptr = _My_data._Bx._Ptr;

  00131	8b 3e		 mov	 edi, DWORD PTR [esi]

; 3031 :         _My_data._Bx._Switch_to_buf();
; 3032 :         _Traits::copy(_My_data._Bx._Buf, _Unfancy(_Ptr), _My_data._Mysize + 1);

  00133	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00134	50		 push	 eax
  00135	57		 push	 edi
  00136	56		 push	 esi
  00137	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0013c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00142	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00143	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00149	72 12		 jb	 SHORT $LN98@reserve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0014b	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  0014e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00151	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00153	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00156	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00159	77 1c		 ja	 SHORT $LN95@reserve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0015b	8b fa		 mov	 edi, edx
$LN98@reserve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0015d	51		 push	 ecx
  0015e	57		 push	 edi
  0015f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00164	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3035 :         _My_data._Myres = _Small_string_capacity;

  00167	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
$LN118@reserve:
  0016e	5f		 pop	 edi
$LN5@reserve:
  0016f	5e		 pop	 esi

; 2448 :             // deallocate everything; switch back to "small" mode
; 2449 :             _Become_small();
; 2450 :             return;
; 2451 :         }
; 2452 : 
; 2453 :         // ignore requests to reserve to [_Small_string_capacity + 1, _Myres)
; 2454 :     }

  00170	5b		 pop	 ebx
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 04 00	 ret	 4
$LN95@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN119@reserve:
  00181	cc		 int	 3
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__New_size$1$ = -16					; size = 4
tv520 = -16						; size = 4
__Old_size$1$ = -12					; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
tv510 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
tv505 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1486 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1487 :         // append [_Ptr, _Ptr + _Count)
; 1488 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1489 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 1490 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1491 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1493 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1494 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1507 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 1d 01 00
	00		 jb	 $LN98@append

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00062	8b f0		 mov	 esi, eax

; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  00064	89 45 f0	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00067	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00070	76 12		 jbe	 SHORT $LN23@append

; 2944 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 4b		 jmp	 SHORT $LN96@append
$LN23@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00084	8b c2		 mov	 eax, edx
  00086	d1 e8		 shr	 eax, 1
  00088	89 45 fc	 mov	 DWORD PTR tv510[ebp], eax
  0008b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00090	2b 45 fc	 sub	 eax, DWORD PTR tv510[ebp]
  00093	3b d0		 cmp	 edx, eax
  00095	76 12		 jbe	 SHORT $LN24@append

; 2948 :             return _Max;

  00097	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a7	eb 26		 jmp	 SHORT $LN96@append
$LN24@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR tv510[ebp]
  000ac	03 c2		 add	 eax, edx
  000ae	3b f0		 cmp	 esi, eax
  000b0	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000b6	85 c0		 test	 eax, eax
  000b8	74 1e		 je	 SHORT $LN95@append
$LN37@append:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ba	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bf	72 08		 jb	 SHORT $LN38@append

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c7	eb 06		 jmp	 SHORT $LN96@append
$LN38@append:

; 136  :         return ::operator new(_Bytes);

  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000cf	8b 55 f8	 mov	 edx, DWORD PTR $T1[ebp]
  000d2	83 c4 04	 add	 esp, 4
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
$LN95@append:
  000d8	8b 5d f0	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  000db	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000de	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  000e1	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000e4	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000e7	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  000ea	89 75 f0	 mov	 DWORD PTR tv520[ebp], esi
  000ed	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  000f0	89 45 0c	 mov	 DWORD PTR tv505[ebp], eax

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000f3	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
  000f6	51		 push	 ecx
  000f7	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000fa	76 56		 jbe	 SHORT $LN16@append

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000fc	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fe	56		 push	 esi
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _memcpy
  00105	53		 push	 ebx
  00106	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00109	ff 75 f0	 push	 DWORD PTR tv520[ebp]
  0010c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00111	8b 45 0c	 mov	 eax, DWORD PTR tv505[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00114	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00117	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0011a	41		 inc	 ecx

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011b	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00124	72 12		 jb	 SHORT $LN69@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00126	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00129	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0012c	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00131	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00134	77 4b		 ja	 SHORT $LN66@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00136	8b f2		 mov	 esi, edx
$LN69@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00138	51		 push	 ecx
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  0013f	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00142	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  00145	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00147	8b c7		 mov	 eax, edi
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN16@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00152	57		 push	 edi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	53		 push	 ebx
  0015a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0015d	56		 push	 esi
  0015e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00163	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00166	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00169	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1498 :         return _Reallocate_grow_by(

  0016c	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
  0016f	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00171	8b c7		 mov	 eax, edi
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
$LN98@append:

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00181	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@append:
  00186	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -4						; size = 4
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 1370 :     _CONSTEXPR20 basic_string& operator=(const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1371 :         if (this == _STD addressof(_Right)) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	3b f0		 cmp	 esi, eax
  0000e	0f 84 04 01 00
	00		 je	 $LN27@operator

; 434  :         return _Myres > _Small_string_capacity;

  00014	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH
  00018	57		 push	 edi

; 1372 :             return *this;
; 1373 :         }
; 1374 : 
; 1375 :         auto& _Al             = _Getal();
; 1376 :         const auto& _Right_al = _Right._Getal();
; 1377 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1378 :             if (_Al != _Right_al) {
; 1379 :                 auto&& _Alproxy       = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 1380 :                 auto&& _Right_alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Right_al);
; 1381 :                 _Container_proxy_ptr<_Alty> _New_proxy(_Right_alproxy, _Leave_proxy_unbound{}); // throws
; 1382 : 
; 1383 :                 const size_type _Right_size   = _Right._Mypair._Myval2._Mysize;
; 1384 :                 const _Elem* const _Right_ptr = _Right._Mypair._Myval2._Myptr();
; 1385 :                 if (_Right_size > _Small_string_capacity) {
; 1386 :                     size_type _New_capacity = _Calculate_growth(_Right_size, _Small_string_capacity, _Right.max_size());
; 1387 :                     auto _Right_al_non_const = _Right_al;
; 1388 :                     const pointer _New_ptr   = _Allocate_for_capacity(_Right_al_non_const, _New_capacity); // throws
; 1389 :                     _Traits::copy(_Unfancy(_New_ptr), _Right_ptr, _Right_size + 1);
; 1390 : 
; 1391 :                     _Tidy_deallocate();
; 1392 :                     _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);
; 1393 :                     _Mypair._Myval2._Mysize = _Right_size;
; 1394 :                     _Mypair._Myval2._Myres  = _New_capacity;
; 1395 :                     _ASAN_STRING_CREATE(*this);
; 1396 :                 } else {
; 1397 :                     _Tidy_deallocate();
; 1398 :                     _Traits::copy(_Mypair._Myval2._Bx._Buf, _Right_ptr, _Right_size + 1);
; 1399 :                     _Mypair._Myval2._Mysize = _Right_size;
; 1400 :                     _Mypair._Myval2._Myres  = _Small_string_capacity;
; 1401 :                 }
; 1402 : 
; 1403 :                 _Pocca(_Al, _Right_al);
; 1404 :                 _New_proxy._Bind(_Alproxy, _STD addressof(_Mypair._Myval2));
; 1405 :                 return *this;
; 1406 :             }
; 1407 :         }
; 1408 : 
; 1409 :         _Pocca(_Al, _Right_al);
; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00019	8b 78 10	 mov	 edi, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  0001c	76 05		 jbe	 SHORT $LN5@operator

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	89 45 08	 mov	 DWORD PTR __Right$[ebp], eax
$LN5@operator:

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  00023	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00026	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00029	53		 push	 ebx
  0002a	3b f9		 cmp	 edi, ecx
  0002c	77 26		 ja	 SHORT $LN12@operator

; 416  :         value_type* _Result = _Bx._Buf;

  0002e	8b de		 mov	 ebx, esi

; 434  :         return _Myres > _Small_string_capacity;

  00030	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00033	76 02		 jbe	 SHORT $LN15@operator

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00035	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN15@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00037	57		 push	 edi
  00038	50		 push	 eax
  00039	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  0003a	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0003d	e8 00 00 00 00	 call	 _memmove
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00045	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 1411 :         return *this;

  00049	8b c6		 mov	 eax, esi
  0004b	5b		 pop	 ebx
  0004c	5f		 pop	 edi

; 1412 :     }

  0004d	5e		 pop	 esi
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
$LN12@operator:

; 2962 :         if (_New_size > max_size()) {

  00054	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  0005a	0f 87 c6 00 00
	00		 ja	 $LN102@operator

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00060	8b df		 mov	 ebx, edi
  00062	83 cb 0f	 or	 ebx, 15			; 0000000fH
  00065	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 12		 jbe	 SHORT $LN33@operator

; 2944 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	eb 45		 jmp	 SHORT $LN100@operator
$LN33@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0007f	8b d1		 mov	 edx, ecx
  00081	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00086	d1 ea		 shr	 edx, 1
  00088	2b c2		 sub	 eax, edx
  0008a	3b c8		 cmp	 ecx, eax
  0008c	76 12		 jbe	 SHORT $LN34@operator

; 2948 :             return _Max;

  0008e	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00093	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009e	eb 24		 jmp	 SHORT $LN100@operator
$LN34@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a0	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  000a3	3b d8		 cmp	 ebx, eax
  000a5	0f 42 d8	 cmovb	 ebx, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000a8	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000ab	85 c0		 test	 eax, eax
  000ad	74 18		 je	 SHORT $LN99@operator
$LN47@operator:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000af	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b4	72 08		 jb	 SHORT $LN48@operator

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000bc	eb 06		 jmp	 SHORT $LN100@operator
$LN48@operator:

; 136  :         return ::operator new(_Bytes);

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN100@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000c4	83 c4 04	 add	 esp, 4
$LN99@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c7	57		 push	 edi
  000c8	ff 75 08	 push	 DWORD PTR __Right$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  000cb	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ce	8b d8		 mov	 ebx, eax
  000d0	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000d1	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  000d4	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d7	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000dc	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000df	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000e2	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000e6	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000e9	76 29		 jbe	 SHORT $LN26@operator

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000eb	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ee	8b 06		 mov	 eax, DWORD PTR [esi]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN76@operator

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 19		 ja	 SHORT $LN73@operator

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN76@operator:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN26@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2980 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00114	89 1e		 mov	 DWORD PTR [esi], ebx
  00116	5b		 pop	 ebx
  00117	5f		 pop	 edi
$LN27@operator:

; 1411 :         return *this;

  00118	8b c6		 mov	 eax, esi

; 1412 :     }

  0011a	5e		 pop	 esi
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 04 00	 ret	 4
$LN73@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00121	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN102@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  00126	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN98@operator:
  0012b	cc		 int	 3
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z
_TEXT	SEGMENT
__New_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__Source_of_al$ = 12					; size = 4
__Left_ptr$ = 16					; size = 4
__Left_size$ = 20					; size = 4
__Right_ptr$ = 24					; size = 4
__Right_size$ = 28					; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1028 :               _Alty_traits::select_on_container_copy_construction(_Source_of_al._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1029 :         _STL_INTERNAL_CHECK(_Left_size <= max_size());
; 1030 :         _STL_INTERNAL_CHECK(_Right_size <= max_size());
; 1031 :         _STL_INTERNAL_CHECK(_Right_size <= max_size() - _Left_size);
; 1032 :         const auto _New_size    = static_cast<size_type>(_Left_size + _Right_size);

  00004	8b 55 14	 mov	 edx, DWORD PTR __Left_size$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	53		 push	 ebx
  0000b	8b d9		 mov	 ebx, ecx
  0000d	8b 4d 1c	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  00010	56		 push	 esi
  00011	03 ca		 add	 ecx, edx

; 1033 :         size_type _New_capacity = _Small_string_capacity;

  00013	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  00018	89 4d fc	 mov	 DWORD PTR __New_size$1$[ebp], ecx

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0001b	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0001e	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00025	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 1028 :               _Alty_traits::select_on_container_copy_construction(_Source_of_al._Getal())) {

  0002c	57		 push	 edi

; 1034 :         auto& _My_data          = _Mypair._Myval2;
; 1035 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  0002d	8b fb		 mov	 edi, ebx

; 1036 :         auto&& _Alproxy         = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 1037 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data); // throws
; 1038 : 
; 1039 :         if (_New_capacity < _New_size) {

  0002f	3b ce		 cmp	 ecx, esi
  00031	76 56		 jbe	 SHORT $LN2@basic_stri

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00033	8b f1		 mov	 esi, ecx
  00035	83 ce 0f	 or	 esi, 15			; 0000000fH
  00038	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0003e	76 12		 jbe	 SHORT $LN18@basic_stri

; 2944 :             return _Max;

  00040	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00045	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00050	eb 2a		 jmp	 SHORT $LN47@basic_stri
$LN18@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00052	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00057	3b f0		 cmp	 esi, eax
  00059	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0005c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0005f	85 c0		 test	 eax, eax
  00061	75 04		 jne	 SHORT $LN32@basic_stri

; 228  :         return nullptr;

  00063	33 ff		 xor	 edi, edi
  00065	eb 20		 jmp	 SHORT $LN31@basic_stri
$LN32@basic_stri:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00067	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0006c	72 08		 jb	 SHORT $LN33@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00074	eb 06		 jmp	 SHORT $LN47@basic_stri
$LN33@basic_stri:

; 136  :         return ::operator new(_Bytes);

  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN47@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1043 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0007c	8b 55 14	 mov	 edx, DWORD PTR __Left_size$[ebp]
  0007f	8b f8		 mov	 edi, eax
  00081	8b 4d fc	 mov	 ecx, DWORD PTR __New_size$1$[ebp]
  00084	83 c4 04	 add	 esp, 4
$LN31@basic_stri:
  00087	89 3b		 mov	 DWORD PTR [ebx], edi
$LN2@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00089	52		 push	 edx
  0008a	ff 75 10	 push	 DWORD PTR __Left_ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1046 :         _My_data._Mysize = _New_size;

  0008d	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00090	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1047 :         _My_data._Myres  = _New_capacity;

  00091	89 73 14	 mov	 DWORD PTR [ebx+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00094	e8 00 00 00 00	 call	 _memcpy
  00099	ff 75 1c	 push	 DWORD PTR __Right_size$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1049 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  0009c	8b 45 14	 mov	 eax, DWORD PTR __Left_size$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009f	ff 75 18	 push	 DWORD PTR __Right_ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1049 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  000a2	03 c7		 add	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1050 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000aa	8b 45 fc	 mov	 eax, DWORD PTR __New_size$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ad	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1050 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000b0	c6 04 07 00	 mov	 BYTE PTR [edi+eax], 0

; 1051 :         _ASAN_STRING_CREATE(*this);
; 1052 :         _Proxy._Release();
; 1053 :     }

  000b4	8b c3		 mov	 eax, ebx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 18 00	 ret	 24			; 00000018H
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 744  :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 744  :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0000c	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 744  :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  0000e	57		 push	 edi

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000f	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00012	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00019	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001c	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LL19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00023	8a 08		 mov	 cl, BYTE PTR [eax]
  00025	40		 inc	 eax
  00026	84 c9		 test	 cl, cl
  00028	75 f9		 jne	 SHORT $LL19@basic_stri
  0002a	2b c7		 sub	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002c	8b ce		 mov	 ecx, esi
  0002e	50		 push	 eax
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 746  :     }

  00035	5f		 pop	 edi
  00036	8b c6		 mov	 eax, esi
  00038	5e		 pop	 esi
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 693  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000d	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00010	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00017	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 434  :         return _Myres > _Small_string_capacity;

  0001e	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00022	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  00025	76 05		 jbe	 SHORT $LN17@basic_stri

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00027	8b 00		 mov	 eax, DWORD PTR [eax]
  00029	89 45 08	 mov	 DWORD PTR __Right$[ebp], eax
$LN17@basic_stri:

; 857  :         if (_Count > max_size()) {

  0002c	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00032	0f 87 8d 00 00
	00		 ja	 $LN63@basic_stri

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00038	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  0003b	77 18		 ja	 SHORT $LN25@basic_stri

; 866  :             _My_data._Mysize = _Count;

  0003d	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00040	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00047	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  0004a	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  0004f	5f		 pop	 edi
  00050	5b		 pop	 ebx
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN25@basic_stri:
  00055	56		 push	 esi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00056	8b f3		 mov	 esi, ebx
  00058	83 ce 0f	 or	 esi, 15			; 0000000fH
  0005b	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00061	76 12		 jbe	 SHORT $LN31@basic_stri

; 2944 :             return _Max;

  00063	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00068	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00073	eb 2a		 jmp	 SHORT $LN61@basic_stri
$LN31@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00075	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0007a	3b f0		 cmp	 esi, eax
  0007c	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0007f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00082	85 c0		 test	 eax, eax
  00084	75 04		 jne	 SHORT $LN45@basic_stri

; 228  :         return nullptr;

  00086	33 c9		 xor	 ecx, ecx
  00088	eb 1a		 jmp	 SHORT $LN44@basic_stri
$LN45@basic_stri:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0008a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0008f	72 08		 jb	 SHORT $LN46@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00097	eb 06		 jmp	 SHORT $LN61@basic_stri
$LN46@basic_stri:

; 136  :         return ::operator new(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN61@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0009f	8b c8		 mov	 ecx, eax
  000a1	83 c4 04	 add	 esp, 4
$LN44@basic_stri:

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000a4	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000a7	89 0f		 mov	 DWORD PTR [edi], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax
  000aa	ff 75 08	 push	 DWORD PTR __Right$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  000ad	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b0	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 892  :         _My_data._Myres  = _New_capacity;

  000b1	89 77 14	 mov	 DWORD PTR [edi+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b4	e8 00 00 00 00	 call	 _memcpy
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  000bc	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  000bf	5f		 pop	 edi
  000c0	5b		 pop	 ebx
  000c1	5d		 pop	 ebp
  000c2	c2 04 00	 ret	 4
$LN63@basic_stri:

; 858  :             _Xlen_string(); // result too long

  000c5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN60@basic_stri:
  000ca	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 463  :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
