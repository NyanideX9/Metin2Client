; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterPack\Distribute\EterPackManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?NoPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoPath
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$hash_value@K@boost@@YAIK@Z			; boost::hash_value<unsigned long>
PUBLIC	??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
PUBLIC	??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
PUBLIC	??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
PUBLIC	??1CEterFileDict@@QAE@XZ			; CEterFileDict::~CEterFileDict
PUBLIC	??1?$CSingleton@VCEterPackManager@@@@UAE@XZ	; CSingleton<CEterPackManager>::~CSingleton<CEterPackManager>
PUBLIC	??_G?$CSingleton@VCEterPackManager@@@@UAEPAXI@Z	; CSingleton<CEterPackManager>::`scalar deleting destructor'
PUBLIC	??0CEterPackManager@@QAE@XZ			; CEterPackManager::CEterPackManager
PUBLIC	??1CEterPackManager@@UAE@XZ			; CEterPackManager::~CEterPackManager
PUBLIC	?SetCacheMode@CEterPackManager@@QAEXXZ		; CEterPackManager::SetCacheMode
PUBLIC	?SetRelativePathMode@CEterPackManager@@QAEXXZ	; CEterPackManager::SetRelativePathMode
PUBLIC	?LoadStaticCache@CEterPackManager@@QAEXPBD@Z	; CEterPackManager::LoadStaticCache
PUBLIC	?SetSearchMode@CEterPackManager@@QAEX_N@Z	; CEterPackManager::SetSearchMode
PUBLIC	?GetSearchMode@CEterPackManager@@QAEHXZ		; CEterPackManager::GetSearchMode
PUBLIC	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
PUBLIC	?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::GetFromPack
PUBLIC	?GetFromFile@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::GetFromFile
PUBLIC	?isExist@CEterPackManager@@QAE_NPBD@Z		; CEterPackManager::isExist
PUBLIC	?isExistInPack@CEterPackManager@@QAE_NPBD@Z	; CEterPackManager::isExistInPack
PUBLIC	?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z	; CEterPackManager::RegisterPack
PUBLIC	?RegisterRootPack@CEterPackManager@@QAEXPBD@Z	; CEterPackManager::RegisterRootPack
PUBLIC	?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z ; CEterPackManager::RegisterPackWhenPackMaking
PUBLIC	?DecryptPackIV@CEterPackManager@@QAE_NK@Z	; CEterPackManager::DecryptPackIV
PUBLIC	?GetRootPackFileName@CEterPackManager@@QAEPBDXZ	; CEterPackManager::GetRootPackFileName
PUBLIC	?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z ; CEterPackManager::WriteHybridCryptPackInfo
PUBLIC	?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z ; CEterPackManager::RetrieveHybridCryptPackKeys
PUBLIC	?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z ; CEterPackManager::RetrieveHybridCryptPackSDB
PUBLIC	?ArrangeMemoryMappedPack@CEterPackManager@@QAEXXZ ; CEterPackManager::ArrangeMemoryMappedPack
PUBLIC	?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEterPackManager::ConvertFileName
PUBLIC	?CompareName@CEterPackManager@@IAE_NPBDK0@Z	; CEterPackManager::CompareName
PUBLIC	?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z ; CEterPackManager::FindPack
PUBLIC	?__FindCache@CEterPackManager@@IAEPAUSCache@1@K@Z ; CEterPackManager::__FindCache
PUBLIC	?__ClearCacheMap@CEterPackManager@@IAEXXZ	; CEterPackManager::__ClearCacheMap
PUBLIC	?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z ; std::list<CEterPack *,std::allocator<CEterPack *> >::push_front
PUBLIC	?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::min_buckets_for_size
PUBLIC	?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::create_buckets
PUBLIC	??1?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::rehash_impl
PUBLIC	??0?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
PUBLIC	??1?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::~unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
PUBLIC	?find@?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::find
PUBLIC	?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
PUBLIC	?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
PUBLIC	??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
PUBLIC	?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
PUBLIC	??0?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >
PUBLIC	??1?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::~unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >
PUBLIC	?find@?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::find
PUBLIC	??_GCEterPackManager@@UAEPAXI@Z			; CEterPackManager::`scalar deleting destructor'
PUBLIC	??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *>
PUBLIC	??1FinderLock@@QAE@XZ				; FinderLock::~FinderLock
PUBLIC	??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_unique<std::pair<unsigned long const ,CEterPackManager::SCache> >
PUBLIC	??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >
PUBLIC	??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
PUBLIC	?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
PUBLIC	??$find_node_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABU?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::find_node_impl<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@1@@Z ; std::_Default_allocator_traits<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
PUBLIC	??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
PUBLIC	??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
PUBLIC	??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
PUBLIC	?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::create_node
PUBLIC	??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
PUBLIC	?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::create_node
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB ; boost::unordered::detail::prime_list_template<unsigned int>::value
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCEterPackManager@@@@6B@	; CSingleton<CEterPackManager>::`vftable'
PUBLIC	??_7CEterPackManager@@6B@			; CEterPackManager::`vftable'
PUBLIC	??_C@_0BN@HIHPGCNI@?$CFs?3?5Pack?5file?5does?5not?5exist@ ; `string'
PUBLIC	??_C@_0HF@OJFMMEDP@CEterPackManager?3?3RetrieveHybri@ ; `string'
PUBLIC	??_C@_0EE@JEJDAIPD@CEterPackManager?3?3WriteHybridCr@ ; `string'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
PUBLIC	??_R4CEterPackManager@@6B@			; CEterPackManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEterPackManager@@@8			; CEterPackManager `RTTI Type Descriptor'
PUBLIC	??_R3CEterPackManager@@8			; CEterPackManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEterPackManager@@8			; CEterPackManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEterPackManager@@8		; CEterPackManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCEterPackManager@@@@8 ; CSingleton<CEterPackManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCEterPackManager@@@@@8	; CSingleton<CEterPackManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCEterPackManager@@@@8	; CSingleton<CEterPackManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCEterPackManager@@@@8	; CSingleton<CEterPackManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCEterPackManager@@@@6B@	; CSingleton<CEterPackManager>::`RTTI Complete Object Locator'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@41efffffffe00000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	__access:PROC
EXTRN	?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; stl_lowers
EXTRN	??0CFileBase@@QAE@XZ:PROC			; CFileBase::CFileBase
EXTRN	??1CFileBase@@UAE@XZ:PROC			; CFileBase::~CFileBase
EXTRN	?Close@CFileBase@@QAEXXZ:PROC			; CFileBase::Close
EXTRN	?Create@CFileBase@@QAEHPBDW4EFileMode@1@@Z:PROC	; CFileBase::Create
EXTRN	?SeekCur@CFileBase@@QAEXK@Z:PROC		; CFileBase::SeekCur
EXTRN	?Seek@CFileBase@@QAEXK@Z:PROC			; CFileBase::Seek
EXTRN	?GetPosition@CFileBase@@QAEKXZ:PROC		; CFileBase::GetPosition
EXTRN	?Write@CFileBase@@UAEHPBXH@Z:PROC		; CFileBase::Write
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Link@CMappedFile@@QAEXKPBX@Z:PROC		; CMappedFile::Link
EXTRN	?Create@CMappedFile@@QAEHPBDPAPBXHH@Z:PROC	; CMappedFile::Create
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?GetItem@CEterFileDict@@QAEPAUItem@1@KPBD@Z:PROC ; CEterFileDict::GetItem
EXTRN	??0CEterPack@@QAE@XZ:PROC			; CEterPack::CEterPack
EXTRN	??1CEterPack@@UAE@XZ:PROC			; CEterPack::~CEterPack
EXTRN	?Create@CEterPack@@QAE_NAAVCEterFileDict@@PBD1_NPBE@Z:PROC ; CEterPack::Create
EXTRN	?DecryptIV@CEterPack@@QAE_NK@Z:PROC		; CEterPack::DecryptIV
EXTRN	?GetDBName@CEterPack@@QAEPBDXZ:PROC		; CEterPack::GetDBName
EXTRN	?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPack::Get
EXTRN	?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z:PROC ; CEterPack::Get2
EXTRN	?IsExist@CEterPack@@QAE_NPBD@Z:PROC		; CEterPack::IsExist
EXTRN	?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ:PROC ; CEterPack::GetPackPolicy_HybridCrypt
EXTRN	?GetSingleton@CMakePackLog@@SAAAV1@XZ:PROC	; CMakePackLog::GetSingleton
EXTRN	?Writef@CMakePackLog@@QAAXPBDZZ:PROC		; CMakePackLog::Writef
EXTRN	??_E?$CSingleton@VCEterPackManager@@@@UAEPAXI@Z:PROC ; CSingleton<CEterPackManager>::`vector deleting destructor'
EXTRN	??_ECEterPackManager@@UAEPAXI@Z:PROC		; CEterPackManager::`vector deleting destructor'
EXTRN	?IsContainingCryptKey@EterPackPolicy_CSHybridCrypt@@QBE_NXZ:PROC ; EterPackPolicy_CSHybridCrypt::IsContainingCryptKey
EXTRN	?IsContainingSDBFile@EterPackPolicy_CSHybridCrypt@@QBE_NXZ:PROC ; EterPackPolicy_CSHybridCrypt::IsContainingSDBFile
EXTRN	?WriteCryptKeyToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z:PROC ; EterPackPolicy_CSHybridCrypt::WriteCryptKeyToFile
EXTRN	?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z:PROC ; EterPackPolicy_CSHybridCrypt::ReadCryptKeyInfoFromStream
EXTRN	?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z:PROC ; EterPackPolicy_CSHybridCrypt::WriteSupplementaryDataBlockToFile
EXTRN	?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z:PROC ; EterPackPolicy_CSHybridCrypt::ReadSupplementatyDataBlockFromStream
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__dtol3:PROC
EXTRN	_ceil:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4HA DD 01H DUP (?) ; `CEterPackManager::GetFromPack'::`2'::$TSS0
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@41efffffffe00000
CONST	SEGMENT
__real@41efffffffe00000 DQ 041efffffffe00000r	; 4.29497e+09
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCEterPackManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCEterPackManager@@@@6B@ DD 00H	; CSingleton<CEterPackManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCEterPackManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCEterPackManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCEterPackManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCEterPackManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCEterPackManager@@@@8 ; CSingleton<CEterPackManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCEterPackManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCEterPackManager@@@@8 DD 00H		; CSingleton<CEterPackManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCEterPackManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCEterPackManager@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCEterPackManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CEterPackManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCEterPackManager@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCEterPackManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCEterPackManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCEterPackManager@@@@@8 ; CSingleton<CEterPackManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCEterPackManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CEterPackManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEterPackManager@@8 DD FLAT:??_R0?AVCEterPackManager@@@8 ; CEterPackManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEterPackManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CEterPackManager@@8
rdata$r	SEGMENT
??_R2CEterPackManager@@8 DD FLAT:??_R1A@?0A@EA@CEterPackManager@@8 ; CEterPackManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCEterPackManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CEterPackManager@@8
rdata$r	SEGMENT
??_R3CEterPackManager@@8 DD 00H				; CEterPackManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CEterPackManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEterPackManager@@@8
data$rs	SEGMENT
??_R0?AVCEterPackManager@@@8 DD FLAT:??_7type_info@@6B@	; CEterPackManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEterPackManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CEterPackManager@@6B@
rdata$r	SEGMENT
??_R4CEterPackManager@@6B@ DD 00H			; CEterPackManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEterPackManager@@@8
	DD	FLAT:??_R3CEterPackManager@@8
rdata$r	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@JEJDAIPD@CEterPackManager?3?3WriteHybridCr@
CONST	SEGMENT
??_C@_0EE@JEJDAIPD@CEterPackManager?3?3WriteHybridCr@ DB 'CEterPackManage'
	DB	'r::WriteHybridCryptPackInfo PackName : %s, Hash : %x', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HF@OJFMMEDP@CEterPackManager?3?3RetrieveHybri@
CONST	SEGMENT
??_C@_0HF@OJFMMEDP@CEterPackManager?3?3RetrieveHybri@ DB 'CEterPackManage'
	DB	'r::RetrieveHybridCryptPackKeys', 09H, 'cryptokey length of fi'
	DB	'le(%s) is not matched. received(%d) != haved(%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HIHPGCNI@?$CFs?3?5Pack?5file?5does?5not?5exist@
CONST	SEGMENT
??_C@_0BN@HIHPGCNI@?$CFs?3?5Pack?5file?5does?5not?5exist@ DB '%s: Pack fi'
	DB	'le does not exist', 00H			; `string'
CONST	ENDS
;	COMDAT ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
_DATA	SEGMENT
?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; `CEterPackManager::GetFromPack'::`2'::strFileName
	DB	19 DUP(00H)
	DD	0fH
_DATA	ENDS
;	COMDAT ??_7CEterPackManager@@6B@
CONST	SEGMENT
??_7CEterPackManager@@6B@ DD FLAT:??_R4CEterPackManager@@6B@ ; CEterPackManager::`vftable'
	DD	FLAT:??_ECEterPackManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCEterPackManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCEterPackManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCEterPackManager@@@@6B@ ; CSingleton<CEterPackManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCEterPackManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB
CONST	SEGMENT
?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB DD 011H ; boost::unordered::detail::prime_list_template<unsigned int>::value
	DD	01dH
	DD	025H
	DD	035H
	DD	043H
	DD	04fH
	DD	061H
	DD	083H
	DD	0c1H
	DD	0101H
	DD	0185H
	DD	0209H
	DD	0301H
	DD	0407H
	DD	0607H
	DD	0805H
	DD	0c07H
	DD	01807H
	DD	03001H
	DD	06011H
	DD	0c005H
	DD	01800dH
	DD	030005H
	DD	060019H
	DD	0c0001H
	DD	0180005H
	DD	030000bH
	DD	060000dH
	DD	0c00005H
	DD	01800013H
	DD	03000005H
	DD	06000017H
	DD	0c000013H
	DD	018000005H
	DD	030000059H
	DD	060000005H
	DD	0c0000001H
	DD	0fffffffbH
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@6@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@6@@Z$0
__ehfuncinfo$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@6@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@6@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKUSCache@CEterPackManager@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@6@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKUSCache@CEterPackManager@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@6@@Z$0
__ehfuncinfo$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKUSCache@CEterPackManager@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@6@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct_node_from_args@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@U?$pair@$$CBKUSCache@CEterPackManager@@@2@@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@6@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAVCEterPack@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@1@ABQAVCEterPack@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAVCEterPack@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@1@ABQAVCEterPack@@@Z$0
__ehfuncinfo$??$?0ABQAVCEterPack@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@1@ABQAVCEterPack@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAVCEterPack@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@1@ABQAVCEterPack@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z$2
__ehfuncinfo$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z$1
__ehfuncinfo$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAVCEterPack@@@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEPAU?$_List_node@PAVCEterPack@@PAX@1@QAU21@ABQAVCEterPack@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAVCEterPack@@@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEPAU?$_List_node@PAVCEterPack@@PAX@1@QAU21@ABQAVCEterPack@@@Z$1
__ehfuncinfo$??$_Emplace@ABQAVCEterPack@@@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEPAU?$_List_node@PAVCEterPack@@PAX@1@QAU21@ABQAVCEterPack@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAVCEterPack@@@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEPAU?$_List_node@PAVCEterPack@@PAX@1@QAU21@ABQAVCEterPack@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@234@PAU5234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@234@PAU5234@I@Z$0
__ehfuncinfo$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@234@PAU5234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@234@PAU5234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@234@PAU5234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@234@PAU5234@I@Z$0
__ehfuncinfo$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@234@PAU5234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@234@PAU5234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z$1
__ehfuncinfo$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z$0
__ehfuncinfo$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z$1
__ehfuncinfo$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z$1
__ehfuncinfo$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z$1
__ehfuncinfo$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z$4
__ehfuncinfo$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?isExistInPack@CEterPackManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?isExistInPack@CEterPackManager@@QAE_NPBD@Z$0
__ehfuncinfo$?isExistInPack@CEterPackManager@@QAE_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?isExistInPack@CEterPackManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$0
__ehfuncinfo$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z$1
__ehfuncinfo$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CEterPackManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CEterPackManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CEterPackManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CEterPackManager@@QAE@XZ$2
__ehfuncinfo$??0CEterPackManager@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CEterPackManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::create_node, COMDAT
; _this$ = ecx

; 1983 :       {

  00000	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00001	6a 24		 push	 36			; 00000024H
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 1983 :       {

  00003	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 1985 :         node_ = node_allocator_traits::allocate(alloc_, 1);

  0000a	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0000d	83 c4 04	 add	 esp, 4
  00010	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2579 :         ptr_bucket() : next_(0) {}

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4865 :         ptr_node() : bucket_base(), bucket_info_(0) {}

  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 754  :         value_base() : data_() {}

  00020	0f 11 40 08	 movups	 XMMWORD PTR [eax+8], xmm0
  00024	5e		 pop	 esi
  00025	66 0f d6 40 18	 movq	 QWORD PTR [eax+24], xmm0
  0002a	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 1986 :         new ((void*)boost::to_address(node_)) node();
; 1987 :       }

  00031	c3		 ret	 0
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::create_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >, COMDAT
; _this$ = ecx

; 1976 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@node_const
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 24		 push	 36			; 00000024H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@node_const:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 1980 :       }

  00012	c3		 ret	 0
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::create_node, COMDAT
; _this$ = ecx

; 1983 :       {

  00000	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00001	6a 14		 push	 20			; 00000014H
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 1983 :       {

  00003	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 1985 :         node_ = node_allocator_traits::allocate(alloc_, 1);

  0000a	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0000d	83 c4 04	 add	 esp, 4
  00010	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2579 :         ptr_bucket() : next_(0) {}

  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4865 :         ptr_node() : bucket_base(), bucket_info_(0) {}

  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 754  :         value_base() : data_() {}

  00020	66 0f d6 40 08	 movq	 QWORD PTR [eax+8], xmm0
  00025	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0002c	5e		 pop	 esi

; 1986 :         new ((void*)boost::to_address(node_)) node();
; 1987 :       }

  0002d	c3		 ret	 0
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::create_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >, COMDAT
; _this$ = ecx

; 1976 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@node_const
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@node_const:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 1980 :       }

  00012	c3		 ret	 0
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >, COMDAT
; _this$ = ecx

; 2013 :       {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2014 :         if (node_) {

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 18		 je	 SHORT $LN13@node_tmp

; 2015 :           BOOST_UNORDERED_CALL_DESTROY(

  0000a	83 c0 08	 add	 eax, 8
  0000d	50		 push	 eax
  0000e	ff 36		 push	 DWORD PTR [esi]
  00010	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@1@@Z ; std::_Default_allocator_traits<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00015	6a 24		 push	 36			; 00000024H
  00017	ff 76 04	 push	 DWORD PTR [esi+4]
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@node_tmp:
  00022	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2020 :       }

  00023	c3		 ret	 0
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >, COMDAT
; _this$ = ecx

; 2014 :         if (node_) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@node_tmp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@node_tmp:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2020 :       }

  00012	c3		 ret	 0
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >, COMDAT

; 737  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0000d	76 27		 jbe	 SHORT $LN32@destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00011	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00012	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00018	72 12		 jb	 SHORT $LN43@destroy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00020	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00022	83 c0 fc	 add	 eax, -4			; fffffffcH
  00025	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00028	77 20		 ja	 SHORT $LN40@destroy

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002a	8b c2		 mov	 eax, edx
$LN43@destroy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8
$LN32@destroy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00036	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0003d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00044	c6 06 00	 mov	 BYTE PTR [esi], 0
  00047	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 743  :     }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN40@destroy:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN55@destroy:
  0004f	cc		 int	 3
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$find_node_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABU?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@Z
_TEXT	SEGMENT
_key_hash$ = 8						; size = 4
_bucket_index$1$ = 8					; size = 4
_k$ = 12						; size = 4
_eq$ = 16						; size = 4
??$find_node_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABU?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::find_node_impl<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 3587 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2604 :           return hash % bucket_count;

  00003	8b 45 08	 mov	 eax, DWORD PTR _key_hash$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	f7 71 04	 div	 DWORD PTR [ecx+4]

; 3046 :           if (!size_)

  0000b	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0

; 3587 :         {

  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	57		 push	 edi

; 3588 :           std::size_t bucket_index = this->hash_to_bucket(key_hash);

  00012	89 55 08	 mov	 DWORD PTR _bucket_index$1$[ebp], edx

; 3046 :           if (!size_)

  00015	0f 84 d3 00 00
	00		 je	 $LN17@find_node_

; 3047 :             return node_pointer();
; 3048 :           link_pointer prev = get_previous_start(bucket_index);

  0001b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001e	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]

; 3049 :           return prev ? next_node(prev) : node_pointer();

  00021	85 c0		 test	 eax, eax
  00023	0f 84 c5 00 00
	00		 je	 $LN17@find_node_
  00029	8b 00		 mov	 eax, DWORD PTR [eax]

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 bd 00 00
	00		 je	 $LN3@find_node_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00033	8b 7d 0c	 mov	 edi, DWORD PTR _k$[ebp]

; 2812 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00036	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@find_node_:

; 434  :         return _Myres > _Small_string_capacity;

  00040	83 78 1c 0f	 cmp	 DWORD PTR [eax+28], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3595 :             if (eq(k, this->get_key(n))) {

  00044	8d 50 08	 lea	 edx, DWORD PTR [eax+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2812 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00047	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]

; 426  :         if (_Large_mode_engaged()) {

  0004a	76 02		 jbe	 SHORT $LN33@find_node_

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0004c	8b 12		 mov	 edx, DWORD PTR [edx]
$LN33@find_node_:

; 434  :         return _Myres > _Small_string_capacity;

  0004e	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00052	8b f7		 mov	 esi, edi

; 426  :         if (_Large_mode_engaged()) {

  00054	76 02		 jbe	 SHORT $LN40@find_node_

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00056	8b 37		 mov	 esi, DWORD PTR [edi]
$LN40@find_node_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 578  :     if (_Left_size != _Right_size) {

  00058	3b d9		 cmp	 ebx, ecx
  0005a	75 6c		 jne	 SHORT $LN77@find_node_

; 579  :         return false;
; 580  :     }
; 581  : 
; 582  :     if (_Left_size == 0u) {

  0005c	85 db		 test	 ebx, ebx
  0005e	0f 84 8c 00 00
	00		 je	 $LN3@find_node_

; 411  :         return __builtin_memcmp(_First1, _First2, _Count);

  00064	8b fb		 mov	 edi, ebx
  00066	83 ef 04	 sub	 edi, 4
  00069	72 16		 jb	 SHORT $LN83@find_node_
  0006b	0f 1f 44 00 00	 npad	 5
$LL84@find_node_:
  00070	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00072	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  00074	75 10		 jne	 SHORT $LN82@find_node_
  00076	83 c6 04	 add	 esi, 4
  00079	83 c2 04	 add	 edx, 4
  0007c	83 ef 04	 sub	 edi, 4
  0007f	73 ef		 jae	 SHORT $LL84@find_node_
$LN83@find_node_:
  00081	83 ff fc	 cmp	 edi, -4			; fffffffcH
  00084	74 34		 je	 SHORT $LN81@find_node_
$LN82@find_node_:
  00086	8a 0e		 mov	 cl, BYTE PTR [esi]
  00088	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0008a	75 27		 jne	 SHORT $LN85@find_node_
  0008c	83 ff fd	 cmp	 edi, -3			; fffffffdH
  0008f	74 29		 je	 SHORT $LN81@find_node_
  00091	8a 4e 01	 mov	 cl, BYTE PTR [esi+1]
  00094	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00097	75 1a		 jne	 SHORT $LN85@find_node_
  00099	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0009c	74 1c		 je	 SHORT $LN81@find_node_
  0009e	8a 4e 02	 mov	 cl, BYTE PTR [esi+2]
  000a1	3a 4a 02	 cmp	 cl, BYTE PTR [edx+2]
  000a4	75 0d		 jne	 SHORT $LN85@find_node_
  000a6	83 ff ff	 cmp	 edi, -1
  000a9	74 0f		 je	 SHORT $LN81@find_node_
  000ab	8a 4e 03	 mov	 cl, BYTE PTR [esi+3]
  000ae	3a 4a 03	 cmp	 cl, BYTE PTR [edx+3]
  000b1	74 07		 je	 SHORT $LN81@find_node_
$LN85@find_node_:
  000b3	1b c9		 sbb	 ecx, ecx
  000b5	83 c9 01	 or	 ecx, 1
  000b8	eb 02		 jmp	 SHORT $LN86@find_node_
$LN81@find_node_:
  000ba	33 c9		 xor	 ecx, ecx
$LN86@find_node_:

; 586  :     return _Traits::compare(_Left, _Right, _Left_size) == 0;

  000bc	85 c9		 test	 ecx, ecx
  000be	0f 94 c1	 sete	 cl
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3595 :             if (eq(k, this->get_key(n))) {

  000c1	84 c9		 test	 cl, cl
  000c3	75 2b		 jne	 SHORT $LN3@find_node_
  000c5	8b 7d 0c	 mov	 edi, DWORD PTR _k$[ebp]
$LN77@find_node_:

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  000c8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cb	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH

; 3596 :               return n;
; 3597 :             } else if (this->node_bucket(n) != bucket_index) {

  000d1	3b 4d 08	 cmp	 ecx, DWORD PTR _bucket_index$1$[ebp]
  000d4	75 18		 jne	 SHORT $LN17@find_node_
$LL61@find_node_:

; 2971 :             n2 = next_node(n2);

  000d6	8b 00		 mov	 eax, DWORD PTR [eax]

; 2972 :           } while (n2 && !n2->is_first_in_group());

  000d8	85 c0		 test	 eax, eax
  000da	74 14		 je	 SHORT $LN3@find_node_

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  000dc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000df	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000e2	f7 d1		 not	 ecx
  000e4	f6 c1 01	 test	 cl, 1

; 2972 :           } while (n2 && !n2->is_first_in_group());

  000e7	74 ed		 je	 SHORT $LL61@find_node_

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  000e9	e9 52 ff ff ff	 jmp	 $LL4@find_node_
$LN17@find_node_:

; 3598 :               return node_pointer();
; 3599 :             }
; 3600 : 
; 3601 :             n = next_for_find(n);
; 3602 :           }
; 3603 :         }

  000ee	33 c0		 xor	 eax, eax
$LN3@find_node_:
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	5d		 pop	 ebp
  000f4	c2 0c 00	 ret	 12			; 0000000cH
??$find_node_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABU?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::find_node_impl<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z
_TEXT	SEGMENT
_min$ = 8						; size = 4
?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z PROC ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count, COMDAT

; 2608 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 7457 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _STD _Get_unwrapped(_Last));

  00005	8b 7d 08	 mov	 edi, DWORD PTR _min$[ebp]
  00008	be 00 00 00 00	 mov	 esi, OFFSET ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB ; boost::unordered::detail::prime_list_template<unsigned int>::value
  0000d	b8 26 00 00 00	 mov	 eax, 38			; 00000026H
$LL9@new_bucket:

; 7460 :         const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00012	8b d0		 mov	 edx, eax
  00014	d1 ea		 shr	 edx, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2422 :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00016	39 3c 96	 cmp	 DWORD PTR [esi+edx*4], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1664 :         _Where += _Off;

  00019	8d 0c 96	 lea	 ecx, DWORD PTR [esi+edx*4]

; 7462 :         if (_Pred(*_UMid, _Val)) { // try top half

  0001c	73 0c		 jae	 SHORT $LN11@new_bucket

; 7463 :             _UFirst = _STD _Next_iter(_UMid);

  0001e	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]

; 7464 :             _Count -= _Count2 + 1;

  00021	83 c9 ff	 or	 ecx, -1
  00024	2b ca		 sub	 ecx, edx
  00026	03 c1		 add	 eax, ecx

; 7465 :         } else {

  00028	eb 02		 jmp	 SHORT $LN12@new_bucket
$LN11@new_bucket:

; 7466 :             _Count = _Count2;

  0002a	8b c2		 mov	 eax, edx
$LN12@new_bucket:

; 7458 : 
; 7459 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0002c	85 c0		 test	 eax, eax
  0002e	7f e2		 jg	 SHORT $LL9@new_bucket
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2609 :           return boost::unordered::detail::next_prime(min);

  00030	81 fe 98 00 00
	00		 cmp	 esi, OFFSET ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB+152
  00036	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00039	5f		 pop	 edi
  0003a	0f 45 c6	 cmovne	 eax, esi
  0003d	5e		 pop	 esi
  0003e	8b 00		 mov	 eax, DWORD PTR [eax]

; 2610 :         }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ENDP ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@IABKABU?$equal_to@K@std@@@Z
_TEXT	SEGMENT
_key_hash$ = 8						; size = 4
_k$ = 12						; size = 4
_eq$ = 16						; size = 4
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@IABKABU?$equal_to@K@std@@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >, COMDAT
; _this$ = ecx

; 3587 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2604 :           return hash % bucket_count;

  00003	8b 45 08	 mov	 eax, DWORD PTR _key_hash$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	f7 71 04	 div	 DWORD PTR [ecx+4]

; 3046 :           if (!size_)

  0000b	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0

; 3587 :         {

  0000f	56		 push	 esi

; 3588 :           std::size_t bucket_index = this->hash_to_bucket(key_hash);

  00010	8b f2		 mov	 esi, edx

; 3046 :           if (!size_)

  00012	74 4a		 je	 SHORT $LN17@find_node_

; 3047 :             return node_pointer();
; 3048 :           link_pointer prev = get_previous_start(bucket_index);

  00014	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00017	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 3049 :           return prev ? next_node(prev) : node_pointer();

  0001a	85 c0		 test	 eax, eax
  0001c	74 40		 je	 SHORT $LN17@find_node_
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00020	85 c0		 test	 eax, eax
  00022	74 3c		 je	 SHORT $LN3@find_node_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 635  :         return _Left == _Right;

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _k$[ebp]
  00027	8b 11		 mov	 edx, DWORD PTR [ecx]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@find_node_:
  00030	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3595 :             if (eq(k, this->get_key(n))) {

  00033	74 2b		 je	 SHORT $LN3@find_node_

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH

; 3596 :               return n;
; 3597 :             } else if (this->node_bucket(n) != bucket_index) {

  0003e	3b ce		 cmp	 ecx, esi
  00040	75 1c		 jne	 SHORT $LN17@find_node_
$LL33@find_node_:

; 2971 :             n2 = next_node(n2);

  00042	8b 00		 mov	 eax, DWORD PTR [eax]

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00044	85 c0		 test	 eax, eax
  00046	74 18		 je	 SHORT $LN3@find_node_

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004e	f7 d1		 not	 ecx
  00050	f6 c1 01	 test	 cl, 1

; 2972 :           } while (n2 && !n2->is_first_in_group());

  00053	74 ed		 je	 SHORT $LL33@find_node_

; 3589 :           node_pointer n = this->begin(bucket_index);
; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00055	85 c0		 test	 eax, eax
  00057	75 d7		 jne	 SHORT $LL4@find_node_
  00059	5e		 pop	 esi

; 3598 :               return node_pointer();
; 3599 :             }
; 3600 : 
; 3601 :             n = next_for_find(n);
; 3602 :           }
; 3603 :         }

  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
$LN17@find_node_:
  0005e	33 c0		 xor	 eax, eax
$LN3@find_node_:
  00060	5e		 pop	 esi
  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 0c		 push	 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z
_TEXT	SEGMENT
_a$2 = -28						; size = 8
_b$3 = -28						; size = 8
_this$1$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
_h$1$ = 12						; size = 4
_<args_0>$ = 16						; size = 4
??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >, COMDAT
; _this$ = ecx

; 3735 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 ec	 mov	 DWORD PTR _this$1$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  0002d	8b 7d 0c	 mov	 edi, DWORD PTR _k$[ebp]
  00030	8b d7		 mov	 edx, edi

; 434  :         return _Myres > _Small_string_capacity;

  00032	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00036	76 02		 jbe	 SHORT $LN23@emplace_un

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00038	8b 17		 mov	 edx, DWORD PTR [edi]
$LN23@emplace_un:
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 496  :        const unsigned char * end = s + str.size();

  0003a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 497  :        size_t h = 0;

  0003d	33 db		 xor	 ebx, ebx
  0003f	03 ca		 add	 ecx, edx
  00041	89 5d 0c	 mov	 DWORD PTR _h$1$[ebp], ebx

; 498  : 
; 499  :        while (s < end)

  00044	3b d1		 cmp	 edx, ecx
  00046	73 1b		 jae	 SHORT $LN17@emplace_un
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL124@emplace_un:

; 500  :        {
; 501  :            h *= 16777619;
; 502  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00050	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00053	42		 inc	 edx
  00054	69 db 93 01 00
	01		 imul	 ebx, ebx, 16777619
  0005a	33 d8		 xor	 ebx, eax
  0005c	3b d1		 cmp	 edx, ecx
  0005e	72 f0		 jb	 SHORT $LL124@emplace_un
  00060	89 5d 0c	 mov	 DWORD PTR _h$1$[ebp], ebx
$LN17@emplace_un:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00063	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  00066	83 e1 01	 and	 ecx, 1
  00069	41		 inc	 ecx
  0006a	03 ce		 add	 ecx, esi

; 3576 :           return this->find_node_impl(key_hash, k, this->key_eq());

  0006c	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0006f	f7 d9		 neg	 ecx
  00071	1b c9		 sbb	 ecx, ecx
  00073	23 c8		 and	 ecx, eax
  00075	51		 push	 ecx
  00076	57		 push	 edi
  00077	53		 push	 ebx
  00078	8b ce		 mov	 ecx, esi
  0007a	e8 00 00 00 00	 call	 ??$find_node_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABU?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::find_node_impl<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 3736 :           std::size_t key_hash = this->hash(k);
; 3737 :           node_pointer pos = this->find_node(key_hash, k);

  0007f	8b c8		 mov	 ecx, eax

; 3738 :           if (pos) {

  00081	85 c9		 test	 ecx, ecx
  00083	74 1d		 je	 SHORT $LN2@emplace_un
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00085	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00088	89 08		 mov	 DWORD PTR [eax], ecx
  0008a	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3748 :         }

  0008e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00098	59		 pop	 ecx
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 0c 00	 ret	 12			; 0000000cH
$LN2@emplace_un:

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  000a2	8d 5e 03	 lea	 ebx, DWORD PTR [esi+3]

; 1946 :         node_constructor(node_allocator& n) : alloc_(n), node_() {}

  000a5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _a$2[ebp+4], 0
  000ac	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000af	f7 db		 neg	 ebx
  000b1	1b db		 sbb	 ebx, ebx
  000b3	23 d8		 and	 ebx, eax
  000b5	89 5d e4	 mov	 DWORD PTR _a$2[ebp], ebx

; 2039 :           a.create_node();

  000b8	8d 4d e4	 lea	 ecx, DWORD PTR _a$2[ebp]
  000bb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000c2	e8 00 00 00 00	 call	 ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::create_node

; 2040 :           construct_from_args(

  000c7	8b 7d e8	 mov	 edi, DWORD PTR _a$2[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 278  :     pair(pair&&)      = default;

  000ca	8b 75 10	 mov	 esi, DWORD PTR _<args_0>$[ebp]
  000cd	56		 push	 esi
  000ce	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000d1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000d6	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2042 :           return a.release();

  000d9	8d 4d e4	 lea	 ecx, DWORD PTR _a$2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 278  :     pair(pair&&)      = default;

  000dc	89 47 20	 mov	 DWORD PTR [edi+32], eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 1957 :           node_ = node_pointer();

  000df	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _a$2[ebp+4], 0

; 2042 :           return a.release();

  000e6	e8 00 00 00 00	 call	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >

; 1999 :         explicit node_tmp(node_pointer n, NodeAlloc& a) : alloc_(a), node_(n) {}

  000eb	8b f7		 mov	 esi, edi
  000ed	89 5d e4	 mov	 DWORD PTR _b$3[ebp], ebx
  000f0	89 75 e8	 mov	 DWORD PTR _b$3[ebp+4], esi

; 3717 :           this->reserve_for_insert(this->size_ + 1);

  000f3	8b 5d ec	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000f6	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 4542 :         if (!buckets_) {

  000fd	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0

; 3717 :           this->reserve_for_insert(this->size_ + 1);

  00101	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00104	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 4542 :         if (!buckets_) {

  00107	75 1a		 jne	 SHORT $LN80@emplace_un

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  00109	57		 push	 edi
  0010a	8b cb		 mov	 ecx, ebx
  0010c	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::min_buckets_for_size
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 77   :     return _Left < _Right ? _Right : _Left;

  00111	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00114	3b c8		 cmp	 ecx, eax
  00116	0f 42 c8	 cmovb	 ecx, eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  00119	51		 push	 ecx
  0011a	8b cb		 mov	 ecx, ebx
  0011c	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::create_buckets
  00121	eb 2d		 jmp	 SHORT $LN83@emplace_un
$LN80@emplace_un:

; 4544 :         } else if (size > max_load_) {

  00123	3b 7b 10	 cmp	 edi, DWORD PTR [ebx+16]
  00126	76 28		 jbe	 SHORT $LN83@emplace_un

; 4545 :           std::size_t num_buckets =

  00128	8b c8		 mov	 ecx, eax
  0012a	ba 01 00 00 00	 mov	 edx, 1
  0012f	d1 e9		 shr	 ecx, 1
  00131	03 c1		 add	 eax, ecx
  00133	3b f8		 cmp	 edi, eax
  00135	0f 42 d1	 cmovb	 edx, ecx
  00138	8b cb		 mov	 ecx, ebx
  0013a	03 53 08	 add	 edx, DWORD PTR [ebx+8]
  0013d	52		 push	 edx
  0013e	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::min_buckets_for_size

; 4546 :             min_buckets_for_size((std::max)(size, size_ + (size_ >> 1)));
; 4547 : 
; 4548 :           if (num_buckets != bucket_count_)

  00143	3b 43 04	 cmp	 eax, DWORD PTR [ebx+4]
  00146	74 08		 je	 SHORT $LN83@emplace_un

; 4549 :             this->rehash_impl(num_buckets);

  00148	50		 push	 eax
  00149	8b cb		 mov	 ecx, ebx
  0014b	e8 00 00 00 00	 call	 ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::rehash_impl
$LN83@emplace_un:

; 2604 :           return hash % bucket_count;

  00150	8b 45 0c	 mov	 eax, DWORD PTR _h$1$[ebp]
  00153	33 d2		 xor	 edx, edx
  00155	f7 73 04	 div	 DWORD PTR [ebx+4]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00158	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 2007 :           node_ = node_pointer();

  0015b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _b$3[ebp+4], 0

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00162	8d 3c 90	 lea	 edi, DWORD PTR [eax+edx*4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00165	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0016b	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 3693 :           if (!b->next_) {

  0016e	8b 07		 mov	 eax, DWORD PTR [edi]
  00170	85 c0		 test	 eax, eax
  00172	75 24		 jne	 SHORT $LN94@emplace_un

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00174	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00177	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0017a	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]

; 3696 :             if (start_node->next_) {

  0017d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0017f	85 c0		 test	 eax, eax
  00181	74 0b		 je	 SHORT $LN96@emplace_un

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00183	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00186	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 3697 :               this->get_bucket_pointer(node_bucket(next_node(start_node)))

  0018b	89 34 82	 mov	 DWORD PTR [edx+eax*4], esi
$LN96@emplace_un:

; 3698 :                 ->next_ = n;
; 3699 :             }
; 3700 : 
; 3701 :             b->next_ = start_node;

  0018e	89 0f		 mov	 DWORD PTR [edi], ecx

; 3702 :             n->next_ = start_node->next_;

  00190	8b 01		 mov	 eax, DWORD PTR [ecx]
  00192	89 06		 mov	 DWORD PTR [esi], eax

; 3703 :             start_node->next_ = n;

  00194	89 31		 mov	 DWORD PTR [ecx], esi

; 3704 :           } else {

  00196	eb 08		 jmp	 SHORT $LN95@emplace_un
$LN94@emplace_un:

; 3705 :             n->next_ = b->next_->next_;

  00198	8b 00		 mov	 eax, DWORD PTR [eax]
  0019a	89 06		 mov	 DWORD PTR [esi], eax

; 3706 :             b->next_->next_ = n;

  0019c	8b 07		 mov	 eax, DWORD PTR [edi]
  0019e	89 30		 mov	 DWORD PTR [eax], esi
$LN95@emplace_un:

; 3707 :           }
; 3708 : 
; 3709 :           ++this->size_;

  001a0	ff 43 08	 inc	 DWORD PTR [ebx+8]

; 3718 :           return this->add_node_unique(b.release(), key_hash);

  001a3	8d 4d e4	 lea	 ecx, DWORD PTR _b$3[ebp]
  001a6	e8 00 00 00 00	 call	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001ab	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001ae	89 30		 mov	 DWORD PTR [eax], esi
  001b0	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3748 :         }

  001b4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001be	59		 pop	 ecx
  001bf	5f		 pop	 edi
  001c0	5e		 pop	 esi
  001c1	5b		 pop	 ebx
  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _a$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
__unwindfunclet$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z$2:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR _b$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z
_TEXT	SEGMENT
_a$2 = -20						; size = 8
_b$3 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
_key_hash$1$ = 12					; size = 4
_<args_0>$ = 16						; size = 4
??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_unique<std::pair<unsigned long const ,CEterPackManager::SCache> >, COMDAT
; _this$ = ecx

; 3735 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0002a	8b 75 0c	 mov	 esi, DWORD PTR _k$[ebp]
  0002d	ff 36		 push	 DWORD PTR [esi]
  0002f	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00034	0f b6 17	 movzx	 edx, BYTE PTR [edi]
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00037	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  0003a	83 e2 01	 and	 edx, 1

; 3736 :           std::size_t key_hash = this->hash(k);

  0003d	89 45 0c	 mov	 DWORD PTR _key_hash$1$[ebp], eax

; 2791 :           return *static_cast<function_pair const*>(

  00040	42		 inc	 edx
  00041	03 d7		 add	 edx, edi

; 3576 :           return this->find_node_impl(key_hash, k, this->key_eq());

  00043	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  00046	f7 da		 neg	 edx
  00048	1b d2		 sbb	 edx, edx
  0004a	23 d1		 and	 edx, ecx
  0004c	8b cf		 mov	 ecx, edi
  0004e	52		 push	 edx
  0004f	56		 push	 esi
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 3737 :           node_pointer pos = this->find_node(key_hash, k);

  00056	8b c8		 mov	 ecx, eax

; 3738 :           if (pos) {

  00058	85 c9		 test	 ecx, ecx
  0005a	74 1d		 je	 SHORT $LN2@emplace_un
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0005c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005f	89 08		 mov	 DWORD PTR [eax], ecx
  00061	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3748 :         }

  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 0c 00	 ret	 12			; 0000000cH
$LN2@emplace_un:

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00079	8d 77 03	 lea	 esi, DWORD PTR [edi+3]

; 1946 :         node_constructor(node_allocator& n) : alloc_(n), node_() {}

  0007c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _a$2[ebp+4], 0
  00083	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00086	f7 de		 neg	 esi
  00088	1b f6		 sbb	 esi, esi
  0008a	23 f0		 and	 esi, eax
  0008c	89 75 ec	 mov	 DWORD PTR _a$2[ebp], esi

; 2039 :           a.create_node();

  0008f	8d 4d ec	 lea	 ecx, DWORD PTR _a$2[ebp]
  00092	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00099	e8 00 00 00 00	 call	 ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::create_node
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0009e	8b 45 10	 mov	 eax, DWORD PTR _<args_0>$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2042 :           return a.release();

  000a1	8d 4d ec	 lea	 ecx, DWORD PTR _a$2[ebp]
  000a4	8b 5d f0	 mov	 ebx, DWORD PTR _a$2[ebp+4]

; 1957 :           node_ = node_pointer();

  000a7	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _a$2[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000ae	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000b2	66 0f d6 43 08	 movq	 QWORD PTR [ebx+8], xmm0
  000b7	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ba	89 43 10	 mov	 DWORD PTR [ebx+16], eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2042 :           return a.release();

  000bd	e8 00 00 00 00	 call	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >

; 1999 :         explicit node_tmp(node_pointer n, NodeAlloc& a) : alloc_(a), node_(n) {}

  000c2	89 75 ec	 mov	 DWORD PTR _b$3[ebp], esi
  000c5	89 5d f0	 mov	 DWORD PTR _b$3[ebp+4], ebx

; 4542 :         if (!buckets_) {

  000c8	83 7f 14 00	 cmp	 DWORD PTR [edi+20], 0

; 3717 :           this->reserve_for_insert(this->size_ + 1);

  000cc	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000cf	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000d6	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 4542 :         if (!buckets_) {

  000d9	75 1a		 jne	 SHORT $LN63@emplace_un

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  000db	56		 push	 esi
  000dc	8b cf		 mov	 ecx, edi
  000de	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 77   :     return _Left < _Right ? _Right : _Left;

  000e3	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000e6	3b c8		 cmp	 ecx, eax
  000e8	0f 42 c8	 cmovb	 ecx, eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  000eb	51		 push	 ecx
  000ec	8b cf		 mov	 ecx, edi
  000ee	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
  000f3	eb 2d		 jmp	 SHORT $LN66@emplace_un
$LN63@emplace_un:

; 4544 :         } else if (size > max_load_) {

  000f5	3b 77 10	 cmp	 esi, DWORD PTR [edi+16]
  000f8	76 28		 jbe	 SHORT $LN66@emplace_un

; 4545 :           std::size_t num_buckets =

  000fa	8b c8		 mov	 ecx, eax
  000fc	ba 01 00 00 00	 mov	 edx, 1
  00101	d1 e9		 shr	 ecx, 1
  00103	03 c1		 add	 eax, ecx
  00105	3b f0		 cmp	 esi, eax
  00107	0f 42 d1	 cmovb	 edx, ecx
  0010a	8b cf		 mov	 ecx, edi
  0010c	03 57 08	 add	 edx, DWORD PTR [edi+8]
  0010f	52		 push	 edx
  00110	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size

; 4546 :             min_buckets_for_size((std::max)(size, size_ + (size_ >> 1)));
; 4547 : 
; 4548 :           if (num_buckets != bucket_count_)

  00115	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  00118	74 08		 je	 SHORT $LN66@emplace_un

; 4549 :             this->rehash_impl(num_buckets);

  0011a	50		 push	 eax
  0011b	8b cf		 mov	 ecx, edi
  0011d	e8 00 00 00 00	 call	 ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
$LN66@emplace_un:

; 2604 :           return hash % bucket_count;

  00122	8b 45 0c	 mov	 eax, DWORD PTR _key_hash$1$[ebp]
  00125	33 d2		 xor	 edx, edx
  00127	f7 77 04	 div	 DWORD PTR [edi+4]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0012a	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 2007 :           node_ = node_pointer();

  0012d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _b$3[ebp+4], 0

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00134	8d 34 90	 lea	 esi, DWORD PTR [eax+edx*4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00137	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0013d	89 53 04	 mov	 DWORD PTR [ebx+4], edx

; 3693 :           if (!b->next_) {

  00140	8b 06		 mov	 eax, DWORD PTR [esi]
  00142	85 c0		 test	 eax, eax
  00144	75 24		 jne	 SHORT $LN77@emplace_un

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00146	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00149	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0014c	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]

; 3696 :             if (start_node->next_) {

  0014f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00151	85 c0		 test	 eax, eax
  00153	74 0b		 je	 SHORT $LN79@emplace_un

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00155	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00158	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 3697 :               this->get_bucket_pointer(node_bucket(next_node(start_node)))

  0015d	89 1c 82	 mov	 DWORD PTR [edx+eax*4], ebx
$LN79@emplace_un:

; 3698 :                 ->next_ = n;
; 3699 :             }
; 3700 : 
; 3701 :             b->next_ = start_node;

  00160	89 0e		 mov	 DWORD PTR [esi], ecx

; 3702 :             n->next_ = start_node->next_;

  00162	8b 01		 mov	 eax, DWORD PTR [ecx]
  00164	89 03		 mov	 DWORD PTR [ebx], eax

; 3703 :             start_node->next_ = n;

  00166	89 19		 mov	 DWORD PTR [ecx], ebx

; 3704 :           } else {

  00168	eb 08		 jmp	 SHORT $LN78@emplace_un
$LN77@emplace_un:

; 3705 :             n->next_ = b->next_->next_;

  0016a	8b 00		 mov	 eax, DWORD PTR [eax]
  0016c	89 03		 mov	 DWORD PTR [ebx], eax

; 3706 :             b->next_->next_ = n;

  0016e	8b 06		 mov	 eax, DWORD PTR [esi]
  00170	89 18		 mov	 DWORD PTR [eax], ebx
$LN78@emplace_un:

; 3707 :           }
; 3708 : 
; 3709 :           ++this->size_;

  00172	ff 47 08	 inc	 DWORD PTR [edi+8]

; 3718 :           return this->add_node_unique(b.release(), key_hash);

  00175	8d 4d ec	 lea	 ecx, DWORD PTR _b$3[ebp]
  00178	e8 00 00 00 00	 call	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0017d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00180	89 18		 mov	 DWORD PTR [eax], ebx
  00182	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3748 :         }

  00186	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00189	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00190	59		 pop	 ecx
  00191	5f		 pop	 edi
  00192	5e		 pop	 esi
  00193	5b		 pop	 ebx
  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _a$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
__unwindfunclet$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z$1:
  00008	8d 4d ec	 lea	 ecx, DWORD PTR _b$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,CEterPackManager::SCache> > > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_unique<std::pair<unsigned long const ,CEterPackManager::SCache> >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??__FstrFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@YAXXZ
text$yd	SEGMENT
??__FstrFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@YAXXZ PROC ; `CEterPackManager::GetFromPack'::`2'::`dynamic atexit destructor for 'strFileName'', COMDAT

; 434  :         return _Myres > _Small_string_capacity;

  00000	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 2f		 jbe	 SHORT $LN23@dynamic
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00011	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 14		 jb	 SHORT $LN34@dynamic

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H
  00022	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN34@dynamic:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN23@dynamic:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0003a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00044	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00055	c3		 ret	 0
??__FstrFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@YAXXZ ENDP ; `CEterPackManager::GetFromPack'::`2'::`dynamic atexit destructor for 'strFileName''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ??1FinderLock@@QAE@XZ
_TEXT	SEGMENT
??1FinderLock@@QAE@XZ PROC				; FinderLock::~FinderLock, COMDAT
; _this$ = ecx

; 237  : 		LeaveCriticalSection(p_cs);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 238  : 	}

  00008	c3		 ret	 0
??1FinderLock@@QAE@XZ ENDP				; FinderLock::~FinderLock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *>, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN24@pair
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN35@pair

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN32@pair

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN35@pair:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN24@pair:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi
  00044	c3		 ret	 0
$LN32@pair:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN45@pair:
  0004a	cc		 int	 3
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCEterPackManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCEterPackManager@@UAEPAXI@Z PROC			; CEterPackManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CEterPackManager@@UAE@XZ ; CEterPackManager::~CEterPackManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 78 14 00 00	 push	 5240			; 00001478H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCEterPackManager@@UAEPAXI@Z ENDP			; CEterPackManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ?find@?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
?find@?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z PROC ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::find, COMDAT
; _this$ = ecx

; 1803 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00006	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00009	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0000c	83 e0 01	 and	 eax, 1
  0000f	03 d0		 add	 edx, eax

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00011	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00014	f7 da		 neg	 edx
  00016	1b d2		 sbb	 edx, edx
  00018	23 d0		 and	 edx, eax
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  0001d	52		 push	 edx
  0001e	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  0001f	ff 30		 push	 DWORD PTR [eax]
  00021	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
  00026	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00029	8b ce		 mov	 ecx, esi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 2371 :           : node_(static_cast<node_pointer>(x))

  00031	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00034	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2371 :           : node_(static_cast<node_pointer>(x))

  00035	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00037	8b c1		 mov	 eax, ecx

; 1805 :     }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?find@?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ENDP ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::~unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >, COMDAT
; _this$ = ecx

; 1646 :     }

  00000	e9 00 00 00 00	 jmp	 ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
??1?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::~unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??0?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >, COMDAT
; _this$ = ecx

; 1510 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  00007	6a 0b		 push	 11			; 0000000bH
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1510 :     {

  00009	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2761 :         functions(H const& hf, P const& eq) : current_(0)

  0000c	c6 06 00	 mov	 BYTE PTR [esi], 0

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  0000f	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00014	83 c4 04	 add	 esp, 4
  00017	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00021	8b c6		 mov	 eax, esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3122 :               mlf_(1.0f), max_load_(0), buckets_()

  00023	c7 46 0c 00 00
	80 3f		 mov	 DWORD PTR [esi+12], 1065353216 ; 3f800000H
  0002a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00031	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_num_buckets$ = 8					; size = 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl, COMDAT
; _this$ = ecx

; 4577 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 4578 :         BOOST_ASSERT(this->buckets_);
; 4579 : 
; 4580 :         this->create_buckets(num_buckets);

  00006	ff 75 08	 push	 DWORD PTR _num_buckets$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0000e	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00013	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00016	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00019	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0001c	8d 1c 88	 lea	 ebx, DWORD PTR [eax+ecx*4]

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  0001f	85 ff		 test	 edi, edi
  00021	74 77		 je	 SHORT $LN3@rehash_imp
  00023	56		 push	 esi
$LL2@rehash_imp:
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00024	ff 77 08	 push	 DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4585 :             node_pointer n = next_node(prev);

  00027	8b f7		 mov	 esi, edi
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00029	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00031	33 d2		 xor	 edx, edx
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00033	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  00036	f7 71 04	 div	 DWORD PTR [ecx+4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  00039	8b c2		 mov	 eax, edx
  0003b	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00040	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  00043	8b 07		 mov	 eax, DWORD PTR [edi]

; 4596 :               if (!next || next->is_first_in_group()) {

  00045	85 c0		 test	 eax, eax
  00047	74 27		 je	 SHORT $LN53@rehash_imp
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@rehash_imp:

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00056	f7 d1		 not	 ecx
  00058	f6 c1 01	 test	 cl, 1

; 4596 :               if (!next || next->is_first_in_group()) {

  0005b	75 13		 jne	 SHORT $LN53@rehash_imp

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  0005d	8b ca		 mov	 ecx, edx

; 4597 :                 break;
; 4598 :               }
; 4599 :               n = next;

  0005f	8b f0		 mov	 esi, eax

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  00061	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  00067	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  0006a	8b 00		 mov	 eax, DWORD PTR [eax]

; 4596 :               if (!next || next->is_first_in_group()) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 e0		 jne	 SHORT $LL6@rehash_imp
$LN53@rehash_imp:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00073	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00076	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]

; 4600 :               n->bucket_info_ = bucket_index;
; 4601 :               n->reset_first_in_group();
; 4602 :             }
; 4603 : 
; 4604 :             // n is now the last node in the group
; 4605 :             bucket_pointer b = this->get_bucket_pointer(bucket_index);
; 4606 :             if (!b->next_) {

  00079	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007b	85 c0		 test	 eax, eax
  0007d	75 08		 jne	 SHORT $LN12@rehash_imp

; 4607 :               b->next_ = prev;

  0007f	89 19		 mov	 DWORD PTR [ecx], ebx

; 4608 :               prev = n;

  00081	8b de		 mov	 ebx, esi
  00083	8b 3e		 mov	 edi, DWORD PTR [esi]

; 4609 :             } else {

  00085	eb 0e		 jmp	 SHORT $LN13@rehash_imp
$LN12@rehash_imp:

; 4610 :               link_pointer next = n->next_;
; 4611 :               n->next_ = b->next_->next_;

  00087	8b 00		 mov	 eax, DWORD PTR [eax]
  00089	8b 3e		 mov	 edi, DWORD PTR [esi]
  0008b	89 06		 mov	 DWORD PTR [esi], eax

; 4612 :               b->next_->next_ = prev->next_;

  0008d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00091	89 01		 mov	 DWORD PTR [ecx], eax

; 4613 :               prev->next_ = next;

  00093	89 3b		 mov	 DWORD PTR [ebx], edi
$LN13@rehash_imp:

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  00095	85 ff		 test	 edi, edi
  00097	75 8b		 jne	 SHORT $LL2@rehash_imp
  00099	5e		 pop	 esi
$LN3@rehash_imp:
  0009a	5f		 pop	 edi

; 4614 :             }
; 4615 :           }
; 4616 :         }
; 4617 :         BOOST_CATCH(...)
; 4618 :         {
; 4619 :           node_pointer n = next_node(prev);
; 4620 :           prev->next_ = node_pointer();
; 4621 :           while (n) {
; 4622 :             node_pointer next = next_node(n);
; 4623 :             destroy_node(n);
; 4624 :             --size_;
; 4625 :             n = next;
; 4626 :           }
; 4627 :           BOOST_RETHROW
; 4628 :         }
; 4629 :         BOOST_CATCH_END
; 4630 :       }

  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >, COMDAT
; _this$ = ecx

; 3333 :         ~table() { delete_buckets(); }

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 3345 :           if (buckets_) {

  00003	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00006	85 c9		 test	 ecx, ecx
  00008	74 65		 je	 SHORT $LN7@table

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 3346 :             node_pointer n = static_cast<node_pointer>(

  0000d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN75@table
  00014	56		 push	 esi
$LL5@table:

; 3357 :               node_pointer next = next_node(n);

  00015	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 14		 push	 20			; 00000014H
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3359 :               n = next;

  00022	8b c6		 mov	 eax, esi
  00024	85 f6		 test	 esi, esi
  00026	75 ed		 jne	 SHORT $LL5@table

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00028	5e		 pop	 esi
$LN75@table:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 723  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00029	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002c	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+4]
  00033	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00036	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003c	72 12		 jb	 SHORT $LN95@table

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00041	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00044	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00046	83 c0 fc	 add	 eax, -4			; fffffffcH
  00049	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004c	77 23		 ja	 SHORT $LN92@table

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004e	8b c2		 mov	 eax, edx
$LN95@table:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00050	51		 push	 ecx
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00057	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3363 :             buckets_ = bucket_pointer();

  0005a	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 3364 :             max_load_ = 0;

  00061	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3365 :             size_ = 0;

  00068	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN7@table:
  0006f	5f		 pop	 edi

; 3333 :         ~table() { delete_buckets(); }

  00070	c3		 ret	 0
$LN92@table:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00071	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN114@table:
  00076	cc		 int	 3
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_f$ = -8						; size = 8
tv524 = -8						; size = 8
_new_count$ = 8						; size = 4
_dummy_node$1$ = 8					; size = 4
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets, COMDAT
; _this$ = ecx

; 3178 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3179 :           link_pointer dummy_node;
; 3180 : 
; 3181 :           // Construct the new buckets and dummy node, and destroy the old
; 3182 :           // buckets
; 3183 :           if (buckets_) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _new_count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00011	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00014	85 d2		 test	 edx, edx
  00016	74 74		 je	 SHORT $LN5@create_buc

; 3184 :             dummy_node =

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001e	89 45 08	 mov	 DWORD PTR _dummy_node$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00021	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00027	0f 87 25 01 00
	00		 ja	 $LN107@create_buc

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0002d	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 227  :     if (_Bytes == 0) {

  00034	85 c0		 test	 eax, eax
  00036	75 04		 jne	 SHORT $LN30@create_buc

; 228  :         return nullptr;

  00038	33 f6		 xor	 esi, esi
  0003a	eb 19		 jmp	 SHORT $LN29@create_buc
$LN30@create_buc:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0003c	50		 push	 eax
  0003d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00042	72 07		 jb	 SHORT $LN31@create_buc

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00044	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00049	eb 05		 jmp	 SHORT $LN121@create_buc
$LN31@create_buc:

; 136  :         return ::operator new(_Bytes);

  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@create_buc:

; 723  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
$LN29@create_buc:
  00055	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00058	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+4]
  0005f	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00062	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00068	72 16		 jb	 SHORT $LN59@create_buc

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0006a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00070	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00072	83 c0 fc	 add	 eax, -4			; fffffffcH
  00075	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00078	0f 87 cf 00 00
	00		 ja	 $LN56@create_buc

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0007e	8b c2		 mov	 eax, edx
$LN59@create_buc:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00080	51		 push	 ecx
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00087	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3189 :             buckets_ = new_buckets;

  0008a	eb 3b		 jmp	 SHORT $LN93@create_buc
$LN5@create_buc:

; 3190 :           } else if (bucket::extra_node) {
; 3191 :             node_constructor a(node_alloc());
; 3192 :             a.create_node();
; 3193 :             buckets_ =
; 3194 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3195 :             dummy_node = a.release();
; 3196 :           } else {
; 3197 :             dummy_node = link_pointer();

  0008c	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _dummy_node$1$[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00093	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00099	0f 87 b3 00 00
	00		 ja	 $LN107@create_buc

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0009f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 227  :     if (_Bytes == 0) {

  000a6	85 c0		 test	 eax, eax
  000a8	75 04		 jne	 SHORT $LN94@create_buc

; 228  :         return nullptr;

  000aa	33 f6		 xor	 esi, esi
  000ac	eb 19		 jmp	 SHORT $LN93@create_buc
$LN94@create_buc:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ae	50		 push	 eax
  000af	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b4	72 07		 jb	 SHORT $LN95@create_buc

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000bb	eb 05		 jmp	 SHORT $LN122@create_buc
$LN95@create_buc:

; 136  :         return ::operator new(_Bytes);

  000bd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN122@create_buc:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3203 :           bucket_count_ = new_count;

  000c2	8b f0		 mov	 esi, eax
  000c4	83 c4 04	 add	 esp, 4
$LN93@create_buc:
  000c7	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000ca	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000cd	85 f6		 test	 esi, esi
  000cf	74 55		 je	 SHORT $LN17@create_buc
  000d1	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  000d6	0f 57 c0	 xorps	 xmm0, xmm0
  000d9	f2 0f 2a c3	 cvtsi2sd xmm0, ebx
  000dd	8b c3		 mov	 eax, ebx
  000df	83 ec 08	 sub	 esp, 8
  000e2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e5	0f 5a c9	 cvtps2pd xmm1, xmm1
  000e8	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000f1	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000f5	f2 0f 11 4d f8	 movsd	 QWORD PTR tv524[ebp], xmm1
  000fa	dd 45 f8	 fld	 QWORD PTR tv524[ebp]
  000fd	dd 1c 24	 fstp	 QWORD PTR [esp]
  00100	e8 00 00 00 00	 call	 _ceil
  00105	dd 5d f8	 fstp	 QWORD PTR _f$[ebp]

; 2893 :         return f >= static_cast<double>(

  00108	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _f$[ebp]

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  0010d	83 c4 08	 add	 esp, 8

; 2893 :         return f >= static_cast<double>(

  00110	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  00118	72 05		 jb	 SHORT $LN21@create_buc
  0011a	83 c8 ff	 or	 eax, -1
  0011d	eb 09		 jmp	 SHORT $LN18@create_buc
$LN21@create_buc:
  0011f	e8 00 00 00 00	 call	 __dtol3

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  00124	eb 02		 jmp	 SHORT $LN18@create_buc
$LN17@create_buc:
  00126	33 c0		 xor	 eax, eax
$LN18@create_buc:
  00128	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 3204 :           recalculate_max_load();
; 3205 : 
; 3206 :           bucket_pointer end =

  0012b	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  0012e	3b f0		 cmp	 esi, eax
  00130	74 0d		 je	 SHORT $LN3@create_buc
$LL4@create_buc:

; 2579 :         ptr_bucket() : next_(0) {}

  00132	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  00138	83 c6 04	 add	 esi, 4
  0013b	3b f0		 cmp	 esi, eax
  0013d	75 f3		 jne	 SHORT $LL4@create_buc
$LN3@create_buc:

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  0013f	8b 4d 08	 mov	 ecx, DWORD PTR _dummy_node$1$[ebp]
  00142	5f		 pop	 edi

; 3212 :         }

  00143	5e		 pop	 esi

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  00144	89 08		 mov	 DWORD PTR [eax], ecx

; 3212 :         }

  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 04 00	 ret	 4
$LN56@create_buc:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN107@create_buc:

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00152	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@create_buc:
  00157	cc		 int	 3
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z
_TEXT	SEGMENT
tv80 = -8						; size = 8
tv132 = -8						; size = 8
_size$ = 8						; size = 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size, COMDAT
; _this$ = ecx

; 3095 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00006	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00009	83 ec 08	 sub	 esp, 8
  0000c	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	66 0f 6e c8	 movd	 xmm1, eax
  00018	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0001c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001f	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00028	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0002c	f2 0f 11 4d f8	 movsd	 QWORD PTR tv132[ebp], xmm1
  00031	dd 45 f8	 fld	 QWORD PTR tv132[ebp]
  00034	dd 1c 24	 fstp	 QWORD PTR [esp]
  00037	e8 00 00 00 00	 call	 _floor
  0003c	dd 5d f8	 fstp	 QWORD PTR tv80[ebp]
  0003f	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv80[ebp]
  00044	83 c4 08	 add	 esp, 8
  00047	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000

; 2893 :         return f >= static_cast<double>(

  0004f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  00057	72 12		 jb	 SHORT $LN5@min_bucket
  00059	83 c8 ff	 or	 eax, -1

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00062	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN5@min_bucket:

; 2893 :         return f >= static_cast<double>(

  0006b	e8 00 00 00 00	 call	 __dtol3

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00076	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ?find@?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
?find@?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::find, COMDAT
; _this$ = ecx

; 1803 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00004	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1803 :     {

  00007	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00008	8b 5d 0c	 mov	 ebx, DWORD PTR _k$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  0000b	83 e0 01	 and	 eax, 1
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1803 :     {

  0000e	56		 push	 esi
  0000f	57		 push	 edi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00010	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1803 :     {

  00013	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2791 :           return *static_cast<function_pair const*>(

  00016	03 f8		 add	 edi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00018	8b cb		 mov	 ecx, ebx
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2787 :         P const& key_eq() const { return current_functions().second(); }

  0001a	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0001d	f7 df		 neg	 edi
  0001f	1b ff		 sbb	 edi, edi
  00021	23 f8		 and	 edi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00023	83 7b 14 0f	 cmp	 DWORD PTR [ebx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00027	76 02		 jbe	 SHORT $LN31@find

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00029	8b 0b		 mov	 ecx, DWORD PTR [ebx]
$LN31@find:
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 496  :        const unsigned char * end = s + str.size();

  0002b	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]

; 497  :        size_t h = 0;

  0002e	33 d2		 xor	 edx, edx
  00030	03 f1		 add	 esi, ecx

; 498  : 
; 499  :        while (s < end)

  00032	3b ce		 cmp	 ecx, esi
  00034	73 10		 jae	 SHORT $LN25@find
$LL42@find:

; 500  :        {
; 501  :            h *= 16777619;
; 502  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00036	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00039	41		 inc	 ecx
  0003a	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  00040	33 d0		 xor	 edx, eax
  00042	3b ce		 cmp	 ecx, esi
  00044	72 f0		 jb	 SHORT $LL42@find
$LN25@find:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00049	57		 push	 edi
  0004a	53		 push	 ebx
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ??$find_node_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@123@IABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABU?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@6@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::find_node_impl<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2371 :           : node_(static_cast<node_pointer>(x))

  00051	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2371 :           : node_(static_cast<node_pointer>(x))

  00057	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  00059	8b c1		 mov	 eax, ecx

; 1805 :     }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?find@?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::~unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >, COMDAT
; _this$ = ecx

; 1646 :     }

  00000	e9 00 00 00 00	 jmp	 ??1?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
??1?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::~unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??0?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >, COMDAT
; _this$ = ecx

; 1510 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  00007	6a 0b		 push	 11			; 0000000bH
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1510 :     {

  00009	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2761 :         functions(H const& hf, P const& eq) : current_(0)

  0000c	c6 06 00	 mov	 BYTE PTR [esi], 0

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  0000f	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00014	83 c4 04	 add	 esp, 4
  00017	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00021	8b c6		 mov	 eax, esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3122 :               mlf_(1.0f), max_load_(0), buckets_()

  00023	c7 46 0c 00 00
	80 3f		 mov	 DWORD PTR [esi+12], 1065353216 ; 3f800000H
  0002a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00031	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1511 :     }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_num_buckets$ = 8					; size = 4
_prev$1$ = 8						; size = 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::rehash_impl, COMDAT
; _this$ = ecx

; 4577 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 4578 :         BOOST_ASSERT(this->buckets_);
; 4579 : 
; 4580 :         this->create_buckets(num_buckets);

  00006	ff 75 08	 push	 DWORD PTR _num_buckets$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi
  0000e	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::create_buckets

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00013	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00016	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00019	8d 3c 88	 lea	 edi, DWORD PTR [eax+ecx*4]
  0001c	89 7d 08	 mov	 DWORD PTR _prev$1$[ebp], edi

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  0001f	8b 3f		 mov	 edi, DWORD PTR [edi]
  00021	85 ff		 test	 edi, edi
  00023	0f 84 a6 00 00
	00		 je	 $LN3@rehash_imp
  00029	53		 push	 ebx
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL2@rehash_imp:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00030	83 7f 1c 0f	 cmp	 DWORD PTR [edi+28], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00034	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4585 :             node_pointer n = next_node(prev);

  00037	8b f7		 mov	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00039	76 03		 jbe	 SHORT $LN41@rehash_imp

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
$LN41@rehash_imp:
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 496  :        const unsigned char * end = s + str.size();

  0003e	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]

; 497  :        size_t h = 0;

  00041	33 d2		 xor	 edx, edx
  00043	03 d8		 add	 ebx, eax

; 498  : 
; 499  :        while (s < end)

  00045	3b c3		 cmp	 eax, ebx
  00047	73 17		 jae	 SHORT $LN35@rehash_imp
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL65@rehash_imp:

; 500  :        {
; 501  :            h *= 16777619;
; 502  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00050	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00053	40		 inc	 eax
  00054	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  0005a	33 d1		 xor	 edx, ecx
  0005c	3b c3		 cmp	 eax, ebx
  0005e	72 f0		 jb	 SHORT $LL65@rehash_imp
$LN35@rehash_imp:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2604 :           return hash % bucket_count;

  00060	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00063	8b c2		 mov	 eax, edx
  00065	33 d2		 xor	 edx, edx
  00067	f7 73 04	 div	 DWORD PTR [ebx+4]

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  0006a	8b c2		 mov	 eax, edx
  0006c	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00071	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  00074	8b 07		 mov	 eax, DWORD PTR [edi]

; 4596 :               if (!next || next->is_first_in_group()) {

  00076	85 c0		 test	 eax, eax
  00078	74 26		 je	 SHORT $LN73@rehash_imp
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL6@rehash_imp:

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00080	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00083	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00086	f7 d1		 not	 ecx
  00088	f6 c1 01	 test	 cl, 1

; 4596 :               if (!next || next->is_first_in_group()) {

  0008b	75 13		 jne	 SHORT $LN73@rehash_imp

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  0008d	8b ca		 mov	 ecx, edx

; 4597 :                 break;
; 4598 :               }
; 4599 :               n = next;

  0008f	8b f0		 mov	 esi, eax

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  00091	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  00097	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));
; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);
; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;
; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);

  0009a	8b 00		 mov	 eax, DWORD PTR [eax]

; 4596 :               if (!next || next->is_first_in_group()) {

  0009c	85 c0		 test	 eax, eax
  0009e	75 e0		 jne	 SHORT $LL6@rehash_imp
$LN73@rehash_imp:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  000a0	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000a3	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]

; 4600 :               n->bucket_info_ = bucket_index;
; 4601 :               n->reset_first_in_group();
; 4602 :             }
; 4603 : 
; 4604 :             // n is now the last node in the group
; 4605 :             bucket_pointer b = this->get_bucket_pointer(bucket_index);
; 4606 :             if (!b->next_) {

  000a6	8b 55 08	 mov	 edx, DWORD PTR _prev$1$[ebp]
  000a9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ab	85 c0		 test	 eax, eax
  000ad	75 09		 jne	 SHORT $LN12@rehash_imp

; 4607 :               b->next_ = prev;

  000af	89 11		 mov	 DWORD PTR [ecx], edx

; 4608 :               prev = n;

  000b1	8b 3e		 mov	 edi, DWORD PTR [esi]
  000b3	89 75 08	 mov	 DWORD PTR _prev$1$[ebp], esi

; 4609 :             } else {

  000b6	eb 0e		 jmp	 SHORT $LN13@rehash_imp
$LN12@rehash_imp:

; 4610 :               link_pointer next = n->next_;
; 4611 :               n->next_ = b->next_->next_;

  000b8	8b 00		 mov	 eax, DWORD PTR [eax]
  000ba	8b 3e		 mov	 edi, DWORD PTR [esi]
  000bc	89 06		 mov	 DWORD PTR [esi], eax

; 4612 :               b->next_->next_ = prev->next_;

  000be	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000c0	8b 02		 mov	 eax, DWORD PTR [edx]
  000c2	89 01		 mov	 DWORD PTR [ecx], eax

; 4613 :               prev->next_ = next;

  000c4	89 3a		 mov	 DWORD PTR [edx], edi
$LN13@rehash_imp:

; 4581 :         link_pointer prev = this->get_previous_start();
; 4582 :         BOOST_TRY
; 4583 :         {
; 4584 :           while (prev->next_) {

  000c6	85 ff		 test	 edi, edi
  000c8	0f 85 62 ff ff
	ff		 jne	 $LL2@rehash_imp
  000ce	5b		 pop	 ebx
$LN3@rehash_imp:
  000cf	5f		 pop	 edi

; 4614 :             }
; 4615 :           }
; 4616 :         }
; 4617 :         BOOST_CATCH(...)
; 4618 :         {
; 4619 :           node_pointer n = next_node(prev);
; 4620 :           prev->next_ = node_pointer();
; 4621 :           while (n) {
; 4622 :             node_pointer next = next_node(n);
; 4623 :             destroy_node(n);
; 4624 :             --size_;
; 4625 :             n = next;
; 4626 :           }
; 4627 :           BOOST_RETHROW
; 4628 :         }
; 4629 :         BOOST_CATCH_END
; 4630 :       }

  000d0	5e		 pop	 esi
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::rehash_impl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 3333 :         ~table() { delete_buckets(); }

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 3345 :           if (buckets_) {

  00003	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00006	85 c0		 test	 eax, eax
  00008	0f 84 af 00 00
	00		 je	 $LN7@table
  0000e	56		 push	 esi

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000f	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]

; 3346 :             node_pointer n = static_cast<node_pointer>(

  00012	8b 34 b0	 mov	 esi, DWORD PTR [eax+esi*4]

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00015	85 f6		 test	 esi, esi
  00017	74 5d		 je	 SHORT $LN126@table
  00019	57		 push	 edi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL5@table:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00020	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3357 :               node_pointer next = next_node(n);

  00023	8b 3e		 mov	 edi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00025	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00028	76 28		 jbe	 SHORT $LN77@table
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0002d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0002e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00034	72 12		 jb	 SHORT $LN88@table

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00036	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00039	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00041	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00044	77 79		 ja	 SHORT $LN143@table

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00046	8b c2		 mov	 eax, edx
$LN88@table:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00048	51		 push	 ecx
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004f	83 c4 08	 add	 esp, 8
$LN77@table:
  00052	6a 24		 push	 36			; 00000024H
  00054	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00055	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0005c	c7 46 1c 0f 00
	00 00		 mov	 DWORD PTR [esi+28], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00063	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00067	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006c	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3359 :               n = next;

  0006f	8b f7		 mov	 esi, edi
  00071	85 ff		 test	 edi, edi
  00073	75 ab		 jne	 SHORT $LL5@table

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00075	5f		 pop	 edi
$LN126@table:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 723  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00076	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00079	5e		 pop	 esi
  0007a	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+4]
  00081	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00084	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008a	72 12		 jb	 SHORT $LN146@table

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0008f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00092	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00094	83 c0 fc	 add	 eax, -4			; fffffffcH
  00097	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009a	77 23		 ja	 SHORT $LN143@table

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0009c	8b c2		 mov	 eax, edx
$LN146@table:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0009e	51		 push	 ecx
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000a5	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3363 :             buckets_ = bucket_pointer();

  000a8	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 3364 :             max_load_ = 0;

  000af	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 3365 :             size_ = 0;

  000b6	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN7@table:
  000bd	5b		 pop	 ebx

; 3333 :         ~table() { delete_buckets(); }

  000be	c3		 ret	 0
$LN143@table:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000bf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN169@table:
  000c4	cc		 int	 3
??1?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_f$ = -8						; size = 8
tv524 = -8						; size = 8
_new_count$ = 8						; size = 4
_dummy_node$1$ = 8					; size = 4
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::create_buckets, COMDAT
; _this$ = ecx

; 3178 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3179 :           link_pointer dummy_node;
; 3180 : 
; 3181 :           // Construct the new buckets and dummy node, and destroy the old
; 3182 :           // buckets
; 3183 :           if (buckets_) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _new_count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00011	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00014	85 d2		 test	 edx, edx
  00016	74 74		 je	 SHORT $LN5@create_buc

; 3184 :             dummy_node =

  00018	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001b	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001e	89 45 08	 mov	 DWORD PTR _dummy_node$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00021	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00027	0f 87 25 01 00
	00		 ja	 $LN107@create_buc

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0002d	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 227  :     if (_Bytes == 0) {

  00034	85 c0		 test	 eax, eax
  00036	75 04		 jne	 SHORT $LN30@create_buc

; 228  :         return nullptr;

  00038	33 f6		 xor	 esi, esi
  0003a	eb 19		 jmp	 SHORT $LN29@create_buc
$LN30@create_buc:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0003c	50		 push	 eax
  0003d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00042	72 07		 jb	 SHORT $LN31@create_buc

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00044	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00049	eb 05		 jmp	 SHORT $LN121@create_buc
$LN31@create_buc:

; 136  :         return ::operator new(_Bytes);

  0004b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@create_buc:

; 723  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00050	8b f0		 mov	 esi, eax
  00052	83 c4 04	 add	 esp, 4
$LN29@create_buc:
  00055	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00058	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+4]
  0005f	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00062	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00068	72 16		 jb	 SHORT $LN59@create_buc

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0006a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00070	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00072	83 c0 fc	 add	 eax, -4			; fffffffcH
  00075	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00078	0f 87 cf 00 00
	00		 ja	 $LN56@create_buc

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0007e	8b c2		 mov	 eax, edx
$LN59@create_buc:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00080	51		 push	 ecx
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00087	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3189 :             buckets_ = new_buckets;

  0008a	eb 3b		 jmp	 SHORT $LN93@create_buc
$LN5@create_buc:

; 3190 :           } else if (bucket::extra_node) {
; 3191 :             node_constructor a(node_alloc());
; 3192 :             a.create_node();
; 3193 :             buckets_ =
; 3194 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3195 :             dummy_node = a.release();
; 3196 :           } else {
; 3197 :             dummy_node = link_pointer();

  0008c	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _dummy_node$1$[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00093	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00099	0f 87 b3 00 00
	00		 ja	 $LN107@create_buc

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0009f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 227  :     if (_Bytes == 0) {

  000a6	85 c0		 test	 eax, eax
  000a8	75 04		 jne	 SHORT $LN94@create_buc

; 228  :         return nullptr;

  000aa	33 f6		 xor	 esi, esi
  000ac	eb 19		 jmp	 SHORT $LN93@create_buc
$LN94@create_buc:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ae	50		 push	 eax
  000af	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b4	72 07		 jb	 SHORT $LN95@create_buc

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000bb	eb 05		 jmp	 SHORT $LN122@create_buc
$LN95@create_buc:

; 136  :         return ::operator new(_Bytes);

  000bd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN122@create_buc:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3203 :           bucket_count_ = new_count;

  000c2	8b f0		 mov	 esi, eax
  000c4	83 c4 04	 add	 esp, 4
$LN93@create_buc:
  000c7	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000ca	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  000cd	85 f6		 test	 esi, esi
  000cf	74 55		 je	 SHORT $LN17@create_buc
  000d1	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  000d6	0f 57 c0	 xorps	 xmm0, xmm0
  000d9	f2 0f 2a c3	 cvtsi2sd xmm0, ebx
  000dd	8b c3		 mov	 eax, ebx
  000df	83 ec 08	 sub	 esp, 8
  000e2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e5	0f 5a c9	 cvtps2pd xmm1, xmm1
  000e8	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000f1	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000f5	f2 0f 11 4d f8	 movsd	 QWORD PTR tv524[ebp], xmm1
  000fa	dd 45 f8	 fld	 QWORD PTR tv524[ebp]
  000fd	dd 1c 24	 fstp	 QWORD PTR [esp]
  00100	e8 00 00 00 00	 call	 _ceil
  00105	dd 5d f8	 fstp	 QWORD PTR _f$[ebp]

; 2893 :         return f >= static_cast<double>(

  00108	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _f$[ebp]

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  0010d	83 c4 08	 add	 esp, 8

; 2893 :         return f >= static_cast<double>(

  00110	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  00118	72 05		 jb	 SHORT $LN21@create_buc
  0011a	83 c8 ff	 or	 eax, -1
  0011d	eb 09		 jmp	 SHORT $LN18@create_buc
$LN21@create_buc:
  0011f	e8 00 00 00 00	 call	 __dtol3

; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  00124	eb 02		 jmp	 SHORT $LN18@create_buc
$LN17@create_buc:
  00126	33 c0		 xor	 eax, eax
$LN18@create_buc:
  00128	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 3204 :           recalculate_max_load();
; 3205 : 
; 3206 :           bucket_pointer end =

  0012b	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  0012e	3b f0		 cmp	 esi, eax
  00130	74 0d		 je	 SHORT $LN3@create_buc
$LL4@create_buc:

; 2579 :         ptr_bucket() : next_(0) {}

  00132	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  00138	83 c6 04	 add	 esi, 4
  0013b	3b f0		 cmp	 esi, eax
  0013d	75 f3		 jne	 SHORT $LL4@create_buc
$LN3@create_buc:

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  0013f	8b 4d 08	 mov	 ecx, DWORD PTR _dummy_node$1$[ebp]
  00142	5f		 pop	 edi

; 3212 :         }

  00143	5e		 pop	 esi

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  00144	89 08		 mov	 DWORD PTR [eax], ecx

; 3212 :         }

  00146	5b		 pop	 ebx
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 04 00	 ret	 4
$LN56@create_buc:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN107@create_buc:

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00152	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@create_buc:
  00157	cc		 int	 3
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::create_buckets
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z
_TEXT	SEGMENT
tv80 = -8						; size = 8
tv132 = -8						; size = 8
_size$ = 8						; size = 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::min_buckets_for_size, COMDAT
; _this$ = ecx

; 3095 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00006	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00009	83 ec 08	 sub	 esp, 8
  0000c	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00011	0f 5a c0	 cvtps2pd xmm0, xmm0
  00014	66 0f 6e c8	 movd	 xmm1, eax
  00018	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0001c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001f	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00028	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0002c	f2 0f 11 4d f8	 movsd	 QWORD PTR tv132[ebp], xmm1
  00031	dd 45 f8	 fld	 QWORD PTR tv132[ebp]
  00034	dd 1c 24	 fstp	 QWORD PTR [esp]
  00037	e8 00 00 00 00	 call	 _floor
  0003c	dd 5d f8	 fstp	 QWORD PTR tv80[ebp]
  0003f	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv80[ebp]
  00044	83 c4 08	 add	 esp, 8
  00047	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000

; 2893 :         return f >= static_cast<double>(

  0004f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41efffffffe00000
  00057	72 12		 jb	 SHORT $LN5@min_bucket
  00059	83 c8 ff	 or	 eax, -1

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00062	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN5@min_bucket:

; 2893 :         return f >= static_cast<double>(

  0006b	e8 00 00 00 00	 call	 __dtol3

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00076	83 c4 04	 add	 esp, 4

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::min_buckets_for_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
;	COMDAT ?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z
_TEXT	SEGMENT
__Op$2 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z PROC ; std::list<CEterPack *,std::allocator<CEterPack *> >::push_front, COMDAT
; _this$ = ecx

; 1242 :     void push_front(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 1020 :         if (_Mysize == max_size()) {

  00029	81 7e 04 55 55
	55 15		 cmp	 DWORD PTR [esi+4], 357913941 ; 15555555H

; 1243 :         _Emplace(_Mypair._Myval2._Myhead->_Next, _Val);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b 38		 mov	 edi, DWORD PTR [eax]

; 1020 :         if (_Mysize == max_size()) {

  00034	74 46		 je	 SHORT $LN67@push_front
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00036	89 75 ec	 mov	 DWORD PTR __Op$2[ebp], esi

; 136  :         return ::operator new(_Bytes);

  00039	6a 0c		 push	 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 583  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00042	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00049	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 585  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00051	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 585  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00054	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00056	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1025 :         ++_Mysize;

  00059	ff 46 04	 inc	 DWORD PTR [esi+4]

; 598  :         const pointer _Insert_after = _Insert_before->_Prev;

  0005c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 599  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  0005f	89 38		 mov	 DWORD PTR [eax], edi

; 600  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00061	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 601  :         const auto _Result    = this->_Ptr;
; 602  :         this->_Ptr            = pointer{};
; 603  :         _Insert_before->_Prev = _Result;

  00064	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 604  :         _Insert_after->_Next  = _Result;

  00067	89 01		 mov	 DWORD PTR [ecx], eax

; 1244 :     }

  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
$LN67@push_front:

; 1021 :             _Xlength_error("list too long");

  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00081	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN65@push_front:
  00086	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCEterPack@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CEterPack *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z ENDP ; std::list<CEterPack *,std::allocator<CEterPack *> >::push_front
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?__ClearCacheMap@CEterPackManager@@IAEXXZ
_TEXT	SEGMENT
?__ClearCacheMap@CEterPackManager@@IAEXXZ PROC		; CEterPackManager::__ClearCacheMap, COMDAT
; _this$ = ecx

; 133  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00004	83 bf 50 14 00
	00 00		 cmp	 DWORD PTR [edi+5200], 0
  0000b	8d 8f 4c 14 00
	00		 lea	 ecx, DWORD PTR [edi+5196]
  00011	8d 97 5c 14 00
	00		 lea	 edx, DWORD PTR [edi+5212]
  00017	74 72		 je	 SHORT $LN92@ClearCache

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00019	8b 01		 mov	 eax, DWORD PTR [ecx]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0001b	8b 32		 mov	 esi, DWORD PTR [edx]
  0001d	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00020	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 136  : 	for (i = m_kMap_dwNameKey_kCache.begin(); i != m_kMap_dwNameKey_kCache.end(); ++i)

  00022	74 1d		 je	 SHORT $LN14@ClearCache
$LL4@ClearCache:

; 137  : 		delete [] i->second.m_abBufData;

  00024	ff 76 0c	 push	 DWORD PTR [esi+12]
  00027	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2381 :           node_ = static_cast<node_pointer>(node_->next_);

  0002c	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 137  : 		delete [] i->second.m_abBufData;

  0002e	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2399 :           return node_ != x.node_;

  00031	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 136  : 	for (i = m_kMap_dwNameKey_kCache.begin(); i != m_kMap_dwNameKey_kCache.end(); ++i)

  00033	75 ef		 jne	 SHORT $LL4@ClearCache
  00035	8d 8f 4c 14 00
	00		 lea	 ecx, DWORD PTR [edi+5196]
  0003b	8d 97 5c 14 00
	00		 lea	 edx, DWORD PTR [edi+5212]
$LN14@ClearCache:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4516 :         if (size_) {

  00041	83 bf 50 14 00
	00 00		 cmp	 DWORD PTR [edi+5200], 0
  00048	74 41		 je	 SHORT $LN92@ClearCache

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0004a	8b 02		 mov	 eax, DWORD PTR [edx]
  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0004e	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]

; 4518 :           for (bucket_pointer it = buckets_; it != end; ++it) {

  00051	3b c1		 cmp	 eax, ecx
  00053	74 0d		 je	 SHORT $LN41@ClearCache
$LL42@ClearCache:

; 4519 :             it->next_ = node_pointer();

  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0005b	83 c0 04	 add	 eax, 4
  0005e	3b c1		 cmp	 eax, ecx
  00060	75 f3		 jne	 SHORT $LL42@ClearCache
$LN41@ClearCache:

; 4520 :           }
; 4521 : 
; 4522 :           link_pointer prev = end->first_from_start();
; 4523 :           node_pointer n = next_node(prev);

  00062	8b 01		 mov	 eax, DWORD PTR [ecx]

; 4524 :           prev->next_ = node_pointer();

  00064	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 4525 :           size_ = 0;

  0006a	c7 87 50 14 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+5200], 0

; 4526 : 
; 4527 :           while (n) {

  00074	85 c0		 test	 eax, eax
  00076	74 13		 je	 SHORT $LN92@ClearCache
$LL43@ClearCache:

; 4528 :             node_pointer next = next_node(n);

  00078	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007a	6a 14		 push	 20			; 00000014H
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00082	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 4530 :             n = next;

  00085	8b c6		 mov	 eax, esi
  00087	85 f6		 test	 esi, esi
  00089	75 ed		 jne	 SHORT $LL43@ClearCache
$LN92@ClearCache:
  0008b	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 140  : }

  0008c	5e		 pop	 esi
  0008d	c3		 ret	 0
?__ClearCacheMap@CEterPackManager@@IAEXXZ ENDP		; CEterPackManager::__ClearCacheMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?__FindCache@CEterPackManager@@IAEPAUSCache@1@K@Z
_TEXT	SEGMENT
_f$ = -4						; size = 4
_dwFileNameHash$ = 8					; size = 4
?__FindCache@CEterPackManager@@IAEPAUSCache@1@K@Z PROC	; CEterPackManager::__FindCache, COMDAT
; _this$ = ecx

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 125  : 	boost::unordered_map<DWORD, SCache>::iterator f=m_kMap_dwNameKey_kCache.find(dwFileNameHash);

  00004	8d 45 08	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  00007	81 c1 48 14 00
	00		 add	 ecx, 5192		; 00001448H
  0000d	50		 push	 eax
  0000e	8d 45 fc	 lea	 eax, DWORD PTR _f$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?find@?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::find
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _f$[ebp]
  0001a	85 c0		 test	 eax, eax
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 126  : 	if (m_kMap_dwNameKey_kCache.end()==f)

  0001c	75 06		 jne	 SHORT $LN2@FindCache

; 130  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN2@FindCache:

; 127  : 		return NULL;
; 128  : 
; 129  : 	return &f->second;

  00024	83 c0 0c	 add	 eax, 12			; 0000000cH

; 130  : }

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?__FindCache@CEterPackManager@@IAEPAUSCache@1@K@Z ENDP	; CEterPackManager::__FindCache
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
_strFileName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szPathName$ = 8					; size = 4
?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z PROC	; CEterPackManager::FindPack, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	8b 45 08	 mov	 eax, DWORD PTR _c_szPathName$[ebp]
  0002f	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00032	0f 11 45 d8	 movups	 XMMWORD PTR _strFileName$[ebp], xmm0

; 836  :         _My_data._Mysize = 0;

  00036	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0003d	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00044	c6 45 d8 00	 mov	 BYTE PTR _strFileName$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 24   : 	if (0 == ConvertFileName(c_szPathName, strFileName))

  00048	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00052	51		 push	 ecx
  00053	50		 push	 eax
  00054	8b cf		 mov	 ecx, edi
  00056	e8 00 00 00 00	 call	 ?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEterPackManager::ConvertFileName
  0005b	85 c0		 test	 eax, eax
  0005d	75 05		 jne	 SHORT $LN5@FindPack

; 25   : 	{
; 26   : 		return &m_RootPack;

  0005f	83 c7 24	 add	 edi, 36			; 00000024H
  00062	eb 56		 jmp	 SHORT $LN156@FindPack
$LN5@FindPack:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00064	83 bf 38 14 00
	00 00		 cmp	 DWORD PTR [edi+5176], 0
  0006b	8b 55 d8	 mov	 edx, DWORD PTR _strFileName$[ebp]
  0006e	74 48		 je	 SHORT $LN3@FindPack

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00070	8b 87 34 14 00
	00		 mov	 eax, DWORD PTR [edi+5172]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00076	8b b7 44 14 00
	00		 mov	 esi, DWORD PTR [edi+5188]
  0007c	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  0007f	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 30   : 		for (TEterPackMap::iterator itor = m_DirPackMap.begin(); itor != m_DirPackMap.end(); ++itor)

  00081	74 35		 je	 SHORT $LN3@FindPack
$LL4@FindPack:

; 33   : 			CEterPack * pEterPack = itor->second;

  00083	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2377 :         value_type* operator->() const { return node_->value_ptr(); }

  00086	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00089	83 7d ec 0f	 cmp	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 33   : 			CEterPack * pEterPack = itor->second;

  0008d	89 4d d4	 mov	 DWORD PTR $T2[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00090	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]

; 426  :         if (_Large_mode_engaged()) {

  00093	0f 47 ca	 cmova	 ecx, edx

; 434  :         return _Myres > _Small_string_capacity;

  00096	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 35   : 			if (CompareName(c_rstrName.c_str(), c_rstrName.length(), strFileName.c_str()))

  0009a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0009d	76 02		 jbe	 SHORT $LN90@FindPack

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0009f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN90@FindPack:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 35   : 			if (CompareName(c_rstrName.c_str(), c_rstrName.length(), strFileName.c_str()))

  000a1	51		 push	 ecx
  000a2	52		 push	 edx
  000a3	50		 push	 eax
  000a4	8b cf		 mov	 ecx, edi
  000a6	e8 00 00 00 00	 call	 ?CompareName@CEterPackManager@@IAE_NPBDK0@Z ; CEterPackManager::CompareName
  000ab	84 c0		 test	 al, al
  000ad	75 35		 jne	 SHORT $LN150@FindPack
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2381 :           node_ = static_cast<node_pointer>(node_->next_);

  000af	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 30   : 		for (TEterPackMap::iterator itor = m_DirPackMap.begin(); itor != m_DirPackMap.end(); ++itor)

  000b1	8b 55 d8	 mov	 edx, DWORD PTR _strFileName$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2399 :           return node_ != x.node_;

  000b4	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 30   : 		for (TEterPackMap::iterator itor = m_DirPackMap.begin(); itor != m_DirPackMap.end(); ++itor)

  000b6	75 cb		 jne	 SHORT $LL4@FindPack
$LN3@FindPack:

; 42   : 	return NULL;

  000b8	33 ff		 xor	 edi, edi
$LN156@FindPack:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000ba	8b 45 ec	 mov	 eax, DWORD PTR _strFileName$[ebp+20]
  000bd	8b 4d d8	 mov	 ecx, DWORD PTR _strFileName$[ebp]
  000c0	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000c3	76 2e		 jbe	 SHORT $LN131@FindPack

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000c5	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c8	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ca	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000d0	72 17		 jb	 SHORT $LN142@FindPack

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000d2	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  000d5	83 c2 23	 add	 edx, 35			; 00000023H
  000d8	2b c1		 sub	 eax, ecx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000da	83 c0 fc	 add	 eax, -4			; fffffffcH
  000dd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000e0	77 30		 ja	 SHORT $LN158@FindPack
  000e2	eb 05		 jmp	 SHORT $LN142@FindPack
$LN150@FindPack:
  000e4	8b 7d d4	 mov	 edi, DWORD PTR $T2[ebp]
  000e7	eb d1		 jmp	 SHORT $LN156@FindPack
$LN142@FindPack:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000e9	52		 push	 edx
  000ea	51		 push	 ecx
  000eb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000f0	83 c4 08	 add	 esp, 8
$LN131@FindPack:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 42   : 	return NULL;

  000f3	8b c7		 mov	 eax, edi

; 43   : }

  000f5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ff	59		 pop	 ecx
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00105	33 cd		 xor	 ecx, ebp
  00107	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 04 00	 ret	 4
$LN158@FindPack:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00112	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN155@FindPack:
  00117	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FindPack@CEterPackManager@@IAEPAVCEterPack@@PBD@Z ENDP	; CEterPackManager::FindPack
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?CompareName@CEterPackManager@@IAE_NPBDK0@Z
_TEXT	SEGMENT
_c_szDirectoryName$ = 8					; size = 4
___formal$ = 12						; size = 4
_c_szFileName$ = 16					; size = 4
?CompareName@CEterPackManager@@IAE_NPBDK0@Z PROC	; CEterPackManager::CompareName, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	const char * c_pszSrc = c_szDirectoryName;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_szDirectoryName$[ebp]
  00006	56		 push	 esi

; 80   : 	const char * c_pszCmp = c_szFileName;
; 81   : 
; 82   : 	while (*c_pszSrc)

  00007	8a 10		 mov	 dl, BYTE PTR [eax]
  00009	84 d2		 test	 dl, dl
  0000b	74 19		 je	 SHORT $LN3@CompareNam
  0000d	8b 75 10	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00010	8a 0e		 mov	 cl, BYTE PTR [esi]
  00012	2b f0		 sub	 esi, eax
$LL2@CompareNam:

; 83   : 	{
; 84   : 		if (*(c_pszSrc++) != *(c_pszCmp++))

  00014	40		 inc	 eax
  00015	3a d1		 cmp	 dl, cl
  00017	75 14		 jne	 SHORT $LN8@CompareNam

; 86   : 
; 87   : 		if (!*c_pszCmp)

  00019	8a 0c 06	 mov	 cl, BYTE PTR [esi+eax]
  0001c	84 c9		 test	 cl, cl
  0001e	74 0d		 je	 SHORT $LN8@CompareNam

; 80   : 	const char * c_pszCmp = c_szFileName;
; 81   : 
; 82   : 	while (*c_pszSrc)

  00020	8a 10		 mov	 dl, BYTE PTR [eax]
  00022	84 d2		 test	 dl, dl
  00024	75 ee		 jne	 SHORT $LL2@CompareNam
$LN3@CompareNam:

; 88   : 			return false;
; 89   : 	}
; 90   : 
; 91   : 	return true;

  00026	b0 01		 mov	 al, 1
  00028	5e		 pop	 esi

; 92   : }

  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
$LN8@CompareNam:

; 85   : 			return false;

  0002d	32 c0		 xor	 al, al
  0002f	5e		 pop	 esi

; 92   : }

  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
?CompareName@CEterPackManager@@IAE_NPBDK0@Z ENDP	; CEterPackManager::CompareName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
_rstrFileName$ = 12					; size = 4
?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CEterPackManager::ConvertFileName, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_szFileName$[ebp]
  00006	8b ca		 mov	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 57   : {

  00008	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00009	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0000c	0f 1f 40 00	 npad	 4
$LL54@ConvertFil:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL54@ConvertFil
  00017	2b ce		 sub	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	8b 75 0c	 mov	 esi, DWORD PTR _rstrFileName$[ebp]
  0001c	51		 push	 ecx
  0001d	52		 push	 edx
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 59   : 	stl_lowers(rstrFileName);

  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers

; 60   : 
; 61   : 	int iCount = 0;
; 62   : 
; 63   : 	for (DWORD i = 0; i < rstrFileName.length(); ++i)

  0002b	33 c0		 xor	 eax, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	33 c9		 xor	 ecx, ecx
  00032	39 46 10	 cmp	 DWORD PTR [esi+16], eax
  00035	76 39		 jbe	 SHORT $LN3@ConvertFil
  00037	57		 push	 edi
$LL4@ConvertFil:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00038	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 416  :         value_type* _Result = _Bx._Buf;

  0003b	8b fe		 mov	 edi, esi

; 434  :         return _Myres > _Small_string_capacity;

  0003d	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00040	76 02		 jbe	 SHORT $LN53@ConvertFil

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00042	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN53@ConvertFil:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 65   : 		if (rstrFileName[i] == '/')

  00044	80 3c 07 2f	 cmp	 BYTE PTR [edi+eax], 47	; 0000002fH
  00048	74 1c		 je	 SHORT $LN64@ConvertFil
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  0004a	8b fe		 mov	 edi, esi

; 434  :         return _Myres > _Small_string_capacity;

  0004c	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0004f	76 02		 jbe	 SHORT $LN52@ConvertFil

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00051	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN52@ConvertFil:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 67   : 		else if (rstrFileName[i] == '\\')

  00053	80 3c 07 5c	 cmp	 BYTE PTR [edi+eax], 92	; 0000005cH
  00057	75 0e		 jne	 SHORT $LN2@ConvertFil
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  00059	8b fe		 mov	 edi, esi

; 434  :         return _Myres > _Small_string_capacity;

  0005b	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0005e	76 02		 jbe	 SHORT $LN40@ConvertFil

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00060	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN40@ConvertFil:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 69   : 			rstrFileName[i] = '/';

  00062	c6 04 07 2f	 mov	 BYTE PTR [edi+eax], 47	; 0000002fH
$LN64@ConvertFil:

; 60   : 
; 61   : 	int iCount = 0;
; 62   : 
; 63   : 	for (DWORD i = 0; i < rstrFileName.length(); ++i)

  00066	41		 inc	 ecx
$LN2@ConvertFil:
  00067	40		 inc	 eax
  00068	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  0006b	72 cb		 jb	 SHORT $LL4@ConvertFil
  0006d	5f		 pop	 edi

; 70   : 			++iCount;
; 71   : 		}
; 72   : 	}
; 73   : 
; 74   : 	return iCount;

  0006e	8b c1		 mov	 eax, ecx
$LN3@ConvertFil:
  00070	5e		 pop	 esi

; 75   : }

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CEterPackManager::ConvertFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?ArrangeMemoryMappedPack@CEterPackManager@@QAEXXZ
_TEXT	SEGMENT
?ArrangeMemoryMappedPack@CEterPackManager@@QAEXXZ PROC	; CEterPackManager::ArrangeMemoryMappedPack, COMDAT
; _this$ = ecx

; 289  : 	//time_t curTime = time(NULL);
; 290  : 	//CEterFileDict::TDict dict = m_FileDict.GetDict();
; 291  : 	//for (CEterFileDict::TDict::iterator it = dict.begin(); it != dict.end(); ++it)
; 292  : 	//{
; 293  : 	//	CEterFileDict::Item &rFileItem = it->second;
; 294  : 	//	CEterPack* pkPack = rFileItem.pkPack;
; 295  : 	//	if (pkPack)
; 296  : 	//	{
; 297  : 	//		if (curTime - pkPack->GetLastAccessTime() > g_tCachingInterval)
; 298  : 	//		{
; 299  : 	//			pkPack->ClearDataMemoryMap();
; 300  : 	//		}
; 301  : 	//	}
; 302  : 	//}
; 303  : }

  00000	c2 00 00	 ret	 0
?ArrangeMemoryMappedPack@CEterPackManager@@QAEXXZ ENDP	; CEterPackManager::ArrangeMemoryMappedPack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z
_TEXT	SEGMENT
_dwPackgeIdentifier$1$ = -1132				; size = 4
_pStream$GSCopy$1$ = -1128				; size = 4
_i$1$ = -1124						; size = 4
$T2 = -1120						; size = 4
_this$1$ = -1116					; size = 4
_iReadOffset$1$ = -1112					; size = 4
_cit$1$ = -1108						; size = 4
_iSDBInfoCount$1$ = -1104				; size = 4
__Ptr$1$ = -1100					; size = 4
__Result$1$ = -1096					; size = 4
_j$2$ = -1096						; size = 4
__Result$2$ = -1096					; size = 4
__Ptr$1$ = -1096					; size = 4
$T3 = -1092						; size = 4
_k$1$ = -1092						; size = 4
_noPathName$4 = -1088					; size = 24
_ssvv$5 = -1064						; size = 24
_szPath$6 = -1040					; size = 1024
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pStream$ = 8						; size = 4
?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z PROC ; CEterPackManager::RetrieveHybridCryptPackSDB, COMDAT
; _this$ = ecx

; 531  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 60 04 00
	00		 sub	 esp, 1120		; 00000460H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d a4 fb ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx
  00033	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  00036	89 85 98 fb ff
	ff		 mov	 DWORD PTR _pStream$GSCopy$1$[ebp], eax
  0003c	c7 85 a0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 532  : 	//cnt
; 533  : 	//for cnt
; 534  : 	//DWORD				dwPackageIdentifier;
; 535  : 	//DWORD				dwFileIdentifier;
; 536  : 	//std::vector<BYTE>	vecSDBStream;
; 537  : 	int iReadOffset = 0;
; 538  : 	int iSDBInfoCount = 0;
; 539  : 
; 540  : 	memcpy( &iSDBInfoCount, pStream+iReadOffset, sizeof(int) );
; 541  : 	iReadOffset += sizeof(int);
; 542  : 
; 543  : 	for( int i = 0; i < iSDBInfoCount; ++i )

  00046	c7 85 9c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
  00050	8b 30		 mov	 esi, DWORD PTR [eax]
  00052	89 b5 b0 fb ff
	ff		 mov	 DWORD PTR _iSDBInfoCount$1$[ebp], esi
  00058	be 04 00 00 00	 mov	 esi, 4
  0005d	8b 95 b0 fb ff
	ff		 mov	 edx, DWORD PTR _iSDBInfoCount$1$[ebp]
  00063	85 d2		 test	 edx, edx
  00065	0f 8e 3b 04 00
	00		 jle	 $LN359@RetrieveHy
  0006b	0f 1f 44 00 00	 npad	 5
$LL4@RetrieveHy:

; 546  : 		memcpy( &dwPackgeIdentifier, pStream+iReadOffset, sizeof(DWORD) );

  00070	8b 04 30	 mov	 eax, DWORD PTR [eax+esi]

; 547  : 		iReadOffset += sizeof(DWORD);

  00073	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00076	83 b9 20 14 00
	00 00		 cmp	 DWORD PTR [ecx+5152], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 546  : 		memcpy( &dwPackgeIdentifier, pStream+iReadOffset, sizeof(DWORD) );

  0007d	89 85 94 fb ff
	ff		 mov	 DWORD PTR _dwPackgeIdentifier$1$[ebp], eax

; 547  : 		iReadOffset += sizeof(DWORD);

  00083	89 b5 a8 fb ff
	ff		 mov	 DWORD PTR _iReadOffset$1$[ebp], esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00089	74 11		 je	 SHORT $LN331@RetrieveHy

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0008b	8b 81 1c 14 00
	00		 mov	 eax, DWORD PTR [ecx+5148]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00091	8b b1 2c 14 00
	00		 mov	 esi, DWORD PTR [ecx+5164]
  00097	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]
  0009a	eb 02		 jmp	 SHORT $LN391@RetrieveHy
$LN331@RetrieveHy:
  0009c	33 f6		 xor	 esi, esi
$LN391@RetrieveHy:

; 2459 :           return x.node_ != y.node_;

  0009e	89 b5 ac fb ff
	ff		 mov	 DWORD PTR _cit$1$[ebp], esi
  000a4	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 550  : 		for (cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit)

  000a6	0f 84 ef 03 00
	00		 je	 $LN387@RetrieveHy
  000ac	0f 1f 40 00	 npad	 4
$LL7@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000b0	83 7e 1c 0f	 cmp	 DWORD PTR [esi+28], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  000b4	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000b7	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000ba	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  000bd	89 8d b8 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000c3	0f 11 85 d8 fb
	ff ff		 movups	 XMMWORD PTR _ssvv$5[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000ca	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _ssvv$5[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000d4	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _ssvv$5[ebp+20], 0

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000de	89 85 bc fb ff
	ff		 mov	 DWORD PTR $T3[ebp], eax

; 426  :         if (_Large_mode_engaged()) {

  000e4	76 08		 jbe	 SHORT $LN30@RetrieveHy

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000e6	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000e8	89 8d b8 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN30@RetrieveHy:

; 857  :         if (_Count > max_size()) {

  000ee	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000f3	0f 87 d4 03 00
	00		 ja	 $LN351@RetrieveHy

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  000f9	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000fc	77 2c		 ja	 SHORT $LN38@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fe	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00101	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00106	89 85 e8 fb ff
	ff		 mov	 DWORD PTR _ssvv$5[ebp+16], eax
  0010c	89 bd ec fb ff
	ff		 mov	 DWORD PTR _ssvv$5[ebp+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00112	0f 11 85 d8 fb
	ff ff		 movups	 XMMWORD PTR _ssvv$5[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 884  :             return;

  00119	8b 95 d8 fb ff
	ff		 mov	 edx, DWORD PTR _ssvv$5[ebp]
  0011f	89 95 b4 fb ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], edx
  00125	e9 87 00 00 00	 jmp	 $LN64@RetrieveHy
$LN38@RetrieveHy:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0012a	8b f8		 mov	 edi, eax
  0012c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0012f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00135	76 12		 jbe	 SHORT $LN44@RetrieveHy

; 2944 :             return _Max;

  00137	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  0013c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00141	51		 push	 ecx
  00142	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00147	eb 28		 jmp	 SHORT $LN393@RetrieveHy
$LN44@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00149	83 ff 16	 cmp	 edi, 22			; 00000016H
  0014c	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00151	0f 42 f9	 cmovb	 edi, ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  00154	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00157	85 c9		 test	 ecx, ecx
  00159	74 21		 je	 SHORT $LN392@RetrieveHy
$LN58@RetrieveHy:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0015b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00161	72 08		 jb	 SHORT $LN59@RetrieveHy

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00163	51		 push	 ecx
  00164	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00169	eb 06		 jmp	 SHORT $LN393@RetrieveHy
$LN59@RetrieveHy:

; 136  :         return ::operator new(_Bytes);

  0016b	51		 push	 ecx
  0016c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN393@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00171	8b c8		 mov	 ecx, eax
  00173	83 c4 04	 add	 esp, 4
  00176	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
$LN392@RetrieveHy:

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0017c	89 85 e8 fb ff
	ff		 mov	 DWORD PTR _ssvv$5[ebp+16], eax

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00182	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00183	50		 push	 eax
  00184	ff b5 b8 fb ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0018a	89 8d b4 fb ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00190	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00191	89 8d d8 fb ff
	ff		 mov	 DWORD PTR _ssvv$5[ebp], ecx

; 892  :         _My_data._Myres  = _New_capacity;

  00197	89 bd ec fb ff
	ff		 mov	 DWORD PTR _ssvv$5[ebp+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019d	e8 00 00 00 00	 call	 _memcpy
  001a2	8b 95 b4 fb ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
  001a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ab	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
$LN64@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 552  : 			auto ssvv = std::string(cit->first);

  001b1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 349  : 	szPath[0] = '\0';

  001b8	c6 85 f0 fb ff
	ff 00		 mov	 BYTE PTR _szPath$6[ebp], 0

; 350  : 
; 351  : 	size_t nLength = str.length();
; 352  : 
; 353  : 	if (nLength > 0)

  001bf	85 c0		 test	 eax, eax
  001c1	0f 84 d9 00 00
	00		 je	 $LN70@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001c7	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  001ca	8d 85 d8 fb ff
	ff		 lea	 eax, DWORD PTR _ssvv$5[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 355  : 		strcpy(szPath, str.c_str());

  001d0	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  001d6	0f 47 c2	 cmova	 eax, edx
  001d9	89 85 b8 fb ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 428  :         }
; 429  : 
; 430  :         return _Result;

  001df	8b c1		 mov	 eax, ecx
  001e1	8b 95 b8 fb ff
	ff		 mov	 edx, DWORD PTR __Result$2$[ebp]
  001e7	2b d0		 sub	 edx, eax
  001e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL82@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 355  : 		strcpy(szPath, str.c_str());

  001f0	8a 04 11	 mov	 al, BYTE PTR [ecx+edx]
  001f3	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  001f6	88 41 ff	 mov	 BYTE PTR [ecx-1], al
  001f9	84 c0		 test	 al, al
  001fb	75 f3		 jne	 SHORT $LL82@RetrieveHy

; 356  : 
; 357  : 		for (size_t i = nLength - 1; i > 0; i--)

  001fd	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00203	8b 95 b4 fb ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
  00209	83 e8 01	 sub	 eax, 1
  0020c	0f 84 8e 00 00
	00		 je	 $LN70@RetrieveHy
$LL71@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00212	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  00215	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _ssvv$5[ebp]

; 417  :         if (_Large_mode_engaged()) {

  0021b	0f 47 ca	 cmova	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 359  : 			if (str[i] == '/' || str[i] == '\\')

  0021e	80 3c 01 2f	 cmp	 BYTE PTR [ecx+eax], 47	; 0000002fH
  00222	74 1d		 je	 SHORT $LN349@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00224	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  00227	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _ssvv$5[ebp]

; 417  :         if (_Large_mode_engaged()) {

  0022d	0f 47 ca	 cmova	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 359  : 			if (str[i] == '/' || str[i] == '\\')

  00230	80 3c 01 5c	 cmp	 BYTE PTR [ecx+eax], 92	; 0000005cH
  00234	74 0b		 je	 SHORT $LN349@RetrieveHy

; 365  : 				break;
; 366  : 			}
; 367  : 
; 368  : 			if (0 == i)

  00236	85 c0		 test	 eax, eax
  00238	74 66		 je	 SHORT $LN70@RetrieveHy

; 356  : 
; 357  : 		for (size_t i = nLength - 1; i > 0; i--)

  0023a	83 e8 01	 sub	 eax, 1
  0023d	75 d3		 jne	 SHORT $LL71@RetrieveHy
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 554  : 			if (dwPackgeIdentifier == stringhash().GetHash(noPathName))

  0023f	eb 5f		 jmp	 SHORT $LN70@RetrieveHy
$LN349@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 362  : 				for (size_t j = i + 1; j < nLength; j++, k++)

  00241	40		 inc	 eax
  00242	33 c9		 xor	 ecx, ecx
  00244	89 85 b8 fb ff
	ff		 mov	 DWORD PTR _j$2$[ebp], eax
  0024a	3b 85 bc fb ff
	ff		 cmp	 eax, DWORD PTR $T3[ebp]
  00250	73 3a		 jae	 SHORT $LN361@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00252	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00255	76 04		 jbe	 SHORT $LN360@RetrieveHy
  00257	03 c2		 add	 eax, edx
  00259	eb 08		 jmp	 SHORT $LN394@RetrieveHy
$LN360@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 361  : 				int k = 0;

  0025b	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _ssvv$5[ebp]
  00261	03 c1		 add	 eax, ecx
$LN394@RetrieveHy:

; 364  : 				szPath[k] = '\0';

  00263	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00269	2b 8d b8 fb ff
	ff		 sub	 ecx, DWORD PTR _j$2$[ebp]
  0026f	51		 push	 ecx
  00270	50		 push	 eax
  00271	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szPath$6[ebp]
  00277	89 8d bc fb ff
	ff		 mov	 DWORD PTR _k$1$[ebp], ecx
  0027d	50		 push	 eax
  0027e	e8 00 00 00 00	 call	 _memcpy
  00283	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR _k$1$[ebp]
  00289	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN361@RetrieveHy:
  0028c	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  00292	0f 83 2b 02 00
	00		 jae	 $LN83@RetrieveHy
  00298	c6 84 0d f0 fb
	ff ff 00	 mov	 BYTE PTR _szPath$6[ebp+ecx], 0
$LN70@RetrieveHy:
  002a0	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  002a3	c7 85 d0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _noPathName$4[ebp+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  002ad	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  002b3	c7 85 d4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _noPathName$4[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  002bd	0f 11 85 c0 fb
	ff ff		 movups	 XMMWORD PTR _noPathName$4[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  002c4	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL384@RetrieveHy:
  002c7	8a 01		 mov	 al, BYTE PTR [ecx]
  002c9	41		 inc	 ecx
  002ca	84 c0		 test	 al, al
  002cc	75 f9		 jne	 SHORT $LL384@RetrieveHy
  002ce	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002d0	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szPath$6[ebp]
  002d6	51		 push	 ecx
  002d7	50		 push	 eax
  002d8	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$4[ebp]
  002de	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 373  : 	return szPath;

  002e3	83 8d a0 fb ff
	ff 01		 or	 DWORD PTR $T2[ebp], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002ea	83 bd d4 fb ff
	ff 0f		 cmp	 DWORD PTR _noPathName$4[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  002f1	8d 95 c0 fb ff
	ff		 lea	 edx, DWORD PTR _noPathName$4[ebp]

; 426  :         if (_Large_mode_engaged()) {

  002f7	8b 85 c0 fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$4[ebp]
  002fd	0f 47 d0	 cmova	 edx, eax
  00300	89 85 b8 fb ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 496  :        const unsigned char * end = s + str.size();

  00306	8b 85 d0 fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$4[ebp+16]

; 497  :        size_t h = 0;

  0030c	33 c9		 xor	 ecx, ecx
  0030e	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 553  : 			std::string noPathName = CFileNameHelper::NoPath(ssvv);

  00310	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 499  :        while (s < end)

  00314	3b d0		 cmp	 edx, eax
  00316	73 1e		 jae	 SHORT $LN147@RetrieveHy
  00318	8b f0		 mov	 esi, eax
  0031a	66 0f 1f 44 00
	00		 npad	 6
$LL362@RetrieveHy:

; 500  :        {
; 501  :            h *= 16777619;
; 502  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00320	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00323	42		 inc	 edx
  00324	69 c9 93 01 00
	01		 imul	 ecx, ecx, 16777619
  0032a	33 c8		 xor	 ecx, eax
  0032c	3b d6		 cmp	 edx, esi
  0032e	72 f0		 jb	 SHORT $LL362@RetrieveHy
  00330	8b b5 ac fb ff
	ff		 mov	 esi, DWORD PTR _cit$1$[ebp]
$LN147@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 554  : 			if (dwPackgeIdentifier == stringhash().GetHash(noPathName))

  00336	39 8d 94 fb ff
	ff		 cmp	 DWORD PTR _dwPackgeIdentifier$1$[ebp], ecx
  0033c	0f 84 bd 00 00
	00		 je	 $LN352@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00342	8b 85 d4 fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$4[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 560  : 		}

  00348	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0034c	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0034f	76 31		 jbe	 SHORT $LN269@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00351	8b 95 b8 fb ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00357	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0035a	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0035c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00362	72 14		 jb	 SHORT $LN280@RetrieveHy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00364	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00367	83 c1 23	 add	 ecx, 35			; 00000023H
  0036a	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0036c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0036f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00372	0f 87 50 01 00
	00		 ja	 $LN240@RetrieveHy
$LN280@RetrieveHy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00378	51		 push	 ecx
  00379	52		 push	 edx
  0037a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0037f	83 c4 08	 add	 esp, 8
$LN269@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 560  : 		}

  00382	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00389	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0038c	76 2f		 jbe	 SHORT $LN306@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0038e	8b 8d b4 fb ff
	ff		 mov	 ecx, DWORD PTR __Ptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00394	47		 inc	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00395	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00397	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  0039d	72 14		 jb	 SHORT $LN317@RetrieveHy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0039f	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  003a2	83 c7 23	 add	 edi, 35			; 00000023H
  003a5	2b c1		 sub	 eax, ecx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003a7	83 c0 fc	 add	 eax, -4			; fffffffcH
  003aa	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003ad	0f 87 15 01 00
	00		 ja	 $LN240@RetrieveHy
$LN317@RetrieveHy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003b3	57		 push	 edi
  003b4	51		 push	 ecx
  003b5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003ba	83 c4 08	 add	 esp, 8
$LN306@RetrieveHy:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  003bd	8b 36		 mov	 esi, DWORD PTR [esi]
  003bf	89 b5 ac fb ff
	ff		 mov	 DWORD PTR _cit$1$[ebp], esi

; 2459 :           return x.node_ != y.node_;

  003c5	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 550  : 		for (cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit)

  003c7	0f 85 e3 fc ff
	ff		 jne	 $LL7@RetrieveHy

; 554  : 			if (dwPackgeIdentifier == stringhash().GetHash(noPathName))

  003cd	8b b5 a8 fb ff
	ff		 mov	 esi, DWORD PTR _iReadOffset$1$[ebp]
$LN388@RetrieveHy:

; 532  : 	//cnt
; 533  : 	//for cnt
; 534  : 	//DWORD				dwPackageIdentifier;
; 535  : 	//DWORD				dwFileIdentifier;
; 536  : 	//std::vector<BYTE>	vecSDBStream;
; 537  : 	int iReadOffset = 0;
; 538  : 	int iSDBInfoCount = 0;
; 539  : 
; 540  : 	memcpy( &iSDBInfoCount, pStream+iReadOffset, sizeof(int) );
; 541  : 	iReadOffset += sizeof(int);
; 542  : 
; 543  : 	for( int i = 0; i < iSDBInfoCount; ++i )

  003d3	8b 8d a4 fb ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  003d9	8b 95 b0 fb ff
	ff		 mov	 edx, DWORD PTR _iSDBInfoCount$1$[ebp]
$LN2@RetrieveHy:
  003df	8b 85 9c fb ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  003e5	40		 inc	 eax
  003e6	89 85 9c fb ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  003ec	3b c2		 cmp	 eax, edx
  003ee	0f 8d b2 00 00
	00		 jge	 $LN359@RetrieveHy
  003f4	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR _pStream$GSCopy$1$[ebp]
  003fa	e9 71 fc ff ff	 jmp	 $LL4@RetrieveHy
$LN352@RetrieveHy:

; 555  : 			{
; 556  : 				EterPackPolicy_CSHybridCrypt* pCryptPolicy = cit->second->GetPackPolicy_HybridCrypt();

  003ff	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00402	e8 00 00 00 00	 call	 ?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ ; CEterPack::GetPackPolicy_HybridCrypt

; 557  : 				iReadOffset += pCryptPolicy->ReadSupplementatyDataBlockFromStream(pStream + iReadOffset);

  00407	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _pStream$GSCopy$1$[ebp]
  0040d	8b b5 a8 fb ff
	ff		 mov	 esi, DWORD PTR _iReadOffset$1$[ebp]
  00413	03 ce		 add	 ecx, esi
  00415	51		 push	 ecx
  00416	8b c8		 mov	 ecx, eax
  00418	e8 00 00 00 00	 call	 ?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z ; EterPackPolicy_CSHybridCrypt::ReadSupplementatyDataBlockFromStream
  0041d	03 f0		 add	 esi, eax

; 558  : 				break;

  0041f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00423	8b 85 d4 fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$4[ebp+20]
  00429	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0042c	76 2d		 jbe	 SHORT $LN195@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0042e	8b 95 b8 fb ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00434	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00437	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00439	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0043f	72 10		 jb	 SHORT $LN206@RetrieveHy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00441	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00444	83 c1 23	 add	 ecx, 35			; 00000023H
  00447	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00449	83 c0 fc	 add	 eax, -4			; fffffffcH
  0044c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0044f	77 77		 ja	 SHORT $LN240@RetrieveHy
$LN206@RetrieveHy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00451	51		 push	 ecx
  00452	52		 push	 edx
  00453	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00458	83 c4 08	 add	 esp, 8
$LN195@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 558  : 				break;

  0045b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00462	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00465	0f 86 68 ff ff
	ff		 jbe	 $LN388@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0046b	8b 8d b4 fb ff
	ff		 mov	 ecx, DWORD PTR __Ptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00471	47		 inc	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00472	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00474	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  0047a	72 10		 jb	 SHORT $LN243@RetrieveHy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0047c	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0047f	83 c7 23	 add	 edi, 35			; 00000023H
  00482	2b c1		 sub	 eax, ecx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00484	83 c0 fc	 add	 eax, -4			; fffffffcH
  00487	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0048a	77 3c		 ja	 SHORT $LN240@RetrieveHy
$LN243@RetrieveHy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0048c	57		 push	 edi
  0048d	51		 push	 ecx
  0048e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00493	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 550  : 		for (cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit)

  00496	e9 38 ff ff ff	 jmp	 $LN388@RetrieveHy
$LN387@RetrieveHy:
  0049b	8b b5 a8 fb ff
	ff		 mov	 esi, DWORD PTR _iReadOffset$1$[ebp]
  004a1	e9 39 ff ff ff	 jmp	 $LN2@RetrieveHy
$LN359@RetrieveHy:

; 562  : }

  004a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004b0	59		 pop	 ecx
  004b1	5f		 pop	 edi
  004b2	5e		 pop	 esi
  004b3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004b6	33 cd		 xor	 ecx, ebp
  004b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004bd	8b e5		 mov	 esp, ebp
  004bf	5d		 pop	 ebp
  004c0	c2 04 00	 ret	 4
$LN83@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 364  : 				szPath[k] = '\0';

  004c3	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN240@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004c8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN351@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 858  :             _Xlen_string(); // result too long

  004cd	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN390@RetrieveHy:
  004d2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z$0:
  00000	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _ssvv$5[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z$1:
  0000b	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$4[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a 94 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1132]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RetrieveHybridCryptPackSDB@CEterPackManager@@QAEXPBE@Z ENDP ; CEterPackManager::RetrieveHybridCryptPackSDB
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z
_TEXT	SEGMENT
_iPackageCnt$1$ = -1136					; size = 4
_dwPackageNameHash$1$ = -1132				; size = 4
_pStream$GSCopy$1$ = -1128				; size = 4
_i$1$ = -1124						; size = 4
$T2 = -1120						; size = 4
_iRecvedCryptKeySize$1$ = -1116				; size = 4
_this$1$ = -1112					; size = 4
_cit$1$ = -1108						; size = 4
_iMemOffset$1$ = -1104					; size = 4
__Ptr$1$ = -1100					; size = 4
__Result$1$ = -1096					; size = 4
_j$2$ = -1096						; size = 4
__Result$2$ = -1096					; size = 4
$T3 = -1092						; size = 4
_k$1$ = -1092						; size = 4
__Ptr$1$ = -1092					; size = 4
_ssvv$4 = -1088						; size = 24
_noPathName$5 = -1064					; size = 24
_szPath$6 = -1040					; size = 1024
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pStream$ = 8						; size = 4
?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z PROC ; CEterPackManager::RetrieveHybridCryptPackKeys, COMDAT
; _this$ = ecx

; 482  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 64 04 00
	00		 sub	 esp, 1124		; 00000464H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b d1		 mov	 edx, ecx
  0002f	89 95 a8 fb ff
	ff		 mov	 DWORD PTR _this$1$[ebp], edx
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]

; 483  : 	////dump file format
; 484  : 	//total packagecnt (4byte)
; 485  : 	//	for	packagecntpackage
; 486  : 	//		db name hash ( stl.h stringhash )
; 487  : 	//		extension cnt( 4byte)
; 488  : 	//		for	extension cnt
; 489  : 	//			ext hash ( stl.h stringhash )
; 490  : 	//			key-16byte
; 491  : 	//			iv-16byte
; 492  : 	int iMemOffset = 0;
; 493  : 
; 494  : 	int		iPackageCnt;
; 495  : 	DWORD	dwPackageNameHash;
; 496  : 
; 497  : 	memcpy( &iPackageCnt, pStream + iMemOffset, sizeof(int) );
; 498  : 	iMemOffset += sizeof(iPackageCnt);

  00038	b8 04 00 00 00	 mov	 eax, 4
  0003d	89 8d 98 fb ff
	ff		 mov	 DWORD PTR _pStream$GSCopy$1$[ebp], ecx
  00043	c7 85 a0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 499  : 
; 500  : 	for( int i = 0; i < iPackageCnt; ++i )

  0004d	c7 85 9c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
  00057	8b 31		 mov	 esi, DWORD PTR [ecx]
  00059	89 b5 90 fb ff
	ff		 mov	 DWORD PTR _iPackageCnt$1$[ebp], esi
  0005f	85 f6		 test	 esi, esi
  00061	0f 8e b4 04 00
	00		 jle	 $LN370@RetrieveHy
  00067	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@RetrieveHy:

; 501  : 	{
; 502  : 		int iRecvedCryptKeySize = 0;
; 503  : 		memcpy( &iRecvedCryptKeySize, pStream + iMemOffset, sizeof(iRecvedCryptKeySize) );
; 504  : 		iRecvedCryptKeySize -= sizeof(dwPackageNameHash); // Ľ­ąöżˇĽ­ ąŢŔş key streamżˇ´Â filename hash°ˇ Ć÷ÇÔµÇľî ŔÖŔ¸ąÇ·Î, hash »çŔĚÁî ¸¸Ĺ­ ąčÁÜ.

  00070	8b 34 01	 mov	 esi, DWORD PTR [ecx+eax]

; 507  : 		memcpy( &dwPackageNameHash, pStream + iMemOffset, sizeof(dwPackageNameHash) );

  00073	8b 4c 01 04	 mov	 ecx, DWORD PTR [ecx+eax+4]
  00077	83 ee 04	 sub	 esi, 4

; 508  : 		iMemOffset += sizeof(dwPackageNameHash);

  0007a	83 c0 08	 add	 eax, 8
  0007d	89 b5 a4 fb ff
	ff		 mov	 DWORD PTR _iRecvedCryptKeySize$1$[ebp], esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00083	83 ba 20 14 00
	00 00		 cmp	 DWORD PTR [edx+5152], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 507  : 		memcpy( &dwPackageNameHash, pStream + iMemOffset, sizeof(dwPackageNameHash) );

  0008a	89 8d 94 fb ff
	ff		 mov	 DWORD PTR _dwPackageNameHash$1$[ebp], ecx

; 508  : 		iMemOffset += sizeof(dwPackageNameHash);

  00090	89 85 b0 fb ff
	ff		 mov	 DWORD PTR _iMemOffset$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00096	74 17		 je	 SHORT $LN342@RetrieveHy

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00098	8b 82 1c 14 00
	00		 mov	 eax, DWORD PTR [edx+5148]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0009e	8b b2 2c 14 00
	00		 mov	 esi, DWORD PTR [edx+5164]
  000a4	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]
  000a7	8b 85 b0 fb ff
	ff		 mov	 eax, DWORD PTR _iMemOffset$1$[ebp]
  000ad	eb 02		 jmp	 SHORT $LN402@RetrieveHy
$LN342@RetrieveHy:
  000af	33 f6		 xor	 esi, esi
$LN402@RetrieveHy:

; 2459 :           return x.node_ != y.node_;

  000b1	89 b5 ac fb ff
	ff		 mov	 DWORD PTR _cit$1$[ebp], esi
  000b7	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 511  : 		for (cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit)

  000b9	0f 84 45 03 00
	00		 je	 $LN399@RetrieveHy
  000bf	90		 npad	 1
$LL7@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000c0	83 7e 1c 0f	 cmp	 DWORD PTR [esi+28], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  000c4	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000c7	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000ca	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  000cd	89 8d b8 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000d3	0f 11 85 c0 fb
	ff ff		 movups	 XMMWORD PTR _ssvv$4[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000da	c7 85 d0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _ssvv$4[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000e4	c7 85 d4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _ssvv$4[ebp+20], 0

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000ee	89 85 bc fb ff
	ff		 mov	 DWORD PTR $T3[ebp], eax

; 426  :         if (_Large_mode_engaged()) {

  000f4	76 08		 jbe	 SHORT $LN31@RetrieveHy

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000f6	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000f8	89 8d b8 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN31@RetrieveHy:

; 857  :         if (_Count > max_size()) {

  000fe	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00103	0f 87 39 04 00
	00		 ja	 $LN362@RetrieveHy

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00109	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0010c	77 2c		 ja	 SHORT $LN39@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0010e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00111	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00116	89 85 d0 fb ff
	ff		 mov	 DWORD PTR _ssvv$4[ebp+16], eax
  0011c	89 bd d4 fb ff
	ff		 mov	 DWORD PTR _ssvv$4[ebp+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00122	0f 11 85 c0 fb
	ff ff		 movups	 XMMWORD PTR _ssvv$4[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 884  :             return;

  00129	8b 95 c0 fb ff
	ff		 mov	 edx, DWORD PTR _ssvv$4[ebp]
  0012f	89 95 b4 fb ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], edx
  00135	e9 87 00 00 00	 jmp	 $LN65@RetrieveHy
$LN39@RetrieveHy:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0013a	8b f8		 mov	 edi, eax
  0013c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0013f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00145	76 12		 jbe	 SHORT $LN45@RetrieveHy

; 2944 :             return _Max;

  00147	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  0014c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00151	51		 push	 ecx
  00152	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00157	eb 28		 jmp	 SHORT $LN404@RetrieveHy
$LN45@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00159	83 ff 16	 cmp	 edi, 22			; 00000016H
  0015c	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00161	0f 42 f9	 cmovb	 edi, ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  00164	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00167	85 c9		 test	 ecx, ecx
  00169	74 21		 je	 SHORT $LN403@RetrieveHy
$LN59@RetrieveHy:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0016b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00171	72 08		 jb	 SHORT $LN60@RetrieveHy

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00173	51		 push	 ecx
  00174	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00179	eb 06		 jmp	 SHORT $LN404@RetrieveHy
$LN60@RetrieveHy:

; 136  :         return ::operator new(_Bytes);

  0017b	51		 push	 ecx
  0017c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN404@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00181	8b c8		 mov	 ecx, eax
  00183	83 c4 04	 add	 esp, 4
  00186	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
$LN403@RetrieveHy:

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0018c	89 85 d0 fb ff
	ff		 mov	 DWORD PTR _ssvv$4[ebp+16], eax

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00192	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00193	50		 push	 eax
  00194	ff b5 b8 fb ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0019a	89 8d b4 fb ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001a0	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  001a1	89 8d c0 fb ff
	ff		 mov	 DWORD PTR _ssvv$4[ebp], ecx

; 892  :         _My_data._Myres  = _New_capacity;

  001a7	89 bd d4 fb ff
	ff		 mov	 DWORD PTR _ssvv$4[ebp+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001ad	e8 00 00 00 00	 call	 _memcpy
  001b2	8b 95 b4 fb ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
  001b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001bb	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
$LN65@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 513  : 			auto ssvv = std::string(cit->first);

  001c1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 349  : 	szPath[0] = '\0';

  001c8	c6 85 f0 fb ff
	ff 00		 mov	 BYTE PTR _szPath$6[ebp], 0

; 350  : 
; 351  : 	size_t nLength = str.length();
; 352  : 
; 353  : 	if (nLength > 0)

  001cf	85 c0		 test	 eax, eax
  001d1	0f 84 d9 00 00
	00		 je	 $LN71@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001d7	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  001da	8d 85 c0 fb ff
	ff		 lea	 eax, DWORD PTR _ssvv$4[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 355  : 		strcpy(szPath, str.c_str());

  001e0	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  001e6	0f 47 c2	 cmova	 eax, edx
  001e9	89 85 b8 fb ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 428  :         }
; 429  : 
; 430  :         return _Result;

  001ef	8b c1		 mov	 eax, ecx
  001f1	8b 95 b8 fb ff
	ff		 mov	 edx, DWORD PTR __Result$2$[ebp]
  001f7	2b d0		 sub	 edx, eax
  001f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL83@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 355  : 		strcpy(szPath, str.c_str());

  00200	8a 04 11	 mov	 al, BYTE PTR [ecx+edx]
  00203	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00206	88 41 ff	 mov	 BYTE PTR [ecx-1], al
  00209	84 c0		 test	 al, al
  0020b	75 f3		 jne	 SHORT $LL83@RetrieveHy

; 356  : 
; 357  : 		for (size_t i = nLength - 1; i > 0; i--)

  0020d	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00213	8b 95 b4 fb ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
  00219	83 e8 01	 sub	 eax, 1
  0021c	0f 84 8e 00 00
	00		 je	 $LN71@RetrieveHy
$LL72@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00222	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  00225	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _ssvv$4[ebp]

; 417  :         if (_Large_mode_engaged()) {

  0022b	0f 47 ca	 cmova	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 359  : 			if (str[i] == '/' || str[i] == '\\')

  0022e	80 3c 01 2f	 cmp	 BYTE PTR [ecx+eax], 47	; 0000002fH
  00232	74 1d		 je	 SHORT $LN360@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00234	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  00237	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _ssvv$4[ebp]

; 417  :         if (_Large_mode_engaged()) {

  0023d	0f 47 ca	 cmova	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 359  : 			if (str[i] == '/' || str[i] == '\\')

  00240	80 3c 01 5c	 cmp	 BYTE PTR [ecx+eax], 92	; 0000005cH
  00244	74 0b		 je	 SHORT $LN360@RetrieveHy

; 365  : 				break;
; 366  : 			}
; 367  : 
; 368  : 			if (0 == i)

  00246	85 c0		 test	 eax, eax
  00248	74 66		 je	 SHORT $LN71@RetrieveHy

; 356  : 
; 357  : 		for (size_t i = nLength - 1; i > 0; i--)

  0024a	83 e8 01	 sub	 eax, 1
  0024d	75 d3		 jne	 SHORT $LL72@RetrieveHy
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 515  : 			if (dwPackageNameHash == stringhash().GetHash(noPathName))

  0024f	eb 5f		 jmp	 SHORT $LN71@RetrieveHy
$LN360@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 362  : 				for (size_t j = i + 1; j < nLength; j++, k++)

  00251	40		 inc	 eax
  00252	33 c9		 xor	 ecx, ecx
  00254	89 85 b8 fb ff
	ff		 mov	 DWORD PTR _j$2$[ebp], eax
  0025a	3b 85 bc fb ff
	ff		 cmp	 eax, DWORD PTR $T3[ebp]
  00260	73 3a		 jae	 SHORT $LN372@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00262	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00265	76 04		 jbe	 SHORT $LN371@RetrieveHy
  00267	03 c2		 add	 eax, edx
  00269	eb 08		 jmp	 SHORT $LN405@RetrieveHy
$LN371@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 361  : 				int k = 0;

  0026b	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _ssvv$4[ebp]
  00271	03 c1		 add	 eax, ecx
$LN405@RetrieveHy:

; 364  : 				szPath[k] = '\0';

  00273	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00279	2b 8d b8 fb ff
	ff		 sub	 ecx, DWORD PTR _j$2$[ebp]
  0027f	51		 push	 ecx
  00280	50		 push	 eax
  00281	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szPath$6[ebp]
  00287	89 8d bc fb ff
	ff		 mov	 DWORD PTR _k$1$[ebp], ecx
  0028d	50		 push	 eax
  0028e	e8 00 00 00 00	 call	 _memcpy
  00293	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR _k$1$[ebp]
  00299	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN372@RetrieveHy:
  0029c	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  002a2	0f 83 90 02 00
	00		 jae	 $LN84@RetrieveHy
  002a8	c6 84 0d f0 fb
	ff ff 00	 mov	 BYTE PTR _szPath$6[ebp+ecx], 0
$LN71@RetrieveHy:
  002b0	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  002b3	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _noPathName$5[ebp+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  002bd	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  002c3	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _noPathName$5[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  002cd	0f 11 85 d8 fb
	ff ff		 movups	 XMMWORD PTR _noPathName$5[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  002d4	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL395@RetrieveHy:
  002d7	8a 01		 mov	 al, BYTE PTR [ecx]
  002d9	41		 inc	 ecx
  002da	84 c0		 test	 al, al
  002dc	75 f9		 jne	 SHORT $LL395@RetrieveHy
  002de	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002e0	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szPath$6[ebp]
  002e6	51		 push	 ecx
  002e7	50		 push	 eax
  002e8	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$5[ebp]
  002ee	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 373  : 	return szPath;

  002f3	83 8d a0 fb ff
	ff 01		 or	 DWORD PTR $T2[ebp], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002fa	83 bd ec fb ff
	ff 0f		 cmp	 DWORD PTR _noPathName$5[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00301	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$5[ebp]

; 426  :         if (_Large_mode_engaged()) {

  00307	8b 85 d8 fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$5[ebp]
  0030d	0f 47 c8	 cmova	 ecx, eax
  00310	89 85 bc fb ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 496  :        const unsigned char * end = s + str.size();

  00316	8b 85 e8 fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$5[ebp+16]

; 497  :        size_t h = 0;

  0031c	33 d2		 xor	 edx, edx
  0031e	03 c1		 add	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 514  : 			std::string noPathName = CFileNameHelper::NoPath(ssvv);

  00320	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 499  :        while (s < end)

  00324	3b c8		 cmp	 ecx, eax
  00326	73 1e		 jae	 SHORT $LN148@RetrieveHy
  00328	8b f0		 mov	 esi, eax
  0032a	66 0f 1f 44 00
	00		 npad	 6
$LL373@RetrieveHy:

; 500  :        {
; 501  :            h *= 16777619;
; 502  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00330	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00333	41		 inc	 ecx
  00334	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  0033a	33 d0		 xor	 edx, eax
  0033c	3b ce		 cmp	 ecx, esi
  0033e	72 f0		 jb	 SHORT $LL373@RetrieveHy
  00340	8b b5 ac fb ff
	ff		 mov	 esi, DWORD PTR _cit$1$[ebp]
$LN148@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 515  : 			if (dwPackageNameHash == stringhash().GetHash(noPathName))

  00346	39 95 94 fb ff
	ff		 cmp	 DWORD PTR _dwPackageNameHash$1$[ebp], edx
  0034c	0f 84 de 00 00
	00		 je	 $LN363@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00352	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$5[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 525  : 		}

  00358	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0035c	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0035f	76 31		 jbe	 SHORT $LN270@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00361	8b 95 bc fb ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00367	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0036a	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0036c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00372	72 14		 jb	 SHORT $LN281@RetrieveHy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00374	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00377	83 c1 23	 add	 ecx, 35			; 00000023H
  0037a	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0037c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0037f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00382	0f 87 b5 01 00
	00		 ja	 $LN241@RetrieveHy
$LN281@RetrieveHy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00388	51		 push	 ecx
  00389	52		 push	 edx
  0038a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0038f	83 c4 08	 add	 esp, 8
$LN270@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00392	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _noPathName$5[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0039c	c7 85 ec fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR _noPathName$5[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003a6	c6 85 d8 fb ff
	ff 00		 mov	 BYTE PTR _noPathName$5[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 525  : 		}

  003ad	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  003b4	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  003b7	76 2f		 jbe	 SHORT $LN307@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003b9	8b 8d b4 fb ff
	ff		 mov	 ecx, DWORD PTR __Ptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  003bf	47		 inc	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003c0	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  003c2	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  003c8	72 14		 jb	 SHORT $LN318@RetrieveHy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003ca	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  003cd	83 c7 23	 add	 edi, 35			; 00000023H
  003d0	2b c1		 sub	 eax, ecx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003d2	83 c0 fc	 add	 eax, -4			; fffffffcH
  003d5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003d8	0f 87 5f 01 00
	00		 ja	 $LN241@RetrieveHy
$LN318@RetrieveHy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003de	57		 push	 edi
  003df	51		 push	 ecx
  003e0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003e5	83 c4 08	 add	 esp, 8
$LN307@RetrieveHy:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  003e8	8b 36		 mov	 esi, DWORD PTR [esi]
  003ea	89 b5 ac fb ff
	ff		 mov	 DWORD PTR _cit$1$[ebp], esi

; 2459 :           return x.node_ != y.node_;

  003f0	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 511  : 		for (cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit)

  003f2	0f 85 c8 fc ff
	ff		 jne	 $LL7@RetrieveHy

; 515  : 			if (dwPackageNameHash == stringhash().GetHash(noPathName))

  003f8	8b 85 b0 fb ff
	ff		 mov	 eax, DWORD PTR _iMemOffset$1$[ebp]
  003fe	8b 95 a8 fb ff
	ff		 mov	 edx, DWORD PTR _this$1$[ebp]
$LN399@RetrieveHy:

; 526  : 		iMemOffset += iRecvedCryptKeySize;

  00404	8b b5 a4 fb ff
	ff		 mov	 esi, DWORD PTR _iRecvedCryptKeySize$1$[ebp]
$LN233@RetrieveHy:

; 499  : 
; 500  : 	for( int i = 0; i < iPackageCnt; ++i )

  0040a	8b 8d 9c fb ff
	ff		 mov	 ecx, DWORD PTR _i$1$[ebp]

; 526  : 		iMemOffset += iRecvedCryptKeySize;

  00410	03 c6		 add	 eax, esi
  00412	41		 inc	 ecx
  00413	89 8d 9c fb ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ecx
  00419	3b 8d 90 fb ff
	ff		 cmp	 ecx, DWORD PTR _iPackageCnt$1$[ebp]
  0041f	0f 8d f6 00 00
	00		 jge	 $LN370@RetrieveHy

; 499  : 
; 500  : 	for( int i = 0; i < iPackageCnt; ++i )

  00425	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR _pStream$GSCopy$1$[ebp]
  0042b	e9 40 fc ff ff	 jmp	 $LL4@RetrieveHy
$LN363@RetrieveHy:

; 516  : 			{
; 517  : 				EterPackPolicy_CSHybridCrypt* pCryptPolicy = cit->second->GetPackPolicy_HybridCrypt();

  00430	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00433	e8 00 00 00 00	 call	 ?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ ; CEterPack::GetPackPolicy_HybridCrypt

; 518  : 				int iHavedCryptKeySize = pCryptPolicy->ReadCryptKeyInfoFromStream(pStream + iMemOffset);

  00438	8b 8d b0 fb ff
	ff		 mov	 ecx, DWORD PTR _iMemOffset$1$[ebp]
  0043e	03 8d 98 fb ff
	ff		 add	 ecx, DWORD PTR _pStream$GSCopy$1$[ebp]
  00444	51		 push	 ecx
  00445	8b c8		 mov	 ecx, eax
  00447	e8 00 00 00 00	 call	 ?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z ; EterPackPolicy_CSHybridCrypt::ReadCryptKeyInfoFromStream

; 519  : 				if (iRecvedCryptKeySize != iHavedCryptKeySize)

  0044c	8b b5 a4 fb ff
	ff		 mov	 esi, DWORD PTR _iRecvedCryptKeySize$1$[ebp]
  00452	3b f0		 cmp	 esi, eax
  00454	74 24		 je	 SHORT $LN9@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00456	83 bd ec fb ff
	ff 0f		 cmp	 DWORD PTR _noPathName$5[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  0045d	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$5[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 521  : 					TraceError("CEterPackManager::RetrieveHybridCryptPackKeys	cryptokey length of file(%s) is not matched. received(%d) != haved(%d)", noPathName.c_str(), iRecvedCryptKeySize, iHavedCryptKeySize);

  00463	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00464	0f 47 8d d8 fb
	ff ff		 cmova	 ecx, DWORD PTR _noPathName$5[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 521  : 					TraceError("CEterPackManager::RetrieveHybridCryptPackKeys	cryptokey length of file(%s) is not matched. received(%d) != haved(%d)", noPathName.c_str(), iRecvedCryptKeySize, iHavedCryptKeySize);

  0046b	56		 push	 esi
  0046c	51		 push	 ecx
  0046d	68 00 00 00 00	 push	 OFFSET ??_C@_0HF@OJFMMEDP@CEterPackManager?3?3RetrieveHybri@
  00472	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00477	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0047a	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR _noPathName$5[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 523  : 				break;

  00480	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00484	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00487	76 2f		 jbe	 SHORT $LN196@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00489	8b 95 d8 fb ff
	ff		 mov	 edx, DWORD PTR _noPathName$5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0048f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00490	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00492	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00498	72 14		 jb	 SHORT $LN207@RetrieveHy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0049a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0049d	83 c1 23	 add	 ecx, 35			; 00000023H
  004a0	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004a2	83 c0 fc	 add	 eax, -4			; fffffffcH
  004a5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004a8	0f 87 8f 00 00
	00		 ja	 $LN241@RetrieveHy
$LN207@RetrieveHy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  004ae	51		 push	 ecx
  004af	52		 push	 edx
  004b0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004b5	83 c4 08	 add	 esp, 8
$LN196@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  004b8	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _noPathName$5[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  004c2	c7 85 ec fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR _noPathName$5[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  004cc	c6 85 d8 fb ff
	ff 00		 mov	 BYTE PTR _noPathName$5[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 523  : 				break;

  004d3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004da	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  004dd	76 2b		 jbe	 SHORT $LN398@RetrieveHy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004df	8b 8d b4 fb ff
	ff		 mov	 ecx, DWORD PTR __Ptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  004e5	47		 inc	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004e6	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  004e8	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  004ee	72 10		 jb	 SHORT $LN244@RetrieveHy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004f0	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  004f3	83 c7 23	 add	 edi, 35			; 00000023H
  004f6	2b c1		 sub	 eax, ecx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  004fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004fe	77 3d		 ja	 SHORT $LN241@RetrieveHy
$LN244@RetrieveHy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00500	57		 push	 edi
  00501	51		 push	 ecx
  00502	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00507	83 c4 08	 add	 esp, 8
$LN398@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 526  : 		iMemOffset += iRecvedCryptKeySize;

  0050a	8b 85 b0 fb ff
	ff		 mov	 eax, DWORD PTR _iMemOffset$1$[ebp]
  00510	8b 95 a8 fb ff
	ff		 mov	 edx, DWORD PTR _this$1$[ebp]
  00516	e9 ef fe ff ff	 jmp	 $LN233@RetrieveHy
$LN370@RetrieveHy:

; 528  : }

  0051b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0051e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00525	59		 pop	 ecx
  00526	5f		 pop	 edi
  00527	5e		 pop	 esi
  00528	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0052b	33 cd		 xor	 ecx, ebp
  0052d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00532	8b e5		 mov	 esp, ebp
  00534	5d		 pop	 ebp
  00535	c2 04 00	 ret	 4
$LN84@RetrieveHy:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 364  : 				szPath[k] = '\0';

  00538	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN241@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0053d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN362@RetrieveHy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 858  :             _Xlen_string(); // result too long

  00542	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN401@RetrieveHy:
  00547	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z$0:
  00000	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _ssvv$4[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z$1:
  0000b	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$5[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a 90 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1136]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RetrieveHybridCryptPackKeys@CEterPackManager@@QAEXPBE@Z ENDP ; CEterPackManager::RetrieveHybridCryptPackKeys
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z
_TEXT	SEGMENT
_iSDBSize$2 = -1456					; size = 4
_dwPackNamehash$3 = -1452				; size = 4
_pPolicy$1$ = -1448					; size = 4
_iSDBDataOffset$ = -1444				; size = 4
_iSDBPackageCnt$ = -1440				; size = 4
_iKeyPackageCount$ = -1436				; size = 4
$T4 = -1432						; size = 4
__Ptr$1$ = -1432					; size = 4
_this$1$ = -1428					; size = 4
__Ptr$1$ = -1428					; size = 4
_pPolicy$1$ = -1424					; size = 4
_iSDBSizeWriteOffset$1$ = -1424				; size = 4
__Result$1$ = -1424					; size = 4
_j$2$ = -1424						; size = 4
_dwPackNamehash$5 = -1420				; size = 4
$T6 = -1420						; size = 4
_ssvv1$1$ = -1420					; size = 4
_keyFile$ = -1416					; size = 280
_ssvv$7 = -1136						; size = 24
_noPathName$8 = -1112					; size = 24
_noPathName$9 = -1088					; size = 24
_ssvv1$10 = -1064					; size = 24
_szPath$11 = -1040					; size = 1024
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pFileName$ = 8						; size = 4
?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z PROC ; CEterPackManager::WriteHybridCryptPackInfo, COMDAT
; _this$ = ecx

; 566  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a4 05 00
	00		 sub	 esp, 1444		; 000005a4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d 6c fa ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx
  00033	8b 75 08	 mov	 esi, DWORD PTR _pFileName$[ebp]

; 567  : 	//NOTE : this file format contains a little bit of redundant data.
; 568  : 	//however it`s better for seperating cryptkey & supplementary data block.
; 569  : 
; 570  : 	//dump file format
; 571  : 
; 572  : 	//SDB data offset(4)
; 573  : 
; 574  : 	// about cryptkey
; 575  : 	//total packagecnt (4byte)
; 576  : 	//	for	packagecnt
; 577  : 	//		db name hash 4byte( stl.h stringhash )
; 578  : 	//		extension cnt( 4byte)
; 579  : 	//		for	extension cnt
; 580  : 	//			ext hash ( stl.h stringhash )
; 581  : 	//			key-16byte
; 582  : 	//			iv-16byte
; 583  : 
; 584  : 	//about SDB data
; 585  : 	//total packagecnt (4byte)
; 586  : 	//	for	packagecnt
; 587  : 	//		db name hash 4byte( stl.h stringhash ) +child node size(4byte)
; 588  : 	//		sdb file cnt( 4byte )
; 589  : 	//		for	sdb file cnt
; 590  : 	//			filename hash ( stl.h stringhash )
; 591  : 	//			related map name size(4), relate map name
; 592  : 	//			sdb block size( 1byte )
; 593  : 	//			sdb blocks
; 594  : 
; 595  : 	CFileBase keyFile;

  00036	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CFileBase@@QAE@XZ	; CFileBase::CFileBase

; 596  : 
; 597  : 	if( !keyFile.Create( pFileName, CFileBase::FILEMODE_WRITE) )

  00041	6a 02		 push	 2
  00043	56		 push	 esi
  00044	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00051	e8 00 00 00 00	 call	 ?Create@CFileBase@@QAEHPBDW4EFileMode@1@@Z ; CFileBase::Create
  00056	85 c0		 test	 eax, eax
  00058	0f 84 7b 06 00
	00		 je	 $LN19@WriteHybri

; 598  : 	{
; 599  : 		//TODO : write log
; 600  : 		return;
; 601  : 	}
; 602  : 
; 603  : 	int iKeyPackageCount = 0;
; 604  : 
; 605  : 	//write later ( SDB Offset & PackageCnt for Key )
; 606  : 	keyFile.SeekCur(2*sizeof(int));

  0005e	6a 08		 push	 8
  00060	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  00066	c7 85 64 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _iKeyPackageCount$[ebp], 0
  00070	e8 00 00 00 00	 call	 ?SeekCur@CFileBase@@QAEXK@Z ; CFileBase::SeekCur
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00075	8b 85 6c fa ff
	ff		 mov	 eax, DWORD PTR _this$1$[ebp]
  0007b	83 b8 20 14 00
	00 00		 cmp	 DWORD PTR [eax+5152], 0
  00082	8d 88 2c 14 00
	00		 lea	 ecx, DWORD PTR [eax+5164]
  00088	8d b8 1c 14 00
	00		 lea	 edi, DWORD PTR [eax+5148]
  0008e	89 8d 74 fa ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00094	74 09		 je	 SHORT $LN398@WriteHybri

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00096	8b 07		 mov	 eax, DWORD PTR [edi]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00098	8b 31		 mov	 esi, DWORD PTR [ecx]
  0009a	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]
  0009d	eb 08		 jmp	 SHORT $LN399@WriteHybri
$LN398@WriteHybri:
  0009f	33 f6		 xor	 esi, esi
  000a1	89 8d 74 fa ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
$LN399@WriteHybri:

; 2459 :           return x.node_ != y.node_;

  000a7	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 609  : 	for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  000a9	0f 84 a0 01 00
	00		 je	 $LN458@WriteHybri
  000af	90		 npad	 1
$LL4@WriteHybri:

; 610  : 	{
; 611  : 		EterPackPolicy_CSHybridCrypt* pPolicy = cit->second->GetPackPolicy_HybridCrypt();

  000b0	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  000b3	e8 00 00 00 00	 call	 ?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ ; CEterPack::GetPackPolicy_HybridCrypt
  000b8	89 85 70 fa ff
	ff		 mov	 DWORD PTR _pPolicy$1$[ebp], eax

; 612  : 		if( !pPolicy || !pPolicy->IsContainingCryptKey() )

  000be	85 c0		 test	 eax, eax
  000c0	0f 84 6b 01 00
	00		 je	 $LN2@WriteHybri
  000c6	8b c8		 mov	 ecx, eax
  000c8	e8 00 00 00 00	 call	 ?IsContainingCryptKey@EterPackPolicy_CSHybridCrypt@@QBE_NXZ ; EterPackPolicy_CSHybridCrypt::IsContainingCryptKey
  000cd	84 c0		 test	 al, al
  000cf	0f 84 5c 01 00
	00		 je	 $LN2@WriteHybri

; 613  : 			continue;
; 614  : 
; 615  : 		iKeyPackageCount++;

  000d5	ff 85 64 fa ff
	ff		 inc	 DWORD PTR _iKeyPackageCount$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  000db	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 617  : 		auto ssvv = std::string(cit->first);

  000de	50		 push	 eax
  000df	8d 8d 90 fb ff
	ff		 lea	 ecx, DWORD PTR _ssvv$7[ebp]
  000e5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 618  : 		std::string noPathName = CFileNameHelper::NoPath(ssvv);

  000ea	8d 85 90 fb ff
	ff		 lea	 eax, DWORD PTR _ssvv$7[ebp]
  000f0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f4	50		 push	 eax
  000f5	8d 85 c0 fb ff
	ff		 lea	 eax, DWORD PTR _noPathName$9[ebp]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?NoPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoPath
  00101	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00104	83 bd d4 fb ff
	ff 0f		 cmp	 DWORD PTR _noPathName$9[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  0010b	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$9[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 496  :        const unsigned char * end = s + str.size();

  00111	8b bd d0 fb ff
	ff		 mov	 edi, DWORD PTR _noPathName$9[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00117	0f 47 8d c0 fb
	ff ff		 cmova	 ecx, DWORD PTR _noPathName$9[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 497  :        size_t h = 0;

  0011e	33 d2		 xor	 edx, edx
  00120	03 f9		 add	 edi, ecx
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 618  : 		std::string noPathName = CFileNameHelper::NoPath(ssvv);

  00122	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 499  :        while (s < end)

  00126	3b cf		 cmp	 ecx, edi
  00128	73 16		 jae	 SHORT $LN294@WriteHybri
  0012a	66 0f 1f 44 00
	00		 npad	 6
$LL430@WriteHybri:

; 500  :        {
; 501  :            h *= 16777619;
; 502  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00130	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00133	41		 inc	 ecx
  00134	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  0013a	33 d0		 xor	 edx, eax
  0013c	3b cf		 cmp	 ecx, edi
  0013e	72 f0		 jb	 SHORT $LL430@WriteHybri
$LN294@WriteHybri:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 620  : 		DWORD dwPackNamehash = stringhash().GetHash(noPathName);

  00140	89 95 74 fa ff
	ff		 mov	 DWORD PTR _dwPackNamehash$5[ebp], edx

; 622  : 		CMakePackLog::GetSingleton().Writef("CEterPackManager::WriteHybridCryptPackInfo PackName : %s, Hash : %x", noPathName.c_str(), dwPackNamehash);

  00146	e8 00 00 00 00	 call	 ?GetSingleton@CMakePackLog@@SAAAV1@XZ ; CMakePackLog::GetSingleton
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0014b	83 bd d4 fb ff
	ff 0f		 cmp	 DWORD PTR _noPathName$9[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00152	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$9[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 622  : 		CMakePackLog::GetSingleton().Writef("CEterPackManager::WriteHybridCryptPackInfo PackName : %s, Hash : %x", noPathName.c_str(), dwPackNamehash);

  00158	ff b5 74 fa ff
	ff		 push	 DWORD PTR _dwPackNamehash$5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0015e	0f 47 8d c0 fb
	ff ff		 cmova	 ecx, DWORD PTR _noPathName$9[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 622  : 		CMakePackLog::GetSingleton().Writef("CEterPackManager::WriteHybridCryptPackInfo PackName : %s, Hash : %x", noPathName.c_str(), dwPackNamehash);

  00165	51		 push	 ecx
  00166	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@JEJDAIPD@CEterPackManager?3?3WriteHybridCr@
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 ?Writef@CMakePackLog@@QAAXPBDZZ ; CMakePackLog::Writef
  00171	83 c4 10	 add	 esp, 16			; 00000010H

; 623  : 		keyFile.Write( &dwPackNamehash, sizeof(DWORD) );

  00174	8d 85 74 fa ff
	ff		 lea	 eax, DWORD PTR _dwPackNamehash$5[ebp]
  0017a	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  00180	6a 04		 push	 4
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 624  : 
; 625  : 		pPolicy->WriteCryptKeyToFile( keyFile );

  00188	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _pPolicy$1$[ebp]
  0018e	8d 85 78 fa ff
	ff		 lea	 eax, DWORD PTR _keyFile$[ebp]
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 ?WriteCryptKeyToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z ; EterPackPolicy_CSHybridCrypt::WriteCryptKeyToFile
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0019a	8b 8d d4 fb ff
	ff		 mov	 ecx, DWORD PTR _noPathName$9[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 626  : 	}

  001a0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001a4	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001a7	76 2f		 jbe	 SHORT $LN336@WriteHybri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a9	8b 95 c0 fb ff
	ff		 mov	 edx, DWORD PTR _noPathName$9[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001af	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b0	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001b8	72 14		 jb	 SHORT $LN347@WriteHybri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001bd	83 c1 23	 add	 ecx, 35			; 00000023H
  001c0	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  001c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001c8	0f 87 38 05 00
	00		 ja	 $LN381@WriteHybri
$LN347@WriteHybri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ce	51		 push	 ecx
  001cf	52		 push	 edx
  001d0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d5	83 c4 08	 add	 esp, 8
$LN336@WriteHybri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001d8	8b 8d a4 fb ff
	ff		 mov	 ecx, DWORD PTR _ssvv$7[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  001de	c7 85 d0 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _noPathName$9[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  001e8	c7 85 d4 fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR _noPathName$9[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001f2	c6 85 c0 fb ff
	ff 00		 mov	 BYTE PTR _noPathName$9[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 626  : 	}

  001f9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001fd	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00200	76 2f		 jbe	 SHORT $LN2@WriteHybri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00202	8b 95 90 fb ff
	ff		 mov	 edx, DWORD PTR _ssvv$7[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00208	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00209	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0020b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00211	72 14		 jb	 SHORT $LN384@WriteHybri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00213	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00216	83 c1 23	 add	 ecx, 35			; 00000023H
  00219	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0021b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0021e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00221	0f 87 df 04 00
	00		 ja	 $LN381@WriteHybri
$LN384@WriteHybri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00227	51		 push	 ecx
  00228	52		 push	 edx
  00229	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0022e	83 c4 08	 add	 esp, 8
$LN2@WriteHybri:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  00231	8b 36		 mov	 esi, DWORD PTR [esi]

; 2459 :           return x.node_ != y.node_;

  00233	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 609  : 	for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  00235	0f 85 75 fe ff
	ff		 jne	 $LL4@WriteHybri
  0023b	8b 85 6c fa ff
	ff		 mov	 eax, DWORD PTR _this$1$[ebp]
  00241	8d b8 1c 14 00
	00		 lea	 edi, DWORD PTR [eax+5148]
  00247	8d b0 2c 14 00
	00		 lea	 esi, DWORD PTR [eax+5164]
  0024d	eb 06		 jmp	 SHORT $LN444@WriteHybri
$LN458@WriteHybri:
  0024f	8b b5 74 fa ff
	ff		 mov	 esi, DWORD PTR $T6[ebp]
$LN444@WriteHybri:

; 627  : 
; 628  : 	//Write SDB Data
; 629  : 	int iSDBDataOffset = keyFile.GetPosition();

  00255	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  0025b	e8 00 00 00 00	 call	 ?GetPosition@CFileBase@@QAEKXZ ; CFileBase::GetPosition

; 630  : 	int iSDBPackageCnt = 0;
; 631  : 
; 632  : 	//Write SDB PackageCnt Later
; 633  : 
; 634  : 	keyFile.SeekCur(sizeof(int));

  00260	6a 04		 push	 4
  00262	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  00268	89 85 5c fa ff
	ff		 mov	 DWORD PTR _iSDBDataOffset$[ebp], eax
  0026e	c7 85 60 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _iSDBPackageCnt$[ebp], 0
  00278	e8 00 00 00 00	 call	 ?SeekCur@CFileBase@@QAEXK@Z ; CFileBase::SeekCur
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0027d	8b 8d 6c fa ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  00283	83 b9 20 14 00
	00 00		 cmp	 DWORD PTR [ecx+5152], 0
  0028a	74 09		 je	 SHORT $LN278@WriteHybri

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0028c	8b 07		 mov	 eax, DWORD PTR [edi]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0028e	8b 36		 mov	 esi, DWORD PTR [esi]
  00290	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]
  00293	eb 02		 jmp	 SHORT $LN279@WriteHybri
$LN278@WriteHybri:
  00295	33 f6		 xor	 esi, esi
$LN279@WriteHybri:

; 2459 :           return x.node_ != y.node_;

  00297	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 635  : 	for( cit = m_PackMap.begin(); cit != m_PackMap.end(); ++cit )

  00299	0f 84 d5 03 00
	00		 je	 $LN427@WriteHybri
  0029f	90		 npad	 1
$LL7@WriteHybri:

; 637  : 		EterPackPolicy_CSHybridCrypt* pPolicy = cit->second->GetPackPolicy_HybridCrypt();

  002a0	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  002a3	e8 00 00 00 00	 call	 ?GetPackPolicy_HybridCrypt@CEterPack@@QBEPAVEterPackPolicy_CSHybridCrypt@@XZ ; CEterPack::GetPackPolicy_HybridCrypt
  002a8	89 85 58 fa ff
	ff		 mov	 DWORD PTR _pPolicy$1$[ebp], eax

; 638  : 		if( !pPolicy || !pPolicy->IsContainingSDBFile() )

  002ae	85 c0		 test	 eax, eax
  002b0	0f 84 b4 03 00
	00		 je	 $LN5@WriteHybri
  002b6	8b c8		 mov	 ecx, eax
  002b8	e8 00 00 00 00	 call	 ?IsContainingSDBFile@EterPackPolicy_CSHybridCrypt@@QBE_NXZ ; EterPackPolicy_CSHybridCrypt::IsContainingSDBFile
  002bd	84 c0		 test	 al, al
  002bf	0f 84 a5 03 00
	00		 je	 $LN5@WriteHybri

; 639  : 			continue;
; 640  : 
; 641  : 		iSDBPackageCnt++;

  002c5	ff 85 60 fa ff
	ff		 inc	 DWORD PTR _iSDBPackageCnt$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  002cb	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002ce	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH
  002d2	0f 57 c0	 xorps	 xmm0, xmm0

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  002d5	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  002d8	89 8d 70 fa ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  002de	0f 11 85 d8 fb
	ff ff		 movups	 XMMWORD PTR _ssvv1$10[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  002e5	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _ssvv1$10[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  002ef	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _ssvv1$10[ebp+20], 0

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  002f9	89 85 68 fa ff
	ff		 mov	 DWORD PTR $T4[ebp], eax

; 426  :         if (_Large_mode_engaged()) {

  002ff	76 08		 jbe	 SHORT $LN54@WriteHybri

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00301	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00303	89 8d 70 fa ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN54@WriteHybri:

; 857  :         if (_Count > max_size()) {

  00309	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0030e	0f 87 ed 03 00
	00		 ja	 $LN419@WriteHybri

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00314	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00317	77 32		 ja	 SHORT $LN62@WriteHybri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00319	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0031c	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00321	89 85 e8 fb ff
	ff		 mov	 DWORD PTR _ssvv1$10[ebp+16], eax
  00327	89 bd 74 fa ff
	ff		 mov	 DWORD PTR _ssvv1$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0032d	0f 11 85 d8 fb
	ff ff		 movups	 XMMWORD PTR _ssvv1$10[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 884  :             return;

  00334	8b 95 d8 fb ff
	ff		 mov	 edx, DWORD PTR _ssvv1$10[ebp]
  0033a	89 bd ec fb ff
	ff		 mov	 DWORD PTR _ssvv1$10[ebp+20], edi
  00340	89 95 6c fa ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], edx
  00346	e9 b1 00 00 00	 jmp	 $LN88@WriteHybri
$LN62@WriteHybri:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0034b	8b f8		 mov	 edi, eax
  0034d	83 cf 0f	 or	 edi, 15			; 0000000fH
  00350	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00356	76 20		 jbe	 SHORT $LN68@WriteHybri

; 2944 :             return _Max;

  00358	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  0035d	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00362	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2944 :             return _Max;

  00363	89 bd 74 fa ff
	ff		 mov	 DWORD PTR _ssvv1$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00369	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0036e	8b c8		 mov	 ecx, eax
  00370	89 8d 6c fa ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
  00376	eb 4c		 jmp	 SHORT $LN461@WriteHybri
$LN68@WriteHybri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00378	83 ff 16	 cmp	 edi, 22			; 00000016H
  0037b	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00380	0f 42 f9	 cmovb	 edi, ecx
  00383	89 bd 74 fa ff
	ff		 mov	 DWORD PTR _ssvv1$1$[ebp], edi

; 801  :         ++_Capacity; // Take null terminator into consideration

  00389	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0038c	85 c9		 test	 ecx, ecx
  0038e	75 0e		 jne	 SHORT $LN82@WriteHybri

; 228  :         return nullptr;

  00390	89 8d 6c fa ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
  00396	89 bd 74 fa ff
	ff		 mov	 DWORD PTR _ssvv1$1$[ebp], edi
  0039c	eb 2f		 jmp	 SHORT $LN81@WriteHybri
$LN82@WriteHybri:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0039e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003a4	72 10		 jb	 SHORT $LN83@WriteHybri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  003a6	51		 push	 ecx
  003a7	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  003ac	8b c8		 mov	 ecx, eax
  003ae	89 8d 6c fa ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
  003b4	eb 0e		 jmp	 SHORT $LN461@WriteHybri
$LN83@WriteHybri:

; 136  :         return ::operator new(_Bytes);

  003b6	51		 push	 ecx
  003b7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  003bc	8b c8		 mov	 ecx, eax
  003be	89 85 6c fa ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
$LN461@WriteHybri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  003c4	8b 85 68 fa ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  003ca	83 c4 04	 add	 esp, 4
$LN81@WriteHybri:

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  003cd	89 85 e8 fb ff
	ff		 mov	 DWORD PTR _ssvv1$10[ebp+16], eax

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  003d3	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003d4	50		 push	 eax
  003d5	ff b5 70 fa ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  003db	89 8d d8 fb ff
	ff		 mov	 DWORD PTR _ssvv1$10[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003e1	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 892  :         _My_data._Myres  = _New_capacity;

  003e2	89 bd ec fb ff
	ff		 mov	 DWORD PTR _ssvv1$10[ebp+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003e8	e8 00 00 00 00	 call	 _memcpy
  003ed	8b 95 6c fa ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
  003f3	83 c4 0c	 add	 esp, 12			; 0000000cH
  003f6	8b 85 68 fa ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
$LN88@WriteHybri:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 643  : 		auto ssvv1 = std::string(cit->first);

  003fc	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 349  : 	szPath[0] = '\0';

  00400	c6 85 f0 fb ff
	ff 00		 mov	 BYTE PTR _szPath$11[ebp], 0

; 350  : 
; 351  : 	size_t nLength = str.length();
; 352  : 
; 353  : 	if (nLength > 0)

  00407	85 c0		 test	 eax, eax
  00409	0f 84 c1 00 00
	00		 je	 $LN94@WriteHybri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0040f	83 ff 0f	 cmp	 edi, 15			; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 355  : 		strcpy(szPath, str.c_str());

  00412	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$11[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00418	8d bd d8 fb ff
	ff		 lea	 edi, DWORD PTR _ssvv1$10[ebp]

; 428  :         }
; 429  : 
; 430  :         return _Result;

  0041e	8b c1		 mov	 eax, ecx
  00420	0f 47 fa	 cmova	 edi, edx
  00423	2b f8		 sub	 edi, eax
$LL106@WriteHybri:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 355  : 		strcpy(szPath, str.c_str());

  00425	8a 04 39	 mov	 al, BYTE PTR [ecx+edi]
  00428	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0042b	88 41 ff	 mov	 BYTE PTR [ecx-1], al
  0042e	84 c0		 test	 al, al
  00430	75 f3		 jne	 SHORT $LL106@WriteHybri

; 356  : 
; 357  : 		for (size_t i = nLength - 1; i > 0; i--)

  00432	8b 85 68 fa ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00438	8b bd 74 fa ff
	ff		 mov	 edi, DWORD PTR _ssvv1$1$[ebp]
  0043e	83 c0 ff	 add	 eax, -1
  00441	0f 84 89 00 00
	00		 je	 $LN94@WriteHybri
  00447	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL95@WriteHybri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00450	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  00453	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _ssvv1$10[ebp]

; 417  :         if (_Large_mode_engaged()) {

  00459	0f 47 ca	 cmova	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 359  : 			if (str[i] == '/' || str[i] == '\\')

  0045c	80 3c 01 2f	 cmp	 BYTE PTR [ecx+eax], 47	; 0000002fH
  00460	74 1d		 je	 SHORT $LN417@WriteHybri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00462	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  00465	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _ssvv1$10[ebp]

; 417  :         if (_Large_mode_engaged()) {

  0046b	0f 47 ca	 cmova	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 359  : 			if (str[i] == '/' || str[i] == '\\')

  0046e	80 3c 01 5c	 cmp	 BYTE PTR [ecx+eax], 92	; 0000005cH
  00472	74 0b		 je	 SHORT $LN417@WriteHybri

; 365  : 				break;
; 366  : 			}
; 367  : 
; 368  : 			if (0 == i)

  00474	85 c0		 test	 eax, eax
  00476	74 58		 je	 SHORT $LN94@WriteHybri

; 356  : 
; 357  : 		for (size_t i = nLength - 1; i > 0; i--)

  00478	83 e8 01	 sub	 eax, 1
  0047b	75 d3		 jne	 SHORT $LL95@WriteHybri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 857  :         if (_Count > max_size()) {

  0047d	eb 51		 jmp	 SHORT $LN94@WriteHybri
$LN417@WriteHybri:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 362  : 				for (size_t j = i + 1; j < nLength; j++, k++)

  0047f	8b 8d 68 fa ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
  00485	40		 inc	 eax
  00486	89 85 70 fa ff
	ff		 mov	 DWORD PTR _j$2$[ebp], eax
  0048c	3b c1		 cmp	 eax, ecx
  0048e	73 2a		 jae	 SHORT $LN457@WriteHybri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00490	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00493	8b f9		 mov	 edi, ecx
  00495	76 1b		 jbe	 SHORT $LN428@WriteHybri
$LN462@WriteHybri:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 364  : 				szPath[k] = '\0';

  00497	2b bd 70 fa ff
	ff		 sub	 edi, DWORD PTR _j$2$[ebp]
  0049d	03 c2		 add	 eax, edx
  0049f	57		 push	 edi
  004a0	50		 push	 eax
  004a1	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szPath$11[ebp]
  004a7	50		 push	 eax
  004a8	e8 00 00 00 00	 call	 _memcpy
  004ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  004b0	eb 0a		 jmp	 SHORT $LN429@WriteHybri
$LN428@WriteHybri:

; 360  : 			{
; 361  : 				int k = 0;

  004b2	8d 95 d8 fb ff
	ff		 lea	 edx, DWORD PTR _ssvv1$10[ebp]

; 362  : 				for (size_t j = i + 1; j < nLength; j++, k++)

  004b8	eb dd		 jmp	 SHORT $LN462@WriteHybri
$LN457@WriteHybri:
  004ba	33 ff		 xor	 edi, edi
$LN429@WriteHybri:

; 364  : 				szPath[k] = '\0';

  004bc	81 ff 00 04 00
	00		 cmp	 edi, 1024		; 00000400H
  004c2	0f 83 43 02 00
	00		 jae	 $LN107@WriteHybri
  004c8	c6 84 3d f0 fb
	ff ff 00	 mov	 BYTE PTR _szPath$11[ebp+edi], 0
$LN94@WriteHybri:
  004d0	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  004d3	c7 85 b8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _noPathName$8[ebp+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  004dd	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$11[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  004e3	c7 85 bc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _noPathName$8[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  004ed	0f 11 85 a8 fb
	ff ff		 movups	 XMMWORD PTR _noPathName$8[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  004f4	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL456@WriteHybri:
  004f7	8a 01		 mov	 al, BYTE PTR [ecx]
  004f9	41		 inc	 ecx
  004fa	84 c0		 test	 al, al
  004fc	75 f9		 jne	 SHORT $LL456@WriteHybri
  004fe	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00500	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _szPath$11[ebp]
  00506	51		 push	 ecx
  00507	50		 push	 eax
  00508	8d 8d a8 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$8[ebp]
  0050e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 434  :         return _Myres > _Small_string_capacity;

  00513	83 bd bc fb ff
	ff 0f		 cmp	 DWORD PTR _noPathName$8[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  0051a	8d 8d a8 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$8[ebp]

; 426  :         if (_Large_mode_engaged()) {

  00520	8b 85 a8 fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$8[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 496  :        const unsigned char * end = s + str.size();

  00526	8b bd b8 fb ff
	ff		 mov	 edi, DWORD PTR _noPathName$8[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0052c	0f 47 c8	 cmova	 ecx, eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 496  :        const unsigned char * end = s + str.size();

  0052f	03 f9		 add	 edi, ecx
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 644  : 		auto noPathName = CFileNameHelper::NoPath(ssvv1);

  00531	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 497  :        size_t h = 0;

  00535	33 d2		 xor	 edx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00537	89 85 68 fa ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 499  :        while (s < end)

  0053d	3b cf		 cmp	 ecx, edi
  0053f	73 10		 jae	 SHORT $LN171@WriteHybri
$LL432@WriteHybri:

; 500  :        {
; 501  :            h *= 16777619;
; 502  :            h ^= (unsigned char) *(unsigned char *) (s++);

  00541	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00544	41		 inc	 ecx
  00545	69 d2 93 01 00
	01		 imul	 edx, edx, 16777619
  0054b	33 d0		 xor	 edx, eax
  0054d	3b cf		 cmp	 ecx, edi
  0054f	72 f0		 jb	 SHORT $LL432@WriteHybri
$LN171@WriteHybri:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 647  : 		keyFile.Write( &dwPackNamehash, sizeof(DWORD) );

  00551	6a 04		 push	 4
  00553	8d 85 54 fa ff
	ff		 lea	 eax, DWORD PTR _dwPackNamehash$3[ebp]
  00559	89 95 54 fa ff
	ff		 mov	 DWORD PTR _dwPackNamehash$3[ebp], edx
  0055f	50		 push	 eax
  00560	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  00566	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 648  : 
; 649  : 		int iSDBSizeWriteOffset = keyFile.GetPosition();

  0056b	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  00571	e8 00 00 00 00	 call	 ?GetPosition@CFileBase@@QAEKXZ ; CFileBase::GetPosition

; 650  : 		keyFile.SeekCur(sizeof(int));

  00576	6a 04		 push	 4
  00578	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  0057e	89 85 70 fa ff
	ff		 mov	 DWORD PTR _iSDBSizeWriteOffset$1$[ebp], eax
  00584	e8 00 00 00 00	 call	 ?SeekCur@CFileBase@@QAEXK@Z ; CFileBase::SeekCur

; 651  : 
; 652  : 		pPolicy->WriteSupplementaryDataBlockToFile( keyFile );

  00589	8b 8d 58 fa ff
	ff		 mov	 ecx, DWORD PTR _pPolicy$1$[ebp]
  0058f	8d 85 78 fa ff
	ff		 lea	 eax, DWORD PTR _keyFile$[ebp]
  00595	50		 push	 eax
  00596	e8 00 00 00 00	 call	 ?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z ; EterPackPolicy_CSHybridCrypt::WriteSupplementaryDataBlockToFile

; 653  : 		int iSDBSizeAfterWrite = keyFile.GetPosition();

  0059b	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  005a1	e8 00 00 00 00	 call	 ?GetPosition@CFileBase@@QAEKXZ ; CFileBase::GetPosition

; 654  : 
; 655  : 		keyFile.Seek(iSDBSizeWriteOffset);

  005a6	ff b5 70 fa ff
	ff		 push	 DWORD PTR _iSDBSizeWriteOffset$1$[ebp]
  005ac	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  005b2	8b f8		 mov	 edi, eax
  005b4	e8 00 00 00 00	 call	 ?Seek@CFileBase@@QAEXK@Z ; CFileBase::Seek

; 656  : 
; 657  : 		int iSDBSize = iSDBSizeAfterWrite-(iSDBSizeWriteOffset+4);

  005b9	8b cf		 mov	 ecx, edi

; 658  : 		keyFile.Write( &iSDBSize, sizeof(int) );

  005bb	8d 85 50 fa ff
	ff		 lea	 eax, DWORD PTR _iSDBSize$2[ebp]
  005c1	2b 8d 70 fa ff
	ff		 sub	 ecx, DWORD PTR _iSDBSizeWriteOffset$1$[ebp]
  005c7	83 e9 04	 sub	 ecx, 4
  005ca	6a 04		 push	 4
  005cc	89 8d 50 fa ff
	ff		 mov	 DWORD PTR _iSDBSize$2[ebp], ecx
  005d2	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  005d8	50		 push	 eax
  005d9	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 659  : 
; 660  : 		keyFile.Seek(iSDBSizeAfterWrite);

  005de	57		 push	 edi
  005df	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  005e5	e8 00 00 00 00	 call	 ?Seek@CFileBase@@QAEXK@Z ; CFileBase::Seek
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  005ea	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR _noPathName$8[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 661  : 	}

  005f0	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  005f4	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  005f7	76 31		 jbe	 SHORT $LN203@WriteHybri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005f9	8b 95 68 fa ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  005ff	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00602	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00604	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0060a	72 14		 jb	 SHORT $LN214@WriteHybri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0060c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0060f	83 c1 23	 add	 ecx, 35			; 00000023H
  00612	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00614	83 c0 fc	 add	 eax, -4			; fffffffcH
  00617	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0061a	0f 87 e6 00 00
	00		 ja	 $LN381@WriteHybri
$LN214@WriteHybri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00620	51		 push	 ecx
  00621	52		 push	 edx
  00622	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00627	83 c4 08	 add	 esp, 8
$LN203@WriteHybri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0062a	8b 85 74 fa ff
	ff		 mov	 eax, DWORD PTR _ssvv1$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 661  : 	}

  00630	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00634	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00637	76 31		 jbe	 SHORT $LN5@WriteHybri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00639	8b 8d 6c fa ff
	ff		 mov	 ecx, DWORD PTR __Ptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0063f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00642	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00644	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0064a	72 14		 jb	 SHORT $LN251@WriteHybri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0064c	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0064f	83 c2 23	 add	 edx, 35			; 00000023H
  00652	2b c1		 sub	 eax, ecx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00654	83 c0 fc	 add	 eax, -4			; fffffffcH
  00657	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0065a	0f 87 a6 00 00
	00		 ja	 $LN381@WriteHybri
$LN251@WriteHybri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00660	52		 push	 edx
  00661	51		 push	 ecx
  00662	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00667	83 c4 08	 add	 esp, 8
$LN5@WriteHybri:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  0066a	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 636  : 	{

  0066c	85 f6		 test	 esi, esi
  0066e	0f 85 2c fc ff
	ff		 jne	 $LL7@WriteHybri
$LN427@WriteHybri:

; 662  : 
; 663  : 	//write sdb data start offset & package cnt
; 664  : 	keyFile.Seek(0);

  00674	6a 00		 push	 0
  00676	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  0067c	e8 00 00 00 00	 call	 ?Seek@CFileBase@@QAEXK@Z ; CFileBase::Seek

; 665  : 	keyFile.Write( &iSDBDataOffset, sizeof(int));

  00681	6a 04		 push	 4
  00683	8d 85 5c fa ff
	ff		 lea	 eax, DWORD PTR _iSDBDataOffset$[ebp]
  00689	50		 push	 eax
  0068a	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  00690	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 666  : 	keyFile.Write( &iKeyPackageCount, sizeof(int));

  00695	6a 04		 push	 4
  00697	8d 85 64 fa ff
	ff		 lea	 eax, DWORD PTR _iKeyPackageCount$[ebp]
  0069d	50		 push	 eax
  0069e	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  006a4	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 667  : 
; 668  : 	keyFile.Seek(iSDBDataOffset);

  006a9	ff b5 5c fa ff
	ff		 push	 DWORD PTR _iSDBDataOffset$[ebp]
  006af	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  006b5	e8 00 00 00 00	 call	 ?Seek@CFileBase@@QAEXK@Z ; CFileBase::Seek

; 669  : 	keyFile.Write( &iSDBPackageCnt, sizeof(int));

  006ba	6a 04		 push	 4
  006bc	8d 85 60 fa ff
	ff		 lea	 eax, DWORD PTR _iSDBPackageCnt$[ebp]
  006c2	50		 push	 eax
  006c3	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  006c9	e8 00 00 00 00	 call	 ?Write@CFileBase@@UAEHPBXH@Z ; CFileBase::Write

; 670  : 
; 671  : 	keyFile.Close();

  006ce	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  006d4	e8 00 00 00 00	 call	 ?Close@CFileBase@@QAEXXZ ; CFileBase::Close
$LN19@WriteHybri:

; 672  : }

  006d9	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  006df	e8 00 00 00 00	 call	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
  006e4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  006e7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  006ee	59		 pop	 ecx
  006ef	5f		 pop	 edi
  006f0	5e		 pop	 esi
  006f1	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006f4	33 cd		 xor	 ecx, ebp
  006f6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006fb	8b e5		 mov	 esp, ebp
  006fd	5d		 pop	 ebp
  006fe	c2 04 00	 ret	 4
$LN419@WriteHybri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 858  :             _Xlen_string(); // result too long

  00701	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN381@WriteHybri:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 672  : }

  00706	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN107@WriteHybri:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 364  : 				szPath[k] = '\0';

  0070b	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN460@WriteHybri:
  00710	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$0:
  00000	8d 8d 78 fa ff
	ff		 lea	 ecx, DWORD PTR _keyFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CFileBase@@UAE@XZ	; CFileBase::~CFileBase
__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$1:
  0000b	8d 8d 90 fb ff
	ff		 lea	 ecx, DWORD PTR _ssvv$7[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$2:
  00016	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$9[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$3:
  00021	8d 8d d8 fb ff
	ff		 lea	 ecx, DWORD PTR _ssvv1$10[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z$4:
  0002c	8d 8d a8 fb ff
	ff		 lea	 ecx, DWORD PTR _noPathName$8[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
__ehhandler$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z:
  0003c	90		 npad	 1
  0003d	90		 npad	 1
  0003e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00042	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00045	8b 8a 50 fa ff
	ff		 mov	 ecx, DWORD PTR [edx-1456]
  0004b	33 c8		 xor	 ecx, eax
  0004d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00052	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00055	33 c8		 xor	 ecx, eax
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z
  00061	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?WriteHybridCryptPackInfo@CEterPackManager@@QAEXPBD@Z ENDP ; CEterPackManager::WriteHybridCryptPackInfo
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?GetRootPackFileName@CEterPackManager@@QAEPBDXZ
_TEXT	SEGMENT
?GetRootPackFileName@CEterPackManager@@QAEPBDXZ PROC	; CEterPackManager::GetRootPackFileName, COMDAT
; _this$ = ecx

; 384  : 	return m_RootPack.GetDBName();

  00000	83 c1 24	 add	 ecx, 36			; 00000024H
  00003	e9 00 00 00 00	 jmp	 ?GetDBName@CEterPack@@QAEPBDXZ ; CEterPack::GetDBName
?GetRootPackFileName@CEterPackManager@@QAEPBDXZ ENDP	; CEterPackManager::GetRootPackFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?DecryptPackIV@CEterPackManager@@QAE_NK@Z
_TEXT	SEGMENT
_dwPanamaKey$ = 8					; size = 4
?DecryptPackIV@CEterPackManager@@QAE_NK@Z PROC		; CEterPackManager::DecryptPackIV, COMDAT
; _this$ = ecx

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00003	83 b9 20 14 00
	00 00		 cmp	 DWORD PTR [ecx+5152], 0
  0000a	74 2f		 je	 SHORT $LN40@DecryptPac

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000c	8b 81 1c 14 00
	00		 mov	 eax, DWORD PTR [ecx+5148]
  00012	56		 push	 esi

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00013	8b b1 2c 14 00
	00		 mov	 esi, DWORD PTR [ecx+5164]
  00019	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  0001c	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 390  : 	while (itor != m_PackMap.end())

  0001e	74 14		 je	 SHORT $LN39@DecryptPac
  00020	57		 push	 edi
  00021	8b 7d 08	 mov	 edi, DWORD PTR _dwPanamaKey$[ebp]
$LL2@DecryptPac:

; 391  : 	{
; 392  : 		itor->second->DecryptIV(dwPanamaKey);

  00024	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 ?DecryptIV@CEterPack@@QAE_NK@Z ; CEterPack::DecryptIV
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2388 :           node_ = static_cast<node_pointer>(node_->next_);

  0002d	8b 36		 mov	 esi, DWORD PTR [esi]

; 2399 :           return node_ != x.node_;

  0002f	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 390  : 	while (itor != m_PackMap.end())

  00031	75 f1		 jne	 SHORT $LL2@DecryptPac
  00033	5f		 pop	 edi
$LN39@DecryptPac:

; 393  : 		itor++;
; 394  : 	}
; 395  : 	return true;

  00034	b0 01		 mov	 al, 1
  00036	5e		 pop	 esi

; 396  : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN40@DecryptPac:

; 393  : 		itor++;
; 394  : 	}
; 395  : 	return true;

  0003b	b0 01		 mov	 al, 1

; 396  : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?DecryptPackIV@CEterPackManager@@QAE_NK@Z ENDP		; CEterPackManager::DecryptPackIV
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z
_TEXT	SEGMENT
$T2 = -60						; size = 8
_c_szDirectory$GSCopy$1$ = -56				; size = 4
$T3 = -52						; size = 8
tv481 = -48						; size = 4
$T4 = -44						; size = 28
$T5 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szName$ = 8						; size = 4
_c_szDirectory$ = 12					; size = 4
_pPack$ = 16						; size = 4
?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z PROC ; CEterPackManager::RegisterPackWhenPackMaking, COMDAT
; _this$ = ecx

; 399  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	8b 55 08	 mov	 edx, DWORD PTR _c_szName$[ebp]
  0002f	0f 57 c0	 xorps	 xmm0, xmm0
  00032	8b 45 0c	 mov	 eax, DWORD PTR _c_szDirectory$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00035	8b ca		 mov	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 399  : {

  00037	89 45 c8	 mov	 DWORD PTR _c_szDirectory$GSCopy$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003a	0f 11 45 d4	 movups	 XMMWORD PTR $T4[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0003e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00045	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00048	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0004f	89 45 d0	 mov	 DWORD PTR tv481[ebp], eax
$LL142@RegisterPa:
  00052	8a 01		 mov	 al, BYTE PTR [ecx]
  00054	41		 inc	 ecx
  00055	84 c0		 test	 al, al
  00057	75 f9		 jne	 SHORT $LL142@RegisterPa
  00059	2b 4d d0	 sub	 ecx, DWORD PTR tv481[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005c	51		 push	 ecx
  0005d	52		 push	 edx
  0005e	8d 4d d4	 lea	 ecx, DWORD PTR $T4[ebp]
  00061	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00066	8b 45 10	 mov	 eax, DWORD PTR _pPack$[ebp]
  00069	89 45 ec	 mov	 DWORD PTR $T4[ebp+24], eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  0006c	8d 45 d4	 lea	 eax, DWORD PTR $T4[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 400  : 	m_PackMap.insert(TEterPackMap::value_type(c_szName, pPack));

  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00076	50		 push	 eax
  00077	50		 push	 eax
  00078	8d 45 cc	 lea	 eax, DWORD PTR $T3[ebp]
  0007b	50		 push	 eax
  0007c	8d 8e 18 14 00
	00		 lea	 ecx, DWORD PTR [esi+5144]
  00082	e8 00 00 00 00	 call	 ??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00087	8b 4d e8	 mov	 ecx, DWORD PTR $T4[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 400  : 	m_PackMap.insert(TEterPackMap::value_type(c_szName, pPack));

  0008a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00091	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00094	76 2c		 jbe	 SHORT $LN55@RegisterPa
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00096	8b 55 d4	 mov	 edx, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00099	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009a	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0009c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a2	72 14		 jb	 SHORT $LN66@RegisterPa

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a7	83 c1 23	 add	 ecx, 35			; 00000023H
  000aa	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ac	83 c0 fc	 add	 eax, -4			; fffffffcH
  000af	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b2	0f 87 bb 00 00
	00		 ja	 $LN132@RegisterPa
$LN66@RegisterPa:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	51		 push	 ecx
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bf	83 c4 08	 add	 esp, 8
$LN55@RegisterPa:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 401  : 	m_PackList.push_front(pPack);

  000c2	8d 45 10	 lea	 eax, DWORD PTR _pPack$[ebp]
  000c5	8d 8e 10 14 00
	00		 lea	 ecx, DWORD PTR [esi+5136]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z ; std::list<CEterPack *,std::allocator<CEterPack *> >::push_front
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  000d1	8b 7d c8	 mov	 edi, DWORD PTR _c_szDirectory$GSCopy$1$[ebp]
  000d4	0f 57 c0	 xorps	 xmm0, xmm0
  000d7	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000d9	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000e0	0f 11 45 d4	 movups	 XMMWORD PTR $T5[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000e4	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  000eb	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  000ee	66 90		 npad	 2
$LL143@RegisterPa:
  000f0	8a 01		 mov	 al, BYTE PTR [ecx]
  000f2	41		 inc	 ecx
  000f3	84 c0		 test	 al, al
  000f5	75 f9		 jne	 SHORT $LL143@RegisterPa
  000f7	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000f9	51		 push	 ecx
  000fa	57		 push	 edi
  000fb	8d 4d d4	 lea	 ecx, DWORD PTR $T5[ebp]
  000fe	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00103	8b 45 10	 mov	 eax, DWORD PTR _pPack$[ebp]
  00106	89 45 ec	 mov	 DWORD PTR $T5[ebp+24], eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00109	8d 45 d4	 lea	 eax, DWORD PTR $T5[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 403  : 	m_DirPackMap.insert(TEterPackMap::value_type(c_szDirectory, pPack));

  0010c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00113	50		 push	 eax
  00114	50		 push	 eax
  00115	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
  00118	50		 push	 eax
  00119	8d 8e 30 14 00
	00		 lea	 ecx, DWORD PTR [esi+5168]
  0011f	e8 00 00 00 00	 call	 ??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00124	8b 4d e8	 mov	 ecx, DWORD PTR $T5[ebp+20]
  00127	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0012a	76 28		 jbe	 SHORT $LN124@RegisterPa
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012c	8b 55 d4	 mov	 edx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0012f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00130	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00132	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00138	72 10		 jb	 SHORT $LN135@RegisterPa

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0013a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0013d	83 c1 23	 add	 ecx, 35			; 00000023H
  00140	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00142	83 c0 fc	 add	 eax, -4			; fffffffcH
  00145	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00148	77 29		 ja	 SHORT $LN132@RegisterPa
$LN135@RegisterPa:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0014a	51		 push	 ecx
  0014b	52		 push	 edx
  0014c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00151	83 c4 08	 add	 esp, 8
$LN124@RegisterPa:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 404  : 	return true;

  00154	b0 01		 mov	 al, 1

; 405  : }

  00156	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00159	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00160	59		 pop	 ecx
  00161	5f		 pop	 edi
  00162	5e		 pop	 esi
  00163	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00166	33 cd		 xor	 ecx, ebp
  00168	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c2 0c 00	 ret	 12			; 0000000cH
$LN132@RegisterPa:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00173	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN145@RegisterPa:
  00178	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ
__unwindfunclet$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T5[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterPackWhenPackMaking@CEterPackManager@@QAE_NPBD0PAVCEterPack@@@Z ENDP ; CEterPackManager::RegisterPackWhenPackMaking
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?RegisterRootPack@CEterPackManager@@QAEXPBD@Z
_TEXT	SEGMENT
_c_szName$ = 8						; size = 4
?RegisterRootPack@CEterPackManager@@QAEXPBD@Z PROC	; CEterPackManager::RegisterRootPack, COMDAT
; _this$ = ecx

; 375  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 376  : 	if (!m_RootPack.Create(m_FileDict, c_szName, ""))

  00003	6a 00		 push	 0
  00005	6a 01		 push	 1
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0000c	ff 75 08	 push	 DWORD PTR _c_szName$[ebp]
  0000f	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00012	83 c1 24	 add	 ecx, 36			; 00000024H
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?Create@CEterPack@@QAE_NAAVCEterFileDict@@PBD1_NPBE@Z ; CEterPack::Create
  0001b	84 c0		 test	 al, al
  0001d	75 10		 jne	 SHORT $LN2@RegisterRo

; 377  : 	{
; 378  : 		TraceError("%s: Pack file does not exist", c_szName);

  0001f	ff 75 08	 push	 DWORD PTR _c_szName$[ebp]
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HIHPGCNI@?$CFs?3?5Pack?5file?5does?5not?5exist@
  00027	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0002c	83 c4 08	 add	 esp, 8
$LN2@RegisterRo:

; 379  : 	}
; 380  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?RegisterRootPack@CEterPackManager@@QAEXPBD@Z ENDP	; CEterPackManager::RegisterRootPack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z
_TEXT	SEGMENT
tv888 = -68						; size = 4
_c_szName$GSCopy$1$ = -64				; size = 4
$T2 = -60						; size = 8
$T3 = -60						; size = 8
_itor$4 = -56						; size = 4
tv877 = -56						; size = 4
_c_pbIV$GSCopy$1$ = -56					; size = 4
_this$GSCopy$1$ = -52					; size = 4
_pEterPack$ = -48					; size = 4
_itor$5 = -48						; size = 4
$T6 = -48						; size = 4
$T7 = -44						; size = 28
$T8 = -44						; size = 28
$T9 = -40						; size = 24
$T10 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szName$ = 8						; size = 4
_c_szDirectory$ = 12					; size = 4
_c_pbIV$ = 16						; size = 4
?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z PROC	; CEterPackManager::RegisterPack, COMDAT
; _this$ = ecx

; 409  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 45 10	 mov	 eax, DWORD PTR _c_pbIV$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	8b 55 08	 mov	 edx, DWORD PTR _c_szName$[ebp]
  00036	8b 7d 0c	 mov	 edi, DWORD PTR _c_szDirectory$[ebp]
  00039	89 45 c8	 mov	 DWORD PTR _c_pbIV$GSCopy$1$[ebp], eax

; 412  : 		TEterPackMap::iterator itor = m_PackMap.find(c_szName);

  0003c	8d 81 18 14 00
	00		 lea	 eax, DWORD PTR [ecx+5144]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00042	8b ca		 mov	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 409  : {

  00044	89 55 c0	 mov	 DWORD PTR _c_szName$GSCopy$1$[ebp], edx

; 412  : 		TEterPackMap::iterator itor = m_PackMap.find(c_szName);

  00047	89 45 bc	 mov	 DWORD PTR tv888[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0004a	0f 11 45 d8	 movups	 XMMWORD PTR $T9[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0004e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00055	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0005c	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0005f	90		 npad	 1
$LL285@RegisterPa:
  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	41		 inc	 ecx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL285@RegisterPa
  00067	2b ce		 sub	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00069	51		 push	 ecx
  0006a	52		 push	 edx
  0006b	8d 4d d8	 lea	 ecx, DWORD PTR $T9[ebp]
  0006e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 412  : 		TEterPackMap::iterator itor = m_PackMap.find(c_szName);

  00073	8b 4d bc	 mov	 ecx, DWORD PTR tv888[ebp]
  00076	8d 45 d8	 lea	 eax, DWORD PTR $T9[ebp]
  00079	50		 push	 eax
  0007a	8d 45 d0	 lea	 eax, DWORD PTR _itor$5[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?find@?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::find
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00083	8b 4d ec	 mov	 ecx, DWORD PTR $T9[ebp+20]
  00086	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00089	76 2c		 jbe	 SHORT $LN56@RegisterPa
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008b	8b 55 d8	 mov	 edx, DWORD PTR $T9[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0008e	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008f	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00091	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00097	72 14		 jb	 SHORT $LN67@RegisterPa

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00099	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009c	83 c1 23	 add	 ecx, 35			; 00000023H
  0009f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a7	0f 87 4b 02 00
	00		 ja	 $LN275@RegisterPa
$LN67@RegisterPa:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000ad	51		 push	 ecx
  000ae	52		 push	 edx
  000af	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b4	83 c4 08	 add	 esp, 8
$LN56@RegisterPa:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  000b7	8b 45 d0	 mov	 eax, DWORD PTR _itor$5[ebp]
  000ba	85 c0		 test	 eax, eax
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 414  : 		if (m_PackMap.end() == itor)

  000bc	0f 85 f0 00 00
	00		 jne	 $LN2@RegisterPa

; 415  : 		{
; 416  : 			bool bReadOnly = true;
; 417  : 
; 418  : 			pEterPack = new CEterPack;

  000c2	68 ec 13 00 00	 push	 5100			; 000013ecH
  000c7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000cc	83 c4 04	 add	 esp, 4
  000cf	89 45 d0	 mov	 DWORD PTR $T6[ebp], eax
  000d2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d9	85 c0		 test	 eax, eax
  000db	74 0b		 je	 SHORT $LN9@RegisterPa
  000dd	8b c8		 mov	 ecx, eax
  000df	e8 00 00 00 00	 call	 ??0CEterPack@@QAE@XZ	; CEterPack::CEterPack
  000e4	8b f0		 mov	 esi, eax
  000e6	eb 02		 jmp	 SHORT $LN10@RegisterPa
$LN9@RegisterPa:
  000e8	33 f6		 xor	 esi, esi
$LN10@RegisterPa:

; 419  : 			if (pEterPack->Create(m_FileDict, c_szName, c_szDirectory, bReadOnly, c_pbIV))

  000ea	ff 75 c8	 push	 DWORD PTR _c_pbIV$GSCopy$1$[ebp]
  000ed	8b 45 cc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  000f0	8b ce		 mov	 ecx, esi
  000f2	6a 01		 push	 1
  000f4	57		 push	 edi
  000f5	ff 75 c0	 push	 DWORD PTR _c_szName$GSCopy$1$[ebp]
  000f8	83 c0 0c	 add	 eax, 12			; 0000000cH
  000fb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00102	50		 push	 eax
  00103	89 75 d0	 mov	 DWORD PTR _pEterPack$[ebp], esi
  00106	e8 00 00 00 00	 call	 ?Create@CEterPack@@QAE_NAAVCEterFileDict@@PBD1_NPBE@Z ; CEterPack::Create
  0010b	84 c0		 test	 al, al
  0010d	0f 84 8c 00 00
	00		 je	 $LN4@RegisterPa
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00113	8b 55 c0	 mov	 edx, DWORD PTR _c_szName$GSCopy$1$[ebp]
  00116	0f 57 c0	 xorps	 xmm0, xmm0
  00119	8b ca		 mov	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0011b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00122	0f 11 45 d4	 movups	 XMMWORD PTR $T7[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00126	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0012d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00130	89 45 c8	 mov	 DWORD PTR tv877[ebp], eax
$LL286@RegisterPa:
  00133	8a 01		 mov	 al, BYTE PTR [ecx]
  00135	41		 inc	 ecx
  00136	84 c0		 test	 al, al
  00138	75 f9		 jne	 SHORT $LL286@RegisterPa
  0013a	2b 4d c8	 sub	 ecx, DWORD PTR tv877[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0013d	51		 push	 ecx
  0013e	52		 push	 edx
  0013f	8d 4d d4	 lea	 ecx, DWORD PTR $T7[ebp]
  00142	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00147	89 75 ec	 mov	 DWORD PTR $T7[ebp+24], esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  0014a	8b 4d bc	 mov	 ecx, DWORD PTR tv888[ebp]
  0014d	8d 45 d4	 lea	 eax, DWORD PTR $T7[ebp]
  00150	50		 push	 eax
  00151	50		 push	 eax
  00152	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 421  : 				m_PackMap.insert(TEterPackMap::value_type(c_szName, pEterPack));

  00155	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 ??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00162	8b 4d e8	 mov	 ecx, DWORD PTR $T7[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 421  : 				m_PackMap.insert(TEterPackMap::value_type(c_szName, pEterPack));

  00165	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0016c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0016f	76 47		 jbe	 SHORT $LN3@RegisterPa
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00171	8b 55 d4	 mov	 edx, DWORD PTR $T7[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00174	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00175	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00177	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0017d	72 14		 jb	 SHORT $LN146@RegisterPa

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0017f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00182	83 c1 23	 add	 ecx, 35			; 00000023H
  00185	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00187	83 c0 fc	 add	 eax, -4			; fffffffcH
  0018a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0018d	0f 87 65 01 00
	00		 ja	 $LN275@RegisterPa
$LN146@RegisterPa:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00193	51		 push	 ecx
  00194	52		 push	 edx
  00195	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0019a	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 432  : 		}

  0019d	eb 19		 jmp	 SHORT $LN3@RegisterPa
$LN4@RegisterPa:

; 422  : 			}
; 423  : 			else
; 424  : 			{
; 425  : #ifdef _DEBUG
; 426  : 				Tracef("The eterpack doesn't exist [%s]\n", c_szName);
; 427  : #endif
; 428  : 				delete pEterPack;

  0019f	85 f6		 test	 esi, esi
  001a1	74 08		 je	 SHORT $LN11@RegisterPa
  001a3	8b 06		 mov	 eax, DWORD PTR [esi]
  001a5	8b ce		 mov	 ecx, esi
  001a7	6a 01		 push	 1
  001a9	ff 10		 call	 DWORD PTR [eax]
$LN11@RegisterPa:

; 429  : 				pEterPack = NULL;
; 430  : 				return false;

  001ab	32 c0		 xor	 al, al
  001ad	e9 29 01 00 00	 jmp	 $LN1@RegisterPa
$LN2@RegisterPa:

; 433  : 		else
; 434  : 		{
; 435  : 			pEterPack = itor->second;

  001b2	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  001b5	89 45 d0	 mov	 DWORD PTR _pEterPack$[ebp], eax
$LN3@RegisterPa:

; 436  : 		}
; 437  : 	}
; 438  : 
; 439  : 	if (c_szDirectory && c_szDirectory[0] != '*')

  001b8	85 ff		 test	 edi, edi
  001ba	0f 84 19 01 00
	00		 je	 $LN267@RegisterPa
  001c0	80 3f 2a	 cmp	 BYTE PTR [edi], 42	; 0000002aH
  001c3	0f 84 10 01 00
	00		 je	 $LN267@RegisterPa

; 441  : 		TEterPackMap::iterator itor = m_DirPackMap.find(c_szDirectory);

  001c9	8b 75 cc	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  001cc	8b cf		 mov	 ecx, edi
  001ce	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  001d1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001d8	0f 11 45 d8	 movups	 XMMWORD PTR $T10[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  001dc	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  001e3	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL287@RegisterPa:
  001e6	8a 01		 mov	 al, BYTE PTR [ecx]
  001e8	41		 inc	 ecx
  001e9	84 c0		 test	 al, al
  001eb	75 f9		 jne	 SHORT $LL287@RegisterPa
  001ed	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  001ef	51		 push	 ecx
  001f0	57		 push	 edi
  001f1	8d 4d d8	 lea	 ecx, DWORD PTR $T10[ebp]
  001f4	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 441  : 		TEterPackMap::iterator itor = m_DirPackMap.find(c_szDirectory);

  001f9	8d 45 d8	 lea	 eax, DWORD PTR $T10[ebp]
  001fc	50		 push	 eax
  001fd	8d 45 c8	 lea	 eax, DWORD PTR _itor$4[ebp]
  00200	50		 push	 eax
  00201	8d 8e 30 14 00
	00		 lea	 ecx, DWORD PTR [esi+5168]
  00207	e8 00 00 00 00	 call	 ?find@?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::find
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0020c	8b 4d ec	 mov	 ecx, DWORD PTR $T10[ebp+20]
  0020f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00212	76 2c		 jbe	 SHORT $LN191@RegisterPa
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00214	8b 55 d8	 mov	 edx, DWORD PTR $T10[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00217	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00218	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0021a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00220	72 14		 jb	 SHORT $LN202@RegisterPa

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00222	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00225	83 c1 23	 add	 ecx, 35			; 00000023H
  00228	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0022a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0022d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00230	0f 87 c2 00 00
	00		 ja	 $LN275@RegisterPa
$LN202@RegisterPa:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00236	51		 push	 ecx
  00237	52		 push	 edx
  00238	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0023d	83 c4 08	 add	 esp, 8
$LN191@RegisterPa:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00240	83 7d c8 00	 cmp	 DWORD PTR _itor$4[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 442  : 		if (m_DirPackMap.end() == itor)

  00244	0f 85 8f 00 00
	00		 jne	 $LN267@RegisterPa

; 443  : 		{
; 444  : 			m_PackList.push_front(pEterPack);

  0024a	8b ce		 mov	 ecx, esi
  0024c	8d 45 d0	 lea	 eax, DWORD PTR _pEterPack$[ebp]
  0024f	50		 push	 eax
  00250	8d 89 10 14 00
	00		 lea	 ecx, DWORD PTR [ecx+5136]
  00256	e8 00 00 00 00	 call	 ?push_front@?$list@PAVCEterPack@@V?$allocator@PAVCEterPack@@@std@@@std@@QAEXABQAVCEterPack@@@Z ; std::list<CEterPack *,std::allocator<CEterPack *> >::push_front
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0025b	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0025d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0
  00264	0f 57 c0	 xorps	 xmm0, xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00267	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0026e	0f 11 45 d4	 movups	 XMMWORD PTR $T8[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00272	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL288@RegisterPa:
  00275	8a 01		 mov	 al, BYTE PTR [ecx]
  00277	41		 inc	 ecx
  00278	84 c0		 test	 al, al
  0027a	75 f9		 jne	 SHORT $LL288@RegisterPa
  0027c	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0027e	51		 push	 ecx
  0027f	57		 push	 edi
  00280	8d 4d d4	 lea	 ecx, DWORD PTR $T8[ebp]
  00283	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00288	8b 45 d0	 mov	 eax, DWORD PTR _pEterPack$[ebp]
  0028b	89 45 ec	 mov	 DWORD PTR $T8[ebp+24], eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  0028e	8d 45 d4	 lea	 eax, DWORD PTR $T8[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 445  : 			m_DirPackMap.insert(TEterPackMap::value_type(c_szDirectory, pEterPack));

  00291	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00298	50		 push	 eax
  00299	50		 push	 eax
  0029a	8d 45 c4	 lea	 eax, DWORD PTR $T3[ebp]
  0029d	50		 push	 eax
  0029e	8d 8e 30 14 00
	00		 lea	 ecx, DWORD PTR [esi+5168]
  002a4	e8 00 00 00 00	 call	 ??$emplace_unique@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::emplace_unique<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002a9	8b 4d e8	 mov	 ecx, DWORD PTR $T8[ebp+20]
  002ac	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  002af	76 28		 jbe	 SHORT $LN267@RegisterPa
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002b1	8b 55 d4	 mov	 edx, DWORD PTR $T8[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  002b4	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002b5	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  002b7	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002bd	72 10		 jb	 SHORT $LN278@RegisterPa

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002bf	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002c2	83 c1 23	 add	 ecx, 35			; 00000023H
  002c5	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002c7	83 c0 fc	 add	 eax, -4			; fffffffcH
  002ca	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002cd	77 29		 ja	 SHORT $LN275@RegisterPa
$LN278@RegisterPa:

; 289  :         ::operator delete(_Ptr, _Bytes);

  002cf	51		 push	 ecx
  002d0	52		 push	 edx
  002d1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002d6	83 c4 08	 add	 esp, 8
$LN267@RegisterPa:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 449  : 	return true;

  002d9	b0 01		 mov	 al, 1
$LN1@RegisterPa:

; 450  : }

  002db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002e5	59		 pop	 ecx
  002e6	5f		 pop	 edi
  002e7	5e		 pop	 esi
  002e8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002eb	33 cd		 xor	 ecx, ebp
  002ed	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f2	8b e5		 mov	 esp, ebp
  002f4	5d		 pop	 ebp
  002f5	c2 0c 00	 ret	 12			; 0000000cH
$LN275@RegisterPa:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002f8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN290@RegisterPa:
  002fd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z$1:
  00000	68 ec 13 00 00	 push	 5100			; 000013ecH
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T6[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z$2:
  00012	8d 4d d4	 lea	 ecx, DWORD PTR $T7[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ
__unwindfunclet$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z$4:
  0001a	8d 4d d4	 lea	 ecx, DWORD PTR $T8[ebp]
  0001d	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@QAE@XZ
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
  00026	cc		 int	 3
__ehhandler$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z:
  00027	90		 npad	 1
  00028	90		 npad	 1
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterPack@CEterPackManager@@QAE_NPBD0PBE@Z ENDP	; CEterPackManager::RegisterPack
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?isExistInPack@CEterPackManager@@QAE_NPBD@Z
_TEXT	SEGMENT
$T2 = -41						; size = 1
_strFileName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?isExistInPack@CEterPackManager@@QAE_NPBD@Z PROC	; CEterPackManager::isExistInPack, COMDAT
; _this$ = ecx

; 330  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?isExistInPack@CEterPackManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _c_szFileName$[ebp]
  0002e	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00031	0f 11 45 d8	 movups	 XMMWORD PTR _strFileName$[ebp], xmm0

; 836  :         _My_data._Mysize = 0;

  00035	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0003c	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00043	c6 45 d8 00	 mov	 BYTE PTR _strFileName$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 333  : 	if (0 == ConvertFileName(c_szFileName, strFileName))

  00047	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00051	51		 push	 ecx
  00052	50		 push	 eax
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEterPackManager::ConvertFileName
  0005a	85 c0		 test	 eax, eax
  0005c	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
  0005f	75 05		 jne	 SHORT $LN2@isExistInP

; 334  : 	{
; 335  : 		return m_RootPack.IsExist(strFileName.c_str());

  00061	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00064	eb 36		 jmp	 SHORT $LN140@isExistInP
$LN2@isExistInP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00066	83 7d ec 0f	 cmp	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 339  : 		DWORD dwFileNameHash = GetCRC32(strFileName.c_str(), strFileName.length());

  0006a	ff 75 e8	 push	 DWORD PTR _strFileName$[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0006d	0f 47 45 d8	 cmova	 eax, DWORD PTR _strFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 339  : 		DWORD dwFileNameHash = GetCRC32(strFileName.c_str(), strFileName.length());

  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00077	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  0007a	8d 55 d8	 lea	 edx, DWORD PTR _strFileName$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  0007d	83 7d ec 0f	 cmp	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 340  : 		CEterFileDict::Item* pkFileItem = m_FileDict.GetItem(dwFileNameHash, strFileName.c_str());

  00081	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00084	0f 47 55 d8	 cmova	 edx, DWORD PTR _strFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 340  : 		CEterFileDict::Item* pkFileItem = m_FileDict.GetItem(dwFileNameHash, strFileName.c_str());

  00088	52		 push	 edx
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?GetItem@CEterFileDict@@QAEPAUItem@1@KPBD@Z ; CEterFileDict::GetItem

; 341  : 
; 342  : 		if (pkFileItem)

  0008f	85 c0		 test	 eax, eax
  00091	74 1c		 je	 SHORT $LN5@isExistInP

; 343  : 			if (pkFileItem->pkPack)

  00093	8b 08		 mov	 ecx, DWORD PTR [eax]
  00095	85 c9		 test	 ecx, ecx
  00097	74 16		 je	 SHORT $LN5@isExistInP
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00099	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
$LN140@isExistInP:

; 434  :         return _Myres > _Small_string_capacity;

  0009c	83 7d ec 0f	 cmp	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  000a0	0f 47 45 d8	 cmova	 eax, DWORD PTR _strFileName$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?IsExist@CEterPack@@QAE_NPBD@Z ; CEterPack::IsExist
  000aa	88 45 d7	 mov	 BYTE PTR $T2[ebp], al
  000ad	eb 04		 jmp	 SHORT $LN9@isExistInP
$LN5@isExistInP:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 347  : 	return false;

  000af	c6 45 d7 00	 mov	 BYTE PTR $T2[ebp], 0
$LN9@isExistInP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000b3	8b 4d ec	 mov	 ecx, DWORD PTR _strFileName$[ebp+20]
  000b6	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000b9	76 28		 jbe	 SHORT $LN120@isExistInP
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	8b 55 d8	 mov	 edx, DWORD PTR _strFileName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000be	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bf	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000c1	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000c7	72 10		 jb	 SHORT $LN131@isExistInP

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000c9	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000cc	83 c1 23	 add	 ecx, 35			; 00000023H
  000cf	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d1	83 c0 fc	 add	 eax, -4			; fffffffcH
  000d4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d7	77 29		 ja	 SHORT $LN142@isExistInP
$LN131@isExistInP:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000d9	51		 push	 ecx
  000da	52		 push	 edx
  000db	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e0	83 c4 08	 add	 esp, 8
$LN120@isExistInP:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 347  : 	return false;

  000e3	8a 45 d7	 mov	 al, BYTE PTR $T2[ebp]

; 348  : }

  000e6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f0	59		 pop	 ecx
  000f1	5e		 pop	 esi
  000f2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f5	33 cd		 xor	 ecx, ebp
  000f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
$LN142@isExistInP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00102	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN139@isExistInP:
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?isExistInPack@CEterPackManager@@QAE_NPBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?isExistInPack@CEterPackManager@@QAE_NPBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?isExistInPack@CEterPackManager@@QAE_NPBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?isExistInPack@CEterPackManager@@QAE_NPBD@Z ENDP	; CEterPackManager::isExistInPack
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?isExist@CEterPackManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?isExist@CEterPackManager@@QAE_NPBD@Z PROC		; CEterPackManager::isExist, COMDAT
; _this$ = ecx

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 352  : 	if (m_iSearchMode == SEARCH_PACK_FIRST)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
  0000a	83 7e 08 01	 cmp	 DWORD PTR [esi+8], 1
  0000e	75 20		 jne	 SHORT $LN2@isExist

; 353  : 	{
; 354  : 		if (isExistInPack(c_szFileName))

  00010	57		 push	 edi
  00011	e8 00 00 00 00	 call	 ?isExistInPack@CEterPackManager@@QAE_NPBD@Z ; CEterPackManager::isExistInPack
  00016	84 c0		 test	 al, al
  00018	75 25		 jne	 SHORT $LN6@isExist

; 355  : 			return true;
; 356  : 
; 357  : 		return _access(c_szFileName, 0) == 0 ? true : false;

  0001a	6a 00		 push	 0
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 __access
  00022	83 c4 08	 add	 esp, 8
  00025	85 c0		 test	 eax, eax
  00027	0f 94 c0	 sete	 al
  0002a	5f		 pop	 edi

; 371  : }

  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN2@isExist:

; 358  : 	}
; 359  : 
; 360  : 	//if(m_bTryRelativePath) {
; 361  : 	//	if (strnicmp(c_szFileName, PATH_ABSOLUTE_YMIRWORK1, strlen(PATH_ABSOLUTE_YMIRWORK1)) == 0 || strnicmp(c_szFileName, PATH_ABSOLUTE_YMIRWORK2, strlen(PATH_ABSOLUTE_YMIRWORK2)) == 0) {
; 362  : 	//		if(access(c_szFileName+strlen(PATH_ABSOLUTE_YMIRWORK1), 0) == 0)
; 363  : 	//			return true;
; 364  : 	//	}
; 365  : 	//}
; 366  : 
; 367  : 	if (_access(c_szFileName, 0) == 0)

  00030	6a 00		 push	 0
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 __access
  00038	83 c4 08	 add	 esp, 8
  0003b	85 c0		 test	 eax, eax
  0003d	75 08		 jne	 SHORT $LN4@isExist
$LN6@isExist:
  0003f	5f		 pop	 edi

; 368  : 		return true;

  00040	b0 01		 mov	 al, 1

; 371  : }

  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN4@isExist:

; 369  : 
; 370  : 	return isExistInPack(c_szFileName);

  00047	57		 push	 edi
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?isExistInPack@CEterPackManager@@QAE_NPBD@Z ; CEterPackManager::isExistInPack
  0004f	5f		 pop	 edi

; 371  : }

  00050	5e		 pop	 esi
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?isExist@CEterPackManager@@QAE_NPBD@Z ENDP		; CEterPackManager::isExist
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?GetFromFile@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
_TEXT	SEGMENT
_rMappedFile$ = 8					; size = 4
_c_szFileName$ = 12					; size = 4
_pData$ = 16						; size = 4
?GetFromFile@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z PROC ; CEterPackManager::GetFromFile, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 307  : #ifndef _DEBUG
; 308  : 	//const char *pcExt = strchr(c_szFileName, '.');
; 309  : 	//if (pcExt &&
; 310  : 	//	strnicmp(c_szFileName, "locale", 6) != 0
; 311  : 	//	)
; 312  : 	//{
; 313  : 	//	return false;
; 314  : 	//}
; 315  : #endif
; 316  : 
; 317  : 	//if(m_bTryRelativePath) {
; 318  : 	//	if (strnicmp(c_szFileName, PATH_ABSOLUTE_YMIRWORK1, strlen(PATH_ABSOLUTE_YMIRWORK1)) == 0 || strnicmp(c_szFileName, PATH_ABSOLUTE_YMIRWORK2, strlen(PATH_ABSOLUTE_YMIRWORK2)) == 0) {
; 319  : 	//		if(rMappedFile.Create(c_szFileName+strlen(PATH_ABSOLUTE_YMIRWORK1), pData, 0, 0))
; 320  : 	//		{
; 321  : 	//			return true;
; 322  : 	//		}
; 323  : 	//	}
; 324  : 	//}
; 325  : 
; 326  : 	return rMappedFile.Create(c_szFileName, pData, 0, 0) ? true : false;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _rMappedFile$[ebp]
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	ff 75 10	 push	 DWORD PTR _pData$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR _c_szFileName$[ebp]
  00010	e8 00 00 00 00	 call	 ?Create@CMappedFile@@QAEHPBDPAPBXHH@Z ; CMappedFile::Create
  00015	85 c0		 test	 eax, eax
  00017	0f 95 c0	 setne	 al

; 327  : }

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
?GetFromFile@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ENDP ; CEterPackManager::GetFromFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
_TEXT	SEGMENT
_lock$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rMappedFile$ = 8					; size = 4
_c_szFileName$ = 12					; size = 4
_pData$ = 16						; size = 4
?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z PROC ; CEterPackManager::GetFromPack, COMDAT
; _this$ = ecx

; 249  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx

; 250  : 	FinderLock lock(m_csFinder);

  00028	8d b7 60 14 00
	00		 lea	 esi, DWORD PTR [edi+5216]

; 232  : 		EnterCriticalSection(p_cs);

  0002e	56		 push	 esi
  0002f	89 75 f0	 mov	 DWORD PTR _lock$[ebp], esi
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 251  : 
; 252  : 	static std::string strFileName;

  00038	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0003e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4HA
  00053	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  00059	0f 8f e6 00 00
	00		 jg	 $LN89@GetFromPac
$LN2@GetFromPac:

; 253  : 
; 254  : 	if (0 == ConvertFileName(c_szFileName, strFileName))

  0005f	68 00 00 00 00	 push	 OFFSET ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00064	ff 75 0c	 push	 DWORD PTR _c_szFileName$[ebp]
  00067	8b cf		 mov	 ecx, edi
  00069	e8 00 00 00 00	 call	 ?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEterPackManager::ConvertFileName
  0006e	85 c0		 test	 eax, eax
  00070	b8 00 00 00 00	 mov	 eax, OFFSET ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00075	75 24		 jne	 SHORT $LN3@GetFromPac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00077	83 3d 14 00 00
	00 0f		 cmp	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 256  : 		return m_RootPack.Get(rMappedFile, strFileName.c_str(), pData);

  0007e	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  00081	ff 75 10	 push	 DWORD PTR _pData$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00084	0f 47 05 00 00
	00 00		 cmova	 eax, DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 256  : 		return m_RootPack.Get(rMappedFile, strFileName.c_str(), pData);

  0008b	50		 push	 eax
  0008c	ff 75 08	 push	 DWORD PTR _rMappedFile$[ebp]
  0008f	e8 00 00 00 00	 call	 ?Get@CEterPack@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPack::Get
  00094	8a d8		 mov	 bl, al
  00096	e9 8d 00 00 00	 jmp	 $LN12@GetFromPac
$LN3@GetFromPac:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0009b	83 3d 14 00 00
	00 0f		 cmp	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 260  : 		DWORD dwFileNameHash = GetCRC32(strFileName.c_str(), strFileName.length());

  000a2	ff 35 10 00 00
	00		 push	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000a8	0f 47 05 00 00
	00 00		 cmova	 eax, DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 260  : 		DWORD dwFileNameHash = GetCRC32(strFileName.c_str(), strFileName.length());

  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  000b5	83 c4 08	 add	 esp, 8
  000b8	8b d8		 mov	 ebx, eax

; 261  : 		SCache* pkCache = __FindCache(dwFileNameHash);

  000ba	8b cf		 mov	 ecx, edi
  000bc	53		 push	 ebx
  000bd	e8 00 00 00 00	 call	 ?__FindCache@CEterPackManager@@IAEPAUSCache@1@K@Z ; CEterPackManager::__FindCache

; 262  : 
; 263  : 		if (pkCache)

  000c2	85 c0		 test	 eax, eax
  000c4	74 11		 je	 SHORT $LN5@GetFromPac

; 264  : 		{
; 265  : 			rMappedFile.Link(pkCache->m_dwBufSize, pkCache->m_abBufData);

  000c6	ff 30		 push	 DWORD PTR [eax]
  000c8	8b 4d 08	 mov	 ecx, DWORD PTR _rMappedFile$[ebp]
  000cb	ff 70 04	 push	 DWORD PTR [eax+4]
  000ce	e8 00 00 00 00	 call	 ?Link@CMappedFile@@QAEXKPBX@Z ; CMappedFile::Link

; 266  : 			return true;

  000d3	b3 01		 mov	 bl, 1
  000d5	eb 51		 jmp	 SHORT $LN12@GetFromPac
$LN5@GetFromPac:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000d7	83 3d 14 00 00
	00 0f		 cmp	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 269  : 		CEterFileDict::Item* pkFileItem = m_FileDict.GetItem(dwFileNameHash, strFileName.c_str());

  000de	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  000e1	b8 00 00 00 00	 mov	 eax, OFFSET ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 426  :         if (_Large_mode_engaged()) {

  000e6	0f 47 05 00 00
	00 00		 cmova	 eax, DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 269  : 		CEterFileDict::Item* pkFileItem = m_FileDict.GetItem(dwFileNameHash, strFileName.c_str());

  000ed	50		 push	 eax
  000ee	53		 push	 ebx
  000ef	e8 00 00 00 00	 call	 ?GetItem@CEterFileDict@@QAEPAUItem@1@KPBD@Z ; CEterFileDict::GetItem
  000f4	8b d0		 mov	 edx, eax

; 270  : 
; 271  : 		if (pkFileItem)

  000f6	85 d2		 test	 edx, edx
  000f8	74 2c		 je	 SHORT $LN7@GetFromPac

; 272  : 			if (pkFileItem->pkPack)

  000fa	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000fc	85 c9		 test	 ecx, ecx
  000fe	74 26		 je	 SHORT $LN7@GetFromPac

; 274  : 				bool r = pkFileItem->pkPack->Get2(rMappedFile, strFileName.c_str(), pkFileItem->pkInfo, pData);

  00100	ff 75 10	 push	 DWORD PTR _pData$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00103	83 3d 14 00 00
	00 0f		 cmp	 DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  0010a	b8 00 00 00 00	 mov	 eax, OFFSET ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 274  : 				bool r = pkFileItem->pkPack->Get2(rMappedFile, strFileName.c_str(), pkFileItem->pkInfo, pData);

  0010f	ff 72 04	 push	 DWORD PTR [edx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00112	0f 47 05 00 00
	00 00		 cmova	 eax, DWORD PTR ?strFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 274  : 				bool r = pkFileItem->pkPack->Get2(rMappedFile, strFileName.c_str(), pkFileItem->pkInfo, pData);

  00119	50		 push	 eax
  0011a	ff 75 08	 push	 DWORD PTR _rMappedFile$[ebp]
  0011d	e8 00 00 00 00	 call	 ?Get2@CEterPack@@QAE_NAAVCMappedFile@@PBDPAUSEterPackIndex@@PAPBX@Z ; CEterPack::Get2

; 275  : 				//pkFileItem->pkPack->ClearDataMemoryMap();
; 276  : 				return r;

  00122	8a d8		 mov	 bl, al
  00124	eb 02		 jmp	 SHORT $LN12@GetFromPac
$LN7@GetFromPac:

; 277  : 			}
; 278  : 	}
; 279  : #ifdef _DEBUG
; 280  : 	TraceError("CANNOT_FIND_PACK_FILE [%s]", strFileName.c_str());
; 281  : #endif
; 282  : 
; 283  : 	return false;

  00126	32 db		 xor	 bl, bl
$LN12@GetFromPac:

; 237  : 		LeaveCriticalSection(p_cs);

  00128	56		 push	 esi
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 277  : 			}
; 278  : 	}
; 279  : #ifdef _DEBUG
; 280  : 	TraceError("CANNOT_FIND_PACK_FILE [%s]", strFileName.c_str());
; 281  : #endif
; 282  : 
; 283  : 	return false;

  0012f	8a c3		 mov	 al, bl

; 284  : }

  00131	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00134	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013b	59		 pop	 ecx
  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi
  0013e	5b		 pop	 ebx
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c2 0c 00	 ret	 12			; 0000000cH
$LN89@GetFromPac:

; 251  : 
; 252  : 	static std::string strFileName;

  00145	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4HA
  0014a	e8 00 00 00 00	 call	 __Init_thread_header
  0014f	83 c4 04	 add	 esp, 4
  00152	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4HA, -1
  00159	0f 85 00 ff ff
	ff		 jne	 $LN2@GetFromPac
  0015f	68 00 00 00 00	 push	 OFFSET ??__FstrFileName@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@YAXXZ ; `CEterPackManager::GetFromPack'::`2'::`dynamic atexit destructor for 'strFileName''
  00164	e8 00 00 00 00	 call	 _atexit
  00169	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z@4HA
  0016e	e8 00 00 00 00	 call	 __Init_thread_footer
  00173	83 c4 08	 add	 esp, 8
  00176	e9 e4 fe ff ff	 jmp	 $LN2@GetFromPac
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR _lock$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1FinderLock@@QAE@XZ	; FinderLock::~FinderLock
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ENDP ; CEterPackManager::GetFromPack
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z
_TEXT	SEGMENT
_rMappedFile$ = 8					; size = 4
_c_szFileName$ = 12					; size = 4
tv163 = 15						; size = 1
_pData$ = 16						; size = 4
?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z PROC ; CEterPackManager::Get, COMDAT
; _this$ = ecx

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 185  : 	const bool isAbsolute = (c_szFileName[1] == ':');

  00006	8b 7d 0c	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  0000e	88 45 0f	 mov	 BYTE PTR tv163[ebp], al

; 186  : 
; 187  : 	switch (m_iSearchMode)

  00011	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00014	83 e8 00	 sub	 eax, 0
  00017	74 35		 je	 SHORT $LN7@Get
  00019	83 e8 01	 sub	 eax, 1
  0001c	75 27		 jne	 SHORT $LN9@Get

; 188  : 	{
; 189  : 		case SEARCH_PACK_FIRST:
; 190  : 		{
; 191  : 			if (GetFromPack(rMappedFile, c_szFileName, pData))

  0001e	8b 5d 10	 mov	 ebx, DWORD PTR _pData$[ebp]
  00021	53		 push	 ebx
  00022	57		 push	 edi
  00023	ff 75 08	 push	 DWORD PTR _rMappedFile$[ebp]
  00026	e8 00 00 00 00	 call	 ?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::GetFromPack
  0002b	84 c0		 test	 al, al
  0002d	75 48		 jne	 SHORT $LN11@Get

; 192  : 			{
; 193  : 				return true;
; 194  : 			}
; 195  : 
; 196  : 			if (!isAbsolute && GetFromFile(rMappedFile, c_szFileName, pData))

  0002f	80 7d 0f 3a	 cmp	 BYTE PTR tv163[ebp], 58	; 0000003aH
  00033	74 10		 je	 SHORT $LN9@Get
  00035	53		 push	 ebx
  00036	57		 push	 edi
  00037	ff 75 08	 push	 DWORD PTR _rMappedFile$[ebp]
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?GetFromFile@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::GetFromFile
  00041	84 c0		 test	 al, al
  00043	75 32		 jne	 SHORT $LN11@Get
$LN9@Get:
  00045	5f		 pop	 edi

; 214  : 			{
; 215  : 				return true;
; 216  : 			}
; 217  : 		}
; 218  : 		break;
; 219  : 	}
; 220  : 
; 221  : 	return false;
; 222  : }

  00046	5e		 pop	 esi
  00047	32 c0		 xor	 al, al
  00049	5b		 pop	 ebx
  0004a	5d		 pop	 ebp
  0004b	c2 0c 00	 ret	 12			; 0000000cH
$LN7@Get:

; 197  : 			{
; 198  : #ifdef _DEBUG
; 199  : 				TraceError("%s", c_szFileName); // only for log. it's not an error.
; 200  : #endif
; 201  : 				return true;
; 202  : 			}
; 203  : 		}
; 204  : 		break;
; 205  : 
; 206  : 		case SEARCH_FILE_FIRST:
; 207  : 		{
; 208  : 			if (GetFromFile(rMappedFile, c_szFileName, pData))

  0004e	8b 5d 10	 mov	 ebx, DWORD PTR _pData$[ebp]
  00051	53		 push	 ebx
  00052	57		 push	 edi
  00053	ff 75 08	 push	 DWORD PTR _rMappedFile$[ebp]
  00056	e8 00 00 00 00	 call	 ?GetFromFile@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::GetFromFile
  0005b	84 c0		 test	 al, al
  0005d	75 18		 jne	 SHORT $LN11@Get

; 209  : 			{
; 210  : 				return true;
; 211  : 			}
; 212  : 
; 213  : 			if (GetFromPack(rMappedFile, c_szFileName, pData))

  0005f	53		 push	 ebx
  00060	57		 push	 edi
  00061	ff 75 08	 push	 DWORD PTR _rMappedFile$[ebp]
  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 ?GetFromPack@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::GetFromPack
  0006b	5f		 pop	 edi
  0006c	84 c0		 test	 al, al

; 214  : 			{
; 215  : 				return true;
; 216  : 			}
; 217  : 		}
; 218  : 		break;
; 219  : 	}
; 220  : 
; 221  : 	return false;
; 222  : }

  0006e	5e		 pop	 esi
  0006f	0f 95 c0	 setne	 al
  00072	5b		 pop	 ebx
  00073	5d		 pop	 ebp
  00074	c2 0c 00	 ret	 12			; 0000000cH
$LN11@Get:
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	b0 01		 mov	 al, 1
  0007b	5b		 pop	 ebx
  0007c	5d		 pop	 ebp
  0007d	c2 0c 00	 ret	 12			; 0000000cH
?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ENDP ; CEterPackManager::Get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?GetSearchMode@CEterPackManager@@QAEHXZ
_TEXT	SEGMENT
?GetSearchMode@CEterPackManager@@QAEHXZ PROC		; CEterPackManager::GetSearchMode, COMDAT
; _this$ = ecx

; 459  : 	return m_iSearchMode;

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 460  : }

  00003	c3		 ret	 0
?GetSearchMode@CEterPackManager@@QAEHXZ ENDP		; CEterPackManager::GetSearchMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?SetSearchMode@CEterPackManager@@QAEX_N@Z
_TEXT	SEGMENT
_bPackFirst$ = 8					; size = 1
?SetSearchMode@CEterPackManager@@QAEX_N@Z PROC		; CEterPackManager::SetSearchMode, COMDAT
; _this$ = ecx

; 453  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 454  : 	m_iSearchMode = bPackFirst ? SEARCH_PACK_FIRST : SEARCH_FILE_FIRST;

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _bPackFirst$[ebp]
  00007	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 455  : }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?SetSearchMode@CEterPackManager@@QAEX_N@Z ENDP		; CEterPackManager::SetSearchMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?LoadStaticCache@CEterPackManager@@QAEXPBD@Z
_TEXT	SEGMENT
$T2 = -396						; size = 8
_f$ = -392						; size = 4
$T3 = -388						; size = 12
tv528 = -376						; size = 4
_c_pvData$ = -372					; size = 4
_dwFileNameHash$ = -368					; size = 4
_kMapFile$ = -364					; size = 324
_strFileName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?LoadStaticCache@CEterPackManager@@QAEXPBD@Z PROC	; CEterPackManager::LoadStaticCache, COMDAT
; _this$ = ecx

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f1		 mov	 esi, ecx

; 96   : 	if (!m_isCacheMode)

  0002f	80 7e 05 00	 cmp	 BYTE PTR [esi+5], 0
  00033	8b 7d 08	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
  00036	0f 84 38 01 00
	00		 je	 $LN123@LoadStatic
  0003c	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  0003f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00046	0f 11 45 d8	 movups	 XMMWORD PTR _strFileName$[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0004a	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00051	c6 45 d8 00	 mov	 BYTE PTR _strFileName$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 100  : 	if (0 == ConvertFileName(c_szFileName, strFileName))

  00055	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005f	50		 push	 eax
  00060	57		 push	 edi
  00061	e8 00 00 00 00	 call	 ?ConvertFileName@CEterPackManager@@IAEHPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEterPackManager::ConvertFileName
  00066	85 c0		 test	 eax, eax
  00068	0f 84 d6 00 00
	00		 je	 $LN10@LoadStatic
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0006e	83 7d ec 0f	 cmp	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00072	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 105  : 	DWORD dwFileNameHash = GetCRC32(strFileName.c_str(), strFileName.length());

  00075	ff 75 e8	 push	 DWORD PTR _strFileName$[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00078	0f 47 45 d8	 cmova	 eax, DWORD PTR _strFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 105  : 	DWORD dwFileNameHash = GetCRC32(strFileName.c_str(), strFileName.length());

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00082	83 c4 08	 add	 esp, 8
  00085	89 85 90 fe ff
	ff		 mov	 DWORD PTR _dwFileNameHash$[ebp], eax

; 106  : 
; 107  : 	boost::unordered_map<DWORD, SCache>::iterator f = m_kMap_dwNameKey_kCache.find(dwFileNameHash);

  0008b	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _dwFileNameHash$[ebp]
  00091	8d 86 48 14 00
	00		 lea	 eax, DWORD PTR [esi+5192]
  00097	89 85 88 fe ff
	ff		 mov	 DWORD PTR tv528[ebp], eax
  0009d	51		 push	 ecx
  0009e	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _f$[ebp]
  000a4	51		 push	 ecx
  000a5	8b c8		 mov	 ecx, eax
  000a7	e8 00 00 00 00	 call	 ?find@?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::find
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  000ac	83 bd 78 fe ff
	ff 00		 cmp	 DWORD PTR _f$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 108  : 	if (m_kMap_dwNameKey_kCache.end() != f)

  000b3	0f 85 8b 00 00
	00		 jne	 $LN10@LoadStatic

; 109  : 		return;
; 110  : 
; 111  : 	CMappedFile kMapFile;

  000b9	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _kMapFile$[ebp]
  000bf	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 112  : 	const void* c_pvData;
; 113  : 	if (!Get(kMapFile, c_szFileName, &c_pvData))

  000c4	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR _c_pvData$[ebp]
  000ca	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ce	50		 push	 eax
  000cf	57		 push	 edi
  000d0	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _kMapFile$[ebp]
  000d6	8b ce		 mov	 ecx, esi
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  000de	84 c0		 test	 al, al
  000e0	74 57		 je	 SHORT $LN11@LoadStatic

; 114  : 		return;
; 115  : 
; 116  : 	SCache kNewCache;
; 117  : 	kNewCache.m_dwBufSize = kMapFile.Size();

  000e2	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _kMapFile$[ebp]
  000e8	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  000ed	8b f8		 mov	 edi, eax

; 118  : 	kNewCache.m_abBufData = new BYTE[kNewCache.m_dwBufSize];

  000ef	57		 push	 edi
  000f0	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000f5	57		 push	 edi

; 119  : 	memcpy(kNewCache.m_abBufData, c_pvData, kNewCache.m_dwBufSize);

  000f6	ff b5 8c fe ff
	ff		 push	 DWORD PTR _c_pvData$[ebp]
  000fc	8b f0		 mov	 esi, eax
  000fe	56		 push	 esi
  000ff	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00104	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _dwFileNameHash$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 119  : 	memcpy(kNewCache.m_abBufData, c_pvData, kNewCache.m_dwBufSize);

  0010a	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  0010d	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR tv528[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00113	89 85 7c fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00119	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0011f	89 b5 80 fe ff
	ff		 mov	 DWORD PTR $T3[ebp+4], esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00125	50		 push	 eax
  00126	50		 push	 eax
  00127	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0012d	89 bd 84 fe ff
	ff		 mov	 DWORD PTR $T3[ebp+8], edi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 226  :         return table_.emplace_unique(

  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 ??$emplace_unique@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@std@@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK$$QAU?$pair@$$CBKUSCache@CEterPackManager@@@5@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> >,unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::emplace_unique<std::pair<unsigned long const ,CEterPackManager::SCache> >
$LN11@LoadStatic:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 121  : }

  00139	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _kMapFile$[ebp]
  0013f	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
$LN10@LoadStatic:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00144	8b 4d ec	 mov	 ecx, DWORD PTR _strFileName$[ebp+20]
  00147	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0014a	76 28		 jbe	 SHORT $LN123@LoadStatic
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0014c	8b 55 d8	 mov	 edx, DWORD PTR _strFileName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0014f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00150	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00152	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00158	72 10		 jb	 SHORT $LN134@LoadStatic

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0015a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0015d	83 c1 23	 add	 ecx, 35			; 00000023H
  00160	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00162	83 c0 fc	 add	 eax, -4			; fffffffcH
  00165	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00168	77 27		 ja	 SHORT $LN144@LoadStatic
$LN134@LoadStatic:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0016a	51		 push	 ecx
  0016b	52		 push	 edx
  0016c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00171	83 c4 08	 add	 esp, 8
$LN123@LoadStatic:
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 121  : }

  00174	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00177	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017e	59		 pop	 ecx
  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00184	33 cd		 xor	 ecx, ebp
  00186	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018b	8b e5		 mov	 esp, ebp
  0018d	5d		 pop	 ebp
  0018e	c2 04 00	 ret	 4
$LN144@LoadStatic:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00191	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN142@LoadStatic:
  00196	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z$1:
  00008	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _kMapFile$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 8a 74 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-396]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadStaticCache@CEterPackManager@@QAEXPBD@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadStaticCache@CEterPackManager@@QAEXPBD@Z ENDP	; CEterPackManager::LoadStaticCache
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?SetRelativePathMode@CEterPackManager@@QAEXXZ
_TEXT	SEGMENT
?SetRelativePathMode@CEterPackManager@@QAEXXZ PROC	; CEterPackManager::SetRelativePathMode, COMDAT
; _this$ = ecx

; 52   : 	m_bTryRelativePath = true;

  00000	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1

; 53   : }

  00004	c3		 ret	 0
?SetRelativePathMode@CEterPackManager@@QAEXXZ ENDP	; CEterPackManager::SetRelativePathMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ?SetCacheMode@CEterPackManager@@QAEXXZ
_TEXT	SEGMENT
?SetCacheMode@CEterPackManager@@QAEXXZ PROC		; CEterPackManager::SetCacheMode, COMDAT
; _this$ = ecx

; 47   : 	m_isCacheMode=true;

  00000	c6 41 05 01	 mov	 BYTE PTR [ecx+5], 1

; 48   : }

  00004	c3		 ret	 0
?SetCacheMode@CEterPackManager@@QAEXXZ ENDP		; CEterPackManager::SetCacheMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ??1CEterPackManager@@UAE@XZ
_TEXT	SEGMENT
??1CEterPackManager@@UAE@XZ PROC			; CEterPackManager::~CEterPackManager, COMDAT
; _this$ = ecx

; 468  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CEterPackManager@@6B@

; 469  : 	__ClearCacheMap();

  0000b	e8 00 00 00 00	 call	 ?__ClearCacheMap@CEterPackManager@@IAEXXZ ; CEterPackManager::__ClearCacheMap
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00010	83 bf 20 14 00
	00 00		 cmp	 DWORD PTR [edi+5152], 0
  00017	74 2a		 je	 SHORT $LN3@CEterPackM

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00019	8b 87 1c 14 00
	00		 mov	 eax, DWORD PTR [edi+5148]

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0001f	8b b7 2c 14 00
	00		 mov	 esi, DWORD PTR [edi+5164]
  00025	8b 34 86	 mov	 esi, DWORD PTR [esi+eax*4]

; 2399 :           return node_ != x.node_;

  00028	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 473  : 	while (i != e)

  0002a	74 17		 je	 SHORT $LN3@CEterPackM
  0002c	0f 1f 40 00	 npad	 4
$LL2@CEterPackM:

; 474  : 	{
; 475  : 		delete i->second;

  00030	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00033	85 c9		 test	 ecx, ecx
  00035	74 06		 je	 SHORT $LN5@CEterPackM
  00037	8b 01		 mov	 eax, DWORD PTR [ecx]
  00039	6a 01		 push	 1
  0003b	ff 10		 call	 DWORD PTR [eax]
$LN5@CEterPackM:
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2388 :           node_ = static_cast<node_pointer>(node_->next_);

  0003d	8b 36		 mov	 esi, DWORD PTR [esi]

; 2399 :           return node_ != x.node_;

  0003f	85 f6		 test	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 473  : 	while (i != e)

  00041	75 ed		 jne	 SHORT $LL2@CEterPackM
$LN3@CEterPackM:

; 476  : 		i++;
; 477  : 	}
; 478  : 	DeleteCriticalSection(&m_csFinder);

  00043	8d 87 60 14 00
	00		 lea	 eax, DWORD PTR [edi+5216]
  00049	50		 push	 eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 479  : }

  00050	8d 8f 48 14 00
	00		 lea	 ecx, DWORD PTR [edi+5192]
  00056	e8 00 00 00 00	 call	 ??1?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::~unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >
  0005b	8d 8f 30 14 00
	00		 lea	 ecx, DWORD PTR [edi+5168]
  00061	e8 00 00 00 00	 call	 ??1?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::~unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
  00066	8d 8f 18 14 00
	00		 lea	 ecx, DWORD PTR [edi+5144]
  0006c	e8 00 00 00 00	 call	 ??1?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::~unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1508 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00071	8b 8f 10 14 00
	00		 mov	 ecx, DWORD PTR [edi+5136]

; 324  :         _Head->_Prev->_Next = nullptr;

  00077	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0007a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00082	85 c0		 test	 eax, eax
  00084	74 13		 je	 SHORT $LN116@CEterPackM
$LL47@CEterPackM:

; 328  :             _Pnext = _Pnode->_Next;

  00086	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00088	6a 0c		 push	 12			; 0000000cH
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00090	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00093	8b c6		 mov	 eax, esi
  00095	85 f6		 test	 esi, esi
  00097	75 ed		 jne	 SHORT $LL47@CEterPackM
$LN116@CEterPackM:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00099	6a 0c		 push	 12			; 0000000cH
  0009b	ff b7 10 14 00
	00		 push	 DWORD PTR [edi+5136]
  000a1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000a6	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 479  : }

  000a9	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  000ac	e8 00 00 00 00	 call	 ??1CEterPack@@UAE@XZ	; CEterPack::~CEterPack
  000b1	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  000b4	e8 00 00 00 00	 call	 ??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 19   : 	{

  000b9	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CSingleton@VCEterPackManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A, 0 ; CSingleton<CEterPackManager>::ms_singleton
  000cb	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 479  : }

  000cc	c3		 ret	 0
??1CEterPackManager@@UAE@XZ ENDP			; CEterPackManager::~CEterPackManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp
;	COMDAT ??0CEterPackManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CEterPackManager@@QAE@XZ PROC			; CEterPackManager::CEterPackManager, COMDAT
; _this$ = ecx

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CEterPackManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00029	89 35 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A, esi ; CSingleton<CEterPackManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 463  : {

  0002f	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEterPackManager@@6B@
  0003f	66 c7 46 04 00
	00		 mov	 WORD PTR [esi+4], 0
  00045	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004c	e8 00 00 00 00	 call	 ??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
  00051	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00054	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00058	e8 00 00 00 00	 call	 ??0CEterPack@@QAE@XZ	; CEterPack::CEterPack
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0005d	6a 0c		 push	 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 463  : {

  0005f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 353  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00063	c7 86 10 14 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5136], 0
  0006d	c7 86 14 14 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5140], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00077	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007c	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 463  : {

  0007f	8d 8e 18 14 00
	00		 lea	 ecx, DWORD PTR [esi+5144]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1844 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00085	89 00		 mov	 DWORD PTR [eax], eax

; 1845 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00087	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1846 :         _Mypair._Myval2._Myhead = _Newhead;

  0008a	89 86 10 14 00
	00		 mov	 DWORD PTR [esi+5136], eax
; File C:\Marty 5.5\Src-Client\Client\EterPack\EterPackManager.cpp

; 463  : {

  00090	e8 00 00 00 00	 call	 ??0?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
  00095	8d 8e 30 14 00
	00		 lea	 ecx, DWORD PTR [esi+5168]
  0009b	e8 00 00 00 00	 call	 ??0?$unordered_map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@Ustringhash@@U?$equal_to@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCEterPack@@@std@@@2@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >::unordered_map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CEterPack *,stringhash,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CEterPack *> > >
  000a0	8d 8e 48 14 00
	00		 lea	 ecx, DWORD PTR [esi+5192]
  000a6	e8 00 00 00 00	 call	 ??0?$unordered_map@KUSCache@CEterPackManager@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCache@CEterPackManager@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >::unordered_map<unsigned long,CEterPackManager::SCache,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterPackManager::SCache> > >

; 464  : 	InitializeCriticalSection(&m_csFinder);

  000ab	8d 86 60 14 00
	00		 lea	 eax, DWORD PTR [esi+5216]
  000b1	50		 push	 eax
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 465  : }

  000b8	8b c6		 mov	 eax, esi
  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c4	59		 pop	 ecx
  000c5	5e		 pop	 esi
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CEterPackManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCEterPackManager@@@@UAE@XZ ; CSingleton<CEterPackManager>::~CSingleton<CEterPackManager>
__unwindfunclet$??0CEterPackManager@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000e	e9 00 00 00 00	 jmp	 ??1CEterFileDict@@QAE@XZ
__unwindfunclet$??0CEterPackManager@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 24	 add	 ecx, 36			; 00000024H
  00019	e9 00 00 00 00	 jmp	 ??1CEterPack@@UAE@XZ	; CEterPack::~CEterPack
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$??0CEterPackManager@@QAE@XZ:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CEterPackManager@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CEterPackManager@@QAE@XZ ENDP			; CEterPackManager::CEterPackManager
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCEterPackManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCEterPackManager@@@@UAEPAXI@Z PROC	; CSingleton<CEterPackManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCEterPackManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A, 0 ; CSingleton<CEterPackManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN8@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCEterPackManager@@@@UAEPAXI@Z ENDP	; CSingleton<CEterPackManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCEterPackManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCEterPackManager@@@@UAE@XZ PROC	; CSingleton<CEterPackManager>::~CSingleton<CEterPackManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCEterPackManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A, 0 ; CSingleton<CEterPackManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCEterPackManager@@@@UAE@XZ ENDP	; CSingleton<CEterPackManager>::~CSingleton<CEterPackManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1CEterFileDict@@QAE@XZ
_TEXT	SEGMENT
??1CEterFileDict@@QAE@XZ PROC				; CEterFileDict::~CEterFileDict, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
??1CEterFileDict@@QAE@XZ ENDP				; CEterFileDict::~CEterFileDict
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >, COMDAT
; _this$ = ecx

; 2124 :     }

  00000	e9 00 00 00 00	 jmp	 ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
??1?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::~unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp
;	COMDAT ??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >, COMDAT
; _this$ = ecx

; 1986 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  00007	6a 0b		 push	 11			; 0000000bH
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1986 :     {

  00009	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 2761 :         functions(H const& hf, P const& eq) : current_(0)

  0000c	c6 06 00	 mov	 BYTE PTR [esi], 0

; 3121 :               bucket_count_(policy::new_bucket_count(num_buckets)), size_(0),

  0000f	e8 00 00 00 00	 call	 ?new_bucket_count@?$prime_policy@I@detail@unordered@boost@@SAII@Z ; boost::unordered::detail::prime_policy<unsigned int>::new_bucket_count
  00014	83 c4 04	 add	 esp, 4
  00017	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1987 :     }

  00021	8b c6		 mov	 eax, esi
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3122 :               mlf_(1.0f), max_load_(0), buckets_()

  00023	c7 46 0c 00 00
	80 3f		 mov	 DWORD PTR [esi+12], 1065353216 ; 3f800000H
  0002a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00031	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\unordered_map.hpp

; 1987 :     }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0?$unordered_multimap@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >::unordered_multimap<unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >, COMDAT
; _this$ = ecx

; 3333 :         ~table() { delete_buckets(); }

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 3345 :           if (buckets_) {

  00003	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00006	85 c9		 test	 ecx, ecx
  00008	74 65		 je	 SHORT $LN7@table

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0000a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 3346 :             node_pointer n = static_cast<node_pointer>(

  0000d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN75@table
  00014	56		 push	 esi
$LL5@table:

; 3357 :               node_pointer next = next_node(n);

  00015	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 14		 push	 20			; 00000014H
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3359 :               n = next;

  00022	8b c6		 mov	 eax, esi
  00024	85 f6		 test	 esi, esi
  00026	75 ed		 jne	 SHORT $LL5@table

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {
; 3350 :               node_pointer next = next_node(n);
; 3351 :               boost::unordered::detail::func::destroy(boost::to_address(n));
; 3352 :               node_allocator_traits::deallocate(node_alloc(), n, 1);
; 3353 :               n = next;
; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00028	5e		 pop	 esi
$LN75@table:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 723  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00029	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002c	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+4]
  00033	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00036	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003c	72 12		 jb	 SHORT $LN95@table

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00041	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00044	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00046	83 c0 fc	 add	 eax, -4			; fffffffcH
  00049	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004c	77 23		 ja	 SHORT $LN92@table

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004e	8b c2		 mov	 eax, edx
$LN95@table:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00050	51		 push	 ecx
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00057	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\boost\unordered\detail\implementation.hpp

; 3363 :             buckets_ = bucket_pointer();

  0005a	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 3364 :             max_load_ = 0;

  00061	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3365 :             size_ = 0;

  00068	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN7@table:
  0006f	5f		 pop	 edi

; 3333 :         ~table() { delete_buckets(); }

  00070	c3		 ret	 0
$LN92@table:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00071	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN114@table:
  00076	cc		 int	 3
??1?$table@U?$map@V?$allocator@U?$pair@$$CBKUItem@CEterFileDict@@@std@@@std@@KUItem@CEterFileDict@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::~table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,CEterFileDict::Item> >,unsigned long,CEterFileDict::Item,boost::hash<unsigned long>,std::equal_to<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\boost\container_hash\hash.hpp
;	COMDAT ??$hash_value@K@boost@@YAIK@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$hash_value@K@boost@@YAIK@Z PROC			; boost::hash_value<unsigned long>, COMDAT

; 359  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 360  :         return static_cast<std::size_t>(v);

  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]

; 361  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$hash_value@K@boost@@YAIK@Z ENDP			; boost::hash_value<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
$T1 = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 847  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 848  :         auto& _My_data = _Mypair._Myval2;
; 849  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 850  : 
; 851  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 852  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 853  :         } else {
; 854  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 855  :         }
; 856  : 
; 857  :         if (_Count > max_size()) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00010	0f 87 95 00 00
	00		 ja	 $LN40@Construct

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00016	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00019	77 21		 ja	 SHORT $LN3@Construct
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0001b	56		 push	 esi
  0001c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0001f	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00023	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
  00036	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	57		 push	 edi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003d	8b fe		 mov	 edi, esi
  0003f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00042	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 12		 jbe	 SHORT $LN9@Construct

; 2944 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	eb 26		 jmp	 SHORT $LN38@Construct
$LN9@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005c	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00061	3b f8		 cmp	 edi, eax
  00063	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00066	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00069	85 c0		 test	 eax, eax
  0006b	74 18		 je	 SHORT $LN37@Construct
$LN23@Construct:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0006d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00072	72 08		 jb	 SHORT $LN24@Construct

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007a	eb 06		 jmp	 SHORT $LN38@Construct
$LN24@Construct:

; 136  :         return ::operator new(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN38@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00082	83 c4 04	 add	 esp, 4
$LN37@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	56		 push	 esi
  00086	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00089	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0008d	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0008f	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  00092	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00095	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0009a	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a0	5f		 pop	 edi
  000a1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
  000a5	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  000a6	5b		 pop	 ebx
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@Construct:

; 858  :             _Xlen_string(); // result too long

  000ab	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN36@Construct:
  000b0	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h
;	COMDAT ?NoPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -1036				; size = 4
___$ReturnUdt$GSCopy$1$ = -1032				; size = 4
_szPath$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?NoPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::NoPath, COMDAT

; 347  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 04 00
	00		 sub	 esp, 1040		; 00000410H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 348  : 	char szPath[1024];
; 349  : 	szPath[0] = '\0';
; 350  : 
; 351  : 	size_t nLength = str.length();

  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00019	53		 push	 ebx
  0001a	89 85 f8 fb ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  00020	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]
  00023	89 85 f4 fb ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], eax
  00029	c6 85 fc fb ff
	ff 00		 mov	 BYTE PTR _szPath$[ebp], 0

; 352  : 
; 353  : 	if (nLength > 0)

  00030	85 db		 test	 ebx, ebx
  00032	74 59		 je	 SHORT $LN3@NoPath
  00034	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00035	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]

; 425  :         const value_type* _Result = _Bx._Buf;

  00038	8b d1		 mov	 edx, ecx

; 434  :         return _Myres > _Small_string_capacity;

  0003a	83 fe 0f	 cmp	 esi, 15			; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0003d	76 02		 jbe	 SHORT $LN101@NoPath

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0003f	8b 11		 mov	 edx, DWORD PTR [ecx]
$LN101@NoPath:
  00041	57		 push	 edi

; 428  :         }
; 429  : 
; 430  :         return _Result;

  00042	8d bd fc fb ff
	ff		 lea	 edi, DWORD PTR _szPath$[ebp]
  00048	2b fa		 sub	 edi, edx
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL15@NoPath:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 355  : 		strcpy(szPath, str.c_str());

  00050	8a 02		 mov	 al, BYTE PTR [edx]
  00052	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  00055	88 44 17 ff	 mov	 BYTE PTR [edi+edx-1], al
  00059	84 c0		 test	 al, al
  0005b	75 f3		 jne	 SHORT $LL15@NoPath

; 356  : 
; 357  : 		for (size_t i = nLength - 1; i > 0; i--)

  0005d	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00060	5f		 pop	 edi
  00061	85 c0		 test	 eax, eax
  00063	74 27		 je	 SHORT $LN120@NoPath
$LL4@NoPath:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  00065	8b d1		 mov	 edx, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00067	83 fe 0f	 cmp	 esi, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0006a	76 02		 jbe	 SHORT $LN103@NoPath

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0006c	8b 11		 mov	 edx, DWORD PTR [ecx]
$LN103@NoPath:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 359  : 			if (str[i] == '/' || str[i] == '\\')

  0006e	80 3c 02 2f	 cmp	 BYTE PTR [edx+eax], 47	; 0000002fH
  00072	74 65		 je	 SHORT $LN96@NoPath
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  00074	8b d1		 mov	 edx, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00076	83 fe 0f	 cmp	 esi, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00079	76 02		 jbe	 SHORT $LN102@NoPath

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0007b	8b 11		 mov	 edx, DWORD PTR [ecx]
$LN102@NoPath:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 359  : 			if (str[i] == '/' || str[i] == '\\')

  0007d	80 3c 02 5c	 cmp	 BYTE PTR [edx+eax], 92	; 0000005cH
  00081	74 56		 je	 SHORT $LN96@NoPath

; 366  : 			}
; 367  : 
; 368  : 			if (0 == i)

  00083	85 c0		 test	 eax, eax
  00085	74 05		 je	 SHORT $LN120@NoPath

; 356  : 
; 357  : 		for (size_t i = nLength - 1; i > 0; i--)

  00087	83 e8 01	 sub	 eax, 1
  0008a	75 d9		 jne	 SHORT $LL4@NoPath
$LN120@NoPath:
  0008c	5e		 pop	 esi
$LN3@NoPath:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0008d	8b 9d f8 fb ff
	ff		 mov	 ebx, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00093	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$[ebp]
  00099	0f 57 c0	 xorps	 xmm0, xmm0
  0009c	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0009f	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000a2	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000a9	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
$LL105@NoPath:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  000b0	8a 01		 mov	 al, BYTE PTR [ecx]
  000b2	41		 inc	 ecx
  000b3	84 c0		 test	 al, al
  000b5	75 f9		 jne	 SHORT $LL105@NoPath
  000b7	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000b9	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  000bf	51		 push	 ecx
  000c0	50		 push	 eax
  000c1	8b cb		 mov	 ecx, ebx
  000c3	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 374  : }

  000c8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cb	8b c3		 mov	 eax, ebx
  000cd	33 cd		 xor	 ecx, ebp
  000cf	5b		 pop	 ebx
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
$LN96@NoPath:

; 360  : 			{
; 361  : 				int k = 0;
; 362  : 				for (size_t j = i + 1; j < nLength; j++, k++)

  000d9	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  000dc	33 f6		 xor	 esi, esi
  000de	3b d3		 cmp	 edx, ebx
  000e0	73 24		 jae	 SHORT $LN86@NoPath
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 417  :         if (_Large_mode_engaged()) {

  000e2	8b f3		 mov	 esi, ebx
  000e4	2b f2		 sub	 esi, edx

; 434  :         return _Myres > _Small_string_capacity;

  000e6	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  000ea	56		 push	 esi
  000eb	76 06		 jbe	 SHORT $LN85@NoPath

; 434  :         return _Myres > _Small_string_capacity;

  000ed	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ef	03 c2		 add	 eax, edx
  000f1	eb 03		 jmp	 SHORT $LN122@NoPath
$LN85@NoPath:
  000f3	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
$LN122@NoPath:
; File C:\Marty 5.5\Src-Client\Client\eterBase\filename.h

; 364  : 				szPath[k] = '\0';

  000f6	50		 push	 eax
  000f7	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 _memcpy
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN86@NoPath:
  00106	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  0010c	73 0d		 jae	 SHORT $LN16@NoPath
  0010e	c6 84 35 fc fb
	ff ff 00	 mov	 BYTE PTR _szPath$[ebp+esi], 0

; 365  : 				break;

  00116	e9 71 ff ff ff	 jmp	 $LN120@NoPath
$LN16@NoPath:

; 364  : 				szPath[k] = '\0';

  0011b	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN121@NoPath:
  00120	cc		 int	 3
?NoPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::NoPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
$T2 = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1592 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1593 :         // assign [_Ptr, _Ptr + _Count)
; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 416  :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 434  :         return _Myres > _Small_string_capacity;

  00018	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0001b	76 02		 jbe	 SHORT $LN5@assign

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 1609 :             },
; 1610 :             _Ptr);
; 1611 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 2962 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 c7 00 00
	00		 ja	 $LN87@assign

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 12		 jbe	 SHORT $LN23@assign

; 2944 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	eb 45		 jmp	 SHORT $LN85@assign
$LN23@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00069	8b d1		 mov	 edx, ecx
  0006b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00070	d1 ea		 shr	 edx, 1
  00072	2b c2		 sub	 eax, edx
  00074	3b c8		 cmp	 ecx, eax
  00076	76 12		 jbe	 SHORT $LN24@assign

; 2948 :             return _Max;

  00078	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0007d	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00088	eb 24		 jmp	 SHORT $LN85@assign
$LN24@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0008a	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0008d	3b f8		 cmp	 edi, eax
  0008f	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00092	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00095	85 c0		 test	 eax, eax
  00097	74 18		 je	 SHORT $LN84@assign
$LN37@assign:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00099	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0009e	72 08		 jb	 SHORT $LN38@assign

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a6	eb 06		 jmp	 SHORT $LN85@assign
$LN38@assign:

; 136  :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN85@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000ae	83 c4 04	 add	 esp, 4
$LN84@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b1	53		 push	 ebx
  000b2	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000b5	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b8	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000b9	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  000bc	89 7e 14	 mov	 DWORD PTR [esi+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000c4	8b 7d 0c	 mov	 edi, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000ca	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000cd	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000d1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000d4	76 29		 jbe	 SHORT $LN16@assign

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d6	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000db	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e1	72 12		 jb	 SHORT $LN66@assign

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000e3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000e6	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e9	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000eb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ee	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f1	77 19		 ja	 SHORT $LN63@assign

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000f3	8b c2		 mov	 eax, edx
$LN66@assign:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f5	51		 push	 ecx
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000fc	83 c4 08	 add	 esp, 8
$LN16@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1604 :         return _Reallocate_for(

  000ff	89 3e		 mov	 DWORD PTR [esi], edi

; 1609 :             },
; 1610 :             _Ptr);
; 1611 :     }

  00101	8b c6		 mov	 eax, esi
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN63@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN87@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  00111	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN82@assign:
  00116	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 693  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000d	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00010	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00017	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 434  :         return _Myres > _Small_string_capacity;

  0001e	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00022	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  00025	76 05		 jbe	 SHORT $LN17@basic_stri

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00027	8b 00		 mov	 eax, DWORD PTR [eax]
  00029	89 45 08	 mov	 DWORD PTR __Right$[ebp], eax
$LN17@basic_stri:

; 857  :         if (_Count > max_size()) {

  0002c	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00032	0f 87 8d 00 00
	00		 ja	 $LN63@basic_stri

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00038	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  0003b	77 18		 ja	 SHORT $LN25@basic_stri

; 866  :             _My_data._Mysize = _Count;

  0003d	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00040	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00047	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  0004a	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  0004f	5f		 pop	 edi
  00050	5b		 pop	 ebx
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN25@basic_stri:
  00055	56		 push	 esi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00056	8b f3		 mov	 esi, ebx
  00058	83 ce 0f	 or	 esi, 15			; 0000000fH
  0005b	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00061	76 12		 jbe	 SHORT $LN31@basic_stri

; 2944 :             return _Max;

  00063	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00068	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00073	eb 2a		 jmp	 SHORT $LN61@basic_stri
$LN31@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00075	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0007a	3b f0		 cmp	 esi, eax
  0007c	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0007f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00082	85 c0		 test	 eax, eax
  00084	75 04		 jne	 SHORT $LN45@basic_stri

; 228  :         return nullptr;

  00086	33 c9		 xor	 ecx, ecx
  00088	eb 1a		 jmp	 SHORT $LN44@basic_stri
$LN45@basic_stri:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0008a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0008f	72 08		 jb	 SHORT $LN46@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00097	eb 06		 jmp	 SHORT $LN61@basic_stri
$LN46@basic_stri:

; 136  :         return ::operator new(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN61@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0009f	8b c8		 mov	 ecx, eax
  000a1	83 c4 04	 add	 esp, 4
$LN44@basic_stri:

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000a4	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000a7	89 0f		 mov	 DWORD PTR [edi], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax
  000aa	ff 75 08	 push	 DWORD PTR __Right$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  000ad	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b0	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 892  :         _My_data._Myres  = _New_capacity;

  000b1	89 77 14	 mov	 DWORD PTR [edi+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b4	e8 00 00 00 00	 call	 _memcpy
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  000bc	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  000bf	5f		 pop	 edi
  000c0	5b		 pop	 ebx
  000c1	5d		 pop	 ebp
  000c2	c2 04 00	 ret	 4
$LN63@basic_stri:

; 858  :             _Xlen_string(); // result too long

  000c5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN60@basic_stri:
  000ca	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
