; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\scriptLib\Distribute\PythonLauncher.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_nCurTraceN@@3HA				; g_nCurTraceN
_BSS	SEGMENT
?g_nCurTraceN@@3HA DD 01H DUP (?)			; g_nCurTraceN
_BSS	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
PUBLIC	??1?$CSingleton@VCPythonLauncher@@@@UAE@XZ	; CSingleton<CPythonLauncher>::~CSingleton<CPythonLauncher>
PUBLIC	??_G?$CSingleton@VCPythonLauncher@@@@UAEPAXI@Z	; CSingleton<CPythonLauncher>::`scalar deleting destructor'
PUBLIC	??0CPythonLauncher@@QAE@XZ			; CPythonLauncher::CPythonLauncher
PUBLIC	??1CPythonLauncher@@UAE@XZ			; CPythonLauncher::~CPythonLauncher
PUBLIC	?Clear@CPythonLauncher@@QAEXXZ			; CPythonLauncher::Clear
PUBLIC	?Create@CPythonLauncher@@QAE_NPBD@Z		; CPythonLauncher::Create
PUBLIC	?SetTraceFunc@CPythonLauncher@@QAEXP6AHPAU_object@@PAU_frame@@H0@Z@Z ; CPythonLauncher::SetTraceFunc
PUBLIC	?RunLine@CPythonLauncher@@QAE_NPBD@Z		; CPythonLauncher::RunLine
PUBLIC	?RunFile@CPythonLauncher@@QAE_NPBD@Z		; CPythonLauncher::RunFile
PUBLIC	?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z ; CPythonLauncher::RunMemoryTextFile
PUBLIC	?RunCompiledFile@CPythonLauncher@@QAE_NPBD@Z	; CPythonLauncher::RunCompiledFile
PUBLIC	?GetError@CPythonLauncher@@QAEPBDXZ		; CPythonLauncher::GetError
PUBLIC	??_GCPythonLauncher@@UAEPAXI@Z			; CPythonLauncher::`scalar deleting destructor'
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?Traceback@@YAXXZ				; Traceback
PUBLIC	?TraceFunc@@YAHPAU_object@@PAU_frame@@H0@Z	; TraceFunc
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A ; CSingleton<CPythonLauncher>::ms_singleton
PUBLIC	??_7?$CSingleton@VCPythonLauncher@@@@6B@	; CSingleton<CPythonLauncher>::`vftable'
PUBLIC	??_7CPythonLauncher@@6B@			; CPythonLauncher::`vftable'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CSingleton@VCPythonLauncher@@@@6B@	; CSingleton<CPythonLauncher>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CSingleton@VCPythonLauncher@@@@@8	; CSingleton<CPythonLauncher> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCPythonLauncher@@@@8		; CSingleton<CPythonLauncher>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCPythonLauncher@@@@8		; CSingleton<CPythonLauncher>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCPythonLauncher@@@@8 ; CSingleton<CPythonLauncher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	?g_stTraceBuffer@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; g_stTraceBuffer
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_07KAJBENLI@Error?3?5@			; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6@			; `string'
PUBLIC	??_C@_0BA@LBJCHJMM@Traceback?3?6?6?$CFs?6@	; `string'
PUBLIC	??_C@_0CA@HECLBDLP@Call?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5in?5?$CFs@ ; `string'
PUBLIC	??_C@_0CF@NOKLAJHH@Exception?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5@ ; `string'
PUBLIC	??_C@_08EMKMIFM@__main__@			; `string'
PUBLIC	??_C@_0M@EILMOIBE@__builtin__@			; `string'
PUBLIC	??_C@_04HCDDPBNL@TRUE@				; `string'
PUBLIC	??_C@_05MAJJAKPI@FALSE@				; `string'
PUBLIC	??_C@_0N@MNFFDJII@__builtins__@			; `string'
PUBLIC	??_C@_0BA@FOEJKCPF@import?5__main__@		; `string'
PUBLIC	??_C@_0L@GOKNMPOF@import?5sys@			; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file@ ; `string'
PUBLIC	??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file@ ; `string'
PUBLIC	??_R4CPythonLauncher@@6B@			; CPythonLauncher::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPythonLauncher@@@8			; CPythonLauncher `RTTI Type Descriptor'
PUBLIC	??_R3CPythonLauncher@@8				; CPythonLauncher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPythonLauncher@@8				; CPythonLauncher::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPythonLauncher@@8		; CPythonLauncher::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?LogBoxf@@YAXPBDZZ:PROC				; LogBoxf
EXTRN	__imp__PyString_AsString:PROC
EXTRN	__imp__PyDict_SetItemString:PROC
EXTRN	__imp__PyModule_GetDict:PROC
EXTRN	__imp__PyErr_SetString:PROC
EXTRN	__imp__PyErr_Clear:PROC
EXTRN	__imp__PyErr_Fetch:PROC
EXTRN	__imp__PyModule_AddIntConstant:PROC
EXTRN	__imp__Py_SetProgramName:PROC
EXTRN	__imp__Py_Initialize:PROC
EXTRN	__imp__Py_Finalize:PROC
EXTRN	__imp__PyRun_StringFlags:PROC
EXTRN	__imp__Py_CompileStringFlags:PROC
EXTRN	__imp__PyEval_SetTrace:PROC
EXTRN	__imp__Py_FlushLine:PROC
EXTRN	__imp__PyImport_GetMagicNumber:PROC
EXTRN	__imp__PyImport_AddModule:PROC
EXTRN	__imp__PyImport_ImportModule:PROC
EXTRN	__imp__PyObject_AsCharBuffer:PROC
EXTRN	__imp__PyCode_Addr2Line:PROC
EXTRN	__imp__PyEval_EvalCode:PROC
EXTRN	?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z:PROC ; PyTuple_GetObject
EXTRN	??_E?$CSingleton@VCPythonLauncher@@@@UAEPAXI@Z:PROC ; CSingleton<CPythonLauncher>::`vector deleting destructor'
EXTRN	??_ECPythonLauncher@@UAEPAXI@Z:PROC		; CPythonLauncher::`vector deleting destructor'
EXTRN	?_PyMarshal_ReadLastObjectFromFile@@YAPAU_object@@PAU_iobuf@@@Z:PROC ; _PyMarshal_ReadLastObjectFromFile
EXTRN	?_PyMarshal_ReadLongFromFile@@YAJPAU_iobuf@@@Z:PROC ; _PyMarshal_ReadLongFromFile
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp__Py_OptimizeFlag:DWORD
EXTRN	__imp__PyExc_RuntimeError:DWORD
EXTRN	__imp__PyCode_Type:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A DD 01H DUP (?) ; CSingleton<CPythonLauncher>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?g_stTraceBuffer@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 03000H DUP (?) ; g_stTraceBuffer
_BSS	ENDS
CRT$XCU	SEGMENT
?g_stTraceBuffer$initializer$@@3P6AXXZA DD FLAT:??__Eg_stTraceBuffer@@YAXXZ ; g_stTraceBuffer$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CPythonLauncher@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPythonLauncher@@8 DD FLAT:??_R0?AVCPythonLauncher@@@8 ; CPythonLauncher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPythonLauncher@@8
rdata$r	ENDS
;	COMDAT ??_R2CPythonLauncher@@8
rdata$r	SEGMENT
??_R2CPythonLauncher@@8 DD FLAT:??_R1A@?0A@EA@CPythonLauncher@@8 ; CPythonLauncher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonLauncher@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CPythonLauncher@@8
rdata$r	SEGMENT
??_R3CPythonLauncher@@8 DD 00H				; CPythonLauncher::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPythonLauncher@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPythonLauncher@@@8
data$rs	SEGMENT
??_R0?AVCPythonLauncher@@@8 DD FLAT:??_7type_info@@6B@	; CPythonLauncher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPythonLauncher@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CPythonLauncher@@6B@
rdata$r	SEGMENT
??_R4CPythonLauncher@@6B@ DD 00H			; CPythonLauncher::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPythonLauncher@@@8
	DD	FLAT:??_R3CPythonLauncher@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file@
CONST	SEGMENT
??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file@ DB 'Bad code objec'
	DB	't in .pyc file', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file@
CONST	SEGMENT
??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file@ DB 'Bad magic num'
	DB	'ber in .pyc file', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GOKNMPOF@import?5sys@
CONST	SEGMENT
??_C@_0L@GOKNMPOF@import?5sys@ DB 'import sys', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOEJKCPF@import?5__main__@
CONST	SEGMENT
??_C@_0BA@FOEJKCPF@import?5__main__@ DB 'import __main__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNFFDJII@__builtins__@
CONST	SEGMENT
??_C@_0N@MNFFDJII@__builtins__@ DB '__builtins__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE@
CONST	SEGMENT
??_C@_05MAJJAKPI@FALSE@ DB 'FALSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCDDPBNL@TRUE@
CONST	SEGMENT
??_C@_04HCDDPBNL@TRUE@ DB 'TRUE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EILMOIBE@__builtin__@
CONST	SEGMENT
??_C@_0M@EILMOIBE@__builtin__@ DB '__builtin__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMKMIFM@__main__@
CONST	SEGMENT
??_C@_08EMKMIFM@__main__@ DB '__main__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NOKLAJHH@Exception?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5@
CONST	SEGMENT
??_C@_0CF@NOKLAJHH@Exception?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5@ DB 'E'
	DB	'xception: File "%s", line %d, in %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HECLBDLP@Call?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5in?5?$CFs@
CONST	SEGMENT
??_C@_0CA@HECLBDLP@Call?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5in?5?$CFs@ DB 'C'
	DB	'all: File "%s", line %d, in %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LBJCHJMM@Traceback?3?6?6?$CFs?6@
CONST	SEGMENT
??_C@_0BA@LBJCHJMM@Traceback?3?6?6?$CFs?6@ DB 'Traceback:', 0aH, 0aH, '%s'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KAJBENLI@Error?3?5@
CONST	SEGMENT
??_C@_07KAJBENLI@Error?3?5@ DB 'Error: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCPythonLauncher@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCPythonLauncher@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonLauncher@@@@@8 ; CSingleton<CPythonLauncher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonLauncher@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCPythonLauncher@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCPythonLauncher@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonLauncher@@@@8 ; CSingleton<CPythonLauncher>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCPythonLauncher@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCPythonLauncher@@@@8 DD 00H		; CSingleton<CPythonLauncher>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCPythonLauncher@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCPythonLauncher@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCPythonLauncher@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CPythonLauncher> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCPythonLauncher@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CSingleton@VCPythonLauncher@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCPythonLauncher@@@@6B@ DD 00H	; CSingleton<CPythonLauncher>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCPythonLauncher@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCPythonLauncher@@@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7CPythonLauncher@@6B@
CONST	SEGMENT
??_7CPythonLauncher@@6B@ DD FLAT:??_R4CPythonLauncher@@6B@ ; CPythonLauncher::`vftable'
	DD	FLAT:??_ECPythonLauncher@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCPythonLauncher@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCPythonLauncher@@@@6B@ DD FLAT:??_R4?$CSingleton@VCPythonLauncher@@@@6B@ ; CSingleton<CPythonLauncher>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCPythonLauncher@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Traceback@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Traceback@@YAXXZ$0
__ehfuncinfo$?Traceback@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Traceback@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z$0
__ehfuncinfo$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RunFile@CPythonLauncher@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunFile@CPythonLauncher@@QAE_NPBD@Z$0
__ehfuncinfo$?RunFile@CPythonLauncher@@QAE_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RunFile@CPythonLauncher@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?TraceFunc@@YAHPAU_object@@PAU_frame@@H0@Z
_TEXT	SEGMENT
_exc_str$1 = -152					; size = 4
_len$2 = -148						; size = 4
_exc_traceback$3 = -144					; size = 4
_exc_value$4 = -140					; size = 4
_exc_type$5 = -136					; size = 4
_szTraceBuffer$ = -132					; size = 128
__$ArrayPad$ = -4					; size = 4
_obj$ = 8						; size = 4
_f$ = 12						; size = 4
_what$ = 16						; size = 4
_arg$ = 20						; size = 4
?TraceFunc@@YAHPAU_object@@PAU_frame@@H0@Z PROC		; TraceFunc, COMDAT

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 58   : 	const char * funcname;
; 59   : 	char szTraceBuffer[128];
; 60   : 
; 61   : 	switch (what)

  00013	8b 45 10	 mov	 eax, DWORD PTR _what$[ebp]
  00016	56		 push	 esi
  00017	8b 75 14	 mov	 esi, DWORD PTR _arg$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 0c	 mov	 edi, DWORD PTR _f$[ebp]
  0001e	83 e8 00	 sub	 eax, 0
  00021	0f 84 b9 00 00
	00		 je	 $LN4@TraceFunc
  00027	83 e8 01	 sub	 eax, 1
  0002a	74 2e		 je	 SHORT $LN9@TraceFunc
  0002c	83 e8 02	 sub	 eax, 2
  0002f	0f 85 30 01 00
	00		 jne	 $LN18@TraceFunc

; 73   : 					  PyString_AsString(f->f_code->co_filename),
; 74   : 					  f->f_lineno,
; 75   : 					  funcname);
; 76   : 
; 77   : 			g_stTraceBuffer[g_nCurTraceN++]=szTraceBuffer;
; 78   : 			break;
; 79   : 
; 80   : 		case PyTrace_RETURN:
; 81   : 			if (g_nCurTraceN > 0)

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nCurTraceN@@3HA ; g_nCurTraceN
  0003a	85 c0		 test	 eax, eax
  0003c	0f 8e 23 01 00
	00		 jle	 $LN18@TraceFunc

; 82   : 				--g_nCurTraceN;

  00042	48		 dec	 eax
  00043	5f		 pop	 edi
  00044	a3 00 00 00 00	 mov	 DWORD PTR ?g_nCurTraceN@@3HA, eax ; g_nCurTraceN

; 105  : 
; 106  : 			break;
; 107  : 	}
; 108  : 	return 0;
; 109  : }

  00049	33 c0		 xor	 eax, eax
  0004b	5e		 pop	 esi
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004f	33 cd		 xor	 ecx, ebp
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN9@TraceFunc:

; 83   : 			break;
; 84   : 
; 85   : 		case PyTrace_EXCEPTION:
; 86   : 			if (g_nCurTraceN >= 512)

  0005a	81 3d 00 00 00
	00 00 02 00 00	 cmp	 DWORD PTR ?g_nCurTraceN@@3HA, 512 ; g_nCurTraceN, 00000200H
  00064	0f 8d fb 00 00
	00		 jge	 $LN18@TraceFunc

; 87   : 				return 0;
; 88   : 
; 89   : 			PyObject * exc_type, * exc_value, * exc_traceback;
; 90   : 
; 91   : 			PyTuple_GetObject(arg, 0, &exc_type);

  0006a	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _exc_type$5[ebp]
  00070	50		 push	 eax
  00071	6a 00		 push	 0
  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 ?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z ; PyTuple_GetObject

; 92   : 			PyTuple_GetObject(arg, 1, &exc_value);

  00079	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _exc_value$4[ebp]
  0007f	50		 push	 eax
  00080	6a 01		 push	 1
  00082	56		 push	 esi
  00083	e8 00 00 00 00	 call	 ?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z ; PyTuple_GetObject

; 93   : 			PyTuple_GetObject(arg, 2, &exc_traceback);

  00088	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _exc_traceback$3[ebp]
  0008e	50		 push	 eax
  0008f	6a 02		 push	 2
  00091	56		 push	 esi
  00092	e8 00 00 00 00	 call	 ?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z ; PyTuple_GetObject

; 94   : 
; 95   : 			int len;
; 96   : 			const char * exc_str;
; 97   : 			PyObject_AsCharBuffer(exc_type, &exc_str, &len);

  00097	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _len$2[ebp]
  0009d	50		 push	 eax
  0009e	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _exc_str$1[ebp]
  000a4	50		 push	 eax
  000a5	ff b5 78 ff ff
	ff		 push	 DWORD PTR _exc_type$5[ebp]
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyObject_AsCharBuffer

; 98   : 
; 99   : 			_snprintf(szTraceBuffer, sizeof(szTraceBuffer), "Exception: File \"%s\", line %d, in %s",

  000b1	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  000b4	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  000b7	83 c0 14	 add	 eax, 20			; 00000014H
  000ba	50		 push	 eax
  000bb	ff 77 40	 push	 DWORD PTR [edi+64]
  000be	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  000c1	83 c0 14	 add	 eax, 20			; 00000014H
  000c4	50		 push	 eax
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NOKLAJHH@Exception?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5@
  000ca	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szTraceBuffer$[ebp]
  000d0	68 80 00 00 00	 push	 128			; 00000080H
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 __snprintf
  000db	83 c4 48	 add	 esp, 72			; 00000048H

; 100  : 					  PyString_AS_STRING(f->f_code->co_filename),
; 101  : 					  f->f_lineno,
; 102  : 					  PyString_AS_STRING(f->f_code->co_name));
; 103  : 
; 104  : 			g_stTraceBuffer[g_nCurTraceN++]=szTraceBuffer;

  000de	eb 62		 jmp	 SHORT $LN27@TraceFunc
$LN4@TraceFunc:

; 62   : 	{
; 63   : 		case PyTrace_CALL:
; 64   : 			if (g_nCurTraceN >= 512)

  000e0	81 3d 00 00 00
	00 00 02 00 00	 cmp	 DWORD PTR ?g_nCurTraceN@@3HA, 512 ; g_nCurTraceN, 00000200H
  000ea	7d 79		 jge	 SHORT $LN18@TraceFunc

; 65   : 				return 0;
; 66   : 
; 67   : 			if (Py_OptimizeFlag)

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__Py_OptimizeFlag
  000f1	83 38 00	 cmp	 DWORD PTR [eax], 0
  000f4	74 12		 je	 SHORT $LN13@TraceFunc

; 68   : 				f->f_lineno = PyCode_Addr2Line(f->f_code, f->f_lasti);

  000f6	ff 77 3c	 push	 DWORD PTR [edi+60]
  000f9	ff 77 10	 push	 DWORD PTR [edi+16]
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyCode_Addr2Line
  00102	83 c4 08	 add	 esp, 8
  00105	89 47 40	 mov	 DWORD PTR [edi+64], eax
$LN13@TraceFunc:

; 69   : 
; 70   : 			funcname = PyString_AsString(f->f_code->co_name);

  00108	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0010b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__PyString_AsString
  00111	ff 70 34	 push	 DWORD PTR [eax+52]
  00114	ff d6		 call	 esi
  00116	83 c4 04	 add	 esp, 4

; 71   : 
; 72   : 			_snprintf(szTraceBuffer, sizeof(szTraceBuffer), "Call: File \"%s\", line %d, in %s",

  00119	50		 push	 eax
  0011a	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0011d	ff 77 40	 push	 DWORD PTR [edi+64]
  00120	ff 70 30	 push	 DWORD PTR [eax+48]
  00123	ff d6		 call	 esi
  00125	83 c4 04	 add	 esp, 4
  00128	50		 push	 eax
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HECLBDLP@Call?3?5File?5?$CC?$CFs?$CC?0?5line?5?$CFd?0?5in?5?$CFs@
  0012e	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szTraceBuffer$[ebp]
  00134	68 80 00 00 00	 push	 128			; 00000080H
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 __snprintf
  0013f	83 c4 18	 add	 esp, 24			; 00000018H
$LN27@TraceFunc:

; 105  : 
; 106  : 			break;
; 107  : 	}
; 108  : 	return 0;
; 109  : }

  00142	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_nCurTraceN@@3HA ; g_nCurTraceN
  00148	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  0014b	42		 inc	 edx
  0014c	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?g_stTraceBuffer@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8]
  00153	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_nCurTraceN@@3HA, edx ; g_nCurTraceN
  00159	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szTraceBuffer$[ebp]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN18@TraceFunc:
  00165	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00168	33 c0		 xor	 eax, eax
  0016a	5f		 pop	 edi
  0016b	33 cd		 xor	 ecx, ebp
  0016d	5e		 pop	 esi
  0016e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
?TraceFunc@@YAHPAU_object@@PAU_frame@@H0@Z ENDP		; TraceFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?Traceback@@YAXXZ
_TEXT	SEGMENT
tv377 = -56						; size = 4
tv387 = -56						; size = 4
tv394 = -56						; size = 4
_tb$ = -52						; size = 4
_exc$ = -48						; size = 4
_v$ = -44						; size = 4
_str$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Traceback@@YAXXZ PROC					; Traceback, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Traceback@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  0002d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _str$[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00034	0f 11 45 d8	 movups	 XMMWORD PTR _str$[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00038	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _str$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0003f	c6 45 d8 00	 mov	 BYTE PTR _str$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 29   : 	for (int i = 0; i < g_nCurTraceN; ++i)

  00043	33 ff		 xor	 edi, edi
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?g_nCurTraceN@@3HA, edi ; g_nCurTraceN
  00052	7e 3d		 jle	 SHORT $LN3@Traceback
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00054	be 00 00 00 00	 mov	 esi, OFFSET ?g_stTraceBuffer@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; g_stTraceBuffer
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@Traceback:

; 434  :         return _Myres > _Small_string_capacity;

  00060	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00064	8b c6		 mov	 eax, esi

; 426  :         if (_Large_mode_engaged()) {

  00066	76 02		 jbe	 SHORT $LN46@Traceback

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00068	8b 06		 mov	 eax, DWORD PTR [esi]
$LN46@Traceback:

; 1459 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0006a	ff 76 10	 push	 DWORD PTR [esi+16]
  0006d	8d 4d d8	 lea	 ecx, DWORD PTR _str$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00076	6a 01		 push	 1
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0007d	8d 4d d8	 lea	 ecx, DWORD PTR _str$[ebp]
  00080	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 29   : 	for (int i = 0; i < g_nCurTraceN; ++i)

  00085	47		 inc	 edi
  00086	83 c6 18	 add	 esi, 24			; 00000018H
  00089	3b 3d 00 00 00
	00		 cmp	 edi, DWORD PTR ?g_nCurTraceN@@3HA ; g_nCurTraceN
  0008f	7c cf		 jl	 SHORT $LL4@Traceback
$LN3@Traceback:

; 30   : 	{
; 31   : 		str.append(g_stTraceBuffer[i]);
; 32   : 		str.append("\n");
; 33   : 	}
; 34   : 
; 35   : 	PyObject * exc;
; 36   : 	PyObject * v;
; 37   : 	PyObject * tb;
; 38   : 	const char * errStr;
; 39   : 
; 40   : 	PyErr_Fetch(&exc, &v, &tb);

  00091	8d 45 cc	 lea	 eax, DWORD PTR _tb$[ebp]
  00094	50		 push	 eax
  00095	8d 45 d4	 lea	 eax, DWORD PTR _v$[ebp]
  00098	50		 push	 eax
  00099	8d 45 d0	 lea	 eax, DWORD PTR _exc$[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Fetch

; 41   : 
; 42   : 	if (PyString_Check(v))

  000a3	8b 4d d4	 mov	 ecx, DWORD PTR _v$[ebp]
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ac	f7 40 54 00 00
	00 08		 test	 DWORD PTR [eax+84], 134217728 ; 08000000H
  000b3	74 3c		 je	 SHORT $LN7@Traceback
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000b5	6a 07		 push	 7
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 44   : 		errStr = PyString_AS_STRING(v);

  000b7	8d 71 14	 lea	 esi, DWORD PTR [ecx+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_07KAJBENLI@Error?3?5@
  000bf	8d 4d d8	 lea	 ecx, DWORD PTR _str$[ebp]
  000c2	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000c7	8b ce		 mov	 ecx, esi
  000c9	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  000cc	0f 1f 40 00	 npad	 4
$LL119@Traceback:
  000d0	8a 01		 mov	 al, BYTE PTR [ecx]
  000d2	41		 inc	 ecx
  000d3	84 c0		 test	 al, al
  000d5	75 f9		 jne	 SHORT $LL119@Traceback
  000d7	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000d9	51		 push	 ecx
  000da	56		 push	 esi
  000db	8d 4d d8	 lea	 ecx, DWORD PTR _str$[ebp]
  000de	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 48   : 		Tracef("%s\n", errStr);

  000e3	56		 push	 esi
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6@
  000e9	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  000ee	83 c4 08	 add	 esp, 8
$LN7@Traceback:

; 49   : 	}
; 50   : 	Py_DECREF(exc);

  000f1	8b 45 d0	 mov	 eax, DWORD PTR _exc$[ebp]
  000f4	83 00 ff	 add	 DWORD PTR [eax], -1
  000f7	8b 4d d0	 mov	 ecx, DWORD PTR _exc$[ebp]
  000fa	75 0c		 jne	 SHORT $LN5@Traceback
  000fc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ff	51		 push	 ecx
  00100	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00103	ff d0		 call	 eax
  00105	83 c4 04	 add	 esp, 4
$LN5@Traceback:

; 51   : 	Py_DECREF(v);

  00108	8b 45 d4	 mov	 eax, DWORD PTR _v$[ebp]
  0010b	83 00 ff	 add	 DWORD PTR [eax], -1
  0010e	8b 4d d4	 mov	 ecx, DWORD PTR _v$[ebp]
  00111	75 0c		 jne	 SHORT $LN8@Traceback
  00113	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00116	51		 push	 ecx
  00117	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0011a	ff d0		 call	 eax
  0011c	83 c4 04	 add	 esp, 4
$LN8@Traceback:

; 52   : 	Py_DECREF(tb);

  0011f	8b 45 cc	 mov	 eax, DWORD PTR _tb$[ebp]
  00122	83 00 ff	 add	 DWORD PTR [eax], -1
  00125	8b 4d cc	 mov	 ecx, DWORD PTR _tb$[ebp]
  00128	75 0c		 jne	 SHORT $LN11@Traceback
  0012a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0012d	51		 push	 ecx
  0012e	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00131	ff d0		 call	 eax
  00133	83 c4 04	 add	 esp, 4
$LN11@Traceback:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00136	83 7d ec 0f	 cmp	 DWORD PTR _str$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  0013a	8d 45 d8	 lea	 eax, DWORD PTR _str$[ebp]

; 426  :         if (_Large_mode_engaged()) {

  0013d	0f 47 45 d8	 cmova	 eax, DWORD PTR _str$[ebp]
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 53   : 	LogBoxf("Traceback:\n\n%s\n", str.c_str());

  00141	50		 push	 eax
  00142	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LBJCHJMM@Traceback?3?6?6?$CFs?6@
  00147	e8 00 00 00 00	 call	 ?LogBoxf@@YAXPBDZZ	; LogBoxf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0014c	8b 4d ec	 mov	 ecx, DWORD PTR _str$[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 53   : 	LogBoxf("Traceback:\n\n%s\n", str.c_str());

  0014f	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00152	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00155	76 28		 jbe	 SHORT $LN97@Traceback
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00157	8b 55 d8	 mov	 edx, DWORD PTR _str$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0015a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0015b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0015d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00163	72 10		 jb	 SHORT $LN108@Traceback

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00165	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00168	83 c1 23	 add	 ecx, 35			; 00000023H
  0016b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0016d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00170	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00173	77 25		 ja	 SHORT $LN123@Traceback
$LN108@Traceback:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00175	51		 push	 ecx
  00176	52		 push	 edx
  00177	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0017c	83 c4 08	 add	 esp, 8
$LN97@Traceback:
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 54   : }

  0017f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00182	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00189	59		 pop	 ecx
  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018f	33 cd		 xor	 ecx, ebp
  00191	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c3		 ret	 0
$LN123@Traceback:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0019a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN121@Traceback:
  0019f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Traceback@@YAXXZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Traceback@@YAXXZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Traceback@@YAXXZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Traceback@@YAXXZ ENDP					; Traceback
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_stTraceBuffer@@YAXXZ
text$yd	SEGMENT
??__Fg_stTraceBuffer@@YAXXZ PROC			; `dynamic atexit destructor for 'g_stTraceBuffer'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00005	68 00 02 00 00	 push	 512			; 00000200H
  0000a	6a 18		 push	 24			; 00000018H
  0000c	68 00 00 00 00	 push	 OFFSET ?g_stTraceBuffer@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; g_stTraceBuffer
  00011	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00016	c3		 ret	 0
??__Fg_stTraceBuffer@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_stTraceBuffer''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ??__Eg_stTraceBuffer@@YAXXZ
text$di	SEGMENT
??__Eg_stTraceBuffer@@YAXXZ PROC			; `dynamic initializer for 'g_stTraceBuffer'', COMDAT

; 22   : std::string g_stTraceBuffer[512];

  00000	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00005	68 00 00 00 00	 push	 OFFSET ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0000a	68 00 02 00 00	 push	 512			; 00000200H
  0000f	6a 18		 push	 24			; 00000018H
  00011	68 00 00 00 00	 push	 OFFSET ?g_stTraceBuffer@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; g_stTraceBuffer
  00016	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  0001b	68 00 00 00 00	 push	 OFFSET ??__Fg_stTraceBuffer@@YAXXZ ; `dynamic atexit destructor for 'g_stTraceBuffer''
  00020	e8 00 00 00 00	 call	 _atexit
  00025	59		 pop	 ecx
  00026	c3		 ret	 0
??__Eg_stTraceBuffer@@YAXXZ ENDP			; `dynamic initializer for 'g_stTraceBuffer''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPythonLauncher@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPythonLauncher@@UAEPAXI@Z PROC			; CPythonLauncher::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPythonLauncher@@UAE@XZ ; CPythonLauncher::~CPythonLauncher
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 0c		 push	 12			; 0000000cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCPythonLauncher@@UAEPAXI@Z ENDP			; CPythonLauncher::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?GetError@CPythonLauncher@@QAEPBDXZ
_TEXT	SEGMENT
_exc$ = -12						; size = 4
_tb$ = -8						; size = 4
_v$ = -4						; size = 4
?GetError@CPythonLauncher@@QAEPBDXZ PROC		; CPythonLauncher::GetError, COMDAT
; _this$ = ecx

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 297  : 	PyObject* exc;
; 298  : 	PyObject* v;
; 299  : 	PyObject* tb;
; 300  : 
; 301  : 	PyErr_Fetch(&exc, &v, &tb);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _tb$[ebp]
  00009	50		 push	 eax
  0000a	8d 45 fc	 lea	 eax, DWORD PTR _v$[ebp]
  0000d	50		 push	 eax
  0000e	8d 45 f4	 lea	 eax, DWORD PTR _exc$[ebp]
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Fetch

; 302  : 
; 303  : 	if (PyString_Check(v))

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _v$[ebp]
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00021	f7 40 54 00 00
	00 08		 test	 DWORD PTR [eax+84], 134217728 ; 08000000H

; 304  : 		return PyString_AS_STRING(v);

  00028	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  0002b	75 05		 jne	 SHORT $LN1@GetError

; 305  : 
; 306  : 	return "";

  0002d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN1@GetError:

; 307  : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?GetError@CPythonLauncher@@QAEPBDXZ ENDP		; CPythonLauncher::GetError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?RunCompiledFile@CPythonLauncher@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
tv206 = 8						; size = 4
tv217 = 8						; size = 4
tv227 = 8						; size = 4
?RunCompiledFile@CPythonLauncher@@QAE_NPBD@Z PROC	; CPythonLauncher::RunCompiledFile, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 146  : 	FILE * fp = fopen(c_szFileName, "rb");

  00005	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0000a	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0000d	8b d9		 mov	 ebx, ecx
  0000f	e8 00 00 00 00	 call	 _fopen
  00014	8b f8		 mov	 edi, eax
  00016	83 c4 08	 add	 esp, 8

; 147  : 
; 148  : 	if (!fp)

  00019	85 ff		 test	 edi, edi
  0001b	75 08		 jne	 SHORT $LN14@RunCompile

; 149  : 		return false;

  0001d	5f		 pop	 edi
  0001e	32 c0		 xor	 al, al

; 192  : }

  00020	5b		 pop	 ebx
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN14@RunCompile:
  00025	56		 push	 esi

; 150  : 
; 151  : 	PyCodeObject *co;
; 152  : 	PyObject *v;
; 153  : 	long magic;
; 154  : 	long PyImport_GetMagicNumber(void);
; 155  : 
; 156  : 	magic = _PyMarshal_ReadLongFromFile(fp);

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 ?_PyMarshal_ReadLongFromFile@@YAJPAU_iobuf@@@Z ; _PyMarshal_ReadLongFromFile
  0002c	83 c4 04	 add	 esp, 4
  0002f	8b f0		 mov	 esi, eax

; 157  : 
; 158  : 	if (magic != PyImport_GetMagicNumber())

  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyImport_GetMagicNumber
  00037	3b f0		 cmp	 esi, eax
  00039	74 24		 je	 SHORT $LN15@RunCompile

; 159  : 	{
; 160  : 		PyErr_SetString(PyExc_RuntimeError, "Bad magic number in .pyc file");

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__PyExc_RuntimeError
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NCBNDPKB@Bad?5magic?5number?5in?5?4pyc?5file@
  00045	ff 30		 push	 DWORD PTR [eax]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_SetString

; 161  : 		fclose(fp);

  0004d	57		 push	 edi
  0004e	e8 00 00 00 00	 call	 _fclose
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 174  : 		return false;

  00056	32 c0		 xor	 al, al
  00058	5e		 pop	 esi
  00059	5f		 pop	 edi

; 192  : }

  0005a	5b		 pop	 ebx
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN15@RunCompile:

; 162  : 		return false;
; 163  : 	}
; 164  : 
; 165  : 	_PyMarshal_ReadLongFromFile(fp);

  0005f	57		 push	 edi
  00060	e8 00 00 00 00	 call	 ?_PyMarshal_ReadLongFromFile@@YAJPAU_iobuf@@@Z ; _PyMarshal_ReadLongFromFile

; 166  : 	v = _PyMarshal_ReadLastObjectFromFile(fp);

  00065	57		 push	 edi
  00066	e8 00 00 00 00	 call	 ?_PyMarshal_ReadLastObjectFromFile@@YAPAU_object@@PAU_iobuf@@@Z ; _PyMarshal_ReadLastObjectFromFile

; 167  : 
; 168  : 	fclose(fp);

  0006b	57		 push	 edi
  0006c	8b f0		 mov	 esi, eax
  0006e	e8 00 00 00 00	 call	 _fclose
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH

; 169  : 
; 170  : 	if (!v || !PyCode_Check(v))

  00076	85 f6		 test	 esi, esi
  00078	74 77		 je	 SHORT $LN6@RunCompile
  0007a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0007d	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR __imp__PyCode_Type
  00083	75 5e		 jne	 SHORT $LN4@RunCompile

; 175  : 	}
; 176  : 
; 177  : 	co = (PyCodeObject *) v;
; 178  : 	v = PyEval_EvalCode(co, m_poDic, m_poDic);

  00085	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00088	50		 push	 eax
  00089	50		 push	 eax
  0008a	56		 push	 esi
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyEval_EvalCode
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	8b f8		 mov	 edi, eax

; 179  : 
; 180  : 	Py_DECREF(co);

  00096	83 06 ff	 add	 DWORD PTR [esi], -1
  00099	75 0c		 jne	 SHORT $LN8@RunCompile
  0009b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0009e	56		 push	 esi
  0009f	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  000a2	ff d1		 call	 ecx
  000a4	83 c4 04	 add	 esp, 4
$LN8@RunCompile:

; 181  : 	if (!v)

  000a7	85 ff		 test	 edi, edi
  000a9	75 0e		 jne	 SHORT $LN13@RunCompile

; 182  : 	{
; 183  : 		Traceback();

  000ab	e8 00 00 00 00	 call	 ?Traceback@@YAXXZ	; Traceback
  000b0	5e		 pop	 esi
  000b1	5f		 pop	 edi
  000b2	32 c0		 xor	 al, al

; 192  : }

  000b4	5b		 pop	 ebx
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
$LN13@RunCompile:

; 184  : 		return false;
; 185  : 	}
; 186  : 
; 187  : 	Py_DECREF(v);

  000b9	83 07 ff	 add	 DWORD PTR [edi], -1
  000bc	75 0c		 jne	 SHORT $LN11@RunCompile
  000be	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c1	57		 push	 edi
  000c2	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000c5	ff d0		 call	 eax
  000c7	83 c4 04	 add	 esp, 4
$LN11@RunCompile:

; 188  : 	if (Py_FlushLine())

  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_FlushLine
  000d0	85 c0		 test	 eax, eax
  000d2	74 06		 je	 SHORT $LN27@RunCompile

; 189  : 		PyErr_Clear();

  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Clear
$LN27@RunCompile:
  000da	5e		 pop	 esi
  000db	5f		 pop	 edi

; 190  : 
; 191  : 	return true;

  000dc	b0 01		 mov	 al, 1

; 192  : }

  000de	5b		 pop	 ebx
  000df	5d		 pop	 ebp
  000e0	c2 04 00	 ret	 4
$LN4@RunCompile:

; 171  : 	{
; 172  : 		Py_XDECREF(v);

  000e3	83 06 ff	 add	 DWORD PTR [esi], -1
  000e6	75 09		 jne	 SHORT $LN6@RunCompile
  000e8	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000eb	56		 push	 esi
  000ec	ff d0		 call	 eax
  000ee	83 c4 04	 add	 esp, 4
$LN6@RunCompile:

; 173  : 		PyErr_SetString(PyExc_RuntimeError, "Bad code object in .pyc file");

  000f1	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__PyExc_RuntimeError
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HFJPDIJP@Bad?5code?5object?5in?5?4pyc?5file@
  000fb	ff 30		 push	 DWORD PTR [eax]
  000fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_SetString
  00103	83 c4 08	 add	 esp, 8

; 174  : 		return false;

  00106	32 c0		 xor	 al, al
  00108	5e		 pop	 esi
  00109	5f		 pop	 edi

; 192  : }

  0010a	5b		 pop	 ebx
  0010b	5d		 pop	 ebp
  0010c	c2 04 00	 ret	 4
?RunCompiledFile@CPythonLauncher@@QAE_NPBD@Z ENDP	; CPythonLauncher::RunCompiledFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -64					; size = 4
__Old_capacity$1$ = -60					; size = 4
_c_szFileName$GSCopy$1$ = -56				; size = 4
tv629 = -56						; size = 4
tv640 = -56						; size = 4
_i$1$ = -52						; size = 4
__Old_size$1$ = -48					; size = 4
tv862 = -48						; size = 4
$T2 = -41						; size = 1
__Ch$1$ = -41						; size = 1
_stConvFileData$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_uFileSize$ = 12					; size = 4
_c_pvFileData$ = 16					; size = 4
?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z PROC	; CPythonLauncher::RunMemoryTextFile, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 c0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  0002f	8b 45 08	 mov	 eax, DWORD PTR _c_szFileName$[ebp]
  00032	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00035	0f 11 45 d8	 movups	 XMMWORD PTR _stConvFileData$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 225  : {

  00039	89 45 c8	 mov	 DWORD PTR _c_szFileName$GSCopy$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  0003c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stConvFileData$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00043	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _stConvFileData$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004a	c6 45 d8 00	 mov	 BYTE PTR _stConvFileData$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 228  :     stConvFileData.reserve(uFileSize);

  0004e	ff 75 0c	 push	 DWORD PTR _uFileSize$[ebp]
  00051	8d 4d d8	 lea	 ecx, DWORD PTR _stConvFileData$[ebp]
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve

; 230  :     for (UINT i = 0; i < uFileSize; ++i)

  00060	33 d2		 xor	 edx, edx
  00062	89 55 cc	 mov	 DWORD PTR _i$1$[ebp], edx
  00065	39 55 0c	 cmp	 DWORD PTR _uFileSize$[ebp], edx
  00068	0f 86 4d 01 00
	00		 jbe	 $LN204@RunMemoryT
  0006e	66 90		 npad	 2
$LL4@RunMemoryT:

; 231  :     {
; 232  :         if (c_pcFileData[i] != 13)

  00070	8b 45 10	 mov	 eax, DWORD PTR _c_pvFileData$[ebp]
  00073	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  00076	88 45 d7	 mov	 BYTE PTR __Ch$1$[ebp], al
  00079	3c 0d		 cmp	 al, 13			; 0000000dH
  0007b	0f 84 2a 01 00
	00		 je	 $LN2@RunMemoryT
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2266 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00081	8b 4d e8	 mov	 ecx, DWORD PTR _stConvFileData$[ebp+16]
  00084	8b 7d ec	 mov	 edi, DWORD PTR _stConvFileData$[ebp+20]
  00087	89 4d d0	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0008a	89 7d c4	 mov	 DWORD PTR __Old_capacity$1$[ebp], edi
  0008d	3b cf		 cmp	 ecx, edi

; 2267 :         if (_Old_size < _Mypair._Myval2._Myres) {

  0008f	73 20		 jae	 SHORT $LN46@RunMemoryT

; 2268 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + 1);
; 2269 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00091	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 434  :         return _Myres > _Small_string_capacity;

  00094	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 2269 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00097	89 45 e8	 mov	 DWORD PTR _stConvFileData$[ebp+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  0009a	8d 45 d8	 lea	 eax, DWORD PTR _stConvFileData$[ebp]

; 417  :         if (_Large_mode_engaged()) {

  0009d	0f 47 45 d8	 cmova	 eax, DWORD PTR _stConvFileData$[ebp]

; 2271 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  000a1	03 c1		 add	 eax, ecx
  000a3	8a 4d d7	 mov	 cl, BYTE PTR __Ch$1$[ebp]

; 2272 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  000a6	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
  000aa	88 08		 mov	 BYTE PTR [eax], cl

; 2273 :             return;

  000ac	e9 fa 00 00 00	 jmp	 $LN2@RunMemoryT
$LN46@RunMemoryT:

; 2992 :         const size_type _Old_size = _My_data._Mysize;

  000b1	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000b6	2b c1		 sub	 eax, ecx

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  000b8	83 f8 01	 cmp	 eax, 1
  000bb	0f 82 c0 01 00
	00		 jb	 $LN198@RunMemoryT

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  000c1	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  000c4	83 ce 0f	 or	 esi, 15			; 0000000fH
  000c7	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000cd	76 12		 jbe	 SHORT $LN64@RunMemoryT

; 2944 :             return _Max;

  000cf	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  000d4	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000df	eb 49		 jmp	 SHORT $LN208@RunMemoryT
$LN64@RunMemoryT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  000e1	8b d7		 mov	 edx, edi
  000e3	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000e8	d1 ea		 shr	 edx, 1
  000ea	2b c2		 sub	 eax, edx
  000ec	3b f8		 cmp	 edi, eax
  000ee	76 12		 jbe	 SHORT $LN65@RunMemoryT

; 2948 :             return _Max;

  000f0	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  000f5	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00100	eb 28		 jmp	 SHORT $LN208@RunMemoryT
$LN65@RunMemoryT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00102	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  00105	3b f0		 cmp	 esi, eax
  00107	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0010a	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0010d	85 c0		 test	 eax, eax
  0010f	75 04		 jne	 SHORT $LN78@RunMemoryT

; 228  :         return nullptr;

  00111	33 ff		 xor	 edi, edi
  00113	eb 1d		 jmp	 SHORT $LN77@RunMemoryT
$LN78@RunMemoryT:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00115	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0011a	72 08		 jb	 SHORT $LN79@RunMemoryT

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00122	eb 06		 jmp	 SHORT $LN208@RunMemoryT
$LN79@RunMemoryT:

; 136  :         return ::operator new(_Bytes);

  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN208@RunMemoryT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  0012a	8b 4d d0	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  0012d	8b f8		 mov	 edi, eax
  0012f	83 c4 04	 add	 esp, 4
$LN77@RunMemoryT:

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  00132	83 7d c4 0f	 cmp	 DWORD PTR __Old_capacity$1$[ebp], 15 ; 0000000fH
  00136	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00139	89 75 ec	 mov	 DWORD PTR _stConvFileData$[ebp+20], esi
  0013c	8d 34 0f	 lea	 esi, DWORD PTR [edi+ecx]
  0013f	89 45 e8	 mov	 DWORD PTR _stConvFileData$[ebp+16], eax
  00142	89 75 d0	 mov	 DWORD PTR tv862[ebp], esi
  00145	51		 push	 ecx
  00146	76 47		 jbe	 SHORT $LN57@RunMemoryT

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00148	8b 75 d8	 mov	 esi, DWORD PTR _stConvFileData$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0014b	56		 push	 esi
  0014c	57		 push	 edi
  0014d	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  00152	8b 45 d0	 mov	 eax, DWORD PTR tv862[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00155	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  00158	8a 4d d7	 mov	 cl, BYTE PTR __Ch$1$[ebp]
  0015b	88 08		 mov	 BYTE PTR [eax], cl

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0015d	8b 4d c4	 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]
  00160	41		 inc	 ecx

; 2282 :                     _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00161	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00165	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0016b	72 16		 jb	 SHORT $LN107@RunMemoryT

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0016d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00170	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00173	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00175	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00178	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0017b	0f 87 05 01 00
	00		 ja	 $LN188@RunMemoryT

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00181	8b f2		 mov	 esi, edx
$LN107@RunMemoryT:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00183	51		 push	 ecx
  00184	56		 push	 esi
  00185	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0018a	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3013 :         } else {

  0018d	eb 16		 jmp	 SHORT $LN209@RunMemoryT
$LN57@RunMemoryT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0018f	8d 45 d8	 lea	 eax, DWORD PTR _stConvFileData$[ebp]
  00192	50		 push	 eax
  00193	57		 push	 edi
  00194	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  00199	8a 4d d7	 mov	 cl, BYTE PTR __Ch$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019c	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  0019f	88 0e		 mov	 BYTE PTR [esi], cl

; 2282 :                     _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  001a1	c6 46 01 00	 mov	 BYTE PTR [esi+1], 0
$LN209@RunMemoryT:
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 230  :     for (UINT i = 0; i < uFileSize; ++i)

  001a5	8b 55 cc	 mov	 edx, DWORD PTR _i$1$[ebp]
  001a8	89 7d d8	 mov	 DWORD PTR _stConvFileData$[ebp], edi
$LN2@RunMemoryT:
  001ab	42		 inc	 edx
  001ac	89 55 cc	 mov	 DWORD PTR _i$1$[ebp], edx
  001af	3b 55 0c	 cmp	 edx, DWORD PTR _uFileSize$[ebp]
  001b2	0f 82 b8 fe ff
	ff		 jb	 $LL4@RunMemoryT
  001b8	8b 75 c0	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
$LN204@RunMemoryT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001bb	83 7d ec 0f	 cmp	 DWORD PTR _stConvFileData$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  001bf	8d 45 d8	 lea	 eax, DWORD PTR _stConvFileData$[ebp]
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 237  :     PyObject* pCompiledCode = Py_CompileString(c_pcConvFileData, c_szFileName, Py_file_input);//fix

  001c2	6a 00		 push	 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  001c4	0f 47 45 d8	 cmova	 eax, DWORD PTR _stConvFileData$[ebp]
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 237  :     PyObject* pCompiledCode = Py_CompileString(c_pcConvFileData, c_szFileName, Py_file_input);//fix

  001c8	68 01 01 00 00	 push	 257			; 00000101H
  001cd	ff 75 c8	 push	 DWORD PTR _c_szFileName$GSCopy$1$[ebp]
  001d0	50		 push	 eax
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_CompileStringFlags
  001d7	8b f8		 mov	 edi, eax
  001d9	83 c4 10	 add	 esp, 16			; 00000010H

; 238  :     if (!pCompiledCode)

  001dc	85 ff		 test	 edi, edi
  001de	74 4d		 je	 SHORT $LN21@RunMemoryT

; 239  :         return false;
; 240  :     PyObject* pResult = PyEval_EvalCode((PyCodeObject*)pCompiledCode, m_poDic, m_poDic);

  001e0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001e3	51		 push	 ecx
  001e4	51		 push	 ecx
  001e5	57		 push	 edi
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyEval_EvalCode
  001ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ef	8b f0		 mov	 esi, eax

; 241  :     Py_DECREF(pCompiledCode);//ref c

  001f1	83 07 ff	 add	 DWORD PTR [edi], -1
  001f4	75 0c		 jne	 SHORT $LN5@RunMemoryT
  001f6	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  001f9	57		 push	 edi
  001fa	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  001fd	ff d1		 call	 ecx
  001ff	83 c4 04	 add	 esp, 4
$LN5@RunMemoryT:

; 242  :     if (!pResult)

  00202	85 f6		 test	 esi, esi
  00204	74 27		 je	 SHORT $LN21@RunMemoryT

; 243  :         return false;
; 244  : 
; 245  :     Py_DECREF(pResult);

  00206	83 06 ff	 add	 DWORD PTR [esi], -1
  00209	75 0c		 jne	 SHORT $LN8@RunMemoryT
  0020b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0020e	56		 push	 esi
  0020f	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00212	ff d0		 call	 eax
  00214	83 c4 04	 add	 esp, 4
$LN8@RunMemoryT:

; 246  :     if (Py_FlushLine())

  00217	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_FlushLine
  0021d	85 c0		 test	 eax, eax
  0021f	74 06		 je	 SHORT $LN18@RunMemoryT

; 247  :         PyErr_Clear();

  00221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Clear
$LN18@RunMemoryT:

; 249  :     return true;

  00227	c6 45 d7 01	 mov	 BYTE PTR $T2[ebp], 1
  0022b	eb 04		 jmp	 SHORT $LN22@RunMemoryT
$LN21@RunMemoryT:
  0022d	c6 45 d7 00	 mov	 BYTE PTR $T2[ebp], 0
$LN22@RunMemoryT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00231	8b 4d ec	 mov	 ecx, DWORD PTR _stConvFileData$[ebp+20]
  00234	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00237	76 28		 jbe	 SHORT $LN180@RunMemoryT
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00239	8b 55 d8	 mov	 edx, DWORD PTR _stConvFileData$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0023c	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0023d	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0023f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00245	72 10		 jb	 SHORT $LN191@RunMemoryT

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00247	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0024a	83 c1 23	 add	 ecx, 35			; 00000023H
  0024d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0024f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00252	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00255	77 2f		 ja	 SHORT $LN188@RunMemoryT
$LN191@RunMemoryT:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00257	51		 push	 ecx
  00258	52		 push	 edx
  00259	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0025e	83 c4 08	 add	 esp, 8
$LN180@RunMemoryT:
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 249  :     return true;

  00261	8a 45 d7	 mov	 al, BYTE PTR $T2[ebp]

; 250  : }

  00264	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00267	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0026e	59		 pop	 ecx
  0026f	5f		 pop	 edi
  00270	5e		 pop	 esi
  00271	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00274	33 cd		 xor	 ecx, ebp
  00276	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027b	8b e5		 mov	 esp, ebp
  0027d	5d		 pop	 ebp
  0027e	c2 0c 00	 ret	 12			; 0000000cH
$LN198@RunMemoryT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2994 :             _Xlen_string(); // result too long

  00281	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN188@RunMemoryT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00286	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN207@RunMemoryT:
  0028b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _stConvFileData$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z ENDP	; CPythonLauncher::RunMemoryTextFile
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?RunFile@CPythonLauncher@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -348					; size = 4
_pvData$2 = -344					; size = 4
_file$3 = -340						; size = 324
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?RunFile@CPythonLauncher@@QAE_NPBD@Z PROC		; CPythonLauncher::RunFile, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RunFile@CPythonLauncher@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 8d a4 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00034	8b 5d 08	 mov	 ebx, DWORD PTR _c_szFileName$[ebp]

; 256  : 	char* acBufData=NULL;
; 257  : 	DWORD dwBufSize=0;
; 258  : 
; 259  : 	{
; 260  : 		CMappedFile file;

  00037	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$3[ebp]
  0003d	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 261  : 		const VOID* pvData;
; 262  : 		CEterPackManager::Instance().Get(file, c_szFileName, &pvData);

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00048	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _pvData$2[ebp]
  0004e	50		 push	 eax
  0004f	53		 push	 ebx
  00050	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _file$3[ebp]
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get

; 263  : 
; 264  : 		dwBufSize=file.Size();

  00063	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$3[ebp]
  00069	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  0006e	8b f8		 mov	 edi, eax

; 265  : 		if (dwBufSize==0)

  00070	85 ff		 test	 edi, edi
  00072	75 0f		 jne	 SHORT $LN2@RunFile

; 266  : 			return false;

  00074	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$3[ebp]
  0007a	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  0007f	32 c0		 xor	 al, al
  00081	eb 45		 jmp	 SHORT $LN1@RunFile
$LN2@RunFile:

; 267  : 
; 268  : 		acBufData=new char[dwBufSize];

  00083	57		 push	 edi
  00084	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 269  : 		memcpy(acBufData, pvData, dwBufSize);

  00089	57		 push	 edi
  0008a	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _pvData$2[ebp]
  00090	8b f0		 mov	 esi, eax
  00092	56		 push	 esi
  00093	e8 00 00 00 00	 call	 _memcpy
  00098	83 c4 10	 add	 esp, 16			; 00000010H

; 270  : 	}

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a2	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$3[ebp]
  000a8	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile

; 271  : 
; 272  : 	bool ret=false;
; 273  : 
; 274  : 	ret=RunMemoryTextFile(c_szFileName, dwBufSize, acBufData);

  000ad	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000b3	56		 push	 esi
  000b4	57		 push	 edi
  000b5	53		 push	 ebx
  000b6	e8 00 00 00 00	 call	 ?RunMemoryTextFile@CPythonLauncher@@QAE_NPBDIPBX@Z ; CPythonLauncher::RunMemoryTextFile

; 275  : 
; 276  : 	delete [] acBufData;

  000bb	56		 push	 esi
  000bc	8a d8		 mov	 bl, al
  000be	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000c3	83 c4 04	 add	 esp, 4

; 277  : 
; 278  : 	return ret;

  000c6	8a c3		 mov	 al, bl
$LN1@RunFile:

; 279  : }

  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d2	59		 pop	 ecx
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RunFile@CPythonLauncher@@QAE_NPBD@Z$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _file$3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?RunFile@CPythonLauncher@@QAE_NPBD@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a a0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-352]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RunFile@CPythonLauncher@@QAE_NPBD@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RunFile@CPythonLauncher@@QAE_NPBD@Z ENDP		; CPythonLauncher::RunFile
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?RunLine@CPythonLauncher@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_szSrc$ = 8						; size = 4
tv134 = 8						; size = 4
?RunLine@CPythonLauncher@@QAE_NPBD@Z PROC		; CPythonLauncher::RunLine, COMDAT
; _this$ = ecx

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 283  : 	PyObject * v = PyRun_String((char *) c_szSrc, Py_file_input, m_poDic, m_poDic);

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	6a 00		 push	 0
  00008	50		 push	 eax
  00009	50		 push	 eax
  0000a	68 01 01 00 00	 push	 257			; 00000101H
  0000f	ff 75 08	 push	 DWORD PTR _c_szSrc$[ebp]
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyRun_StringFlags
  00018	8b c8		 mov	 ecx, eax
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 284  : 
; 285  : 	if (!v)

  0001d	85 c9		 test	 ecx, ecx
  0001f	75 0b		 jne	 SHORT $LN4@RunLine

; 286  : 	{
; 287  : 		Traceback();

  00021	e8 00 00 00 00	 call	 ?Traceback@@YAXXZ	; Traceback

; 288  : 		return false;

  00026	32 c0		 xor	 al, al

; 293  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN4@RunLine:

; 289  : 	}
; 290  : 
; 291  : 	Py_DECREF(v);

  0002c	83 01 ff	 add	 DWORD PTR [ecx], -1
  0002f	75 0c		 jne	 SHORT $LN2@RunLine
  00031	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00034	51		 push	 ecx
  00035	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00038	ff d0		 call	 eax
  0003a	83 c4 04	 add	 esp, 4
$LN2@RunLine:

; 292  : 	return true;

  0003d	b0 01		 mov	 al, 1

; 293  : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?RunLine@CPythonLauncher@@QAE_NPBD@Z ENDP		; CPythonLauncher::RunLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?SetTraceFunc@CPythonLauncher@@QAEXP6AHPAU_object@@PAU_frame@@H0@Z@Z
_TEXT	SEGMENT
_pFunc$ = 8						; size = 4
?SetTraceFunc@CPythonLauncher@@QAEXP6AHPAU_object@@PAU_frame@@H0@Z@Z PROC ; CPythonLauncher::SetTraceFunc, COMDAT
; _this$ = ecx

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 113  : 	PyEval_SetTrace(pFunc, NULL);

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR _pFunc$[ebp]
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyEval_SetTrace
  0000e	83 c4 08	 add	 esp, 8

; 114  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetTraceFunc@CPythonLauncher@@QAEXP6AHPAU_object@@PAU_frame@@H0@Z@Z ENDP ; CPythonLauncher::SetTraceFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?Create@CPythonLauncher@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_szProgramName$ = 8					; size = 4
tv168 = 8						; size = 4
?Create@CPythonLauncher@@QAE_NPBD@Z PROC		; CPythonLauncher::Create, COMDAT
; _this$ = ecx

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 118  : 	Py_SetProgramName((char*)c_szProgramName);

  00004	ff 75 08	 push	 DWORD PTR _c_szProgramName$[ebp]
  00007	8b d9		 mov	 ebx, ecx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_SetProgramName

; 119  : #ifdef _DEBUG
; 120  : 	PyEval_SetTrace(TraceFunc, NULL);
; 121  : #endif
; 122  : 	m_poModule = PyImport_AddModule((char *) "__main__");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_08EMKMIFM@__main__@
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyImport_AddModule
  0001a	83 c4 08	 add	 esp, 8
  0001d	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 123  : 
; 124  : 	if (!m_poModule)

  00020	85 c0		 test	 eax, eax
  00022	0f 84 80 00 00
	00		 je	 $LN11@Create

; 125  : 		return false;
; 126  : 
; 127  : 	m_poDic = PyModule_GetDict(m_poModule);

  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyModule_GetDict

; 128  : 
; 129  :     PyObject * builtins = PyImport_ImportModule("__builtin__");

  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EILMOIBE@__builtin__@
  00035	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyImport_ImportModule

; 130  : 	PyModule_AddIntConstant(builtins, "TRUE", 1);

  0003e	6a 01		 push	 1
  00040	8b f8		 mov	 edi, eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_04HCDDPBNL@TRUE@
  00047	57		 push	 edi
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyModule_AddIntConstant

; 131  : 	PyModule_AddIntConstant(builtins, "FALSE", 0);

  0004e	6a 00		 push	 0
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE@
  00055	57		 push	 edi
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyModule_AddIntConstant

; 132  :     PyDict_SetItemString(m_poDic, "__builtins__", builtins);

  0005c	57		 push	 edi
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MNFFDJII@__builtins__@
  00062	ff 73 08	 push	 DWORD PTR [ebx+8]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyDict_SetItemString
  0006b	83 c4 2c	 add	 esp, 44			; 0000002cH

; 133  : 	Py_DECREF(builtins);

  0006e	83 07 ff	 add	 DWORD PTR [edi], -1
  00071	8b 07		 mov	 eax, DWORD PTR [edi]
  00073	75 0c		 jne	 SHORT $LN2@Create
  00075	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00078	57		 push	 edi
  00079	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0007c	ff d0		 call	 eax
  0007e	83 c4 04	 add	 esp, 4
$LN2@Create:

; 134  : 
; 135  : 	if (!RunLine("import __main__"))

  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOEJKCPF@import?5__main__@
  00086	8b cb		 mov	 ecx, ebx
  00088	e8 00 00 00 00	 call	 ?RunLine@CPythonLauncher@@QAE_NPBD@Z ; CPythonLauncher::RunLine
  0008d	5f		 pop	 edi
  0008e	84 c0		 test	 al, al
  00090	74 16		 je	 SHORT $LN11@Create

; 136  : 		return false;
; 137  : 
; 138  : 	if (!RunLine("import sys"))

  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GOKNMPOF@import?5sys@
  00097	8b cb		 mov	 ecx, ebx
  00099	e8 00 00 00 00	 call	 ?RunLine@CPythonLauncher@@QAE_NPBD@Z ; CPythonLauncher::RunLine
  0009e	84 c0		 test	 al, al
  000a0	5b		 pop	 ebx
  000a1	0f 95 c0	 setne	 al

; 140  : 
; 141  : 	return true;
; 142  : }

  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
$LN11@Create:

; 139  : 		return false;

  000a8	32 c0		 xor	 al, al
  000aa	5b		 pop	 ebx

; 140  : 
; 141  : 	return true;
; 142  : }

  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
?Create@CPythonLauncher@@QAE_NPBD@Z ENDP		; CPythonLauncher::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ?Clear@CPythonLauncher@@QAEXXZ
_TEXT	SEGMENT
?Clear@CPythonLauncher@@QAEXXZ PROC			; CPythonLauncher::Clear, COMDAT
; _this$ = ecx

; 19   : 	Py_Finalize();

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__Py_Finalize
?Clear@CPythonLauncher@@QAEXXZ ENDP			; CPythonLauncher::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ??1CPythonLauncher@@UAE@XZ
_TEXT	SEGMENT
??1CPythonLauncher@@UAE@XZ PROC				; CPythonLauncher::~CPythonLauncher, COMDAT
; _this$ = ecx

; 13   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPythonLauncher@@6B@

; 14   : 	Clear();

  00009	e8 00 00 00 00	 call	 ?Clear@CPythonLauncher@@QAEXXZ ; CPythonLauncher::Clear
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 19   : 	{

  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonLauncher@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00014	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A, 0 ; CSingleton<CPythonLauncher>::ms_singleton
  0001e	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 15   : }

  0001f	c3		 ret	 0
??1CPythonLauncher@@UAE@XZ ENDP				; CPythonLauncher::~CPythonLauncher
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp
;	COMDAT ??0CPythonLauncher@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPythonLauncher@@QAE@XZ PROC				; CPythonLauncher::CPythonLauncher, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00007	89 35 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A, esi ; CSingleton<CPythonLauncher>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonLauncher.cpp

; 8    : {

  0000d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPythonLauncher@@6B@

; 9    : 	Py_Initialize();

  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_Initialize

; 10   : }

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??0CPythonLauncher@@QAE@XZ ENDP				; CPythonLauncher::CPythonLauncher
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCPythonLauncher@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCPythonLauncher@@@@UAEPAXI@Z PROC	; CSingleton<CPythonLauncher>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonLauncher@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A, 0 ; CSingleton<CPythonLauncher>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN8@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCPythonLauncher@@@@UAEPAXI@Z ENDP	; CSingleton<CPythonLauncher>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCPythonLauncher@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCPythonLauncher@@@@UAE@XZ PROC		; CSingleton<CPythonLauncher>::~CSingleton<CPythonLauncher>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonLauncher@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonLauncher@@@@0PAVCPythonLauncher@@A, 0 ; CSingleton<CPythonLauncher>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCPythonLauncher@@@@UAE@XZ ENDP		; CSingleton<CPythonLauncher>::~CSingleton<CPythonLauncher>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Old_size$1$ = -8					; size = 4
$T1 = -4						; size = 4
__Newcap$ = 8						; size = 4
__Old$1$ = 8						; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 2428 :     void reserve(_CRT_GUARDOVERFLOW const size_type _Newcap = 0) { // determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2429 :         if (_Mypair._Myval2._Mysize > _Newcap) { // requested capacity is not large enough for current size, ignore

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newcap$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00010	89 45 f8	 mov	 DWORD PTR __Old_size$1$[ebp], eax
  00013	3b c3		 cmp	 eax, ebx
  00015	0f 87 54 01 00
	00		 ja	 $LN5@reserve

; 2430 :             return; // nothing to do
; 2431 :         }
; 2432 : 
; 2433 :         if (_Mypair._Myval2._Myres == _Newcap) { // we're already at the requested capacity

  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	89 55 08	 mov	 DWORD PTR __Old$1$[ebp], edx
  00021	3b d3		 cmp	 edx, ebx
  00023	0f 84 46 01 00
	00		 je	 $LN5@reserve

; 2434 :             return; // nothing to do
; 2435 :         }
; 2436 : 
; 2437 :         if (_Mypair._Myval2._Myres < _Newcap) { // reallocate to grow

  00029	57		 push	 edi
  0002a	0f 83 f7 00 00
	00		 jae	 $LN4@reserve

; 2438 :             const size_type _Old_size = _Mypair._Myval2._Mysize;
; 2439 :             _Reallocate_grow_by(_Newcap - _Old_size,

  00030	8b cb		 mov	 ecx, ebx
  00032	2b c8		 sub	 ecx, eax

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00034	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00039	2b 45 f8	 sub	 eax, DWORD PTR __Old_size$1$[ebp]
  0003c	3b c1		 cmp	 eax, ecx
  0003e	0f 82 38 01 00
	00		 jb	 $LN123@reserve

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00044	8b fb		 mov	 edi, ebx
  00046	83 cf 0f	 or	 edi, 15			; 0000000fH
  00049	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0004f	76 12		 jbe	 SHORT $LN16@reserve

; 2944 :             return _Max;

  00051	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00056	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	eb 45		 jmp	 SHORT $LN121@reserve
$LN16@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00063	8b ca		 mov	 ecx, edx
  00065	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0006a	d1 e9		 shr	 ecx, 1
  0006c	2b c1		 sub	 eax, ecx
  0006e	3b d0		 cmp	 edx, eax
  00070	76 12		 jbe	 SHORT $LN17@reserve

; 2948 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 24		 jmp	 SHORT $LN121@reserve
$LN17@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00084	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00087	3b f8		 cmp	 edi, eax
  00089	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0008c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0008f	85 c0		 test	 eax, eax
  00091	74 1b		 je	 SHORT $LN120@reserve
$LN30@reserve:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00093	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00098	72 08		 jb	 SHORT $LN31@reserve

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a0	eb 06		 jmp	 SHORT $LN121@reserve
$LN31@reserve:

; 136  :         return ::operator new(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000a8	8b 55 08	 mov	 edx, DWORD PTR __Old$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
$LN120@reserve:
  000ae	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b1	8b 5d f8	 mov	 ebx, DWORD PTR __Old_size$1$[ebp]
  000b4	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000b7	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000ba	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000bd	51		 push	 ecx
  000be	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000c1	76 49		 jbe	 SHORT $LN9@reserve

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000c3	8b 3e		 mov	 edi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	57		 push	 edi
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000cc	8b 4d 08	 mov	 ecx, DWORD PTR __Old$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d2	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000d3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000d9	72 16		 jb	 SHORT $LN59@reserve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000db	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000de	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e1	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e3	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000e6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000e9	0f 87 88 00 00
	00		 ja	 $LN95@reserve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ef	8b fa		 mov	 edi, edx
$LN59@reserve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f1	51		 push	 ecx
  000f2	57		 push	 edi
  000f3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2443 :             _Mypair._Myval2._Mysize = _Old_size;

  000f8	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000fb	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2443 :             _Mypair._Myval2._Mysize = _Old_size;

  000fe	89 06		 mov	 DWORD PTR [esi], eax
  00100	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi

; 2448 :             // deallocate everything; switch back to "small" mode
; 2449 :             _Become_small();
; 2450 :             return;
; 2451 :         }
; 2452 : 
; 2453 :         // ignore requests to reserve to [_Small_string_capacity + 1, _Myres)
; 2454 :     }

  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 04 00	 ret	 4
$LN9@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0010c	56		 push	 esi
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2443 :             _Mypair._Myval2._Mysize = _Old_size;

  00113	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00116	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2443 :             _Mypair._Myval2._Mysize = _Old_size;

  00119	89 06		 mov	 DWORD PTR [esi], eax
  0011b	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi

; 2448 :             // deallocate everything; switch back to "small" mode
; 2449 :             _Become_small();
; 2450 :             return;
; 2451 :         }
; 2452 : 
; 2453 :         // ignore requests to reserve to [_Small_string_capacity + 1, _Myres)
; 2454 :     }

  00120	5b		 pop	 ebx
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 04 00	 ret	 4
$LN4@reserve:

; 2444 :             return;
; 2445 :         }
; 2446 : 
; 2447 :         if (_Newcap <= _Small_string_capacity && _Mypair._Myval2._Large_mode_engaged()) {

  00127	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  0012a	77 42		 ja	 SHORT $LN118@reserve

; 434  :         return _Myres > _Small_string_capacity;

  0012c	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 2444 :             return;
; 2445 :         }
; 2446 : 
; 2447 :         if (_Newcap <= _Small_string_capacity && _Mypair._Myval2._Large_mode_engaged()) {

  0012f	76 3d		 jbe	 SHORT $LN118@reserve

; 3030 :         const pointer _Ptr = _My_data._Bx._Ptr;

  00131	8b 3e		 mov	 edi, DWORD PTR [esi]

; 3031 :         _My_data._Bx._Switch_to_buf();
; 3032 :         _Traits::copy(_My_data._Bx._Buf, _Unfancy(_Ptr), _My_data._Mysize + 1);

  00133	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00134	50		 push	 eax
  00135	57		 push	 edi
  00136	56		 push	 esi
  00137	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0013c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00142	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00143	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00149	72 12		 jb	 SHORT $LN98@reserve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0014b	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  0014e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00151	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00153	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00156	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00159	77 1c		 ja	 SHORT $LN95@reserve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0015b	8b fa		 mov	 edi, edx
$LN98@reserve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0015d	51		 push	 ecx
  0015e	57		 push	 edi
  0015f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00164	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3035 :         _My_data._Myres = _Small_string_capacity;

  00167	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
$LN118@reserve:
  0016e	5f		 pop	 edi
$LN5@reserve:
  0016f	5e		 pop	 esi

; 2448 :             // deallocate everything; switch back to "small" mode
; 2449 :             _Become_small();
; 2450 :             return;
; 2451 :         }
; 2452 : 
; 2453 :         // ignore requests to reserve to [_Small_string_capacity + 1, _Myres)
; 2454 :     }

  00170	5b		 pop	 ebx
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 04 00	 ret	 4
$LN95@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN119@reserve:
  00181	cc		 int	 3
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__New_size$1$ = -16					; size = 4
tv518 = -16						; size = 4
__Old_size$1$ = -12					; size = 4
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
tv508 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
tv503 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1486 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1487 :         // append [_Ptr, _Ptr + _Count)
; 1488 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1489 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 1490 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1491 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1493 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1494 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1507 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 1d 01 00
	00		 jb	 $LN98@append

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00062	8b f0		 mov	 esi, eax

; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  00064	89 45 f0	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00067	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00070	76 12		 jbe	 SHORT $LN23@append

; 2944 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 4b		 jmp	 SHORT $LN96@append
$LN23@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00084	8b c2		 mov	 eax, edx
  00086	d1 e8		 shr	 eax, 1
  00088	89 45 fc	 mov	 DWORD PTR tv508[ebp], eax
  0008b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00090	2b 45 fc	 sub	 eax, DWORD PTR tv508[ebp]
  00093	3b d0		 cmp	 edx, eax
  00095	76 12		 jbe	 SHORT $LN24@append

; 2948 :             return _Max;

  00097	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a7	eb 26		 jmp	 SHORT $LN96@append
$LN24@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR tv508[ebp]
  000ac	03 c2		 add	 eax, edx
  000ae	3b f0		 cmp	 esi, eax
  000b0	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000b6	85 c0		 test	 eax, eax
  000b8	74 1e		 je	 SHORT $LN95@append
$LN37@append:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ba	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bf	72 08		 jb	 SHORT $LN38@append

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c7	eb 06		 jmp	 SHORT $LN96@append
$LN38@append:

; 136  :         return ::operator new(_Bytes);

  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000cf	8b 55 f8	 mov	 edx, DWORD PTR __Old$1$[ebp]
  000d2	83 c4 04	 add	 esp, 4
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
$LN95@append:
  000d8	8b 5d f0	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  000db	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000de	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  000e1	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000e4	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000e7	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000ea	89 75 f0	 mov	 DWORD PTR tv518[ebp], esi
  000ed	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  000f0	89 45 0c	 mov	 DWORD PTR tv503[ebp], eax

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000f3	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  000f6	51		 push	 ecx
  000f7	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000fa	76 56		 jbe	 SHORT $LN16@append

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000fc	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fe	56		 push	 esi
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _memcpy
  00105	53		 push	 ebx
  00106	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00109	ff 75 f0	 push	 DWORD PTR tv518[ebp]
  0010c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00111	8b 45 0c	 mov	 eax, DWORD PTR tv503[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00114	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00117	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  0011a	41		 inc	 ecx

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011b	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00124	72 12		 jb	 SHORT $LN69@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00126	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00129	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0012c	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00131	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00134	77 4b		 ja	 SHORT $LN66@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00136	8b f2		 mov	 esi, edx
$LN69@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00138	51		 push	 ecx
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  0013f	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00142	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  00145	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00147	8b c7		 mov	 eax, edi
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN16@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00152	57		 push	 edi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	53		 push	 ebx
  0015a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0015d	56		 push	 esi
  0015e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00163	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00166	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00169	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1498 :         return _Reallocate_grow_by(

  0016c	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0016f	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00171	8b c7		 mov	 eax, edi
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
$LN98@append:

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00181	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@append:
  00186	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000b	8b f2		 mov	 esi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00010	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL82@operator:
  00013	8a 06		 mov	 al, BYTE PTR [esi]
  00015	46		 inc	 esi
  00016	84 c0		 test	 al, al
  00018	75 f9		 jne	 SHORT $LL82@operator
  0001a	2b f1		 sub	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001c	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0001f	89 4d f8	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00022	3b f1		 cmp	 esi, ecx
  00024	77 26		 ja	 SHORT $LN9@operator

; 416  :         value_type* _Result = _Bx._Buf;

  00026	8b df		 mov	 ebx, edi

; 434  :         return _Myres > _Small_string_capacity;

  00028	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002b	76 02		 jbe	 SHORT $LN12@operator

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002d	8b 1f		 mov	 ebx, DWORD PTR [edi]
$LN12@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0002f	56		 push	 esi
  00030	52		 push	 edx
  00031	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00032	89 77 10	 mov	 DWORD PTR [edi+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00035	e8 00 00 00 00	 call	 _memmove
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003d	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 1422 :         return assign(_Ptr);

  00041	8b c7		 mov	 eax, edi

; 1423 :     }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN9@operator:

; 2962 :         if (_New_size > max_size()) {

  0004c	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00052	0f 87 c7 00 00
	00		 ja	 $LN97@operator

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00058	8b de		 mov	 ebx, esi
  0005a	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0005d	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00063	76 12		 jbe	 SHORT $LN30@operator

; 2944 :             return _Max;

  00065	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006a	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00075	eb 45		 jmp	 SHORT $LN95@operator
$LN30@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00077	8b d1		 mov	 edx, ecx
  00079	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0007e	d1 ea		 shr	 edx, 1
  00080	2b c2		 sub	 eax, edx
  00082	3b c8		 cmp	 ecx, eax
  00084	76 12		 jbe	 SHORT $LN31@operator

; 2948 :             return _Max;

  00086	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0008b	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00096	eb 24		 jmp	 SHORT $LN95@operator
$LN31@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00098	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0009b	3b d8		 cmp	 ebx, eax
  0009d	0f 42 d8	 cmovb	 ebx, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000a0	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000a3	85 c0		 test	 eax, eax
  000a5	74 18		 je	 SHORT $LN94@operator
$LN44@operator:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000a7	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ac	72 08		 jb	 SHORT $LN45@operator

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b4	eb 06		 jmp	 SHORT $LN95@operator
$LN45@operator:

; 136  :         return ::operator new(_Bytes);

  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN95@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000bc	83 c4 04	 add	 esp, 4
$LN94@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	56		 push	 esi
  000c0	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000c3	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c6	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000c7	89 77 10	 mov	 DWORD PTR [edi+16], esi

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  000ca	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cd	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d2	8b 5d fc	 mov	 ebx, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000d8	8b 45 f8	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000db	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000df	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000e2	76 29		 jbe	 SHORT $LN23@operator

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000e4	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	8b 07		 mov	 eax, DWORD PTR [edi]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000e9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ef	72 12		 jb	 SHORT $LN73@operator

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f4	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f7	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f9	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ff	77 19		 ja	 SHORT $LN70@operator

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00101	8b c2		 mov	 eax, edx
$LN73@operator:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00103	51		 push	 ecx
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010a	83 c4 08	 add	 esp, 8
$LN23@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1604 :         return _Reallocate_for(

  0010d	89 1f		 mov	 DWORD PTR [edi], ebx

; 1422 :         return assign(_Ptr);

  0010f	8b c7		 mov	 eax, edi

; 1423 :     }

  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 04 00	 ret	 4
$LN70@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN97@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  0011f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN93@operator:
  00124	cc		 int	 3
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 684  :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 685  :         _Construct_empty();
; 686  :     }

  00003	8b c1		 mov	 eax, ecx

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00005	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 836  :         _My_data._Mysize = 0;

  00008	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0000f	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00016	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 685  :         _Construct_empty();
; 686  :     }

  00019	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
