; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\scriptLib\Distribute\PythonUtils.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_pkExceptionSender@@3PAVIPythonExceptionSender@@A ; g_pkExceptionSender
_BSS	SEGMENT
?g_pkExceptionSender@@3PAVIPythonExceptionSender@@A DD 01H DUP (?) ; g_pkExceptionSender
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z	; PyTuple_GetString
PUBLIC	?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z	; PyTuple_GetInteger
PUBLIC	?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z	; PyTuple_GetInteger
PUBLIC	?PyTuple_GetInteger@@YA_NPAU_object@@HPAG@Z	; PyTuple_GetInteger
PUBLIC	?PyTuple_GetByte@@YA_NPAU_object@@HPAE@Z	; PyTuple_GetByte
PUBLIC	?PyTuple_GetUnsignedInteger@@YA_NPAU_object@@HPAI@Z ; PyTuple_GetUnsignedInteger
PUBLIC	?PyTuple_GetLong@@YA_NPAU_object@@HPAJ@Z	; PyTuple_GetLong
PUBLIC	?PyTuple_GetUnsignedLong@@YA_NPAU_object@@HPAK@Z ; PyTuple_GetUnsignedLong
PUBLIC	?PyTuple_GetLongLong@@YA_NPAU_object@@HPA_J@Z	; PyTuple_GetLongLong
PUBLIC	?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z	; PyTuple_GetFloat
PUBLIC	?PyTuple_GetDouble@@YA_NPAU_object@@HPAN@Z	; PyTuple_GetDouble
PUBLIC	?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z	; PyTuple_GetObject
PUBLIC	?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z	; PyTuple_GetBoolean
PUBLIC	?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z	; PyCallClassMemberFunc
PUBLIC	?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PA_N@Z ; PyCallClassMemberFunc
PUBLIC	?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PAJ@Z ; PyCallClassMemberFunc
PUBLIC	?PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00@Z ; PyCallClassMemberFunc_ByPyString
PUBLIC	?PyCallClassMemberFunc@@YA_NPAU_object@@00@Z	; PyCallClassMemberFunc
PUBLIC	?Py_BuildException@@YAPAU_object@@PBDZZ		; Py_BuildException
PUBLIC	?Py_BadArgument@@YAPAU_object@@XZ		; Py_BadArgument
PUBLIC	?Py_BuildNone@@YAPAU_object@@XZ			; Py_BuildNone
PUBLIC	?Clear@IPythonExceptionSender@@QAEXXZ		; IPythonExceptionSender::Clear
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z ; __PyCallClassMemberFunc_ByCString
PUBLIC	?__PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00PAPAU1@@Z ; __PyCallClassMemberFunc_ByPyString
PUBLIC	?__PyCallClassMemberFunc@@YA_NPAU_object@@00PAPAU1@@Z ; __PyCallClassMemberFunc
PUBLIC	?Py_ReleaseNone@@YAXXZ				; Py_ReleaseNone
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	__imp__PyObject_GetAttrString:PROC
EXTRN	__imp__PyObject_GetAttr:PROC
EXTRN	__imp__PyCallable_Check:PROC
EXTRN	__imp__PyLong_AsLongLong:PROC
EXTRN	__imp__PyFloat_AsDouble:PROC
EXTRN	__imp__PyString_AsString:PROC
EXTRN	__imp__PyTuple_Size:PROC
EXTRN	__imp__PyTuple_GetItem:PROC
EXTRN	__imp__PyErr_SetString:PROC
EXTRN	__imp__PyErr_Clear:PROC
EXTRN	__imp__PyErr_BadArgument:PROC
EXTRN	__imp__PyErr_Print:PROC
EXTRN	__imp__PyObject_CallObject:PROC
EXTRN	__imp__PyNumber_Check:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp___Py_NoneStruct:QWORD
EXTRN	__imp__PyExc_RuntimeError:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?Py_ReleaseNone@@YAXXZ
_TEXT	SEGMENT
tv130 = -4						; size = 4
?Py_ReleaseNone@@YAXXZ PROC				; Py_ReleaseNone, COMDAT

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 44   : 	Py_DECREF(Py_None);

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___Py_NoneStruct
  00009	83 00 ff	 add	 DWORD PTR [eax], -1
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___Py_NoneStruct
  00012	75 0c		 jne	 SHORT $LN2@Py_Release
  00014	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00017	51		 push	 ecx
  00018	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0001b	ff d0		 call	 eax
  0001d	83 c4 04	 add	 esp, 4
$LN2@Py_Release:

; 45   : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?Py_ReleaseNone@@YAXXZ ENDP				; Py_ReleaseNone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?__PyCallClassMemberFunc@@YA_NPAU_object@@00PAPAU1@@Z
_TEXT	SEGMENT
_poClass$ = 8						; size = 4
tv228 = 8						; size = 4
tv241 = 8						; size = 4
_poFunc$ = 12						; size = 4
_poArgs$ = 16						; size = 4
_ppoRet$ = 20						; size = 4
?__PyCallClassMemberFunc@@YA_NPAU_object@@00PAPAU1@@Z PROC ; __PyCallClassMemberFunc, COMDAT

; 416  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 417  : 	if (!poClass)

  00003	83 7d 08 00	 cmp	 DWORD PTR _poClass$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	74 0d		 je	 SHORT $LN90@PyCallClas

; 418  : 	{
; 419  : 		Py_XDECREF(poArgs);
; 420  : 		return false;
; 421  : 	}
; 422  : 
; 423  : 	if (!poFunc)

  0000b	8b 75 0c	 mov	 esi, DWORD PTR _poFunc$[ebp]
  0000e	85 f6		 test	 esi, esi
  00010	75 2a		 jne	 SHORT $LN46@PyCallClas

; 424  : 	{
; 425  : 		PyErr_Clear();

  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Clear
$LN90@PyCallClas:

; 444  : 		return false;

  00018	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  0001b	85 c9		 test	 ecx, ecx
  0001d	0f 84 80 00 00
	00		 je	 $LN30@PyCallClas
  00023	83 01 ff	 add	 DWORD PTR [ecx], -1
  00026	8b 01		 mov	 eax, DWORD PTR [ecx]
  00028	75 79		 jne	 SHORT $LN30@PyCallClas
  0002a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002d	51		 push	 ecx
  0002e	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00031	ff d0		 call	 eax
  00033	83 c4 04	 add	 esp, 4
  00036	32 c0		 xor	 al, al
  00038	5f		 pop	 edi

; 452  : }

  00039	5e		 pop	 esi
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN46@PyCallClas:

; 426  : 		Py_XDECREF(poArgs);
; 427  : 		return false;
; 428  : 	}
; 429  : 
; 430  : 	if (!PyCallable_Check(poFunc))

  0003c	56		 push	 esi
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyCallable_Check
  00043	83 c4 04	 add	 esp, 4
  00046	85 c0		 test	 eax, eax
  00048	75 15		 jne	 SHORT $LN51@PyCallClas

; 431  : 	{
; 432  : 		Py_DECREF(poFunc);

  0004a	83 06 ff	 add	 DWORD PTR [esi], -1
  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
  0004f	75 c7		 jne	 SHORT $LN90@PyCallClas
  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	56		 push	 esi
  00055	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00058	ff d0		 call	 eax
  0005a	83 c4 04	 add	 esp, 4
  0005d	eb b9		 jmp	 SHORT $LN90@PyCallClas
$LN51@PyCallClas:

; 433  : 		Py_XDECREF(poArgs);
; 434  : 		return false;
; 435  : 	}
; 436  : 
; 437  : 	PyObject * poRet = PyObject_CallObject(poFunc, poArgs);	// New Reference

  0005f	8b 7d 10	 mov	 edi, DWORD PTR _poArgs$[ebp]
  00062	57		 push	 edi
  00063	56		 push	 esi
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyObject_CallObject
  0006a	8b c8		 mov	 ecx, eax
  0006c	83 c4 08	 add	 esp, 8

; 438  : 
; 439  : 	if (!poRet)

  0006f	85 c9		 test	 ecx, ecx
  00071	75 36		 jne	 SHORT $LN58@PyCallClas

; 440  : 	{
; 441  : 		PyErr_Print();

  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Print

; 442  : 		Py_DECREF(poFunc);

  00079	83 06 ff	 add	 DWORD PTR [esi], -1
  0007c	8b 06		 mov	 eax, DWORD PTR [esi]
  0007e	75 0c		 jne	 SHORT $LN23@PyCallClas
  00080	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00083	56		 push	 esi
  00084	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00087	ff d0		 call	 eax
  00089	83 c4 04	 add	 esp, 4
$LN23@PyCallClas:

; 443  : 		Py_XDECREF(poArgs);

  0008c	85 ff		 test	 edi, edi
  0008e	74 13		 je	 SHORT $LN30@PyCallClas
  00090	83 07 ff	 add	 DWORD PTR [edi], -1
  00093	8b 07		 mov	 eax, DWORD PTR [edi]
  00095	75 0c		 jne	 SHORT $LN30@PyCallClas
  00097	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0009a	57		 push	 edi

; 444  : 		return false;

  0009b	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0009e	ff d0		 call	 eax
  000a0	83 c4 04	 add	 esp, 4
$LN30@PyCallClas:
  000a3	5f		 pop	 edi
  000a4	32 c0		 xor	 al, al

; 452  : }

  000a6	5e		 pop	 esi
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
$LN58@PyCallClas:

; 445  : 	}
; 446  : 
; 447  : 	*ppoRet = poRet;

  000a9	8b 45 14	 mov	 eax, DWORD PTR _ppoRet$[ebp]
  000ac	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 
; 449  : 	Py_DECREF(poFunc);

  000ae	83 06 ff	 add	 DWORD PTR [esi], -1
  000b1	75 0c		 jne	 SHORT $LN32@PyCallClas
  000b3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b6	56		 push	 esi
  000b7	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000ba	ff d0		 call	 eax
  000bc	83 c4 04	 add	 esp, 4
$LN32@PyCallClas:

; 450  : 	Py_XDECREF(poArgs);

  000bf	85 ff		 test	 edi, edi
  000c1	74 11		 je	 SHORT $LN39@PyCallClas
  000c3	83 07 ff	 add	 DWORD PTR [edi], -1
  000c6	75 0c		 jne	 SHORT $LN39@PyCallClas
  000c8	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000cb	57		 push	 edi
  000cc	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000cf	ff d0		 call	 eax
  000d1	83 c4 04	 add	 esp, 4
$LN39@PyCallClas:

; 451  : 	return true;

  000d4	5f		 pop	 edi
  000d5	b0 01		 mov	 al, 1

; 452  : }

  000d7	5e		 pop	 esi
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
?__PyCallClassMemberFunc@@YA_NPAU_object@@00PAPAU1@@Z ENDP ; __PyCallClassMemberFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?__PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00PAPAU1@@Z
_TEXT	SEGMENT
_poClass$ = 8						; size = 4
tv228 = 8						; size = 4
tv241 = 8						; size = 4
_poFuncName$ = 12					; size = 4
_poArgs$ = 16						; size = 4
_ppoRet$ = 20						; size = 4
?__PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00PAPAU1@@Z PROC ; __PyCallClassMemberFunc_ByPyString, COMDAT

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 369  : 	if (!poClass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _poClass$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN94@PyCallClas

; 370  : 	{
; 371  : 		Py_XDECREF(poArgs);
; 372  : 		return false;
; 373  : 	}
; 374  : 
; 375  : 	PyObject * poFunc = PyObject_GetAttr(poClass, poFuncName);	// New Reference

  0000c	ff 75 0c	 push	 DWORD PTR _poFuncName$[ebp]
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyObject_GetAttr
  00016	8b f0		 mov	 esi, eax
  00018	83 c4 08	 add	 esp, 8

; 376  : 
; 377  : 	if (!poFunc)

  0001b	85 f6		 test	 esi, esi
  0001d	75 2e		 jne	 SHORT $LN46@PyCallClas

; 378  : 	{
; 379  : 		PyErr_Clear();

  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Clear
$LN94@PyCallClas:

; 405  : 		return false;

  00025	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  00028	85 c9		 test	 ecx, ecx
  0002a	0f 84 a1 00 00
	00		 je	 $LN30@PyCallClas
  00030	83 01 ff	 add	 DWORD PTR [ecx], -1
  00033	8b 01		 mov	 eax, DWORD PTR [ecx]
  00035	0f 85 96 00 00
	00		 jne	 $LN30@PyCallClas
  0003b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003e	51		 push	 ecx
  0003f	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00042	ff d0		 call	 eax
  00044	83 c4 04	 add	 esp, 4
  00047	32 c0		 xor	 al, al
  00049	5f		 pop	 edi

; 413  : }

  0004a	5e		 pop	 esi
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN46@PyCallClas:

; 380  : 		Py_XDECREF(poArgs);
; 381  : 		return false;
; 382  : 	}
; 383  : 
; 384  : 	if (!PyCallable_Check(poFunc))

  0004d	56		 push	 esi
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyCallable_Check
  00054	83 c4 04	 add	 esp, 4
  00057	85 c0		 test	 eax, eax
  00059	75 15		 jne	 SHORT $LN51@PyCallClas

; 385  : 	{
; 386  : 		Py_DECREF(poFunc);

  0005b	83 06 ff	 add	 DWORD PTR [esi], -1
  0005e	8b 06		 mov	 eax, DWORD PTR [esi]
  00060	75 c3		 jne	 SHORT $LN94@PyCallClas
  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	56		 push	 esi
  00066	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00069	ff d0		 call	 eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	eb b5		 jmp	 SHORT $LN94@PyCallClas
$LN51@PyCallClas:

; 387  : 		Py_XDECREF(poArgs);
; 388  : 		return false;
; 389  : 	}
; 390  : 
; 391  : 	PyObject * poRet = PyObject_CallObject(poFunc, poArgs);	// New Reference

  00070	8b 7d 10	 mov	 edi, DWORD PTR _poArgs$[ebp]
  00073	57		 push	 edi
  00074	56		 push	 esi
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyObject_CallObject
  0007b	8b c8		 mov	 ecx, eax
  0007d	83 c4 08	 add	 esp, 8

; 392  : 
; 393  : 	if (!poRet)

  00080	85 c9		 test	 ecx, ecx
  00082	75 53		 jne	 SHORT $LN58@PyCallClas

; 394  : 	{
; 395  : 		if (g_pkExceptionSender)

  00084	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pkExceptionSender@@3PAVIPythonExceptionSender@@A ; g_pkExceptionSender
  0008a	85 c9		 test	 ecx, ecx
  0008c	74 05		 je	 SHORT $LN59@PyCallClas

; 396  : 			g_pkExceptionSender->Clear();

  0008e	e8 00 00 00 00	 call	 ?Clear@IPythonExceptionSender@@QAEXXZ ; IPythonExceptionSender::Clear
$LN59@PyCallClas:

; 397  : 
; 398  : 		PyErr_Print();

  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Print

; 399  : 
; 400  : 		if (g_pkExceptionSender)

  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pkExceptionSender@@3PAVIPythonExceptionSender@@A ; g_pkExceptionSender
  0009f	85 c9		 test	 ecx, ecx
  000a1	74 04		 je	 SHORT $LN25@PyCallClas

; 401  : 			g_pkExceptionSender->Send();

  000a3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a5	ff 10		 call	 DWORD PTR [eax]
$LN25@PyCallClas:

; 402  : 
; 403  : 		Py_DECREF(poFunc);

  000a7	83 06 ff	 add	 DWORD PTR [esi], -1
  000aa	8b 06		 mov	 eax, DWORD PTR [esi]
  000ac	75 0c		 jne	 SHORT $LN23@PyCallClas
  000ae	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b1	56		 push	 esi
  000b2	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000b5	ff d0		 call	 eax
  000b7	83 c4 04	 add	 esp, 4
$LN23@PyCallClas:

; 404  : 		Py_XDECREF(poArgs);

  000ba	85 ff		 test	 edi, edi
  000bc	74 13		 je	 SHORT $LN30@PyCallClas
  000be	83 07 ff	 add	 DWORD PTR [edi], -1
  000c1	8b 07		 mov	 eax, DWORD PTR [edi]
  000c3	75 0c		 jne	 SHORT $LN30@PyCallClas
  000c5	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c8	57		 push	 edi

; 405  : 		return false;

  000c9	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000cc	ff d0		 call	 eax
  000ce	83 c4 04	 add	 esp, 4
$LN30@PyCallClas:
  000d1	5f		 pop	 edi
  000d2	32 c0		 xor	 al, al

; 413  : }

  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN58@PyCallClas:

; 406  : 	}
; 407  : 
; 408  : 	*ppoRet = poRet;

  000d7	8b 45 14	 mov	 eax, DWORD PTR _ppoRet$[ebp]
  000da	89 08		 mov	 DWORD PTR [eax], ecx

; 409  : 
; 410  : 	Py_DECREF(poFunc);

  000dc	83 06 ff	 add	 DWORD PTR [esi], -1
  000df	75 0c		 jne	 SHORT $LN32@PyCallClas
  000e1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e4	56		 push	 esi
  000e5	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000e8	ff d0		 call	 eax
  000ea	83 c4 04	 add	 esp, 4
$LN32@PyCallClas:

; 411  : 	Py_XDECREF(poArgs);

  000ed	85 ff		 test	 edi, edi
  000ef	74 11		 je	 SHORT $LN39@PyCallClas
  000f1	83 07 ff	 add	 DWORD PTR [edi], -1
  000f4	75 0c		 jne	 SHORT $LN39@PyCallClas
  000f6	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000f9	57		 push	 edi
  000fa	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000fd	ff d0		 call	 eax
  000ff	83 c4 04	 add	 esp, 4
$LN39@PyCallClas:

; 412  : 	return true;

  00102	5f		 pop	 edi
  00103	b0 01		 mov	 al, 1

; 413  : }

  00105	5e		 pop	 esi
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
?__PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00PAPAU1@@Z ENDP ; __PyCallClassMemberFunc_ByPyString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z
_TEXT	SEGMENT
_poClass$ = 8						; size = 4
tv228 = 8						; size = 4
tv241 = 8						; size = 4
_c_szFunc$ = 12						; size = 4
_poArgs$ = 16						; size = 4
_ppoRet$ = 20						; size = 4
?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z PROC ; __PyCallClassMemberFunc_ByCString, COMDAT

; 320  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 321  : 	if (!poClass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _poClass$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	85 c0		 test	 eax, eax
  0000a	74 19		 je	 SHORT $LN94@PyCallClas

; 322  : 	{
; 323  : 		Py_XDECREF(poArgs);
; 324  : 		return false;
; 325  : 	}
; 326  : 
; 327  : 	PyObject * poFunc = PyObject_GetAttrString(poClass, (char *)c_szFunc);	// New Reference

  0000c	ff 75 0c	 push	 DWORD PTR _c_szFunc$[ebp]
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyObject_GetAttrString
  00016	8b f0		 mov	 esi, eax
  00018	83 c4 08	 add	 esp, 8

; 328  : 
; 329  : 	if (!poFunc)

  0001b	85 f6		 test	 esi, esi
  0001d	75 2e		 jne	 SHORT $LN46@PyCallClas

; 330  : 	{
; 331  : 		PyErr_Clear();

  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Clear
$LN94@PyCallClas:

; 357  : 		return false;

  00025	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  00028	85 c9		 test	 ecx, ecx
  0002a	0f 84 a1 00 00
	00		 je	 $LN30@PyCallClas
  00030	83 01 ff	 add	 DWORD PTR [ecx], -1
  00033	8b 01		 mov	 eax, DWORD PTR [ecx]
  00035	0f 85 96 00 00
	00		 jne	 $LN30@PyCallClas
  0003b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003e	51		 push	 ecx
  0003f	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00042	ff d0		 call	 eax
  00044	83 c4 04	 add	 esp, 4
  00047	32 c0		 xor	 al, al
  00049	5f		 pop	 edi

; 365  : }

  0004a	5e		 pop	 esi
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN46@PyCallClas:

; 332  : 		Py_XDECREF(poArgs);
; 333  : 		return false;
; 334  : 	}
; 335  : 
; 336  : 	if (!PyCallable_Check(poFunc))

  0004d	56		 push	 esi
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyCallable_Check
  00054	83 c4 04	 add	 esp, 4
  00057	85 c0		 test	 eax, eax
  00059	75 15		 jne	 SHORT $LN51@PyCallClas

; 337  : 	{
; 338  : 		Py_DECREF(poFunc);

  0005b	83 06 ff	 add	 DWORD PTR [esi], -1
  0005e	8b 06		 mov	 eax, DWORD PTR [esi]
  00060	75 c3		 jne	 SHORT $LN94@PyCallClas
  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	56		 push	 esi
  00066	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00069	ff d0		 call	 eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	eb b5		 jmp	 SHORT $LN94@PyCallClas
$LN51@PyCallClas:

; 339  : 		Py_XDECREF(poArgs);
; 340  : 		return false;
; 341  : 	}
; 342  : 
; 343  : 	PyObject * poRet = PyObject_CallObject(poFunc, poArgs);	// New Reference

  00070	8b 7d 10	 mov	 edi, DWORD PTR _poArgs$[ebp]
  00073	57		 push	 edi
  00074	56		 push	 esi
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyObject_CallObject
  0007b	8b c8		 mov	 ecx, eax
  0007d	83 c4 08	 add	 esp, 8

; 344  : 
; 345  : 	if (!poRet)

  00080	85 c9		 test	 ecx, ecx
  00082	75 53		 jne	 SHORT $LN58@PyCallClas

; 346  : 	{
; 347  : 		if (g_pkExceptionSender)

  00084	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pkExceptionSender@@3PAVIPythonExceptionSender@@A ; g_pkExceptionSender
  0008a	85 c9		 test	 ecx, ecx
  0008c	74 05		 je	 SHORT $LN59@PyCallClas

; 348  : 			g_pkExceptionSender->Clear();

  0008e	e8 00 00 00 00	 call	 ?Clear@IPythonExceptionSender@@QAEXXZ ; IPythonExceptionSender::Clear
$LN59@PyCallClas:

; 349  : 
; 350  : 		PyErr_Print();

  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Print

; 351  : 
; 352  : 		if (g_pkExceptionSender)

  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pkExceptionSender@@3PAVIPythonExceptionSender@@A ; g_pkExceptionSender
  0009f	85 c9		 test	 ecx, ecx
  000a1	74 04		 je	 SHORT $LN25@PyCallClas

; 353  : 			g_pkExceptionSender->Send();

  000a3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a5	ff 10		 call	 DWORD PTR [eax]
$LN25@PyCallClas:

; 354  : 
; 355  : 		Py_DECREF(poFunc);

  000a7	83 06 ff	 add	 DWORD PTR [esi], -1
  000aa	8b 06		 mov	 eax, DWORD PTR [esi]
  000ac	75 0c		 jne	 SHORT $LN23@PyCallClas
  000ae	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b1	56		 push	 esi
  000b2	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000b5	ff d0		 call	 eax
  000b7	83 c4 04	 add	 esp, 4
$LN23@PyCallClas:

; 356  : 		Py_XDECREF(poArgs);

  000ba	85 ff		 test	 edi, edi
  000bc	74 13		 je	 SHORT $LN30@PyCallClas
  000be	83 07 ff	 add	 DWORD PTR [edi], -1
  000c1	8b 07		 mov	 eax, DWORD PTR [edi]
  000c3	75 0c		 jne	 SHORT $LN30@PyCallClas
  000c5	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c8	57		 push	 edi

; 357  : 		return false;

  000c9	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000cc	ff d0		 call	 eax
  000ce	83 c4 04	 add	 esp, 4
$LN30@PyCallClas:
  000d1	5f		 pop	 edi
  000d2	32 c0		 xor	 al, al

; 365  : }

  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN58@PyCallClas:

; 358  : 	}
; 359  : 
; 360  : 	*ppoRet = poRet;

  000d7	8b 45 14	 mov	 eax, DWORD PTR _ppoRet$[ebp]
  000da	89 08		 mov	 DWORD PTR [eax], ecx

; 361  : 
; 362  : 	Py_DECREF(poFunc);

  000dc	83 06 ff	 add	 DWORD PTR [esi], -1
  000df	75 0c		 jne	 SHORT $LN32@PyCallClas
  000e1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e4	56		 push	 esi
  000e5	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000e8	ff d0		 call	 eax
  000ea	83 c4 04	 add	 esp, 4
$LN32@PyCallClas:

; 363  : 	Py_XDECREF(poArgs);

  000ed	85 ff		 test	 edi, edi
  000ef	74 11		 je	 SHORT $LN39@PyCallClas
  000f1	83 07 ff	 add	 DWORD PTR [edi], -1
  000f4	75 0c		 jne	 SHORT $LN39@PyCallClas
  000f6	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000f9	57		 push	 edi
  000fa	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000fd	ff d0		 call	 eax
  000ff	83 c4 04	 add	 esp, 4
$LN39@PyCallClas:

; 364  : 	return true;

  00102	5f		 pop	 edi
  00103	b0 01		 mov	 al, 1

; 365  : }

  00105	5e		 pop	 esi
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z ENDP ; __PyCallClassMemberFunc_ByCString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\stdafx.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\scriptLib\stdafx.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\scriptLib\stdafx.h
;	COMDAT ?Clear@IPythonExceptionSender@@QAEXXZ
_TEXT	SEGMENT
?Clear@IPythonExceptionSender@@QAEXXZ PROC		; IPythonExceptionSender::Clear, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00000	83 79 18 0f	 cmp	 DWORD PTR [ecx+24], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00004	76 0e		 jbe	 SHORT $LN84@Clear

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1598 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00010	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Marty 5.5\Src-Client\Client\scriptLib\stdafx.h

; 46   : 		}

  00013	c3		 ret	 0
$LN84@Clear:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00014	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1598 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0001b	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
; File C:\Marty 5.5\Src-Client\Client\scriptLib\stdafx.h

; 46   : 		}

  0001f	c3		 ret	 0
?Clear@IPythonExceptionSender@@QAEXXZ ENDP		; IPythonExceptionSender::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?Py_BuildNone@@YAPAU_object@@XZ
_TEXT	SEGMENT
?Py_BuildNone@@YAPAU_object@@XZ PROC			; Py_BuildNone, COMDAT

; 38   : 	Py_INCREF(Py_None);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___Py_NoneStruct
  00005	ff 00		 inc	 DWORD PTR [eax]

; 39   : 	return Py_None;

  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp___Py_NoneStruct

; 40   : }

  0000c	c3		 ret	 0
?Py_BuildNone@@YAPAU_object@@XZ ENDP			; Py_BuildNone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?Py_BadArgument@@YAPAU_object@@XZ
_TEXT	SEGMENT
?Py_BadArgument@@YAPAU_object@@XZ PROC			; Py_BadArgument, COMDAT

; 13   : 	PyErr_BadArgument();

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_BadArgument

; 14   : 	return NULL;

  00006	33 c0		 xor	 eax, eax

; 15   : }

  00008	c3		 ret	 0
?Py_BadArgument@@YAPAU_object@@XZ ENDP			; Py_BadArgument
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?Py_BuildException@@YAPAU_object@@PBDZZ
_TEXT	SEGMENT
_szErrBuf$1 = -520					; size = 513
__$ArrayPad$ = -4					; size = 4
_c_pszErr$ = 8						; size = 4
?Py_BuildException@@YAPAU_object@@PBDZZ PROC		; Py_BuildException, COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 02 00
	00		 sub	 esp, 520		; 00000208H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 19   : 	if (!c_pszErr)

  00013	8b 45 08	 mov	 eax, DWORD PTR _c_pszErr$[ebp]
  00016	85 c0		 test	 eax, eax
  00018	75 19		 jne	 SHORT $LN2@Py_BuildEx

; 20   : 		PyErr_Clear();

  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_Clear

; 30   : 	}
; 31   : 
; 32   : 	return Py_BuildNone();

  00020	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 33   : 	//return NULL;
; 34   : }

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00028	33 cd		 xor	 ecx, ebp
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN2@Py_BuildEx:
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00033	8d 4d 0c	 lea	 ecx, DWORD PTR _c_pszErr$[ebp+4]
  00036	51		 push	 ecx
  00037	6a 00		 push	 0
  00039	50		 push	 eax
  0003a	8d 85 f8 fd ff
	ff		 lea	 eax, DWORD PTR _szErrBuf$1[ebp]
  00040	68 01 02 00 00	 push	 513			; 00000201H
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	ff 70 04	 push	 DWORD PTR [eax+4]
  00050	83 c9 01	 or	 ecx, 1
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp

; 29   : 		PyErr_SetString(PyExc_RuntimeError, szErrBuf);

  00059	8d 85 f8 fd ff
	ff		 lea	 eax, DWORD PTR _szErrBuf$1[ebp]
  0005f	50		 push	 eax
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__PyExc_RuntimeError
  00065	ff 30		 push	 DWORD PTR [eax]
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyErr_SetString
  0006d	83 c4 24	 add	 esp, 36			; 00000024H

; 30   : 	}
; 31   : 
; 32   : 	return Py_BuildNone();

  00070	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 33   : 	//return NULL;
; 34   : }

  00075	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00078	33 cd		 xor	 ecx, ebp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?Py_BuildException@@YAPAU_object@@PBDZZ ENDP		; Py_BuildException
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyCallClassMemberFunc@@YA_NPAU_object@@00@Z
_TEXT	SEGMENT
_poClass$ = 8						; size = 4
_poRet$ = 8						; size = 4
tv132 = 8						; size = 4
tv143 = 8						; size = 4
_poFunc$ = 12						; size = 4
_poArgs$ = 16						; size = 4
?PyCallClassMemberFunc@@YA_NPAU_object@@00@Z PROC	; PyCallClassMemberFunc, COMDAT

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 235  : 	PyObject* poRet;
; 236  : 
; 237  : 	if (!poClass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _poClass$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 1e		 jne	 SHORT $LN11@PyCallClas

; 238  : 	{
; 239  : 		Py_XDECREF(poArgs);

  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  0000d	85 c9		 test	 ecx, ecx
  0000f	74 2e		 je	 SHORT $LN20@PyCallClas
  00011	83 01 ff	 add	 DWORD PTR [ecx], -1
  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	75 27		 jne	 SHORT $LN20@PyCallClas
  00018	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001b	51		 push	 ecx
  0001c	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0001f	ff d0		 call	 eax
  00021	83 c4 04	 add	 esp, 4

; 244  : 		return false;

  00024	32 c0		 xor	 al, al

; 248  : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN11@PyCallClas:

; 240  : 		return false;
; 241  : 	}
; 242  : 
; 243  : 	if (!__PyCallClassMemberFunc(poClass, poFunc, poArgs, &poRet))

  00028	8d 4d 08	 lea	 ecx, DWORD PTR _poRet$[ebp]
  0002b	51		 push	 ecx
  0002c	ff 75 10	 push	 DWORD PTR _poArgs$[ebp]
  0002f	ff 75 0c	 push	 DWORD PTR _poFunc$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?__PyCallClassMemberFunc@@YA_NPAU_object@@00PAPAU1@@Z ; __PyCallClassMemberFunc
  00038	83 c4 10	 add	 esp, 16			; 00000010H
  0003b	84 c0		 test	 al, al
  0003d	75 04		 jne	 SHORT $LN10@PyCallClas
$LN20@PyCallClas:

; 244  : 		return false;

  0003f	32 c0		 xor	 al, al

; 248  : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN10@PyCallClas:

; 245  : 
; 246  : 	Py_DECREF(poRet);

  00043	8b 4d 08	 mov	 ecx, DWORD PTR _poRet$[ebp]
  00046	83 01 ff	 add	 DWORD PTR [ecx], -1
  00049	75 0c		 jne	 SHORT $LN8@PyCallClas
  0004b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004e	51		 push	 ecx
  0004f	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00052	ff d0		 call	 eax
  00054	83 c4 04	 add	 esp, 4
$LN8@PyCallClas:

; 247  : 	return true;

  00057	b0 01		 mov	 al, 1

; 248  : }

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?PyCallClassMemberFunc@@YA_NPAU_object@@00@Z ENDP	; PyCallClassMemberFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00@Z
_TEXT	SEGMENT
_poClass$ = 8						; size = 4
_poRet$ = 8						; size = 4
tv132 = 8						; size = 4
tv143 = 8						; size = 4
_poFuncName$ = 12					; size = 4
_poArgs$ = 16						; size = 4
?PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00@Z PROC ; PyCallClassMemberFunc_ByPyString, COMDAT

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 269  : 	PyObject* poRet;
; 270  : 
; 271  : 	if (!poClass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _poClass$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 1e		 jne	 SHORT $LN11@PyCallClas

; 272  : 	{
; 273  : 		Py_XDECREF(poArgs);

  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  0000d	85 c9		 test	 ecx, ecx
  0000f	74 2e		 je	 SHORT $LN20@PyCallClas
  00011	83 01 ff	 add	 DWORD PTR [ecx], -1
  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	75 27		 jne	 SHORT $LN20@PyCallClas
  00018	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001b	51		 push	 ecx
  0001c	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0001f	ff d0		 call	 eax
  00021	83 c4 04	 add	 esp, 4

; 278  : 		return false;

  00024	32 c0		 xor	 al, al

; 282  : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN11@PyCallClas:

; 274  : 		return false;
; 275  : 	}
; 276  : 
; 277  : 	if (!__PyCallClassMemberFunc_ByPyString(poClass, poFuncName, poArgs, &poRet))

  00028	8d 4d 08	 lea	 ecx, DWORD PTR _poRet$[ebp]
  0002b	51		 push	 ecx
  0002c	ff 75 10	 push	 DWORD PTR _poArgs$[ebp]
  0002f	ff 75 0c	 push	 DWORD PTR _poFuncName$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?__PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00PAPAU1@@Z ; __PyCallClassMemberFunc_ByPyString
  00038	83 c4 10	 add	 esp, 16			; 00000010H
  0003b	84 c0		 test	 al, al
  0003d	75 04		 jne	 SHORT $LN10@PyCallClas
$LN20@PyCallClas:

; 278  : 		return false;

  0003f	32 c0		 xor	 al, al

; 282  : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN10@PyCallClas:

; 279  : 
; 280  : 	Py_DECREF(poRet);

  00043	8b 4d 08	 mov	 ecx, DWORD PTR _poRet$[ebp]
  00046	83 01 ff	 add	 DWORD PTR [ecx], -1
  00049	75 0c		 jne	 SHORT $LN8@PyCallClas
  0004b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004e	51		 push	 ecx
  0004f	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00052	ff d0		 call	 eax
  00054	83 c4 04	 add	 esp, 4
$LN8@PyCallClas:

; 281  : 	return true;

  00057	b0 01		 mov	 al, 1

; 282  : }

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?PyCallClassMemberFunc_ByPyString@@YA_NPAU_object@@00@Z ENDP ; PyCallClassMemberFunc_ByPyString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PAJ@Z
_TEXT	SEGMENT
_poRet$ = -4						; size = 4
tv166 = -4						; size = 4
tv176 = -4						; size = 4
_poClass$ = 8						; size = 4
_c_szFunc$ = 12						; size = 4
_poArgs$ = 16						; size = 4
_plRetValue$ = 20					; size = 4
?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PAJ@Z PROC	; PyCallClassMemberFunc, COMDAT

; 301  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 302  : 	PyObject* poRet;
; 303  : 
; 304  : 	if (!__PyCallClassMemberFunc_ByCString(poClass, c_szFunc, poArgs, &poRet))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _poRet$[ebp]
  00008	50		 push	 eax
  00009	ff 75 10	 push	 DWORD PTR _poArgs$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR _c_szFunc$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR _poClass$[ebp]
  00012	e8 00 00 00 00	 call	 ?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z ; __PyCallClassMemberFunc_ByCString
  00017	83 c4 10	 add	 esp, 16			; 00000010H
  0001a	84 c0		 test	 al, al
  0001c	74 4b		 je	 SHORT $LN5@PyCallClas

; 305  : 		return false;
; 306  : 
; 307  : 	if (PyNumber_Check(poRet))

  0001e	8b 75 fc	 mov	 esi, DWORD PTR _poRet$[ebp]
  00021	56		 push	 esi
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyNumber_Check
  00028	83 c4 04	 add	 esp, 4
  0002b	85 c0		 test	 eax, eax
  0002d	74 27		 je	 SHORT $LN7@PyCallClas

; 308  : 	{
; 309  : 		*plRetValue = PyLong_AsLong(poRet);

  0002f	56		 push	 esi
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  00036	8b 4d 14	 mov	 ecx, DWORD PTR _plRetValue$[ebp]
  00039	83 c4 04	 add	 esp, 4
  0003c	89 01		 mov	 DWORD PTR [ecx], eax

; 310  : 		Py_DECREF(poRet);

  0003e	83 06 ff	 add	 DWORD PTR [esi], -1
  00041	75 0c		 jne	 SHORT $LN2@PyCallClas
  00043	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00046	56		 push	 esi
  00047	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0004a	ff d0		 call	 eax
  0004c	83 c4 04	 add	 esp, 4
$LN2@PyCallClas:

; 311  : 		return true;

  0004f	b0 01		 mov	 al, 1
  00051	5e		 pop	 esi

; 316  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN7@PyCallClas:

; 312  : 	}
; 313  : 
; 314  : 	Py_DECREF(poRet);

  00056	83 06 ff	 add	 DWORD PTR [esi], -1
  00059	8b 06		 mov	 eax, DWORD PTR [esi]
  0005b	75 0c		 jne	 SHORT $LN5@PyCallClas
  0005d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00060	56		 push	 esi
  00061	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00064	ff d0		 call	 eax
  00066	83 c4 04	 add	 esp, 4
$LN5@PyCallClas:

; 315  : 	return false;

  00069	32 c0		 xor	 al, al
  0006b	5e		 pop	 esi

; 316  : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PAJ@Z ENDP	; PyCallClassMemberFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PA_N@Z
_TEXT	SEGMENT
_poRet$ = -4						; size = 4
tv170 = -4						; size = 4
_poClass$ = 8						; size = 4
_c_szFunc$ = 12						; size = 4
_poArgs$ = 16						; size = 4
_pisRet$ = 20						; size = 4
?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PA_N@Z PROC	; PyCallClassMemberFunc, COMDAT

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 286  : 	PyObject* poRet;
; 287  : 
; 288  : 	if (!__PyCallClassMemberFunc_ByCString(poClass, c_szFunc, poArgs, &poRet))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _poRet$[ebp]
  00007	50		 push	 eax
  00008	ff 75 10	 push	 DWORD PTR _poArgs$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR _c_szFunc$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _poClass$[ebp]
  00011	e8 00 00 00 00	 call	 ?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z ; __PyCallClassMemberFunc_ByCString
  00016	83 c4 10	 add	 esp, 16			; 00000010H
  00019	84 c0		 test	 al, al
  0001b	75 04		 jne	 SHORT $LN5@PyCallClas

; 298  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN5@PyCallClas:
  00021	56		 push	 esi

; 289  : 		return false;
; 290  : 
; 291  : 	if (PyNumber_Check(poRet))

  00022	8b 75 fc	 mov	 esi, DWORD PTR _poRet$[ebp]
  00025	56		 push	 esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyNumber_Check
  0002c	83 c4 04	 add	 esp, 4
  0002f	85 c0		 test	 eax, eax
  00031	74 12		 je	 SHORT $LN6@PyCallClas

; 292  : 		*pisRet = (PyLong_AsLong(poRet) != 0);

  00033	56		 push	 esi
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  0003a	83 c4 04	 add	 esp, 4
  0003d	0b c2		 or	 eax, edx
  0003f	75 04		 jne	 SHORT $LN6@PyCallClas
  00041	32 c9		 xor	 cl, cl
  00043	eb 02		 jmp	 SHORT $LN4@PyCallClas
$LN6@PyCallClas:

; 293  : 	else
; 294  : 		*pisRet = true;
; 295  : 
; 296  : 	Py_DECREF(poRet);

  00045	b1 01		 mov	 cl, 1
$LN4@PyCallClas:
  00047	8b 45 14	 mov	 eax, DWORD PTR _pisRet$[ebp]
  0004a	88 08		 mov	 BYTE PTR [eax], cl
  0004c	83 06 ff	 add	 DWORD PTR [esi], -1
  0004f	75 0c		 jne	 SHORT $LN2@PyCallClas
  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	56		 push	 esi
  00055	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00058	ff d0		 call	 eax
  0005a	83 c4 04	 add	 esp, 4
$LN2@PyCallClas:

; 297  : 	return true;

  0005d	b0 01		 mov	 al, 1
  0005f	5e		 pop	 esi

; 298  : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0PA_N@Z ENDP	; PyCallClassMemberFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z
_TEXT	SEGMENT
_poClass$ = 8						; size = 4
_poRet$ = 8						; size = 4
tv132 = 8						; size = 4
tv143 = 8						; size = 4
_c_szFunc$ = 12						; size = 4
_poArgs$ = 16						; size = 4
?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z PROC	; PyCallClassMemberFunc, COMDAT

; 251  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 252  : 	PyObject* poRet;
; 253  : 
; 254  : 	if (!poClass)

  00003	8b 45 08	 mov	 eax, DWORD PTR _poClass$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 1e		 jne	 SHORT $LN11@PyCallClas

; 255  : 	{
; 256  : 		Py_XDECREF(poArgs);

  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _poArgs$[ebp]
  0000d	85 c9		 test	 ecx, ecx
  0000f	74 2e		 je	 SHORT $LN20@PyCallClas
  00011	83 01 ff	 add	 DWORD PTR [ecx], -1
  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	75 27		 jne	 SHORT $LN20@PyCallClas
  00018	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001b	51		 push	 ecx
  0001c	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0001f	ff d0		 call	 eax
  00021	83 c4 04	 add	 esp, 4

; 261  : 		return false;

  00024	32 c0		 xor	 al, al

; 265  : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN11@PyCallClas:

; 257  : 		return false;
; 258  : 	}
; 259  : 
; 260  : 	if (!__PyCallClassMemberFunc_ByCString(poClass, c_szFunc, poArgs, &poRet))

  00028	8d 4d 08	 lea	 ecx, DWORD PTR _poRet$[ebp]
  0002b	51		 push	 ecx
  0002c	ff 75 10	 push	 DWORD PTR _poArgs$[ebp]
  0002f	ff 75 0c	 push	 DWORD PTR _c_szFunc$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?__PyCallClassMemberFunc_ByCString@@YA_NPAU_object@@PBD0PAPAU1@@Z ; __PyCallClassMemberFunc_ByCString
  00038	83 c4 10	 add	 esp, 16			; 00000010H
  0003b	84 c0		 test	 al, al
  0003d	75 04		 jne	 SHORT $LN10@PyCallClas
$LN20@PyCallClas:

; 261  : 		return false;

  0003f	32 c0		 xor	 al, al

; 265  : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN10@PyCallClas:

; 262  : 
; 263  : 	Py_DECREF(poRet);

  00043	8b 4d 08	 mov	 ecx, DWORD PTR _poRet$[ebp]
  00046	83 01 ff	 add	 DWORD PTR [ecx], -1
  00049	75 0c		 jne	 SHORT $LN8@PyCallClas
  0004b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004e	51		 push	 ecx
  0004f	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00052	ff d0		 call	 eax
  00054	83 c4 04	 add	 esp, 4
$LN8@PyCallClas:

; 264  : 	return true;

  00057	b0 01		 mov	 al, 1

; 265  : }

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ENDP	; PyCallClassMemberFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z PROC	; PyTuple_GetBoolean, COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 221  : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 35		 jge	 SHORT $LN7@PyTuple_Ge

; 222  : 		return false;
; 223  : 
; 224  : 	PyObject* poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 225  : 
; 226  : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 24		 je	 SHORT $LN7@PyTuple_Ge

; 228  : 
; 229  : 	*ret = PyLong_AsLong(poItem) ? true : false;

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  0002e	83 c4 04	 add	 esp, 4
  00031	0b c2		 or	 eax, edx
  00033	74 0b		 je	 SHORT $LN5@PyTuple_Ge
  00035	8b 45 10	 mov	 eax, DWORD PTR _ret$[ebp]
  00038	b1 01		 mov	 cl, 1
  0003a	88 08		 mov	 BYTE PTR [eax], cl

; 230  : 	return true;

  0003c	8a c1		 mov	 al, cl

; 231  : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN5@PyTuple_Ge:

; 228  : 
; 229  : 	*ret = PyLong_AsLong(poItem) ? true : false;

  00040	8b 45 10	 mov	 eax, DWORD PTR _ret$[ebp]
  00043	32 c9		 xor	 cl, cl
  00045	88 08		 mov	 BYTE PTR [eax], cl

; 230  : 	return true;

  00047	b0 01		 mov	 al, 1

; 231  : }

  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN7@PyTuple_Ge:

; 227  : 		return false;

  0004b	32 c0		 xor	 al, al

; 231  : }

  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z ENDP	; PyTuple_GetBoolean
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z PROC	; PyTuple_GetObject, COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 1a		 jge	 SHORT $LN5@PyTuple_Ge

; 50   : 		return false;
; 51   : 
; 52   : 	PyObject * poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 53   : 
; 54   : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 09		 je	 SHORT $LN5@PyTuple_Ge

; 56   : 
; 57   : 	*ret = poItem;

  00027	8b 4d 10	 mov	 ecx, DWORD PTR _ret$[ebp]
  0002a	89 01		 mov	 DWORD PTR [ecx], eax

; 58   : 	return true;

  0002c	b0 01		 mov	 al, 1

; 59   : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN5@PyTuple_Ge:

; 55   : 		return false;

  00030	32 c0		 xor	 al, al

; 59   : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?PyTuple_GetObject@@YA_NPAU_object@@HPAPAU1@@Z ENDP	; PyTuple_GetObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetDouble@@YA_NPAU_object@@HPAN@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetDouble@@YA_NPAU_object@@HPAN@Z PROC		; PyTuple_GetDouble, COMDAT

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 107  : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 24		 jge	 SHORT $LN5@PyTuple_Ge

; 108  : 		return false;
; 109  : 
; 110  : 	PyObject* poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 111  : 
; 112  : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 13		 je	 SHORT $LN5@PyTuple_Ge

; 114  : 
; 115  : 	*ret = PyFloat_AsDouble(poItem);

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyFloat_AsDouble
  0002e	8b 45 10	 mov	 eax, DWORD PTR _ret$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	dd 18		 fstp	 QWORD PTR [eax]

; 116  : 	return true;

  00036	b0 01		 mov	 al, 1

; 117  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN5@PyTuple_Ge:

; 113  : 		return false;

  0003a	32 c0		 xor	 al, al

; 117  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?PyTuple_GetDouble@@YA_NPAU_object@@HPAN@Z ENDP		; PyTuple_GetDouble
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z PROC		; PyTuple_GetFloat, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 121  : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 24		 jge	 SHORT $LN5@PyTuple_Ge

; 122  : 		return false;
; 123  : 
; 124  : 	PyObject * poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 125  : 
; 126  : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 13		 je	 SHORT $LN5@PyTuple_Ge

; 128  : 
; 129  : 	*ret = float(PyFloat_AsDouble(poItem));

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyFloat_AsDouble
  0002e	8b 45 10	 mov	 eax, DWORD PTR _ret$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	d9 18		 fstp	 DWORD PTR [eax]

; 130  : 	return true;

  00036	b0 01		 mov	 al, 1

; 131  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN5@PyTuple_Ge:

; 127  : 		return false;

  0003a	32 c0		 xor	 al, al

; 131  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ENDP		; PyTuple_GetFloat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetLongLong@@YA_NPAU_object@@HPA_J@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetLongLong@@YA_NPAU_object@@HPA_J@Z PROC	; PyTuple_GetLongLong, COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 78   : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 27		 jge	 SHORT $LN5@PyTuple_Ge

; 79   : 		return false;
; 80   : 
; 81   : 	PyObject * poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 82   : 	
; 83   : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 16		 je	 SHORT $LN5@PyTuple_Ge

; 85   : 	
; 86   : 	*ret = PyLong_AsLongLong(poItem);

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _ret$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	89 01		 mov	 DWORD PTR [ecx], eax

; 87   : 	return true;

  00036	b0 01		 mov	 al, 1
  00038	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 88   : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
$LN5@PyTuple_Ge:

; 84   : 		return false;

  0003d	32 c0		 xor	 al, al

; 88   : }

  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?PyTuple_GetLongLong@@YA_NPAU_object@@HPA_J@Z ENDP	; PyTuple_GetLongLong
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetUnsignedLong@@YA_NPAU_object@@HPAK@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetUnsignedLong@@YA_NPAU_object@@HPAK@Z PROC	; PyTuple_GetUnsignedLong, COMDAT

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 175  : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 24		 jge	 SHORT $LN5@PyTuple_Ge

; 176  : 		return false;
; 177  : 
; 178  : 	PyObject * poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 179  : 
; 180  : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 13		 je	 SHORT $LN5@PyTuple_Ge

; 182  : 
; 183  : 	*ret = PyLong_AsUnsignedLong(poItem);

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _ret$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	89 01		 mov	 DWORD PTR [ecx], eax

; 184  : 	return true;

  00036	b0 01		 mov	 al, 1

; 185  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN5@PyTuple_Ge:

; 181  : 		return false;

  0003a	32 c0		 xor	 al, al

; 185  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?PyTuple_GetUnsignedLong@@YA_NPAU_object@@HPAK@Z ENDP	; PyTuple_GetUnsignedLong
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetLong@@YA_NPAU_object@@HPAJ@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetLong@@YA_NPAU_object@@HPAJ@Z PROC		; PyTuple_GetLong, COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 24		 jge	 SHORT $LN5@PyTuple_Ge

; 64   : 		return false;
; 65   : 
; 66   : 	PyObject* poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 67   : 
; 68   : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 13		 je	 SHORT $LN5@PyTuple_Ge

; 70   : 
; 71   : 	*ret = PyLong_AsLong(poItem);

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _ret$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	89 01		 mov	 DWORD PTR [ecx], eax

; 72   : 	return true;

  00036	b0 01		 mov	 al, 1

; 73   : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN5@PyTuple_Ge:

; 69   : 		return false;

  0003a	32 c0		 xor	 al, al

; 73   : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?PyTuple_GetLong@@YA_NPAU_object@@HPAJ@Z ENDP		; PyTuple_GetLong
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetUnsignedInteger@@YA_NPAU_object@@HPAI@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetUnsignedInteger@@YA_NPAU_object@@HPAI@Z PROC ; PyTuple_GetUnsignedInteger, COMDAT

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 190  : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 24		 jge	 SHORT $LN5@PyTuple_Ge

; 191  : 		return false;
; 192  : 
; 193  : 	PyObject* poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 194  : 
; 195  : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 13		 je	 SHORT $LN5@PyTuple_Ge

; 197  : 
; 198  : 	*ret = PyLong_AsUnsignedLong(poItem);

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _ret$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	89 01		 mov	 DWORD PTR [ecx], eax

; 199  : 	return true;

  00036	b0 01		 mov	 al, 1

; 200  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN5@PyTuple_Ge:

; 196  : 		return false;

  0003a	32 c0		 xor	 al, al

; 200  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?PyTuple_GetUnsignedInteger@@YA_NPAU_object@@HPAI@Z ENDP ; PyTuple_GetUnsignedInteger
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetByte@@YA_NPAU_object@@HPAE@Z
_TEXT	SEGMENT
_val$ = -4						; size = 4
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetByte@@YA_NPAU_object@@HPAE@Z PROC		; PyTuple_GetByte, COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 135  : 	int val;
; 136  : 	bool result = PyTuple_GetInteger(poArgs,pos,&val);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _val$[ebp]
  00007	50		 push	 eax
  00008	ff 75 0c	 push	 DWORD PTR _pos$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0000e	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger

; 137  : 	*ret = unsigned char(val);

  00013	8b 55 10	 mov	 edx, DWORD PTR _ret$[ebp]
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	8a 4d fc	 mov	 cl, BYTE PTR _val$[ebp]
  0001c	88 0a		 mov	 BYTE PTR [edx], cl

; 138  : 	return result;
; 139  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?PyTuple_GetByte@@YA_NPAU_object@@HPAE@Z ENDP		; PyTuple_GetByte
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetInteger@@YA_NPAU_object@@HPAG@Z
_TEXT	SEGMENT
_val$ = -4						; size = 4
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetInteger@@YA_NPAU_object@@HPAG@Z PROC	; PyTuple_GetInteger, COMDAT

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 151  : 	int val;
; 152  : 	bool result = PyTuple_GetInteger(poArgs,pos,&val);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _val$[ebp]
  00007	50		 push	 eax
  00008	ff 75 0c	 push	 DWORD PTR _pos$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0000e	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger

; 153  : 	*ret = WORD(val);

  00013	8b 55 10	 mov	 edx, DWORD PTR _ret$[ebp]
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	66 8b 4d fc	 mov	 cx, WORD PTR _val$[ebp]
  0001d	66 89 0a	 mov	 WORD PTR [edx], cx

; 154  : 	return result;
; 155  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?PyTuple_GetInteger@@YA_NPAU_object@@HPAG@Z ENDP	; PyTuple_GetInteger
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z PROC	; PyTuple_GetInteger, COMDAT

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 159  : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 24		 jge	 SHORT $LN5@PyTuple_Ge

; 160  : 		return false;
; 161  : 
; 162  : 	PyObject* poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 163  : 
; 164  : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 13		 je	 SHORT $LN5@PyTuple_Ge

; 166  : 
; 167  : 	*ret = PyLong_AsLong(poItem);

  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyLong_AsLongLong
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _ret$[ebp]
  00031	83 c4 04	 add	 esp, 4
  00034	89 01		 mov	 DWORD PTR [ecx], eax

; 168  : 	return true;

  00036	b0 01		 mov	 al, 1

; 169  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN5@PyTuple_Ge:

; 165  : 		return false;

  0003a	32 c0		 xor	 al, al

; 169  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ENDP	; PyTuple_GetInteger
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z
_TEXT	SEGMENT
_val$ = -4						; size = 4
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z PROC	; PyTuple_GetInteger, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 143  : 	int val;
; 144  : 	bool result = PyTuple_GetInteger(poArgs,pos,&val);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _val$[ebp]
  00007	50		 push	 eax
  00008	ff 75 0c	 push	 DWORD PTR _pos$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0000e	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger

; 145  : 	*ret = unsigned char(val);

  00013	8b 55 10	 mov	 edx, DWORD PTR _ret$[ebp]
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	8a 4d fc	 mov	 cl, BYTE PTR _val$[ebp]
  0001c	88 0a		 mov	 BYTE PTR [edx], cl

; 146  : 	return result;
; 147  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z ENDP	; PyTuple_GetInteger
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\scriptLib\PythonUtils.cpp
;	COMDAT ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z
_TEXT	SEGMENT
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ret$ = 16						; size = 4
?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z PROC	; PyTuple_GetString, COMDAT

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 	if (pos >= PyTuple_Size(poArgs))

  00003	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
  0000f	83 c4 04	 add	 esp, 4
  00012	3b c8		 cmp	 ecx, eax
  00014	7d 30		 jge	 SHORT $LN6@PyTuple_Ge

; 205  : 		return false;
; 206  : 
; 207  : 	PyObject* poItem = PyTuple_GetItem(poArgs, pos);

  00016	51		 push	 ecx
  00017	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_GetItem
  00020	83 c4 08	 add	 esp, 8

; 208  : 
; 209  : 	if (!poItem)

  00023	85 c0		 test	 eax, eax
  00025	74 1f		 je	 SHORT $LN6@PyTuple_Ge

; 210  : 		return false;
; 211  : 
; 212  : 	if (!PyString_Check(poItem))

  00027	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002a	f7 41 54 00 00
	00 08		 test	 DWORD PTR [ecx+84], 134217728 ; 08000000H
  00031	74 13		 je	 SHORT $LN6@PyTuple_Ge

; 214  : 
; 215  : 	*ret = PyString_AsString(poItem);

  00033	50		 push	 eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyString_AsString
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _ret$[ebp]
  0003d	83 c4 04	 add	 esp, 4
  00040	89 01		 mov	 DWORD PTR [ecx], eax

; 216  : 	return true;

  00042	b0 01		 mov	 al, 1

; 217  : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN6@PyTuple_Ge:

; 213  : 		return false;

  00046	32 c0		 xor	 al, al

; 217  : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ENDP	; PyTuple_GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
