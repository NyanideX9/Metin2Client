; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\eterPythonLib\Distribute\PythonGraphicTextModule.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	?initgrpText@@YAXXZ				; initgrpText
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
PUBLIC	?grpTextGenerate@@YAPAU_object@@PAU1@0@Z	; grpTextGenerate
PUBLIC	?grpTextDestroy@@YAPAU_object@@PAU1@0@Z		; grpTextDestroy
PUBLIC	?grpTextGetSize@@YAPAU_object@@PAU1@0@Z		; grpTextGetSize
PUBLIC	?grpTextSetPosition@@YAPAU_object@@PAU1@0@Z	; grpTextSetPosition
PUBLIC	?grpTextSetText@@YAPAU_object@@PAU1@0@Z		; grpTextSetText
PUBLIC	?grpTextSetSecret@@YAPAU_object@@PAU1@0@Z	; grpTextSetSecret
PUBLIC	?grpTextOutline@@YAPAU_object@@PAU1@0@Z		; grpTextOutline
PUBLIC	?grpTextGetText@@YAPAU_object@@PAU1@0@Z		; grpTextGetText
PUBLIC	?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z	; grpTextSetFontName
PUBLIC	?grpTextSetFontColor@@YAPAU_object@@PAU1@0@Z	; grpTextSetFontColor
PUBLIC	?grpTextSetOutLineColor@@YAPAU_object@@PAU1@0@Z	; grpTextSetOutLineColor
PUBLIC	?grpTextRender@@YAPAU_object@@PAU1@0@Z		; grpTextRender
PUBLIC	?grpTextUpdate@@YAPAU_object@@PAU1@0@Z		; grpTextUpdate
PUBLIC	?grpTextShowCursor@@YAPAU_object@@PAU1@0@Z	; grpTextShowCursor
PUBLIC	?grpTextHideCursor@@YAPAU_object@@PAU1@0@Z	; grpTextHideCursor
PUBLIC	?grpSetHorizontalAlign@@YAPAU_object@@PAU1@0@Z	; grpSetHorizontalAlign
PUBLIC	?grpSetVerticalAlign@@YAPAU_object@@PAU1@0@Z	; grpSetVerticalAlign
PUBLIC	?grpSetMax@@YAPAU_object@@PAU1@0@Z		; grpSetMax
PUBLIC	?grpGetSplitingTextLineCount@@YAPAU_object@@PAU1@0@Z ; grpGetSplitingTextLineCount
PUBLIC	?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z	; grpGetSplitingTextLine
PUBLIC	?grpTextPixelPositionToCharacterPosition@@YAPAU_object@@PAU1@0@Z ; grpTextPixelPositionToCharacterPosition
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_01KBJDNOO@i@				; `string'
PUBLIC	??_C@_06BGHJALJH@?$CIi?0?5i?$CJ@		; `string'
PUBLIC	??_C@_01LKDEMHDF@s@				; `string'
PUBLIC	??_C@_04FAHLGLIA@?4fnt@				; `string'
PUBLIC	??_C@_06LMAGPFNF@Update@			; `string'
PUBLIC	??_C@_06EPLDPNDB@Render@			; `string'
PUBLIC	??_C@_08PDEEPOLG@Generate@			; `string'
PUBLIC	??_C@_07BDCAJABG@Destroy@			; `string'
PUBLIC	??_C@_0M@MCELKPNO@SetFontName@			; `string'
PUBLIC	??_C@_0N@MKCFOAAE@SetFontColor@			; `string'
PUBLIC	??_C@_0BA@MNDFNKJH@SetOutLineColor@		; `string'
PUBLIC	??_C@_09CAFHEMDD@SetSecret@			; `string'
PUBLIC	??_C@_0L@HBNEJDMM@SetOutline@			; `string'
PUBLIC	??_C@_07NIJDBDAG@SetText@			; `string'
PUBLIC	??_C@_07CAGCCMNH@GetText@			; `string'
PUBLIC	??_C@_07IIMJLIAB@GetSize@			; `string'
PUBLIC	??_C@_0M@GKIFPNAD@SetPosition@			; `string'
PUBLIC	??_C@_0L@BIENLPGM@ShowCursor@			; `string'
PUBLIC	??_C@_0L@MGJDDPFG@HideCursor@			; `string'
PUBLIC	??_C@_0BD@FCLDCEMA@SetHorizontalAlign@		; `string'
PUBLIC	??_C@_0BB@NKHPOFIC@SetVerticalAlign@		; `string'
PUBLIC	??_C@_06ODEINJEE@SetMax@			; `string'
PUBLIC	??_C@_0BJ@JAMBOGDP@GetSplitingTextLineCount@	; `string'
PUBLIC	??_C@_0BE@NHLLEHMO@GetSplitingTextLine@		; `string'
PUBLIC	??_C@_0CB@NLPGLAHJ@PixelPositionToCharacterPositio@ ; `string'
PUBLIC	??_C@_07OAPMKONH@grpText@			; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__imp__PyTuple_Size:PROC
EXTRN	__imp__Py_BuildValue:PROC
EXTRN	__imp__Py_InitModule4:PROC
EXTRN	?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z:PROC ; PyTuple_GetString
EXTRN	?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z:PROC ; PyTuple_GetInteger
EXTRN	?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z:PROC	; PyTuple_GetFloat
EXTRN	?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z:PROC ; PyTuple_GetBoolean
EXTRN	?Py_BuildException@@YAPAU_object@@PBDZZ:PROC	; Py_BuildException
EXTRN	?Py_BuildNone@@YAPAU_object@@XZ:PROC		; Py_BuildNone
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?Update@CGraphicTextInstance@@QAEXXZ:PROC	; CGraphicTextInstance::Update
EXTRN	?Render@CGraphicTextInstance@@QAEXPAUtagRECT@@@Z:PROC ; CGraphicTextInstance::Render
EXTRN	?ShowCursor@CGraphicTextInstance@@QAEXXZ:PROC	; CGraphicTextInstance::ShowCursor
EXTRN	?HideCursor@CGraphicTextInstance@@QAEXXZ:PROC	; CGraphicTextInstance::HideCursor
EXTRN	?SetColor@CGraphicTextInstance@@QAEXK@Z:PROC	; CGraphicTextInstance::SetColor
EXTRN	?SetColor@CGraphicTextInstance@@QAEXMMMM@Z:PROC	; CGraphicTextInstance::SetColor
EXTRN	?SetOutLineColor@CGraphicTextInstance@@QAEXMMMM@Z:PROC ; CGraphicTextInstance::SetOutLineColor
EXTRN	?SetHorizonalAlign@CGraphicTextInstance@@QAEXH@Z:PROC ; CGraphicTextInstance::SetHorizonalAlign
EXTRN	?SetVerticalAlign@CGraphicTextInstance@@QAEXH@Z:PROC ; CGraphicTextInstance::SetVerticalAlign
EXTRN	?SetMax@CGraphicTextInstance@@QAEXH@Z:PROC	; CGraphicTextInstance::SetMax
EXTRN	?SetTextPointer@CGraphicTextInstance@@QAEXPAVCGraphicText@@@Z:PROC ; CGraphicTextInstance::SetTextPointer
EXTRN	?SetValue@CGraphicTextInstance@@QAEXPBDI@Z:PROC	; CGraphicTextInstance::SetValue
EXTRN	?SetPosition@CGraphicTextInstance@@QAEXMMM@Z:PROC ; CGraphicTextInstance::SetPosition
EXTRN	?SetSecret@CGraphicTextInstance@@QAEX_N@Z:PROC	; CGraphicTextInstance::SetSecret
EXTRN	?SetOutline@CGraphicTextInstance@@QAEX_N@Z:PROC	; CGraphicTextInstance::SetOutline
EXTRN	?GetTextSize@CGraphicTextInstance@@QAEXPAH0@Z:PROC ; CGraphicTextInstance::GetTextSize
EXTRN	?GetValueStringReference@CGraphicTextInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; CGraphicTextInstance::GetValueStringReference
EXTRN	?PixelPositionToCharacterPosition@CGraphicTextInstance@@QAEHH@Z:PROC ; CGraphicTextInstance::PixelPositionToCharacterPosition
EXTRN	?New@CGraphicTextInstance@@SAPAV1@XZ:PROC	; CGraphicTextInstance::New
EXTRN	?Delete@CGraphicTextInstance@@SAXPAV1@@Z:PROC	; CGraphicTextInstance::Delete
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_C@_07OAPMKONH@grpText@
CONST	SEGMENT
??_C@_07OAPMKONH@grpText@ DB 'grpText', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NLPGLAHJ@PixelPositionToCharacterPositio@
CONST	SEGMENT
??_C@_0CB@NLPGLAHJ@PixelPositionToCharacterPositio@ DB 'PixelPositionToCh'
	DB	'aracterPosition', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NHLLEHMO@GetSplitingTextLine@
CONST	SEGMENT
??_C@_0BE@NHLLEHMO@GetSplitingTextLine@ DB 'GetSplitingTextLine', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JAMBOGDP@GetSplitingTextLineCount@
CONST	SEGMENT
??_C@_0BJ@JAMBOGDP@GetSplitingTextLineCount@ DB 'GetSplitingTextLineCount'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODEINJEE@SetMax@
CONST	SEGMENT
??_C@_06ODEINJEE@SetMax@ DB 'SetMax', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NKHPOFIC@SetVerticalAlign@
CONST	SEGMENT
??_C@_0BB@NKHPOFIC@SetVerticalAlign@ DB 'SetVerticalAlign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FCLDCEMA@SetHorizontalAlign@
CONST	SEGMENT
??_C@_0BD@FCLDCEMA@SetHorizontalAlign@ DB 'SetHorizontalAlign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MGJDDPFG@HideCursor@
CONST	SEGMENT
??_C@_0L@MGJDDPFG@HideCursor@ DB 'HideCursor', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BIENLPGM@ShowCursor@
CONST	SEGMENT
??_C@_0L@BIENLPGM@ShowCursor@ DB 'ShowCursor', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GKIFPNAD@SetPosition@
CONST	SEGMENT
??_C@_0M@GKIFPNAD@SetPosition@ DB 'SetPosition', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IIMJLIAB@GetSize@
CONST	SEGMENT
??_C@_07IIMJLIAB@GetSize@ DB 'GetSize', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CAGCCMNH@GetText@
CONST	SEGMENT
??_C@_07CAGCCMNH@GetText@ DB 'GetText', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NIJDBDAG@SetText@
CONST	SEGMENT
??_C@_07NIJDBDAG@SetText@ DB 'SetText', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HBNEJDMM@SetOutline@
CONST	SEGMENT
??_C@_0L@HBNEJDMM@SetOutline@ DB 'SetOutline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CAFHEMDD@SetSecret@
CONST	SEGMENT
??_C@_09CAFHEMDD@SetSecret@ DB 'SetSecret', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MNDFNKJH@SetOutLineColor@
CONST	SEGMENT
??_C@_0BA@MNDFNKJH@SetOutLineColor@ DB 'SetOutLineColor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MKCFOAAE@SetFontColor@
CONST	SEGMENT
??_C@_0N@MKCFOAAE@SetFontColor@ DB 'SetFontColor', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MCELKPNO@SetFontName@
CONST	SEGMENT
??_C@_0M@MCELKPNO@SetFontName@ DB 'SetFontName', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BDCAJABG@Destroy@
CONST	SEGMENT
??_C@_07BDCAJABG@Destroy@ DB 'Destroy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PDEEPOLG@Generate@
CONST	SEGMENT
??_C@_08PDEEPOLG@Generate@ DB 'Generate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPLDPNDB@Render@
CONST	SEGMENT
??_C@_06EPLDPNDB@Render@ DB 'Render', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMAGPFNF@Update@
CONST	SEGMENT
??_C@_06LMAGPFNF@Update@ DB 'Update', 00H		; `string'
CONST	ENDS
;	COMDAT ?s_methods@?1??initgrpText@@YAXXZ@4PAUPyMethodDef@@A
_DATA	SEGMENT
?s_methods@?1??initgrpText@@YAXXZ@4PAUPyMethodDef@@A DD FLAT:??_C@_06LMAGPFNF@Update@ ; `initgrpText'::`2'::s_methods
	DD	FLAT:?grpTextUpdate@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_06EPLDPNDB@Render@
	DD	FLAT:?grpTextRender@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_08PDEEPOLG@Generate@
	DD	FLAT:?grpTextGenerate@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_07BDCAJABG@Destroy@
	DD	FLAT:?grpTextDestroy@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0M@MCELKPNO@SetFontName@
	DD	FLAT:?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0N@MKCFOAAE@SetFontColor@
	DD	FLAT:?grpTextSetFontColor@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BA@MNDFNKJH@SetOutLineColor@
	DD	FLAT:?grpTextSetOutLineColor@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_09CAFHEMDD@SetSecret@
	DD	FLAT:?grpTextSetSecret@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0L@HBNEJDMM@SetOutline@
	DD	FLAT:?grpTextOutline@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_07NIJDBDAG@SetText@
	DD	FLAT:?grpTextSetText@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_07CAGCCMNH@GetText@
	DD	FLAT:?grpTextGetText@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_07IIMJLIAB@GetSize@
	DD	FLAT:?grpTextGetSize@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0M@GKIFPNAD@SetPosition@
	DD	FLAT:?grpTextSetPosition@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0L@BIENLPGM@ShowCursor@
	DD	FLAT:?grpTextShowCursor@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0L@MGJDDPFG@HideCursor@
	DD	FLAT:?grpTextHideCursor@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BD@FCLDCEMA@SetHorizontalAlign@
	DD	FLAT:?grpSetHorizontalAlign@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BB@NKHPOFIC@SetVerticalAlign@
	DD	FLAT:?grpSetVerticalAlign@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_06ODEINJEE@SetMax@
	DD	FLAT:?grpSetMax@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BJ@JAMBOGDP@GetSplitingTextLineCount@
	DD	FLAT:?grpGetSplitingTextLineCount@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BE@NHLLEHMO@GetSplitingTextLine@
	DD	FLAT:?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0CB@NLPGLAHJ@PixelPositionToCharacterPositio@
	DD	FLAT:?grpTextPixelPositionToCharacterPosition@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
_DATA	ENDS
;	COMDAT ??_C@_04FAHLGLIA@?4fnt@
CONST	SEGMENT
??_C@_04FAHLGLIA@?4fnt@ DB '.fnt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s@
CONST	SEGMENT
??_C@_01LKDEMHDF@s@ DB 's', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06BGHJALJH@?$CIi?0?5i?$CJ@
CONST	SEGMENT
??_C@_06BGHJALJH@?$CIi?0?5i?$CJ@ DB '(i, i)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i@
CONST	SEGMENT
??_C@_01KBJDNOO@i@ DB 'i', 00H				; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z$0
__ehfuncinfo$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z$0
__ehfuncinfo$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextPixelPositionToCharacterPosition@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_iPixelPosition$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextPixelPositionToCharacterPosition@@YAPAU_object@@PAU1@0@Z PROC ; grpTextPixelPositionToCharacterPosition, COMDAT

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 380  : 	CGraphicTextInstance * pTextInstance;
; 381  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpTextPix
$LN5@grpTextPix:

; 391  : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpTextPix:

; 382  : 		return Py_BuildException();
; 383  : 
; 384  : 	int iPixelPosition;
; 385  : 	if (!PyTuple_GetInteger(poArgs, 1, &iPixelPosition))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iPixelPosition$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpTextPix

; 386  : 		return Py_BuildException();
; 387  : 
; 388  : 	int iCharacterPosition = pTextInstance->PixelPositionToCharacterPosition(iPixelPosition);

  0003e	ff 75 fc	 push	 DWORD PTR _iPixelPosition$[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00044	e8 00 00 00 00	 call	 ?PixelPositionToCharacterPosition@CGraphicTextInstance@@QAEHH@Z ; CGraphicTextInstance::PixelPositionToCharacterPosition

; 389  : 
; 390  : 	return Py_BuildValue("i", iCharacterPosition);

  00049	50		 push	 eax
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00055	83 c4 08	 add	 esp, 8

; 391  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?grpTextPixelPositionToCharacterPosition@@YAPAU_object@@PAU1@0@Z ENDP ; grpTextPixelPositionToCharacterPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iLineLimitation$ = -56					; size = 4
_iGettingLine$ = -52					; size = 4
_szText$ = -48						; size = 4
tv374 = -44						; size = 4
tv370 = -44						; size = 4
tv94 = -44						; size = 4
_strLine$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z PROC	; grpGetSplitingTextLine, COMDAT

; 322  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]

; 323  : 	char * szText;
; 324  : 	if (!PyTuple_GetString(poArgs, 0, &szText))

  0002e	8d 45 d0	 lea	 eax, DWORD PTR _szText$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	84 c0		 test	 al, al
  0003f	75 0f		 jne	 SHORT $LN5@grpGetSpli
$LN62@grpGetSpli:

; 376  : }

  00041	6a 00		 push	 0
  00043	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00048	83 c4 04	 add	 esp, 4
  0004b	e9 1c 01 00 00	 jmp	 $LN1@grpGetSpli
$LN5@grpGetSpli:

; 325  : 		return Py_BuildException();
; 326  : 
; 327  : 	int iLineLimitation;
; 328  : 	if (!PyTuple_GetInteger(poArgs, 1, &iLineLimitation))

  00050	8d 45 c8	 lea	 eax, DWORD PTR _iLineLimitation$[ebp]
  00053	50		 push	 eax
  00054	6a 01		 push	 1
  00056	56		 push	 esi
  00057	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	84 c0		 test	 al, al
  00061	74 de		 je	 SHORT $LN62@grpGetSpli

; 329  : 		return Py_BuildException();
; 330  : 
; 331  : 	int iGettingLine;
; 332  : 	if (!PyTuple_GetInteger(poArgs, 2, &iGettingLine))

  00063	8d 45 cc	 lea	 eax, DWORD PTR _iGettingLine$[ebp]
  00066	50		 push	 eax
  00067	6a 02		 push	 2
  00069	56		 push	 esi
  0006a	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00072	84 c0		 test	 al, al
  00074	74 cb		 je	 SHORT $LN62@grpGetSpli

; 333  : 		return Py_BuildException();
; 334  : 
; 335  : 	std::string strLine = "";

  00076	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0007b	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
  0007e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 336  : 	int iPosition = 0;
; 337  : 	int iLineCount = 0;
; 338  : 
; 339  : 	for (DWORD i = 0; i < strlen(szText);)

  00083	8b 55 d0	 mov	 edx, DWORD PTR _szText$[ebp]
  00086	33 db		 xor	 ebx, ebx
  00088	8b ca		 mov	 ecx, edx
  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00091	33 ff		 xor	 edi, edi
  00093	33 f6		 xor	 esi, esi
  00095	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00098	89 45 d4	 mov	 DWORD PTR tv370[ebp], eax
  0009b	0f 1f 44 00 00	 npad	 5
$LL57@grpGetSpli:
  000a0	8a 01		 mov	 al, BYTE PTR [ecx]
  000a2	41		 inc	 ecx
  000a3	84 c0		 test	 al, al
  000a5	75 f9		 jne	 SHORT $LL57@grpGetSpli
  000a7	2b 4d d4	 sub	 ecx, DWORD PTR tv370[ebp]
  000aa	74 72		 je	 SHORT $LN3@grpGetSpli
  000ac	0f 1f 40 00	 npad	 4
$LL2@grpGetSpli:

; 340  : 	{
; 341  : 		if ('|' == szText[i])

  000b0	8a 04 16	 mov	 al, BYTE PTR [esi+edx]
  000b3	8d 0c 16	 lea	 ecx, DWORD PTR [esi+edx]
  000b6	3c 7c		 cmp	 al, 124			; 0000007cH
  000b8	75 0d		 jne	 SHORT $LN8@grpGetSpli

; 342  : 		{
; 343  : 			i += 1;

  000ba	46		 inc	 esi

; 344  : 
; 345  : 			if (iPosition>0)
; 346  : 				++iLineCount;
; 347  : 			iPosition = 0;

  000bb	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  000be	85 db		 test	 ebx, ebx
  000c0	0f 4e c7	 cmovle	 eax, edi
  000c3	8b f8		 mov	 edi, eax

; 348  : 			continue;

  000c5	eb 3e		 jmp	 SHORT $LN61@grpGetSpli
$LN8@grpGetSpli:

; 349  : 		}
; 350  : 
; 351  : 		if (szText[i] & 0x80)

  000c7	84 c0		 test	 al, al
  000c9	79 1a		 jns	 SHORT $LN10@grpGetSpli

; 352  : 		{
; 353  : 			if (iLineCount == iGettingLine)

  000cb	3b 7d cc	 cmp	 edi, DWORD PTR _iGettingLine$[ebp]
  000ce	75 0e		 jne	 SHORT $LN12@grpGetSpli

; 354  : 				strLine.append(szText+i, 2);

  000d0	6a 02		 push	 2
  000d2	51		 push	 ecx
  000d3	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
  000d6	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000db	8b 55 d0	 mov	 edx, DWORD PTR _szText$[ebp]
$LN12@grpGetSpli:

; 355  : 
; 356  : 			i += 2;
; 357  : 			iPosition += 2;

  000de	b8 02 00 00 00	 mov	 eax, 2

; 358  : 		}

  000e3	eb 16		 jmp	 SHORT $LN11@grpGetSpli
$LN10@grpGetSpli:

; 359  : 		else
; 360  : 		{
; 361  : 			if (iLineCount == iGettingLine)

  000e5	3b 7d cc	 cmp	 edi, DWORD PTR _iGettingLine$[ebp]
  000e8	75 0c		 jne	 SHORT $LN13@grpGetSpli
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3236 :         push_back(_Ch);

  000ea	50		 push	 eax
  000eb	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
  000ee	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
  000f3	8b 55 d0	 mov	 edx, DWORD PTR _szText$[ebp]
$LN13@grpGetSpli:
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp

; 365  : 			iPosition += 1;

  000f6	b8 01 00 00 00	 mov	 eax, 1
$LN11@grpGetSpli:

; 366  : 		}
; 367  : 
; 368  : 		if (iPosition >= iLineLimitation)

  000fb	03 d8		 add	 ebx, eax
  000fd	03 f0		 add	 esi, eax
  000ff	3b 5d c8	 cmp	 ebx, DWORD PTR _iLineLimitation$[ebp]
  00102	7c 03		 jl	 SHORT $LN14@grpGetSpli

; 369  : 		{
; 370  : 			++iLineCount;

  00104	47		 inc	 edi
$LN61@grpGetSpli:

; 336  : 	int iPosition = 0;
; 337  : 	int iLineCount = 0;
; 338  : 
; 339  : 	for (DWORD i = 0; i < strlen(szText);)

  00105	33 db		 xor	 ebx, ebx
$LN14@grpGetSpli:
  00107	8b ca		 mov	 ecx, edx
  00109	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0010c	89 45 d4	 mov	 DWORD PTR tv374[ebp], eax
  0010f	90		 npad	 1
$LL58@grpGetSpli:
  00110	8a 01		 mov	 al, BYTE PTR [ecx]
  00112	41		 inc	 ecx
  00113	84 c0		 test	 al, al
  00115	75 f9		 jne	 SHORT $LL58@grpGetSpli
  00117	2b 4d d4	 sub	 ecx, DWORD PTR tv374[ebp]
  0011a	3b f1		 cmp	 esi, ecx
  0011c	72 92		 jb	 SHORT $LL2@grpGetSpli
$LN3@grpGetSpli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0011e	83 7d ec 10	 cmp	 DWORD PTR _strLine$[ebp+20], 16 ; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  00122	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]

; 2236 :         if (_Large_string_engaged()) {

  00125	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strLine$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp

; 375  : 	return Py_BuildValue("s", strLine.c_str());

  00129	50		 push	 eax
  0012a	68 00 00 00 00	 push	 OFFSET ??_C@_01LKDEMHDF@s@
  0012f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  00135	8b 4d ec	 mov	 ecx, DWORD PTR _strLine$[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp

; 375  : 	return Py_BuildValue("s", strLine.c_str());

  00138	83 c4 08	 add	 esp, 8
  0013b	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0013d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00140	72 28		 jb	 SHORT $LN38@grpGetSpli
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00142	8b 55 d8	 mov	 edx, DWORD PTR _strLine$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00145	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00146	8b c2		 mov	 eax, edx

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00148	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0014e	72 10		 jb	 SHORT $LN48@grpGetSpli

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00150	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00153	83 c1 23	 add	 ecx, 35			; 00000023H
  00156	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00158	83 c0 fc	 add	 eax, -4			; fffffffcH
  0015b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0015e	77 28		 ja	 SHORT $LN64@grpGetSpli
$LN48@grpGetSpli:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00160	51		 push	 ecx
  00161	52		 push	 edx
  00162	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00167	83 c4 08	 add	 esp, 8
$LN38@grpGetSpli:
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp

; 375  : 	return Py_BuildValue("s", strLine.c_str());

  0016a	8b c6		 mov	 eax, esi
$LN1@grpGetSpli:

; 376  : }

  0016c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00176	59		 pop	 ecx
  00177	5f		 pop	 edi
  00178	5e		 pop	 esi
  00179	5b		 pop	 ebx
  0017a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017d	33 cd		 xor	 ecx, ebp
  0017f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00184	8b e5		 mov	 esp, ebp
  00186	5d		 pop	 ebp
  00187	c3		 ret	 0
$LN64@grpGetSpli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00188	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@grpGetSpli:
  0018d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z ENDP	; grpGetSplitingTextLine
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpGetSplitingTextLineCount@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iLineLimitation$ = -12					; size = 4
tv307 = -8						; size = 4
tv302 = -8						; size = 4
tv82 = -8						; size = 4
_szText$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpGetSplitingTextLineCount@@YAPAU_object@@PAU1@0@Z PROC ; grpGetSplitingTextLineCount, COMDAT

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 273  : 	char * szText;
; 274  : 	if (!PyTuple_GetString(poArgs, 0, &szText))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _szText$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	84 c0		 test	 al, al
  0001b	75 0f		 jne	 SHORT $LN5@grpGetSpli
$LN28@grpGetSpli:

; 319  : }

  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00024	83 c4 04	 add	 esp, 4
  00027	5e		 pop	 esi
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN5@grpGetSpli:

; 275  : 		return Py_BuildException();
; 276  : 
; 277  : 	int iLineLimitation;
; 278  : 	if (!PyTuple_GetInteger(poArgs, 1, &iLineLimitation))

  0002c	8d 45 f4	 lea	 eax, DWORD PTR _iLineLimitation$[ebp]
  0002f	50		 push	 eax
  00030	6a 01		 push	 1
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	84 c0		 test	 al, al
  0003d	74 de		 je	 SHORT $LN28@grpGetSpli

; 279  : 		return Py_BuildException();
; 280  : 
; 281  : 	int iPosition = 0;
; 282  : 	int iLineCount = 0;
; 283  : 
; 284  : 	for (DWORD i = 0; i < strlen(szText);)

  0003f	53		 push	 ebx
  00040	8b 5d fc	 mov	 ebx, DWORD PTR _szText$[ebp]
  00043	33 f6		 xor	 esi, esi
  00045	8b cb		 mov	 ecx, ebx
  00047	57		 push	 edi
  00048	33 ff		 xor	 edi, edi
  0004a	33 d2		 xor	 edx, edx
  0004c	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0004f	89 45 f8	 mov	 DWORD PTR tv302[ebp], eax
$LL17@grpGetSpli:
  00052	8a 01		 mov	 al, BYTE PTR [ecx]
  00054	41		 inc	 ecx
  00055	84 c0		 test	 al, al
  00057	75 f9		 jne	 SHORT $LL17@grpGetSpli
  00059	2b 4d f8	 sub	 ecx, DWORD PTR tv302[ebp]
  0005c	74 42		 je	 SHORT $LN3@grpGetSpli
  0005e	66 90		 npad	 2
$LL2@grpGetSpli:

; 285  : 	{
; 286  : 		if ('|' == szText[i])

  00060	8a 04 1a	 mov	 al, BYTE PTR [edx+ebx]
  00063	3c 7c		 cmp	 al, 124			; 0000007cH
  00065	75 0d		 jne	 SHORT $LN7@grpGetSpli

; 287  : 		{
; 288  : 			i += 1;

  00067	42		 inc	 edx

; 289  : 
; 290  : 			if (iPosition>0)
; 291  : 				++iLineCount;
; 292  : 
; 293  : 			iPosition = 0;

  00068	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0006b	85 ff		 test	 edi, edi
  0006d	0f 4e c6	 cmovle	 eax, esi
  00070	8b f0		 mov	 esi, eax

; 294  : 			continue;

  00072	eb 14		 jmp	 SHORT $LN27@grpGetSpli
$LN7@grpGetSpli:

; 295  : 		}
; 296  : 
; 297  : 		if (szText[i] & 0x80)
; 298  : 		{
; 299  : 			i += 2;
; 300  : 			iPosition += 2;
; 301  : 		}
; 302  : 		else
; 303  : 		{
; 304  : 			i += 1;
; 305  : 			iPosition += 1;
; 306  : 		}
; 307  : 
; 308  : 		if (iPosition >= iLineLimitation)

  00074	0f be c0	 movsx	 eax, al
  00077	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  0007a	83 e0 01	 and	 eax, 1
  0007d	40		 inc	 eax
  0007e	03 f8		 add	 edi, eax
  00080	03 d0		 add	 edx, eax
  00082	3b 7d f4	 cmp	 edi, DWORD PTR _iLineLimitation$[ebp]
  00085	7c 03		 jl	 SHORT $LN11@grpGetSpli

; 309  : 		{
; 310  : 			++iLineCount;

  00087	46		 inc	 esi
$LN27@grpGetSpli:

; 279  : 		return Py_BuildException();
; 280  : 
; 281  : 	int iPosition = 0;
; 282  : 	int iLineCount = 0;
; 283  : 
; 284  : 	for (DWORD i = 0; i < strlen(szText);)

  00088	33 ff		 xor	 edi, edi
$LN11@grpGetSpli:
  0008a	8b c3		 mov	 eax, ebx
  0008c	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0008f	89 4d f8	 mov	 DWORD PTR tv307[ebp], ecx
$LL18@grpGetSpli:
  00092	8a 08		 mov	 cl, BYTE PTR [eax]
  00094	40		 inc	 eax
  00095	84 c9		 test	 cl, cl
  00097	75 f9		 jne	 SHORT $LL18@grpGetSpli
  00099	2b 45 f8	 sub	 eax, DWORD PTR tv307[ebp]
  0009c	3b d0		 cmp	 edx, eax
  0009e	72 c0		 jb	 SHORT $LL2@grpGetSpli
$LN3@grpGetSpli:

; 311  : 			iPosition = 0;
; 312  : 		}
; 313  : 	}
; 314  : 
; 315  : 	if (iPosition > 0)
; 316  : 		++iLineCount;
; 317  : 
; 318  : 	return Py_BuildValue("i", iLineCount);

  000a0	85 ff		 test	 edi, edi
  000a2	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000a5	0f 4e c6	 cmovle	 eax, esi
  000a8	50		 push	 eax
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  000b4	83 c4 08	 add	 esp, 8
  000b7	5f		 pop	 edi
  000b8	5b		 pop	 ebx
  000b9	5e		 pop	 esi

; 319  : }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
?grpGetSplitingTextLineCount@@YAPAU_object@@PAU1@0@Z ENDP ; grpGetSplitingTextLineCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpSetMax@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_iValue$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpSetMax@@YAPAU_object@@PAU1@0@Z PROC			; grpSetMax, COMDAT

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 259  : 	CGraphicTextInstance* pTextInstance;
; 260  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpSetMax
$LN5@grpSetMax:

; 269  : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpSetMax:

; 261  : 		return Py_BuildException();
; 262  : 
; 263  : 	int iValue;
; 264  : 	if (!PyTuple_GetInteger(poArgs, 1, &iValue))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iValue$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpSetMax

; 265  : 		return Py_BuildException();
; 266  : 
; 267  : 	pTextInstance->SetMax(iValue);

  0003e	ff 75 fc	 push	 DWORD PTR _iValue$[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00044	e8 00 00 00 00	 call	 ?SetMax@CGraphicTextInstance@@QAEXH@Z ; CGraphicTextInstance::SetMax

; 268  : 	return Py_BuildNone();

  00049	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 269  : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?grpSetMax@@YAPAU_object@@PAU1@0@Z ENDP			; grpSetMax
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpSetVerticalAlign@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_iAlign$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpSetVerticalAlign@@YAPAU_object@@PAU1@0@Z PROC	; grpSetVerticalAlign, COMDAT

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 245  : 	CGraphicTextInstance* pTextInstance;
; 246  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpSetVert
$LN5@grpSetVert:

; 255  : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpSetVert:

; 247  : 		return Py_BuildException();
; 248  : 
; 249  : 	int iAlign;
; 250  : 	if (!PyTuple_GetInteger(poArgs, 1, &iAlign))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iAlign$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpSetVert

; 251  : 		return Py_BuildException();
; 252  : 
; 253  : 	pTextInstance->SetVerticalAlign(iAlign);

  0003e	ff 75 fc	 push	 DWORD PTR _iAlign$[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00044	e8 00 00 00 00	 call	 ?SetVerticalAlign@CGraphicTextInstance@@QAEXH@Z ; CGraphicTextInstance::SetVerticalAlign

; 254  : 	return Py_BuildNone();

  00049	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 255  : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?grpSetVerticalAlign@@YAPAU_object@@PAU1@0@Z ENDP	; grpSetVerticalAlign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpSetHorizontalAlign@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_iAlign$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpSetHorizontalAlign@@YAPAU_object@@PAU1@0@Z PROC	; grpSetHorizontalAlign, COMDAT

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 231  : 	CGraphicTextInstance* pTextInstance;
; 232  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpSetHori
$LN5@grpSetHori:

; 241  : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpSetHori:

; 233  : 		return Py_BuildException();
; 234  : 
; 235  : 	int iAlign;
; 236  : 	if (!PyTuple_GetInteger(poArgs, 1, &iAlign))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iAlign$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpSetHori

; 237  : 		return Py_BuildException();
; 238  : 
; 239  : 	pTextInstance->SetHorizonalAlign(iAlign);

  0003e	ff 75 fc	 push	 DWORD PTR _iAlign$[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00044	e8 00 00 00 00	 call	 ?SetHorizonalAlign@CGraphicTextInstance@@QAEXH@Z ; CGraphicTextInstance::SetHorizonalAlign

; 240  : 	return Py_BuildNone();

  00049	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 241  : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?grpSetHorizontalAlign@@YAPAU_object@@PAU1@0@Z ENDP	; grpSetHorizontalAlign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextHideCursor@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextHideCursor@@YAPAU_object@@PAU1@0@Z PROC		; grpTextHideCursor, COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 221  : 	CGraphicTextInstance* pTextInstance;
; 222  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN2@grpTextHid

; 223  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 227  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN2@grpTextHid:

; 224  : 
; 225  : 	pTextInstance->HideCursor();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0002a	e8 00 00 00 00	 call	 ?HideCursor@CGraphicTextInstance@@QAEXXZ ; CGraphicTextInstance::HideCursor

; 226  : 	return Py_BuildNone();

  0002f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 227  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?grpTextHideCursor@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextHideCursor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextShowCursor@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextShowCursor@@YAPAU_object@@PAU1@0@Z PROC		; grpTextShowCursor, COMDAT

; 210  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 211  : 	CGraphicTextInstance* pTextInstance;
; 212  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN2@grpTextSho

; 213  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 217  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN2@grpTextSho:

; 214  : 
; 215  : 	pTextInstance->ShowCursor();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0002a	e8 00 00 00 00	 call	 ?ShowCursor@CGraphicTextInstance@@QAEXXZ ; CGraphicTextInstance::ShowCursor

; 216  : 	return Py_BuildNone();

  0002f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 217  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?grpTextShowCursor@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextShowCursor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextUpdate@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextUpdate@@YAPAU_object@@PAU1@0@Z PROC		; grpTextUpdate, COMDAT

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 201  : 	CGraphicTextInstance* pTextInstance;
; 202  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN2@grpTextUpd

; 203  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 207  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN2@grpTextUpd:

; 204  : 
; 205  : 	pTextInstance->Update();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0002a	e8 00 00 00 00	 call	 ?Update@CGraphicTextInstance@@QAEXXZ ; CGraphicTextInstance::Update

; 206  : 	return Py_BuildNone();

  0002f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 207  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?grpTextUpdate@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextRender@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextRender@@YAPAU_object@@PAU1@0@Z PROC		; grpTextRender, COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 191  : 	CGraphicTextInstance* pTextInstance;
; 192  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	6a 00		 push	 0
  00017	84 c0		 test	 al, al
  00019	75 0c		 jne	 SHORT $LN2@grpTextRen

; 193  : 		return Py_BuildException();

  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 197  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN2@grpTextRen:

; 194  : 
; 195  : 	pTextInstance->Render();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0002a	e8 00 00 00 00	 call	 ?Render@CGraphicTextInstance@@QAEXPAUtagRECT@@@Z ; CGraphicTextInstance::Render

; 196  : 	return Py_BuildNone();

  0002f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 197  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?grpTextRender@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextSetOutLineColor@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -20					; size = 4
_fRed$ = -16						; size = 4
_fGreen$ = -12						; size = 4
_fBlue$ = -8						; size = 4
_fAlpha$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextSetOutLineColor@@YAPAU_object@@PAU1@0@Z PROC	; grpTextSetOutLineColor, COMDAT

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 166  : 	CGraphicTextInstance* pTextInstance;
; 167  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 ec	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	84 c0		 test	 al, al
  0001b	75 0f		 jne	 SHORT $LN2@grpTextSet
$LN13@grpTextSet:

; 186  : }

  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00024	83 c4 04	 add	 esp, 4
  00027	5e		 pop	 esi
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN2@grpTextSet:

; 168  : 		return Py_BuildException();
; 169  : 
; 170  : 	float fRed;
; 171  : 	if (!PyTuple_GetFloat(poArgs, 1, &fRed))

  0002c	8d 45 f0	 lea	 eax, DWORD PTR _fRed$[ebp]
  0002f	50		 push	 eax
  00030	6a 01		 push	 1
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	84 c0		 test	 al, al
  0003d	74 de		 je	 SHORT $LN13@grpTextSet

; 172  : 		return Py_BuildException();
; 173  : 	float fGreen;
; 174  : 	if (!PyTuple_GetFloat(poArgs, 2, &fGreen))

  0003f	8d 45 f4	 lea	 eax, DWORD PTR _fGreen$[ebp]
  00042	50		 push	 eax
  00043	6a 02		 push	 2
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	84 c0		 test	 al, al
  00050	74 cb		 je	 SHORT $LN13@grpTextSet

; 175  : 		return Py_BuildException();
; 176  : 	float fBlue;
; 177  : 	if (!PyTuple_GetFloat(poArgs, 3, &fBlue))

  00052	8d 45 f8	 lea	 eax, DWORD PTR _fBlue$[ebp]
  00055	50		 push	 eax
  00056	6a 03		 push	 3
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00061	84 c0		 test	 al, al
  00063	74 b8		 je	 SHORT $LN13@grpTextSet

; 178  : 		return Py_BuildException();
; 179  : 
; 180  : 	float fAlpha;
; 181  : 	if (!PyTuple_GetFloat(poArgs, 4, &fAlpha))

  00065	8d 45 fc	 lea	 eax, DWORD PTR _fAlpha$[ebp]
  00068	50		 push	 eax
  00069	6a 04		 push	 4
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
  00074	84 c0		 test	 al, al
  00076	74 a5		 je	 SHORT $LN13@grpTextSet

; 182  : 		return Py_BuildException();
; 183  : 
; 184  : 	pTextInstance->SetOutLineColor(fRed, fGreen, fBlue, fAlpha);

  00078	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fAlpha$[ebp]
  0007d	83 ec 10	 sub	 esp, 16			; 00000010H
  00080	8b 4d ec	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00083	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00089	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _fBlue$[ebp]
  0008e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00094	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _fGreen$[ebp]
  00099	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0009f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _fRed$[ebp]
  000a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a9	e8 00 00 00 00	 call	 ?SetOutLineColor@CGraphicTextInstance@@QAEXMMMM@Z ; CGraphicTextInstance::SetOutLineColor

; 185  : 	return Py_BuildNone();

  000ae	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
  000b3	5e		 pop	 esi

; 186  : }

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
?grpTextSetOutLineColor@@YAPAU_object@@PAU1@0@Z ENDP	; grpTextSetOutLineColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextSetFontColor@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_fRed$1 = -16						; size = 4
_fGreen$2 = -12						; size = 4
_fBlue$3 = -8						; size = 4
_iColor$4 = -8						; size = 4
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextSetFontColor@@YAPAU_object@@PAU1@0@Z PROC	; grpTextSetFontColor, COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 132  : 	CGraphicTextInstance* pTextInstance;
; 133  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	84 c0		 test	 al, al
  0001b	0f 84 c0 00 00
	00		 je	 $LN6@grpTextSet

; 134  : 		return Py_BuildException();
; 135  : 
; 136  : 	if (2 == PyTuple_Size(poArgs))

  00021	56		 push	 esi
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  00028	83 c4 04	 add	 esp, 4
  0002b	83 f8 02	 cmp	 eax, 2
  0002e	75 2c		 jne	 SHORT $LN3@grpTextSet

; 137  : 	{
; 138  : 		int iColor;
; 139  : 		if (!PyTuple_GetInteger(poArgs, 1, &iColor))

  00030	8d 45 f8	 lea	 eax, DWORD PTR _iColor$4[ebp]
  00033	50		 push	 eax
  00034	6a 01		 push	 1
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	84 c0		 test	 al, al
  00041	0f 84 9a 00 00
	00		 je	 $LN6@grpTextSet

; 140  : 			return Py_BuildException();
; 141  : 		pTextInstance->SetColor(DWORD(iColor));

  00047	ff 75 f8	 push	 DWORD PTR _iColor$4[ebp]
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0004d	e8 00 00 00 00	 call	 ?SetColor@CGraphicTextInstance@@QAEXK@Z ; CGraphicTextInstance::SetColor

; 155  : 	}
; 156  : 	else
; 157  : 	{
; 158  : 		return Py_BuildException();
; 159  : 	}
; 160  : 
; 161  : 	return Py_BuildNone();

  00052	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
  00057	5e		 pop	 esi

; 162  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN3@grpTextSet:

; 142  : 	}
; 143  : 	else if (4 == PyTuple_Size(poArgs))

  0005c	56		 push	 esi
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  00063	83 c4 04	 add	 esp, 4
  00066	83 f8 04	 cmp	 eax, 4
  00069	75 76		 jne	 SHORT $LN6@grpTextSet

; 144  : 	{
; 145  : 		float fRed;
; 146  : 		if (!PyTuple_GetFloat(poArgs, 1, &fRed))

  0006b	8d 45 f0	 lea	 eax, DWORD PTR _fRed$1[ebp]
  0006e	50		 push	 eax
  0006f	6a 01		 push	 1
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	84 c0		 test	 al, al
  0007c	74 63		 je	 SHORT $LN6@grpTextSet

; 147  : 			return Py_BuildException();
; 148  : 		float fGreen;
; 149  : 		if (!PyTuple_GetFloat(poArgs, 2, &fGreen))

  0007e	8d 45 f4	 lea	 eax, DWORD PTR _fGreen$2[ebp]
  00081	50		 push	 eax
  00082	6a 02		 push	 2
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	84 c0		 test	 al, al
  0008f	74 50		 je	 SHORT $LN6@grpTextSet

; 150  : 			return Py_BuildException();
; 151  : 		float fBlue;
; 152  : 		if (!PyTuple_GetFloat(poArgs, 3, &fBlue))

  00091	8d 45 f8	 lea	 eax, DWORD PTR _fBlue$3[ebp]
  00094	50		 push	 eax
  00095	6a 03		 push	 3
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a0	84 c0		 test	 al, al
  000a2	74 3d		 je	 SHORT $LN6@grpTextSet

; 153  : 			return Py_BuildException();
; 154  : 		pTextInstance->SetColor(fRed, fGreen, fBlue);

  000a4	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _fBlue$3[ebp]
  000a9	83 ec 10	 sub	 esp, 16			; 00000010H
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  000af	c7 44 24 0c 00
	00 80 3f	 mov	 DWORD PTR [esp+12], 1065353216 ; 3f800000H
  000b7	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000bd	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _fGreen$2[ebp]
  000c2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000c8	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _fRed$1[ebp]
  000cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d2	e8 00 00 00 00	 call	 ?SetColor@CGraphicTextInstance@@QAEXMMMM@Z ; CGraphicTextInstance::SetColor

; 155  : 	}
; 156  : 	else
; 157  : 	{
; 158  : 		return Py_BuildException();
; 159  : 	}
; 160  : 
; 161  : 	return Py_BuildNone();

  000d7	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
  000dc	5e		 pop	 esi

; 162  : }

  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
$LN6@grpTextSet:
  000e1	6a 00		 push	 0
  000e3	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  000e8	83 c4 04	 add	 esp, 4
  000eb	5e		 pop	 esi
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
?grpTextSetFontColor@@YAPAU_object@@PAU1@0@Z ENDP	; grpTextSetFontColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -48					; size = 4
_szFontName$ = -44					; size = 4
_stFontName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z PROC	; grpTextSetFontName, COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]

; 114  : 	CGraphicTextInstance* pTextInstance;
; 115  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  0002c	8d 45 d0	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  0002f	50		 push	 eax
  00030	6a 00		 push	 0
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	84 c0		 test	 al, al
  0003d	75 0c		 jne	 SHORT $LN2@grpTextSet
$LN20@grpTextSet:

; 128  : }

  0003f	6a 00		 push	 0
  00041	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00046	83 c4 04	 add	 esp, 4
  00049	eb 65		 jmp	 SHORT $LN1@grpTextSet
$LN2@grpTextSet:

; 116  : 		return Py_BuildException();
; 117  : 
; 118  : 	char* szFontName;
; 119  : 	if (!PyTuple_GetString(poArgs, 1, &szFontName))

  0004b	8d 45 d4	 lea	 eax, DWORD PTR _szFontName$[ebp]
  0004e	50		 push	 eax
  0004f	6a 01		 push	 1
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	84 c0		 test	 al, al
  0005c	74 e1		 je	 SHORT $LN20@grpTextSet

; 122  : 	std::string stFontName = szFontName;

  0005e	ff 75 d4	 push	 DWORD PTR _szFontName$[ebp]
  00061	8d 4d d8	 lea	 ecx, DWORD PTR _stFontName$[ebp]
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3292 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00069	6a 04		 push	 4
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_04FAHLGLIA@?4fnt@
  00070	8d 4d d8	 lea	 ecx, DWORD PTR _stFontName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp

; 122  : 	std::string stFontName = szFontName;

  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3292 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0007a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2244 :         return _BUF_SIZE <= _Myres;

  0007f	83 7d ec 10	 cmp	 DWORD PTR _stFontName$[ebp+20], 16 ; 00000010H

; 2235 :         const value_type* _Result = _Bx._Buf;

  00083	8d 45 d8	 lea	 eax, DWORD PTR _stFontName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp

; 125  : 	CResource* pResource = CResourceManager::Instance().GetResourcePointer(stFontName.c_str());

  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2236 :         if (_Large_string_engaged()) {

  0008c	0f 43 45 d8	 cmovae	 eax, DWORD PTR _stFontName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp

; 125  : 	CResource* pResource = CResourceManager::Instance().GetResourcePointer(stFontName.c_str());

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer

; 126  : 	pTextInstance->SetTextPointer(static_cast<CGraphicText*>(pResource));

  00096	8b 4d d0	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ?SetTextPointer@CGraphicTextInstance@@QAEXPAVCGraphicText@@@Z ; CGraphicTextInstance::SetTextPointer

; 127  : 	return Py_BuildNone();

  0009f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
  000a4	8d 4d d8	 lea	 ecx, DWORD PTR _stFontName$[ebp]
  000a7	8b f0		 mov	 esi, eax
  000a9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ae	8b c6		 mov	 eax, esi
$LN1@grpTextSet:

; 128  : }

  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5e		 pop	 esi
  000bc	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bf	33 cd		 xor	 ecx, ebp
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _stFontName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z ENDP	; grpTextSetFontName
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextGetText@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextGetText@@YAPAU_object@@PAU1@0@Z PROC		; grpTextGetText, COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 105  : 	CGraphicTextInstance* pTextInstance;
; 106  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN2@grpTextGet

; 107  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 110  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN2@grpTextGet:

; 109  : 	return Py_BuildValue("s", pTextInstance->GetValueStringReference().c_str());

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0002a	e8 00 00 00 00	 call	 ?GetValueStringReference@CGraphicTextInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CGraphicTextInstance::GetValueStringReference
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2244 :         return _BUF_SIZE <= _Myres;

  0002f	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2236 :         if (_Large_string_engaged()) {

  00033	72 02		 jb	 SHORT $LN7@grpTextGet

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

  00035	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@grpTextGet:
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp

; 109  : 	return Py_BuildValue("s", pTextInstance->GetValueStringReference().c_str());

  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_01LKDEMHDF@s@
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00043	83 c4 08	 add	 esp, 8

; 110  : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?grpTextGetText@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextGetText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextOutline@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_bValue$ = -4						; size = 1
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextOutline@@YAPAU_object@@PAU1@0@Z PROC		; grpTextOutline, COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 91   : 	CGraphicTextInstance* pTextInstance;
; 92   : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpTextOut
$LN5@grpTextOut:

; 101  : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpTextOut:

; 93   : 		return Py_BuildException();
; 94   : 
; 95   : 	bool bValue;
; 96   : 	if (!PyTuple_GetBoolean(poArgs, 1, &bValue))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _bValue$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z ; PyTuple_GetBoolean
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpTextOut

; 97   : 		return Py_BuildException();
; 98   : 
; 99   : 	pTextInstance->SetOutline(bValue);

  0003e	ff 75 fc	 push	 DWORD PTR _bValue$[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00044	e8 00 00 00 00	 call	 ?SetOutline@CGraphicTextInstance@@QAEX_N@Z ; CGraphicTextInstance::SetOutline

; 100  : 	return Py_BuildNone();

  00049	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 101  : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?grpTextOutline@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextOutline
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextSetSecret@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_bValue$ = -4						; size = 1
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextSetSecret@@YAPAU_object@@PAU1@0@Z PROC		; grpTextSetSecret, COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 77   : 	CGraphicTextInstance* pTextInstance;
; 78   : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpTextSet
$LN5@grpTextSet:

; 87   : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpTextSet:

; 79   : 		return Py_BuildException();
; 80   : 
; 81   : 	bool bValue;
; 82   : 	if (!PyTuple_GetBoolean(poArgs, 1, &bValue))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _bValue$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z ; PyTuple_GetBoolean
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpTextSet

; 83   : 		return Py_BuildException();
; 84   : 
; 85   : 	pTextInstance->SetSecret(bValue);

  0003e	ff 75 fc	 push	 DWORD PTR _bValue$[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00044	e8 00 00 00 00	 call	 ?SetSecret@CGraphicTextInstance@@QAEX_N@Z ; CGraphicTextInstance::SetSecret

; 86   : 	return Py_BuildNone();

  00049	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 87   : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?grpTextSetSecret@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextSetSecret
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextSetText@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_szText$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextSetText@@YAPAU_object@@PAU1@0@Z PROC		; grpTextSetText, COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 63   : 	CGraphicTextInstance* pTextInstance;
; 64   : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpTextSet
$LN5@grpTextSet:

; 73   : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpTextSet:

; 65   : 		return Py_BuildException();
; 66   : 
; 67   : 	char* szText;
; 68   : 	if (!PyTuple_GetString(poArgs, 1, &szText))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _szText$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpTextSet

; 69   : 		return Py_BuildException();
; 70   : 
; 71   : 	pTextInstance->SetValue(szText);

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00041	6a ff		 push	 -1
  00043	ff 75 fc	 push	 DWORD PTR _szText$[ebp]
  00046	e8 00 00 00 00	 call	 ?SetValue@CGraphicTextInstance@@QAEXPBDI@Z ; CGraphicTextInstance::SetValue

; 72   : 	return Py_BuildNone();

  0004b	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 73   : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?grpTextSetText@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextSetText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextSetPosition@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -12					; size = 4
_ix$ = -8						; size = 4
_iy$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextSetPosition@@YAPAU_object@@PAU1@0@Z PROC	; grpTextSetPosition, COMDAT

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 46   : 	CGraphicTextInstance* pTextInstance;
; 47   : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f4	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	84 c0		 test	 al, al
  0001b	75 0f		 jne	 SHORT $LN2@grpTextSet
$LN9@grpTextSet:

; 59   : }

  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00024	83 c4 04	 add	 esp, 4
  00027	5e		 pop	 esi
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN2@grpTextSet:

; 48   : 		return Py_BuildException();
; 49   : 
; 50   : 	int ix;
; 51   : 	if (!PyTuple_GetInteger(poArgs, 1, &ix))

  0002c	8d 45 f8	 lea	 eax, DWORD PTR _ix$[ebp]
  0002f	50		 push	 eax
  00030	6a 01		 push	 1
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	84 c0		 test	 al, al
  0003d	74 de		 je	 SHORT $LN9@grpTextSet

; 52   : 		return Py_BuildException();
; 53   : 	int iy;
; 54   : 	if (!PyTuple_GetInteger(poArgs, 2, &iy))

  0003f	8d 45 fc	 lea	 eax, DWORD PTR _iy$[ebp]
  00042	50		 push	 eax
  00043	6a 02		 push	 2
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	84 c0		 test	 al, al
  00050	74 cb		 je	 SHORT $LN9@grpTextSet

; 55   : 		return Py_BuildException();
; 56   : 
; 57   : 	pTextInstance->SetPosition((float) ix, (float) iy);

  00052	66 0f 6e 45 fc	 movd	 xmm0, DWORD PTR _iy$[ebp]
  00057	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0005d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00060	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  00068	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0006e	66 0f 6e 45 f8	 movd	 xmm0, DWORD PTR _ix$[ebp]
  00073	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	e8 00 00 00 00	 call	 ?SetPosition@CGraphicTextInstance@@QAEXMMM@Z ; CGraphicTextInstance::SetPosition

; 58   : 	return Py_BuildNone();

  00080	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
  00085	5e		 pop	 esi

; 59   : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?grpTextSetPosition@@YAPAU_object@@PAU1@0@Z ENDP	; grpTextSetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextGetSize@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_width$ = -12						; size = 4
_height$ = -8						; size = 4
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextGetSize@@YAPAU_object@@PAU1@0@Z PROC		; grpTextGetSize, COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 35   : 	CGraphicTextInstance* pTextInstance;
; 36   : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpTextGet

; 37   : 		return Py_BuildException();

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4

; 42   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpTextGet:

; 38   : 
; 39   : 	int width, height;
; 40   : 	pTextInstance->GetTextSize(&width, &height);

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0002c	8d 45 f8	 lea	 eax, DWORD PTR _height$[ebp]
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR _width$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?GetTextSize@CGraphicTextInstance@@QAEXPAH0@Z ; CGraphicTextInstance::GetTextSize

; 41   : 	return Py_BuildValue("(i, i)", width, height);

  00039	ff 75 f8	 push	 DWORD PTR _height$[ebp]
  0003c	ff 75 f4	 push	 DWORD PTR _width$[ebp]
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_06BGHJALJH@?$CIi?0?5i?$CJ@
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 42   : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?grpTextGetSize@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextGetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextDestroy@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextDestroy@@YAPAU_object@@PAU1@0@Z PROC		; grpTextDestroy, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 25   : 	CGraphicTextInstance* pTextInstance;
; 26   : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN2@grpTextDes

; 27   : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 31   : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN2@grpTextDes:

; 28   : 
; 29   : 	CGraphicTextInstance::Delete(pTextInstance);

  00027	ff 75 fc	 push	 DWORD PTR _pTextInstance$[ebp]
  0002a	e8 00 00 00 00	 call	 ?Delete@CGraphicTextInstance@@SAXPAV1@@Z ; CGraphicTextInstance::Delete
  0002f	83 c4 04	 add	 esp, 4

; 30   : 	return Py_BuildNone();

  00032	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 31   : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?grpTextDestroy@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextGenerate@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextGenerate@@YAPAU_object@@PAU1@0@Z PROC		; grpTextGenerate, COMDAT

; 19   : 	CGraphicTextInstance * pTextInstance = CGraphicTextInstance::New();

  00000	e8 00 00 00 00	 call	 ?New@CGraphicTextInstance@@SAPAV1@XZ ; CGraphicTextInstance::New

; 20   : 	return Py_BuildValue("i", pTextInstance);

  00005	50		 push	 eax
  00006	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00011	83 c4 08	 add	 esp, 8

; 21   : }

  00014	c3		 ret	 0
?grpTextGenerate@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextGenerate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z
_TEXT	SEGMENT
_handle$ = -4						; size = 4
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ppTextInstance$ = 16					; size = 4
?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z PROC ; PyTuple_GetTextInstance, COMDAT

; 4    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5    : 	int handle;
; 6    : 	if (!PyTuple_GetInteger(poArgs, pos, &handle))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _handle$[ebp]
  00007	50		 push	 eax
  00008	ff 75 0c	 push	 DWORD PTR _pos$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0000e	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	84 c0		 test	 al, al
  00018	74 12		 je	 SHORT $LN5@PyTuple_Ge

; 7    : 		return false;
; 8    : 
; 9    : 	if (!handle)

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _handle$[ebp]
  0001d	85 c9		 test	 ecx, ecx
  0001f	74 0b		 je	 SHORT $LN5@PyTuple_Ge

; 11   : 
; 12   : 	*ppTextInstance=(CGraphicTextInstance*)handle;

  00021	8b 45 10	 mov	 eax, DWORD PTR _ppTextInstance$[ebp]
  00024	89 08		 mov	 DWORD PTR [eax], ecx

; 13   : 
; 14   : 	return true;

  00026	b0 01		 mov	 al, 1

; 15   : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN5@PyTuple_Ge:

; 10   : 		return false;

  0002c	32 c0		 xor	 al, al

; 15   : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ENDP ; PyTuple_GetTextInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 137  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 139  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 140  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 87   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 141  :         _Throw_bad_array_new_length(); // add overflow
; 142  :     }
; 143  : 
; 144  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 87   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 146  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 147  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 148  : 
; 149  : #ifdef _DEBUG
; 150  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 151  : #endif // _DEBUG
; 152  :     return _Ptr;
; 153  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 145  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?initgrpText@@YAXXZ
_TEXT	SEGMENT
?initgrpText@@YAXXZ PROC				; initgrpText, COMDAT

; 395  : 	static PyMethodDef s_methods[] =
; 396  : 	{
; 397  : 		{ "Update",								grpTextUpdate,								METH_VARARGS },
; 398  : 		{ "Render",								grpTextRender,								METH_VARARGS },
; 399  : 		{ "Generate",							grpTextGenerate,							METH_VARARGS },
; 400  : 		{ "Destroy",							grpTextDestroy,								METH_VARARGS },
; 401  : 		{ "SetFontName",						grpTextSetFontName,							METH_VARARGS },
; 402  : 		{ "SetFontColor",						grpTextSetFontColor,						METH_VARARGS },
; 403  : 		{ "SetOutLineColor",					grpTextSetOutLineColor,						METH_VARARGS },
; 404  : 		{ "SetSecret",							grpTextSetSecret,							METH_VARARGS },
; 405  : 		{ "SetOutline",							grpTextOutline,								METH_VARARGS },
; 406  : 		{ "SetText",							grpTextSetText,								METH_VARARGS },
; 407  : 		{ "GetText",							grpTextGetText,								METH_VARARGS },
; 408  : 		{ "GetSize",							grpTextGetSize,								METH_VARARGS },
; 409  : 		{ "SetPosition",						grpTextSetPosition,							METH_VARARGS },
; 410  : 		{ "ShowCursor",							grpTextShowCursor,							METH_VARARGS },
; 411  : 		{ "HideCursor",							grpTextHideCursor,							METH_VARARGS },
; 412  : 		{ "SetHorizontalAlign",					grpSetHorizontalAlign,						METH_VARARGS },
; 413  : 		{ "SetVerticalAlign",					grpSetVerticalAlign,						METH_VARARGS },
; 414  : 		{ "SetMax",								grpSetMax,									METH_VARARGS },
; 415  : 		{ "GetSplitingTextLineCount",			grpGetSplitingTextLineCount,				METH_VARARGS },
; 416  : 		{ "GetSplitingTextLine",				grpGetSplitingTextLine,						METH_VARARGS },
; 417  : 		{ "PixelPositionToCharacterPosition",	grpTextPixelPositionToCharacterPosition,	METH_VARARGS },
; 418  : 		{ NULL, NULL, NULL },
; 419  : 	};
; 420  : 
; 421  : 	Py_InitModule("grpText", s_methods);

  00000	68 f5 03 00 00	 push	 1013			; 000003f5H
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	68 00 00 00 00	 push	 OFFSET ?s_methods@?1??initgrpText@@YAXXZ@4PAUPyMethodDef@@A
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_07OAPMKONH@grpText@
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_InitModule4
  00019	83 c4 14	 add	 esp, 20			; 00000014H

; 422  : }

  0001c	c3		 ret	 0
?initgrpText@@YAXXZ ENDP				; initgrpText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
_TEXT	SEGMENT
tv517 = -12						; size = 4
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
__Ch$ = 8						; size = 1
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT
; _this$ = ecx

; 4045 :     _CONSTEXPR20 void push_back(const _Elem _Ch) { // insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 4046 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 4047 :         if (_Old_size < _Mypair._Myval2._Myres) {

  0000a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000d	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00010	89 4d f8	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00013	3b d9		 cmp	 ebx, ecx
  00015	73 20		 jae	 SHORT $LN2@push_back

; 4048 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + 1);
; 4049 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00017	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0001a	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 2244 :         return _BUF_SIZE <= _Myres;

  0001d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2227 :         if (_Large_string_engaged()) {

  00020	72 02		 jb	 SHORT $LN5@push_back

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  00022	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@push_back:

; 4050 :             _Elem* const _Ptr       = _Mypair._Myval2._Myptr();
; 4051 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  00024	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  00027	88 04 1e	 mov	 BYTE PTR [esi+ebx], al

; 4052 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  0002a	c6 44 1e 01 00	 mov	 BYTE PTR [esi+ebx+1], 0
  0002f	5e		 pop	 esi

; 4064 :     }

  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN2@push_back:

; 4766 :         if (max_size() - _Old_size < _Size_increase) {

  00037	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  0003c	8b c2		 mov	 eax, edx
  0003e	2b c3		 sub	 eax, ebx
  00040	83 f8 01	 cmp	 eax, 1
  00043	0f 82 fc 00 00
	00		 jb	 $LN72@push_back
  00049	57		 push	 edi

; 4768 :         }
; 4769 : 
; 4770 :         const size_type _New_size     = _Old_size + _Size_increase;

  0004a	8d 7b 01	 lea	 edi, DWORD PTR [ebx+1]

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004d	83 cf 0f	 or	 edi, 15			; 0000000fH
  00050	3b fa		 cmp	 edi, edx

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00052	76 15		 jbe	 SHORT $LN17@push_back

; 4716 :             return _Max;

  00054	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00059	8b fa		 mov	 edi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  00064	83 c4 04	 add	 esp, 4
  00067	eb 55		 jmp	 SHORT $LN69@push_back
$LN17@push_back:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4719 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00069	8b c1		 mov	 eax, ecx
  0006b	d1 e8		 shr	 eax, 1
  0006d	2b d0		 sub	 edx, eax
  0006f	3b ca		 cmp	 ecx, edx
  00071	76 18		 jbe	 SHORT $LN18@push_back

; 4720 :             return _Max;

  00073	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00078	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00083	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  00086	83 c4 04	 add	 esp, 4
  00089	eb 33		 jmp	 SHORT $LN69@push_back
$LN18@push_back:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0008b	03 c1		 add	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  0008d	3b f8		 cmp	 edi, eax
  0008f	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4774 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00092	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00095	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0009a	72 0e		 jb	 SHORT $LN25@push_back

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a2	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  000a5	83 c4 04	 add	 esp, 4
  000a8	eb 14		 jmp	 SHORT $LN69@push_back
$LN25@push_back:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000aa	85 c0		 test	 eax, eax
  000ac	74 0e		 je	 SHORT $LN26@push_back

; 87   :         return ::operator new(_Bytes);

  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  000b4	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]

; 87   :         return ::operator new(_Bytes);

  000b7	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN69@push_back
$LN26@push_back:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN69@push_back:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4780 :         _My_data._Myres       = _New_capacity;

  000be	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000c1	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
  000c4	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 4781 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000c7	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  000ca	89 56 10	 mov	 DWORD PTR [esi+16], edx
  000cd	89 7d f4	 mov	 DWORD PTR tv517[ebp], edi

; 4782 :         if (_BUF_SIZE <= _Old_capacity) {

  000d0	53		 push	 ebx
  000d1	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000d4	72 4e		 jb	 SHORT $LN11@push_back

; 4783 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000d6	8b 3e		 mov	 edi, DWORD PTR [esi]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d8	57		 push	 edi
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _memcpy

; 4060 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  000df	8b 4d f4	 mov	 ecx, DWORD PTR tv517[ebp]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4060 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  000e5	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  000e8	88 01		 mov	 BYTE PTR [ecx], al

; 4061 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  000ea	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 4785 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000ee	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  000f1	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f8	72 12		 jb	 SHORT $LN48@push_back

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fa	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000fd	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00100	2b fa		 sub	 edi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00102	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00105	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00108	77 40		 ja	 SHORT $LN45@push_back

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010a	8b fa		 mov	 edi, edx
$LN48@push_back:

; 265  :         ::operator delete(_Ptr, _Bytes);

  0010c	51		 push	 ecx
  0010d	57		 push	 edi
  0010e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4789 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00113	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  00116	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4789 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00119	89 06		 mov	 DWORD PTR [esi], eax
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi

; 4064 :     }

  0011d	5b		 pop	 ebx
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 04 00	 ret	 4
$LN11@push_back:

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00124	56		 push	 esi
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 _memcpy

; 4060 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  0012b	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0012e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4060 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  00131	88 07		 mov	 BYTE PTR [edi], al

; 4789 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00133	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 4061 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00136	c6 47 01 00	 mov	 BYTE PTR [edi+1], 0
  0013a	5f		 pop	 edi

; 4789 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0013b	89 06		 mov	 DWORD PTR [esi], eax
  0013d	5e		 pop	 esi

; 4064 :     }

  0013e	5b		 pop	 ebx
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c2 04 00	 ret	 4
$LN72@push_back:

; 4767 :             _Xlen_string(); // result too long

  00145	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN45@push_back:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN68@push_back:
  0014f	cc		 int	 3
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv507 = -12						; size = 4
__Old$1$ = -8						; size = 4
tv519 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
tv512 = 12						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3268 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3269 :         // append [_Ptr, _Ptr + _Count)
; 3270 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3271 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 3272 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 3273 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2226 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2244 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2227 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3274 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3275 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3276 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3289 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 4766 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 26 01 00
	00		 jb	 $LN77@append

; 4768 :         }
; 4769 : 
; 4770 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00062	83 ce 0f	 or	 esi, 15			; 0000000fH
  00065	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 18		 jbe	 SHORT $LN19@append

; 4716 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00080	83 c4 04	 add	 esp, 4
  00083	eb 61		 jmp	 SHORT $LN75@append
$LN19@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4719 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00085	8b c2		 mov	 eax, edx
  00087	d1 e8		 shr	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR tv512[ebp], eax
  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00091	2b 45 0c	 sub	 eax, DWORD PTR tv512[ebp]
  00094	3b d0		 cmp	 edx, eax
  00096	76 18		 jbe	 SHORT $LN20@append

; 4720 :             return _Max;

  00098	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 36		 jmp	 SHORT $LN75@append
$LN20@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4723 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b0	8b 45 0c	 mov	 eax, DWORD PTR tv512[ebp]
  000b3	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  000b5	3b f0		 cmp	 esi, eax
  000b7	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4774 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000ba	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c2	72 0e		 jb	 SHORT $LN27@append

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cd	83 c4 04	 add	 esp, 4
  000d0	eb 14		 jmp	 SHORT $LN75@append
$LN27@append:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN28@append

; 87   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 245  :         return _Traits::_Allocate(_Bytes);

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 87   :         return ::operator new(_Bytes);

  000df	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000e2	eb 02		 jmp	 SHORT $LN75@append
$LN28@append:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000e4	33 c0		 xor	 eax, eax
$LN75@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4782 :         if (_BUF_SIZE <= _Old_capacity) {

  000e6	83 7d f8 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000ea	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ed	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000f3	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000f6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f9	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
  000fc	89 75 fc	 mov	 DWORD PTR tv519[ebp], esi
  000ff	89 55 f4	 mov	 DWORD PTR tv507[ebp], edx
  00102	51		 push	 ecx
  00103	72 56		 jb	 SHORT $LN13@append

; 4783 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00105	8b 37		 mov	 esi, DWORD PTR [edi]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00107	56		 push	 esi
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	53		 push	 ebx
  0010f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00112	ff 75 fc	 push	 DWORD PTR tv519[ebp]
  00115	e8 00 00 00 00	 call	 _memcpy

; 3286 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011a	8b 45 f4	 mov	 eax, DWORD PTR tv507[ebp]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 18	 add	 esp, 24			; 00000018H

; 4785 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  00123	41		 inc	 ecx

; 3286 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00124	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00127	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012d	72 12		 jb	 SHORT $LN52@append

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0012f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00132	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00135	2b f2		 sub	 esi, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	77 4b		 ja	 SHORT $LN49@append

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013f	8b f2		 mov	 esi, edx
$LN52@append:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00141	51		 push	 ecx
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3280 :         return _Reallocate_grow_by(

  00148	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 265  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 3280 :         return _Reallocate_grow_by(

  0014e	89 07		 mov	 DWORD PTR [edi], eax

; 3289 :     }

  00150	8b c7		 mov	 eax, edi
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 08 00	 ret	 8
$LN13@append:

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015b	57		 push	 edi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	53		 push	 ebx
  00163	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _memcpy

; 3286 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0016c	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016f	83 c4 18	 add	 esp, 24			; 00000018H

; 3286 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00172	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3280 :         return _Reallocate_grow_by(

  00175	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  00178	89 07		 mov	 DWORD PTR [edi], eax

; 3289 :     }

  0017a	8b c7		 mov	 eax, edi
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN77@append:

; 4767 :             _Xlen_string(); // result too long

  00185	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN73@append:
  0018f	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3118 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2244 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4832 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 969  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4838 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 261  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 160  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 161  : 
; 162  :     // If the following asserts, it likely means that we are performing
; 163  :     // an aligned delete on memory coming from an unaligned allocation.
; 164  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 165  : 
; 166  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 167  :     // in range [_Min_back_shift, _Non_user_size]
; 168  : #ifdef _DEBUG
; 169  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 170  : #else // ^^^ _DEBUG / !_DEBUG vvv
; 171  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 172  : #endif // _DEBUG
; 173  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 175  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 265  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 4841 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4842 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4843 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4844 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3126 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 174  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN30@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2539 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	57		 push	 edi

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000f	8b f7		 mov	 esi, edi

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 2293 :     size_type _Mysize = 0; // current length of string

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2294 :     size_type _Myres  = 0; // current storage reserved for string

  0001b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 403  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL39@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL39@basic_stri
  0002c	2b f1		 sub	 esi, ecx

; 2620 :         if (_Count > max_size()) {

  0002e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00034	0f 87 a5 00 00
	00		 ja	 $LN49@basic_stri

; 2622 :         }
; 2623 : 
; 2624 :         auto& _Al       = _Getal();
; 2625 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2626 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2627 : 
; 2628 :         if (_Count < _BUF_SIZE) {

  0003a	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  00041	83 fe 10	 cmp	 esi, 16			; 00000010H
  00044	73 1d		 jae	 SHORT $LN15@basic_stri

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	53		 push	 ebx

; 2629 :             _My_data._Mysize = _Count;

  00049	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	e8 00 00 00 00	 call	 _memcpy

; 2637 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00051	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2541 :     }

  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	8b c3		 mov	 eax, ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN15@basic_stri:

; 4714 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4715 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 15		 jbe	 SHORT $LN22@basic_stri

; 4716 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	83 c4 04	 add	 esp, 4
  00083	eb 30		 jmp	 SHORT $LN47@basic_stri
$LN22@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\utility

; 47   :     return _Left < _Right ? _Right : _Left;

  00085	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0008a	3b f8		 cmp	 edi, eax
  0008c	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 2652 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0008f	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xmemory

; 238  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 0b		 jb	 SHORT $LN30@basic_stri

; 239  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	83 c4 04	 add	 esp, 4
  000a2	eb 11		 jmp	 SHORT $LN47@basic_stri
$LN30@basic_stri:

; 240  :         }
; 241  :     }
; 242  : #endif // defined(_M_IX86) || defined(_M_X64)
; 243  : 
; 244  :     if (_Bytes != 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	74 0b		 je	 SHORT $LN31@basic_stri

; 87   :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ae	83 c4 04	 add	 esp, 4

; 245  :         return _Traits::_Allocate(_Bytes);

  000b1	eb 02		 jmp	 SHORT $LN47@basic_stri
$LN31@basic_stri:

; 246  :     }
; 247  : 
; 248  :     return nullptr;

  000b3	33 c0		 xor	 eax, eax
$LN47@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b5	56		 push	 esi
  000b6	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000b9	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bc	50		 push	 eax

; 2653 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000bd	89 03		 mov	 DWORD PTR [ebx], eax

; 2654 : 
; 2655 :         _Start_element_lifetimes(_Unfancy(_New_ptr), _New_capacity + 1);
; 2656 : 
; 2657 :         _My_data._Mysize = _Count;

  000bf	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 2658 :         _My_data._Myres  = _New_capacity;

  000c2	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 66   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	e8 00 00 00 00	 call	 _memcpy

; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000ca	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2541 :     }

  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	5f		 pop	 edi

; 2664 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000d1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 2540 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2541 :     }

  000d5	8b c3		 mov	 eax, ebx
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
$LN49@basic_stri:

; 2621 :             _Xlen_string(); // result too long

  000df	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN45@basic_stri:
  000e4	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2312 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 331  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 332  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
