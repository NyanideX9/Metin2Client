; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\parser.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; script::SArgumet::SArgumet
PUBLIC	??0SArgumet@script@@QAE@ABU01@@Z		; script::SArgumet::SArgumet
PUBLIC	??1SArgumet@script@@QAE@XZ			; script::SArgumet::~SArgumet
PUBLIC	?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back
PUBLIC	??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >
PUBLIC	??1SCmd@script@@QAE@XZ				; script::SCmd::~SCmd
PUBLIC	??0Group@script@@QAE@XZ				; script::Group::Group
PUBLIC	??1Group@script@@QAE@XZ				; script::Group::~Group
PUBLIC	?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; script::Group::Create
PUBLIC	?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z		; script::Group::GetCmd
PUBLIC	?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z	; script::Group::ReadCmd
PUBLIC	?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; script::Group::GetError
PUBLIC	?SetError@Group@script@@AAEXPBD@Z		; script::Group::SetError
PUBLIC	?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z ; script::Group::GetArg
PUBLIC	?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back
PUBLIC	?LocaleString_FindChar@@YAPBDPBDHD@Z		; LocaleString_FindChar
PUBLIC	?LocaleString_RightTrim@@YAHPADH@Z		; LocaleString_RightTrim
PUBLIC	?LocaleString_RightTrim@@YAXPAD@Z		; LocaleString_RightTrim
PUBLIC	?OLD_rtrim@@YAXPAD@Z				; OLD_rtrim
PUBLIC	?LocaleString_Skip@@YAPBDKPBD@Z			; LocaleString_Skip
PUBLIC	??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >
PUBLIC	??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >
PUBLIC	??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_unchecked<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0>,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
PUBLIC	??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@ ; `string'
PUBLIC	??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@ ; `string'
PUBLIC	??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@ ; `string'
PUBLIC	??_C@_0BB@DGGADPCI@no?5argument?5name@		; `string'
PUBLIC	??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@ ; `string'
PUBLIC	??_C@_06MJINCFFA@LETTER@			; `string'
PUBLIC	??_C@_05MFEJDJP@value@				; `string'
PUBLIC	??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@ ; `string'
PUBLIC	??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@ ; `string'
PUBLIC	??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@ ; `string'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isspace:PROC
EXTRN	__imp__CharNextExA@12:PROC
EXTRN	__imp__CharPrevExA@16:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetDefaultCodePage@@YAKXZ:PROC			; GetDefaultCodePage
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?$TSS0@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 01H DUP (?) ; `script::Group::Create'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@
CONST	SEGMENT
??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@ DB ' !! '
	DB	'PARSING ERROR - Unknown Arguments : %d, %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@
CONST	SEGMENT
??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@ DB ' !! '
	DB	'PARSING ERROR - Buffer Overflow : %d, %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@
CONST	SEGMENT
??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@ DB ' !! '
	DB	'PARSING ERROR - Syntax Error : %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFEJDJP@value@
CONST	SEGMENT
??_C@_05MFEJDJP@value@ DB 'value', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJINCFFA@LETTER@
CONST	SEGMENT
??_C@_06MJINCFFA@LETTER@ DB 'LETTER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@
CONST	SEGMENT
??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@ DB 'Source file has no'
	DB	' content', 00H				; `string'
CONST	ENDS
;	COMDAT ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
_DATA	SEGMENT
?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A DB 00H ; `script::Group::Create'::`2'::stLetter
	DB	19 DUP(00H)
	DD	0fH
_DATA	ENDS
;	COMDAT ??_C@_0BB@DGGADPCI@no?5argument?5name@
CONST	SEGMENT
??_C@_0BB@DGGADPCI@no?5argument?5name@ DB 'no argument name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@
CONST	SEGMENT
??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@ DB 'argument nam'
	DB	'e overflow: must be shorter than 32 letters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@
CONST	SEGMENT
??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@ DB 'argument val'
	DB	'ue overflow: must be shorter than 64 letters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@
CONST	SEGMENT
??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@ DB 'Infinite loop '
	DB	'in LocaleString_Skip [%s]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0
__ehfuncinfo$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z$1
__ehfuncinfo$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z$0
__ehfuncinfo$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$1
__ehfuncinfo$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z$2
__ehfuncinfo$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z$1
__ehfuncinfo$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z$3
__ehfuncinfo$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$3
__ehfuncinfo$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$10
	DD	02H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$11
	DD	01H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$2
	DD	04H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$19
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$3
	DD	06H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$4
	DD	07H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$13
	DD	01H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	05H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4
	DD	06H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$17
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Group@script@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Group@script@@QAE@XZ$0
__ehfuncinfo$??0Group@script@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Group@script@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SCmd@script@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SCmd@script@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SCmd@script@@QAE@ABU01@@Z$1
__ehfuncinfo$??0SCmd@script@@QAE@ABU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SCmd@script@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SCmd@script@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SCmd@script@@QAE@XZ$0
__ehfuncinfo$??0SCmd@script@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SCmd@script@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z$1
__ehfuncinfo$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SArgumet@script@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$1
__ehfuncinfo$??0SArgumet@script@@QAE@ABU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SArgumet@script@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
__ehfuncinfo$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
;	COMDAT ??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >, COMDAT
; _this$ = ecx

; 732  :         if (_Added == 0) {

  00000	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00004	74 39		 je	 SHORT $LN46@List_node_

; 733  :             return;
; 734  :         }
; 735  : 
; 736  :         _Construct_in_place(_Head->_Prev, pointer{});

  00006	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00009	57		 push	 edi
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 737  :         _Construct_in_place(_Tail->_Next, pointer{});

  00011	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 738  :         pointer _Subject = _Head;

  0001a	8b 79 0c	 mov	 edi, DWORD PTR [ecx+12]

; 739  :         while (_Subject) {

  0001d	85 ff		 test	 edi, edi
  0001f	74 1d		 je	 SHORT $LN51@List_node_
  00021	56		 push	 esi
$LL2@List_node_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00022	8b f7		 mov	 esi, edi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00024	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 317  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00026	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00029	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002e	6a 38		 push	 56			; 00000038H
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 739  :         while (_Subject) {

  00039	85 ff		 test	 edi, edi
  0003b	75 e5		 jne	 SHORT $LL2@List_node_
  0003d	5e		 pop	 esi
$LN51@List_node_:
  0003e	5f		 pop	 edi
$LN46@List_node_:

; 740  :             value_type::_Freenode(_Al, _STD exchange(_Subject, _Subject->_Next));
; 741  :         }
; 742  :     }

  0003f	c3		 ret	 0
??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 38		 push	 56			; 00000038H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
;	COMDAT ??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
_TEXT	SEGMENT
__Op$2 = -44						; size = 16
__Newnode$3 = -28					; size = 8
__Erasures$1$ = -24					; size = 4
_c_arg$1$ = -24						; size = 4
__Myend$1$ = -20					; size = 4
__Op$2$ = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z PROC ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_unchecked<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0>,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >, COMDAT
; _this$ = ecx

; 1312 :     void _Assign_unchecked(_Iter _First, const _Sent _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b c1		 mov	 eax, ecx
  0002a	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 1313 :         // assign [_First, _Last)
; 1314 :         const auto _Myend = _Mypair._Myval2._Myhead;

  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]

; 72   :         return _Ptr == _Right._Ptr;

  0002f	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00032	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]

; 1313 :         // assign [_First, _Last)
; 1314 :         const auto _Myend = _Mypair._Myval2._Myhead;

  00035	89 4d ec	 mov	 DWORD PTR __Myend$1$[ebp], ecx

; 1315 :         auto _Old         = _Myend->_Next;

  00038	8b 19		 mov	 ebx, DWORD PTR [ecx]

; 72   :         return _Ptr == _Right._Ptr;

  0003a	3b f7		 cmp	 esi, edi

; 1316 :         for (;;) { // attempt to reuse a node
; 1317 :             if (_First == _Last) {

  0003c	74 68		 je	 SHORT $LN234@Assign_unc
  0003e	66 90		 npad	 2
$LL4@Assign_unc:

; 1318 :                 // input sequence exhausted; destroy and deallocate any tail of unneeded nodes
; 1319 :                 _Unchecked_erase(_Old, _Myend);
; 1320 :                 return;
; 1321 :             }
; 1322 : 
; 1323 :             if (_Old == _Myend) { // no more nodes to reuse, append the rest

  00040	3b d9		 cmp	 ebx, ecx
  00042	0f 84 b4 00 00
	00		 je	 $LN235@Assign_unc

; 42   :         return _Ptr->_Myval;

  00048	8d 46 08	 lea	 eax, DWORD PTR [esi+8]

; 1325 :                 _Op._Append_range_unchecked(_STD move(_First), _Last);
; 1326 :                 _Op._Attach_at_end(_Mypair._Myval2);
; 1327 :                 return;
; 1328 :             }
; 1329 : 
; 1330 :             // reuse the node
; 1331 :             _Old->_Myval = *_First;

  0004b	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]

; 42   :         return _Ptr->_Myval;

  0004e	89 45 e8	 mov	 DWORD PTR _c_arg$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  00051	3b d0		 cmp	 edx, eax
  00053	74 21		 je	 SHORT $LN206@Assign_unc

; 434  :         return _Myres > _Small_string_capacity;

  00055	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00059	8b c8		 mov	 ecx, eax

; 426  :         if (_Large_mode_engaged()) {

  0005b	76 02		 jbe	 SHORT $LN210@Assign_unc

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN210@Assign_unc:

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0005f	ff 70 10	 push	 DWORD PTR [eax+16]
  00062	51		 push	 ecx
  00063	8b ca		 mov	 ecx, edx
  00065	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0006a	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0006d	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]
  00070	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00073	8b 45 e8	 mov	 eax, DWORD PTR _c_arg$1$[ebp]
$LN206@Assign_unc:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 24   : 			strValue = c_arg.strValue;

  00076	83 c0 18	 add	 eax, 24			; 00000018H
  00079	8d 4a 18	 lea	 ecx, DWORD PTR [edx+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  0007c	3b c8		 cmp	 ecx, eax
  0007e	74 18		 je	 SHORT $LN216@Assign_unc

; 434  :         return _Myres > _Small_string_capacity;

  00080	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00084	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  00087	76 02		 jbe	 SHORT $LN220@Assign_unc

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00089	8b 00		 mov	 eax, DWORD PTR [eax]
$LN220@Assign_unc:

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0008b	52		 push	 edx
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00092	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  00095	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
$LN216@Assign_unc:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 50   :         _Ptr = _Ptr->_Next;

  00098	8b 36		 mov	 esi, DWORD PTR [esi]

; 1332 :             _Old         = _Old->_Next;

  0009a	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  0009c	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$1$[ebp]

; 50   :         _Ptr = _Ptr->_Next;

  0009f	89 75 08	 mov	 DWORD PTR __First$[ebp], esi

; 72   :         return _Ptr == _Right._Ptr;

  000a2	3b f7		 cmp	 esi, edi

; 1316 :         for (;;) { // attempt to reuse a node
; 1317 :             if (_First == _Last) {

  000a4	75 9a		 jne	 SHORT $LL4@Assign_unc
$LN234@Assign_unc:

; 1445 :         if (_First == _Last) {

  000a6	3b d9		 cmp	 ebx, ecx
  000a8	74 3e		 je	 SHORT $LN12@Assign_unc

; 1446 :             return _Last;
; 1447 :         }
; 1448 : 
; 1449 :         const auto _Predecessor = _First->_Prev;

  000aa	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000ad	8b 7d ec	 mov	 edi, DWORD PTR __Myend$1$[ebp]

; 1450 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1451 :         const auto _Head = _Mypair._Myval2._Myhead;
; 1452 :         if (_First == _Head->_Next && _Last == _Head) { // orphan all non-end iterators
; 1453 :             _Mypair._Myval2._Orphan_non_end();
; 1454 :         } else { // orphan erased iterators
; 1455 :             _Lockit _Lock(_LOCK_DEBUG);
; 1456 :             for (auto _Marked = _First; _Marked != _Last; _Marked = _Marked->_Next) { // mark erased nodes
; 1457 :                 _Marked->_Prev = nullptr;
; 1458 :             }
; 1459 : 
; 1460 :             _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;
; 1461 :             while (*_Pnext) {
; 1462 :                 _Iterator_base12** _Pnextnext = &(*_Pnext)->_Mynextiter;
; 1463 :                 if (static_cast<const_iterator&>(**_Pnext)._Ptr->_Prev) { // node still has a _Prev, skip
; 1464 :                     _Pnext = _Pnextnext;
; 1465 :                 } else { // orphan the iterator
; 1466 :                     (*_Pnext)->_Myproxy = nullptr;
; 1467 :                     *_Pnext             = *_Pnextnext;
; 1468 :                 }
; 1469 :             }
; 1470 : 
; 1471 :             // _Prev pointers not restored because we're about to delete the nodes of which they are a member anyway
; 1472 :         }
; 1473 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 
; 1475 :         // snip out the removed range
; 1476 :         _Predecessor->_Next = _Last;
; 1477 :         _Last->_Prev        = _Predecessor;
; 1478 : 
; 1479 :         // count and deallocate the removed nodes
; 1480 :         auto& _Al           = _Getal();
; 1481 :         size_type _Erasures = 0;

  000b0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Erasures$1$[ebp], 0
  000b7	89 08		 mov	 DWORD PTR [eax], ecx
  000b9	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000bc	0f 1f 40 00	 npad	 4
$LL15@Assign_unc:

; 1482 :         do {
; 1483 :             const auto _Next = _First->_Next;

  000c0	8b 33		 mov	 esi, DWORD PTR [ebx]

; 317  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  000c2	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  000c5	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000ca	6a 38		 push	 56			; 00000038H
  000cc	53		 push	 ebx
  000cd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1486 :             ++_Erasures;

  000d2	8b 45 e8	 mov	 eax, DWORD PTR __Erasures$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000d5	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1486 :             ++_Erasures;

  000d8	40		 inc	 eax
  000d9	8b de		 mov	 ebx, esi
  000db	89 45 e8	 mov	 DWORD PTR __Erasures$1$[ebp], eax

; 1487 :         } while (_First != _Last);

  000de	3b f7		 cmp	 esi, edi
  000e0	75 de		 jne	 SHORT $LL15@Assign_unc

; 1488 : 
; 1489 :         _Mypair._Myval2._Mysize -= _Erasures;

  000e2	8b 55 f0	 mov	 edx, DWORD PTR _this$1$[ebp]
  000e5	29 42 04	 sub	 DWORD PTR [edx+4], eax
$LN12@Assign_unc:

; 1333 :             ++_First;
; 1334 :         }
; 1335 :     }

  000e8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000eb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f2	59		 pop	 ecx
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	5b		 pop	 ebx
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c2 08 00	 ret	 8
$LN235@Assign_unc:

; 617  :     explicit _List_node_insert_op2(_Alnode& _Al_) : _Al(_Al_), _Added(0) {}

  000fc	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  000ff	33 c9		 xor	 ecx, ecx

; 708  :     }
; 709  : 
; 710  :     template <class _Val_types>
; 711  :     void _Attach_head(_List_val<_Val_types>& _List_data) {
; 712  :         _Alloc_construct_ptr<_Alnode> _Newnode(_Al);
; 713  :         _Newnode._Allocate(); // throws
; 714  :         const auto _Local_added = _STD exchange(_Added, size_type{0});
; 715  :         if (_Local_added == 0) {
; 716  :             _Construct_in_place(_Newnode._Ptr->_Next, _Newnode._Ptr);
; 717  :             _Construct_in_place(_Newnode._Ptr->_Prev, _Newnode._Ptr);
; 718  :         } else {
; 719  :             const auto _Local_head = _Head;
; 720  :             const auto _Local_tail = _Tail;
; 721  :             _Construct_in_place(_Newnode._Ptr->_Next, _Local_head);
; 722  :             _Construct_in_place(_Newnode._Ptr->_Prev, _Local_tail);
; 723  :             _Construct_in_place(_Local_head->_Prev, _Newnode._Ptr);
; 724  :             _Construct_in_place(_Local_tail->_Next, _Newnode._Ptr);
; 725  :         }
; 726  : 
; 727  :         _List_data._Mysize = _Local_added;
; 728  :         _List_data._Myhead = _Newnode._Release();
; 729  :     }
; 730  : 
; 731  :     ~_List_node_insert_op2() {
; 732  :         if (_Added == 0) {
; 733  :             return;
; 734  :         }
; 735  : 
; 736  :         _Construct_in_place(_Head->_Prev, pointer{});
; 737  :         _Construct_in_place(_Tail->_Next, pointer{});
; 738  :         pointer _Subject = _Head;
; 739  :         while (_Subject) {
; 740  :             value_type::_Freenode(_Al, _STD exchange(_Subject, _Subject->_Next));
; 741  :         }
; 742  :     }
; 743  : 
; 744  : private:
; 745  :     _Alnode& _Al;
; 746  :     size_type _Added; // if 0, the values of _Head and _Tail are indeterminate
; 747  :     pointer _Tail{}; // points to the most recently appended element; it doesn't have _Next constructed

  00101	33 db		 xor	 ebx, ebx
  00103	89 45 d4	 mov	 DWORD PTR __Op$2[ebp], eax
  00106	89 4d d8	 mov	 DWORD PTR __Op$2[ebp+4], ecx
  00109	89 5d dc	 mov	 DWORD PTR __Op$2[ebp+8], ebx

; 748  :     pointer _Head{}; // points to the first appended element; it doesn't have _Prev constructed

  0010c	89 4d e0	 mov	 DWORD PTR __Op$2[ebp+12], ecx

; 1324 :                 _List_node_insert_op2<_Alnode> _Op(_Getal());

  0010f	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 72   :         return _Ptr == _Right._Ptr;

  00112	3b f7		 cmp	 esi, edi

; 654  :         if (_First == _Last) { // throws

  00114	0f 84 8d 00 00
	00		 je	 $LN110@Assign_unc
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0011a	89 45 e4	 mov	 DWORD PTR __Newnode$3[ebp], eax

; 136  :         return ::operator new(_Bytes);

  0011d	6a 38		 push	 56			; 00000038H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 658  :         _Alloc_construct_ptr<_Alnode> _Newnode(_Al);

  0011f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00123	89 5d e8	 mov	 DWORD PTR __Newnode$3[ebp+4], ebx

; 136  :         return ::operator new(_Bytes);

  00126	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  0012b	8b d8		 mov	 ebx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 42   :         return _Ptr->_Myval;

  0012d	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00130	83 c4 04	 add	 esp, 4

; 256  :         return _Traits::_Allocate(_Bytes);

  00133	89 5d ec	 mov	 DWORD PTR __Op$2$[ebp], ebx

; 1164 :         _Ptr = _Al.allocate(1);

  00136	89 5d e8	 mov	 DWORD PTR __Newnode$3[ebp+4], ebx

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00139	51		 push	 ecx
  0013a	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0013d	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 50   :         _Ptr = _Ptr->_Next;

  00142	8b 36		 mov	 esi, DWORD PTR [esi]

; 665  :             ++_Added;

  00144	b9 01 00 00 00	 mov	 ecx, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00149	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$3[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 663  :             _Head               = _Newhead;

  00150	89 5d e0	 mov	 DWORD PTR __Op$2[ebp+12], ebx

; 664  :             _Tail               = _Newhead;

  00153	89 5d dc	 mov	 DWORD PTR __Op$2[ebp+8], ebx

; 665  :             ++_Added;

  00156	89 4d d8	 mov	 DWORD PTR __Op$2[ebp+4], ecx

; 72   :         return _Ptr == _Right._Ptr;

  00159	3b f7		 cmp	 esi, edi

; 669  :         while (_First != _Last) { // throws

  0015b	74 47		 je	 SHORT $LN249@Assign_unc
  0015d	0f 1f 00	 npad	 3
$LL57@Assign_unc:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00160	6a 38		 push	 56			; 00000038H

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00162	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$3[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00169	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0016e	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 42   :         return _Ptr->_Myval;

  00171	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 256  :         return _Traits::_Allocate(_Bytes);

  00174	8b d8		 mov	 ebx, eax

; 1164 :         _Ptr = _Al.allocate(1);

  00176	89 5d e8	 mov	 DWORD PTR __Newnode$3[ebp+4], ebx

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00179	51		 push	 ecx
  0017a	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0017d	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 672  :             _Construct_in_place(_Tail->_Next, _Newnode._Ptr);

  00182	8b 45 ec	 mov	 eax, DWORD PTR __Op$2$[ebp]

; 675  :             ++_Added;

  00185	8b 4d d8	 mov	 ecx, DWORD PTR __Op$2[ebp+4]
  00188	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00189	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$3[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 674  :             _Tail = _STD exchange(_Newnode._Ptr, pointer{});

  00190	89 5d ec	 mov	 DWORD PTR __Op$2$[ebp], ebx
  00193	89 18		 mov	 DWORD PTR [eax], ebx
  00195	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 50   :         _Ptr = _Ptr->_Next;

  00198	8b 36		 mov	 esi, DWORD PTR [esi]

; 674  :             _Tail = _STD exchange(_Newnode._Ptr, pointer{});

  0019a	89 5d dc	 mov	 DWORD PTR __Op$2[ebp+8], ebx

; 675  :             ++_Added;

  0019d	89 4d d8	 mov	 DWORD PTR __Op$2[ebp+4], ecx

; 72   :         return _Ptr == _Right._Ptr;

  001a0	3b f7		 cmp	 esi, edi

; 669  :         while (_First != _Last) { // throws

  001a2	75 bc		 jne	 SHORT $LL57@Assign_unc
$LN249@Assign_unc:

; 707  :         _Attach_before(_List_data, _List_data._Myhead);

  001a4	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
$LN110@Assign_unc:
  001a7	8b 10		 mov	 edx, DWORD PTR [eax]

; 687  :         if (_Local_added == 0) {

  001a9	85 c9		 test	 ecx, ecx
  001ab	0f 84 37 ff ff
	ff		 je	 $LN12@Assign_unc

; 688  :             return _Insert_before;
; 689  :         }
; 690  : 
; 691  :         const auto _Local_head   = _Head;
; 692  :         const auto _Local_tail   = _Tail;
; 693  :         const auto _Insert_after = _Insert_before->_Prev;

  001b1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 694  : 
; 695  :         _Construct_in_place(_Local_head->_Prev, _Insert_after);

  001b4	8b 75 e0	 mov	 esi, DWORD PTR __Op$2[ebp+12]
  001b7	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 696  :         _Insert_after->_Next = _Local_head;

  001ba	89 30		 mov	 DWORD PTR [eax], esi

; 697  :         _Construct_in_place(_Local_tail->_Next, _Insert_before);

  001bc	89 13		 mov	 DWORD PTR [ebx], edx

; 698  :         _Insert_before->_Prev = _Local_tail;

  001be	89 5a 04	 mov	 DWORD PTR [edx+4], ebx

; 699  : 
; 700  :         _List_data._Mysize += _Local_added;

  001c1	8b 55 f0	 mov	 edx, DWORD PTR _this$1$[ebp]
  001c4	01 4a 04	 add	 DWORD PTR [edx+4], ecx

; 1333 :             ++_First;
; 1334 :         }
; 1335 :     }

  001c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d1	59		 pop	 ecx
  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	5b		 pop	 ebx
  001d5	8b e5		 mov	 esp, ebp
  001d7	5d		 pop	 ebp
  001d8	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >
__unwindfunclet$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ENDP ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_unchecked<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0>,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 28		 push	 40			; 00000028H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
;	COMDAT ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Head$ = 12						; size = 4
??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >, COMDAT

; 323  :         _Alnode& _Al, _Nodeptr _Head) noexcept { // free a list starting at _First and terminated at nullptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 324  :         _Head->_Prev->_Next = nullptr;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Head$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  00010	8b 36		 mov	 esi, DWORD PTR [esi]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00012	85 f6		 test	 esi, esi
  00014	74 26		 je	 SHORT $LN43@Free_non_h
  00016	57		 push	 edi
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@Free_non_h:

; 328  :             _Pnext = _Pnode->_Next;

  00020	8b 3e		 mov	 edi, DWORD PTR [esi]

; 317  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002a	6a 38		 push	 56			; 00000038H
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00035	8b f7		 mov	 esi, edi
  00037	85 ff		 test	 edi, edi
  00039	75 e5		 jne	 SHORT $LL4@Free_non_h
  0003b	5f		 pop	 edi
$LN43@Free_non_h:
  0003c	5e		 pop	 esi

; 329  :             _Freenode(_Al, _Pnode);
; 330  :         }
; 331  :     }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
;	COMDAT ??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Head$ = 12						; size = 4
??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >, COMDAT

; 323  :         _Alnode& _Al, _Nodeptr _Head) noexcept { // free a list starting at _First and terminated at nullptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 324  :         _Head->_Prev->_Next = nullptr;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Head$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  00010	8b 36		 mov	 esi, DWORD PTR [esi]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00012	85 f6		 test	 esi, esi
  00014	74 26		 je	 SHORT $LN43@Free_non_h
  00016	57		 push	 edi
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@Free_non_h:

; 328  :             _Pnext = _Pnode->_Next;

  00020	8b 3e		 mov	 edi, DWORD PTR [esi]

; 317  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1SCmd@script@@QAE@XZ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002a	6a 28		 push	 40			; 00000028H
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00035	8b f7		 mov	 esi, edi
  00037	85 ff		 test	 edi, edi
  00039	75 e5		 jne	 SHORT $LL4@Free_non_h
  0003b	5f		 pop	 edi
$LN43@Free_non_h:
  0003c	5e		 pop	 esi

; 329  :             _Freenode(_Al, _Pnode);
; 330  :         }
; 331  :     }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??__FstLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ
text$yd	SEGMENT
??__FstLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ PROC ; `script::Group::Create'::`2'::`dynamic atexit destructor for 'stLetter'', COMDAT

; 434  :         return _Myres > _Small_string_capacity;

  00000	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 2f		 jbe	 SHORT $LN23@dynamic
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00011	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 14		 jb	 SHORT $LN34@dynamic

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H
  00022	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN34@dynamic:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN23@dynamic:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0003a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16, 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00044	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20, 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A, 0
  00055	c3		 ret	 0
??__FstLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ ENDP ; `script::Group::Create'::`2'::`dynamic atexit destructor for 'stLetter''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
;	COMDAT ?LocaleString_Skip@@YAPBDKPBD@Z
_TEXT	SEGMENT
_codePage$ = 8						; size = 4
_cur$ = 12						; size = 4
?LocaleString_Skip@@YAPBDKPBD@Z PROC			; LocaleString_Skip, COMDAT

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 123  : 	int loopCount = 0;
; 124  : 
; 125  : 	while (*cur)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _cur$[ebp]
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000e	74 59		 je	 SHORT $LN7@LocaleStri
  00010	8b 5d 08	 mov	 ebx, DWORD PTR _codePage$[ebp]
$LL2@LocaleStri:

; 126  : 	{
; 127  : 		if (++loopCount > 9216)

  00013	47		 inc	 edi
  00014	81 ff 00 24 00
	00		 cmp	 edi, 9216		; 00002400H
  0001a	7f 3f		 jg	 SHORT $LN12@LocaleStri

; 130  : 			break;
; 131  : 		}
; 132  : 
; 133  : 		const char* next = CharNextExA(codePage, cur, 0);

  0001c	6a 00		 push	 0
  0001e	56		 push	 esi
  0001f	53		 push	 ebx
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12
  00026	8b c8		 mov	 ecx, eax

; 134  : 		int cur_len = next - cur;

  00028	2b c6		 sub	 eax, esi

; 135  : 		if (cur_len > 1)

  0002a	83 f8 01	 cmp	 eax, 1
  0002d	7e 04		 jle	 SHORT $LN5@LocaleStri

; 136  : 		{
; 137  : 			cur = next;

  0002f	8b f1		 mov	 esi, ecx

; 138  : 		}

  00031	eb 1c		 jmp	 SHORT $LN9@LocaleStri
$LN5@LocaleStri:

; 139  : 		else if (1 == cur_len)

  00033	75 34		 jne	 SHORT $LN7@LocaleStri

; 140  : 		{
; 141  : 			if (!isspace((unsigned char) *cur) && *cur != '\n' && *cur != '\r')

  00035	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _isspace
  0003e	83 c4 04	 add	 esp, 4
  00041	85 c0		 test	 eax, eax
  00043	75 0a		 jne	 SHORT $LN9@LocaleStri
  00045	8a 06		 mov	 al, BYTE PTR [esi]
  00047	3c 0a		 cmp	 al, 10			; 0000000aH
  00049	74 04		 je	 SHORT $LN9@LocaleStri
  0004b	3c 0d		 cmp	 al, 13			; 0000000dH
  0004d	75 1a		 jne	 SHORT $LN7@LocaleStri
$LN9@LocaleStri:

; 123  : 	int loopCount = 0;
; 124  : 
; 125  : 	while (*cur)

  0004f	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00052	75 bf		 jne	 SHORT $LL2@LocaleStri

; 142  : 				return cur;
; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			break;
; 147  : 		}
; 148  : 	}
; 149  : 	return cur;
; 150  : }

  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN12@LocaleStri:

; 128  : 		{
; 129  : 			TraceError("Infinite loop in LocaleString_Skip [%s]", cur);

  0005b	56		 push	 esi
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@
  00061	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00066	83 c4 08	 add	 esp, 8
$LN7@LocaleStri:

; 142  : 				return cur;
; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			break;
; 147  : 		}
; 148  : 	}
; 149  : 	return cur;
; 150  : }

  00069	5f		 pop	 edi
  0006a	8b c6		 mov	 eax, esi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?LocaleString_Skip@@YAPBDKPBD@Z ENDP			; LocaleString_Skip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
;	COMDAT ?OLD_rtrim@@YAXPAD@Z
_TEXT	SEGMENT
_base$ = 8						; size = 4
_codePage$1$ = 8					; size = 4
tv215 = 8						; size = 4
?OLD_rtrim@@YAXPAD@Z PROC				; OLD_rtrim, COMDAT

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 80   : 	if (!base)

  00004	8b 7d 08	 mov	 edi, DWORD PTR _base$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	0f 84 dc 00 00
	00		 je	 $LN31@OLD_rtrim

; 81   : 		return;
; 82   : 
; 83   : 	DWORD codePage = GetDefaultCodePage();

  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  00016	8b d8		 mov	 ebx, eax
  00018	89 5d 08	 mov	 DWORD PTR _codePage$1$[ebp], ebx

; 84   : 
; 85   : 	if (949 == codePage || 936 == codePage)

  0001b	81 fb b5 03 00
	00		 cmp	 ebx, 949		; 000003b5H
  00021	74 6d		 je	 SHORT $LN9@OLD_rtrim
  00023	81 fb a8 03 00
	00		 cmp	 ebx, 936		; 000003a8H
  00029	74 65		 je	 SHORT $LN9@OLD_rtrim

; 97   : 		}
; 98   : 	}
; 99   : 	else
; 100  : 	{
; 101  : 		char* end = base + strlen(base);

  0002b	8b cf		 mov	 ecx, edi
  0002d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL29@OLD_rtrim:
  00030	8a 01		 mov	 al, BYTE PTR [ecx]
  00032	41		 inc	 ecx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL29@OLD_rtrim
  00037	2b ca		 sub	 ecx, edx
  00039	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]

; 102  : 
; 103  : 		while (end != base)

  0003c	3b df		 cmp	 ebx, edi
  0003e	0f 84 a5 00 00
	00		 je	 $LN45@OLD_rtrim
  00044	8b 45 08	 mov	 eax, DWORD PTR _codePage$1$[ebp]
  00047	0f b7 c0	 movzx	 eax, ax
  0004a	89 45 08	 mov	 DWORD PTR tv215[ebp], eax
  0004d	0f 1f 00	 npad	 3
$LL4@OLD_rtrim:

; 104  : 		{
; 105  : 			char* prev = CharPrevExA(codePage, base, end, 0);

  00050	6a 00		 push	 0
  00052	53		 push	 ebx
  00053	57		 push	 edi
  00054	50		 push	 eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharPrevExA@16
  0005b	8b f0		 mov	 esi, eax

; 106  : 
; 107  : 			int prev_len = end - prev;

  0005d	2b de		 sub	 ebx, esi

; 108  : 			if (prev_len != 1)

  0005f	83 fb 01	 cmp	 ebx, 1
  00062	0f 85 81 00 00
	00		 jne	 $LN45@OLD_rtrim

; 109  : 				break;
; 110  : 
; 111  : 			if (!isspace((unsigned char) *prev) && *prev != '\n' && *prev != '\r')

  00068	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 _isspace
  00071	83 c4 04	 add	 esp, 4
  00074	85 c0		 test	 eax, eax
  00076	75 0a		 jne	 SHORT $LN15@OLD_rtrim
  00078	8a 06		 mov	 al, BYTE PTR [esi]
  0007a	3c 0a		 cmp	 al, 10			; 0000000aH
  0007c	74 04		 je	 SHORT $LN15@OLD_rtrim
  0007e	3c 0d		 cmp	 al, 13			; 0000000dH
  00080	75 67		 jne	 SHORT $LN45@OLD_rtrim
$LN15@OLD_rtrim:

; 112  : 				break;
; 113  : 
; 114  : 			*prev = '\0';

  00082	c6 06 00	 mov	 BYTE PTR [esi], 0

; 115  : 
; 116  : 			end = prev;

  00085	8b de		 mov	 ebx, esi
  00087	3b f7		 cmp	 esi, edi
  00089	74 5e		 je	 SHORT $LN45@OLD_rtrim

; 102  : 
; 103  : 		while (end != base)

  0008b	8b 45 08	 mov	 eax, DWORD PTR tv215[ebp]
  0008e	eb c0		 jmp	 SHORT $LL4@OLD_rtrim
$LN9@OLD_rtrim:

; 86   : 	{
; 87   : 		char* end = base + strlen(base) - 1;

  00090	8b cf		 mov	 ecx, edi
  00092	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL30@OLD_rtrim:
  00095	8a 01		 mov	 al, BYTE PTR [ecx]
  00097	41		 inc	 ecx
  00098	84 c0		 test	 al, al
  0009a	75 f9		 jne	 SHORT $LL30@OLD_rtrim
  0009c	2b ca		 sub	 ecx, edx
  0009e	8d 77 ff	 lea	 esi, DWORD PTR [edi-1]
  000a1	03 f1		 add	 esi, ecx

; 88   : 
; 89   : 		while (end != base)

  000a3	3b f7		 cmp	 esi, edi
  000a5	74 42		 je	 SHORT $LN45@OLD_rtrim
$LL2@OLD_rtrim:

; 90   : 		{
; 91   : 			if (!isnhspace((unsigned char) *end) && *end != '\n' && *end != '\r' || (end!=base && *((unsigned char*)end-1)>0xa0))

  000a7	8a 0e		 mov	 cl, BYTE PTR [esi]
  000a9	8a c1		 mov	 al, cl
  000ab	24 e0		 and	 al, 224			; 000000e0H
  000ad	3c 90		 cmp	 al, 144			; 00000090H
  000af	77 10		 ja	 SHORT $LN13@OLD_rtrim
  000b1	0f b6 c1	 movzx	 eax, cl
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 _isspace
  000ba	83 c4 04	 add	 esp, 4
  000bd	85 c0		 test	 eax, eax
  000bf	75 0e		 jne	 SHORT $LN28@OLD_rtrim
$LN13@OLD_rtrim:
  000c1	8a 06		 mov	 al, BYTE PTR [esi]
  000c3	3c 0a		 cmp	 al, 10			; 0000000aH
  000c5	74 04		 je	 SHORT $LN12@OLD_rtrim
  000c7	3c 0d		 cmp	 al, 13			; 0000000dH
  000c9	75 1e		 jne	 SHORT $LN45@OLD_rtrim
$LN12@OLD_rtrim:
  000cb	3b f7		 cmp	 esi, edi
  000cd	74 06		 je	 SHORT $LN10@OLD_rtrim
$LN28@OLD_rtrim:
  000cf	80 7e ff a0	 cmp	 BYTE PTR [esi-1], 160	; 000000a0H
  000d3	77 14		 ja	 SHORT $LN45@OLD_rtrim
$LN10@OLD_rtrim:

; 92   : 				break;
; 93   : 
; 94   : 			*end = '\0';
; 95   : 
; 96   : 			end = CharPrevExA(codePage, base, end, 0);

  000d5	6a 00		 push	 0
  000d7	56		 push	 esi
  000d8	57		 push	 edi
  000d9	53		 push	 ebx
  000da	c6 06 00	 mov	 BYTE PTR [esi], 0
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharPrevExA@16
  000e3	8b f0		 mov	 esi, eax
  000e5	3b f7		 cmp	 esi, edi
  000e7	75 be		 jne	 SHORT $LL2@OLD_rtrim
$LN45@OLD_rtrim:
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx
$LN31@OLD_rtrim:
  000eb	5f		 pop	 edi

; 117  : 		}
; 118  : 	}
; 119  : }

  000ec	5d		 pop	 ebp
  000ed	c3		 ret	 0
?OLD_rtrim@@YAXPAD@Z ENDP				; OLD_rtrim
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
;	COMDAT ?LocaleString_RightTrim@@YAXPAD@Z
_TEXT	SEGMENT
_base$ = 8						; size = 4
?LocaleString_RightTrim@@YAXPAD@Z PROC			; LocaleString_RightTrim, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 75   : 	LocaleString_RightTrim(base, strlen(base));

  00003	8b 55 08	 mov	 edx, DWORD PTR _base$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL3@LocaleStri:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@LocaleStri
  00017	2b c6		 sub	 eax, esi
  00019	50		 push	 eax
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi

; 76   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?LocaleString_RightTrim@@YAXPAD@Z ENDP			; LocaleString_RightTrim
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
;	COMDAT ?LocaleString_RightTrim@@YAHPADH@Z
_TEXT	SEGMENT
_base$ = 8						; size = 4
_len$ = 12						; size = 4
tv168 = 12						; size = 4
?LocaleString_RightTrim@@YAHPADH@Z PROC			; LocaleString_RightTrim, COMDAT

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 46   : 	DWORD codePage = GetDefaultCodePage();

  00006	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 47   : 
; 48   : 	int pos = len;

  0000b	8b 75 0c	 mov	 esi, DWORD PTR _len$[ebp]

; 49   : 
; 50   : 	while (pos > 0)

  0000e	85 f6		 test	 esi, esi
  00010	7e 63		 jle	 SHORT $LN6@LocaleStri

; 46   : 	DWORD codePage = GetDefaultCodePage();

  00012	0f b7 c8	 movzx	 ecx, ax
  00015	8b 45 08	 mov	 eax, DWORD PTR _base$[ebp]
  00018	89 4d 0c	 mov	 DWORD PTR tv168[ebp], ecx
  0001b	8d 1c 30	 lea	 ebx, DWORD PTR [eax+esi]
  0001e	66 90		 npad	 2
$LL2@LocaleStri:

; 51   : 	{
; 52   : 		char* cur = base + pos;
; 53   : 		char* prev = CharPrevExA(codePage, base, cur , 0);

  00020	6a 00		 push	 0
  00022	53		 push	 ebx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharPrevExA@16
  0002b	8b f8		 mov	 edi, eax

; 54   : 
; 55   : 		int prev_len = cur - prev;

  0002d	8b cb		 mov	 ecx, ebx
  0002f	2b cf		 sub	 ecx, edi

; 56   : 		if (prev_len != 1)

  00031	83 f9 01	 cmp	 ecx, 1
  00034	75 38		 jne	 SHORT $LN14@LocaleStri

; 57   : 			break;
; 58   : 
; 59   : 		if (!isspace((unsigned char) *prev) && *prev != '\n' && *prev != '\r')

  00036	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _isspace
  0003f	83 c4 04	 add	 esp, 4
  00042	85 c0		 test	 eax, eax
  00044	75 0a		 jne	 SHORT $LN5@LocaleStri
  00046	8a 07		 mov	 al, BYTE PTR [edi]
  00048	3c 0a		 cmp	 al, 10			; 0000000aH
  0004a	74 04		 je	 SHORT $LN5@LocaleStri
  0004c	3c 0d		 cmp	 al, 13			; 0000000dH
  0004e	75 11		 jne	 SHORT $LN9@LocaleStri
$LN5@LocaleStri:

; 60   : 			break;
; 61   : 
; 62   : 		*prev = '\0';
; 63   : 
; 64   : 		pos -= prev_len;

  00050	4e		 dec	 esi
  00051	c6 07 00	 mov	 BYTE PTR [edi], 0
  00054	4b		 dec	 ebx
  00055	85 f6		 test	 esi, esi
  00057	7e 1c		 jle	 SHORT $LN6@LocaleStri

; 49   : 
; 50   : 	while (pos > 0)

  00059	8b 45 08	 mov	 eax, DWORD PTR _base$[ebp]
  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR tv168[ebp]
  0005f	eb bf		 jmp	 SHORT $LL2@LocaleStri
$LN9@LocaleStri:

; 65   : 	}
; 66   : 
; 67   : 	if (pos > 0)

  00061	33 c0		 xor	 eax, eax
  00063	3b c6		 cmp	 eax, esi
  00065	5f		 pop	 edi
  00066	1b c0		 sbb	 eax, eax
  00068	23 c6		 and	 eax, esi

; 69   : 
; 70   : 	return 0;
; 71   : }

  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
$LN14@LocaleStri:
  0006e	5f		 pop	 edi

; 68   : 		return pos;

  0006f	8b c6		 mov	 eax, esi

; 69   : 
; 70   : 	return 0;
; 71   : }

  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN6@LocaleStri:
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	33 c0		 xor	 eax, eax
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?LocaleString_RightTrim@@YAHPADH@Z ENDP			; LocaleString_RightTrim
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
;	COMDAT ?LocaleString_FindChar@@YAPBDPBDHD@Z
_TEXT	SEGMENT
tv166 = -4						; size = 4
_base$ = 8						; size = 4
_len$ = 12						; size = 4
_test$ = 16						; size = 1
?LocaleString_FindChar@@YAPBDPBDHD@Z PROC		; LocaleString_FindChar, COMDAT

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 14   : 	if (!base)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _base$[ebp]
  0000a	85 ff		 test	 edi, edi
  0000c	74 41		 je	 SHORT $LN7@LocaleStri

; 15   : 		return NULL;
; 16   : 
; 17   : 	DWORD codePage = GetDefaultCodePage();

  0000e	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 18   : 
; 19   : 	int pos = 0;
; 20   : 	while (pos < len)

  00013	8b 5d 0c	 mov	 ebx, DWORD PTR _len$[ebp]
  00016	33 f6		 xor	 esi, esi
  00018	85 db		 test	 ebx, ebx
  0001a	7e 33		 jle	 SHORT $LN7@LocaleStri
  0001c	0f b7 c0	 movzx	 eax, ax
  0001f	89 45 fc	 mov	 DWORD PTR tv166[ebp], eax
$LL2@LocaleStri:

; 21   : 	{
; 22   : 		const char* cur = base + pos;
; 23   : 		const char* next = CharNextExA(codePage, cur, 0);

  00022	6a 00		 push	 0
  00024	03 fe		 add	 edi, esi
  00026	57		 push	 edi
  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 24   : 		int cur_len = next - cur;

  0002e	2b c7		 sub	 eax, edi

; 25   : 		if (cur_len > 1)

  00030	83 f8 01	 cmp	 eax, 1
  00033	7f 0e		 jg	 SHORT $LN8@LocaleStri

; 26   : 		{
; 27   : 			pos += cur_len;
; 28   : 		}
; 29   : 		else if (1 == cur_len)

  00035	75 18		 jne	 SHORT $LN7@LocaleStri

; 30   : 		{
; 31   : 			if (*cur == test)

  00037	8a 45 10	 mov	 al, BYTE PTR _test$[ebp]
  0003a	38 07		 cmp	 BYTE PTR [edi], al
  0003c	74 1a		 je	 SHORT $LN12@LocaleStri

; 33   : 
; 34   : 			++pos;

  0003e	b8 01 00 00 00	 mov	 eax, 1
$LN8@LocaleStri:

; 18   : 
; 19   : 	int pos = 0;
; 20   : 	while (pos < len)

  00043	8b 7d 08	 mov	 edi, DWORD PTR _base$[ebp]
  00046	03 f0		 add	 esi, eax
  00048	8b 45 fc	 mov	 eax, DWORD PTR tv166[ebp]
  0004b	3b f3		 cmp	 esi, ebx
  0004d	7c d3		 jl	 SHORT $LL2@LocaleStri
$LN7@LocaleStri:
  0004f	5f		 pop	 edi

; 35   : 		}
; 36   : 		else
; 37   : 		{
; 38   : 			break;
; 39   : 		}
; 40   : 	}
; 41   : 	return NULL;
; 42   : }

  00050	5e		 pop	 esi
  00051	33 c0		 xor	 eax, eax
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN12@LocaleStri:

; 32   : 				return cur;

  00058	8b c7		 mov	 eax, edi
  0005a	5f		 pop	 edi

; 35   : 		}
; 36   : 		else
; 37   : 		{
; 38   : 			break;
; 39   : 		}
; 40   : 	}
; 41   : 	return NULL;
; 42   : }

  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?LocaleString_FindChar@@YAPBDPBDHD@Z ENDP		; LocaleString_FindChar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
;	COMDAT ?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
_TEXT	SEGMENT
__Op$2 = -32						; size = 8
$T3 = -24						; size = 4
__Where$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z PROC ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back, COMDAT
; _this$ = ecx

; 1263 :     void push_back(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 1020 :         if (_Mysize == max_size()) {

  00029	81 7e 04 66 66
	66 06		 cmp	 DWORD PTR [esi+4], 107374182 ; 06666666H

; 1264 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	89 45 ec	 mov	 DWORD PTR __Where$1$[ebp], eax

; 1020 :         if (_Mysize == max_size()) {

  00035	0f 84 c3 00 00
	00		 je	 $LN152@push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0003b	89 75 e0	 mov	 DWORD PTR __Op$2[ebp], esi

; 136  :         return ::operator new(_Bytes);

  0003e	6a 28		 push	 40			; 00000028H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 583  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00047	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  00053	8b f8		 mov	 edi, eax
  00055	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 585  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00058	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1164 :         _Ptr = _Al.allocate(1);

  0005b	89 7d e4	 mov	 DWORD PTR __Op$2[ebp+4], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0005e	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 836  :         _My_data._Mysize = 0;

  00061	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00068	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0006f	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00072	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 40   : 		{

  00075	83 c0 18	 add	 eax, 24			; 00000018H
  00078	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0007c	6a 38		 push	 56			; 00000038H
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 40   : 		{

  0007e	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 353  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00081	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00087	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0008e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1846 :         _Mypair._Myval2._Myhead = _Newhead;

  00093	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00096	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1844 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00099	89 00		 mov	 DWORD PTR [eax], eax

; 1845 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0009b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1846 :         _Mypair._Myval2._Myhead = _Newhead;

  0009e	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  000a0	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000a3	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 40   : 		{

  000a6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  000aa	3b c8		 cmp	 ecx, eax
  000ac	74 16		 je	 SHORT $LN79@push_back

; 434  :         return _Myres > _Small_string_capacity;

  000ae	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  000b2	8b d0		 mov	 edx, eax

; 426  :         if (_Large_mode_engaged()) {

  000b4	76 02		 jbe	 SHORT $LN83@push_back

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000b6	8b 10		 mov	 edx, DWORD PTR [eax]
$LN83@push_back:

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000b8	ff 70 10	 push	 DWORD PTR [eax+16]
  000bb	52		 push	 edx
  000bc	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000c1	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
$LN79@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1076 :         if (this == _STD addressof(_Right)) {

  000c4	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 42   : 			argList = c_cmd.argList;

  000c7	83 c0 18	 add	 eax, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1076 :         if (this == _STD addressof(_Right)) {

  000ca	3b c8		 cmp	 ecx, eax
  000cc	74 0a		 je	 SHORT $LN89@push_back

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000ce	8b 00		 mov	 eax, DWORD PTR [eax]

; 1341 :         _Assign_unchecked(_STD _Get_unwrapped(_First), _STD _Get_unwrapped(_Last));

  000d0	50		 push	 eax
  000d1	ff 30		 push	 DWORD PTR [eax]
  000d3	e8 00 00 00 00	 call	 ??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_unchecked<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0>,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
$LN89@push_back:

; 598  :         const pointer _Insert_after = _Insert_before->_Prev;

  000d8	8b 4d ec	 mov	 ecx, DWORD PTR __Where$1$[ebp]

; 1025 :         ++_Mysize;

  000db	ff 46 04	 inc	 DWORD PTR [esi+4]

; 598  :         const pointer _Insert_after = _Insert_before->_Prev;

  000de	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 599  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  000e1	89 0f		 mov	 DWORD PTR [edi], ecx

; 600  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  000e3	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 601  :         const auto _Result    = this->_Ptr;
; 602  :         this->_Ptr            = pointer{};
; 603  :         _Insert_before->_Prev = _Result;

  000e6	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 604  :         _Insert_after->_Next  = _Result;

  000e9	89 38		 mov	 DWORD PTR [eax], edi

; 1265 :     }

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 04 00	 ret	 4
$LN152@push_back:

; 1021 :             _Xlength_error("list too long");

  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00103	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN150@push_back:
  00108	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$1:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >
__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$2:
  00008	8b 4d e8	 mov	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$3:
  00010	8b 4d e8	 mov	 ecx, DWORD PTR $T3[ebp]
  00013	83 c1 18	 add	 ecx, 24			; 00000018H
  00016	e9 00 00 00 00	 jmp	 ??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
__ehhandler$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z:
  00020	90		 npad	 1
  00021	90		 npad	 1
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ENDP ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
;	COMDAT ?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
_TEXT	SEGMENT
__Op$2 = -284						; size = 8
tv2238 = -276						; size = 4
_c_arg_base$GSCopy$1$ = -272				; size = 4
_pos$1$ = -268						; size = 4
__Result$2$ = -264					; size = 4
__Result$2$ = -264					; size = 4
_argList$GSCopy$1$ = -260				; size = 4
$T3 = -256						; size = 4
__Ptr$1$ = -252						; size = 4
$T4 = -248						; size = 4
__Old_capacity$1$ = -248				; size = 4
__Ptr$1$ = -244						; size = 4
_cur$1$ = -240						; size = 4
__Old_capacity$1$ = -240				; size = 4
$T5 = -236						; size = 4
_c$1$ = -229						; size = 1
_iCharLen$1$ = -228					; size = 4
$T6 = -224						; size = 4
$T7 = -224						; size = 4
$T8 = -224						; size = 4
_isValue$1$ = -217					; size = 1
$T9 = -216						; size = 48
$T10 = -216						; size = 48
$T11 = -168						; size = 24
$T12 = -168						; size = 24
$T13 = -144						; size = 24
$T14 = -144						; size = 24
_szValue$ = -120					; size = 65
_szName$ = -52						; size = 33
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_arg_base$ = 8					; size = 4
_arg_len$ = 12						; size = 4
_argList$ = 16						; size = 4
?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z PROC ; script::Group::GetArg, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 45 08	 mov	 eax, DWORD PTR _c_arg_base$[ebp]

; 154  :     char szName[32 + 1];
; 155  :     char szValue[64 + 1];
; 156  : 
; 157  :     int iNameLen = 0;

  00030	33 f6		 xor	 esi, esi
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _argList$[ebp]

; 158  :     int iValueLen = 0;

  00035	33 ff		 xor	 edi, edi
  00037	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _c_arg_base$GSCopy$1$[ebp], eax
  0003d	89 8d fc fe ff
	ff		 mov	 DWORD PTR _argList$GSCopy$1$[ebp], ecx

; 159  : 	int iCharLen = 0;
; 160  : 
; 161  : 	int pos = 0;

  00043	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _pos$1$[ebp], esi

; 162  : 
; 163  :     bool isValue = false;

  00049	c6 85 27 ff ff
	ff 00		 mov	 BYTE PTR _isValue$1$[ebp], 0

; 164  : 
; 165  : 	DWORD codePage = GetDefaultCodePage();

  00050	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 166  : 
; 167  :     while (pos < arg_len)

  00055	39 75 0c	 cmp	 DWORD PTR _arg_len$[ebp], esi
  00058	0f 8e bd 08 00
	00		 jle	 $LN26@GetArg
  0005e	0f b7 d0	 movzx	 edx, ax
  00061	33 c9		 xor	 ecx, ecx
  00063	89 95 ec fe ff
	ff		 mov	 DWORD PTR tv2238[ebp], edx
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@GetArg:

; 168  :     {
; 169  : 		const char* cur = c_arg_base + pos;

  00070	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _c_arg_base$GSCopy$1$[ebp]
  00076	03 c1		 add	 eax, ecx

; 170  : 		const char* next = CharNextExA(codePage, cur, 0);

  00078	6a 00		 push	 0
  0007a	50		 push	 eax
  0007b	52		 push	 edx
  0007c	89 85 10 ff ff
	ff		 mov	 DWORD PTR _cur$1$[ebp], eax
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12
  00088	8b c8		 mov	 ecx, eax

; 171  : 		iCharLen = next - cur;

  0008a	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _cur$1$[ebp]
  00090	2b c8		 sub	 ecx, eax
  00092	89 8d 1c ff ff
	ff		 mov	 DWORD PTR _iCharLen$1$[ebp], ecx

; 172  : 
; 173  : 		if (iCharLen > 1)

  00098	83 f9 01	 cmp	 ecx, 1
  0009b	7e 71		 jle	 SHORT $LN4@GetArg

; 174  : 		{
; 175  : 			if (isValue)

  0009d	80 bd 27 ff ff
	ff 00		 cmp	 BYTE PTR _isValue$1$[ebp], 0
  000a4	74 34		 je	 SHORT $LN6@GetArg

; 176  : 			{
; 177  : 				if (iValueLen >= 64)

  000a6	83 ff 40	 cmp	 edi, 64			; 00000040H
  000a9	0f 8d aa 07 00
	00		 jge	 $LN584@GetArg

; 178  : 				{
; 179  : 					TraceError("argument value overflow: must be shorter than 64 letters");
; 180  : 					return false;
; 181  : 				}
; 182  : 
; 183  : 				memcpy(szValue+iValueLen, cur, iCharLen);

  000af	51		 push	 ecx
  000b0	50		 push	 eax
  000b1	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  000b4	03 c7		 add	 eax, edi
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 _memcpy

; 184  : 				iValueLen += iCharLen;

  000bc	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _iCharLen$1$[ebp]
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c5	03 f8		 add	 edi, eax

; 185  : 				szValue[iValueLen] = '\0';

  000c7	83 ff 41	 cmp	 edi, 65			; 00000041H
  000ca	0f 83 7e 08 00
	00		 jae	 $LN34@GetArg
  000d0	c6 44 3d 88 00	 mov	 BYTE PTR _szValue$[ebp+edi], 0

; 186  : 			}

  000d5	e9 4d 07 00 00	 jmp	 $LN21@GetArg
$LN6@GetArg:

; 187  : 			else
; 188  : 			{
; 189  : 				if (iNameLen >= 32)

  000da	83 fe 20	 cmp	 esi, 32			; 00000020H
  000dd	0f 8d 8a 07 00
	00		 jge	 $LN585@GetArg

; 190  : 				{
; 191  : 					TraceError("argument name overflow: must be shorter than 32 letters");
; 192  : 					return false;
; 193  : 				}
; 194  : 				memcpy(szName+iNameLen, cur, iCharLen);

  000e3	51		 push	 ecx
  000e4	50		 push	 eax
  000e5	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  000e8	03 c6		 add	 eax, esi
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 _memcpy

; 195  : 				iNameLen += iCharLen;

  000f0	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _iCharLen$1$[ebp]
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	03 f0		 add	 esi, eax

; 196  : 				szName[iNameLen] = '\0';

  000fb	83 fe 21	 cmp	 esi, 33			; 00000021H
  000fe	0f 83 4a 08 00
	00		 jae	 $LN34@GetArg
  00104	c6 44 35 cc 00	 mov	 BYTE PTR _szName$[ebp+esi], 0

; 197  : 			}
; 198  : 		}

  00109	e9 19 07 00 00	 jmp	 $LN21@GetArg
$LN4@GetArg:

; 199  : 		else if (iCharLen == 1)

  0010e	0f 85 6d 07 00
	00		 jne	 $LN587@GetArg

; 200  : 		{
; 201  : 			const char c = *cur;

  00114	8a 08		 mov	 cl, BYTE PTR [eax]
  00116	88 8d 1b ff ff
	ff		 mov	 BYTE PTR _c$1$[ebp], cl

; 202  : 			if (c == '|')

  0011c	80 f9 7c	 cmp	 cl, 124			; 0000007cH
  0011f	0f 85 7a 06 00
	00		 jne	 $LN12@GetArg

; 203  : 			{
; 204  : 				if (iNameLen == 0)

  00125	85 f6		 test	 esi, esi
  00127	0f 84 18 07 00
	00		 je	 $LN578@GetArg

; 208  : 				}
; 209  : 
; 210  : 				isValue = false;
; 211  : 
; 212  : 				iNameLen = LocaleString_RightTrim(szName, iNameLen);

  0012d	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  00130	c6 85 27 ff ff
	ff 00		 mov	 BYTE PTR _isValue$1$[ebp], 0
  00137	56		 push	 esi
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim

; 213  : 				iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  0013e	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  00141	57		 push	 edi
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
  00148	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0014b	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00155	8d 7d 88	 lea	 edi, DWORD PTR _szValue$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00158	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp+20], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 213  : 				iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  00162	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00165	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00168	0f 11 85 58 ff
	ff ff		 movups	 XMMWORD PTR $T12[ebp], xmm0
  0016f	90		 npad	 1
$LL594@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00170	8a 07		 mov	 al, BYTE PTR [edi]
  00172	47		 inc	 edi
  00173	84 c0		 test	 al, al
  00175	75 f9		 jne	 SHORT $LL594@GetArg
  00177	2b f9		 sub	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 857  :         if (_Count > max_size()) {

  00179	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  0017f	0f 87 c4 07 00
	00		 ja	 $LN582@GetArg

; 858  :             _Xlen_string(); // result too long
; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00185	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  00188	77 4c		 ja	 SHORT $LN62@GetArg
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0018a	57		 push	 edi
  0018b	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0018e	89 bd 68 ff ff
	ff		 mov	 DWORD PTR $T12[ebp+16], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00194	50		 push	 eax
  00195	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0019b	c7 85 6c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T12[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001a5	50		 push	 eax
  001a6	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  001ab	c6 84 3d 58 ff
	ff ff 00	 mov	 BYTE PTR $T12[ebp+edi], 0

; 875  :             } else { // _Strat == _Construct_strategy::_From_string
; 876  : #ifdef _INSERT_STRING_ANNOTATION
; 877  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count + 1);
; 878  : #else // ^^^ _INSERT_STRING_ANNOTATION / !_INSERT_STRING_ANNOTATION vvv
; 879  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 880  : #endif // ^^^ !_INSERT_STRING_ANNOTATION ^^^
; 881  :             }
; 882  : 
; 883  :             _Proxy._Release();
; 884  :             return;

  001b3	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T12[ebp+20]
  001b9	8b bd 68 ff ff
	ff		 mov	 edi, DWORD PTR $T12[ebp+16]
  001bf	89 85 00 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  001c5	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR $T12[ebp]
  001cb	89 85 0c ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
  001d1	e9 8a 00 00 00	 jmp	 $LN601@GetArg
$LN62@GetArg:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  001d6	8b f7		 mov	 esi, edi
  001d8	83 ce 0f	 or	 esi, 15			; 0000000fH
  001db	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  001e1	76 18		 jbe	 SHORT $LN68@GetArg

; 2944 :             return _Max;

  001e3	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  001e8	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001ed	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2944 :             return _Max;

  001ee	89 b5 00 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001f4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001f9	eb 35		 jmp	 SHORT $LN603@GetArg
$LN68@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  001fb	83 fe 16	 cmp	 esi, 22			; 00000016H
  001fe	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00203	0f 42 f0	 cmovb	 esi, eax
  00206	89 b5 00 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esi

; 801  :         ++_Capacity; // Take null terminator into consideration

  0020c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0020f	85 c0		 test	 eax, eax
  00211	75 08		 jne	 SHORT $LN82@GetArg

; 228  :         return nullptr;

  00213	89 b5 00 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esi
  00219	eb 18		 jmp	 SHORT $LN602@GetArg
$LN82@GetArg:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0021b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00220	72 08		 jb	 SHORT $LN83@GetArg

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00222	50		 push	 eax
  00223	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00228	eb 06		 jmp	 SHORT $LN603@GetArg
$LN83@GetArg:

; 136  :         return ::operator new(_Bytes);

  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN603@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00230	83 c4 04	 add	 esp, 4
$LN602@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00233	57		 push	 edi
  00234	8d 4d 88	 lea	 ecx, DWORD PTR _szValue$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00237	89 85 0c ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0023d	51		 push	 ecx
  0023e	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0023f	89 85 58 ff ff
	ff		 mov	 DWORD PTR $T12[ebp], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  00245	89 bd 68 ff ff
	ff		 mov	 DWORD PTR $T12[ebp+16], edi

; 892  :         _My_data._Myres  = _New_capacity;

  0024b	89 b5 6c ff ff
	ff		 mov	 DWORD PTR $T12[ebp+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00251	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00256	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR __Ptr$1$[ebp]
  0025c	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN601@GetArg:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 214  : 				argList.push_back(TArg(szName, szValue));

  00260	83 c4 0c	 add	 esp, 12			; 0000000cH
  00263	0f 57 c0	 xorps	 xmm0, xmm0
  00266	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0026d	8d 75 cc	 lea	 esi, DWORD PTR _szName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00270	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T14[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00277	0f 11 85 70 ff
	ff ff		 movups	 XMMWORD PTR $T14[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0027e	c7 45 84 00 00
	00 00		 mov	 DWORD PTR $T14[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00285	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL595@GetArg:
  00288	8a 06		 mov	 al, BYTE PTR [esi]
  0028a	46		 inc	 esi
  0028b	84 c0		 test	 al, al
  0028d	75 f9		 jne	 SHORT $LL595@GetArg
  0028f	2b f1		 sub	 esi, ecx
  00291	89 b5 20 ff ff
	ff		 mov	 DWORD PTR $T8[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 857  :         if (_Count > max_size()) {

  00297	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  0029d	0f 87 a6 06 00
	00		 ja	 $LN582@GetArg

; 858  :             _Xlen_string(); // result too long
; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  002a3	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  002a6	77 46		 ja	 SHORT $LN112@GetArg
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002a8	56		 push	 esi
  002a9	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  002ac	89 75 80	 mov	 DWORD PTR $T14[ebp+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002af	50		 push	 eax
  002b0	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  002b6	c7 45 84 0f 00
	00 00		 mov	 DWORD PTR $T14[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002bd	50		 push	 eax
  002be	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  002c3	c6 84 35 70 ff
	ff ff 00	 mov	 BYTE PTR $T14[ebp+esi], 0

; 875  :             } else { // _Strat == _Construct_strategy::_From_string
; 876  : #ifdef _INSERT_STRING_ANNOTATION
; 877  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count + 1);
; 878  : #else // ^^^ _INSERT_STRING_ANNOTATION / !_INSERT_STRING_ANNOTATION vvv
; 879  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 880  : #endif // ^^^ !_INSERT_STRING_ANNOTATION ^^^
; 881  :             }
; 882  : 
; 883  :             _Proxy._Release();
; 884  :             return;

  002cb	8b 45 84	 mov	 eax, DWORD PTR $T14[ebp+20]
  002ce	8b 75 80	 mov	 esi, DWORD PTR $T14[ebp+16]
  002d1	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR $T14[ebp]
  002d7	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  002dd	89 b5 20 ff ff
	ff		 mov	 DWORD PTR $T8[ebp], esi
  002e3	89 8d 04 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
  002e9	e9 a8 00 00 00	 jmp	 $LN604@GetArg
$LN112@GetArg:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  002ee	8b c6		 mov	 eax, esi
  002f0	83 c8 0f	 or	 eax, 15			; 0000000fH
  002f3	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  002f8	76 20		 jbe	 SHORT $LN118@GetArg

; 2944 :             return _Max;

  002fa	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  002ff	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00304	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2944 :             return _Max;

  00305	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0030b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00310	8b c8		 mov	 ecx, eax
  00312	89 8d 04 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
  00318	eb 4c		 jmp	 SHORT $LN605@GetArg
$LN118@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0031a	83 f8 16	 cmp	 eax, 22			; 00000016H
  0031d	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00322	0f 42 c1	 cmovb	 eax, ecx
  00325	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0032b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0032e	85 c9		 test	 ecx, ecx
  00330	75 0e		 jne	 SHORT $LN132@GetArg

; 228  :         return nullptr;

  00332	89 8d 04 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
  00338	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  0033e	eb 2f		 jmp	 SHORT $LN131@GetArg
$LN132@GetArg:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00340	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00346	72 10		 jb	 SHORT $LN133@GetArg

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00348	51		 push	 ecx
  00349	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0034e	8b c8		 mov	 ecx, eax
  00350	89 8d 04 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
  00356	eb 0e		 jmp	 SHORT $LN605@GetArg
$LN133@GetArg:

; 136  :         return ::operator new(_Bytes);

  00358	51		 push	 ecx
  00359	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  0035e	8b c8		 mov	 ecx, eax
  00360	89 85 04 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
$LN605@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00366	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  0036c	83 c4 04	 add	 esp, 4
$LN131@GetArg:

; 892  :         _My_data._Myres  = _New_capacity;

  0036f	89 45 84	 mov	 DWORD PTR $T14[ebp+20], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00372	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  00375	56		 push	 esi
  00376	50		 push	 eax
  00377	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00378	89 8d 70 ff ff
	ff		 mov	 DWORD PTR $T14[ebp], ecx

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0037e	89 75 80	 mov	 DWORD PTR $T14[ebp+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00381	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00386	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR __Ptr$1$[ebp]
  0038c	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  00392	c6 04 31 00	 mov	 BYTE PTR [ecx+esi], 0
$LN604@GetArg:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 214  : 				argList.push_back(TArg(szName, szValue));

  00396	83 c4 0c	 add	 esp, 12			; 0000000cH
  00399	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  0039c	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T10[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  003a6	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  003ab	0f 11 85 28 ff
	ff ff		 movups	 XMMWORD PTR $T10[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  003b2	89 95 08 ff ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], edx
  003b8	89 95 3c ff ff
	ff		 mov	 DWORD PTR $T10[ebp+20], edx

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003be	c6 85 28 ff ff
	ff 00		 mov	 BYTE PTR $T10[ebp], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  003c5	0f 11 85 40 ff
	ff ff		 movups	 XMMWORD PTR $T10[ebp+24], xmm0

; 836  :         _My_data._Mysize = 0;

  003cc	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T10[ebp+40], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  003d6	89 95 10 ff ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], edx
  003dc	89 95 54 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+44], edx

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003e2	c6 85 40 ff ff
	ff 00		 mov	 BYTE PTR $T10[ebp+24], 0

; 434  :         return _Myres > _Small_string_capacity;

  003e9	83 f8 0f	 cmp	 eax, 15			; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 12   :         {

  003ec	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  003f0	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR $T14[ebp]

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  003f6	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  003fb	0f 47 d1	 cmova	 edx, ecx
  003fe	89 95 f8 fe ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], edx

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  00404	3b f0		 cmp	 esi, eax
  00406	77 35		 ja	 SHORT $LN196@GetArg

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00408	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]

; 416  :         value_type* _Result = _Bx._Buf;

  0040e	8d b5 28 ff ff
	ff		 lea	 esi, DWORD PTR $T10[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00414	50		 push	 eax
  00415	52		 push	 edx
  00416	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00417	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+16], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0041d	e8 00 00 00 00	 call	 _memmove
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00422	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]
  00428	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 1600 :             _ASAN_STRING_CREATE(*this);
; 1601 :             return *this;

  0042c	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR $T10[ebp+44]
  00432	89 95 10 ff ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], edx
  00438	e9 c8 00 00 00	 jmp	 $LN606@GetArg
$LN196@GetArg:

; 2962 :         if (_New_size > max_size()) {

  0043d	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00443	0f 87 00 05 00
	00		 ja	 $LN582@GetArg

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00449	8b ce		 mov	 ecx, esi
  0044b	0b c8		 or	 ecx, eax
  0044d	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00453	76 18		 jbe	 SHORT $LN217@GetArg

; 2944 :             return _Max;

  00455	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0045a	89 85 08 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00460	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00465	50		 push	 eax
  00466	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0046b	eb 59		 jmp	 SHORT $LN608@GetArg
$LN217@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0046d	8b d0		 mov	 edx, eax
  0046f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00474	d1 ea		 shr	 edx, 1
  00476	2b c2		 sub	 eax, edx
  00478	39 85 08 ff ff
	ff		 cmp	 DWORD PTR __Old_capacity$1$[ebp], eax
  0047e	76 18		 jbe	 SHORT $LN218@GetArg

; 2948 :             return _Max;

  00480	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00485	89 85 08 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  0048b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00490	50		 push	 eax
  00491	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00496	eb 2e		 jmp	 SHORT $LN608@GetArg
$LN218@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00498	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  0049d	03 c2		 add	 eax, edx
  0049f	3b c8		 cmp	 ecx, eax
  004a1	0f 42 c8	 cmovb	 ecx, eax
  004a4	89 8d 08 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  004aa	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  004ad	85 c0		 test	 eax, eax
  004af	74 1e		 je	 SHORT $LN607@GetArg
$LN231@GetArg:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  004b1	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  004b6	72 08		 jb	 SHORT $LN232@GetArg

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  004b8	50		 push	 eax
  004b9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  004be	eb 06		 jmp	 SHORT $LN608@GetArg
$LN232@GetArg:

; 136  :         return ::operator new(_Bytes);

  004c0	50		 push	 eax
  004c1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN608@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  004c6	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
  004cc	83 c4 04	 add	 esp, 4
$LN607@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  004cf	56		 push	 esi
  004d0	ff b5 f8 fe ff
	ff		 push	 DWORD PTR __Result$2$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  004d6	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  004dc	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  004dd	89 b5 38 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+16], esi

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  004e3	89 8d 3c ff ff
	ff		 mov	 DWORD PTR $T10[ebp+20], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  004e9	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  004ee	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  004f4	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH

; 2977 :             _Deallocate_for_capacity(_Al, _Mypair._Myval2._Bx._Ptr, _Old_capacity);
; 2978 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;
; 2979 :         } else {
; 2980 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  004f9	89 85 28 ff ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
  004ff	8b d1		 mov	 edx, ecx

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00501	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0
$LN606@GetArg:

; 425  :         const value_type* _Result = _Bx._Buf;

  00505	83 c4 0c	 add	 esp, 12			; 0000000cH
  00508	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  0050e	83 bd 00 ff ff
	ff 0f		 cmp	 DWORD PTR $T3[ebp], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00515	0f 47 85 0c ff
	ff ff		 cmova	 eax, DWORD PTR __Ptr$1$[ebp]
  0051c	89 85 f8 fe ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  00522	3b fa		 cmp	 edi, edx
  00524	77 2a		 ja	 SHORT $LN279@GetArg

; 434  :         return _Myres > _Small_string_capacity;

  00526	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00529	89 bd 50 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+40], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0052f	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  00530	8d b5 40 ff ff
	ff		 lea	 esi, DWORD PTR $T10[ebp+24]

; 417  :         if (_Large_mode_engaged()) {

  00536	0f 47 b5 40 ff
	ff ff		 cmova	 esi, DWORD PTR $T10[ebp+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0053d	50		 push	 eax
  0053e	56		 push	 esi
  0053f	e8 00 00 00 00	 call	 _memmove
  00544	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00547	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 1600 :             _ASAN_STRING_CREATE(*this);
; 1601 :             return *this;

  0054b	e9 dd 00 00 00	 jmp	 $LN294@GetArg
$LN279@GetArg:

; 2962 :         if (_New_size > max_size()) {

  00550	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00556	0f 87 ed 03 00
	00		 ja	 $LN582@GetArg

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0055c	8b f7		 mov	 esi, edi
  0055e	83 ce 0f	 or	 esi, 15			; 0000000fH
  00561	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00567	76 12		 jbe	 SHORT $LN300@GetArg

; 2944 :             return _Max;

  00569	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0056e	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00573	50		 push	 eax
  00574	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00579	eb 45		 jmp	 SHORT $LN610@GetArg
$LN300@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0057b	8b ca		 mov	 ecx, edx
  0057d	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00582	d1 e9		 shr	 ecx, 1
  00584	2b c1		 sub	 eax, ecx
  00586	3b d0		 cmp	 edx, eax
  00588	76 12		 jbe	 SHORT $LN301@GetArg

; 2948 :             return _Max;

  0058a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0058f	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00594	50		 push	 eax
  00595	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0059a	eb 24		 jmp	 SHORT $LN610@GetArg
$LN301@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0059c	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0059f	3b f0		 cmp	 esi, eax
  005a1	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  005a4	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  005a7	85 c0		 test	 eax, eax
  005a9	74 18		 je	 SHORT $LN609@GetArg
$LN314@GetArg:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  005ab	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  005b0	72 08		 jb	 SHORT $LN315@GetArg

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  005b2	50		 push	 eax
  005b3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  005b8	eb 06		 jmp	 SHORT $LN610@GetArg
$LN315@GetArg:

; 136  :         return ::operator new(_Bytes);

  005ba	50		 push	 eax
  005bb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN610@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  005c0	83 c4 04	 add	 esp, 4
$LN609@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005c3	57		 push	 edi
  005c4	ff b5 f8 fe ff
	ff		 push	 DWORD PTR __Result$2$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  005ca	89 b5 54 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+44], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005d0	8b f0		 mov	 esi, eax
  005d2	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  005d3	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  005d9	89 bd 50 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+40], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005df	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  005e4	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR __Old_capacity$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  005ea	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  005ed	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  005f1	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  005f4	76 31		 jbe	 SHORT $LN293@GetArg

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  005f6	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005f9	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR $T10[ebp+24]
  005ff	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00601	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00607	72 14		 jb	 SHORT $LN343@GetArg

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00609	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0060c	83 c1 23	 add	 ecx, 35			; 00000023H
  0060f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00611	83 c0 fc	 add	 eax, -4			; fffffffcH
  00614	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00617	0f 87 1d 03 00
	00		 ja	 $LN566@GetArg
$LN343@GetArg:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0061d	51		 push	 ecx
  0061e	52		 push	 edx
  0061f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00624	83 c4 08	 add	 esp, 8
$LN293@GetArg:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 214  : 				argList.push_back(TArg(szName, szValue));

  00627	89 b5 40 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+24], esi
$LN294@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 979  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  0062d	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _argList$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 214  : 				argList.push_back(TArg(szName, szValue));

  00633	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1020 :         if (_Mysize == max_size()) {

  00637	81 78 04 24 49
	92 04		 cmp	 DWORD PTR [eax+4], 76695844 ; 04924924H

; 979  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  0063e	8b 38		 mov	 edi, DWORD PTR [eax]

; 1020 :         if (_Mysize == max_size()) {

  00640	0f 84 f9 02 00
	00		 je	 $LN583@GetArg
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00646	89 85 e4 fe ff
	ff		 mov	 DWORD PTR __Op$2[ebp], eax

; 136  :         return ::operator new(_Bytes);

  0064c	6a 38		 push	 56			; 00000038H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 583  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0064e	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00652	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  0065c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  00661	8b f0		 mov	 esi, eax

; 136  :         return ::operator new(_Bytes);

  00663	83 c4 04	 add	 esp, 4

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00666	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]

; 1164 :         _Ptr = _Al.allocate(1);

  0066c	89 b5 e8 fe ff
	ff		 mov	 DWORD PTR __Op$2[ebp+4], esi
  00672	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00675	50		 push	 eax
  00676	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1025 :         ++_Mysize;

  0067b	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _argList$GSCopy$1$[ebp]

; 602  :         this->_Ptr            = pointer{};

  00681	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 214  : 				argList.push_back(TArg(szName, szValue));

  0068b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1025 :         ++_Mysize;

  0068f	ff 40 04	 inc	 DWORD PTR [eax+4]

; 598  :         const pointer _Insert_after = _Insert_before->_Prev;

  00692	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 599  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00695	89 3e		 mov	 DWORD PTR [esi], edi

; 600  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00697	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 603  :         _Insert_before->_Prev = _Result;

  0069a	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 604  :         _Insert_after->_Next  = _Result;

  0069d	89 31		 mov	 DWORD PTR [ecx], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0069f	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp+44]
  006a5	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  006a8	76 2f		 jbe	 SHORT $LN446@GetArg
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006aa	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR $T10[ebp+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  006b0	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006b1	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  006b3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  006b9	72 14		 jb	 SHORT $LN457@GetArg

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  006bb	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  006be	83 c1 23	 add	 ecx, 35			; 00000023H
  006c1	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  006c3	83 c0 fc	 add	 eax, -4			; fffffffcH
  006c6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  006c9	0f 87 6b 02 00
	00		 ja	 $LN566@GetArg
$LN457@GetArg:

; 289  :         ::operator delete(_Ptr, _Bytes);

  006cf	51		 push	 ecx
  006d0	52		 push	 edx
  006d1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  006d6	83 c4 08	 add	 esp, 8
$LN446@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  006d9	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp+20]
  006df	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  006e2	76 2f		 jbe	 SHORT $LN484@GetArg
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006e4	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR $T10[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  006ea	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006eb	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  006ed	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  006f3	72 14		 jb	 SHORT $LN495@GetArg

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  006f5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  006f8	83 c1 23	 add	 ecx, 35			; 00000023H
  006fb	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  006fd	83 c0 fc	 add	 eax, -4			; fffffffcH
  00700	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00703	0f 87 31 02 00
	00		 ja	 $LN566@GetArg
$LN495@GetArg:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00709	51		 push	 ecx
  0070a	52		 push	 edx
  0070b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00710	83 c4 08	 add	 esp, 8
$LN484@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00713	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 214  : 				argList.push_back(TArg(szName, szValue));

  00719	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0071d	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00720	76 31		 jbe	 SHORT $LN521@GetArg
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00722	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00728	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0072b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0072d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00733	72 14		 jb	 SHORT $LN532@GetArg

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00735	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00738	83 c1 23	 add	 ecx, 35			; 00000023H
  0073b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0073d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00740	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00743	0f 87 f1 01 00
	00		 ja	 $LN566@GetArg
$LN532@GetArg:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00749	51		 push	 ecx
  0074a	52		 push	 edx
  0074b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00750	83 c4 08	 add	 esp, 8
$LN521@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00753	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 214  : 				argList.push_back(TArg(szName, szValue));

  00759	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00760	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00763	76 31		 jbe	 SHORT $LN558@GetArg
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00765	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0076b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0076e	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00770	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00776	72 14		 jb	 SHORT $LN569@GetArg

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00778	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0077b	83 c1 23	 add	 ecx, 35			; 00000023H
  0077e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00780	83 c0 fc	 add	 eax, -4			; fffffffcH
  00783	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00786	0f 87 ae 01 00
	00		 ja	 $LN566@GetArg
$LN569@GetArg:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0078c	51		 push	 ecx
  0078d	52		 push	 edx
  0078e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00793	83 c4 08	 add	 esp, 8
$LN558@GetArg:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 216  : 				iNameLen = 0;

  00796	33 f6		 xor	 esi, esi

; 217  : 				iValueLen = 0;

  00798	33 ff		 xor	 edi, edi

; 218  : 			}

  0079a	e9 82 00 00 00	 jmp	 $LN598@GetArg
$LN12@GetArg:

; 219  : 			else if (c == ';')

  0079f	80 f9 3b	 cmp	 cl, 59			; 0000003bH
  007a2	75 09		 jne	 SHORT $LN15@GetArg

; 220  : 			{
; 221  : 				isValue = true;

  007a4	c6 85 27 ff ff
	ff 01		 mov	 BYTE PTR _isValue$1$[ebp], 1

; 222  : 			}

  007ab	eb 74		 jmp	 SHORT $LN598@GetArg
$LN15@GetArg:

; 223  : 			else if (!isValue && iNameLen == 0 && isspace((unsigned char) c))

  007ad	8a 95 27 ff ff
	ff		 mov	 dl, BYTE PTR _isValue$1$[ebp]
  007b3	84 d2		 test	 dl, dl
  007b5	75 26		 jne	 SHORT $LN17@GetArg
  007b7	85 f6		 test	 esi, esi
  007b9	75 22		 jne	 SHORT $LN17@GetArg
  007bb	0f b6 c1	 movzx	 eax, cl
  007be	50		 push	 eax
  007bf	e8 00 00 00 00	 call	 _isspace
  007c4	83 c4 04	 add	 esp, 4
  007c7	85 c0		 test	 eax, eax
  007c9	75 56		 jne	 SHORT $LN598@GetArg
  007cb	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _cur$1$[ebp]
  007d1	8a 8d 1b ff ff
	ff		 mov	 cl, BYTE PTR _c$1$[ebp]
  007d7	8a 95 27 ff ff
	ff		 mov	 dl, BYTE PTR _isValue$1$[ebp]
$LN17@GetArg:

; 224  : 			{
; 225  : 			}
; 226  : 			else if (c == '\r' || c == '\n')

  007dd	80 f9 0d	 cmp	 cl, 13			; 0000000dH
  007e0	74 3f		 je	 SHORT $LN598@GetArg
  007e2	80 f9 0a	 cmp	 cl, 10			; 0000000aH
  007e5	74 3a		 je	 SHORT $LN598@GetArg

; 227  : 			{
; 228  : 			}
; 229  : 			else
; 230  : 			{
; 231  : 				if (isValue)

  007e7	84 d2		 test	 dl, dl
  007e9	74 1c		 je	 SHORT $LN22@GetArg

; 232  : 				{
; 233  : 					if (iValueLen >= 64)

  007eb	83 ff 40	 cmp	 edi, 64			; 00000040H
  007ee	7d 69		 jge	 SHORT $LN584@GetArg

; 237  : 					}
; 238  : 
; 239  : 					memcpy(szValue+iValueLen, cur, iCharLen);

  007f0	8a 00		 mov	 al, BYTE PTR [eax]
  007f2	88 44 3d 88	 mov	 BYTE PTR _szValue$[ebp+edi], al

; 240  : 					iValueLen += iCharLen;

  007f6	47		 inc	 edi

; 241  : 					szValue[iValueLen]        = '\0';

  007f7	83 ff 41	 cmp	 edi, 65			; 00000041H
  007fa	0f 83 4e 01 00
	00		 jae	 $LN34@GetArg
  00800	c6 44 3d 88 00	 mov	 BYTE PTR _szValue$[ebp+edi], 0

; 242  : 				}

  00805	eb 1a		 jmp	 SHORT $LN598@GetArg
$LN22@GetArg:

; 243  : 				else
; 244  : 				{
; 245  : 					if (iNameLen >= 32)

  00807	83 fe 20	 cmp	 esi, 32			; 00000020H
  0080a	7d 61		 jge	 SHORT $LN585@GetArg

; 249  : 					}
; 250  : 					memcpy(szName+iNameLen, cur, iCharLen);

  0080c	8a 00		 mov	 al, BYTE PTR [eax]
  0080e	88 44 35 cc	 mov	 BYTE PTR _szName$[ebp+esi], al

; 251  : 					iNameLen += iCharLen;

  00812	46		 inc	 esi

; 252  : 					szName[iNameLen]        = '\0';

  00813	83 fe 21	 cmp	 esi, 33			; 00000021H
  00816	0f 83 32 01 00
	00		 jae	 $LN34@GetArg
  0081c	c6 44 35 cc 00	 mov	 BYTE PTR _szName$[ebp+esi], 0
$LN598@GetArg:

; 253  : 				}
; 254  : 			}
; 255  : 		}
; 256  : 		else
; 257  : 		{
; 258  : 			break;
; 259  : 		}
; 260  : 
; 261  : 		pos += iCharLen;

  00821	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _iCharLen$1$[ebp]
$LN21@GetArg:
  00827	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _pos$1$[ebp]
  0082d	03 c8		 add	 ecx, eax
  0082f	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _pos$1$[ebp], ecx
  00835	3b 4d 0c	 cmp	 ecx, DWORD PTR _arg_len$[ebp]
  00838	7d 47		 jge	 SHORT $LN587@GetArg

; 166  : 
; 167  :     while (pos < arg_len)

  0083a	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR tv2238[ebp]
  00840	e9 2b f8 ff ff	 jmp	 $LL2@GetArg
$LN578@GetArg:

; 205  : 				{
; 206  : 					TraceError("no argument name");

  00845	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DGGADPCI@no?5argument?5name@
  0084a	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0084f	83 c4 04	 add	 esp, 4

; 207  : 					return false;

  00852	32 c0		 xor	 al, al
  00854	e9 c4 00 00 00	 jmp	 $LN1@GetArg
$LN584@GetArg:

; 234  : 					{
; 235  : 						TraceError("argument value overflow: must be shorter than 64 letters");

  00859	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@
  0085e	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00863	83 c4 04	 add	 esp, 4

; 236  : 						return false;

  00866	32 c0		 xor	 al, al
  00868	e9 b0 00 00 00	 jmp	 $LN1@GetArg
$LN585@GetArg:

; 246  : 					{
; 247  : 						TraceError("argument name overflow: must be shorter than 32 letters");

  0086d	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@
  00872	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00877	83 c4 04	 add	 esp, 4

; 248  : 						return false;

  0087a	32 c0		 xor	 al, al
  0087c	e9 9c 00 00 00	 jmp	 $LN1@GetArg
$LN587@GetArg:

; 262  :     }
; 263  : 
; 264  :     if (iNameLen != 0 && iValueLen != 0)

  00881	85 f6		 test	 esi, esi
  00883	0f 84 92 00 00
	00		 je	 $LN26@GetArg
  00889	85 ff		 test	 edi, edi
  0088b	0f 84 8a 00 00
	00		 je	 $LN26@GetArg

; 265  :     {
; 266  : 		iNameLen = LocaleString_RightTrim(szName, iNameLen);

  00891	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  00894	56		 push	 esi
  00895	50		 push	 eax
  00896	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim

; 267  : 		iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  0089b	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  0089e	57		 push	 edi
  0089f	50		 push	 eax
  008a0	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
  008a5	83 c4 10	 add	 esp, 16			; 00000010H

; 268  :         argList.push_back(TArg(szName, szValue));

  008a8	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  008ab	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  008b1	50		 push	 eax
  008b2	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  008b7	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  008ba	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  008c1	50		 push	 eax
  008c2	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  008c8	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  008cd	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  008d3	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  008d7	50		 push	 eax
  008d8	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  008de	50		 push	 eax
  008df	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  008e5	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; script::SArgumet::SArgumet
  008ea	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _argList$GSCopy$1$[ebp]
  008f0	50		 push	 eax
  008f1	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  008f5	e8 00 00 00 00	 call	 ?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back
  008fa	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00900	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
  00905	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0090b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00910	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00916	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN26@GetArg:

; 269  :     }
; 270  : 
; 271  :     return true;

  0091b	b0 01		 mov	 al, 1
$LN1@GetArg:

; 272  : }

  0091d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00920	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00927	59		 pop	 ecx
  00928	5f		 pop	 edi
  00929	5e		 pop	 esi
  0092a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0092d	33 cd		 xor	 ecx, ebp
  0092f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00934	8b e5		 mov	 esp, ebp
  00936	5d		 pop	 ebp
  00937	c2 0c 00	 ret	 12			; 0000000cH
$LN566@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0093a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN583@GetArg:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1021 :             _Xlength_error("list too long");

  0093f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00944	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN582@GetArg:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 272  : }

  00949	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN34@GetArg:

; 252  : 					szName[iNameLen]        = '\0';

  0094e	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN600@GetArg:
  00953	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$0:
  00000	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$1:
  0000b	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$10:
  00016	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$11:
  00021	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp+24]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$2:
  0002c	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$19:
  00037	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR __Op$2[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$3:
  00042	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$4:
  0004d	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$5:
  00058	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
  00063	cc		 int	 3
  00064	cc		 int	 3
  00065	cc		 int	 3
  00066	cc		 int	 3
  00067	cc		 int	 3
__ehhandler$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z:
  00068	90		 npad	 1
  00069	90		 npad	 1
  0006a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0006e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00071	8b 8a e4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-284]
  00077	33 c8		 xor	 ecx, eax
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00081	33 c8		 xor	 ecx, eax
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
  0008d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z ENDP ; script::Group::GetArg
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
;	COMDAT ?SetError@Group@script@@AAEXPBD@Z
_TEXT	SEGMENT
_c_pszError$ = 8					; size = 4
?SetError@Group@script@@AAEXPBD@Z PROC			; script::Group::SetError, COMDAT
; _this$ = ecx

; 431  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_pszError$[ebp]
  00006	8b c2		 mov	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 431  : {

  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000f	90		 npad	 1
$LL8@SetError:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL8@SetError
  00017	2b c7		 sub	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	8b ce		 mov	 ecx, esi
  0001b	50		 push	 eax
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 433  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?SetError@Group@script@@AAEXPBD@Z ENDP			; script::Group::SetError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
;	COMDAT ?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; script::Group::GetError, COMDAT
; _this$ = ecx

; 427  :     return m_stError;

  00000	8b c1		 mov	 eax, ecx

; 428  : }

  00002	c3		 ret	 0
?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; script::Group::GetError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
;	COMDAT ?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z
_TEXT	SEGMENT
_cmd$ = 8						; size = 4
?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z PROC		; script::Group::ReadCmd, COMDAT
; _this$ = ecx

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1203 :         return _Mypair._Myval2._Mysize == 0;

  00003	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 418  :     if (m_cmdList.empty())

  00007	75 06		 jne	 SHORT $LN2@ReadCmd

; 419  :         return false;

  00009	32 c0		 xor	 al, al

; 423  : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
$LN2@ReadCmd:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1215 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  0000f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00012	56		 push	 esi
  00013	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  00014	8b 7d 08	 mov	 edi, DWORD PTR _cmd$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1215 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  00017	8b 30		 mov	 esi, DWORD PTR [eax]
  00019	83 c6 08	 add	 esi, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  0001c	3b fe		 cmp	 edi, esi
  0001e	74 15		 je	 SHORT $LN12@ReadCmd

; 434  :         return _Myres > _Small_string_capacity;

  00020	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00024	8b c6		 mov	 eax, esi

; 426  :         if (_Large_mode_engaged()) {

  00026	76 02		 jbe	 SHORT $LN16@ReadCmd

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
$LN16@ReadCmd:

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002a	ff 76 10	 push	 DWORD PTR [esi+16]
  0002d	8b cf		 mov	 ecx, edi
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN12@ReadCmd:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 47   : 			argList = c_cmd.argList;

  00035	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00038	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1076 :         if (this == _STD addressof(_Right)) {

  0003d	3b c8		 cmp	 ecx, eax
  0003f	74 0a		 je	 SHORT $LN22@ReadCmd

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00041	8b 00		 mov	 eax, DWORD PTR [eax]

; 1341 :         _Assign_unchecked(_STD _Get_unwrapped(_First), _STD _Get_unwrapped(_Last));

  00043	50		 push	 eax
  00044	ff 30		 push	 DWORD PTR [eax]
  00046	e8 00 00 00 00	 call	 ??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_unchecked<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0>,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
$LN22@ReadCmd:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 422  :     return true;

  0004b	b0 01		 mov	 al, 1

; 423  : }

  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z ENDP		; script::Group::ReadCmd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
;	COMDAT ?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z
_TEXT	SEGMENT
_cmd$ = 8						; size = 4
?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z PROC		; script::Group::GetCmd, COMDAT
; _this$ = ecx

; 407  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1203 :         return _Mypair._Myval2._Mysize == 0;

  00006	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 408  :     if (m_cmdList.empty())

  0000a	75 07		 jne	 SHORT $LN2@GetCmd

; 409  :         return false;

  0000c	32 c0		 xor	 al, al
  0000e	5f		 pop	 edi

; 414  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN2@GetCmd:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1215 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  00013	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00016	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  00017	8b 5d 08	 mov	 ebx, DWORD PTR _cmd$[ebp]
  0001a	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1215 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  0001b	8b 30		 mov	 esi, DWORD PTR [eax]
  0001d	83 c6 08	 add	 esi, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  00020	3b de		 cmp	 ebx, esi
  00022	74 15		 je	 SHORT $LN12@GetCmd

; 434  :         return _Myres > _Small_string_capacity;

  00024	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00028	8b c6		 mov	 eax, esi

; 426  :         if (_Large_mode_engaged()) {

  0002a	76 02		 jbe	 SHORT $LN16@GetCmd

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0002c	8b 06		 mov	 eax, DWORD PTR [esi]
$LN16@GetCmd:

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002e	ff 76 10	 push	 DWORD PTR [esi+16]
  00031	8b cb		 mov	 ecx, ebx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN12@GetCmd:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 47   : 			argList = c_cmd.argList;

  00039	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0003c	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1076 :         if (this == _STD addressof(_Right)) {

  0003f	3b c8		 cmp	 ecx, eax
  00041	74 0a		 je	 SHORT $LN22@GetCmd

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00043	8b 00		 mov	 eax, DWORD PTR [eax]

; 1341 :         _Assign_unchecked(_STD _Get_unwrapped(_First), _STD _Get_unwrapped(_Last));

  00045	50		 push	 eax
  00046	ff 30		 push	 DWORD PTR [eax]
  00048	e8 00 00 00 00	 call	 ??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_unchecked<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0>,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
$LN22@GetCmd:

; 1260 :         _Unchecked_erase(_Mypair._Myval2._Myhead->_Next);

  0004d	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00050	8b 30		 mov	 esi, DWORD PTR [eax]

; 1428 :         const auto _Result = _Pnode->_Next;

  00052	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 1429 :         _Mypair._Myval2._Orphan_ptr2(_Pnode);
; 1430 :         --_Mypair._Myval2._Mysize;

  00054	ff 4f 1c	 dec	 DWORD PTR [edi+28]

; 1431 :         _Pnode->_Prev->_Next = _Result;

  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	89 08		 mov	 DWORD PTR [eax], ecx

; 1432 :         _Result->_Prev       = _Pnode->_Prev;

  0005c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 317  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00062	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00065	e8 00 00 00 00	 call	 ??1SCmd@script@@QAE@XZ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006a	6a 28		 push	 40			; 00000028H
  0006c	56		 push	 esi
  0006d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00072	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 413  :     return true;

  00075	b0 01		 mov	 al, 1
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	5f		 pop	 edi

; 414  : }

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z ENDP		; script::Group::GetCmd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
;	COMDAT ?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
__Op$2 = -1196						; size = 8
__Op$3 = -1188						; size = 8
tv3103 = -1180						; size = 4
_str_len$1$ = -1176					; size = 4
_this$GSCopy$1$ = -1172					; size = 4
_codePage$1$ = -1168					; size = 4
__Result$1$ = -1164					; size = 4
_cur$1$ = -1157						; size = 1
_str_pos$1$ = -1156					; size = 4
_box_begin$1$ = -1156					; size = 4
_space$1$ = -1156					; size = 4
_arg$1$ = -1156						; size = 4
$T4 = -1152						; size = 4
$T5 = -1152						; size = 4
$T6 = -1152						; size = 4
$T7 = -1152						; size = 4
$T8 = -1152						; size = 4
$T9 = -1148						; size = 48
$T10 = -1148						; size = 48
$T11 = -1100						; size = 24
$T12 = -1100						; size = 24
_cmd$13 = -1076						; size = 32
_box_data$ = -1044					; size = 1025
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_stSource$ = 8						; size = 4
?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; script::Group::Create, COMDAT
; _this$ = ecx

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a0 04 00
	00		 sub	 esp, 1184		; 000004a0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d 6c fb ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1497 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00033	ff 71 18	 push	 DWORD PTR [ecx+24]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 276  : {

  00036	8b 45 08	 mov	 eax, DWORD PTR _stSource$[ebp]

; 277  : 	m_cmdList.clear();

  00039	8d 71 18	 lea	 esi, DWORD PTR [ecx+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1497 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  0003c	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 276  : {

  0003d	89 85 74 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1497 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00043	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >

; 1498 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	83 c4 08	 add	 esp, 8
  0004d	89 00		 mov	 DWORD PTR [eax], eax

; 1499 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  0004f	8b 06		 mov	 eax, DWORD PTR [esi]
  00051	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1500 :         _My_data._Mysize        = 0;

  00054	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2458 :         return _Mypair._Myval2._Mysize == 0;

  0005b	8b b5 74 fb ff
	ff		 mov	 esi, DWORD PTR __Result$1$[ebp]
  00061	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00064	89 85 68 fb ff
	ff		 mov	 DWORD PTR _str_len$1$[ebp], eax
  0006a	85 c0		 test	 eax, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 279  : 	if (stSource.empty())

  0006c	0f 84 fb 09 00
	00		 je	 $LN698@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00072	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00076	76 08		 jbe	 SHORT $LN351@Create

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00078	8b 36		 mov	 esi, DWORD PTR [esi]
  0007a	89 b5 74 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], esi
$LN351@Create:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 283  :     if (!str_base || !*str_base)

  00080	85 f6		 test	 esi, esi
  00082	0f 84 d8 09 00
	00		 je	 $LN7@Create
  00088	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0008b	0f 84 cf 09 00
	00		 je	 $LN7@Create

; 286  :         return false;//return true;//return false;
; 287  :     }
; 288  : 	int str_len = stSource.length();
; 289  : 	int str_pos = 0;

  00091	33 ff		 xor	 edi, edi

; 290  : 
; 291  : 	DWORD codePage = GetDefaultCodePage();

  00093	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 292  : 
; 293  :     char box_data[1024 + 1];
; 294  : 
; 295  : 	static std::string stLetter;

  00098	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  0009f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  000a5	89 85 70 fb ff
	ff		 mov	 DWORD PTR _codePage$1$[ebp], eax
  000ab	8b 14 91	 mov	 edx, DWORD PTR [ecx+edx*4]
  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?$TSS0@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  000b4	3b 8a 00 00 00
	00		 cmp	 ecx, DWORD PTR __Init_thread_epoch[edx]
  000ba	0f 8f cc 09 00
	00		 jg	 $LN963@Create
  000c0	eb 06		 jmp	 SHORT $LN2@Create
$LN956@Create:

; 297  :     while (str_pos < str_len)

  000c2	8b 85 70 fb ff
	ff		 mov	 eax, DWORD PTR _codePage$1$[ebp]
$LN2@Create:
  000c8	39 bd 68 fb ff
	ff		 cmp	 DWORD PTR _str_len$1$[ebp], edi
  000ce	0f 8e 88 09 00
	00		 jle	 $LN846@Create
  000d4	0f b7 c0	 movzx	 eax, ax
  000d7	89 85 64 fb ff
	ff		 mov	 DWORD PTR tv3103[ebp], eax
  000dd	0f 1f 00	 npad	 3
$LL3@Create:
  000e0	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  000e3	c7 85 dc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$13[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000ed	0f 11 85 cc fb
	ff ff		 movups	 XMMWORD PTR _cmd$13[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  000f4	c7 85 e0 fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR _cmd$13[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000fe	c6 85 cc fb ff
	ff 00		 mov	 BYTE PTR _cmd$13[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00105	6a 38		 push	 56			; 00000038H
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 38   : 		{}

  00107	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 353  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  0010e	c7 85 e4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$13[ebp+24], 0
  00118	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$13[ebp+28], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00122	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00127	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1844 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0012a	89 00		 mov	 DWORD PTR [eax], eax

; 1845 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0012c	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1846 :         _Mypair._Myval2._Myhead = _Newhead;

  0012f	89 85 e4 fb ff
	ff		 mov	 DWORD PTR _cmd$13[ebp+24], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 302  : 		const char* word_next = CharNextExA(codePage, word, 0);

  00135	6a 00		 push	 0
  00137	03 f7		 add	 esi, edi
  00139	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00140	56		 push	 esi
  00141	ff b5 64 fb ff
	ff		 push	 DWORD PTR tv3103[ebp]
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 303  : 
; 304  : 		int word_len = word_next - word;

  0014d	2b c6		 sub	 eax, esi

; 305  : 
; 306  : 		if (word_len > 1)

  0014f	83 f8 01	 cmp	 eax, 1
  00152	0f 8e 20 02 00
	00		 jle	 $LN8@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1643 :             return assign(_UFirst, _STD _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  00158	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 308  : 			str_pos += word_len;

  00159	03 f8		 add	 edi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1643 :             return assign(_UFirst, _STD _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  0015b	b9 00 00 00 00	 mov	 ecx, OFFSET ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
  00160	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 308  : 			str_pos += word_len;

  00161	89 bd 7c fb ff
	ff		 mov	 DWORD PTR _str_pos$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1643 :             return assign(_UFirst, _STD _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  00167	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  0016c	8b bd e0 fb ff
	ff		 mov	 edi, DWORD PTR _cmd$13[ebp+20]
  00172	83 ff 06	 cmp	 edi, 6
  00175	72 33		 jb	 SHORT $LN949@Create

; 434  :         return _Myres > _Small_string_capacity;

  00177	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  0017a	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$13[ebp+16], 6
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00184	6a 06		 push	 6
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  00186	8d b5 cc fb ff
	ff		 lea	 esi, DWORD PTR _cmd$13[ebp]

; 417  :         if (_Large_mode_engaged()) {

  0018c	0f 47 b5 cc fb
	ff ff		 cmova	 esi, DWORD PTR _cmd$13[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00193	68 00 00 00 00	 push	 OFFSET ??_C@_06MJINCFFA@LETTER@
  00198	56		 push	 esi
  00199	e8 00 00 00 00	 call	 _memmove
  0019e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  001a1	c6 46 06 00	 mov	 BYTE PTR [esi+6], 0

; 1600 :             _ASAN_STRING_CREATE(*this);
; 1601 :             return *this;

  001a5	e9 c3 00 00 00	 jmp	 $LN183@Create
$LN949@Create:

; 2966 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  001aa	8b cf		 mov	 ecx, edi

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  001ac	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 2966 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  001b1	d1 e9		 shr	 ecx, 1

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  001b3	2b c1		 sub	 eax, ecx
  001b5	3b f8		 cmp	 edi, eax
  001b7	76 17		 jbe	 SHORT $LN190@Create

; 2948 :             return _Max;

  001b9	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  001be	c7 85 80 fb ff
	ff ff ff ff 7f	 mov	 DWORD PTR $T6[ebp], 2147483647 ; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001ce	eb 33		 jmp	 SHORT $LN959@Create
$LN190@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  001d0	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  001d3	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  001d8	3b c1		 cmp	 eax, ecx
  001da	0f 47 c8	 cmova	 ecx, eax
  001dd	89 8d 80 fb ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  001e3	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  001e6	85 c0		 test	 eax, eax
  001e8	75 04		 jne	 SHORT $LN203@Create

; 228  :         return nullptr;

  001ea	33 f6		 xor	 esi, esi
  001ec	eb 20		 jmp	 SHORT $LN202@Create
$LN203@Create:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  001ee	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  001f3	72 08		 jb	 SHORT $LN204@Create

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001fb	eb 06		 jmp	 SHORT $LN959@Create
$LN204@Create:

; 136  :         return ::operator new(_Bytes);

  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN959@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  00203	8b 8d 80 fb ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp]
  00209	8b f0		 mov	 esi, eax
  0020b	83 c4 04	 add	 esp, 4
$LN202@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0020e	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06MJINCFFA@LETTER@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  00213	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$13[ebp+16], 6

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  0021d	89 8d e0 fb ff
	ff		 mov	 DWORD PTR _cmd$13[ebp+20], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00223	89 06		 mov	 DWORD PTR [esi], eax
  00225	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06MJINCFFA@LETTER@+4
  0022b	66 89 46 04	 mov	 WORD PTR [esi+4], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0022f	c6 46 06 00	 mov	 BYTE PTR [esi+6], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  00233	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  00236	76 2f		 jbe	 SHORT $LN182@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00238	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$13[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0023e	47		 inc	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0023f	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00241	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  00247	72 14		 jb	 SHORT $LN232@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00249	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0024c	83 c7 23	 add	 edi, 35			; 00000023H
  0024f	2b c1		 sub	 eax, ecx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00251	83 c0 fc	 add	 eax, -4			; fffffffcH
  00254	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00257	0f 87 74 08 00
	00		 ja	 $LN854@Create
$LN232@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0025d	57		 push	 edi
  0025e	51		 push	 ecx
  0025f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00264	83 c4 08	 add	 esp, 8
$LN182@Create:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 314  : 				cmd.argList.push_back(TArg("value", stLetter));

  00267	89 b5 cc fb ff
	ff		 mov	 DWORD PTR _cmd$13[ebp], esi
$LN183@Create:
  0026d	68 00 00 00 00	 push	 OFFSET ??_C@_05MFEJDJP@value@
  00272	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00278	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0027d	68 00 00 00 00	 push	 OFFSET ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
  00282	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  00288	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0028c	50		 push	 eax
  0028d	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00293	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; script::SArgumet::SArgumet
  00298	89 85 80 fb ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1020 :         if (_Mysize == max_size()) {

  0029e	81 bd e8 fb ff
	ff 24 49 92 04	 cmp	 DWORD PTR _cmd$13[ebp+28], 76695844 ; 04924924H

; 979  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  002a8	8b bd e4 fb ff
	ff		 mov	 edi, DWORD PTR _cmd$13[ebp+24]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 314  : 				cmd.argList.push_back(TArg("value", stLetter));

  002ae	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1020 :         if (_Mysize == max_size()) {

  002b2	0f 84 0a 08 00
	00		 je	 $LN939@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  002b8	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$13[ebp+24]
  002be	89 85 5c fb ff
	ff		 mov	 DWORD PTR __Op$3[ebp], eax

; 136  :         return ::operator new(_Bytes);

  002c4	6a 38		 push	 56			; 00000038H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 583  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  002c6	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  002ca	c7 85 60 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$3[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  002d4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002d9	83 c4 04	 add	 esp, 4

; 256  :         return _Traits::_Allocate(_Bytes);

  002dc	8b f0		 mov	 esi, eax

; 1164 :         _Ptr = _Al.allocate(1);

  002de	89 b5 60 fb ff
	ff		 mov	 DWORD PTR __Op$3[ebp+4], esi

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  002e4	ff b5 80 fb ff
	ff		 push	 DWORD PTR $T4[ebp]

; 1164 :         _Ptr = _Al.allocate(1);

  002ea	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  002ed	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1025 :         ++_Mysize;

  002f2	ff 85 e8 fb ff
	ff		 inc	 DWORD PTR _cmd$13[ebp+28]

; 598  :         const pointer _Insert_after = _Insert_before->_Prev;

  002f8	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 599  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  002fb	89 3e		 mov	 DWORD PTR [esi], edi

; 600  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  002fd	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 603  :         _Insert_before->_Prev = _Result;

  00300	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 604  :         _Insert_after->_Next  = _Result;

  00303	89 31		 mov	 DWORD PTR [ecx], esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 314  : 				cmd.argList.push_back(TArg("value", stLetter));

  00305	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 602  :         this->_Ptr            = pointer{};

  0030b	c7 85 60 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$3[ebp+4], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 314  : 				cmd.argList.push_back(TArg("value", stLetter));

  00315	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0031a	8b 8d c8 fb ff
	ff		 mov	 ecx, DWORD PTR $T11[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 314  : 				cmd.argList.push_back(TArg("value", stLetter));

  00320	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00324	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00327	76 2f		 jbe	 SHORT $LN330@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00329	8b 95 b4 fb ff
	ff		 mov	 edx, DWORD PTR $T11[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0032f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00330	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00332	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00338	72 14		 jb	 SHORT $LN341@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0033a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0033d	83 c1 23	 add	 ecx, 35			; 00000023H
  00340	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00342	83 c0 fc	 add	 eax, -4			; fffffffcH
  00345	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00348	0f 87 83 07 00
	00		 ja	 $LN854@Create
$LN341@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0034e	51		 push	 ecx
  0034f	52		 push	 edx
  00350	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00355	83 c4 08	 add	 esp, 8
$LN330@Create:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 316  : 				m_cmdList.push_back(cmd);

  00358	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0035e	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _cmd$13[ebp]
  00364	50		 push	 eax
  00365	8d 49 18	 lea	 ecx, DWORD PTR [ecx+24]
  00368	e8 00 00 00 00	 call	 ?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back

; 317  : 			}
; 318  : 
; 319  : 		}

  0036d	8b bd 7c fb ff
	ff		 mov	 edi, DWORD PTR _str_pos$1$[ebp]
  00373	e9 30 05 00 00	 jmp	 $LN20@Create
$LN8@Create:

; 320  : 		else if (word_len == 1)

  00378	0f 85 86 06 00
	00		 jne	 $LN10@Create

; 321  : 		{
; 322  : 			const char cur = *word;

  0037e	8a 06		 mov	 al, BYTE PTR [esi]
  00380	88 85 7b fb ff
	ff		 mov	 BYTE PTR _cur$1$[ebp], al

; 323  : 
; 324  : 			if ('[' == cur)

  00386	3c 5b		 cmp	 al, 91			; 0000005bH
  00388	0f 85 f8 01 00
	00		 jne	 $LN12@Create

; 325  : 			{
; 326  : 				++str_pos;
; 327  : 
; 328  : 				const char* box_begin = str_base + str_pos;
; 329  : 				const char* box_end = LocaleString_FindChar(box_begin, str_len - str_pos, ']');

  0038e	8b 85 68 fb ff
	ff		 mov	 eax, DWORD PTR _str_len$1$[ebp]
  00394	47		 inc	 edi
  00395	8b 8d 74 fb ff
	ff		 mov	 ecx, DWORD PTR __Result$1$[ebp]
  0039b	2b c7		 sub	 eax, edi
  0039d	6a 5d		 push	 93			; 0000005dH
  0039f	03 cf		 add	 ecx, edi
  003a1	50		 push	 eax
  003a2	51		 push	 ecx
  003a3	89 8d 7c fb ff
	ff		 mov	 DWORD PTR _box_begin$1$[ebp], ecx
  003a9	e8 00 00 00 00	 call	 ?LocaleString_FindChar@@YAPBDPBDHD@Z ; LocaleString_FindChar
  003ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  003b1	8b f0		 mov	 esi, eax

; 330  : 				if (!box_end)

  003b3	8b 85 7c fb ff
	ff		 mov	 eax, DWORD PTR _box_begin$1$[ebp]
  003b9	50		 push	 eax
  003ba	85 f6		 test	 esi, esi
  003bc	0f 84 d6 05 00
	00		 je	 $LN940@Create

; 333  : 					return false;
; 334  : 				}
; 335  : 				str_pos += box_end - box_begin + 1;
; 336  : 
; 337  : 
; 338  : 				int data_len = 0;
; 339  : 				{
; 340  : 					const char* data_begin = LocaleString_Skip(codePage, box_begin);

  003c2	ff b5 70 fb ff
	ff		 push	 DWORD PTR _codePage$1$[ebp]
  003c8	8b ce		 mov	 ecx, esi
  003ca	2b c8		 sub	 ecx, eax
  003cc	41		 inc	 ecx
  003cd	03 f9		 add	 edi, ecx
  003cf	e8 00 00 00 00	 call	 ?LocaleString_Skip@@YAPBDKPBD@Z ; LocaleString_Skip

; 341  : 					const char* data_end = box_end;
; 342  : 					data_len = data_end - data_begin;

  003d4	2b f0		 sub	 esi, eax
  003d6	83 c4 08	 add	 esp, 8

; 343  : 					if (data_len >= 1024)

  003d9	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  003df	0f 8d 3d 05 00
	00		 jge	 $LN941@Create

; 346  : 						return false;
; 347  : 					}
; 348  : 					memcpy(box_data, data_begin, data_len);

  003e5	56		 push	 esi
  003e6	50		 push	 eax
  003e7	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  003ed	50		 push	 eax
  003ee	e8 00 00 00 00	 call	 _memcpy
  003f3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 349  : 					box_data[data_len] = '\0';

  003f6	81 fe 01 04 00
	00		 cmp	 esi, 1025		; 00000401H
  003fc	0f 83 ca 06 00
	00		 jae	 $LN23@Create

; 350  : 
; 351  : 					data_len = LocaleString_RightTrim(box_data, data_len);

  00402	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  00408	c6 84 35 ec fb
	ff ff 00	 mov	 BYTE PTR _box_data$[ebp+esi], 0
  00410	56		 push	 esi
  00411	50		 push	 eax
  00412	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
  00417	8b f0		 mov	 esi, eax

; 352  : 				}
; 353  : 
; 354  : 				{
; 355  : 					const char* space = LocaleString_FindChar(box_data, data_len, ' ');

  00419	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  0041f	6a 20		 push	 32			; 00000020H
  00421	56		 push	 esi
  00422	50		 push	 eax
  00423	e8 00 00 00 00	 call	 ?LocaleString_FindChar@@YAPBDPBDHD@Z ; LocaleString_FindChar
  00428	83 c4 14	 add	 esp, 20			; 00000014H
  0042b	89 85 7c fb ff
	ff		 mov	 DWORD PTR _space$1$[ebp], eax

; 356  : 					if (space)

  00431	85 c0		 test	 eax, eax
  00433	0f 84 dc 00 00
	00		 je	 $LN16@Create

; 357  : 					{
; 358  : 						int name_len = space - box_data;

  00439	8b c8		 mov	 ecx, eax
  0043b	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  00441	2b c8		 sub	 ecx, eax

; 359  : 						cmd.name.assign(box_data, name_len);

  00443	51		 push	 ecx
  00444	50		 push	 eax
  00445	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$13[ebp]
  0044b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 360  : 
; 361  : 						const char* space_next = CharNextExA(codePage, space, 0);

  00450	6a 00		 push	 0
  00452	ff b5 7c fb ff
	ff		 push	 DWORD PTR _space$1$[ebp]
  00458	ff b5 64 fb ff
	ff		 push	 DWORD PTR tv3103[ebp]
  0045e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 362  : 						const char* arg = LocaleString_Skip(codePage, space_next);

  00464	50		 push	 eax
  00465	ff b5 70 fb ff
	ff		 push	 DWORD PTR _codePage$1$[ebp]
  0046b	e8 00 00 00 00	 call	 ?LocaleString_Skip@@YAPBDKPBD@Z ; LocaleString_Skip
  00470	83 c4 08	 add	 esp, 8
  00473	89 85 7c fb ff
	ff		 mov	 DWORD PTR _arg$1$[ebp], eax

; 363  : 
; 364  : 						int arg_len = data_len - (arg - box_data);

  00479	2b f0		 sub	 esi, eax
  0047b	8d 8d ec fb ff
	ff		 lea	 ecx, DWORD PTR _box_data$[ebp]
  00481	03 f1		 add	 esi, ecx

; 365  : 
; 366  : 						if (!GetArg(arg, arg_len, cmd.argList))

  00483	8d 8d e4 fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$13[ebp+24]
  00489	51		 push	 ecx
  0048a	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00490	56		 push	 esi
  00491	50		 push	 eax
  00492	e8 00 00 00 00	 call	 ?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z ; script::Group::GetArg
  00497	84 c0		 test	 al, al
  00499	0f 85 cd 00 00
	00		 jne	 $LN363@Create

; 367  : 						{
; 368  : 							TraceError(" !! PARSING ERROR - Unknown Arguments : %d, %s\n", arg_len, arg);

  0049f	ff b5 7c fb ff
	ff		 push	 DWORD PTR _arg$1$[ebp]
  004a5	56		 push	 esi
  004a6	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@
  004ab	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1508 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  004b0	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$13[ebp+24]
  004b6	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$13[ebp+24]
  004bc	50		 push	 eax
  004bd	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  004c2	6a 38		 push	 56			; 00000038H
  004c4	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$13[ebp+24]
  004ca	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004cf	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$13[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  004d5	83 c4 1c	 add	 esp, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004d8	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  004db	0f 86 8c 05 00
	00		 jbe	 $LN698@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004e1	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _cmd$13[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  004e7	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004e8	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  004ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004f0	72 14		 jb	 SHORT $LN783@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004f5	83 c1 23	 add	 ecx, 35			; 00000023H
  004f8	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  004fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00500	0f 87 cb 05 00
	00		 ja	 $LN854@Create
$LN783@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00506	51		 push	 ecx
  00507	52		 push	 edx
  00508	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0050d	83 c4 08	 add	 esp, 8
  00510	e9 58 05 00 00	 jmp	 $LN698@Create
$LN16@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00515	8d 8d ec fb ff
	ff		 lea	 ecx, DWORD PTR _box_data$[ebp]
  0051b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0051e	66 90		 npad	 2
$LL955@Create:
  00520	8a 01		 mov	 al, BYTE PTR [ecx]
  00522	41		 inc	 ecx
  00523	84 c0		 test	 al, al
  00525	75 f9		 jne	 SHORT $LL955@Create
  00527	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00529	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  0052f	51		 push	 ecx
  00530	50		 push	 eax
  00531	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$13[ebp]
  00537	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1497 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  0053c	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$13[ebp+24]
  00542	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$13[ebp+24]
  00548	50		 push	 eax
  00549	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >

; 1498 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0054e	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _cmd$13[ebp+24]
  00554	83 c4 08	 add	 esp, 8
  00557	89 00		 mov	 DWORD PTR [eax], eax

; 1499 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00559	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _cmd$13[ebp+24]
  0055f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1500 :         _My_data._Mysize        = 0;

  00562	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$13[ebp+28], 0
$LN363@Create:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 378  : 					m_cmdList.push_back(cmd);

  0056c	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00572	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _cmd$13[ebp]
  00578	50		 push	 eax
  00579	8d 49 18	 lea	 ecx, DWORD PTR [ecx+24]
  0057c	e8 00 00 00 00	 call	 ?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back

; 379  : 				}
; 380  : 			}

  00581	e9 22 03 00 00	 jmp	 $LN20@Create
$LN12@Create:

; 381  : 			else if (cur == '\r' || cur == '\n')

  00586	3c 0d		 cmp	 al, 13			; 0000000dH
  00588	0f 84 19 03 00
	00		 je	 $LN21@Create
  0058e	3c 0a		 cmp	 al, 10			; 0000000aH
  00590	0f 84 11 03 00
	00		 je	 $LN21@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1619 :         if (_Count <= _Mypair._Myval2._Myres) {

  00596	8b 35 14 00 00
	00		 mov	 esi, DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 387  : 				++str_pos;

  0059c	47		 inc	 edi
  0059d	89 bd 7c fb ff
	ff		 mov	 DWORD PTR _str_pos$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1619 :         if (_Count <= _Mypair._Myval2._Myres) {

  005a3	83 fe 01	 cmp	 esi, 1
  005a6	72 31		 jb	 SHORT $LN366@Create

; 434  :         return _Myres > _Small_string_capacity;

  005a8	83 fe 0f	 cmp	 esi, 15			; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  005ab	0f be c8	 movsx	 ecx, al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  005ae	ba 00 00 00 00	 mov	 edx, OFFSET ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  005b3	0f b6 c1	 movzx	 eax, cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 417  :         if (_Large_mode_engaged()) {

  005b6	0f 47 15 00 00
	00 00		 cmova	 edx, DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  005bd	66 c1 e1 08	 shl	 cx, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1622 :             _Mypair._Myval2._Mysize = _Count;

  005c1	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  005cb	66 0b c8	 or	 cx, ax
  005ce	88 0a		 mov	 BYTE PTR [edx], cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1624 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  005d0	c6 42 01 00	 mov	 BYTE PTR [edx+1], 0

; 1625 :             return *this;

  005d4	e9 c5 00 00 00	 jmp	 $LN381@Create
$LN366@Create:

; 2966 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  005d9	8b ce		 mov	 ecx, esi

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  005db	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 2966 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  005e0	d1 e9		 shr	 ecx, 1

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  005e2	2b c1		 sub	 eax, ecx
  005e4	3b f0		 cmp	 esi, eax
  005e6	76 17		 jbe	 SHORT $LN388@Create

; 2948 :             return _Max;

  005e8	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  005ed	c7 85 80 fb ff
	ff ff ff ff 7f	 mov	 DWORD PTR $T7[ebp], 2147483647 ; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  005f7	50		 push	 eax
  005f8	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  005fd	eb 33		 jmp	 SHORT $LN960@Create
$LN388@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  005ff	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00602	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00607	3b c1		 cmp	 eax, ecx
  00609	0f 47 c8	 cmova	 ecx, eax
  0060c	89 8d 80 fb ff
	ff		 mov	 DWORD PTR $T7[ebp], ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  00612	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00615	85 c0		 test	 eax, eax
  00617	75 04		 jne	 SHORT $LN401@Create

; 228  :         return nullptr;

  00619	33 ff		 xor	 edi, edi
  0061b	eb 20		 jmp	 SHORT $LN400@Create
$LN401@Create:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0061d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00622	72 08		 jb	 SHORT $LN402@Create

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00624	50		 push	 eax
  00625	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0062a	eb 06		 jmp	 SHORT $LN960@Create
$LN402@Create:

; 136  :         return ::operator new(_Bytes);

  0062c	50		 push	 eax
  0062d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN960@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  00632	8b 8d 80 fb ff
	ff		 mov	 ecx, DWORD PTR $T7[ebp]
  00638	8b f8		 mov	 edi, eax
  0063a	83 c4 04	 add	 esp, 4
$LN400@Create:

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  0063d	89 0d 14 00 00
	00		 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00643	0f be 8d 7b fb
	ff ff		 movsx	 ecx, BYTE PTR _cur$1$[ebp]
  0064a	0f b6 c1	 movzx	 eax, cl
  0064d	66 c1 e1 08	 shl	 cx, 8
  00651	66 0b c8	 or	 cx, ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  00654	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0065e	88 0f		 mov	 BYTE PTR [edi], cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1632 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00660	c6 47 01 00	 mov	 BYTE PTR [edi+1], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  00664	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00667	76 2f		 jbe	 SHORT $LN380@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00669	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0066f	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00670	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00672	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  00678	72 14		 jb	 SHORT $LN430@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0067a	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0067d	83 c6 23	 add	 esi, 35			; 00000023H
  00680	2b c1		 sub	 eax, ecx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00682	83 c0 fc	 add	 eax, -4			; fffffffcH
  00685	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00688	0f 87 43 04 00
	00		 ja	 $LN854@Create
$LN430@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0068e	56		 push	 esi
  0068f	51		 push	 ecx
  00690	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00695	83 c4 08	 add	 esp, 8
$LN380@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  00698	89 3d 00 00 00
	00		 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A, edi
$LN381@Create:
  0069e	8b bd e0 fb ff
	ff		 mov	 edi, DWORD PTR _cmd$13[ebp+20]
  006a4	83 ff 06	 cmp	 edi, 6
  006a7	72 33		 jb	 SHORT $LN950@Create

; 434  :         return _Myres > _Small_string_capacity;

  006a9	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  006ac	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$13[ebp+16], 6
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  006b6	6a 06		 push	 6
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  006b8	8d b5 cc fb ff
	ff		 lea	 esi, DWORD PTR _cmd$13[ebp]

; 417  :         if (_Large_mode_engaged()) {

  006be	0f 47 b5 cc fb
	ff ff		 cmova	 esi, DWORD PTR _cmd$13[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  006c5	68 00 00 00 00	 push	 OFFSET ??_C@_06MJINCFFA@LETTER@
  006ca	56		 push	 esi
  006cb	e8 00 00 00 00	 call	 _memmove
  006d0	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  006d3	c6 46 06 00	 mov	 BYTE PTR [esi+6], 0

; 1600 :             _ASAN_STRING_CREATE(*this);
; 1601 :             return *this;

  006d7	e9 c3 00 00 00	 jmp	 $LN457@Create
$LN950@Create:

; 2966 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  006dc	8b cf		 mov	 ecx, edi

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  006de	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 2966 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  006e3	d1 e9		 shr	 ecx, 1

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  006e5	2b c1		 sub	 eax, ecx
  006e7	3b f8		 cmp	 edi, eax
  006e9	76 17		 jbe	 SHORT $LN464@Create

; 2948 :             return _Max;

  006eb	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  006f0	c7 85 80 fb ff
	ff ff ff ff 7f	 mov	 DWORD PTR $T8[ebp], 2147483647 ; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  006fa	50		 push	 eax
  006fb	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00700	eb 33		 jmp	 SHORT $LN961@Create
$LN464@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00702	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  00705	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0070a	3b c1		 cmp	 eax, ecx
  0070c	0f 47 c8	 cmova	 ecx, eax
  0070f	89 8d 80 fb ff
	ff		 mov	 DWORD PTR $T8[ebp], ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  00715	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00718	85 c0		 test	 eax, eax
  0071a	75 04		 jne	 SHORT $LN477@Create

; 228  :         return nullptr;

  0071c	33 f6		 xor	 esi, esi
  0071e	eb 20		 jmp	 SHORT $LN476@Create
$LN477@Create:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00720	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00725	72 08		 jb	 SHORT $LN478@Create

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00727	50		 push	 eax
  00728	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0072d	eb 06		 jmp	 SHORT $LN961@Create
$LN478@Create:

; 136  :         return ::operator new(_Bytes);

  0072f	50		 push	 eax
  00730	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN961@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  00735	8b 8d 80 fb ff
	ff		 mov	 ecx, DWORD PTR $T8[ebp]
  0073b	8b f0		 mov	 esi, eax
  0073d	83 c4 04	 add	 esp, 4
$LN476@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00740	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06MJINCFFA@LETTER@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  00745	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$13[ebp+16], 6

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  0074f	89 8d e0 fb ff
	ff		 mov	 DWORD PTR _cmd$13[ebp+20], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00755	89 06		 mov	 DWORD PTR [esi], eax
  00757	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06MJINCFFA@LETTER@+4
  0075d	66 89 46 04	 mov	 WORD PTR [esi+4], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00761	c6 46 06 00	 mov	 BYTE PTR [esi+6], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  00765	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  00768	76 2f		 jbe	 SHORT $LN456@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0076a	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$13[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00770	47		 inc	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00771	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00773	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  00779	72 14		 jb	 SHORT $LN506@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0077b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0077e	83 c7 23	 add	 edi, 35			; 00000023H
  00781	2b c1		 sub	 eax, ecx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00783	83 c0 fc	 add	 eax, -4			; fffffffcH
  00786	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00789	0f 87 42 03 00
	00		 ja	 $LN854@Create
$LN506@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0078f	57		 push	 edi
  00790	51		 push	 ecx
  00791	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00796	83 c4 08	 add	 esp, 8
$LN456@Create:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 392  : 					cmd.argList.push_back(TArg("value", stLetter));

  00799	89 b5 cc fb ff
	ff		 mov	 DWORD PTR _cmd$13[ebp], esi
$LN457@Create:
  0079f	68 00 00 00 00	 push	 OFFSET ??_C@_05MFEJDJP@value@
  007a4	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  007aa	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  007af	68 00 00 00 00	 push	 OFFSET ?stLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
  007b4	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  007ba	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  007be	50		 push	 eax
  007bf	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  007c5	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; script::SArgumet::SArgumet
  007ca	89 85 80 fb ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1020 :         if (_Mysize == max_size()) {

  007d0	81 bd e8 fb ff
	ff 24 49 92 04	 cmp	 DWORD PTR _cmd$13[ebp+28], 76695844 ; 04924924H

; 979  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  007da	8b bd e4 fb ff
	ff		 mov	 edi, DWORD PTR _cmd$13[ebp+24]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 392  : 					cmd.argList.push_back(TArg("value", stLetter));

  007e0	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1020 :         if (_Mysize == max_size()) {

  007e4	0f 84 d8 02 00
	00		 je	 $LN939@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  007ea	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$13[ebp+24]
  007f0	89 85 54 fb ff
	ff		 mov	 DWORD PTR __Op$2[ebp], eax

; 136  :         return ::operator new(_Bytes);

  007f6	6a 38		 push	 56			; 00000038H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 583  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  007f8	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  007fc	c7 85 58 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00806	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0080b	83 c4 04	 add	 esp, 4

; 256  :         return _Traits::_Allocate(_Bytes);

  0080e	8b f0		 mov	 esi, eax

; 1164 :         _Ptr = _Al.allocate(1);

  00810	89 b5 58 fb ff
	ff		 mov	 DWORD PTR __Op$2[ebp+4], esi

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00816	ff b5 80 fb ff
	ff		 push	 DWORD PTR $T5[ebp]

; 1164 :         _Ptr = _Al.allocate(1);

  0081c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0081f	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1025 :         ++_Mysize;

  00824	ff 85 e8 fb ff
	ff		 inc	 DWORD PTR _cmd$13[ebp+28]

; 598  :         const pointer _Insert_after = _Insert_before->_Prev;

  0082a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 599  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  0082d	89 3e		 mov	 DWORD PTR [esi], edi

; 600  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  0082f	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 603  :         _Insert_before->_Prev = _Result;

  00832	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 604  :         _Insert_after->_Next  = _Result;

  00835	89 31		 mov	 DWORD PTR [ecx], esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 392  : 					cmd.argList.push_back(TArg("value", stLetter));

  00837	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 602  :         this->_Ptr            = pointer{};

  0083d	c7 85 58 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 392  : 					cmd.argList.push_back(TArg("value", stLetter));

  00847	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0084c	8b 8d c8 fb ff
	ff		 mov	 ecx, DWORD PTR $T12[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 392  : 					cmd.argList.push_back(TArg("value", stLetter));

  00852	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00856	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00859	76 2f		 jbe	 SHORT $LN604@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0085b	8b 95 b4 fb ff
	ff		 mov	 edx, DWORD PTR $T12[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00861	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00862	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00864	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0086a	72 14		 jb	 SHORT $LN615@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0086c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0086f	83 c1 23	 add	 ecx, 35			; 00000023H
  00872	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00874	83 c0 fc	 add	 eax, -4			; fffffffcH
  00877	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0087a	0f 87 51 02 00
	00		 ja	 $LN854@Create
$LN615@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00880	51		 push	 ecx
  00881	52		 push	 edx
  00882	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00887	83 c4 08	 add	 esp, 8
$LN604@Create:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 393  : 					m_cmdList.push_back(cmd);

  0088a	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00890	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _cmd$13[ebp]
  00896	50		 push	 eax
  00897	8d 49 18	 lea	 ecx, DWORD PTR [ecx+24]
  0089a	e8 00 00 00 00	 call	 ?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back
  0089f	8b bd 7c fb ff
	ff		 mov	 edi, DWORD PTR _str_pos$1$[ebp]
  008a5	eb 01		 jmp	 SHORT $LN20@Create
$LN21@Create:

; 382  : 			{
; 383  : 				++str_pos;

  008a7	47		 inc	 edi
$LN20@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1508 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  008a8	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$13[ebp+24]
  008ae	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$13[ebp+24]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 401  :     }

  008b4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1508 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  008bb	50		 push	 eax
  008bc	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  008c1	6a 38		 push	 56			; 00000038H
  008c3	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$13[ebp+24]
  008c9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  008ce	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$13[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  008d4	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  008d7	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  008da	76 2f		 jbe	 SHORT $LN137@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008dc	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _cmd$13[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  008e2	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008e3	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  008e5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  008eb	72 14		 jb	 SHORT $LN148@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  008ed	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  008f0	83 c1 23	 add	 ecx, 35			; 00000023H
  008f3	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  008f5	83 c0 fc	 add	 eax, -4			; fffffffcH
  008f8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  008fb	0f 87 d0 01 00
	00		 ja	 $LN854@Create
$LN148@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00901	51		 push	 ecx
  00902	52		 push	 edx
  00903	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00908	83 c4 08	 add	 esp, 8
$LN137@Create:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 297  :     while (str_pos < str_len)

  0090b	3b bd 68 fb ff
	ff		 cmp	 edi, DWORD PTR _str_len$1$[ebp]
  00911	0f 8d 45 01 00
	00		 jge	 $LN846@Create
  00917	8b b5 74 fb ff
	ff		 mov	 esi, DWORD PTR __Result$1$[ebp]
  0091d	e9 be f7 ff ff	 jmp	 $LL3@Create
$LN941@Create:

; 344  : 					{
; 345  : 						TraceError(" !! PARSING ERROR - Buffer Overflow : %d, %s\n", data_len, str_base);

  00922	ff b5 74 fb ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  00928	56		 push	 esi
  00929	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@
  0092e	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1508 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00933	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$13[ebp+24]
  00939	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$13[ebp+24]
  0093f	50		 push	 eax
  00940	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00945	6a 38		 push	 56			; 00000038H
  00947	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$13[ebp+24]
  0094d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00952	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$13[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00958	83 c4 1c	 add	 esp, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0095b	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0095e	0f 86 09 01 00
	00		 jbe	 $LN698@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00964	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _cmd$13[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0096a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0096b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0096d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00973	72 14		 jb	 SHORT $LN931@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00975	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00978	83 c1 23	 add	 ecx, 35			; 00000023H
  0097b	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0097d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00980	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00983	0f 87 48 01 00
	00		 ja	 $LN854@Create
$LN931@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00989	51		 push	 ecx
  0098a	52		 push	 edx
  0098b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00990	83 c4 08	 add	 esp, 8
  00993	e9 d5 00 00 00	 jmp	 $LN698@Create
$LN940@Create:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 332  : 					TraceError(" !! PARSING ERROR - Syntax Error : %s\n", box_begin);

  00998	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@
  0099d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1508 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  009a2	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$13[ebp+24]
  009a8	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$13[ebp+24]
  009ae	50		 push	 eax
  009af	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  009b4	6a 38		 push	 56			; 00000038H
  009b6	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$13[ebp+24]
  009bc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  009c1	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$13[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  009c7	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  009ca	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  009cd	0f 86 9a 00 00
	00		 jbe	 $LN698@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  009d3	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _cmd$13[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  009d9	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  009da	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  009dc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  009e2	72 14		 jb	 SHORT $LN709@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  009e4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  009e7	83 c1 23	 add	 ecx, 35			; 00000023H
  009ea	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  009ec	83 c0 fc	 add	 eax, -4			; fffffffcH
  009ef	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  009f2	0f 87 d9 00 00
	00		 ja	 $LN854@Create
$LN709@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  009f8	51		 push	 ecx
  009f9	52		 push	 edx
  009fa	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  009ff	83 c4 08	 add	 esp, 8
  00a02	eb 69		 jmp	 SHORT $LN698@Create
$LN10@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1508 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00a04	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$13[ebp+24]
  00a0a	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$13[ebp+24]
  00a10	50		 push	 eax
  00a11	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00a16	6a 38		 push	 56			; 00000038H
  00a18	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$13[ebp+24]
  00a1e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00a23	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$13[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00a29	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00a2c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00a2f	76 2b		 jbe	 SHORT $LN846@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a31	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _cmd$13[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00a37	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a38	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00a3a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00a40	72 10		 jb	 SHORT $LN857@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00a42	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00a45	83 c1 23	 add	 ecx, 35			; 00000023H
  00a48	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00a4a	83 c0 fc	 add	 eax, -4			; fffffffcH
  00a4d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00a50	77 7f		 ja	 SHORT $LN854@Create
$LN857@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00a52	51		 push	 ecx
  00a53	52		 push	 edx
  00a54	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00a59	83 c4 08	 add	 esp, 8
$LN846@Create:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 403  :     return true;

  00a5c	b0 01		 mov	 al, 1
  00a5e	eb 0f		 jmp	 SHORT $LN1@Create
$LN7@Create:

; 284  :     {
; 285  :         TraceError("Source file has no content");

  00a60	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@
  00a65	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00a6a	83 c4 04	 add	 esp, 4
$LN698@Create:

; 404  : }

  00a6d	32 c0		 xor	 al, al
$LN1@Create:
  00a6f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00a72	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00a79	59		 pop	 ecx
  00a7a	5f		 pop	 edi
  00a7b	5e		 pop	 esi
  00a7c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a7f	33 cd		 xor	 ecx, ebp
  00a81	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a86	8b e5		 mov	 esp, ebp
  00a88	5d		 pop	 ebp
  00a89	c2 04 00	 ret	 4
$LN963@Create:

; 292  : 
; 293  :     char box_data[1024 + 1];
; 294  : 
; 295  : 	static std::string stLetter;

  00a8c	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  00a91	e8 00 00 00 00	 call	 __Init_thread_header
  00a96	83 c4 04	 add	 esp, 4
  00a99	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA, -1
  00aa0	0f 85 1c f6 ff
	ff		 jne	 $LN956@Create
  00aa6	68 00 00 00 00	 push	 OFFSET ??__FstLetter@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ ; `script::Group::Create'::`2'::`dynamic atexit destructor for 'stLetter''
  00aab	e8 00 00 00 00	 call	 _atexit
  00ab0	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  00ab5	e8 00 00 00 00	 call	 __Init_thread_footer
  00aba	83 c4 08	 add	 esp, 8
  00abd	e9 00 f6 ff ff	 jmp	 $LN956@Create
$LN939@Create:

; 404  : }

  00ac2	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00ac7	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN23@Create:

; 349  : 					box_data[data_len] = '\0';

  00acc	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN854@Create:

; 404  : }

  00ad1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN958@Create:
  00ad6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$5:
  00000	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$13[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  0000b	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$13[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1SCmd@script@@QAE@XZ
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00016	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00021	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$13:
  0002c	8d 8d 5c fb ff
	ff		 lea	 ecx, DWORD PTR __Op$3[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  00037	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4:
  00042	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
__unwindfunclet$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$17:
  0004d	8d 8d 54 fb ff
	ff		 lea	 ecx, DWORD PTR __Op$2[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
  0005c	cc		 int	 3
__ehhandler$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0005d	90		 npad	 1
  0005e	90		 npad	 1
  0005f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00063	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00066	8b 8a 54 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1196]
  0006c	33 c8		 xor	 ecx, eax
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00076	33 c8		 xor	 ecx, eax
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00082	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Create@Group@script@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; script::Group::Create
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
;	COMDAT ??1Group@script@@QAE@XZ
_TEXT	SEGMENT
??1Group@script@@QAE@XZ PROC				; script::Group::~Group, COMDAT
; _this$ = ecx

; 440  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1508 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00004	ff 77 18	 push	 DWORD PTR [edi+24]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 441  : }

  00007	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1508 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00010	6a 28		 push	 40			; 00000028H
  00012	ff 36		 push	 DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00019	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001c	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0001f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00022	76 27		 jbe	 SHORT $LN56@Group
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00024	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00026	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00027	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002d	72 12		 jb	 SHORT $LN67@Group

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00032	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00035	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003d	77 20		 ja	 SHORT $LN64@Group

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003f	8b c2		 mov	 eax, edx
$LN67@Group:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00041	51		 push	 ecx
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00048	83 c4 08	 add	 esp, 8
$LN56@Group:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0004b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00052	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00059	c6 07 00	 mov	 BYTE PTR [edi], 0
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 441  : }

  0005e	c3		 ret	 0
$LN64@Group:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@Group:
  00064	cc		 int	 3
??1Group@script@@QAE@XZ ENDP				; script::Group::~Group
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp
;	COMDAT ??0Group@script@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Group@script@@QAE@XZ PROC				; script::Group::Group, COMDAT
; _this$ = ecx

; 436  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Group@script@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0002c	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0002f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00036	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 836  :         _My_data._Mysize = 0;

  0003d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00044	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004b	c6 06 00	 mov	 BYTE PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0004e	6a 28		 push	 40			; 00000028H
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 436  : {

  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 353  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00057	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0005e	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00065	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006a	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1844 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0006d	89 00		 mov	 DWORD PTR [eax], eax

; 1845 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0006f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1846 :         _Mypair._Myval2._Myhead = _Newhead;

  00072	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.cpp

; 437  : }

  00075	8b c6		 mov	 eax, esi
  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5e		 pop	 esi
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Group@script@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0Group@script@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Group@script@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Group@script@@QAE@XZ ENDP				; script::Group::Group
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1SCmd@script@@QAE@XZ
_TEXT	SEGMENT
??1SCmd@script@@QAE@XZ PROC				; script::SCmd::~SCmd, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1508 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	ff 77 18	 push	 DWORD PTR [edi+24]
  00007	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00010	6a 38		 push	 56			; 00000038H
  00012	ff 36		 push	 DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00019	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001c	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0001f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00022	76 27		 jbe	 SHORT $LN56@SCmd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00024	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00026	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00027	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002d	72 12		 jb	 SHORT $LN67@SCmd

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00032	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00035	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003d	77 20		 ja	 SHORT $LN64@SCmd

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003f	8b c2		 mov	 eax, edx
$LN67@SCmd:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00041	51		 push	 ecx
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00048	83 c4 08	 add	 esp, 8
$LN56@SCmd:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0004b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00052	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00059	c6 07 00	 mov	 BYTE PTR [edi], 0
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	c3		 ret	 0
$LN64@SCmd:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@SCmd:
  00064	cc		 int	 3
??1SCmd@script@@QAE@XZ ENDP				; script::SCmd::~SCmd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
;	COMDAT ??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ PROC ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >, COMDAT
; _this$ = ecx

; 1050 :     ~list() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1508 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	56		 push	 esi
  00006	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0000b	6a 38		 push	 56			; 00000038H
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00014	83 c4 10	 add	 esp, 16			; 00000010H
  00017	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1056 :     }

  00018	c3		 ret	 0
??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ ENDP ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
;	COMDAT ?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
_TEXT	SEGMENT
__Op$2 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z PROC ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back, COMDAT
; _this$ = ecx

; 978  :     void push_back(_Ty&& _Val) { // insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1020 :         if (_Mysize == max_size()) {

  0002a	81 7f 04 24 49
	92 04		 cmp	 DWORD PTR [edi+4], 76695844 ; 04924924H

; 979  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  00031	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1020 :         if (_Mysize == max_size()) {

  00033	74 4f		 je	 SHORT $LN75@push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00035	89 7d ec	 mov	 DWORD PTR __Op$2[ebp], edi

; 136  :         return ::operator new(_Bytes);

  00038	6a 38		 push	 56			; 00000038H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 583  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00041	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00048	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004d	83 c4 04	 add	 esp, 4

; 256  :         return _Traits::_Allocate(_Bytes);

  00050	8b f0		 mov	 esi, eax

; 1164 :         _Ptr = _Al.allocate(1);

  00052	89 75 f0	 mov	 DWORD PTR __Op$2[ebp+4], esi

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00055	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00058	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0005b	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1025 :         ++_Mysize;

  00060	ff 47 04	 inc	 DWORD PTR [edi+4]

; 598  :         const pointer _Insert_after = _Insert_before->_Prev;

  00063	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 599  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00066	89 1e		 mov	 DWORD PTR [esi], ebx

; 600  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00068	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 601  :         const auto _Result    = this->_Ptr;
; 602  :         this->_Ptr            = pointer{};
; 603  :         _Insert_before->_Prev = _Result;

  0006b	89 73 04	 mov	 DWORD PTR [ebx+4], esi

; 604  :         _Insert_after->_Next  = _Result;

  0006e	89 31		 mov	 DWORD PTR [ecx], esi

; 980  :     }

  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
$LN75@push_back:

; 1021 :             _Xlength_error("list too long");

  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00089	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN73@push_back:
  0008e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z ENDP ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1SArgumet@script@@QAE@XZ
_TEXT	SEGMENT
??1SArgumet@script@@QAE@XZ PROC				; script::SArgumet::~SArgumet, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 28		 jbe	 SHORT $LN24@SArgumet
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000e	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN35@SArgumet

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 60		 ja	 SHORT $LN70@SArgumet

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN35@SArgumet:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN24@SArgumet:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00033	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0003a	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0

; 434  :         return _Myres > _Small_string_capacity;

  00045	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00048	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0004b	76 27		 jbe	 SHORT $LN62@SArgumet
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0004f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00050	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00056	72 12		 jb	 SHORT $LN73@SArgumet

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00058	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	83 c0 fc	 add	 eax, -4			; fffffffcH
  00063	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00066	77 1f		 ja	 SHORT $LN70@SArgumet

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00068	8b c2		 mov	 eax, edx
$LN73@SArgumet:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006a	51		 push	 ecx
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
$LN62@SArgumet:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00074	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0007b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00082	c6 06 00	 mov	 BYTE PTR [esi], 0
  00085	5e		 pop	 esi
  00086	c3		 ret	 0
$LN70@SArgumet:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00087	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@SArgumet:
  0008c	cc		 int	 3
??1SArgumet@script@@QAE@XZ ENDP				; script::SArgumet::~SArgumet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
;	COMDAT ??0SArgumet@script@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_arg$ = 8						; size = 4
??0SArgumet@script@@QAE@ABU01@@Z PROC			; script::SArgumet::SArgumet, COMDAT
; _this$ = ecx

; 16   : 		SArgumet(const SArgumet& c_arg)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SArgumet@script@@QAE@ABU01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0002d	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00030	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00037	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 836  :         _My_data._Mysize = 0;

  0003e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004c	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 17   : 		{

  0004f	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00059	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 836  :         _My_data._Mysize = 0;

  0005c	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00063	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0006a	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 1371 :         if (this == _STD addressof(_Right)) {

  0006d	8b 7d 08	 mov	 edi, DWORD PTR _c_arg$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 17   : 		{

  00070	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  00074	3b f7		 cmp	 esi, edi
  00076	74 18		 je	 SHORT $LN45@SArgumet

; 434  :         return _Myres > _Small_string_capacity;

  00078	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  0007c	8b c7		 mov	 eax, edi

; 426  :         if (_Large_mode_engaged()) {

  0007e	76 02		 jbe	 SHORT $LN49@SArgumet

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00080	8b 07		 mov	 eax, DWORD PTR [edi]
$LN49@SArgumet:

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00082	ff 77 10	 push	 DWORD PTR [edi+16]
  00085	8b ce		 mov	 ecx, esi
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0008d	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
$LN45@SArgumet:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 19   : 			strValue = c_arg.strValue;

  00090	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  00093	3b c8		 cmp	 ecx, eax
  00095	74 12		 je	 SHORT $LN65@SArgumet

; 434  :         return _Myres > _Small_string_capacity;

  00097	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0009b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  0009e	76 02		 jbe	 SHORT $LN59@SArgumet

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000a0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN59@SArgumet:

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000a2	52		 push	 edx
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN65@SArgumet:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 20   : 		}

  000a9	8b c6		 mov	 eax, esi
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 18	 add	 ecx, 24			; 00000018H
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0SArgumet@script@@QAE@ABU01@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SArgumet@script@@QAE@ABU01@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SArgumet@script@@QAE@ABU01@@Z ENDP			; script::SArgumet::SArgumet
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h
;	COMDAT ??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_stName$ = 8						; size = 4
_c_stValue$ = 12					; size = 4
??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; script::SArgumet::SArgumet, COMDAT
; _this$ = ecx

; 11   :         SArgumet(const std::string& c_stName, const std::string& c_stValue)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0002d	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00030	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00037	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 836  :         _My_data._Mysize = 0;

  0003e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004c	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 12   :         {

  0004f	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00059	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 836  :         _My_data._Mysize = 0;

  0005c	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00063	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0006a	c6 07 00	 mov	 BYTE PTR [edi], 0

; 1371 :         if (this == _STD addressof(_Right)) {

  0006d	8b 45 08	 mov	 eax, DWORD PTR _c_stName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 12   :         {

  00070	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  00074	3b f0		 cmp	 esi, eax
  00076	74 14		 je	 SHORT $LN45@SArgumet

; 434  :         return _Myres > _Small_string_capacity;

  00078	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0007c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  0007f	76 02		 jbe	 SHORT $LN49@SArgumet

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00081	8b 00		 mov	 eax, DWORD PTR [eax]
$LN49@SArgumet:

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00083	51		 push	 ecx
  00084	50		 push	 eax
  00085	8b ce		 mov	 ecx, esi
  00087	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN45@SArgumet:

; 1371 :         if (this == _STD addressof(_Right)) {

  0008c	8b 45 0c	 mov	 eax, DWORD PTR _c_stValue$[ebp]
  0008f	3b f8		 cmp	 edi, eax
  00091	74 14		 je	 SHORT $LN65@SArgumet

; 434  :         return _Myres > _Small_string_capacity;

  00093	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00097	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  0009a	76 02		 jbe	 SHORT $LN59@SArgumet

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0009c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN59@SArgumet:

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0009e	51		 push	 ecx
  0009f	50		 push	 eax
  000a0	8b cf		 mov	 ecx, edi
  000a2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN65@SArgumet:
; File C:\Marty 5.5\Src-Client\Client\EterLib\parser.h

; 15   :         }

  000a7	8b c6		 mov	 eax, esi
  000a9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b3	59		 pop	 ecx
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 18	 add	 ecx, 24			; 00000018H
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; script::SArgumet::SArgumet
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
$T2 = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1592 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1593 :         // assign [_Ptr, _Ptr + _Count)
; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 416  :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 434  :         return _Myres > _Small_string_capacity;

  00018	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0001b	76 02		 jbe	 SHORT $LN5@assign

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 1609 :             },
; 1610 :             _Ptr);
; 1611 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 2962 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 c7 00 00
	00		 ja	 $LN87@assign

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 12		 jbe	 SHORT $LN23@assign

; 2944 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	eb 45		 jmp	 SHORT $LN85@assign
$LN23@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00069	8b d1		 mov	 edx, ecx
  0006b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00070	d1 ea		 shr	 edx, 1
  00072	2b c2		 sub	 eax, edx
  00074	3b c8		 cmp	 ecx, eax
  00076	76 12		 jbe	 SHORT $LN24@assign

; 2948 :             return _Max;

  00078	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0007d	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00088	eb 24		 jmp	 SHORT $LN85@assign
$LN24@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0008a	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0008d	3b f8		 cmp	 edi, eax
  0008f	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00092	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00095	85 c0		 test	 eax, eax
  00097	74 18		 je	 SHORT $LN84@assign
$LN37@assign:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00099	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0009e	72 08		 jb	 SHORT $LN38@assign

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a6	eb 06		 jmp	 SHORT $LN85@assign
$LN38@assign:

; 136  :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN85@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000ae	83 c4 04	 add	 esp, 4
$LN84@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b1	53		 push	 ebx
  000b2	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000b5	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b8	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000b9	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  000bc	89 7e 14	 mov	 DWORD PTR [esi+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000c4	8b 7d 0c	 mov	 edi, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000ca	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000cd	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000d1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000d4	76 29		 jbe	 SHORT $LN16@assign

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d6	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000db	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e1	72 12		 jb	 SHORT $LN66@assign

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000e3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000e6	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e9	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000eb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ee	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f1	77 19		 ja	 SHORT $LN63@assign

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000f3	8b c2		 mov	 eax, edx
$LN66@assign:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f5	51		 push	 ecx
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000fc	83 c4 08	 add	 esp, 8
$LN16@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1604 :         return _Reallocate_for(

  000ff	89 3e		 mov	 DWORD PTR [esi], edi

; 1609 :             },
; 1610 :             _Ptr);
; 1611 :     }

  00101	8b c6		 mov	 eax, esi
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN63@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN87@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  00111	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN82@assign:
  00116	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 744  :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000f	8b f7		 mov	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL51@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL51@basic_stri
  0002c	2b f1		 sub	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 857  :         if (_Count > max_size()) {

  0002e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00034	0f 87 9b 00 00
	00		 ja	 $LN62@basic_stri

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  0003a	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  0003d	77 24		 ja	 SHORT $LN21@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003f	56		 push	 esi
  00040	57		 push	 edi
  00041	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00042	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00045	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00051	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	8b c3		 mov	 eax, ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN21@basic_stri:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 12		 jbe	 SHORT $LN27@basic_stri

; 2944 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	eb 26		 jmp	 SHORT $LN60@basic_stri
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00082	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00087	3b f8		 cmp	 edi, eax
  00089	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0008c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0008f	85 c0		 test	 eax, eax
  00091	74 18		 je	 SHORT $LN59@basic_stri
$LN41@basic_stri:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00093	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00098	72 08		 jb	 SHORT $LN42@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a0	eb 06		 jmp	 SHORT $LN60@basic_stri
$LN42@basic_stri:

; 136  :         return ::operator new(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN60@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000a8	83 c4 04	 add	 esp, 4
$LN59@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ab	56		 push	 esi
  000ac	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000af	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b2	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000b3	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  000b5	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  000b8	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bb	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000c0	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	5f		 pop	 edi

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000c7	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  000cb	8b c3		 mov	 eax, ebx
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
$LN62@basic_stri:

; 858  :             _Xlen_string(); // result too long

  000d5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN57@basic_stri:
  000da	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
