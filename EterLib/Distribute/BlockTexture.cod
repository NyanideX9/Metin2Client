; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\BlockTexture.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0SPDTVertex@@QAE@XZ				; SPDTVertex::SPDTVertex
PUBLIC	??0CBlockTexture@@QAE@XZ			; CBlockTexture::CBlockTexture
PUBLIC	??1CBlockTexture@@UAE@XZ			; CBlockTexture::~CBlockTexture
PUBLIC	?Create@CBlockTexture@@QAE_NPAVCGraphicDib@@ABUtagRECT@@KK@Z ; CBlockTexture::Create
PUBLIC	?SetClipRect@CBlockTexture@@QAEXABUtagRECT@@@Z	; CBlockTexture::SetClipRect
PUBLIC	?Render@CBlockTexture@@QAEXHH@Z			; CBlockTexture::Render
PUBLIC	?InvalidateRect@CBlockTexture@@QAEXABUtagRECT@@@Z ; CBlockTexture::InvalidateRect
PUBLIC	??_GCBlockTexture@@UAEPAXI@Z			; CBlockTexture::`scalar deleting destructor'
PUBLIC	??_7CBlockTexture@@6B@				; CBlockTexture::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0CA@GIFEHILH@InvalidateRect?$CI?$CJ?5?9?5Strange?5rect@ ; `string'
PUBLIC	??_C@_0CG@ELGANAOG@InvalidateRect?$CI?$CJ?5?9?5Failed?5to?5Lo@ ; `string'
PUBLIC	??_C@_0CH@GNLBGAOD@Failed?5to?5create?5block?5texture?5@ ; `string'
PUBLIC	??_R4CBlockTexture@@6B@				; CBlockTexture::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBlockTexture@@@8			; CBlockTexture `RTTI Type Descriptor'
PUBLIC	??_R3CBlockTexture@@8				; CBlockTexture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBlockTexture@@8				; CBlockTexture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBlockTexture@@8			; CBlockTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@ff000000ff000000ff000000ff000000
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	??0CGraphicBase@@QAE@XZ:PROC			; CGraphicBase::CGraphicBase
EXTRN	??1CGraphicBase@@UAE@XZ:PROC			; CGraphicBase::~CGraphicBase
EXTRN	?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z:PROC ; CGraphicBase::SetDefaultIndexBuffer
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	??_ECBlockTexture@@UAEPAXI@Z:PROC		; CBlockTexture::`vector deleting destructor'
EXTRN	?GetWidth@CGraphicDib@@QAEHXZ:PROC		; CGraphicDib::GetWidth
EXTRN	?GetPointer@CGraphicDib@@QAEPAXXZ:PROC		; CGraphicDib::GetPointer
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@ff000000ff000000ff000000ff000000
CONST	SEGMENT
__xmm@ff000000ff000000ff000000ff000000 DB 00H, 00H, 00H, 0ffH, 00H, 00H, 00H
	DB	0ffH, 00H, 00H, 00H, 0ffH, 00H, 00H, 00H, 0ffH
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBlockTexture@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBlockTexture@@8 DD FLAT:??_R0?AVCBlockTexture@@@8 ; CBlockTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBlockTexture@@8
rdata$r	ENDS
;	COMDAT ??_R2CBlockTexture@@8
rdata$r	SEGMENT
??_R2CBlockTexture@@8 DD FLAT:??_R1A@?0A@EA@CBlockTexture@@8 ; CBlockTexture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CBlockTexture@@8
rdata$r	SEGMENT
??_R3CBlockTexture@@8 DD 00H				; CBlockTexture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CBlockTexture@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBlockTexture@@@8
data$rs	SEGMENT
??_R0?AVCBlockTexture@@@8 DD FLAT:??_7type_info@@6B@	; CBlockTexture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBlockTexture@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CBlockTexture@@6B@
rdata$r	SEGMENT
??_R4CBlockTexture@@6B@ DD 00H				; CBlockTexture::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBlockTexture@@@8
	DD	FLAT:??_R3CBlockTexture@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CH@GNLBGAOD@Failed?5to?5create?5block?5texture?5@
CONST	SEGMENT
??_C@_0CH@GNLBGAOD@Failed?5to?5create?5block?5texture?5@ DB 'Failed to cr'
	DB	'eate block texture %u, %u', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ELGANAOG@InvalidateRect?$CI?$CJ?5?9?5Failed?5to?5Lo@
CONST	SEGMENT
??_C@_0CG@ELGANAOG@InvalidateRect?$CI?$CJ?5?9?5Failed?5to?5Lo@ DB 'Invali'
	DB	'dateRect() - Failed to LockRect', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GIFEHILH@InvalidateRect?$CI?$CJ?5?9?5Strange?5rect@
CONST	SEGMENT
??_C@_0CA@GIFEHILH@InvalidateRect?$CI?$CJ?5?9?5Strange?5rect@ DB 'Invalid'
	DB	'ateRect() - Strange rect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CBlockTexture@@6B@
CONST	SEGMENT
??_7CBlockTexture@@6B@ DD FLAT:??_R4CBlockTexture@@6B@	; CBlockTexture::`vftable'
	DD	FLAT:??_ECBlockTexture@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CBlockTexture@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCBlockTexture@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBlockTexture@@UAEPAXI@Z PROC			; CBlockTexture::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CBlockTexture@@UAE@XZ ; CBlockTexture::~CBlockTexture
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 38		 push	 56			; 00000038H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCBlockTexture@@UAEPAXI@Z ENDP			; CBlockTexture::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\BlockTexture.cpp
;	COMDAT ?InvalidateRect@CBlockTexture@@QAEXABUtagRECT@@@Z
_TEXT	SEGMENT
_lockedRect$ = -56					; size = 8
tv862 = -48						; size = 4
_iclipWidth$1$ = -44					; size = 4
tv845 = -40						; size = 4
tv878 = -40						; size = 4
_this$GSCopy$1$ = -36					; size = 4
_iclipHeight$1$ = -32					; size = 4
tv815 = -32						; size = 4
_dwDstWidth$1$ = -28					; size = 4
tv817 = -28						; size = 4
tv863 = -28						; size = 4
_dstRect$1$ = -24					; size = 4
_pdwSrc$2$ = -24					; size = 4
_dstRect$ = -20						; size = 16
_clipRect$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_c_rsrcRect$ = 8					; size = 4
?InvalidateRect@CBlockTexture@@QAEXABUtagRECT@@@Z PROC	; CBlockTexture::InvalidateRect, COMDAT
; _this$ = ecx

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 103  : 	RECT dstRect = m_rect;

  00010	0f 10 41 08	 movups	 xmm0, XMMWORD PTR [ecx+8]
  00014	8b 45 08	 mov	 eax, DWORD PTR _c_rsrcRect$[ebp]
  00017	89 4d dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx

; 104  : 	if (c_rsrcRect.right < dstRect.left ||
; 105  : 		c_rsrcRect.left > dstRect.right ||
; 106  : 		c_rsrcRect.bottom < dstRect.top ||

  0001a	66 0f 7e c1	 movd	 ecx, xmm0
  0001e	53		 push	 ebx
  0001f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00022	89 55 e4	 mov	 DWORD PTR tv817[ebp], edx
  00025	89 4d e8	 mov	 DWORD PTR _dstRect$1$[ebp], ecx
  00028	56		 push	 esi
  00029	57		 push	 edi
  0002a	0f 11 45 ec	 movups	 XMMWORD PTR _dstRect$[ebp], xmm0
  0002e	3b d1		 cmp	 edx, ecx
  00030	0f 8c e2 01 00
	00		 jl	 $LN9@Invalidate
  00036	8b 30		 mov	 esi, DWORD PTR [eax]
  00038	8b 4d f4	 mov	 ecx, DWORD PTR _dstRect$[ebp+8]
  0003b	3b f1		 cmp	 esi, ecx
  0003d	0f 8f d5 01 00
	00		 jg	 $LN9@Invalidate
  00043	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  00046	8b 7d f0	 mov	 edi, DWORD PTR _dstRect$[ebp+4]
  00049	3b df		 cmp	 ebx, edi
  0004b	0f 8c c7 01 00
	00		 jl	 $LN9@Invalidate
  00051	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00054	8b 55 f8	 mov	 edx, DWORD PTR _dstRect$[ebp+12]
  00057	89 45 e0	 mov	 DWORD PTR tv815[ebp], eax
  0005a	3b c2		 cmp	 eax, edx
  0005c	0f 8f b6 01 00
	00		 jg	 $LN9@Invalidate

; 110  : 		return;
; 111  : 	}
; 112  : 
; 113  : 
; 114  : 	// DIBBAR_LONGSIZE_BUGFIX
; 115  : 	const RECT clipRect = {
; 116  : 		max(c_rsrcRect.left - dstRect.left, 0),

  00062	2b 75 e8	 sub	 esi, DWORD PTR _dstRect$1$[ebp]
  00065	33 c0		 xor	 eax, eax
  00067	85 f6		 test	 esi, esi
  00069	0f 4f c6	 cmovg	 eax, esi

; 117  : 		max(c_rsrcRect.top - dstRect.top, 0),

  0006c	8b 75 e0	 mov	 esi, DWORD PTR tv815[ebp]
  0006f	2b f7		 sub	 esi, edi
  00071	89 45 ec	 mov	 DWORD PTR _clipRect$[ebp], eax
  00074	33 c0		 xor	 eax, eax
  00076	85 f6		 test	 esi, esi
  00078	0f 4f c6	 cmovg	 eax, esi

; 118  : 		min(c_rsrcRect.right - dstRect.left, dstRect.right - dstRect.left),

  0007b	2b 4d e8	 sub	 ecx, DWORD PTR _dstRect$1$[ebp]
  0007e	8b 75 e4	 mov	 esi, DWORD PTR tv817[ebp]
  00081	2b 75 e8	 sub	 esi, DWORD PTR _dstRect$1$[ebp]
  00084	3b f1		 cmp	 esi, ecx
  00086	89 45 f0	 mov	 DWORD PTR _clipRect$[ebp+4], eax
  00089	0f 4c ce	 cmovl	 ecx, esi

; 119  : 		min(c_rsrcRect.bottom - dstRect.top, dstRect.bottom - dstRect.top),

  0008c	2b df		 sub	 ebx, edi
  0008e	2b d7		 sub	 edx, edi
  00090	89 4d f4	 mov	 DWORD PTR _clipRect$[ebp+8], ecx
  00093	3b da		 cmp	 ebx, edx
  00095	0f 4c d3	 cmovl	 edx, ebx

; 120  : 	};
; 121  : 	// END_OF_DIBBAR_LONGSIZE_BUGFIX
; 122  : 
; 123  : 
; 124  : 	DWORD * pdwSrc;
; 125  : 	pdwSrc = (DWORD *)m_pDIB->GetPointer();

  00098	8b 5d dc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  0009b	89 55 f8	 mov	 DWORD PTR _clipRect$[ebp+12], edx
  0009e	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000a1	e8 00 00 00 00	 call	 ?GetPointer@CGraphicDib@@QAEPAXXZ ; CGraphicDib::GetPointer

; 126  : 	pdwSrc += dstRect.left + dstRect.top*m_pDIB->GetWidth();

  000a6	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000a9	8b f0		 mov	 esi, eax
  000ab	e8 00 00 00 00	 call	 ?GetWidth@CGraphicDib@@QAEHXZ ; CGraphicDib::GetWidth

; 127  : 
; 128  : 	D3DLOCKED_RECT lockedRect;
; 129  : 	if (FAILED(m_lpd3dTexture->LockRect(0, &lockedRect, &clipRect, 0)))

  000b0	8b 4b 34	 mov	 ecx, DWORD PTR [ebx+52]
  000b3	8d 55 ec	 lea	 edx, DWORD PTR _clipRect$[ebp]
  000b6	0f af c7	 imul	 eax, edi
  000b9	6a 00		 push	 0
  000bb	52		 push	 edx
  000bc	8d 55 c8	 lea	 edx, DWORD PTR _lockedRect$[ebp]
  000bf	52		 push	 edx
  000c0	03 45 e8	 add	 eax, DWORD PTR _dstRect$1$[ebp]
  000c3	6a 00		 push	 0
  000c5	51		 push	 ecx
  000c6	8d 34 86	 lea	 esi, DWORD PTR [esi+eax*4]
  000c9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cb	89 75 e8	 mov	 DWORD PTR _pdwSrc$2$[ebp], esi
  000ce	ff 50 40	 call	 DWORD PTR [eax+64]
  000d1	85 c0		 test	 eax, eax
  000d3	79 0a		 jns	 SHORT $LN10@Invalidate

; 130  : 	{
; 131  : 		Tracef("InvalidateRect() - Failed to LockRect");

  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@ELGANAOG@InvalidateRect?$CI?$CJ?5?9?5Failed?5to?5Lo@

; 132  : 		return;

  000da	e9 3e 01 00 00	 jmp	 $LN53@Invalidate
$LN10@Invalidate:

; 136  : 	int iclipHeight = clipRect.bottom - clipRect.top;

  000df	8b 45 f8	 mov	 eax, DWORD PTR _clipRect$[ebp+12]
  000e2	2b 45 f0	 sub	 eax, DWORD PTR _clipRect$[ebp+4]

; 137  : 	DWORD * pdwDst = (DWORD *)lockedRect.pBits;
; 138  : 	DWORD dwDstWidth = lockedRect.Pitch>>2;
; 139  : 	DWORD dwSrcWidth = m_pDIB->GetWidth();

  000e5	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000e8	8b 5d f4	 mov	 ebx, DWORD PTR _clipRect$[ebp+8]
  000eb	2b 5d ec	 sub	 ebx, DWORD PTR _clipRect$[ebp]
  000ee	8b 7d cc	 mov	 edi, DWORD PTR _lockedRect$[ebp+4]
  000f1	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000f4	89 45 e0	 mov	 DWORD PTR _iclipHeight$1$[ebp], eax
  000f7	8b 45 c8	 mov	 eax, DWORD PTR _lockedRect$[ebp]
  000fa	c1 f8 02	 sar	 eax, 2
  000fd	89 5d d4	 mov	 DWORD PTR _iclipWidth$1$[ebp], ebx
  00100	89 45 e4	 mov	 DWORD PTR _dwDstWidth$1$[ebp], eax
  00103	e8 00 00 00 00	 call	 ?GetWidth@CGraphicDib@@QAEHXZ ; CGraphicDib::GetWidth

; 140  : 	for (int i = 0; i < iclipHeight; ++i)

  00108	83 7d e0 00	 cmp	 DWORD PTR _iclipHeight$1$[ebp], 0
  0010c	0f 8e e5 00 00
	00		 jle	 $LN3@Invalidate

; 133  : 	}
; 134  : 
; 135  : 	int iclipWidth = clipRect.right - clipRect.left;

  00112	8b 4d e4	 mov	 ecx, DWORD PTR _dwDstWidth$1$[ebp]
  00115	0f 10 2d 00 00
	00 00		 movups	 xmm5, XMMWORD PTR __xmm@ff000000ff000000ff000000ff000000
  0011c	c1 e1 02	 shl	 ecx, 2
  0011f	0f 10 35 00 00
	00 00		 movups	 xmm6, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00126	c1 e0 02	 shl	 eax, 2
  00129	89 45 d0	 mov	 DWORD PTR tv862[ebp], eax
  0012c	8b c1		 mov	 eax, ecx
  0012e	89 4d e4	 mov	 DWORD PTR tv863[ebp], ecx
$LL4@Invalidate:

; 141  : 	{
; 142  : 		for (int i = 0; i < iclipWidth; ++i)

  00131	33 c9		 xor	 ecx, ecx
  00133	85 db		 test	 ebx, ebx
  00135	0f 8e aa 00 00
	00		 jle	 $LN6@Invalidate
  0013b	83 fb 04	 cmp	 ebx, 4
  0013e	72 6c		 jb	 SHORT $LN38@Invalidate
  00140	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00143	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  00146	8d 53 ff	 lea	 edx, DWORD PTR [ebx-1]
  00149	8d 14 97	 lea	 edx, DWORD PTR [edi+edx*4]
  0014c	3b f8		 cmp	 edi, eax
  0014e	77 04		 ja	 SHORT $LN31@Invalidate
  00150	3b d6		 cmp	 edx, esi
  00152	73 58		 jae	 SHORT $LN38@Invalidate
$LN31@Invalidate:

; 146  : 			else
; 147  : 				pdwDst[i] = 0;

  00154	8b c3		 mov	 eax, ebx
  00156	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0015b	79 05		 jns	 SHORT $LN52@Invalidate
  0015d	48		 dec	 eax
  0015e	83 c8 fc	 or	 eax, -4			; fffffffcH
  00161	40		 inc	 eax
$LN52@Invalidate:
  00162	8b d3		 mov	 edx, ebx
  00164	0f 57 e4	 xorps	 xmm4, xmm4
  00167	2b d0		 sub	 edx, eax
  00169	8b c7		 mov	 eax, edi
  0016b	2b f7		 sub	 esi, edi
  0016d	0f 1f 00	 npad	 3
$LL7@Invalidate:

; 141  : 	{
; 142  : 		for (int i = 0; i < iclipWidth; ++i)

  00170	0f 10 1c 06	 movups	 xmm3, XMMWORD PTR [esi+eax]
  00174	83 c1 04	 add	 ecx, 4
  00177	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 145  : 				pdwDst[i] = pdwSrc[i] | 0xff000000;

  0017a	0f 10 40 f0	 movups	 xmm0, XMMWORD PTR [eax-16]
  0017e	0f 28 d3	 movaps	 xmm2, xmm3
  00181	0f 56 dd	 orps	 xmm3, xmm5
  00184	66 0f 76 d4	 pcmpeqd xmm2, xmm4
  00188	0f 55 d6	 andnps	 xmm2, xmm6
  0018b	0f 28 ca	 movaps	 xmm1, xmm2
  0018e	0f 54 da	 andps	 xmm3, xmm2
  00191	0f 55 c8	 andnps	 xmm1, xmm0
  00194	0f 56 d9	 orps	 xmm3, xmm1

; 146  : 			else
; 147  : 				pdwDst[i] = 0;

  00197	0f 54 da	 andps	 xmm3, xmm2
  0019a	0f 11 58 f0	 movups	 XMMWORD PTR [eax-16], xmm3
  0019e	3b ca		 cmp	 ecx, edx
  001a0	7c ce		 jl	 SHORT $LL7@Invalidate

; 141  : 	{
; 142  : 		for (int i = 0; i < iclipWidth; ++i)

  001a2	8b 75 e8	 mov	 esi, DWORD PTR _pdwSrc$2$[ebp]
  001a5	89 4d d8	 mov	 DWORD PTR tv845[ebp], ecx
  001a8	3b cb		 cmp	 ecx, ebx
  001aa	7d 36		 jge	 SHORT $LN39@Invalidate
$LN38@Invalidate:
  001ac	2b f7		 sub	 esi, edi
  001ae	8d 04 8f	 lea	 eax, DWORD PTR [edi+ecx*4]
  001b1	89 75 d8	 mov	 DWORD PTR tv878[ebp], esi
  001b4	8b f3		 mov	 esi, ebx
  001b6	8b 5d d8	 mov	 ebx, DWORD PTR tv878[ebp]
  001b9	2b f1		 sub	 esi, ecx
  001bb	0f 1f 44 00 00	 npad	 5
$LL26@Invalidate:

; 143  : 		{
; 144  : 			if (pdwSrc[i])

  001c0	8b 14 18	 mov	 edx, DWORD PTR [eax+ebx]
  001c3	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  001c6	8b ca		 mov	 ecx, edx
  001c8	81 c9 00 00 00
	ff		 or	 ecx, -16777216		; ff000000H
  001ce	f7 da		 neg	 edx
  001d0	1b d2		 sbb	 edx, edx
  001d2	23 d1		 and	 edx, ecx
  001d4	89 50 fc	 mov	 DWORD PTR [eax-4], edx
  001d7	83 ee 01	 sub	 esi, 1
  001da	75 e4		 jne	 SHORT $LL26@Invalidate

; 141  : 	{
; 142  : 		for (int i = 0; i < iclipWidth; ++i)

  001dc	8b 5d d4	 mov	 ebx, DWORD PTR _iclipWidth$1$[ebp]
  001df	8b 75 e8	 mov	 esi, DWORD PTR _pdwSrc$2$[ebp]
$LN39@Invalidate:

; 148  : 		}
; 149  : 		pdwDst += dwDstWidth;

  001e2	8b 45 e4	 mov	 eax, DWORD PTR tv863[ebp]
$LN6@Invalidate:

; 150  : 		pdwSrc += dwSrcWidth;

  001e5	03 75 d0	 add	 esi, DWORD PTR tv862[ebp]
  001e8	03 f8		 add	 edi, eax
  001ea	83 6d e0 01	 sub	 DWORD PTR _iclipHeight$1$[ebp], 1
  001ee	89 75 e8	 mov	 DWORD PTR _pdwSrc$2$[ebp], esi
  001f1	0f 85 3a ff ff
	ff		 jne	 $LL4@Invalidate
$LN3@Invalidate:

; 151  : 	}
; 152  : 
; 153  : 	m_lpd3dTexture->UnlockRect(0);

  001f7	8b 45 dc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  001fa	6a 00		 push	 0
  001fc	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  001ff	50		 push	 eax
  00200	8b 08		 mov	 ecx, DWORD PTR [eax]
  00202	ff 51 44	 call	 DWORD PTR [ecx+68]
  00205	5f		 pop	 edi

; 154  : }

  00206	5e		 pop	 esi
  00207	5b		 pop	 ebx
  00208	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020b	33 cd		 xor	 ecx, ebp
  0020d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00212	8b e5		 mov	 esp, ebp
  00214	5d		 pop	 ebp
  00215	c2 04 00	 ret	 4
$LN9@Invalidate:

; 107  : 		c_rsrcRect.top > dstRect.bottom)
; 108  : 	{
; 109  : 		Tracef("InvalidateRect() - Strange rect");

  00218	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GIFEHILH@InvalidateRect?$CI?$CJ?5?9?5Strange?5rect@
$LN53@Invalidate:

; 154  : }

  0021d	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00222	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00225	83 c4 04	 add	 esp, 4
  00228	33 cd		 xor	 ecx, ebp
  0022a	5f		 pop	 edi
  0022b	5e		 pop	 esi
  0022c	5b		 pop	 ebx
  0022d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00232	8b e5		 mov	 esp, ebp
  00234	5d		 pop	 ebp
  00235	c2 04 00	 ret	 4
?InvalidateRect@CBlockTexture@@QAEXABUtagRECT@@@Z ENDP	; CBlockTexture::InvalidateRect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\BlockTexture.cpp
;	COMDAT ?Render@CBlockTexture@@QAEXHH@Z
_TEXT	SEGMENT
_isy$1$ = -108						; size = 4
_isx$1$ = -104						; size = 4
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_ix$ = 8						; size = 4
_iy$ = 12						; size = 4
?Render@CBlockTexture@@QAEXHH@Z PROC			; CBlockTexture::Render, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 16   : 	int isx = ix + m_rect.left;

  00010	8b 55 08	 mov	 edx, DWORD PTR _ix$[ebp]
  00013	0f 57 f6	 xorps	 xmm6, xmm6
  00016	53		 push	 ebx
  00017	56		 push	 esi

; 17   : 	int isy = iy + m_rect.top;
; 18   : 	int iex = ix + m_rect.left + m_dwWidth;
; 19   : 	int iey = iy + m_rect.top + m_dwHeight;
; 20   : 
; 21   : 	float su = 0.0f;
; 22   : 	float sv = 0.0f;
; 23   : 	float eu = 1.0f;

  00018	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f800000
  00020	0f 57 ed	 xorps	 xmm5, xmm5
  00023	57		 push	 edi
  00024	8b f9		 mov	 edi, ecx
  00026	0f 28 fc	 movaps	 xmm7, xmm4
  00029	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0002c	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  0002f	8d 0c 10	 lea	 ecx, DWORD PTR [eax+edx]
  00032	89 4d 98	 mov	 DWORD PTR _isx$1$[ebp], ecx
  00035	8b 4d 0c	 mov	 ecx, DWORD PTR _iy$[ebp]
  00038	8d 1c 0e	 lea	 ebx, DWORD PTR [esi+ecx]
  0003b	89 5d 94	 mov	 DWORD PTR _isy$1$[ebp], ebx
  0003e	8b 5f 2c	 mov	 ebx, DWORD PTR [edi+44]
  00041	03 d8		 add	 ebx, eax
  00043	03 da		 add	 ebx, edx
  00045	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
  00048	03 d6		 add	 edx, esi
  0004a	03 d1		 add	 edx, ecx

; 24   : 	float ev = 1.0f;
; 25   : 
; 26   : 	if (m_bClipEnable)

  0004c	83 7f 28 00	 cmp	 DWORD PTR [edi+40], 0
  00050	0f 84 10 01 00
	00		 je	 $LN10@Render

; 27   : 	{
; 28   : 		if (isx > m_clipRect.right)

  00056	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00059	39 45 98	 cmp	 DWORD PTR _isx$1$[ebp], eax
  0005c	0f 8f 22 02 00
	00		 jg	 $LN11@Render

; 29   : 			return;
; 30   : 		if (iex < m_clipRect.left)

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	3b d9		 cmp	 ebx, ecx
  00067	0f 8c 17 02 00
	00		 jl	 $LN11@Render

; 31   : 			return;
; 32   : 
; 33   : 		if (isy > m_clipRect.bottom)

  0006d	8b 75 94	 mov	 esi, DWORD PTR _isy$1$[ebp]
  00070	3b 77 24	 cmp	 esi, DWORD PTR [edi+36]
  00073	0f 8f 0b 02 00
	00		 jg	 $LN11@Render

; 34   : 			return;
; 35   : 		if (iey < m_clipRect.top)

  00079	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
  0007c	3b d6		 cmp	 edx, esi
  0007e	0f 8c 00 02 00
	00		 jl	 $LN11@Render

; 36   : 			return;
; 37   : 
; 38   : 		if (m_clipRect.left > isx)

  00084	3b 4d 98	 cmp	 ecx, DWORD PTR _isx$1$[ebp]
  00087	7e 39		 jle	 SHORT $LN45@Render

; 39   : 		{
; 40   : 			int idx = m_clipRect.left - isx;

  00089	8b c1		 mov	 eax, ecx
  0008b	2b 45 98	 sub	 eax, DWORD PTR _isx$1$[ebp]

; 41   : 			isx += idx;

  0008e	89 4d 98	 mov	 DWORD PTR _isx$1$[ebp], ecx

; 42   : 			su += float(idx) / float(m_dwWidth);

  00091	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00094	66 0f 6e e8	 movd	 xmm5, eax
  00098	8b c1		 mov	 eax, ecx
  0009a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009d	66 0f 6e c1	 movd	 xmm0, ecx
  000a1	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000a5	0f 5b ed	 cvtdq2ps xmm5, xmm5
  000a8	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000b1	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000b4	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000b8	f3 0f 5e e8	 divss	 xmm5, xmm0
  000bc	f3 0f 58 ee	 addss	 xmm5, xmm6
  000c0	eb 03		 jmp	 SHORT $LN43@Render
$LN45@Render:

; 36   : 			return;
; 37   : 
; 38   : 		if (m_clipRect.left > isx)

  000c2	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
$LN43@Render:

; 43   : 		}
; 44   : 		if (iex > m_clipRect.right)

  000c5	3b d8		 cmp	 ebx, eax
  000c7	7e 2e		 jle	 SHORT $LN8@Render

; 45   : 		{
; 46   : 			int idx = iex - m_clipRect.right;

  000c9	66 0f 6e c1	 movd	 xmm0, ecx
  000cd	2b d8		 sub	 ebx, eax

; 47   : 			iex -= idx;
; 48   : 			eu -= float(idx) / float(m_dwWidth);

  000cf	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000d3	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000d6	8b c3		 mov	 eax, ebx
  000d8	8b 5f 20	 mov	 ebx, DWORD PTR [edi+32]
  000db	66 0f 6e c8	 movd	 xmm1, eax
  000df	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  000e8	0f 5b c9	 cvtdq2ps xmm1, xmm1
  000eb	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000ef	f3 0f 5e c8	 divss	 xmm1, xmm0
  000f3	f3 0f 5c f9	 subss	 xmm7, xmm1
$LN8@Render:

; 49   : 		}
; 50   : 
; 51   : 		if (m_clipRect.top > isy)

  000f7	8b 4d 94	 mov	 ecx, DWORD PTR _isy$1$[ebp]
  000fa	3b f1		 cmp	 esi, ecx
  000fc	7e 31		 jle	 SHORT $LN44@Render

; 52   : 		{
; 53   : 			int idy = m_clipRect.top - isy;

  000fe	8b c6		 mov	 eax, esi

; 54   : 			isy += idy;

  00100	89 75 94	 mov	 DWORD PTR _isy$1$[ebp], esi
  00103	2b c1		 sub	 eax, ecx
  00105	66 0f 6e c8	 movd	 xmm1, eax

; 55   : 			sv += float(idy) / float(m_dwHeight);

  00109	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0010c	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0010f	66 0f 6e c0	 movd	 xmm0, eax
  00113	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00117	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0011a	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00123	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00127	f3 0f 5e c8	 divss	 xmm1, xmm0
  0012b	f3 0f 58 f1	 addss	 xmm6, xmm1
$LN44@Render:

; 56   : 		}
; 57   : 		if (iey > m_clipRect.bottom)

  0012f	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
  00132	3b d1		 cmp	 edx, ecx
  00134	7e 30		 jle	 SHORT $LN10@Render

; 58   : 		{
; 59   : 			int idy = iey - m_clipRect.bottom;

  00136	2b d1		 sub	 edx, ecx
  00138	8b c2		 mov	 eax, edx

; 60   : 			iey -= idy;

  0013a	8b d1		 mov	 edx, ecx
  0013c	66 0f 6e c8	 movd	 xmm1, eax

; 61   : 			ev -= float(idy) / float(m_dwHeight);

  00140	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00143	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00146	66 0f 6e c0	 movd	 xmm0, eax
  0014a	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0014e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00151	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0015a	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0015e	f3 0f 5e c8	 divss	 xmm1, xmm0
  00162	f3 0f 5c e1	 subss	 xmm4, xmm1
$LN10@Render:

; 62   : 		}
; 63   : 	}
; 64   : 
; 65   : 	TPDTVertex vertices[4];
; 66   : 	vertices[0].position.x	= isx - 0.5f;
; 67   : 	vertices[0].position.y	= isy - 0.5f;
; 68   : 	vertices[0].position.z	= 0.0f;
; 69   : 	vertices[0].texCoord	= TTextureCoordinate(su, sv);
; 70   : 	vertices[0].diffuse		= 0xffffffff;
; 71   : 
; 72   : 	vertices[1].position.x	= iex - 0.5f;
; 73   : 	vertices[1].position.y	= isy - 0.5f;
; 74   : 	vertices[1].position.z	= 0.0f;
; 75   : 	vertices[1].texCoord	= TTextureCoordinate(eu, sv);
; 76   : 	vertices[1].diffuse		= 0xffffffff;
; 77   : 
; 78   : 	vertices[2].position.x	= isx - 0.5f;
; 79   : 	vertices[2].position.y	= iey - 0.5f;
; 80   : 	vertices[2].position.z	= 0.0f;
; 81   : 	vertices[2].texCoord	= TTextureCoordinate(su, ev);
; 82   : 	vertices[2].diffuse		= 0xffffffff;
; 83   : 
; 84   : 	vertices[3].position.x	= iex - 0.5f;
; 85   : 	vertices[3].position.y	= iey - 0.5f;
; 86   : 	vertices[3].position.z	= 0.0f;
; 87   : 	vertices[3].texCoord	= TTextureCoordinate(eu, ev);
; 88   : 	vertices[3].diffuse		= 0xffffffff;
; 89   : 
; 90   : 	if (CGraphicBase::SetPDTStream(vertices, 4))

  00166	66 0f 6e 45 94	 movd	 xmm0, DWORD PTR _isy$1$[ebp]
  0016b	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  0016e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  00176	66 0f 6e 55 98	 movd	 xmm2, DWORD PTR _isx$1$[ebp]
  0017b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0017e	6a 04		 push	 4
  00180	50		 push	 eax
  00181	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+8], 0
  00188	c7 45 a8 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+12], -1
  0018f	66 0f 6e cb	 movd	 xmm1, ebx
  00193	f3 0f 5c c3	 subss	 xmm0, xmm3
  00197	f3 0f 11 6d ac	 movss	 DWORD PTR _vertices$[ebp+16], xmm5
  0019c	0f 5b d2	 cvtdq2ps xmm2, xmm2
  0019f	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+32], 0
  001a6	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+36], -1
  001ad	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+56], 0
  001b4	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+60], -1
  001bb	f3 0f 11 45 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm0
  001c0	f3 0f 11 45 b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm0
  001c5	f3 0f 5c d3	 subss	 xmm2, xmm3
  001c9	66 0f 6e c2	 movd	 xmm0, edx
  001cd	0f 5b c9	 cvtdq2ps xmm1, xmm1
  001d0	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+80], 0
  001d7	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+84], -1
  001de	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001e1	f3 0f 5c cb	 subss	 xmm1, xmm3
  001e5	f3 0f 11 55 9c	 movss	 DWORD PTR _vertices$[ebp], xmm2
  001ea	f3 0f 5c c3	 subss	 xmm0, xmm3
  001ee	f3 0f 11 75 b0	 movss	 DWORD PTR _vertices$[ebp+20], xmm6
  001f3	f3 0f 11 7d c4	 movss	 DWORD PTR _vertices$[ebp+40], xmm7
  001f8	f3 0f 11 75 c8	 movss	 DWORD PTR _vertices$[ebp+44], xmm6
  001fd	f3 0f 11 55 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm2
  00202	f3 0f 11 4d b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm1
  00207	f3 0f 11 45 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm0
  0020c	f3 0f 11 6d dc	 movss	 DWORD PTR _vertices$[ebp+64], xmm5
  00211	f3 0f 11 65 e0	 movss	 DWORD PTR _vertices$[ebp+68], xmm4
  00216	f3 0f 11 4d e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm1
  0021b	f3 0f 11 45 e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm0
  00220	f3 0f 11 7d f4	 movss	 DWORD PTR _vertices$[ebp+88], xmm7
  00225	f3 0f 11 65 f8	 movss	 DWORD PTR _vertices$[ebp+92], xmm4
  0022a	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  0022f	83 c4 08	 add	 esp, 8
  00232	84 c0		 test	 al, al
  00234	74 4e		 je	 SHORT $LN11@Render

; 91   : 	{
; 92   : 		CGraphicBase::SetDefaultIndexBuffer(CGraphicBase::DEFAULT_IB_FILL_RECT);

  00236	6a 05		 push	 5
  00238	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 93   : 
; 94   : 		STATEMANAGER.SetTexture(0, m_lpd3dTexture);

  0023d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00243	83 c4 04	 add	 esp, 4
  00246	ff 77 34	 push	 DWORD PTR [edi+52]
  00249	6a 00		 push	 0
  0024b	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 95   : 		STATEMANAGER.SetTexture(1, NULL);

  00250	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00256	6a 00		 push	 0
  00258	6a 01		 push	 1
  0025a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 96   : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_TEX1|D3DFVF_DIFFUSE);

  0025f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00265	68 42 01 00 00	 push	 322			; 00000142H
  0026a	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 97   : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 4, 0, 2);

  0026f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00275	6a 02		 push	 2
  00277	6a 00		 push	 0
  00279	6a 04		 push	 4
  0027b	6a 00		 push	 0
  0027d	6a 04		 push	 4
  0027f	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN11@Render:

; 98   : 	}
; 99   : }

  00284	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00287	5f		 pop	 edi
  00288	5e		 pop	 esi
  00289	33 cd		 xor	 ecx, ebp
  0028b	5b		 pop	 ebx
  0028c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00291	8b e5		 mov	 esp, ebp
  00293	5d		 pop	 ebp
  00294	c2 08 00	 ret	 8
?Render@CBlockTexture@@QAEXHH@Z ENDP			; CBlockTexture::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\BlockTexture.cpp
;	COMDAT ?SetClipRect@CBlockTexture@@QAEXABUtagRECT@@@Z
_TEXT	SEGMENT
_c_rRect$ = 8						; size = 4
?SetClipRect@CBlockTexture@@QAEXABUtagRECT@@@Z PROC	; CBlockTexture::SetClipRect, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 10   : 	m_bClipEnable = TRUE;
; 11   : 	m_clipRect = c_rRect;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rRect$[ebp]
  00006	c7 41 28 01 00
	00 00		 mov	 DWORD PTR [ecx+40], 1
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 41 18	 movups	 XMMWORD PTR [ecx+24], xmm0

; 12   : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?SetClipRect@CBlockTexture@@QAEXABUtagRECT@@@Z ENDP	; CBlockTexture::SetClipRect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\BlockTexture.cpp
;	COMDAT ?Create@CBlockTexture@@QAE_NPAVCGraphicDib@@ABUtagRECT@@KK@Z
_TEXT	SEGMENT
_pDIB$ = 8						; size = 4
_c_rRect$ = 12						; size = 4
_dwWidth$ = 16						; size = 4
_dwHeight$ = 20						; size = 4
?Create@CBlockTexture@@QAE_NPAVCGraphicDib@@ABUtagRECT@@KK@Z PROC ; CBlockTexture::Create, COMDAT
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 158  : 	if (FAILED(ms_lpd3dDevice->CreateTexture(dwWidth, dwHeight, 0, 0, D3DFMT_A8R8G8B8, D3DPOOL_MANAGED, &m_lpd3dTexture)))

  00005	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0000b	8b 5d 14	 mov	 ebx, DWORD PTR _dwHeight$[ebp]
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	8b 50 50	 mov	 edx, DWORD PTR [eax+80]
  00016	8d 47 34	 lea	 eax, DWORD PTR [edi+52]
  00019	50		 push	 eax
  0001a	6a 01		 push	 1
  0001c	6a 15		 push	 21			; 00000015H
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	53		 push	 ebx
  00023	ff 75 10	 push	 DWORD PTR _dwWidth$[ebp]
  00026	56		 push	 esi
  00027	ff d2		 call	 edx
  00029	85 c0		 test	 eax, eax
  0002b	79 1a		 jns	 SHORT $LN2@Create

; 159  : 	{
; 160  : 		Tracef("Failed to create block texture %u, %u\n", dwWidth, dwHeight);

  0002d	53		 push	 ebx
  0002e	ff 75 10	 push	 DWORD PTR _dwWidth$[ebp]
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GNLBGAOD@Failed?5to?5create?5block?5texture?5@
  00036	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 161  : 		return false;

  0003e	32 c0		 xor	 al, al
  00040	5f		 pop	 edi

; 171  : }

  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	5d		 pop	 ebp
  00044	c2 10 00	 ret	 16			; 00000010H
$LN2@Create:

; 162  : 	}
; 163  : 
; 164  : 	m_pDIB = pDIB;

  00047	8b 45 08	 mov	 eax, DWORD PTR _pDIB$[ebp]
  0004a	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 165  : 	m_rect = c_rRect;

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _c_rRect$[ebp]
  00050	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 166  : 	m_dwWidth = dwWidth;

  00053	8b 45 10	 mov	 eax, DWORD PTR _dwWidth$[ebp]
  00056	89 47 2c	 mov	 DWORD PTR [edi+44], eax

; 167  : 	m_dwHeight = dwHeight;
; 168  : 	m_bClipEnable = FALSE;
; 169  : 
; 170  : 	return true;

  00059	b0 01		 mov	 al, 1
  0005b	89 5f 30	 mov	 DWORD PTR [edi+48], ebx
  0005e	0f 11 47 08	 movups	 XMMWORD PTR [edi+8], xmm0
  00062	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  00069	5f		 pop	 edi

; 171  : }

  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	5d		 pop	 ebp
  0006d	c2 10 00	 ret	 16			; 00000010H
?Create@CBlockTexture@@QAE_NPAVCGraphicDib@@ABUtagRECT@@KK@Z ENDP ; CBlockTexture::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\BlockTexture.cpp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\BlockTexture.cpp
;	COMDAT ??1CBlockTexture@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CBlockTexture@@UAE@XZ PROC				; CBlockTexture::~CBlockTexture, COMDAT
; _this$ = ecx

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CBlockTexture@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CBlockTexture@@6B@
; File C:\Marty 5.5\Src-Client\Client\eterbase\Stl.h

; 156  : 	if (!rpObject)

  0002b	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0002e	85 c9		 test	 ecx, ecx
  00030	74 06		 je	 SHORT $LN4@CBlockText

; 157  : 		return;
; 158  : 
; 159  : 	rpObject->Release();

  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	51		 push	 ecx
  00035	ff 50 08	 call	 DWORD PTR [eax+8]
$LN4@CBlockText:
; File C:\Marty 5.5\Src-Client\Client\EterLib\BlockTexture.cpp

; 183  : }

  00038	8b ce		 mov	 ecx, esi
  0003a	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  00041	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	5e		 pop	 esi
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CBlockTexture@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CBlockTexture@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CBlockTexture@@UAE@XZ ENDP				; CBlockTexture::~CBlockTexture
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\BlockTexture.cpp
;	COMDAT ??0CBlockTexture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBlockTexture@@QAE@XZ PROC				; CBlockTexture::CBlockTexture, COMDAT
; _this$ = ecx

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CBlockTexture@@6B@

; 175  : 	m_pDIB = NULL;
; 176  : 	m_lpd3dTexture = NULL;
; 177  : }

  00015	8b c6		 mov	 eax, esi
  00017	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001e	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  00025	5e		 pop	 esi
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0CBlockTexture@@QAE@XZ ENDP				; CBlockTexture::CBlockTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0SPDTVertex@@QAE@XZ
_TEXT	SEGMENT
??0SPDTVertex@@QAE@XZ PROC				; SPDTVertex::SPDTVertex, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SPDTVertex@@QAE@XZ ENDP				; SPDTVertex::SPDTVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
