; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\GrpLightManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_fCurTime@CLightBase@@1MA			; CLightBase::ms_fCurTime
_BSS	SEGMENT
?ms_fCurTime@CLightBase@@1MA DD 01H DUP (?)		; CLightBase::ms_fCurTime
_BSS	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1CLightBase@@UAE@XZ				; CLightBase::~CLightBase
PUBLIC	??_GCLightBase@@UAEPAXI@Z			; CLightBase::`scalar deleting destructor'
PUBLIC	??0CLight@@QAE@XZ				; CLight::CLight
PUBLIC	??1CLight@@UAE@XZ				; CLight::~CLight
PUBLIC	?Initialize@CLight@@QAEXXZ			; CLight::Initialize
PUBLIC	?Clear@CLight@@QAEXXZ				; CLight::Clear
PUBLIC	?Update@CLight@@QAEXXZ				; CLight::Update
PUBLIC	?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z	; CLight::SetParameter
PUBLIC	?SetDistance@CLight@@QAEXM@Z			; CLight::SetDistance
PUBLIC	?SetDeviceLight@CLight@@QAEXH@Z			; CLight::SetDeviceLight
PUBLIC	?SetDiffuseColor@CLight@@QAEXMMMM@Z		; CLight::SetDiffuseColor
PUBLIC	?SetAmbientColor@CLight@@QAEXMMMM@Z		; CLight::SetAmbientColor
PUBLIC	?SetRange@CLight@@QAEXM@Z			; CLight::SetRange
PUBLIC	?SetPosition@CLight@@QAEXMMM@Z			; CLight::SetPosition
PUBLIC	?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ	; CLight::GetPosition
PUBLIC	?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ; CLight::BlendDiffuseColor
PUBLIC	?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ; CLight::BlendAmbientColor
PUBLIC	?BlendRange@CLight@@QAEXMMM@Z			; CLight::BlendRange
PUBLIC	??_GCLight@@UAEPAXI@Z				; CLight::`scalar deleting destructor'
PUBLIC	??1?$CSingleton@VCLightManager@@@@UAE@XZ	; CSingleton<CLightManager>::~CSingleton<CLightManager>
PUBLIC	??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z	; CSingleton<CLightManager>::`scalar deleting destructor'
PUBLIC	??0CLightManager@@QAE@XZ			; CLightManager::CLightManager
PUBLIC	??1CLightManager@@UAE@XZ			; CLightManager::~CLightManager
PUBLIC	?Destroy@CLightManager@@QAEXXZ			; CLightManager::Destroy
PUBLIC	?Initialize@CLightManager@@QAEXXZ		; CLightManager::Initialize
PUBLIC	?Update@CLightManager@@QAEXXZ			; CLightManager::Update
PUBLIC	?FlushLight@CLightManager@@QAEXXZ		; CLightManager::FlushLight
PUBLIC	?RestoreLight@CLightManager@@QAEXXZ		; CLightManager::RestoreLight
PUBLIC	?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z ; CLightManager::RegisterLight
PUBLIC	?GetLight@CLightManager@@QAEPAVCLight@@K@Z	; CLightManager::GetLight
PUBLIC	?DeleteLight@CLightManager@@QAEXK@Z		; CLightManager::DeleteLight
PUBLIC	?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z ; CLightManager::SetCenterPosition
PUBLIC	?SetLimitLightCount@CLightManager@@QAEXK@Z	; CLightManager::SetLimitLightCount
PUBLIC	?SetSkipIndex@CLightManager@@QAEXK@Z		; CLightManager::SetSkipIndex
PUBLIC	??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
PUBLIC	?_Xlen@?$deque@KV?$allocator@K@std@@@std@@CAXXZ	; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
PUBLIC	?_Growmap@?$deque@KV?$allocator@K@std@@@std@@AAEXI@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap
PUBLIC	?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Insert_node
PUBLIC	?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength
PUBLIC	?NewLightID@CLightManager@@IAEKXZ		; CLightManager::NewLightID
PUBLIC	?ReleaseLightID@CLightManager@@IAEXK@Z		; CLightManager::ReleaseLightID
PUBLIC	??1?$CDynamicPool@VCLight@@@@UAE@XZ		; CDynamicPool<CLight>::~CDynamicPool<CLight>
PUBLIC	??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z		; CDynamicPool<CLight>::`scalar deleting destructor'
PUBLIC	??_GCLightManager@@UAEPAXI@Z			; CLightManager::`scalar deleting destructor'
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
PUBLIC	??$_Assign_counted_range@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEXPAPAVCLight@@I@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Assign_counted_range<CLight * *>
PUBLIC	??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort_unchecked<CLight * *,LightComp>
PUBLIC	??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
PUBLIC	??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z ; std::_Copy_memmove_n<CLight * *,CLight * *>
PUBLIC	??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>
PUBLIC	??$_Copy_memmove_tail@PAPAVCLight@@@std@@YAPAPAVCLight@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CLight * *>
PUBLIC	??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z	; std::_Zero_range<unsigned long * *>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ; std::_Pop_heap_hole_by_index<CLight * *,CLight *,LightComp>
PUBLIC	??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ; std::_Guess_median_unchecked<CLight * *,LightComp>
PUBLIC	??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_memmove<CLight * *,CLight * *>
PUBLIC	??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z ; std::_Copy_memmove<unsigned long * *,unsigned long * *>
PUBLIC	??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_backward_memmove<CLight * *,CLight * *>
PUBLIC	??$_Copy_memmove_tail@PAPAK@std@@YAPAPAKQBDQAPAKII@Z ; std::_Copy_memmove_tail<unsigned long * *>
PUBLIC	??_ECLight@@W3AEPAXI@Z				; [thunk]:CLight::`vector deleting destructor'
PUBLIC	??_ECLightManager@@W3AEPAXI@Z			; [thunk]:CLightManager::`vector deleting destructor'
PUBLIC	??_ECLightManager@@W7AEPAXI@Z			; [thunk]:CLightManager::`vector deleting destructor'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_7CLightBase@@6B@				; CLightBase::`vftable'
PUBLIC	??_7CLight@@6BCGraphicBase@@@			; CLight::`vftable'
PUBLIC	??_7CLight@@6BCLightBase@@@			; CLight::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A ; CSingleton<CLightManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCLightManager@@@@6B@		; CSingleton<CLightManager>::`vftable'
PUBLIC	??_7?$CDynamicPool@VCLight@@@@6B@		; CDynamicPool<CLight>::`vftable'
PUBLIC	??_7CLightManager@@6BCGraphicBase@@@		; CLightManager::`vftable'
PUBLIC	??_7CLightManager@@6BCLightBase@@@		; CLightManager::`vftable'
PUBLIC	??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@ ; CLightManager::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4CLightBase@@6B@				; CLightBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLightBase@@@8				; CLightBase `RTTI Type Descriptor'
PUBLIC	??_R3CLightBase@@8				; CLightBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLightBase@@8				; CLightBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLightBase@@8			; CLightBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLight@@6BCGraphicBase@@@			; CLight::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLight@@@8				; CLight `RTTI Type Descriptor'
PUBLIC	??_R3CLight@@8					; CLight::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLight@@8					; CLight::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLight@@8				; CLight::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CLightBase@@8			; CLightBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R4CLight@@6BCLightBase@@@			; CLight::`RTTI Complete Object Locator'
PUBLIC	??_R4CLightManager@@6BCGraphicBase@@@		; CLightManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLightManager@@@8			; CLightManager `RTTI Type Descriptor'
PUBLIC	??_R3CLightManager@@8				; CLightManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLightManager@@8				; CLightManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLightManager@@8			; CLightManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8	; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCLightManager@@@@@8	; CSingleton<CLightManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCLightManager@@@@8		; CSingleton<CLightManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCLightManager@@@@8		; CSingleton<CLightManager>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8	; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLightManager@@6BCLightBase@@@		; CLightManager::`RTTI Complete Object Locator'
PUBLIC	??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@ ; CLightManager::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CSingleton@VCLightManager@@@@6B@		; CSingleton<CLightManager>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CDynamicPool@VCLight@@@@6B@		; CDynamicPool<CLight>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCLight@@@@@8		; CDynamicPool<CLight> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCLight@@@@8		; CDynamicPool<CLight>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCLight@@@@8		; CDynamicPool<CLight>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8	; CDynamicPool<CLight>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	??0CGraphicBase@@QAE@XZ:PROC			; CGraphicBase::CGraphicBase
EXTRN	??1CGraphicBase@@UAE@XZ:PROC			; CGraphicBase::~CGraphicBase
EXTRN	??_ECLightBase@@UAEPAXI@Z:PROC			; CLightBase::`vector deleting destructor'
EXTRN	??_ECLight@@UAEPAXI@Z:PROC			; CLight::`vector deleting destructor'
EXTRN	??_E?$CSingleton@VCLightManager@@@@UAEPAXI@Z:PROC ; CSingleton<CLightManager>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCLight@@@@UAEPAXI@Z:PROC	; CDynamicPool<CLight>::`vector deleting destructor'
EXTRN	??_ECLightManager@@UAEPAXI@Z:PROC		; CLightManager::`vector deleting destructor'
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A DD 01H DUP (?) ; CSingleton<CLightManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCLight@@@@@8 ; CDynamicPool<CLight>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCLight@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCLight@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCLight@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8 ; CDynamicPool<CLight>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCLight@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCLight@@@@8 DD 00H			; CDynamicPool<CLight>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCLight@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCLight@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCLight@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CLight> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCLight@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCLight@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCLight@@@@6B@ DD 00H		; CDynamicPool<CLight>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCLight@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCLight@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CSingleton@VCLightManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCLightManager@@@@6B@ DD 00H		; CSingleton<CLightManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCLightManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@
rdata$r	SEGMENT
??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@ DD 00H ; CLightManager::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCLightManager@@@8
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R4CLightManager@@6BCLightBase@@@
rdata$r	SEGMENT
??_R4CLightManager@@6BCLightBase@@@ DD 00H		; CLightManager::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCLightManager@@@8
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCLightManager@@@@@8 ; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCLightManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8 ; CSingleton<CLightManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCLightManager@@@@8 DD 00H		; CSingleton<CLightManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCLightManager@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCLightManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CLightManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCLightManager@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCLightManager@@@@@8 ; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLightManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLightManager@@8 DD FLAT:??_R0?AVCLightManager@@@8 ; CLightManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CLightManager@@8
rdata$r	SEGMENT
??_R2CLightManager@@8 DD FLAT:??_R1A@?0A@EA@CLightManager@@8 ; CLightManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
	DD	FLAT:??_R13?0A@EA@CLightBase@@8
	DD	FLAT:??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CLightManager@@8
rdata$r	SEGMENT
??_R3CLightManager@@8 DD 00H				; CLightManager::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLightManager@@@8
data$rs	SEGMENT
??_R0?AVCLightManager@@@8 DD FLAT:??_7type_info@@6B@	; CLightManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLightManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CLightManager@@6BCGraphicBase@@@
rdata$r	SEGMENT
??_R4CLightManager@@6BCGraphicBase@@@ DD 00H		; CLightManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLightManager@@@8
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R4CLight@@6BCLightBase@@@
rdata$r	SEGMENT
??_R4CLight@@6BCLightBase@@@ DD 00H			; CLight::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCLight@@@8
	DD	FLAT:??_R3CLight@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@CLightBase@@8
rdata$r	SEGMENT
??_R13?0A@EA@CLightBase@@8 DD FLAT:??_R0?AVCLightBase@@@8 ; CLightBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLight@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLight@@8 DD FLAT:??_R0?AVCLight@@@8	; CLight::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLight@@8
rdata$r	ENDS
;	COMDAT ??_R2CLight@@8
rdata$r	SEGMENT
??_R2CLight@@8 DD FLAT:??_R1A@?0A@EA@CLight@@8		; CLight::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
	DD	FLAT:??_R13?0A@EA@CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CLight@@8
rdata$r	SEGMENT
??_R3CLight@@8 DD 00H					; CLight::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CLight@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLight@@@8
data$rs	SEGMENT
??_R0?AVCLight@@@8 DD FLAT:??_7type_info@@6B@		; CLight `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLight@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CLight@@6BCGraphicBase@@@
rdata$r	SEGMENT
??_R4CLight@@6BCGraphicBase@@@ DD 00H			; CLight::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLight@@@8
	DD	FLAT:??_R3CLight@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLightBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLightBase@@8 DD FLAT:??_R0?AVCLightBase@@@8 ; CLightBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CLightBase@@8
rdata$r	SEGMENT
??_R2CLightBase@@8 DD FLAT:??_R1A@?0A@EA@CLightBase@@8	; CLightBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CLightBase@@8
rdata$r	SEGMENT
??_R3CLightBase@@8 DD 00H				; CLightBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLightBase@@@8
data$rs	SEGMENT
??_R0?AVCLightBase@@@8 DD FLAT:??_7type_info@@6B@	; CLightBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLightBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CLightBase@@6B@
rdata$r	SEGMENT
??_R4CLightBase@@6B@ DD 00H				; CLightBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLightBase@@@8
	DD	FLAT:??_R3CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@
CONST	SEGMENT
??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@ DD FLAT:??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@ ; CLightManager::`vftable'
	DD	FLAT:??_ECLightManager@@W7AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLightManager@@6BCLightBase@@@
CONST	SEGMENT
??_7CLightManager@@6BCLightBase@@@ DD FLAT:??_R4CLightManager@@6BCLightBase@@@ ; CLightManager::`vftable'
	DD	FLAT:??_ECLightManager@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLightManager@@6BCGraphicBase@@@
CONST	SEGMENT
??_7CLightManager@@6BCGraphicBase@@@ DD FLAT:??_R4CLightManager@@6BCGraphicBase@@@ ; CLightManager::`vftable'
	DD	FLAT:??_ECLightManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCLight@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCLight@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCLight@@@@6B@ ; CDynamicPool<CLight>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCLight@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCLightManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCLightManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCLightManager@@@@6B@ ; CSingleton<CLightManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCLightManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLight@@6BCLightBase@@@
CONST	SEGMENT
??_7CLight@@6BCLightBase@@@ DD FLAT:??_R4CLight@@6BCLightBase@@@ ; CLight::`vftable'
	DD	FLAT:??_ECLight@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLight@@6BCGraphicBase@@@
CONST	SEGMENT
??_7CLight@@6BCGraphicBase@@@ DD FLAT:??_R4CLight@@6BCGraphicBase@@@ ; CLight::`vftable'
	DD	FLAT:??_ECLight@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLightBase@@6B@
CONST	SEGMENT
??_7CLightBase@@6B@ DD FLAT:??_R4CLightBase@@6B@	; CLightBase::`vftable'
	DD	FLAT:??_ECLightBase@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABK$$V@?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@_N@1@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABK$$V@?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@_N@1@ABK@Z$2
__ehfuncinfo$??$_Try_emplace@ABK$$V@?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@_N@1@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABK$$V@?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@_N@1@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z$2
__ehfuncinfo$??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z$3
__ehfuncinfo$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLightManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$3
__ehfuncinfo$??0CLightManager@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CLightManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CLight@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECLightManager@@W7AEPAXI@Z
_TEXT	SEGMENT
??_ECLightManager@@W7AEPAXI@Z PROC			; [thunk]:CLightManager::`vector deleting destructor', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??_ECLightManager@@UAEPAXI@Z
??_ECLightManager@@W7AEPAXI@Z ENDP			; [thunk]:CLightManager::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECLightManager@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECLightManager@@W3AEPAXI@Z PROC			; [thunk]:CLightManager::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_ECLightManager@@UAEPAXI@Z
??_ECLightManager@@W3AEPAXI@Z ENDP			; [thunk]:CLightManager::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECLight@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECLight@@W3AEPAXI@Z PROC				; [thunk]:CLight::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_ECLight@@UAEPAXI@Z
??_ECLight@@W3AEPAXI@Z ENDP				; [thunk]:CLight::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAK@std@@YAPAPAKQBDQAPAKII@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAK@std@@YAPAPAKQBDQAPAKII@Z PROC ; std::_Copy_memmove_tail<unsigned long * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAK@std@@YAPAPAKQBDQAPAKII@Z ENDP ; std::_Copy_memmove_tail<unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z PROC ; std::_Copy_backward_memmove<CLight * *,CLight * *>, COMDAT

; 5099 : _CtgIt2 _Copy_backward_memmove(_CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5100 :     // implement copy_backward-like function as memmove
; 5101 :     const auto _First_ptr = _STD _To_address(_First);
; 5102 :     const auto _Last_ptr  = _STD _To_address(_Last);
; 5103 :     const auto _Dest_ptr  = _STD _To_address(_Dest);
; 5104 :     const auto _First_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 5105 :     const auto _Last_ch   = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 5106 :     const auto _Dest_ch   = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 5107 :     const auto _Count     = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b c8		 sub	 ecx, eax

; 5108 :     const auto _Result    = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

  0000b	51		 push	 ecx
  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00010	2b c1		 sub	 eax, ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5109 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 5110 :         return static_cast<_CtgIt2>(_Result);
; 5111 :     } else {
; 5112 :         return _Dest - static_cast<_Iter_diff_t<_CtgIt2>>(_Last_ptr - _First_ptr);
; 5113 :     }
; 5114 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ENDP ; std::_Copy_backward_memmove<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z PROC	; std::_Copy_memmove<unsigned long * *,unsigned long * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAK@std@@YAPAPAKQBDQAPAKII@Z ; std::_Copy_memmove_tail<unsigned long * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z ENDP	; std::_Copy_memmove<unsigned long * *,unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CLight * *,CLight * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCLight@@@std@@YAPAPAVCLight@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CLight * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z
_TEXT	SEGMENT
tv867 = -8						; size = 4
tv880 = -8						; size = 4
tv890 = -8						; size = 4
tv850 = -4						; size = 4
tv851 = -4						; size = 4
tv856 = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
tv843 = 16						; size = 4
tv844 = 16						; size = 4
tv845 = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z PROC ; std::_Guess_median_unchecked<CLight * *,LightComp>, COMDAT

; 8251 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8252 :     // sort median element to middle
; 8253 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 8254 :     const _Diff _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi

; 8255 :     if (40 < _Count) { // Tukey's ninther

  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  00010	8b c7		 mov	 eax, edi
  00012	2b c1		 sub	 eax, ecx
  00014	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00019	c1 f8 02	 sar	 eax, 2
  0001c	83 f8 28	 cmp	 eax, 40			; 00000028H
  0001f	0f 8e 36 01 00
	00		 jle	 $LN2@Guess_medi

; 8256 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

  00025	40		 inc	 eax
  00026	c1 f8 03	 sar	 eax, 3
  00029	53		 push	 ebx

; 8257 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 8258 :         _STD _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  0002a	8d 1c c5 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*8]
  00031	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]
  00038	89 5d f8	 mov	 DWORD PTR tv867[ebp], ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0003b	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0003e	0f 2f 40 78	 comiss	 xmm0, DWORD PTR [eax+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8237 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00042	76 05		 jbe	 SHORT $LN13@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  00044	89 34 0a	 mov	 DWORD PTR [edx+ecx], esi

; 141  :     _Right   = _STD move(_Tmp);

  00047	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00049	8b 34 0a	 mov	 esi, DWORD PTR [edx+ecx]
  0004c	8b 04 0b	 mov	 eax, DWORD PTR [ebx+ecx]
  0004f	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00054	0f 2f 40 78	 comiss	 xmm0, DWORD PTR [eax+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8241 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00058	76 18		 jbe	 SHORT $LN23@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0005a	89 34 0b	 mov	 DWORD PTR [ebx+ecx], esi

; 141  :     _Right   = _STD move(_Tmp);

  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00060	8b 31		 mov	 esi, DWORD PTR [ecx]
  00062	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00067	0f 2f 40 78	 comiss	 xmm0, DWORD PTR [eax+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8244 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0006b	76 05		 jbe	 SHORT $LN23@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0006d	89 34 0a	 mov	 DWORD PTR [edx+ecx], esi

; 141  :     _Right   = _STD move(_Tmp);

  00070	89 01		 mov	 DWORD PTR [ecx], eax
$LN23@Guess_medi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8259 :         _STD _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00072	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00075	8b f0		 mov	 esi, eax
  00077	2b f2		 sub	 esi, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00079	8b 18		 mov	 ebx, DWORD PTR [eax]
  0007b	8b 3e		 mov	 edi, DWORD PTR [esi]
  0007d	f3 0f 10 47 78	 movss	 xmm0, DWORD PTR [edi+120]
  00082	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8237 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00086	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  00089	76 06		 jbe	 SHORT $LN33@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	89 08		 mov	 DWORD PTR [eax], ecx

; 141  :     _Right   = _STD move(_Tmp);

  0008f	89 1e		 mov	 DWORD PTR [esi], ebx
$LN33@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	8b 1c 02	 mov	 ebx, DWORD PTR [edx+eax]
  00096	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  0009b	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8241 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  0009f	76 1d		 jbe	 SHORT $LN43@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  000a1	8b f9		 mov	 edi, ecx
  000a3	89 3c 02	 mov	 DWORD PTR [edx+eax], edi

; 141  :     _Right   = _STD move(_Tmp);

  000a6	89 18		 mov	 DWORD PTR [eax], ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000a8	8b 3e		 mov	 edi, DWORD PTR [esi]
  000aa	f3 0f 10 47 78	 movss	 xmm0, DWORD PTR [edi+120]
  000af	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8244 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000b3	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  000b6	76 06		 jbe	 SHORT $LN43@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  000b8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ba	89 08		 mov	 DWORD PTR [eax], ecx

; 141  :     _Right   = _STD move(_Tmp);

  000bc	89 1e		 mov	 DWORD PTR [esi], ebx
$LN43@Guess_medi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8260 :         _STD _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  000be	8b df		 mov	 ebx, edi
  000c0	8b f7		 mov	 esi, edi
  000c2	2b 5d f8	 sub	 ebx, DWORD PTR tv867[ebp]
  000c5	2b f2		 sub	 esi, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000c7	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000c9	8b 06		 mov	 eax, DWORD PTR [esi]
  000cb	89 45 f8	 mov	 DWORD PTR tv880[ebp], eax
  000ce	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  000d3	0f 2f 40 78	 comiss	 xmm0, DWORD PTR [eax+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8237 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000d7	76 06		 jbe	 SHORT $LN53@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  000d9	89 0e		 mov	 DWORD PTR [esi], ecx

; 141  :     _Right   = _STD move(_Tmp);

  000db	8b c8		 mov	 ecx, eax
  000dd	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN53@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000df	8b 06		 mov	 eax, DWORD PTR [esi]
  000e1	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000e3	89 4d f8	 mov	 DWORD PTR tv890[ebp], ecx
  000e6	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  000eb	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8241 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  000ef	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  000f2	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  000f5	76 22		 jbe	 SHORT $LN63@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  000f7	8b 06		 mov	 eax, DWORD PTR [esi]
  000f9	89 07		 mov	 DWORD PTR [edi], eax

; 141  :     _Right   = _STD move(_Tmp);

  000fb	8b 7d f8	 mov	 edi, DWORD PTR tv890[ebp]
  000fe	89 3e		 mov	 DWORD PTR [esi], edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00100	8b 03		 mov	 eax, DWORD PTR [ebx]
  00102	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00107	0f 2f 47 78	 comiss	 xmm0, DWORD PTR [edi+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8244 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0010b	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  0010e	76 09		 jbe	 SHORT $LN63@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  00110	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00112	89 0e		 mov	 DWORD PTR [esi], ecx
  00114	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 141  :     _Right   = _STD move(_Tmp);

  00117	89 3b		 mov	 DWORD PTR [ebx], edi
$LN63@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00119	8b 1c 0a	 mov	 ebx, DWORD PTR [edx+ecx]
  0011c	8b 38		 mov	 edi, DWORD PTR [eax]
  0011e	f3 0f 10 43 78	 movss	 xmm0, DWORD PTR [ebx+120]
  00123	0f 2f 47 78	 comiss	 xmm0, DWORD PTR [edi+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8237 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00127	76 05		 jbe	 SHORT $LN73@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  00129	89 18		 mov	 DWORD PTR [eax], ebx

; 141  :     _Right   = _STD move(_Tmp);

  0012b	89 3c 0a	 mov	 DWORD PTR [edx+ecx], edi
$LN73@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0012e	8b 18		 mov	 ebx, DWORD PTR [eax]
  00130	8b 3e		 mov	 edi, DWORD PTR [esi]
  00132	f3 0f 10 43 78	 movss	 xmm0, DWORD PTR [ebx+120]
  00137	0f 2f 47 78	 comiss	 xmm0, DWORD PTR [edi+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8241 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  0013b	76 17		 jbe	 SHORT $LN121@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0013d	89 1e		 mov	 DWORD PTR [esi], ebx

; 141  :     _Right   = _STD move(_Tmp);

  0013f	89 38		 mov	 DWORD PTR [eax], edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00141	8b 34 0a	 mov	 esi, DWORD PTR [edx+ecx]
  00144	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00149	0f 2f 47 78	 comiss	 xmm0, DWORD PTR [edi+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8244 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0014d	76 05		 jbe	 SHORT $LN121@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0014f	89 30		 mov	 DWORD PTR [eax], esi

; 141  :     _Right   = _STD move(_Tmp);

  00151	89 3c 0a	 mov	 DWORD PTR [edx+ecx], edi
$LN121@Guess_medi:
  00154	5b		 pop	 ebx
$LN103@Guess_medi:
  00155	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8265 : }

  00156	5e		 pop	 esi
  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c3		 ret	 0
$LN2@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0015b	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  0015e	8b 10		 mov	 edx, DWORD PTR [eax]
  00160	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8237 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00164	76 04		 jbe	 SHORT $LN93@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  00166	89 30		 mov	 DWORD PTR [eax], esi

; 141  :     _Right   = _STD move(_Tmp);

  00168	89 11		 mov	 DWORD PTR [ecx], edx
$LN93@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0016a	8b 30		 mov	 esi, DWORD PTR [eax]
  0016c	8b 17		 mov	 edx, DWORD PTR [edi]
  0016e	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00173	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8241 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00177	76 dc		 jbe	 SHORT $LN103@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  00179	89 37		 mov	 DWORD PTR [edi], esi

; 141  :     _Right   = _STD move(_Tmp);

  0017b	89 10		 mov	 DWORD PTR [eax], edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0017d	8b 31		 mov	 esi, DWORD PTR [ecx]
  0017f	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00184	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8244 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00188	76 cb		 jbe	 SHORT $LN103@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0018a	89 30		 mov	 DWORD PTR [eax], esi
  0018c	5f		 pop	 edi

; 141  :     _Right   = _STD move(_Tmp);

  0018d	89 11		 mov	 DWORD PTR [ecx], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8265 : }

  0018f	5e		 pop	 esi
  00190	8b e5		 mov	 esp, ebp
  00192	5d		 pop	 ebp
  00193	c3		 ret	 0
??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ENDP ; std::_Guess_median_unchecked<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z
_TEXT	SEGMENT
__Max_sequence_non_leaf$1$ = -4				; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$1$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z PROC ; std::_Pop_heap_hole_by_index<CLight * *,CLight *,LightComp>, COMDAT

; 58   :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 59   :     // percolate _Hole to _Bottom, then push _Val
; 60   :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 61   : 
; 62   :     using _Diff      = _Iter_diff_t<_RanIt>;
; 63   :     const _Diff _Top = _Hole;
; 64   :     _Diff _Idx       = _Hole;
; 65   : 
; 66   :     // Check whether _Idx can have a child before calculating that child's index, since
; 67   :     // calculating the child's index can trigger integer overflows
; 68   :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00004	8b 55 10	 mov	 edx, DWORD PTR __Bottom$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b 75 0c	 mov	 esi, DWORD PTR __Hole$[ebp]
  0000c	8b ce		 mov	 ecx, esi
  0000e	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00011	89 4d 0c	 mov	 DWORD PTR __Top$1$[ebp], ecx
  00014	d1 f8		 sar	 eax, 1
  00016	8b de		 mov	 ebx, esi
  00018	89 45 fc	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], eax
  0001b	57		 push	 edi

; 69   :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0001f	3b f0		 cmp	 esi, eax
  00021	7d 31		 jge	 SHORT $LN3@Pop_heap_h
$LL2@Pop_heap_h:

; 70   :         _Idx = 2 * _Idx + 2;

  00023	8d 14 1b	 lea	 edx, DWORD PTR [ebx+ebx]

; 71   :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {
; 72   :             --_Idx;
; 73   :         }
; 74   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00026	33 db		 xor	 ebx, ebx
  00028	8b 44 97 04	 mov	 eax, DWORD PTR [edi+edx*4+4]
  0002c	8b 4c 97 08	 mov	 ecx, DWORD PTR [edi+edx*4+8]
  00030	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00035	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
  00039	0f 96 c3	 setbe	 bl
  0003c	43		 inc	 ebx
  0003d	03 da		 add	 ebx, edx
  0003f	8b 04 9f	 mov	 eax, DWORD PTR [edi+ebx*4]
  00042	89 04 b7	 mov	 DWORD PTR [edi+esi*4], eax

; 75   :         _Hole             = _Idx;

  00045	8b f3		 mov	 esi, ebx
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  0004a	3b d8		 cmp	 ebx, eax
  0004c	7c d5		 jl	 SHORT $LL2@Pop_heap_h
  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR __Top$1$[ebp]
  00051	8b 55 10	 mov	 edx, DWORD PTR __Bottom$[ebp]
$LN3@Pop_heap_h:

; 76   :     }
; 77   : 
; 78   :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00054	3b d8		 cmp	 ebx, eax
  00056	75 0f		 jne	 SHORT $LN5@Pop_heap_h
  00058	f6 c2 01	 test	 dl, 1
  0005b	75 0a		 jne	 SHORT $LN5@Pop_heap_h

; 79   :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  0005d	8b 44 97 fc	 mov	 eax, DWORD PTR [edi+edx*4-4]
  00061	89 04 b7	 mov	 DWORD PTR [edi+esi*4], eax

; 80   :         _Hole             = _Bottom - 1;

  00064	8d 72 ff	 lea	 esi, DWORD PTR [edx-1]
$LN5@Pop_heap_h:

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00067	3b ce		 cmp	 ecx, esi
  00069	7d 30		 jge	 SHORT $LN24@Pop_heap_h
  0006b	8b 5d 14	 mov	 ebx, DWORD PTR __Val$[ebp]
  0006e	66 90		 npad	 2
$LL12@Pop_heap_h:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00070	8b 03		 mov	 eax, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 26   :     for (_Diff _Idx                                                          = (_Hole - 1) >> 1; // shift for codegen

  00072	8d 4e ff	 lea	 ecx, DWORD PTR [esi-1]
  00075	d1 f9		 sar	 ecx, 1
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00077	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0007c	8b 14 8f	 mov	 edx, DWORD PTR [edi+ecx*4]
  0007f	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00083	76 1b		 jbe	 SHORT $LN34@Pop_heap_h

; 28   :         // move _Hole up to parent
; 29   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00085	89 14 b7	 mov	 DWORD PTR [edi+esi*4], edx

; 30   :         _Hole             = _Idx;

  00088	8b f1		 mov	 esi, ecx
  0008a	39 4d 0c	 cmp	 DWORD PTR __Top$1$[ebp], ecx
  0008d	7c e1		 jl	 SHORT $LL12@Pop_heap_h

; 31   :     }
; 32   : 
; 33   :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]

; 81   :     }
; 82   : 
; 83   :     _STD _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 84   : }

  00091	89 04 b7	 mov	 DWORD PTR [edi+esi*4], eax
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
$LN24@Pop_heap_h:

; 33   :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0009b	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0009e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN34@Pop_heap_h:

; 81   :     }
; 82   : 
; 83   :     _STD _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 84   : }

  000a0	89 04 b7	 mov	 DWORD PTR [edi+esi*4], eax
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ENDP ; std::_Pop_heap_hole_by_index<CLight * *,CLight *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z PROC		; std::_Zero_range<unsigned long * *>, COMDAT

; 2032 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2033 :     char* const _First_ch = reinterpret_cast<char*>(_STD _To_address(_First));
; 2034 :     char* const _Last_ch  = reinterpret_cast<char*>(_STD _To_address(_Last));
; 2035 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 2036 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2037 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z ENDP		; std::_Zero_range<unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCLight@@@std@@YAPAPAVCLight@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCLight@@@std@@YAPAPAVCLight@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CLight * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCLight@@@std@@YAPAPAVCLight@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>, COMDAT

; 2064 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2065 :     // value-initialize all elements in [_UFirst, _UFirst + _Count)
; 2066 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 2067 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 2068 :         return _STD _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __UFirst$[ebp], ecx

; 2069 :     } else {
; 2070 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 2071 :         for (; 0 < _Count; --_Count) {
; 2072 :             _Backout._Emplace_back();
; 2073 :         }
; 2074 : 
; 2075 :         return _Backout._Release();
; 2076 :     }
; 2077 : }

  00012	5d		 pop	 ebp

; 2065 :     // value-initialize all elements in [_UFirst, _UFirst + _Count)
; 2066 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 2067 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 2068 :         return _STD _Zero_range(_UFirst, _UFirst + _Count);

  00013	e9 00 00 00 00	 jmp	 ??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z ; std::_Zero_range<unsigned long * *>
??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z PROC ; std::uninitialized_copy<unsigned long * *,unsigned long * *>, COMDAT

; 1928 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1929 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1930 :     _STD _Adl_verify_range(_First, _Last);
; 1931 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1933 :     auto _UDest       = _STD _Get_unwrapped_n(_Dest, _STD _Idl_distance<_InIt>(_UFirst, _ULast));
; 1934 :     _STD _Seek_wrapped(_Dest, _STD _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));
; 1935 :     return _Dest;
; 1936 : }

  00003	5d		 pop	 ebp

; 1915 :             return _STD _Copy_memmove(_First, _Last, _Dest);

  00004	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z ; std::_Copy_memmove<unsigned long * *,unsigned long * *>
??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ENDP ; std::uninitialized_copy<unsigned long * *,unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Object_count$ = 12					; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z PROC ; std::_Copy_memmove_n<CLight * *,CLight * *>, COMDAT

; 4790 : _OutCtgIt _Copy_memmove_n(_CtgIt _First, const size_t _Object_count, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4791 :     const auto _First_ptr  = _STD _To_address(_First);
; 4792 :     const auto _First_ch   = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4793 :     const auto _Byte_count = _Object_count * sizeof(*_First_ptr);
; 4794 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Object_count$[ebp]
  00006	50		 push	 eax
  00007	c1 e0 02	 shl	 eax, 2
  0000a	50		 push	 eax
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00011	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCLight@@@std@@YAPAPAVCLight@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CLight * *>
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 4795 : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z ENDP ; std::_Copy_memmove_n<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN13@Find_lower
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1627 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv652 = -8						; size = 4
tv650 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 09 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 c7 00 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 f8	 mov	 DWORD PTR tv652[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b4	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b7	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b9	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	53		 push	 ebx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_memmove<CLight * *,CLight * *>
  000c3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c6	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c8	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_memmove<CLight * *,CLight * *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	85 c0		 test	 eax, eax
  000e0	74 2c		 je	 SHORT $LN72@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN83@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 2a		 ja	 SHORT $LN80@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00102	8b c2		 mov	 eax, edx
$LN83@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
$LN72@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
  00113	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00116	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00118	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR tv652[ebp]
  0011e	03 cf		 add	 ecx, edi

; 903  :     }

  00120	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z
_TEXT	SEGMENT
__Max_sequence_non_leaf$1$ = -16			; size = 4
__Bottom$1$ = -12					; size = 4
__Gfirst$1$ = -12					; size = 4
tv1526 = -12						; size = 4
__Hole$1$ = -8						; size = 4
__Glast$1$ = -8						; size = 4
tv1515 = -8						; size = 4
__Plast$1$ = -4						; size = 4
tv1504 = -4						; size = 4
__First$ = 8						; size = 4
__Val$1$ = 8						; size = 4
__Val$1$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$2 = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z PROC ; std::_Sort_unchecked<CLight * *,LightComp>, COMDAT

; 8339 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 8340 :     // order [_First, _Last)
; 8341 :     for (;;) {
; 8342 :         if (_Last - _First <= _ISORT_MAX) { // small

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000f	8b c7		 mov	 eax, edi
  00011	2b c3		 sub	 eax, ebx
  00013	83 e0 fc	 and	 eax, -4			; fffffffcH
  00016	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0001b	0f 8e e4 01 00
	00		 jle	 $LN149@Sort_unche
  00021	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
$LL4@Sort_unche:

; 8343 :             _STD _Insertion_sort_unchecked(_First, _Last, _Pred);
; 8344 :             return;
; 8345 :         }
; 8346 : 
; 8347 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00024	8b c7		 mov	 eax, edi
  00026	2b c3		 sub	 eax, ebx
  00028	83 7d 10 00	 cmp	 DWORD PTR __Ideal$[ebp], 0
  0002c	0f 8e 1a 02 00
	00		 jle	 $LN150@Sort_unche

; 8270 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00032	c1 f8 03	 sar	 eax, 3

; 8271 :     _STD _Guess_median_unchecked(_First, _Mid, _STD _Prev_iter(_Last), _Pred);

  00035	51		 push	 ecx
  00036	8d 34 83	 lea	 esi, DWORD PTR [ebx+eax*4]
  00039	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  0003c	50		 push	 eax
  0003d	56		 push	 esi
  0003e	53		 push	 ebx
  0003f	e8 00 00 00 00	 call	 ??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ; std::_Guess_median_unchecked<CLight * *,LightComp>
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 8272 :     _RanIt _Pfirst = _Mid;
; 8273 :     _RanIt _Plast  = _STD _Next_iter(_Pfirst);

  00047	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  0004a	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi

; 8276 :            && !_Pred(*_Pfirst, *_STD _Prev_iter(_Pfirst))) {

  0004d	3b de		 cmp	 ebx, esi
  0004f	73 22		 jae	 SHORT $LN199@Sort_unche
  00051	8b 16		 mov	 edx, DWORD PTR [esi]
$LL60@Sort_unche:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00053	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00056	f3 0f 10 42 78	 movss	 xmm0, DWORD PTR [edx+120]
  0005b	f3 0f 10 49 78	 movss	 xmm1, DWORD PTR [ecx+120]
  00060	0f 2f c1	 comiss	 xmm0, xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8276 :            && !_Pred(*_Pfirst, *_STD _Prev_iter(_Pfirst))) {

  00063	77 0e		 ja	 SHORT $LN199@Sort_unche
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00065	0f 2f c8	 comiss	 xmm1, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8276 :            && !_Pred(*_Pfirst, *_STD _Prev_iter(_Pfirst))) {

  00068	77 09		 ja	 SHORT $LN199@Sort_unche

; 8277 :         --_Pfirst;

  0006a	83 c6 fc	 add	 esi, -4			; fffffffcH
  0006d	8b d1		 mov	 edx, ecx
  0006f	3b de		 cmp	 ebx, esi
  00071	72 e0		 jb	 SHORT $LL60@Sort_unche
$LN199@Sort_unche:

; 8280 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00073	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00076	3b f9		 cmp	 edi, ecx
  00078	73 22		 jae	 SHORT $LN63@Sort_unche
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0007a	8b 06		 mov	 eax, DWORD PTR [esi]
  0007c	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
$LL62@Sort_unche:
  00081	8b 07		 mov	 eax, DWORD PTR [edi]
  00083	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00088	0f 2f c8	 comiss	 xmm1, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8280 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  0008b	77 0c		 ja	 SHORT $LN200@Sort_unche
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0008d	0f 2f c1	 comiss	 xmm0, xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8280 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00090	77 07		 ja	 SHORT $LN200@Sort_unche

; 8281 :         ++_Plast;

  00092	83 c7 04	 add	 edi, 4
  00095	3b f9		 cmp	 edi, ecx
  00097	72 e8		 jb	 SHORT $LL62@Sort_unche
$LN200@Sort_unche:
  00099	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
$LN63@Sort_unche:

; 8282 :     }
; 8283 : 
; 8284 :     _RanIt _Gfirst = _Plast;

  0009c	8b d7		 mov	 edx, edi

; 8285 :     _RanIt _Glast  = _Pfirst;

  0009e	8b de		 mov	 ebx, esi
$LN247@Sort_unche:

; 8288 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000a0	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
$LN246@Sort_unche:
  000a3	89 55 f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edx
$LL66@Sort_unche:
  000a6	3b d1		 cmp	 edx, ecx
  000a8	73 3e		 jae	 SHORT $LN146@Sort_unche
  000aa	66 0f 1f 44 00
	00		 npad	 6
$LL69@Sort_unche:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000b0	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000b2	8b 06		 mov	 eax, DWORD PTR [esi]
  000b4	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  000b9	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  000be	0f 2f c1	 comiss	 xmm0, xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8289 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  000c1	77 14		 ja	 SHORT $LN67@Sort_unche
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000c3	0f 2f c8	 comiss	 xmm1, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8291 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  000c6	77 17		 ja	 SHORT $LN201@Sort_unche

; 8292 :                 break;
; 8293 :             } else if (_Plast != _Gfirst) {

  000c8	3b fa		 cmp	 edi, edx
  000ca	74 08		 je	 SHORT $LN77@Sort_unche
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  000cc	8b 07		 mov	 eax, DWORD PTR [edi]

; 140  :     _Left    = _STD move(_Right);

  000ce	8b d9		 mov	 ebx, ecx
  000d0	89 1f		 mov	 DWORD PTR [edi], ebx

; 141  :     _Right   = _STD move(_Tmp);

  000d2	89 02		 mov	 DWORD PTR [edx], eax
$LN77@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8288 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000d4	83 c7 04	 add	 edi, 4
$LN67@Sort_unche:
  000d7	83 c2 04	 add	 edx, 4
  000da	3b 55 0c	 cmp	 edx, DWORD PTR __Last$[ebp]
  000dd	72 d1		 jb	 SHORT $LL69@Sort_unche
$LN201@Sort_unche:
  000df	8b 5d f8	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
  000e2	89 55 f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edx
  000e5	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
$LN146@Sort_unche:

; 8301 :         for (; _First < _Glast; --_Glast) {

  000e8	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000eb	3b d8		 cmp	 ebx, eax
  000ed	76 44		 jbe	 SHORT $LN245@Sort_unche
  000ef	8d 4b fc	 lea	 ecx, DWORD PTR [ebx-4]
  000f2	8b d0		 mov	 edx, eax
$LL72@Sort_unche:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000f4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f6	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  000fb	8b 06		 mov	 eax, DWORD PTR [esi]
  000fd	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00102	0f 2f c1	 comiss	 xmm0, xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8303 :             if (_DEBUG_LT_PRED(_Pred, *_Glast_prev, *_Pfirst)) {

  00105	77 14		 ja	 SHORT $LN70@Sort_unche
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00107	0f 2f c8	 comiss	 xmm1, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8305 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  0010a	77 19		 ja	 SHORT $LN202@Sort_unche

; 8306 :                 break;
; 8307 :             } else if (--_Pfirst != _Glast_prev) {

  0010c	83 ee 04	 sub	 esi, 4
  0010f	3b f1		 cmp	 esi, ecx
  00111	74 08		 je	 SHORT $LN70@Sort_unche
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00113	8b 06		 mov	 eax, DWORD PTR [esi]

; 140  :     _Left    = _STD move(_Right);

  00115	8b 39		 mov	 edi, DWORD PTR [ecx]
  00117	89 3e		 mov	 DWORD PTR [esi], edi

; 141  :     _Right   = _STD move(_Tmp);

  00119	89 01		 mov	 DWORD PTR [ecx], eax
$LN70@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8301 :         for (; _First < _Glast; --_Glast) {

  0011b	83 eb 04	 sub	 ebx, 4
  0011e	83 e9 04	 sub	 ecx, 4
  00121	3b d3		 cmp	 edx, ebx
  00123	72 cf		 jb	 SHORT $LL72@Sort_unche
$LN202@Sort_unche:
  00125	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 8308 :                 swap(*_Pfirst, *_Glast_prev); // intentional ADL
; 8309 :             }
; 8310 :         }
; 8311 : 
; 8312 :         if (_Glast == _First && _Gfirst == _Last) {

  00128	3b d8		 cmp	 ebx, eax
  0012a	8b 7d fc	 mov	 edi, DWORD PTR __Plast$1$[ebp]
  0012d	8b 55 f4	 mov	 edx, DWORD PTR __Gfirst$1$[ebp]
  00130	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
$LN245@Sort_unche:
  00133	75 2f		 jne	 SHORT $LN85@Sort_unche
  00135	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00138	3b d1		 cmp	 edx, ecx
  0013a	74 6b		 je	 SHORT $LN148@Sort_unche

; 8313 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);
; 8314 :         }
; 8315 : 
; 8316 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 8317 :             if (_Plast != _Gfirst) {

  0013c	3b fa		 cmp	 edi, edx
  0013e	74 08		 je	 SHORT $LN103@Sort_unche
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00140	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 140  :     _Left    = _STD move(_Right);

  00142	8b 07		 mov	 eax, DWORD PTR [edi]
  00144	89 06		 mov	 DWORD PTR [esi], eax

; 141  :     _Right   = _STD move(_Tmp);

  00146	89 0f		 mov	 DWORD PTR [edi], ecx
$LN103@Sort_unche:

; 139  :     _Ty _Tmp = _STD move(_Left);

  00148	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8321 :             ++_Plast;

  0014a	83 c7 04	 add	 edi, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0014d	8b 02		 mov	 eax, DWORD PTR [edx]
  0014f	89 06		 mov	 DWORD PTR [esi], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8323 :             ++_Pfirst;

  00151	83 c6 04	 add	 esi, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  00154	89 0a		 mov	 DWORD PTR [edx], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8324 :             ++_Gfirst;

  00156	83 c2 04	 add	 edx, 4
  00159	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0015c	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
  0015f	e9 3f ff ff ff	 jmp	 $LN246@Sort_unche
$LN85@Sort_unche:

; 8325 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00164	83 c3 fc	 add	 ebx, -4			; fffffffcH
  00167	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
  0016a	3b 55 0c	 cmp	 edx, DWORD PTR __Last$[ebp]
  0016d	75 25		 jne	 SHORT $LN88@Sort_unche

; 8326 :             if (--_Glast != --_Pfirst) {

  0016f	83 ee 04	 sub	 esi, 4
  00172	3b de		 cmp	 ebx, esi
  00174	74 08		 je	 SHORT $LN189@Sort_unche
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00176	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 140  :     _Left    = _STD move(_Right);

  00178	8b 06		 mov	 eax, DWORD PTR [esi]
  0017a	89 03		 mov	 DWORD PTR [ebx], eax

; 141  :     _Right   = _STD move(_Tmp);

  0017c	89 0e		 mov	 DWORD PTR [esi], ecx
$LN189@Sort_unche:

; 139  :     _Ty _Tmp = _STD move(_Left);

  0017e	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8330 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  00180	83 ef 04	 sub	 edi, 4
  00183	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  00186	8b 07		 mov	 eax, DWORD PTR [edi]
  00188	89 06		 mov	 DWORD PTR [esi], eax

; 141  :     _Right   = _STD move(_Tmp);

  0018a	89 0f		 mov	 DWORD PTR [edi], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8331 :         } else {

  0018c	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0018f	e9 12 ff ff ff	 jmp	 $LL66@Sort_unche
$LN88@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00194	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 140  :     _Left    = _STD move(_Right);

  00196	8b 03		 mov	 eax, DWORD PTR [ebx]
  00198	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8333 :             ++_Gfirst;

  0019a	83 c2 04	 add	 edx, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  0019d	89 0b		 mov	 DWORD PTR [ebx], ecx
  0019f	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  001a2	e9 f9 fe ff ff	 jmp	 $LN247@Sort_unche
$LN148@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8356 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions

  001a7	8b 55 10	 mov	 edx, DWORD PTR __Ideal$[ebp]
  001aa	2b cf		 sub	 ecx, edi

; 8357 : 
; 8358 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  001ac	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  001af	8b c2		 mov	 eax, edx
  001b1	c1 f8 02	 sar	 eax, 2
  001b4	83 e1 fc	 and	 ecx, -4			; fffffffcH
  001b7	d1 fa		 sar	 edx, 1
  001b9	03 d0		 add	 edx, eax
  001bb	8b c6		 mov	 eax, esi
  001bd	2b c3		 sub	 eax, ebx
  001bf	89 55 10	 mov	 DWORD PTR __Ideal$[ebp], edx
  001c2	83 e0 fc	 and	 eax, -4			; fffffffcH
  001c5	3b c1		 cmp	 eax, ecx
  001c7	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  001ca	50		 push	 eax
  001cb	52		 push	 edx
  001cc	7d 11		 jge	 SHORT $LN7@Sort_unche

; 8359 :             _STD _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  001ce	56		 push	 esi
  001cf	53		 push	 ebx
  001d0	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort_unchecked<CLight * *,LightComp>

; 8360 :             _First = _Mid.second;

  001d5	8b df		 mov	 ebx, edi

; 8361 :         } else { // loop on first half

  001d7	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  001da	89 5d 08	 mov	 DWORD PTR __First$[ebp], ebx
  001dd	eb 0e		 jmp	 SHORT $LN248@Sort_unche
$LN7@Sort_unche:

; 8362 :             _STD _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  001df	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  001e2	57		 push	 edi
  001e3	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort_unchecked<CLight * *,LightComp>

; 8363 :             _Last = _Mid.first;

  001e8	8b fe		 mov	 edi, esi
  001ea	89 7d 0c	 mov	 DWORD PTR __Last$[ebp], edi
$LN248@Sort_unche:

; 8340 :     // order [_First, _Last)
; 8341 :     for (;;) {
; 8342 :         if (_Last - _First <= _ISORT_MAX) { // small

  001ed	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  001f0	8b c7		 mov	 eax, edi
  001f2	2b c3		 sub	 eax, ebx
  001f4	83 c4 10	 add	 esp, 16			; 00000010H
  001f7	83 e0 fc	 and	 eax, -4			; fffffffcH
  001fa	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  001ff	0f 8f 1f fe ff
	ff		 jg	 $LL4@Sort_unche
$LN149@Sort_unche:

; 8213 :     if (_First != _Last) {

  00205	3b df		 cmp	 ebx, edi
  00207	0f 84 7d 01 00
	00		 je	 $LN12@Sort_unche

; 8214 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  0020d	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  00210	3b f7		 cmp	 esi, edi
  00212	0f 84 72 01 00
	00		 je	 $LN12@Sort_unche
$LL13@Sort_unche:

; 8215 :             _BidIt _Hole = _Mid;
; 8216 :             _Iter_value_t<_BidIt> _Val(_STD move(*_Mid));

  00218	8b 06		 mov	 eax, DWORD PTR [esi]
  0021a	8b d6		 mov	 edx, esi
  0021c	89 45 08	 mov	 DWORD PTR __Val$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0021f	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  00224	8b 03		 mov	 eax, DWORD PTR [ebx]
  00226	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0022b	0f 2f c1	 comiss	 xmm0, xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8218 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  0022e	0f 86 1b 01 00
	00		 jbe	 $LN18@Sort_unche
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5206 :             return _STD _Copy_backward_memmove(_First, _Last, _Dest);

  00234	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00237	50		 push	 eax
  00238	56		 push	 esi
  00239	53		 push	 ebx
  0023a	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_backward_memmove<CLight * *,CLight * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8220 :                 *_First = _STD move(_Val);

  0023f	8b 45 08	 mov	 eax, DWORD PTR __Val$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5206 :             return _STD _Copy_backward_memmove(_First, _Last, _Dest);

  00242	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8220 :                 *_First = _STD move(_Val);

  00245	89 03		 mov	 DWORD PTR [ebx], eax

; 8221 :             } else { // look for insertion point after first

  00247	e9 33 01 00 00	 jmp	 $LN11@Sort_unche
$LN150@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 124  :     _Diff _Bottom = _Last - _First;

  0024c	c1 f8 02	 sar	 eax, 2

; 125  :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  0024f	8b d0		 mov	 edx, eax
  00251	89 45 f4	 mov	 DWORD PTR __Bottom$1$[ebp], eax
  00254	d1 fa		 sar	 edx, 1
  00256	85 d2		 test	 edx, edx
  00258	0f 8e a8 00 00
	00		 jle	 $LN31@Sort_unche
  0025e	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00261	8b f9		 mov	 edi, ecx
  00263	89 4d fc	 mov	 DWORD PTR tv1504[ebp], ecx
  00266	d1 ff		 sar	 edi, 1
  00268	89 7d f0	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], edi
  0026b	0f 1f 44 00 00	 npad	 5
$LL32@Sort_unche:

; 126  :         // reheap top half, bottom to top
; 127  :         --_Hole;
; 128  :         _Iter_value_t<_RanIt> _Val(_STD move(*(_First + _Hole)));

  00270	8b 4c 93 fc	 mov	 ecx, DWORD PTR [ebx+edx*4-4]
  00274	4a		 dec	 edx
  00275	89 4d 08	 mov	 DWORD PTR __Val$1$[ebp], ecx

; 129  :         _STD _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00278	8b f2		 mov	 esi, edx
  0027a	89 55 f8	 mov	 DWORD PTR __Hole$1$[ebp], edx

; 64   :     _Diff _Idx       = _Hole;

  0027d	8b ca		 mov	 ecx, edx

; 65   : 
; 66   :     // Check whether _Idx can have a child before calculating that child's index, since
; 67   :     // calculating the child's index can trigger integer overflows
; 68   :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 69   :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0027f	3b d7		 cmp	 edx, edi
  00281	7d 31		 jge	 SHORT $LN36@Sort_unche
$LL35@Sort_unche:

; 70   :         _Idx = 2 * _Idx + 2;

  00283	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]

; 71   :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {
; 72   :             --_Idx;
; 73   :         }
; 74   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00286	8b 44 93 04	 mov	 eax, DWORD PTR [ebx+edx*4+4]
  0028a	8b 4c 93 08	 mov	 ecx, DWORD PTR [ebx+edx*4+8]
  0028e	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00293	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
  00297	b9 00 00 00 00	 mov	 ecx, 0
  0029c	0f 96 c1	 setbe	 cl
  0029f	41		 inc	 ecx
  002a0	03 ca		 add	 ecx, edx
  002a2	8b 04 8b	 mov	 eax, DWORD PTR [ebx+ecx*4]
  002a5	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax

; 75   :         _Hole             = _Idx;

  002a8	8b f1		 mov	 esi, ecx
  002aa	3b cf		 cmp	 ecx, edi
  002ac	7c d5		 jl	 SHORT $LL35@Sort_unche
  002ae	8b 55 f8	 mov	 edx, DWORD PTR __Hole$1$[ebp]
  002b1	8b 45 f4	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
$LN36@Sort_unche:

; 76   :     }
; 77   : 
; 78   :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  002b4	3b f7		 cmp	 esi, edi
  002b6	75 0e		 jne	 SHORT $LN38@Sort_unche
  002b8	a8 01		 test	 al, 1
  002ba	75 0a		 jne	 SHORT $LN38@Sort_unche

; 79   :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  002bc	8b 44 83 fc	 mov	 eax, DWORD PTR [ebx+eax*4-4]
  002c0	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax

; 80   :         _Hole             = _Bottom - 1;

  002c3	8b 75 fc	 mov	 esi, DWORD PTR tv1504[ebp]
$LN38@Sort_unche:

; 26   :     for (_Diff _Idx                                                          = (_Hole - 1) >> 1; // shift for codegen

  002c6	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  002c9	d1 f8		 sar	 eax, 1

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  002cb	3b d6		 cmp	 edx, esi
  002cd	7d 20		 jge	 SHORT $LN44@Sort_unche
  002cf	8b 7d 08	 mov	 edi, DWORD PTR __Val$1$[ebp]
$LL45@Sort_unche:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  002d2	8b 0c 83	 mov	 ecx, DWORD PTR [ebx+eax*4]
  002d5	f3 0f 10 47 78	 movss	 xmm0, DWORD PTR [edi+120]
  002da	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  002de	76 0c		 jbe	 SHORT $LN203@Sort_unche

; 28   :         // move _Hole up to parent
; 29   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  002e0	89 0c b3	 mov	 DWORD PTR [ebx+esi*4], ecx

; 30   :         _Hole             = _Idx;

  002e3	8b f0		 mov	 esi, eax
  002e5	48		 dec	 eax
  002e6	d1 f8		 sar	 eax, 1
  002e8	3b d6		 cmp	 edx, esi
  002ea	7c e6		 jl	 SHORT $LL45@Sort_unche
$LN203@Sort_unche:
  002ec	8b 7d f0	 mov	 edi, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
$LN44@Sort_unche:

; 31   :     }
; 32   : 
; 33   :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  002ef	8b 45 08	 mov	 eax, DWORD PTR __Val$1$[ebp]
  002f2	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax

; 125  :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  002f5	8b 45 f4	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
  002f8	85 d2		 test	 edx, edx
  002fa	0f 8f 70 ff ff
	ff		 jg	 $LL32@Sort_unche
  00300	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  00303	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
$LN31@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7118 :     for (; _Last - _First >= 2; --_Last) {

  00306	8b c7		 mov	 eax, edi
  00308	2b c3		 sub	 eax, ebx
  0030a	83 e0 fc	 and	 eax, -4			; fffffffcH
  0030d	83 f8 08	 cmp	 eax, 8
  00310	7c 78		 jl	 SHORT $LN12@Sort_unche

; 8348 :             _STD _Make_heap_unchecked(_First, _Last, _Pred);
; 8349 :             _STD _Sort_heap_unchecked(_First, _Last, _Pred);

  00312	2b fb		 sub	 edi, ebx
$LL52@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  00314	8b 44 3b fc	 mov	 eax, DWORD PTR [ebx+edi-4]
  00318	89 45 0c	 mov	 DWORD PTR __Val$2[ebp], eax

; 91   :     *_Dest      = _STD move(*_First);

  0031b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0031d	89 44 3b fc	 mov	 DWORD PTR [ebx+edi-4], eax

; 93   :     _STD _Pop_heap_hole_by_index(

  00321	8d 45 0c	 lea	 eax, DWORD PTR __Val$2[ebp]
  00324	51		 push	 ecx
  00325	50		 push	 eax
  00326	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00329	c1 f8 02	 sar	 eax, 2
  0032c	50		 push	 eax
  0032d	6a 00		 push	 0
  0032f	53		 push	 ebx
  00330	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ; std::_Pop_heap_hole_by_index<CLight * *,CLight *,LightComp>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7118 :     for (; _Last - _First >= 2; --_Last) {

  00335	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00338	83 c7 fc	 add	 edi, -4			; fffffffcH
  0033b	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 93   :     _STD _Pop_heap_hole_by_index(

  0033d	83 c4 14	 add	 esp, 20			; 00000014H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7118 :     for (; _Last - _First >= 2; --_Last) {

  00340	83 e0 fc	 and	 eax, -4			; fffffffcH
  00343	83 f8 08	 cmp	 eax, 8
  00346	7d cc		 jge	 SHORT $LL52@Sort_unche

; 8364 :         }
; 8365 :     }
; 8366 : }

  00348	5f		 pop	 edi
  00349	5e		 pop	 esi
  0034a	5b		 pop	 ebx
  0034b	8b e5		 mov	 esp, ebp
  0034d	5d		 pop	 ebp
  0034e	c3		 ret	 0
$LN18@Sort_unche:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0034f	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8222 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00352	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00355	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  0035a	0f 2f c1	 comiss	 xmm0, xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8222 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  0035d	76 1b		 jbe	 SHORT $LN15@Sort_unche
  0035f	8b 7d 08	 mov	 edi, DWORD PTR __Val$1$[ebp]
$LL16@Sort_unche:

; 8223 :                     *_Hole = _STD move(*_Prev); // move hole down

  00362	89 0a		 mov	 DWORD PTR [edx], ecx
  00364	8b d0		 mov	 edx, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00366	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8222 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00369	83 e8 04	 sub	 eax, 4
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0036c	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  00371	0f 2f 47 78	 comiss	 xmm0, DWORD PTR [edi+120]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8222 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00375	77 eb		 ja	 SHORT $LL16@Sort_unche
  00377	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
$LN15@Sort_unche:

; 8224 :                 }
; 8225 : 
; 8226 :                 *_Hole = _STD move(_Val); // insert element in hole

  0037a	8b 45 08	 mov	 eax, DWORD PTR __Val$1$[ebp]
  0037d	89 02		 mov	 DWORD PTR [edx], eax
$LN11@Sort_unche:

; 8214 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  0037f	83 c6 04	 add	 esi, 4
  00382	3b f7		 cmp	 esi, edi
  00384	0f 85 8e fe ff
	ff		 jne	 $LL13@Sort_unche
$LN12@Sort_unche:
  0038a	5f		 pop	 edi

; 8364 :         }
; 8365 :     }
; 8366 : }

  0038b	5e		 pop	 esi
  0038c	5b		 pop	 ebx
  0038d	8b e5		 mov	 esp, ebp
  0038f	5d		 pop	 ebp
  00390	c3		 ret	 0
??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ENDP ; std::_Sort_unchecked<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Assign_counted_range@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEXPAPAVCLight@@I@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Oldsize$1$ = 12					; size = 4
$T1 = 12						; size = 4
??$_Assign_counted_range@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEXPAPAVCLight@@I@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Assign_counted_range<CLight * *>, COMDAT
; _this$ = ecx

; 1405 :     _CONSTEXPR20 void _Assign_counted_range(_Iter _First, const size_type _Newsize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1406 :         // assign elements from counted range _First + [0, _Newsize)
; 1407 :         auto& _Al         = _Getal();
; 1408 :         auto& _My_data    = _Mypair._Myval2;
; 1409 :         pointer& _Myfirst = _My_data._Myfirst;
; 1410 :         pointer& _Mylast  = _My_data._Mylast;
; 1411 :         pointer& _Myend   = _My_data._Myend;
; 1412 : 
; 1413 :         constexpr bool _Nothrow_construct = conjunction_v<is_nothrow_constructible<_Ty, _Iter_ref_t<_Iter>>,
; 1414 :             _Uses_default_construct<_Alloc, _Ty*, _Iter_ref_t<_Iter>>>;
; 1415 : 
; 1416 :         _My_data._Orphan_all();
; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1418 :         if (_Newsize > _Oldcapacity) {

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000e	8b 37		 mov	 esi, DWORD PTR [edi]
  00010	2b ce		 sub	 ecx, esi
  00012	c1 f9 02	 sar	 ecx, 2
  00015	3b d9		 cmp	 ebx, ecx
  00017	0f 86 ca 00 00
	00		 jbe	 $LN5@Assign_cou

; 1688 :         if (_Newsize > max_size()) {

  0001d	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00023	0f 87 fb 00 00
	00		 ja	 $LN105@Assign_cou

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00029	8b d1		 mov	 edx, ecx
  0002b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00030	d1 ea		 shr	 edx, 1
  00032	2b c2		 sub	 eax, edx
  00034	3b c8		 cmp	 ecx, eax
  00036	76 09		 jbe	 SHORT $LN15@Assign_cou

; 1997 :             return _Max; // geometric growth would overflow

  00038	c7 45 0c ff ff
	ff 3f		 mov	 DWORD PTR $T1[ebp], 1073741823 ; 3fffffffH
  0003f	eb 0b		 jmp	 SHORT $LN16@Assign_cou
$LN15@Assign_cou:

; 1998 :         }
; 1999 : 
; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00041	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00044	3b c3		 cmp	 eax, ebx
  00046	0f 42 c3	 cmovb	 eax, ebx
  00049	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
$LN16@Assign_cou:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  0004c	85 f6		 test	 esi, esi
  0004e	74 3f		 je	 SHORT $LN12@Assign_cou
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00050	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00053	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00059	72 16		 jb	 SHORT $LN37@Assign_cou

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005b	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0005e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00061	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00063	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00066	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00069	0f 87 bf 00 00
	00		 ja	 $LN34@Assign_cou

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006f	8b f2		 mov	 esi, edx
$LN37@Assign_cou:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00071	51		 push	 ecx
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1699 :             _Myfirst = nullptr;

  00078	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007e	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1700 :             _Mylast  = nullptr;

  00081	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1701 :             _Myend   = nullptr;

  00088	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN12@Assign_cou:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0008f	8b 75 0c	 mov	 esi, DWORD PTR $T1[ebp]
  00092	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00098	0f 87 8b 00 00
	00		 ja	 $LN106@Assign_cou

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0009e	c1 e6 02	 shl	 esi, 2

; 227  :     if (_Bytes == 0) {

  000a1	85 f6		 test	 esi, esi
  000a3	74 1a		 je	 SHORT $LN51@Assign_cou
$LN52@Assign_cou:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000a5	56		 push	 esi
  000a6	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  000ac	72 07		 jb	 SHORT $LN53@Assign_cou

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ae	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b3	eb 05		 jmp	 SHORT $LN102@Assign_cou
$LN53@Assign_cou:

; 136  :         return ::operator new(_Bytes);

  000b5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN102@Assign_cou:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  000ba	8b f0		 mov	 esi, eax
  000bc	83 c4 04	 add	 esp, 4
$LN51@Assign_cou:

; 2021 :         _Mylast               = _Newvec;
; 2022 :         _Myend                = _Newvec + _Newcapacity;

  000bf	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  000c2	89 37		 mov	 DWORD PTR [edi], esi
  000c4	89 77 04	 mov	 DWORD PTR [edi+4], esi
  000c7	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  000ca	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN6@Assign_cou:

; 1465 :     }

  000cd	56		 push	 esi
  000ce	53		 push	 ebx
  000cf	ff 75 08	 push	 DWORD PTR __First$[ebp]
  000d2	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z ; std::_Copy_memmove_n<CLight * *,CLight * *>
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000da	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]
  000dd	89 47 04	 mov	 DWORD PTR [edi+4], eax
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	5d		 pop	 ebp
  000e4	c2 08 00	 ret	 8
$LN5@Assign_cou:

; 1419 :             _Clear_and_reserve_geometric(_Newsize);
; 1420 :             if constexpr (_Nothrow_construct) {
; 1421 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);
; 1422 :                 _ASAN_VECTOR_CREATE;
; 1423 :             } else {
; 1424 :                 _ASAN_VECTOR_CREATE_GUARD;
; 1425 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);
; 1426 :             }
; 1427 :             return;
; 1428 :         }
; 1429 : 
; 1430 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  000e7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ea	2b c6		 sub	 eax, esi
  000ec	c1 f8 02	 sar	 eax, 2
  000ef	89 45 0c	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1431 :         if (_Newsize > _Oldsize) {

  000f2	3b d8		 cmp	 ebx, eax
  000f4	76 d7		 jbe	 SHORT $LN6@Assign_cou

; 1432 :             bool _Copied = false;
; 1433 :             if constexpr (_Iter_copy_cat<_Iter, pointer>::_Bitcopy_assignable) {
; 1434 : #if _HAS_CXX20
; 1435 :                 if (!_STD is_constant_evaluated())
; 1436 : #endif // _HAS_CXX20
; 1437 :                 {
; 1438 :                     _Copy_memmove_n(_First, static_cast<size_t>(_Oldsize), _Myfirst);

  000f6	56		 push	 esi
  000f7	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  000fa	50		 push	 eax
  000fb	56		 push	 esi
  000fc	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z ; std::_Copy_memmove_n<CLight * *,CLight * *>

; 1439 :                     _First += _Oldsize;

  00101	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]

; 1440 :                     _Copied = true;
; 1441 :                 }
; 1442 :             }
; 1443 : 
; 1444 :             if (!_Copied) {
; 1445 :                 for (auto _Mid = _Myfirst; _Mid != _Mylast; ++_Mid, (void) ++_First) {
; 1446 :                     *_Mid = *_First;
; 1447 :                 }
; 1448 :             }
; 1449 : 
; 1450 :             if constexpr (_Nothrow_construct) {
; 1451 :                 _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  00104	2b d9		 sub	 ebx, ecx
  00106	8d 04 8e	 lea	 eax, DWORD PTR [esi+ecx*4]
  00109	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  0010c	56		 push	 esi
  0010d	53		 push	 ebx
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z ; std::_Copy_memmove_n<CLight * *,CLight * *>
  00114	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1465 :     }

  00117	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]
  0011a	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	5d		 pop	 ebp
  00121	c2 08 00	 ret	 8
$LN105@Assign_cou:

; 1689 :             _Xlength();

  00124	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength
$LN106@Assign_cou:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00129	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN34@Assign_cou:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN101@Assign_cou:
  00133	cc		 int	 3
??$_Assign_counted_range@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEXPAPAVCLight@@I@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Assign_counted_range<CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN39@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN39@Erase_tree:
  00035	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 49   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN21@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 62   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN10@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL9@operator
$LN10@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 62   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCLightManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLightManager@@UAEPAXI@Z PROC			; CLightManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLightManager@@UAE@XZ ; CLightManager::~CLightManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 6c		 push	 108			; 0000006cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCLightManager@@UAEPAXI@Z ENDP			; CLightManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z PROC		; CDynamicPool<CLight>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCLight@@@@UAE@XZ ; CDynamicPool<CLight>::~CDynamicPool<CLight>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z ENDP		; CDynamicPool<CLight>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCLight@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCLight@@@@UAE@XZ PROC		; CDynamicPool<CLight>::~CDynamicPool<CLight>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCLight@@@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN8@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN27@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN27@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2082 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN8@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN37@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN56@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN56@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2082 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN37@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN53@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN67@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCLight@@@@UAE@XZ ENDP		; CDynamicPool<CLight>::~CDynamicPool<CLight>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?ReleaseLightID@CLightManager@@IAEXK@Z
_TEXT	SEGMENT
tv421 = -4						; size = 4
_LightID$ = 8						; size = 4
?ReleaseLightID@CLightManager@@IAEXK@Z PROC		; CLightManager::ReleaseLightID, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1132 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00004	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 153  : {

  00007	53		 push	 ebx
  00008	56		 push	 esi

; 154  : 	m_NonUsingLightIDDeque.push_back(LightID);

  00009	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1132 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  0000c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000f	03 c1		 add	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 153  : {

  00011	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1132 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00012	a8 03		 test	 al, 3
  00014	75 14		 jne	 SHORT $LN6@ReleaseLig
  00016	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00019	c1 e8 02	 shr	 eax, 2
  0001c	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  0001f	77 09		 ja	 SHORT $LN6@ReleaseLig

; 1133 :             _Growmap(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Growmap@?$deque@KV?$allocator@K@std@@@std@@AAEXI@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap
$LN6@ReleaseLig:

; 1134 :         }
; 1135 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  0002a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002d	8d 04 8d ff ff
	ff ff		 lea	 eax, DWORD PTR [ecx*4-1]
  00034	21 46 0c	 and	 DWORD PTR [esi+12], eax

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00037	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]

; 1136 :         const auto _Newoff = static_cast<size_type>(_Myoff() + _Mysize());

  0003a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0003d	03 7e 0c	 add	 edi, DWORD PTR [esi+12]

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00040	8b df		 mov	 ebx, edi
  00042	c1 eb 02	 shr	 ebx, 2
  00045	23 c3		 and	 eax, ebx

; 1138 :         if (_Map()[_Block] == nullptr) {

  00047	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0004e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00051	89 4d fc	 mov	 DWORD PTR tv421[ebp], ecx
  00054	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00058	75 13		 jne	 SHORT $LN7@ReleaseLig
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0005a	6a 10		 push	 16			; 00000010H
  0005c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1139 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00061	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00064	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1139 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00067	8b 55 fc	 mov	 edx, DWORD PTR tv421[ebp]
  0006a	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
$LN7@ReleaseLig:

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0006d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 577  :         const auto _Block_off = static_cast<difference_type>(_Off % _Block_size);

  00070	83 e7 03	 and	 edi, 3

; 1142 :         _Alty_traits::construct(_Getal(), _Get_data()._Address_subscript(_Newoff), _STD forward<_Tys>(_Vals)...);

  00073	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00076	48		 dec	 eax
  00077	23 c3		 and	 eax, ebx

; 1142 :         _Alty_traits::construct(_Getal(), _Get_data()._Address_subscript(_Newoff), _STD forward<_Tys>(_Vals)...);

  00079	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  0007c	8b 45 08	 mov	 eax, DWORD PTR _LightID$[ebp]
  0007f	89 04 b9	 mov	 DWORD PTR [ecx+edi*4], eax

; 1143 : 
; 1144 :         ++_Mysize();

  00082	ff 46 10	 inc	 DWORD PTR [esi+16]
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 155  : }

  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
?ReleaseLightID@CLightManager@@IAEXK@Z ENDP		; CLightManager::ReleaseLightID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?NewLightID@CLightManager@@IAEKXZ
_TEXT	SEGMENT
?NewLightID@CLightManager@@IAEKXZ PROC			; CLightManager::NewLightID, COMDAT
; _this$ = ecx

; 141  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 959  :         return _Mysize() == 0;

  00004	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00007	85 ff		 test	 edi, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 142  : 	if (!m_NonUsingLightIDDeque.empty())

  00009	74 2d		 je	 SHORT $LN2@NewLightID
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1767 :         return _Get_data()._Subscript(_Myoff() + _Pos);

  0000b	8b 56 18	 mov	 edx, DWORD PTR [esi+24]

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0000e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 1767 :         return _Get_data()._Subscript(_Myoff() + _Pos);

  00011	4a		 dec	 edx
  00012	03 d7		 add	 edx, edi

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00014	48		 dec	 eax
  00015	8b ca		 mov	 ecx, edx

; 565  :         const auto _Block_off = static_cast<difference_type>(_Off % _Block_size);

  00017	83 e2 03	 and	 edx, 3

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0001a	c1 e9 02	 shr	 ecx, 2
  0001d	23 c8		 and	 ecx, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 144  : 		TLightID id = m_NonUsingLightIDDeque.back();

  0001f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00022	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1513 :         if (--_Mysize() == 0) {

  00025	8d 4f ff	 lea	 ecx, DWORD PTR [edi-1]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 144  : 		TLightID id = m_NonUsingLightIDDeque.back();

  00028	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1513 :         if (--_Mysize() == 0) {

  0002b	89 4e 1c	 mov	 DWORD PTR [esi+28], ecx
  0002e	85 c9		 test	 ecx, ecx
  00030	75 0c		 jne	 SHORT $LN1@NewLightID
  00032	5f		 pop	 edi

; 1514 :             _Myoff() = 0;

  00033	89 4e 18	 mov	 DWORD PTR [esi+24], ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 150  : }

  00036	5e		 pop	 esi
  00037	c3		 ret	 0
$LN2@NewLightID:

; 145  : 		m_NonUsingLightIDDeque.pop_back();
; 146  : 		return (id);
; 147  : 	}
; 148  : 
; 149  : 	return m_dwSkipIndex + m_LightMap.size();

  00038	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0003b	03 46 24	 add	 eax, DWORD PTR [esi+36]
$LN1@NewLightID:

; 150  : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	c3		 ret	 0
?NewLightID@CLightManager@@IAEKXZ ENDP			; CLightManager::NewLightID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1039 = -16						; size = 4
tv1073 = -12						; size = 4
tv1093 = -12						; size = 4
$T1 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Extract, COMDAT
; _this$ = ecx

; 517  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 518  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 f8	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 519  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00017	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++

; 520  : 
; 521  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 522  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 523  :         _Nodeptr _Pnode = _Erasednode;
; 524  : 
; 525  :         if (_Pnode->_Left->_Isnil) {

  0001c	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	75 18		 jne	 SHORT $LN94@Extract

; 526  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 527  :         } else if (_Pnode->_Right->_Isnil) {

  0002a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002e	74 04		 je	 SHORT $LN7@Extract

; 528  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  00030	8b f8		 mov	 edi, eax

; 529  :         } else { // two subtrees, must lift successor node to replace erased

  00032	eb 0e		 jmp	 SHORT $LN94@Extract
$LN7@Extract:

; 530  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00034	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 531  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00037	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  0003a	3b d1		 cmp	 edx, ecx

; 532  :         }
; 533  : 
; 534  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  0003c	0f 85 91 00 00
	00		 jne	 $LN9@Extract
$LN94@Extract:

; 535  :             _Fixnodeparent = _Erasednode->_Parent;
; 536  :             if (!_Fixnode->_Isnil) {

  00042	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00046	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00049	75 03		 jne	 SHORT $LN11@Extract

; 537  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  0004b	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 538  :             }
; 539  : 
; 540  :             if (_Myhead->_Parent == _Erasednode) {

  0004e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00050	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00053	75 05		 jne	 SHORT $LN12@Extract

; 541  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00055	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00058	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 542  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  0005a	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005c	75 04		 jne	 SHORT $LN14@Extract

; 543  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005e	89 3e		 mov	 DWORD PTR [esi], edi

; 544  :             } else {

  00060	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 545  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00062	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 546  :             }
; 547  : 
; 548  :             if (_Myhead->_Left == _Erasednode) {

  00065	8b 03		 mov	 eax, DWORD PTR [ebx]
  00067	39 08		 cmp	 DWORD PTR [eax], ecx
  00069	75 28		 jne	 SHORT $LN16@Extract

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006b	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006f	74 04		 je	 SHORT $LN42@Extract
  00071	8b d6		 mov	 edx, esi
  00073	eb 1c		 jmp	 SHORT $LN43@Extract
$LN42@Extract:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00075	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00077	8b d7		 mov	 edx, edi

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00079	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007d	75 0f		 jne	 SHORT $LN49@Extract
  0007f	90		 npad	 1
$LL48@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL48@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN49@Extract:
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN43@Extract:

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00091	89 10		 mov	 DWORD PTR [eax], edx
$LN16@Extract:

; 550  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 551  :             }
; 552  : 
; 553  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 13		 mov	 edx, DWORD PTR [ebx]
  00095	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx
  00098	75 34		 jne	 SHORT $LN17@Extract

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0d		 je	 SHORT $LN44@Extract

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a0	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000a3	8b ce		 mov	 ecx, esi
  000a5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  000a8	e9 94 00 00 00	 jmp	 $LN58@Extract
$LN44@Extract:

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000ad	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b0	8b cf		 mov	 ecx, edi

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000b2	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b6	75 13		 jne	 SHORT $LN54@Extract
  000b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL53@Extract:

; 459  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL53@Extract
$LN54@Extract:

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cb	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN17@Extract:

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000ce	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000d1	eb 6e		 jmp	 SHORT $LN58@Extract
$LN9@Extract:

; 558  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d3	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 559  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d8	89 02		 mov	 DWORD PTR [edx], eax

; 560  : 
; 561  :             if (_Pnode == _Erasednode->_Right) {

  000da	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  000dd	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  000e0	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000e3	75 04		 jne	 SHORT $LN18@Extract

; 562  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e5	8b f2		 mov	 esi, edx

; 563  :             } else { // successor further down, link in place of erased

  000e7	eb 1f		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 564  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 565  :                 if (!_Fixnode->_Isnil) {

  000e9	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ed	8b 30		 mov	 esi, DWORD PTR [eax]
  000ef	75 03		 jne	 SHORT $LN20@Extract

; 566  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f1	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 567  :                 }
; 568  : 
; 569  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f4	89 3e		 mov	 DWORD PTR [esi], edi

; 570  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f6	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000f9	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 571  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ff	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00102	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00105	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN19@Extract:

; 572  :             }
; 573  : 
; 574  :             if (_Myhead->_Parent == _Erasednode) {

  00108	8b 03		 mov	 eax, DWORD PTR [ebx]
  0010a	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0010d	75 05		 jne	 SHORT $LN21@Extract

; 575  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00112	eb 0e		 jmp	 SHORT $LN141@Extract
$LN21@Extract:

; 576  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00114	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00117	39 08		 cmp	 DWORD PTR [eax], ecx
  00119	75 04		 jne	 SHORT $LN23@Extract

; 577  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011b	89 10		 mov	 DWORD PTR [eax], edx

; 578  :             } else {

  0011d	eb 03		 jmp	 SHORT $LN141@Extract
$LN23@Extract:

; 579  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011f	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN141@Extract:

; 580  :             }
; 581  : 
; 582  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00122	b8 04 00 00 00	 mov	 eax, 4
  00127	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012d	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0012f	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00132	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00135	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00138	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 141  :     _Right   = _STD move(_Tmp);

  0013b	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0013e	88 48 0c	 mov	 BYTE PTR [eax+12], cl
$LN58@Extract:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 586  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00141	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00145	0f 85 ba 01 00
	00		 jne	 $LN25@Extract

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0014b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014d	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00150	0f 84 a8 01 00
	00		 je	 $LN3@Extract
  00156	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  0015a	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  0015d	0f 85 9b 01 00
	00		 jne	 $LN3@Extract
$LL4@Extract:

; 588  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  00163	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00165	3b f9		 cmp	 edi, ecx
  00167	0f 85 be 00 00
	00		 jne	 $LN26@Extract

; 589  :                     _Pnode = _Fixnodeparent->_Right;

  0016d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 590  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  00170	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00174	75 54		 jne	 SHORT $LN95@Extract

; 591  :                         _Pnode->_Color         = _Black;

  00176	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  0017a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 592  :                         _Fixnodeparent->_Color = _Red;

  0017d	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00181	8b 01		 mov	 eax, DWORD PTR [ecx]
  00183	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  00186	8b 01		 mov	 eax, DWORD PTR [ecx]
  00188	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0018c	75 03		 jne	 SHORT $LN61@Extract

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  0018e	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN61@Extract:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00191	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00194	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00197	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0019a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0019c	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0019f	75 0c		 jne	 SHORT $LN62@Extract

; 484  :             _Myhead->_Parent = _Pnode;

  001a1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001a4	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001a6	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001a8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ab	eb 20		 jmp	 SHORT $LN87@Extract
$LN62@Extract:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ad	8b 02		 mov	 eax, DWORD PTR [edx]
  001af	3b 30		 cmp	 esi, DWORD PTR [eax]
  001b1	75 0b		 jne	 SHORT $LN64@Extract

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001b3	89 08		 mov	 DWORD PTR [eax], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001b5	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001b7	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001b9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001bc	eb 0f		 jmp	 SHORT $LN87@Extract
$LN64@Extract:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001be	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c1	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001c3	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001c5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c8	eb 03		 jmp	 SHORT $LN87@Extract
$LN95@Extract:
  001ca	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN87@Extract:

; 595  :                     }
; 596  : 
; 597  :                     if (_Pnode->_Isnil) {

  001cd	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001d1	0f 85 d0 00 00
	00		 jne	 $LN2@Extract

; 598  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 599  :                     } else if (_Pnode->_Left->_Color == _Black
; 600  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001d7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001d9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001dd	75 0d		 jne	 SHORT $LN97@Extract
  001df	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e6	0f 84 b4 00 00
	00		 je	 $LN142@Extract
$LN97@Extract:

; 601  :                         _Pnode->_Color = _Red;
; 602  :                         _Fixnode       = _Fixnodeparent;
; 603  :                     } else { // must rearrange right subtree
; 604  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  001f2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f6	75 15		 jne	 SHORT $LN33@Extract

; 605  :                             _Pnode->_Left->_Color = _Black;

  001f8	8b 01		 mov	 eax, DWORD PTR [ecx]

; 606  :                             _Pnode->_Color        = _Red;
; 607  :                             _Rrotate(_Pnode);

  001fa	51		 push	 ecx
  001fb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001ff	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00203	8b cb		 mov	 ecx, ebx
  00205	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate

; 608  :                             _Pnode = _Fixnodeparent->_Right;

  0020a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 609  :                         }
; 610  : 
; 611  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  0020d	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00210	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 612  :                         _Fixnodeparent->_Color = _Black;

  00213	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 613  :                         _Pnode->_Right->_Color = _Black;

  00217	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 614  :                         _Lrotate(_Fixnodeparent);

  0021a	8b cb		 mov	 ecx, ebx
  0021c	56		 push	 esi
  0021d	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00221	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate

; 615  :                         break; // tree now recolored/rebalanced

  00226	e9 d3 00 00 00	 jmp	 $LN3@Extract
$LN26@Extract:

; 616  :                     }
; 617  :                 } else { // fixup right subtree
; 618  :                     _Pnode = _Fixnodeparent->_Left;
; 619  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  0022b	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0022f	75 55		 jne	 SHORT $LN96@Extract

; 620  :                         _Pnode->_Color         = _Black;

  00231	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00235	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 621  :                         _Fixnodeparent->_Color = _Red;

  00237	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  0023b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0023e	89 06		 mov	 DWORD PTR [esi], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  00240	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00243	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00247	75 03		 jne	 SHORT $LN69@Extract

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00249	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN69@Extract:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0024c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0024f	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00252	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00255	8b 03		 mov	 eax, DWORD PTR [ebx]
  00257	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0025a	75 0c		 jne	 SHORT $LN70@Extract

; 506  :             _Myhead->_Parent = _Pnode;

  0025c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0025f	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00262	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00264	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00266	eb 21		 jmp	 SHORT $LN86@Extract
$LN70@Extract:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00268	8b 02		 mov	 eax, DWORD PTR [edx]
  0026a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0026d	75 0c		 jne	 SHORT $LN72@Extract

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0026f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00272	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00275	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00277	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00279	eb 0e		 jmp	 SHORT $LN86@Extract
$LN72@Extract:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0027b	89 08		 mov	 DWORD PTR [eax], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0027d	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00280	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00282	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00284	eb 03		 jmp	 SHORT $LN86@Extract
$LN96@Extract:
  00286	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN86@Extract:

; 624  :                     }
; 625  : 
; 626  :                     if (_Pnode->_Isnil) {

  00289	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0028d	75 18		 jne	 SHORT $LN2@Extract

; 627  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 628  :                     } else if (_Pnode->_Right->_Color == _Black
; 629  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  0028f	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00292	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00296	75 2c		 jne	 SHORT $LN98@Extract
  00298	8b 01		 mov	 eax, DWORD PTR [ecx]
  0029a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0029e	75 24		 jne	 SHORT $LN98@Extract
$LN142@Extract:

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002a0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002a3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002a7	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a9	8b 4d f4	 mov	 ecx, DWORD PTR tv1093[ebp]
  002ac	8b f9		 mov	 edi, ecx
  002ae	8b 32		 mov	 esi, DWORD PTR [edx]
  002b0	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002b3	74 49		 je	 SHORT $LN3@Extract
  002b5	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  002b9	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  002bc	0f 84 a1 fe ff
	ff		 je	 $LL4@Extract
  002c2	eb 3a		 jmp	 SHORT $LN3@Extract
$LN98@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002c4	8b 01		 mov	 eax, DWORD PTR [ecx]
  002c6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ca	75 17		 jne	 SHORT $LN101@Extract

; 634  :                             _Pnode->_Right->_Color = _Black;

  002cc	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 635  :                             _Pnode->_Color         = _Red;
; 636  :                             _Lrotate(_Pnode);

  002d0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002d3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  002d7	51		 push	 ecx
  002d8	8b cb		 mov	 ecx, ebx
  002da	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate

; 637  :                             _Pnode = _Fixnodeparent->_Left;

  002df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e1	eb 03		 jmp	 SHORT $LN39@Extract
$LN101@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e3	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN39@Extract:

; 638  :                         }
; 639  : 
; 640  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002e6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002e9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 641  :                         _Fixnodeparent->_Color = _Black;

  002ec	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 642  :                         _Pnode->_Left->_Color  = _Black;

  002f0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 643  :                         _Rrotate(_Fixnodeparent);

  002f2	8b cb		 mov	 ecx, ebx
  002f4	56		 push	 esi
  002f5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002f9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate
$LN3@Extract:

; 644  :                         break; // tree now recolored/rebalanced
; 645  :                     }
; 646  :                 }
; 647  :             }
; 648  : 
; 649  :             _Fixnode->_Color = _Black; // stopping node is black

  002fe	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00301	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 650  :         }
; 651  : 
; 652  :         if (0 < _Mysize) {

  00305	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00308	85 c9		 test	 ecx, ecx
  0030a	74 04		 je	 SHORT $LN40@Extract

; 653  :             --_Mysize;

  0030c	49		 dec	 ecx
  0030d	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 654  :         }
; 655  : 
; 656  :         return _Erasednode;
; 657  :     }

  00310	5f		 pop	 edi
  00311	5e		 pop	 esi
  00312	5b		 pop	 ebx
  00313	8b e5		 mov	 esp, ebp
  00315	5d		 pop	 ebp
  00316	c2 04 00	 ret	 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 495  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 506  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 509  :         } else {
; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 473  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 484  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 487  :         } else {
; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >, COMDAT
; _this$ = ecx

; 1085 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN72@Tree
  0000f	90		 npad	 1
$LL8@Tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL8@Tree
$LN72@Tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1092 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 1671 :     void _Tidy() noexcept { // free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 959  :         return _Mysize() == 0;

  00003	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00006	85 c9		 test	 ecx, ecx

; 1672 :         _Orphan_all();
; 1673 : 
; 1674 :         while (!empty()) {

  00008	74 15		 je	 SHORT $LN76@Tidy
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Tidy:

; 1513 :         if (--_Mysize() == 0) {

  00010	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00013	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00016	8b c8		 mov	 ecx, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 f4		 jne	 SHORT $LL2@Tidy

; 1514 :             _Myoff() = 0;

  0001c	89 47 0c	 mov	 DWORD PTR [edi+12], eax
$LN76@Tidy:

; 1675 :             pop_back();
; 1676 :         }
; 1677 : 
; 1678 :         if (_Map() != nullptr) {

  0001f	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00023	74 61		 je	 SHORT $LN25@Tidy
  00025	56		 push	 esi

; 1655 :         for (auto _Block = _Map_distance(); _Block > 0;) { // free storage for a block and destroy pointer

  00026	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00029	85 f6		 test	 esi, esi
  0002b	7e 1d		 jle	 SHORT $LN73@Tidy
  0002d	0f 1f 00	 npad	 3
$LL23@Tidy:

; 1656 :             --_Block;
; 1657 :             auto& _Block_ptr = _Map()[_Block];
; 1658 :             if (_Block_ptr) { // free block

  00030	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00033	4e		 dec	 esi
  00034	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00037	85 c0		 test	 eax, eax
  00039	74 0b		 je	 SHORT $LN21@Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003b	6a 10		 push	 16			; 00000010H
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00043	83 c4 08	 add	 esp, 8
$LN21@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1655 :         for (auto _Block = _Map_distance(); _Block > 0;) { // free storage for a block and destroy pointer

  00046	85 f6		 test	 esi, esi
  00048	7f e6		 jg	 SHORT $LL23@Tidy
$LN73@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00050	c1 e1 02	 shl	 ecx, 2
  00053	5e		 pop	 esi

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00054	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005a	72 12		 jb	 SHORT $LN63@Tidy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00062	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00064	83 c0 fc	 add	 eax, -4			; fffffffcH
  00067	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006a	77 1c		 ja	 SHORT $LN60@Tidy

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006c	8b c2		 mov	 eax, edx
$LN63@Tidy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006e	51		 push	 ecx
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00075	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1667 :         _Map()     = nullptr;

  00078	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1668 :         _Mapsize() = 0;

  0007f	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN25@Tidy:
  00086	5f		 pop	 edi

; 1683 :     }

  00087	c3		 ret	 0
$LN60@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@Tidy:
  0008d	cc		 int	 3
?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ?_Growmap@?$deque@KV?$allocator@K@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
tv465 = -8						; size = 4
__Myptr$1$ = -4						; size = 4
__Count$ = 8						; size = 4
$T1 = 8							; size = 4
?_Growmap@?$deque@KV?$allocator@K@std@@@std@@AAEXI@Z PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap, COMDAT
; _this$ = ecx

; 1603 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1604 :         static_assert(_Minimum_map_size > 1, "The _Xlen() test should always be performed.");
; 1605 : 
; 1606 :         _Alpty _Almap(_Getal());
; 1607 :         size_type _Newsize = _Mapsize() > 0 ? _Mapsize() : 1;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	be 01 00 00 00	 mov	 esi, 1
  00012	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00015	85 c9		 test	 ecx, ecx
  00017	0f 45 f1	 cmovne	 esi, ecx
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Growmap:

; 1608 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _Minimum_map_size) {

  00020	8b c6		 mov	 eax, esi
  00022	2b c1		 sub	 eax, ecx
  00024	3b c2		 cmp	 eax, edx
  00026	72 05		 jb	 SHORT $LN6@Growmap
  00028	83 fe 08	 cmp	 esi, 8
  0002b	73 13		 jae	 SHORT $LN3@Growmap
$LN6@Growmap:

; 1609 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1610 :             if (max_size() / _Block_size - _Newsize < _Newsize) {

  0002d	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH
  00032	2b c6		 sub	 eax, esi
  00034	3b c6		 cmp	 eax, esi
  00036	0f 82 11 01 00
	00		 jb	 $LN55@Growmap

; 1612 :             }
; 1613 : 
; 1614 :             _Newsize *= 2;

  0003c	03 f6		 add	 esi, esi

; 1615 :         }

  0003e	eb e0		 jmp	 SHORT $LL2@Growmap
$LN3@Growmap:
  00040	53		 push	 ebx

; 1616 : 
; 1617 :         size_type _Allocsize = _Newsize;
; 1618 : 
; 1619 :         const auto _Myboff  = static_cast<size_type>(_Myoff() / _Block_size);

  00041	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00044	c1 eb 02	 shr	 ebx, 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00047	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0004d	0f 87 ff 00 00
	00		 ja	 $LN81@Growmap

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00053	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 227  :     if (_Bytes == 0) {

  0005a	85 c0		 test	 eax, eax
  0005c	74 17		 je	 SHORT $LN78@Growmap
$LN23@Growmap:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0005e	50		 push	 eax
  0005f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00064	72 07		 jb	 SHORT $LN24@Growmap

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00066	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006b	eb 05		 jmp	 SHORT $LN79@Growmap
$LN24@Growmap:

; 136  :         return ::operator new(_Bytes);

  0006d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN79@Growmap:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1622 :         _Mapptr _Myptr      = _Newmap + _Map_off;

  00072	83 c4 04	 add	 esp, 4
$LN78@Growmap:
  00075	89 45 08	 mov	 DWORD PTR $T1[ebp], eax
  00078	8d 14 9d 00 00
	00 00		 lea	 edx, DWORD PTR [ebx*4]
  0007f	03 c2		 add	 eax, edx
  00081	89 55 f8	 mov	 DWORD PTR tv465[ebp], edx
  00084	89 45 fc	 mov	 DWORD PTR __Myptr$1$[ebp], eax

; 1623 :         _STL_ASSERT(_Allocsize >= _Newsize, "_Allocsize >= _Newsize");
; 1624 :         while (_Newsize <= _Allocsize / 2) {

  00087	8b c6		 mov	 eax, esi
  00089	d1 e8		 shr	 eax, 1
  0008b	3b f0		 cmp	 esi, eax
  0008d	77 07		 ja	 SHORT $LN5@Growmap
  0008f	90		 npad	 1
$LL4@Growmap:

; 1625 :             _Newsize *= 2;

  00090	03 f6		 add	 esi, esi
  00092	3b f0		 cmp	 esi, eax
  00094	76 fa		 jbe	 SHORT $LL4@Growmap
$LN5@Growmap:

; 1626 :         }
; 1627 : 
; 1628 :         _Count = _Newsize - _Mapsize();

  00096	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00099	2b f0		 sub	 esi, eax

; 1629 : 
; 1630 :         const auto _Map_count = static_cast<_Map_difference_type>(_Count);
; 1631 : 
; 1632 :         _Myptr = _STD uninitialized_copy(_Map() + _Map_off, _Map() + _Map_distance(), _Myptr); // copy initial to end

  0009b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0009e	ff 75 fc	 push	 DWORD PTR __Myptr$1$[ebp]
  000a1	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000a4	50		 push	 eax
  000a5	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>
  000ae	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1633 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000b4	50		 push	 eax
  000b5	3b de		 cmp	 ebx, esi
  000b7	77 23		 ja	 SHORT $LN8@Growmap

; 1634 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Map_off, _Myptr); // copy rest of old

  000b9	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
  000c0	03 c1		 add	 eax, ecx
  000c2	50		 push	 eax
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>

; 1635 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  000c9	8b ce		 mov	 ecx, esi
  000cb	2b cb		 sub	 ecx, ebx
  000cd	51		 push	 ecx
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>

; 1636 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new

  000d4	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  000d7	83 c4 14	 add	 esp, 20			; 00000014H

; 1637 :         } else { // increment not greater than offset of initial block

  000da	eb 24		 jmp	 SHORT $LN9@Growmap
$LN8@Growmap:

; 1638 :             _STD uninitialized_copy(_Map(), _Map() + _Map_count, _Myptr); // copy more old

  000dc	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000df	50		 push	 eax
  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>

; 1639 :             _Myptr = _STD uninitialized_copy(_Map() + _Map_count, _Map() + _Map_off, _Newmap); // copy rest of old

  000e6	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000e9	ff 75 08	 push	 DWORD PTR $T1[ebp]
  000ec	8b 45 f8	 mov	 eax, DWORD PTR tv465[ebp]
  000ef	03 c1		 add	 eax, ecx
  000f1	50		 push	 eax
  000f2	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>
  000fb	83 c4 18	 add	 esp, 24			; 00000018H

; 1640 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  000fe	8b de		 mov	 ebx, esi
$LN9@Growmap:

; 1641 :         }
; 1642 : 
; 1643 :         if (_Map() != nullptr) {

  00100	53		 push	 ebx
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>
  00107	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0010a	83 c4 08	 add	 esp, 8
  0010d	85 c0		 test	 eax, eax
  0010f	74 2a		 je	 SHORT $LN38@Growmap
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00111	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00114	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00117	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011d	72 12		 jb	 SHORT $LN49@Growmap

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0011f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00122	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00125	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00127	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012d	77 28		 ja	 SHORT $LN46@Growmap

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0012f	8b c2		 mov	 eax, edx
$LN49@Growmap:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00131	51		 push	 ecx
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00138	83 c4 08	 add	 esp, 8
$LN38@Growmap:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1648 :         _Map() = _Newmap; // point at new

  0013b	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]

; 1649 :         _Mapsize() += _Count;

  0013e	01 77 08	 add	 DWORD PTR [edi+8], esi
  00141	5b		 pop	 ebx
  00142	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1650 :     }

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 04 00	 ret	 4
$LN55@Growmap:

; 1611 :                 _Xlen(); // result too long

  0014d	e8 00 00 00 00	 call	 ?_Xlen@?$deque@KV?$allocator@K@std@@@std@@CAXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
$LN81@Growmap:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00152	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN46@Growmap:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00157	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@Growmap:
  0015c	cc		 int	 3
?_Growmap@?$deque@KV?$allocator@K@std@@@std@@AAEXI@Z ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ?_Xlen@?$deque@KV?$allocator@K@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@KV?$allocator@K@std@@@std@@CAXXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen, COMDAT

; 1596 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@KV?$allocator@K@std@@@std@@CAXXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 761  :     ~deque() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 762  :         _Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00008	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0000a	6a 08		 push	 8
  0000c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00013	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00018	83 c4 08	 add	 esp, 8
  0001b	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 765  :     }

  0001c	c3		 ret	 0
??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetSkipIndex@CLightManager@@QAEXK@Z
_TEXT	SEGMENT
_dwSkipIndex$ = 8					; size = 4
?SetSkipIndex@CLightManager@@QAEXK@Z PROC		; CLightManager::SetSkipIndex, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   : 	m_dwSkipIndex = dwSkipIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwSkipIndex$[ebp]
  00006	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 90   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetSkipIndex@CLightManager@@QAEXK@Z ENDP		; CLightManager::SetSkipIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetLimitLightCount@CLightManager@@QAEXK@Z
_TEXT	SEGMENT
_dwLightCount$ = 8					; size = 4
?SetLimitLightCount@CLightManager@@QAEXK@Z PROC		; CLightManager::SetLimitLightCount, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 84   : 	m_dwLimitLightCount = dwLightCount;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwLightCount$[ebp]
  00006	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 85   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetLimitLightCount@CLightManager@@QAEXK@Z ENDP		; CLightManager::SetLimitLightCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_c_rv3Position$ = 8					; size = 4
?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z PROC ; CLightManager::SetCenterPosition, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	m_v3CenterPosition = c_rv3Position;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rv3Position$[ebp]
  00006	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0000a	66 0f d6 41 34	 movq	 QWORD PTR [ecx+52], xmm0
  0000f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00012	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 80   : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CLightManager::SetCenterPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?DeleteLight@CLightManager@@QAEXK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_LightID$ = 8						; size = 4
_pkData$ = 8						; size = 4
_pLight$1$ = 8						; size = 4
?DeleteLight@CLightManager@@QAEXK@Z PROC		; CLightManager::DeleteLight, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00009	8d 4d 08	 lea	 ecx, DWORD PTR _LightID$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 45   : {

  0000c	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000d	51		 push	 ecx
  0000e	8d 4d f4	 lea	 ecx, DWORD PTR __Loc$1[ebp]
  00011	51		 push	 ecx
  00012	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00015	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001a	8b 7d fc	 mov	 edi, DWORD PTR __Loc$1[ebp+8]
  0001d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00021	75 5b		 jne	 SHORT $LN1@DeleteLigh
  00023	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00024	8b 5d 08	 mov	 ebx, DWORD PTR _LightID$[ebp]
  00027	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002a	72 51		 jb	 SHORT $LN117@DeleteLigh

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002c	39 7e 20	 cmp	 DWORD PTR [esi+32], edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 48   : 	if (m_LightMap.end() == itor)

  0002f	74 4c		 je	 SHORT $LN117@DeleteLigh

; 49   : 	{
; 50   : 		assert(!"CLightManager::DeleteLight - Failed to find light ID!");
; 51   : 		return;
; 52   : 	}
; 53   : 
; 54   : 	CLight * pLight = itor->second;

  00031	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 55   : 
; 56   : 	pLight->Clear();

  00034	8b c8		 mov	 ecx, eax
  00036	89 45 08	 mov	 DWORD PTR _pLight$1$[ebp], eax
  00039	e8 00 00 00 00	 call	 ?Clear@CLight@@QAEXXZ	; CLight::Clear
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0003e	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 57   : 	m_LightPool.Free(pLight);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _pLight$1$[ebp]
  00044	89 4d 08	 mov	 DWORD PTR _pkData$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00047	3b 46 60	 cmp	 eax, DWORD PTR [esi+96]
  0004a	74 08		 je	 SHORT $LN54@DeleteLigh

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0004c	89 08		 mov	 DWORD PTR [eax], ecx

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  0004e	83 46 5c 04	 add	 DWORD PTR [esi+92], 4

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00052	eb 0d		 jmp	 SHORT $LN53@DeleteLigh
$LN54@DeleteLigh:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00054	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00057	51		 push	 ecx
  00058	50		 push	 eax
  00059	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  0005c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
$LN53@DeleteLigh:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1293 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00061	57		 push	 edi
  00062	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00065	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Extract
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006a	6a 18		 push	 24			; 00000018H
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00072	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 61   : 	ReleaseLightID(LightID);

  00075	8b ce		 mov	 ecx, esi
  00077	53		 push	 ebx
  00078	e8 00 00 00 00	 call	 ?ReleaseLightID@CLightManager@@IAEXK@Z ; CLightManager::ReleaseLightID
$LN117@DeleteLigh:
  0007d	5b		 pop	 ebx
$LN1@DeleteLigh:
  0007e	5f		 pop	 edi

; 62   : }

  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?DeleteLight@CLightManager@@QAEXK@Z ENDP		; CLightManager::DeleteLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?GetLight@CLightManager@@QAEPAVCLight@@K@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_LightID$ = 8						; size = 4
?GetLight@CLightManager@@QAEPAVCLight@@K@Z PROC		; CLightManager::GetLight, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _LightID$[ebp]
  0000a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 66   : 	TLightMap::iterator itor = m_LightMap.find(LightID);

  0000b	8d 71 20	 lea	 esi, DWORD PTR [ecx+32]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 45 fc	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  0001c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00020	75 16		 jne	 SHORT $LN50@GetLight
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00022	8b 4d 08	 mov	 ecx, DWORD PTR _LightID$[ebp]
  00025	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 0e		 jb	 SHORT $LN50@GetLight

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	39 06		 cmp	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 68   : 	if (m_LightMap.end() == itor)

  0002c	74 0a		 je	 SHORT $LN50@GetLight

; 72   : 	}
; 73   : 
; 74   : 	return itor->second;

  0002e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00031	5e		 pop	 esi

; 75   : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN50@GetLight:

; 69   : 	{
; 70   : 		assert(!"CLightManager::SetLightData - Failed to find light ID!");
; 71   : 		return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	5e		 pop	 esi

; 75   : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?GetLight@CLightManager@@QAEPAVCLight@@K@Z ENDP		; CLightManager::GetLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z
_TEXT	SEGMENT
__Loc$2 = -36						; size = 12
$T3 = -24						; size = 8
_pkNewData$4 = -20					; size = 4
$T5 = -20						; size = 4
_ID$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
_poutLightID$ = 12					; size = 4
_LightData$ = 16					; size = 4
?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z PROC ; CLightManager::RegisterLight, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  0002a	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0002d	39 46 58	 cmp	 DWORD PTR [esi+88], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 64   : 			if (m_kVct_pkFree.empty())

  00030	75 5a		 jne	 SHORT $LN4@RegisterLi

; 65   : 			{
; 66   : 				T* pkNewData=new T;

  00032	68 f4 00 00 00	 push	 244			; 000000f4H
  00037	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003c	83 c4 04	 add	 esp, 4
  0003f	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00049	85 c0		 test	 eax, eax
  0004b	74 0b		 je	 SHORT $LN6@RegisterLi
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ??0CLight@@QAE@XZ	; CLight::CLight
  00054	8b f8		 mov	 edi, eax
  00056	eb 02		 jmp	 SHORT $LN7@RegisterLi
$LN6@RegisterLi:
  00058	33 ff		 xor	 edi, edi
$LN7@RegisterLi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0005a	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 67   : 				m_kVct_pkData.push_back(pkNewData);

  0005d	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00060	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	89 7d ec	 mov	 DWORD PTR _pkNewData$4[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0006a	3b 46 54	 cmp	 eax, DWORD PTR [esi+84]
  0006d	74 0b		 je	 SHORT $LN15@RegisterLi

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0006f	89 38		 mov	 DWORD PTR [eax], edi

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  00071	83 46 50 04	 add	 DWORD PTR [esi+80], 4
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  00075	ff 46 68	 inc	 DWORD PTR [esi+104]

; 69   : 				return pkNewData;

  00078	eb 1b		 jmp	 SHORT $LN3@RegisterLi
$LN15@RegisterLi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0007a	8d 55 ec	 lea	 edx, DWORD PTR _pkNewData$4[ebp]
  0007d	52		 push	 edx
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
  00084	8b 7d ec	 mov	 edi, DWORD PTR _pkNewData$4[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  00087	ff 46 68	 inc	 DWORD PTR [esi+104]

; 69   : 				return pkNewData;

  0008a	eb 09		 jmp	 SHORT $LN3@RegisterLi
$LN4@RegisterLi:

; 70   : 			}
; 71   : 
; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  0008c	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1974 :         return _My_data._Mylast[-1];

  0008f	83 c0 fc	 add	 eax, -4			; fffffffcH

; 1744 :         --_Mylast;

  00092	89 46 5c	 mov	 DWORD PTR [esi+92], eax
$LN3@RegisterLi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 38   : 	TLightID ID = NewLightID();

  00095	8b ce		 mov	 ecx, esi
  00097	e8 00 00 00 00	 call	 ?NewLightID@CLightManager@@IAEKXZ ; CLightManager::NewLightID

; 39   : 	pLight->SetParameter(ID, LightData);

  0009c	ff 75 10	 push	 DWORD PTR _LightData$[ebp]
  0009f	8b cf		 mov	 ecx, edi
  000a1	89 45 f0	 mov	 DWORD PTR _ID$[ebp], eax
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z ; CLight::SetParameter
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 197  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  000aa	8d 45 f0	 lea	 eax, DWORD PTR _ID$[ebp]
  000ad	50		 push	 eax
  000ae	8d 45 dc	 lea	 eax, DWORD PTR __Loc$2[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 40   : 	m_LightMap[ID] = pLight;

  000b1	8d 5e 20	 lea	 ebx, DWORD PTR [esi+32]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 197  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  000b4	50		 push	 eax
  000b5	8b cb		 mov	 ecx, ebx
  000b7	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000bc	8b 4d e4	 mov	 ecx, DWORD PTR __Loc$2[ebp+8]
  000bf	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000c3	75 08		 jne	 SHORT $LN28@RegisterLi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  000c5	8b 45 f0	 mov	 eax, DWORD PTR _ID$[ebp]
  000c8	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000cb	73 51		 jae	 SHORT $LN27@RegisterLi
$LN28@RegisterLi:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  000cd	81 7b 04 aa aa
	aa 0a		 cmp	 DWORD PTR [ebx+4], 178956970 ; 0aaaaaaaH
  000d4	74 67		 je	 SHORT $LN141@RegisterLi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 205  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  000d6	8b 33		 mov	 esi, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000d8	89 5d e8	 mov	 DWORD PTR $T3[ebp], ebx

; 136  :         return ::operator new(_Bytes);

  000db	6a 18		 push	 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  000dd	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000e4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  000eb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 478  :         : first(_STD _Tuple_get<_Indices1>(_STD move(_Val1))...),

  000f0	8b 4d f0	 mov	 ecx, DWORD PTR _ID$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000f3	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 478  :         : first(_STD _Tuple_get<_Indices1>(_STD move(_Val1))...),

  000f6	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000f9	8b cb		 mov	 ecx, ebx
  000fb	50		 push	 eax
  000fc	ff 75 e0	 push	 DWORD PTR __Loc$2[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 479  :           second(_STD _Tuple_get<_Indices2>(_STD move(_Val2))...) {}

  000ff	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00106	ff 75 dc	 push	 DWORD PTR __Loc$2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00109	89 30		 mov	 DWORD PTR [eax], esi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0010b	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0010e	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 824  :         this->_Ptr->_Color = _Red;

  00111	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00117	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Insert_node
  0011c	8b c8		 mov	 ecx, eax
$LN27@RegisterLi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 40   : 	m_LightMap[ID] = pLight;

  0011e	89 79 14	 mov	 DWORD PTR [ecx+20], edi

; 41   : 	*poutLightID = ID;

  00121	8b 4d 0c	 mov	 ecx, DWORD PTR _poutLightID$[ebp]
  00124	8b 45 f0	 mov	 eax, DWORD PTR _ID$[ebp]
  00127	89 01		 mov	 DWORD PTR [ecx], eax

; 42   : }

  00129	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00133	59		 pop	 ecx
  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 0c 00	 ret	 12			; 0000000cH
$LN141@RegisterLi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  0013d	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN139@RegisterLi:
  00142	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z$0:
  00000	68 f4 00 00 00	 push	 244			; 000000f4H
  00005	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z$3:
  00012	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT8@@@Z ENDP ; CLightManager::RegisterLight
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?RestoreLight@CLightManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreLight@CLightManager@@QAEXXZ PROC		; CLightManager::RestoreLight, COMDAT
; _this$ = ecx

; 133  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 134  : 	STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING);

  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0000a	68 89 00 00 00	 push	 137			; 00000089H
  0000f	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 136  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  00014	33 f6		 xor	 esi, esi
$LL4@RestoreLig:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00016	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]
  00019	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  0001c	2b d1		 sub	 edx, ecx
  0001e	c1 fa 02	 sar	 edx, 2
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 136  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  00021	39 57 40	 cmp	 DWORD PTR [edi+64], edx
  00024	0f 42 57 40	 cmovb	 edx, DWORD PTR [edi+64]
  00028	3b f2		 cmp	 esi, edx
  0002a	73 0d		 jae	 SHORT $LN3@RestoreLig

; 137  : 		m_LightSortVector[k]->SetDeviceLight(FALSE);

  0002c	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  0002f	6a 00		 push	 0
  00031	e8 00 00 00 00	 call	 ?SetDeviceLight@CLight@@QAEXH@Z ; CLight::SetDeviceLight
  00036	46		 inc	 esi
  00037	eb dd		 jmp	 SHORT $LL4@RestoreLig
$LN3@RestoreLig:
  00039	5f		 pop	 edi

; 138  : }

  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
?RestoreLight@CLightManager@@QAEXXZ ENDP		; CLightManager::RestoreLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?FlushLight@CLightManager@@QAEXXZ
_TEXT	SEGMENT
_itor$ = -12						; size = 4
_pLight$1 = -8						; size = 4
$T2 = -8						; size = 1
__$ArrayPad$ = -4					; size = 4
?FlushLight@CLightManager@@QAEXXZ PROC			; CLightManager::FlushLight, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 08	 mov	 DWORD PTR __$ArrayPad$[esp+12], eax
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b d9		 mov	 ebx, ecx

; 102  : 	Update();

  00019	e8 00 00 00 00	 call	 ?Update@CLightManager@@QAEXXZ ; CLightManager::Update
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0001e	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00021	3b 43 2c	 cmp	 eax, DWORD PTR [ebx+44]
  00024	74 03		 je	 SHORT $LN93@FlushLight

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00026	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
$LN93@FlushLight:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00029	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	89 44 24 0c	 mov	 DWORD PTR _itor$[esp+24], eax
  00032	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 109  : 	for (; itor != m_LightMap.end(); ++itor)

  00034	0f 84 a1 00 00
	00		 je	 $LN3@FlushLight
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL4@FlushLight:

; 110  : 	{
; 111  : 		CLight * pLight = itor->second;

  00040	8b 78 14	 mov	 edi, DWORD PTR [eax+20]
  00043	8b cf		 mov	 ecx, edi
  00045	89 7c 24 10	 mov	 DWORD PTR _pLight$1[esp+24], edi

; 112  : 
; 113  : 		D3DXVECTOR3 v3LightPos(pLight->GetPosition());

  00049	e8 00 00 00 00	 call	 ?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ ; CLight::GetPosition
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0004e	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00052	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00057	f3 0f 5c 53 38	 subss	 xmm2, DWORD PTR [ebx+56]
  0005c	f3 0f 5c 4b 34	 subss	 xmm1, DWORD PTR [ebx+52]
  00061	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00066	f3 0f 5c 43 3c	 subss	 xmm0, DWORD PTR [ebx+60]

; 182  :     z = fz;

  0006b	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0006f	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00073	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00077	f3 0f 58 d1	 addss	 xmm2, xmm1
  0007b	0f 57 c9	 xorps	 xmm1, xmm1
  0007e	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00082	0f 5a c2	 cvtps2pd xmm0, xmm2
  00085	66 0f 2e c8	 ucomisd xmm1, xmm0
  00089	77 06		 ja	 SHORT $LN116@FlushLight
  0008b	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0008f	eb 05		 jmp	 SHORT $LN117@FlushLight
$LN116@FlushLight:
  00091	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN117@FlushLight:
  00096	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 115  : 		pLight->SetDistance(D3DXVec3Length(&v3Distance));

  0009a	51		 push	 ecx
  0009b	8b cf		 mov	 ecx, edi
  0009d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a2	e8 00 00 00 00	 call	 ?SetDistance@CLight@@QAEXM@Z ; CLight::SetDistance
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  000a7	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000aa	3b 43 30	 cmp	 eax, DWORD PTR [ebx+48]
  000ad	74 08		 je	 SHORT $LN69@FlushLight

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000af	89 38		 mov	 DWORD PTR [eax], edi

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  000b1	83 43 2c 04	 add	 DWORD PTR [ebx+44], 4

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000b5	eb 0e		 jmp	 SHORT $LN2@FlushLight
$LN69@FlushLight:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000b7	8d 4c 24 10	 lea	 ecx, DWORD PTR _pLight$1[esp+24]
  000bb	51		 push	 ecx
  000bc	50		 push	 eax
  000bd	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  000c0	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
$LN2@FlushLight:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 198  :         _Mybase::operator++();

  000c5	8d 4c 24 0c	 lea	 ecx, DWORD PTR _itor$[esp+24]
  000c9	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++

; 232  :         return this->_Ptr == _Right._Ptr;

  000ce	8b 44 24 0c	 mov	 eax, DWORD PTR _itor$[esp+24]
  000d2	3b 43 20	 cmp	 eax, DWORD PTR [ebx+32]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 109  : 	for (; itor != m_LightMap.end(); ++itor)

  000d5	0f 85 65 ff ff
	ff		 jne	 $LL4@FlushLight
$LN3@FlushLight:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000db	8b 4b 2c	 mov	 ecx, DWORD PTR [ebx+44]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8373 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  000de	8b c1		 mov	 eax, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000e0	8b 53 28	 mov	 edx, DWORD PTR [ebx+40]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8373 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  000e3	2b c2		 sub	 eax, edx
  000e5	ff 74 24 10	 push	 DWORD PTR $T2[esp+24]
  000e9	c1 f8 02	 sar	 eax, 2
  000ec	50		 push	 eax
  000ed	51		 push	 ecx
  000ee	52		 push	 edx
  000ef	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort_unchecked<CLight * *,LightComp>
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 122  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, TRUE);

  000f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8373 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  000fa	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 122  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, TRUE);

  000fd	6a 01		 push	 1
  000ff	68 89 00 00 00	 push	 137			; 00000089H
  00104	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 124  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  00109	33 ff		 xor	 edi, edi
  0010b	0f 1f 44 00 00	 npad	 5
$LL7@FlushLight:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00110	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  00113	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  00116	2b d1		 sub	 edx, ecx
  00118	c1 fa 02	 sar	 edx, 2
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 124  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  0011b	39 53 40	 cmp	 DWORD PTR [ebx+64], edx
  0011e	0f 42 53 40	 cmovb	 edx, DWORD PTR [ebx+64]
  00122	3b fa		 cmp	 edi, edx
  00124	73 18		 jae	 SHORT $LN6@FlushLight

; 125  : 	{
; 126  : 		m_LightSortVector[k]->Update();

  00126	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
  00129	e8 00 00 00 00	 call	 ?Update@CLight@@QAEXXZ	; CLight::Update

; 127  : 		m_LightSortVector[k]->SetDeviceLight(TRUE);

  0012e	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  00131	6a 01		 push	 1
  00133	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
  00136	e8 00 00 00 00	 call	 ?SetDeviceLight@CLight@@QAEXH@Z ; CLight::SetDeviceLight
  0013b	47		 inc	 edi
  0013c	eb d2		 jmp	 SHORT $LL7@FlushLight
$LN6@FlushLight:

; 128  : 
; 129  : 	}
; 130  : }

  0013e	8b 4c 24 14	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+24]
  00142	5f		 pop	 edi
  00143	5e		 pop	 esi
  00144	5b		 pop	 ebx
  00145	33 cc		 xor	 ecx, esp
  00147	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c3		 ret	 0
?FlushLight@CLightManager@@QAEXXZ ENDP			; CLightManager::FlushLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?Update@CLightManager@@QAEXXZ
_TEXT	SEGMENT
?Update@CLightManager@@QAEXXZ PROC			; CLightManager::Update, COMDAT
; _this$ = ecx

; 159  : 	ms_fCurTime = CTimer::Instance().GetCurrentSecond();

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00006	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  0000b	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?ms_fCurTime@CLightBase@@1MA ; CLightBase::ms_fCurTime

; 160  : }

  00011	c3		 ret	 0
?Update@CLightManager@@QAEXXZ ENDP			; CLightManager::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?Initialize@CLightManager@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?Initialize@CLightManager@@QAEXXZ PROC			; CLightManager::Initialize, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b d9		 mov	 ebx, ecx

; 27   : 	SetSkipIndex(1);

  00009	6a 01		 push	 1
  0000b	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0000e	e8 00 00 00 00	 call	 ?SetSkipIndex@CLightManager@@QAEXK@Z ; CLightManager::SetSkipIndex

; 28   : 
; 29   : 	m_NonUsingLightIDDeque.clear();

  00013	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1577 :         _Tidy();

  00016	e8 00 00 00 00	 call	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 31   : 	m_LightMap.clear();

  0001b	8d 7b 20	 lea	 edi, DWORD PTR [ebx+32]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1363 :         auto _Head = _Scary->_Myhead;

  0001e	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1364 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00020	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00023	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00027	75 27		 jne	 SHORT $LN54@Initialize
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@Initialize:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00030	ff 76 08	 push	 DWORD PTR [esi+8]
  00033	8b cf		 mov	 ecx, edi
  00035	57		 push	 edi
  00036	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0003b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0003d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003f	6a 18		 push	 24			; 00000018H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00047	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 e0		 je	 SHORT $LL10@Initialize
$LN54@Initialize:
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 86   : 			m_kVct_pkFree=m_kVct_pkData;

  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1365 :         _Head->_Parent  = _Head;

  00053	89 5b 04	 mov	 DWORD PTR [ebx+4], ebx

; 1366 :         _Head->_Left    = _Head;

  00056	89 1b		 mov	 DWORD PTR [ebx], ebx

; 1367 :         _Head->_Right   = _Head;

  00058	89 5b 08	 mov	 DWORD PTR [ebx+8], ebx

; 1368 :         _Scary->_Mysize = 0;

  0005b	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 86   : 			m_kVct_pkFree=m_kVct_pkData;

  00062	8d 41 4c	 lea	 eax, DWORD PTR [ecx+76]
  00065	5f		 pop	 edi
  00066	83 c1 58	 add	 ecx, 88			; 00000058H
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1509 :         if (this == _STD addressof(_Right)) {

  0006b	3b c8		 cmp	 ecx, eax
  0006d	74 11		 je	 SHORT $LN49@Initialize

; 1510 :             return *this;
; 1511 :         }
; 1512 : 
; 1513 :         auto& _Al       = _Getal();
; 1514 :         auto& _Right_al = _Right._Getal();
; 1515 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1516 :             if (_Al != _Right_al) {
; 1517 :                 _Tidy();
; 1518 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1519 :             }
; 1520 :         }
; 1521 : 
; 1522 :         _Pocca(_Al, _Right_al);
; 1523 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  0006f	8b 10		 mov	 edx, DWORD PTR [eax]
  00071	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00074	2b c2		 sub	 eax, edx
  00076	c1 f8 02	 sar	 eax, 2
  00079	50		 push	 eax
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ??$_Assign_counted_range@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEXPAPAVCLight@@I@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Assign_counted_range<CLight * *>
$LN49@Initialize:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 33   : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?Initialize@CLightManager@@QAEXXZ ENDP			; CLightManager::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?Destroy@CLightManager@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CLightManager@@QAEXXZ PROC			; CLightManager::Destroy, COMDAT
; _this$ = ecx

; 21   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00005	8b 5f 50	 mov	 ebx, DWORD PTR [edi+80]
  00008	8b 77 4c	 mov	 esi, DWORD PTR [edi+76]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 14		 je	 SHORT $LN5@Destroy
  0000f	90		 npad	 1
$LL6@Destroy:

; 111  : 			delete pkData;

  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00012	85 c9		 test	 ecx, ecx
  00014	74 06		 je	 SHORT $LN4@Destroy
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	6a 01		 push	 1
  0001a	ff 10		 call	 DWORD PTR [eax]
$LN4@Destroy:

; 50   : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4
  0001f	3b f3		 cmp	 esi, ebx
  00021	75 ed		 jne	 SHORT $LL6@Destroy
$LN5@Destroy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00023	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00026	3b 47 50	 cmp	 eax, DWORD PTR [edi+80]
  00029	74 03		 je	 SHORT $LN12@Destroy

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002b	89 47 50	 mov	 DWORD PTR [edi+80], eax
$LN12@Destroy:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0002e	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  00031	3b 47 5c	 cmp	 eax, DWORD PTR [edi+92]
  00034	74 03		 je	 SHORT $LN16@Destroy

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00036	89 47 5c	 mov	 DWORD PTR [edi+92], eax
$LN16@Destroy:
  00039	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 23   : }

  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	c3		 ret	 0
?Destroy@CLightManager@@QAEXXZ ENDP			; CLightManager::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ??1CLightManager@@UAE@XZ
_TEXT	SEGMENT
??1CLightManager@@UAE@XZ PROC				; CLightManager::~CLightManager, COMDAT
; _this$ = ecx

; 17   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 18   : }

  00004	8d 4f 48	 lea	 ecx, DWORD PTR [edi+72]
  00007	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CLightManager@@6BCGraphicBase@@@
  0000d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightManager@@6BCLightBase@@@
  00014	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@
  0001b	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCLight@@@@UAE@XZ ; CDynamicPool<CLight>::~CDynamicPool<CLight>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00020	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00023	85 c0		 test	 eax, eax
  00025	74 41		 je	 SHORT $LN8@CLightMana

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00027	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  0002a	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002c	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0002f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00035	72 12		 jb	 SHORT $LN27@CLightMana

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00037	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003a	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00042	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00045	77 67		 ja	 SHORT $LN24@CLightMana

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00047	8b c2		 mov	 eax, edx
$LN27@CLightMana:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00049	51		 push	 ecx
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00050	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00057	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0005a	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 2082 :             _Myend   = nullptr;

  00061	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
$LN8@CLightMana:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 18   : }

  00068	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  0006b	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 762  :         _Tidy();

  00070	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00073	e8 00 00 00 00	 call	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00078	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007b	6a 08		 push	 8
  0007d	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0007e	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00085	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008a	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 19   : 	{

  0008d	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00094	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, 0 ; CSingleton<CLightManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 18   : }

  0009e	8b cf		 mov	 ecx, edi
  000a0	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightBase@@6B@
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	e9 00 00 00 00	 jmp	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
$LN24@CLightMana:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ae	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN81@CLightMana:
  000b3	cc		 int	 3
??1CLightManager@@UAE@XZ ENDP				; CLightManager::~CLightManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.h
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ??0CLightManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLightManager@@QAE@XZ PROC				; CLightManager::CLightManager, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CLightManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.h

; 22   : 		CLightBase() {};

  00038	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightBase@@6B@
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0003f	8b c7		 mov	 eax, edi
  00041	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@
  00048	a3 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, eax ; CSingleton<CLightManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 11   : {

  0004d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CLightManager@@6BCGraphicBase@@@
  00053	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  00056	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightManager@@6BCLightBase@@@
  0005d	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00064	6a 08		 push	 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 11   : {

  00066	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1231 :     _Container_proxy* _Myproxy = nullptr;

  0006a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 556  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00070	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00077	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0007e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00085	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0008c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 1201 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  00091	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1218 :         _Myproxy            = _New_proxy;

  00098	89 06		 mov	 DWORD PTR [esi], eax

; 1219 :         _New_proxy->_Mycont = this;

  0009a	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 11   : {

  0009c	8d 77 20	 lea	 esi, DWORD PTR [edi+32]
  0009f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000a3	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 11   : {

  000a5	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000a8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000ae	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000b5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ba	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  000bd	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  000bf	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  000c2	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  000c5	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  000cb	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 14   : }

  000cd	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000cf	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  000d6	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  000dd	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 12   : 		{

  000e4	c7 47 48 00 00
	00 00		 mov	 DWORD PTR [edi+72], OFFSET ??_7?$CDynamicPool@VCLight@@@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000eb	c7 47 4c 00 00
	00 00		 mov	 DWORD PTR [edi+76], 0
  000f2	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0
  000f9	c7 47 54 00 00
	00 00		 mov	 DWORD PTR [edi+84], 0
  00100	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0
  00107	c7 47 5c 00 00
	00 00		 mov	 DWORD PTR [edi+92], 0
  0010e	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 14   : 			m_uInitCapacity=0;

  00115	c7 47 64 00 00
	00 00		 mov	 DWORD PTR [edi+100], 0

; 15   : 			m_uUsedCapacity=0;

  0011c	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 12   : 	m_v3CenterPosition			= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00123	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0
  0012a	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
  00131	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0

; 13   : 	m_dwLimitLightCount			= LIGHT_LIMIT_DEFAULT;

  00138	c7 47 40 03 00
	00 00		 mov	 DWORD PTR [edi+64], 3

; 14   : }

  0013f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00142	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00149	59		 pop	 ecx
  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLightManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
__unwindfunclet$??0CLightManager@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1CLightBase@@UAE@XZ	; CLightBase::~CLightBase
__unwindfunclet$??0CLightManager@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCLightManager@@@@UAE@XZ ; CSingleton<CLightManager>::~CSingleton<CLightManager>
__unwindfunclet$??0CLightManager@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00024	e9 00 00 00 00	 jmp	 ??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ ; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
  0002d	cc		 int	 3
__ehhandler$??0CLightManager@@QAE@XZ:
  0002e	90		 npad	 1
  0002f	90		 npad	 1
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00037	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CLightManager@@QAE@XZ
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CLightManager@@QAE@XZ ENDP				; CLightManager::CLightManager
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z PROC	; CSingleton<CLightManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, 0 ; CSingleton<CLightManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN8@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z ENDP	; CSingleton<CLightManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCLightManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCLightManager@@@@UAE@XZ PROC		; CSingleton<CLightManager>::~CSingleton<CLightManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, 0 ; CSingleton<CLightManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCLightManager@@@@UAE@XZ ENDP		; CSingleton<CLightManager>::~CSingleton<CLightManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCLight@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLight@@UAEPAXI@Z PROC				; CLight::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLight@@UAE@XZ	; CLight::~CLight
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 f4 00 00 00	 push	 244			; 000000f4H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCLight@@UAEPAXI@Z ENDP				; CLight::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?BlendRange@CLight@@QAEXMMM@Z
_TEXT	SEGMENT
_fRange$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
_fDelayTime$ = 16					; size = 4
?BlendRange@CLight@@QAEXMMM@Z PROC			; CLight::BlendRange, COMDAT
; _this$ = ecx

; 286  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	m_RangeTransitor.SetTransition(m_d3dLight.Range, fRange, ms_fCurTime + fDelayTime, fBlendTime);

  00003	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fDelayTime$[ebp]
  00008	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 53   : 			m_SourceValue = c_rSourceValue;

  00010	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]

; 54   : 			m_TargetValue = c_rTargetValue;

  00013	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRange$[ebp]
  00018	89 81 ec 00 00
	00		 mov	 DWORD PTR [ecx+236], eax
  0001e	f3 0f 11 81 f0
	00 00 00	 movss	 DWORD PTR [ecx+240], xmm0

; 55   : 			m_fStartTime = fStartTime;

  00026	f3 0f 11 89 e4
	00 00 00	 movss	 DWORD PTR [ecx+228], xmm1

; 56   : 			m_fEndTime = fStartTime + fBlendTime;

  0002e	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fBlendTime$[ebp]
  00033	f3 0f 11 89 e8
	00 00 00	 movss	 DWORD PTR [ecx+232], xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 288  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?BlendRange@CLight@@QAEXMMM@Z ENDP			; CLight::BlendRange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z
_TEXT	SEGMENT
_c_rColor$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
_fDelayTime$ = 16					; size = 4
?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z PROC	; CLight::BlendAmbientColor, COMDAT
; _this$ = ecx

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 912  :     g = c.g;

  00003	f3 0f 10 41 34	 movss	 xmm0, DWORD PTR [ecx+52]
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 53   : 			m_SourceValue = c_rSourceValue;

  00008	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 913  :     b = c.b;

  0000b	f3 0f 10 49 38	 movss	 xmm1, DWORD PTR [ecx+56]

; 914  :     a = c.a;

  00010	f3 0f 10 51 3c	 movss	 xmm2, DWORD PTR [ecx+60]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 282  : 	m_AmbientColorTransitor.SetTransition(Color, c_rColor, ms_fCurTime + fDelayTime, fBlendTime);

  00015	f3 0f 10 5d 10	 movss	 xmm3, DWORD PTR _fDelayTime$[ebp]
  0001a	f3 0f 58 1d 00
	00 00 00	 addss	 xmm3, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 53   : 			m_SourceValue = c_rSourceValue;

  00022	89 81 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], eax

; 54   : 			m_TargetValue = c_rTargetValue;

  00028	8b 45 08	 mov	 eax, DWORD PTR _c_rColor$[ebp]
  0002b	f3 0f 11 81 c0
	00 00 00	 movss	 DWORD PTR [ecx+192], xmm0
  00033	f3 0f 11 89 c4
	00 00 00	 movss	 DWORD PTR [ecx+196], xmm1
  0003b	f3 0f 11 91 c8
	00 00 00	 movss	 DWORD PTR [ecx+200], xmm2
  00043	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 55   : 			m_fStartTime = fStartTime;

  00046	f3 0f 11 99 b4
	00 00 00	 movss	 DWORD PTR [ecx+180], xmm3

; 56   : 			m_fEndTime = fStartTime + fBlendTime;

  0004e	f3 0f 58 5d 0c	 addss	 xmm3, DWORD PTR _fBlendTime$[ebp]
  00053	0f 11 81 cc 00
	00 00		 movups	 XMMWORD PTR [ecx+204], xmm0
  0005a	f3 0f 11 99 b8
	00 00 00	 movss	 DWORD PTR [ecx+184], xmm3
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 283  : }

  00062	5d		 pop	 ebp
  00063	c2 0c 00	 ret	 12			; 0000000cH
?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ENDP	; CLight::BlendAmbientColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z
_TEXT	SEGMENT
_c_rColor$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
_fDelayTime$ = 16					; size = 4
?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z PROC	; CLight::BlendDiffuseColor, COMDAT
; _this$ = ecx

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 912  :     g = c.g;

  00003	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 53   : 			m_SourceValue = c_rSourceValue;

  00008	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 913  :     b = c.b;

  0000b	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]

; 914  :     a = c.a;

  00010	f3 0f 10 51 1c	 movss	 xmm2, DWORD PTR [ecx+28]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 276  : 	m_DiffuseColorTransitor.SetTransition(Color, c_rColor, ms_fCurTime + fDelayTime, fBlendTime);

  00015	f3 0f 10 5d 10	 movss	 xmm3, DWORD PTR _fDelayTime$[ebp]
  0001a	f3 0f 58 1d 00
	00 00 00	 addss	 xmm3, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 53   : 			m_SourceValue = c_rSourceValue;

  00022	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 54   : 			m_TargetValue = c_rTargetValue;

  00028	8b 45 08	 mov	 eax, DWORD PTR _c_rColor$[ebp]
  0002b	f3 0f 11 81 90
	00 00 00	 movss	 DWORD PTR [ecx+144], xmm0
  00033	f3 0f 11 89 94
	00 00 00	 movss	 DWORD PTR [ecx+148], xmm1
  0003b	f3 0f 11 91 98
	00 00 00	 movss	 DWORD PTR [ecx+152], xmm2
  00043	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 55   : 			m_fStartTime = fStartTime;

  00046	f3 0f 11 99 84
	00 00 00	 movss	 DWORD PTR [ecx+132], xmm3

; 56   : 			m_fEndTime = fStartTime + fBlendTime;

  0004e	f3 0f 58 5d 0c	 addss	 xmm3, DWORD PTR _fBlendTime$[ebp]
  00053	0f 11 81 9c 00
	00 00		 movups	 XMMWORD PTR [ecx+156], xmm0
  0005a	f3 0f 11 99 88
	00 00 00	 movss	 DWORD PTR [ecx+136], xmm3
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 277  : }

  00062	5d		 pop	 ebp
  00063	c2 0c 00	 ret	 12			; 0000000cH
?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ENDP	; CLight::BlendDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ
_TEXT	SEGMENT
?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ PROC		; CLight::GetPosition, COMDAT
; _this$ = ecx

; 254  : 	return m_d3dLight.Position;

  00000	8d 41 40	 lea	 eax, DWORD PTR [ecx+64]

; 255  : }

  00003	c3		 ret	 0
?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ ENDP		; CLight::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetPosition@CLight@@QAEXMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
?SetPosition@CLight@@QAEXMMM@Z PROC			; CLight::SetPosition, COMDAT
; _this$ = ecx

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 259  : 	if (m_d3dLight.Position.x == fx && m_d3dLight.Position.y == fy && m_d3dLight.Position.z == fz)

  00003	f3 0f 10 41 40	 movss	 xmm0, DWORD PTR [ecx+64]
  00008	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fx$[ebp]
  0000d	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fz$[ebp]
  00012	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _fy$[ebp]
  00017	0f 2e c3	 ucomiss xmm0, xmm3
  0001a	9f		 lahf
  0001b	f6 c4 44	 test	 ah, 68			; 00000044H
  0001e	7a 1c		 jp	 SHORT $LN2@SetPositio
  00020	f3 0f 10 41 44	 movss	 xmm0, DWORD PTR [ecx+68]
  00025	0f 2e c2	 ucomiss xmm0, xmm2
  00028	9f		 lahf
  00029	f6 c4 44	 test	 ah, 68			; 00000044H
  0002c	7a 0e		 jp	 SHORT $LN2@SetPositio
  0002e	f3 0f 10 41 48	 movss	 xmm0, DWORD PTR [ecx+72]
  00033	0f 2e c1	 ucomiss xmm0, xmm1
  00036	9f		 lahf
  00037	f6 c4 44	 test	 ah, 68			; 00000044H
  0003a	7b 16		 jnp	 SHORT $LN1@SetPositio
$LN2@SetPositio:

; 260  : 		return;
; 261  : 
; 262  : 	m_d3dLight.Position.x = fx;

  0003c	f3 0f 11 59 40	 movss	 DWORD PTR [ecx+64], xmm3

; 263  : 	m_d3dLight.Position.y = fy;

  00041	f3 0f 11 51 44	 movss	 DWORD PTR [ecx+68], xmm2

; 264  : 	m_d3dLight.Position.z = fz;

  00046	f3 0f 11 49 48	 movss	 DWORD PTR [ecx+72], xmm1

; 265  : 	m_isEdited = TRUE;

  0004b	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN1@SetPositio:

; 266  : }

  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CLight@@QAEXMMM@Z ENDP			; CLight::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetRange@CLight@@QAEXM@Z
_TEXT	SEGMENT
_fRange$ = 8						; size = 4
?SetRange@CLight@@QAEXM@Z PROC				; CLight::SetRange, COMDAT
; _this$ = ecx

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  : 	if (m_d3dLight.Range == fRange)

  00003	f3 0f 10 41 58	 movss	 xmm0, DWORD PTR [ecx+88]
  00008	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fRange$[ebp]
  0000d	0f 2e c1	 ucomiss xmm0, xmm1
  00010	9f		 lahf
  00011	f6 c4 44	 test	 ah, 68			; 00000044H
  00014	7b 0c		 jnp	 SHORT $LN1@SetRange

; 246  : 		return;
; 247  : 
; 248  : 	m_d3dLight.Range = fRange;

  00016	f3 0f 11 49 58	 movss	 DWORD PTR [ecx+88], xmm1

; 249  : 	m_isEdited = TRUE;

  0001b	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN1@SetRange:

; 250  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SetRange@CLight@@QAEXM@Z ENDP				; CLight::SetRange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetAmbientColor@CLight@@QAEXMMMM@Z
_TEXT	SEGMENT
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
?SetAmbientColor@CLight@@QAEXMMMM@Z PROC		; CLight::SetAmbientColor, COMDAT
; _this$ = ecx

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 230  : 	if (m_d3dLight.Ambient.r == fr
; 231  : 		&& m_d3dLight.Ambient.g == fg
; 232  : 		&& m_d3dLight.Ambient.b == fb
; 233  : 		&& m_d3dLight.Ambient.a == fa

  00003	f3 0f 10 41 30	 movss	 xmm0, DWORD PTR [ecx+48]
  00008	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _fr$[ebp]
  0000d	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _fa$[ebp]
  00012	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _fb$[ebp]
  00017	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _fg$[ebp]
  0001c	0f 2e c4	 ucomiss xmm0, xmm4
  0001f	9f		 lahf
  00020	f6 c4 44	 test	 ah, 68			; 00000044H
  00023	7a 2a		 jp	 SHORT $LN2@SetAmbient
  00025	f3 0f 10 41 34	 movss	 xmm0, DWORD PTR [ecx+52]
  0002a	0f 2e c3	 ucomiss xmm0, xmm3
  0002d	9f		 lahf
  0002e	f6 c4 44	 test	 ah, 68			; 00000044H
  00031	7a 1c		 jp	 SHORT $LN2@SetAmbient
  00033	f3 0f 10 41 38	 movss	 xmm0, DWORD PTR [ecx+56]
  00038	0f 2e c2	 ucomiss xmm0, xmm2
  0003b	9f		 lahf
  0003c	f6 c4 44	 test	 ah, 68			; 00000044H
  0003f	7a 0e		 jp	 SHORT $LN2@SetAmbient
  00041	f3 0f 10 41 3c	 movss	 xmm0, DWORD PTR [ecx+60]
  00046	0f 2e c1	 ucomiss xmm0, xmm1
  00049	9f		 lahf
  0004a	f6 c4 44	 test	 ah, 68			; 00000044H
  0004d	7b 1b		 jnp	 SHORT $LN1@SetAmbient
$LN2@SetAmbient:

; 234  : 		)
; 235  : 		return;
; 236  : 	m_d3dLight.Ambient.r = fr;

  0004f	f3 0f 11 61 30	 movss	 DWORD PTR [ecx+48], xmm4

; 237  : 	m_d3dLight.Ambient.g = fg;

  00054	f3 0f 11 59 34	 movss	 DWORD PTR [ecx+52], xmm3

; 238  : 	m_d3dLight.Ambient.b = fb;

  00059	f3 0f 11 51 38	 movss	 DWORD PTR [ecx+56], xmm2

; 239  : 	m_d3dLight.Ambient.a = fa;

  0005e	f3 0f 11 49 3c	 movss	 DWORD PTR [ecx+60], xmm1

; 240  : 	m_isEdited = TRUE;

  00063	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN1@SetAmbient:

; 241  : }

  0006a	5d		 pop	 ebp
  0006b	c2 10 00	 ret	 16			; 00000010H
?SetAmbientColor@CLight@@QAEXMMMM@Z ENDP		; CLight::SetAmbientColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetDiffuseColor@CLight@@QAEXMMMM@Z
_TEXT	SEGMENT
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
?SetDiffuseColor@CLight@@QAEXMMMM@Z PROC		; CLight::SetDiffuseColor, COMDAT
; _this$ = ecx

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 215  : 	if (m_d3dLight.Diffuse.r == fr
; 216  : 		&& m_d3dLight.Diffuse.g == fg
; 217  : 		&& m_d3dLight.Diffuse.b == fb
; 218  : 		&& m_d3dLight.Diffuse.a == fa

  00003	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00008	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _fr$[ebp]
  0000d	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _fa$[ebp]
  00012	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _fb$[ebp]
  00017	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _fg$[ebp]
  0001c	0f 2e c4	 ucomiss xmm0, xmm4
  0001f	9f		 lahf
  00020	f6 c4 44	 test	 ah, 68			; 00000044H
  00023	7a 2a		 jp	 SHORT $LN2@SetDiffuse
  00025	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  0002a	0f 2e c3	 ucomiss xmm0, xmm3
  0002d	9f		 lahf
  0002e	f6 c4 44	 test	 ah, 68			; 00000044H
  00031	7a 1c		 jp	 SHORT $LN2@SetDiffuse
  00033	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00038	0f 2e c2	 ucomiss xmm0, xmm2
  0003b	9f		 lahf
  0003c	f6 c4 44	 test	 ah, 68			; 00000044H
  0003f	7a 0e		 jp	 SHORT $LN2@SetDiffuse
  00041	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  00046	0f 2e c1	 ucomiss xmm0, xmm1
  00049	9f		 lahf
  0004a	f6 c4 44	 test	 ah, 68			; 00000044H
  0004d	7b 1b		 jnp	 SHORT $LN1@SetDiffuse
$LN2@SetDiffuse:

; 219  : 		)
; 220  : 		return;
; 221  : 	m_d3dLight.Diffuse.r = fr;

  0004f	f3 0f 11 61 10	 movss	 DWORD PTR [ecx+16], xmm4

; 222  : 	m_d3dLight.Diffuse.g = fg;

  00054	f3 0f 11 59 14	 movss	 DWORD PTR [ecx+20], xmm3

; 223  : 	m_d3dLight.Diffuse.b = fb;

  00059	f3 0f 11 51 18	 movss	 DWORD PTR [ecx+24], xmm2

; 224  : 	m_d3dLight.Diffuse.a = fa;

  0005e	f3 0f 11 49 1c	 movss	 DWORD PTR [ecx+28], xmm1

; 225  : 	m_isEdited = TRUE;

  00063	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN1@SetDiffuse:

; 226  : }

  0006a	5d		 pop	 ebp
  0006b	c2 10 00	 ret	 16			; 00000010H
?SetDiffuseColor@CLight@@QAEXMMMM@Z ENDP		; CLight::SetDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetDeviceLight@CLight@@QAEXH@Z
_TEXT	SEGMENT
_bActive$ = 8						; size = 4
?SetDeviceLight@CLight@@QAEXH@Z PROC			; CLight::SetDeviceLight, COMDAT
; _this$ = ecx

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 196  : 	if (bActive && m_isEdited)

  00003	83 7d 08 00	 cmp	 DWORD PTR _bActive$[ebp], 0
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 20		 je	 SHORT $LN3@SetDeviceL
  0000c	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00010	74 1a		 je	 SHORT $LN3@SetDeviceL

; 197  : 	{
; 198  : 		if (ms_lpd3dDevice)

  00012	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00018	85 d2		 test	 edx, edx
  0001a	74 29		 je	 SHORT $LN4@SetDeviceL

; 199  : 			ms_lpd3dDevice->SetLight(m_LightID, &m_d3dLight);

  0001c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00021	50		 push	 eax
  00022	ff 76 08	 push	 DWORD PTR [esi+8]
  00025	52		 push	 edx
  00026	ff 91 b0 00 00
	00		 call	 DWORD PTR [ecx+176]
$LN3@SetDeviceL:

; 200  : 	}
; 201  : 	if (ms_lpd3dDevice)

  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00032	85 c9		 test	 ecx, ecx
  00034	74 0f		 je	 SHORT $LN4@SetDeviceL

; 202  : 	{
; 203  : 		ms_lpd3dDevice->LightEnable(m_LightID, bActive);

  00036	ff 75 08	 push	 DWORD PTR _bActive$[ebp]
  00039	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003b	ff 76 08	 push	 DWORD PTR [esi+8]
  0003e	51		 push	 ecx
  0003f	ff 90 b8 00 00
	00		 call	 DWORD PTR [eax+184]
$LN4@SetDeviceL:
  00045	5e		 pop	 esi

; 204  : 	}
; 205  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?SetDeviceLight@CLight@@QAEXH@Z ENDP			; CLight::SetDeviceLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetDistance@CLight@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$ = 8						; size = 4
?SetDistance@CLight@@QAEXM@Z PROC			; CLight::SetDistance, COMDAT
; _this$ = ecx

; 269  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 270  : 	m_fDistance = fDistance;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00008	f3 0f 11 41 78	 movss	 DWORD PTR [ecx+120], xmm0

; 271  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetDistance@CLight@@QAEXM@Z ENDP			; CLight::SetDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z
_TEXT	SEGMENT
_id$ = 8						; size = 4
_c_rLight$ = 12						; size = 4
?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z PROC	; CLight::SetParameter, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 209  : 	m_LightID	= id;

  00003	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  00006	56		 push	 esi

; 210  : 	m_d3dLight	= c_rLight;

  00007	8b 75 0c	 mov	 esi, DWORD PTR _c_rLight$[ebp]
  0000a	57		 push	 edi
  0000b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0000e	8d 79 0c	 lea	 edi, DWORD PTR [ecx+12]
  00011	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00016	f3 a5		 rep movsd
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi

; 211  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?SetParameter@CLight@@QAEXKABU_D3DLIGHT8@@@Z ENDP	; CLight::SetParameter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?Update@CLight@@QAEXXZ
_TEXT	SEGMENT
_Color$3 = -20						; size = 16
_Color$4 = -20						; size = 16
$T5 = -20						; size = 16
$T6 = -20						; size = 16
_fRange$7 = -4						; size = 4
_fRange$1$ = -4						; size = 4
?Update@CLight@@QAEXXZ PROC				; CLight::Update, COMDAT
; _this$ = ecx

; 291  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 30   : 			if (fcurTime >= m_fEndTime)

  00003	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 291  : {

  0000b	83 ec 14	 sub	 esp, 20			; 00000014H
  0000e	56		 push	 esi
  0000f	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 30   : 			if (fcurTime >= m_fEndTime)

  00011	f3 0f 10 86 b8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+184]
  00019	0f 2f d0	 comiss	 xmm2, xmm0
  0001c	0f 83 14 01 00
	00		 jae	 $LN4@Update
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 294  : 		if (!m_AmbientColorTransitor.isActive())

  00022	83 be b0 00 00
	00 00		 cmp	 DWORD PTR [esi+176], 0
  00029	75 3f		 jne	 SHORT $LN3@Update

; 295  : 		{
; 296  : 			m_AmbientColorTransitor.SetActive();

  0002b	c7 86 b0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+176], 1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 912  :     g = c.g;

  00035	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]

; 913  :     b = c.b;

  0003a	f3 0f 10 4e 38	 movss	 xmm1, DWORD PTR [esi+56]

; 914  :     a = c.a;

  0003f	f3 0f 10 56 3c	 movss	 xmm2, DWORD PTR [esi+60]
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 48   : 			m_SourceValue = c_rSourceValue;

  00044	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00047	89 86 bc 00 00
	00		 mov	 DWORD PTR [esi+188], eax
  0004d	f3 0f 11 86 c0
	00 00 00	 movss	 DWORD PTR [esi+192], xmm0
  00055	f3 0f 11 8e c4
	00 00 00	 movss	 DWORD PTR [esi+196], xmm1
  0005d	f3 0f 11 96 c8
	00 00 00	 movss	 DWORD PTR [esi+200], xmm2
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 298  : 		}

  00065	e9 c4 00 00 00	 jmp	 $LN115@Update
$LN3@Update:
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 61   : 			if (fcurTime <= m_fStartTime)

  0006a	f3 0f 10 8e b4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+180]
  00072	0f 2f ca	 comiss	 xmm1, xmm2
  00075	0f 83 a3 00 00
	00		 jae	 $LN66@Update

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  0007b	f3 0f 5c c1	 subss	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0007f	f3 0f 10 be bc
	00 00 00	 movss	 xmm7, DWORD PTR [esi+188]
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00087	f3 0f 5c d1	 subss	 xmm2, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0008b	f3 0f 10 ae cc
	00 00 00	 movss	 xmm5, DWORD PTR [esi+204]
  00093	f3 0f 10 b6 c0
	00 00 00	 movss	 xmm6, DWORD PTR [esi+192]
  0009b	f3 0f 5c ef	 subss	 xmm5, xmm7
  0009f	f3 0f 10 a6 c4
	00 00 00	 movss	 xmm4, DWORD PTR [esi+196]
  000a7	f3 0f 10 9e d0
	00 00 00	 movss	 xmm3, DWORD PTR [esi+208]
  000af	f3 0f 10 8e d4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+212]
  000b7	f3 0f 5c de	 subss	 xmm3, xmm6
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  000bb	f3 0f 5e d0	 divss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  000bf	f3 0f 10 86 d8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+216]
  000c7	f3 0f 5c cc	 subss	 xmm1, xmm4
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  000cb	f3 0f 11 55 fc	 movss	 DWORD PTR _fRange$1$[ebp], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  000d0	f3 0f 59 6d fc	 mulss	 xmm5, DWORD PTR _fRange$1$[ebp]

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  000d5	f3 0f 10 96 c8
	00 00 00	 movss	 xmm2, DWORD PTR [esi+200]
  000dd	f3 0f 5c c2	 subss	 xmm0, xmm2

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  000e1	f3 0f 58 ef	 addss	 xmm5, xmm7

; 920  :     r = fr;

  000e5	f3 0f 11 6d ec	 movss	 DWORD PTR $T5[ebp], xmm5

; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  000ea	f3 0f 10 6d fc	 movss	 xmm5, DWORD PTR _fRange$1$[ebp]
  000ef	f3 0f 59 c5	 mulss	 xmm0, xmm5
  000f3	f3 0f 59 dd	 mulss	 xmm3, xmm5
  000f7	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  000fb	f3 0f 58 c2	 addss	 xmm0, xmm2
  000ff	f3 0f 58 de	 addss	 xmm3, xmm6
  00103	f3 0f 58 cc	 addss	 xmm1, xmm4

; 923  :     a = fa;

  00107	f3 0f 11 45 f8	 movss	 DWORD PTR $T5[ebp+12], xmm0
  0010c	f3 0f 11 5d f0	 movss	 DWORD PTR $T5[ebp+4], xmm3
  00111	f3 0f 11 4d f4	 movss	 DWORD PTR $T5[ebp+8], xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  00116	0f 10 45 ec	 movups	 xmm0, XMMWORD PTR $T5[ebp]
  0011a	0f 11 45 ec	 movups	 XMMWORD PTR _Color$3[ebp], xmm0
$LN66@Update:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 304  : 			SetAmbientColor(Color.r, Color.g, Color.b, Color.a);

  0011e	0f 10 45 ec	 movups	 xmm0, XMMWORD PTR _Color$3[ebp]
  00122	83 ec 10	 sub	 esp, 16			; 00000010H
  00125	0f 11 04 24	 movups	 XMMWORD PTR [esp], xmm0
  00129	e8 00 00 00 00	 call	 ?SetAmbientColor@CLight@@QAEXMMMM@Z ; CLight::SetAmbientColor
$LN115@Update:
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 30   : 			if (fcurTime >= m_fEndTime)

  0012e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
$LN4@Update:
  00136	f3 0f 10 86 88
	00 00 00	 movss	 xmm0, DWORD PTR [esi+136]
  0013e	0f 2f d0	 comiss	 xmm2, xmm0
  00141	0f 83 16 01 00
	00		 jae	 $LN7@Update
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 310  : 		if (!m_DiffuseColorTransitor.isActive())

  00147	83 be 80 00 00
	00 00		 cmp	 DWORD PTR [esi+128], 0
  0014e	75 3f		 jne	 SHORT $LN6@Update

; 311  : 		{
; 312  : 			m_DiffuseColorTransitor.SetActive();

  00150	c7 86 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+128], 1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 912  :     g = c.g;

  0015a	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]

; 913  :     b = c.b;

  0015f	f3 0f 10 4e 18	 movss	 xmm1, DWORD PTR [esi+24]

; 914  :     a = c.a;

  00164	f3 0f 10 56 1c	 movss	 xmm2, DWORD PTR [esi+28]
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 48   : 			m_SourceValue = c_rSourceValue;

  00169	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0016c	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax
  00172	f3 0f 11 86 90
	00 00 00	 movss	 DWORD PTR [esi+144], xmm0
  0017a	f3 0f 11 8e 94
	00 00 00	 movss	 DWORD PTR [esi+148], xmm1
  00182	f3 0f 11 96 98
	00 00 00	 movss	 DWORD PTR [esi+152], xmm2
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 314  : 		}

  0018a	e9 c6 00 00 00	 jmp	 $LN116@Update
$LN6@Update:
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 61   : 			if (fcurTime <= m_fStartTime)

  0018f	f3 0f 10 8e 84
	00 00 00	 movss	 xmm1, DWORD PTR [esi+132]
  00197	0f 2f ca	 comiss	 xmm1, xmm2
  0019a	0f 83 a3 00 00
	00		 jae	 $LN70@Update

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  001a0	f3 0f 5c c1	 subss	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  001a4	f3 0f 10 be 8c
	00 00 00	 movss	 xmm7, DWORD PTR [esi+140]
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  001ac	f3 0f 5c d1	 subss	 xmm2, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  001b0	f3 0f 10 ae 9c
	00 00 00	 movss	 xmm5, DWORD PTR [esi+156]
  001b8	f3 0f 10 b6 90
	00 00 00	 movss	 xmm6, DWORD PTR [esi+144]
  001c0	f3 0f 5c ef	 subss	 xmm5, xmm7
  001c4	f3 0f 10 a6 94
	00 00 00	 movss	 xmm4, DWORD PTR [esi+148]
  001cc	f3 0f 10 9e a0
	00 00 00	 movss	 xmm3, DWORD PTR [esi+160]
  001d4	f3 0f 10 8e a4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+164]
  001dc	f3 0f 5c de	 subss	 xmm3, xmm6
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  001e0	f3 0f 5e d0	 divss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  001e4	f3 0f 10 86 a8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+168]
  001ec	f3 0f 5c cc	 subss	 xmm1, xmm4
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  001f0	f3 0f 11 55 fc	 movss	 DWORD PTR _fRange$1$[ebp], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  001f5	f3 0f 59 6d fc	 mulss	 xmm5, DWORD PTR _fRange$1$[ebp]

; 1046 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  001fa	f3 0f 10 96 98
	00 00 00	 movss	 xmm2, DWORD PTR [esi+152]
  00202	f3 0f 5c c2	 subss	 xmm0, xmm2

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  00206	f3 0f 58 ef	 addss	 xmm5, xmm7

; 920  :     r = fr;

  0020a	f3 0f 11 6d ec	 movss	 DWORD PTR $T6[ebp], xmm5

; 1052 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  0020f	f3 0f 10 6d fc	 movss	 xmm5, DWORD PTR _fRange$1$[ebp]
  00214	f3 0f 59 c5	 mulss	 xmm0, xmm5
  00218	f3 0f 59 dd	 mulss	 xmm3, xmm5
  0021c	f3 0f 59 cd	 mulss	 xmm1, xmm5

; 1040 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  00220	f3 0f 58 c2	 addss	 xmm0, xmm2
  00224	f3 0f 58 de	 addss	 xmm3, xmm6
  00228	f3 0f 58 cc	 addss	 xmm1, xmm4

; 923  :     a = fa;

  0022c	f3 0f 11 45 f8	 movss	 DWORD PTR $T6[ebp+12], xmm0
  00231	f3 0f 11 5d f0	 movss	 DWORD PTR $T6[ebp+4], xmm3
  00236	f3 0f 11 4d f4	 movss	 DWORD PTR $T6[ebp+8], xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  0023b	0f 10 45 ec	 movups	 xmm0, XMMWORD PTR $T6[ebp]
  0023f	0f 11 45 ec	 movups	 XMMWORD PTR _Color$4[ebp], xmm0
$LN70@Update:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 319  : 			SetDiffuseColor(Color.r, Color.g, Color.b, Color.a);

  00243	0f 10 45 ec	 movups	 xmm0, XMMWORD PTR _Color$4[ebp]
  00247	83 ec 10	 sub	 esp, 16			; 00000010H
  0024a	8b ce		 mov	 ecx, esi
  0024c	0f 11 04 24	 movups	 XMMWORD PTR [esp], xmm0
  00250	e8 00 00 00 00	 call	 ?SetDiffuseColor@CLight@@QAEXMMMM@Z ; CLight::SetDiffuseColor
$LN116@Update:
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 30   : 			if (fcurTime >= m_fEndTime)

  00255	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
$LN7@Update:
  0025d	f3 0f 10 86 e8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+232]
  00265	0f 2f d0	 comiss	 xmm2, xmm0
  00268	73 7a		 jae	 SHORT $LN10@Update
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 325  : 		if (!m_RangeTransitor.isActive())

  0026a	83 be e0 00 00
	00 00		 cmp	 DWORD PTR [esi+224], 0
  00271	75 18		 jne	 SHORT $LN9@Update

; 326  : 		{
; 327  : 			m_RangeTransitor.SetActive();

  00273	c7 86 e0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+224], 1
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 48   : 			m_SourceValue = c_rSourceValue;

  0027d	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00280	89 86 ec 00 00
	00		 mov	 DWORD PTR [esi+236], eax
  00286	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 337  : }

  00287	8b e5		 mov	 esp, ebp
  00289	5d		 pop	 ebp
  0028a	c3		 ret	 0
$LN9@Update:
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 61   : 			if (fcurTime <= m_fStartTime)

  0028b	f3 0f 10 9e e4
	00 00 00	 movss	 xmm3, DWORD PTR [esi+228]
  00293	0f 2f da	 comiss	 xmm3, xmm2
  00296	73 3a		 jae	 SHORT $LN105@Update

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00298	f3 0f 5c d3	 subss	 xmm2, xmm3

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  0029c	f3 0f 10 8e ec
	00 00 00	 movss	 xmm1, DWORD PTR [esi+236]
  002a4	f3 0f 5c c3	 subss	 xmm0, xmm3
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 334  : 			SetRange(fRange);

  002a8	51		 push	 ecx
  002a9	8b ce		 mov	 ecx, esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 64   : 			float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  002ab	f3 0f 5e d0	 divss	 xmm2, xmm0

; 65   : 			*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  002af	f3 0f 10 86 f0
	00 00 00	 movss	 xmm0, DWORD PTR [esi+240]
  002b7	f3 0f 5c c1	 subss	 xmm0, xmm1
  002bb	f3 0f 59 d0	 mulss	 xmm2, xmm0
  002bf	f3 0f 58 d1	 addss	 xmm2, xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 334  : 			SetRange(fRange);

  002c3	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  002c8	e8 00 00 00 00	 call	 ?SetRange@CLight@@QAEXM@Z ; CLight::SetRange
  002cd	5e		 pop	 esi

; 337  : }

  002ce	8b e5		 mov	 esp, ebp
  002d0	5d		 pop	 ebp
  002d1	c3		 ret	 0
$LN105@Update:
; File C:\Marty 5.5\Src-Client\Client\EterLib\Util.h

; 61   : 			if (fcurTime <= m_fStartTime)

  002d2	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _fRange$7[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 334  : 			SetRange(fRange);

  002d7	51		 push	 ecx
  002d8	8b ce		 mov	 ecx, esi
  002da	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  002df	e8 00 00 00 00	 call	 ?SetRange@CLight@@QAEXM@Z ; CLight::SetRange
$LN10@Update:
  002e4	5e		 pop	 esi

; 337  : }

  002e5	8b e5		 mov	 esp, ebp
  002e7	5d		 pop	 ebp
  002e8	c3		 ret	 0
?Update@CLight@@QAEXXZ ENDP				; CLight::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?Clear@CLight@@QAEXXZ
_TEXT	SEGMENT
?Clear@CLight@@QAEXXZ PROC				; CLight::Clear, COMDAT
; _this$ = ecx

; 188  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 189  : 	if (m_LightID)

  00003	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00007	74 07		 je	 SHORT $LN2@Clear

; 190  : 		SetDeviceLight(FALSE);

  00009	6a 00		 push	 0
  0000b	e8 00 00 00 00	 call	 ?SetDeviceLight@CLight@@QAEXH@Z ; CLight::SetDeviceLight
$LN2@Clear:

; 191  : 	Initialize();

  00010	8b ce		 mov	 ecx, esi
  00012	5e		 pop	 esi
  00013	e9 00 00 00 00	 jmp	 ?Initialize@CLight@@QAEXXZ ; CLight::Initialize
?Clear@CLight@@QAEXXZ ENDP				; CLight::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ?Initialize@CLight@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CLight@@QAEXXZ PROC				; CLight::Initialize, COMDAT
; _this$ = ecx

; 174  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 175  : 	m_LightID	= 0;
; 176  : 	m_isEdited	= TRUE;
; 177  : 	m_fDistance	= 0.0f;
; 178  : 
; 179  : 	memset(&m_d3dLight, 0, sizeof(m_d3dLight));

  00004	6a 68		 push	 104			; 00000068H
  00006	6a 00		 push	 0
  00008	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  0000b	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00012	56		 push	 esi
  00013	c7 47 74 01 00
	00 00		 mov	 DWORD PTR [edi+116], 1
  0001a	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 180  : 
; 181  : 	m_d3dLight.Type			= D3DLIGHT_POINT;
; 182  : 	m_d3dLight.Attenuation0	= 0.0f;

  00029	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0

; 183  : 	m_d3dLight.Attenuation1	= 1.0f;

  00030	c7 47 64 00 00
	80 3f		 mov	 DWORD PTR [edi+100], 1065353216 ; 3f800000H

; 184  : 	m_d3dLight.Attenuation2	= 0.0f;

  00037	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0
  0003e	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 185  : }

  00046	c3		 ret	 0
?Initialize@CLight@@QAEXXZ ENDP				; CLight::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ??1CLight@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CLight@@UAE@XZ PROC					; CLight::~CLight, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CLight@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLight@@6BCGraphicBase@@@
  0002b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLight@@6BCLightBase@@@

; 170  : 	Clear();

  00032	e8 00 00 00 00	 call	 ?Clear@CLight@@QAEXXZ	; CLight::Clear

; 171  : }

  00037	8b ce		 mov	 ecx, esi
  00039	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLightBase@@6B@
  00040	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CLight@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CLight@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CLight@@UAE@XZ ENDP					; CLight::~CLight
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp
;	COMDAT ??0CLight@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLight@@QAE@XZ PROC					; CLight::CLight, COMDAT
; _this$ = ecx

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.h

; 22   : 		CLightBase() {};

  0000f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLightBase@@6B@
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.cpp

; 165  : 	Initialize();

  00016	8b ce		 mov	 ecx, esi
  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLight@@6BCGraphicBase@@@
  0001e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLight@@6BCLightBase@@@
  00025	e8 00 00 00 00	 call	 ?Initialize@CLight@@QAEXXZ ; CLight::Initialize

; 166  : }

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??0CLight@@QAE@XZ ENDP					; CLight::CLight
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCLightBase@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLightBase@@UAEPAXI@Z PROC				; CLightBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLightBase@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GCLightBase@@UAEPAXI@Z ENDP				; CLightBase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpLightManager.h
;	COMDAT ??1CLightBase@@UAE@XZ
_TEXT	SEGMENT
??1CLightBase@@UAE@XZ PROC				; CLightBase::~CLightBase, COMDAT
; _this$ = ecx

; 23   : 		virtual ~CLightBase() {};

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CLightBase@@6B@
  00006	c3		 ret	 0
??1CLightBase@@UAE@XZ ENDP				; CLightBase::~CLightBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 417  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
