; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\GrpFontTexture.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CGraphicFontTexture@@QAE@XZ			; CGraphicFontTexture::CGraphicFontTexture
PUBLIC	??1CGraphicFontTexture@@UAE@XZ			; CGraphicFontTexture::~CGraphicFontTexture
PUBLIC	?Destroy@CGraphicFontTexture@@QAEXXZ		; CGraphicFontTexture::Destroy
PUBLIC	?Create@CGraphicFontTexture@@QAE_NPBDH_N1@Z	; CGraphicFontTexture::Create
PUBLIC	?CreateDeviceObjects@CGraphicFontTexture@@QAE_NXZ ; CGraphicFontTexture::CreateDeviceObjects
PUBLIC	?DestroyDeviceObjects@CGraphicFontTexture@@QAEXXZ ; CGraphicFontTexture::DestroyDeviceObjects
PUBLIC	?CheckTextureIndex@CGraphicFontTexture@@QAE_NK@Z ; CGraphicFontTexture::CheckTextureIndex
PUBLIC	?SelectTexture@CGraphicFontTexture@@QAEXK@Z	; CGraphicFontTexture::SelectTexture
PUBLIC	?UpdateTexture@CGraphicFontTexture@@QAE_NXZ	; CGraphicFontTexture::UpdateTexture
PUBLIC	?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z ; CGraphicFontTexture::GetCharacterInfomation
PUBLIC	?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z ; CGraphicFontTexture::UpdateCharacterInfomation
PUBLIC	?IsEmpty@CGraphicFontTexture@@UBE_NXZ		; CGraphicFontTexture::IsEmpty
PUBLIC	?Initialize@CGraphicFontTexture@@IAEXXZ		; CGraphicFontTexture::Initialize
PUBLIC	?AppendTexture@CGraphicFontTexture@@IAE_NXZ	; CGraphicFontTexture::AppendTexture
PUBLIC	?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z ; CGraphicFontTexture::GetFont
PUBLIC	??1?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAE@XZ ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::~vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >
PUBLIC	?_Xlength@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Xlength
PUBLIC	??1?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::~_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Insert_node
PUBLIC	??1?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAE@XZ ; std::map<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::~map<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Insert_node
PUBLIC	??1?$map@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> > >::~map<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> > >
PUBLIC	??_GCGraphicFontTexture@@UAEPAXI@Z		; CGraphicFontTexture::`scalar deleting destructor'
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
PUBLIC	??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::_Find_lower_bound<unsigned short>
PUBLIC	??$_Find_lower_bound@U?$pair@G_W@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@ABU?$pair@G_W@1@@Z ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::_Find_lower_bound<std::pair<unsigned short,wchar_t> >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
PUBLIC	??$_Emplace_reallocate@ABQAVCGraphicImageTexture@@@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@AAEPAPAVCGraphicImageTexture@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Emplace_reallocate<CGraphicImageTexture * const &>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
PUBLIC	??$_Copy_memmove@PAPAVCGraphicImageTexture@@PAPAV1@@std@@YAPAPAVCGraphicImageTexture@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageTexture * *,CGraphicImageTexture * *>
PUBLIC	??$_Copy_memmove_tail@PAPAVCGraphicImageTexture@@@std@@YAPAPAVCGraphicImageTexture@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CGraphicImageTexture * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_7CGraphicFontTexture@@6B@			; CGraphicFontTexture::`vftable'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CGraphicFontTexture@@6B@			; CGraphicFontTexture::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicFontTexture@@@8			; CGraphicFontTexture `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicFontTexture@@8			; CGraphicFontTexture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicFontTexture@@8			; CGraphicFontTexture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicFontTexture@@8		; CGraphicFontTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicTexture@@8		; CGraphicTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicTexture@@@8			; CGraphicTexture `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicTexture@@8				; CGraphicTexture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicTexture@@8				; CGraphicTexture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@3f800000
PUBLIC	__xmm@000000ff000000ff000000ff000000ff
PUBLIC	__xmm@0000ffff0000ffff0000ffff0000ffff
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_strncpy:PROC
EXTRN	__imp__CreateFontIndirectA@4:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__GetCharABCWidthsFloatW@16:PROC
EXTRN	__imp__GetTextExtentPoint32W@16:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__SetBkColor@8:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__TextOutW@20:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	??0CGraphicTexture@@IAE@XZ:PROC			; CGraphicTexture::CGraphicTexture
EXTRN	??1CGraphicTexture@@MAE@XZ:PROC			; CGraphicTexture::~CGraphicTexture
EXTRN	?Destroy@CGraphicTexture@@IAEXXZ:PROC		; CGraphicTexture::Destroy
EXTRN	?Initialize@CGraphicTexture@@IAEXXZ:PROC	; CGraphicTexture::Initialize
EXTRN	??0CGraphicImageTexture@@QAE@XZ:PROC		; CGraphicImageTexture::CGraphicImageTexture
EXTRN	?Create@CGraphicImageTexture@@QAE_NIIW4_D3DFORMAT@@K@Z:PROC ; CGraphicImageTexture::Create
EXTRN	?Lock@CGraphicImageTexture@@QAE_NPAHPAPAXH@Z:PROC ; CGraphicImageTexture::Lock
EXTRN	?Unlock@CGraphicImageTexture@@QAEXH@Z:PROC	; CGraphicImageTexture::Unlock
EXTRN	??0CGraphicDib@@QAE@XZ:PROC			; CGraphicDib::CGraphicDib
EXTRN	??1CGraphicDib@@UAE@XZ:PROC			; CGraphicDib::~CGraphicDib
EXTRN	?Destroy@CGraphicDib@@QAEXXZ:PROC		; CGraphicDib::Destroy
EXTRN	?Create@CGraphicDib@@QAE_NPAUHDC__@@HH@Z:PROC	; CGraphicDib::Create
EXTRN	?GetWidth@CGraphicDib@@QAEHXZ:PROC		; CGraphicDib::GetWidth
EXTRN	?GetHeight@CGraphicDib@@QAEHXZ:PROC		; CGraphicDib::GetHeight
EXTRN	?GetPointer@CGraphicDib@@QAEPAXXZ:PROC		; CGraphicDib::GetPointer
EXTRN	?GetDCHandle@CGraphicDib@@QAEPAUHDC__@@XZ:PROC	; CGraphicDib::GetDCHandle
EXTRN	??_ECGraphicFontTexture@@UAEPAXI@Z:PROC		; CGraphicFontTexture::`vector deleting destructor'
EXTRN	?GetCharsetFromCodePage@@YAHG@Z:PROC		; GetCharsetFromCodePage
EXTRN	?GetDefaultCodePage@@YAKXZ:PROC			; GetDefaultCodePage
EXTRN	?GetMaxTextureWidth@@YAKXZ:PROC			; GetMaxTextureWidth
EXTRN	?GetMaxTextureHeight@@YAKXZ:PROC		; GetMaxTextureHeight
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_ceil:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_hDC@CGraphicBase@@1PAUHDC__@@A:DWORD	; CGraphicBase::ms_hDC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@0000ffff0000ffff0000ffff0000ffff
CONST	SEGMENT
__xmm@0000ffff0000ffff0000ffff0000ffff DB 0ffH, 0ffH, 00H, 00H, 0ffH, 0ffH
	DB	00H, 00H, 0ffH, 0ffH, 00H, 00H, 0ffH, 0ffH, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000000ff000000ff000000ff000000ff
CONST	SEGMENT
__xmm@000000ff000000ff000000ff000000ff DB 0ffH, 00H, 00H, 00H, 0ffH, 00H, 00H
	DB	00H, 0ffH, 00H, 00H, 00H, 0ffH, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicTexture@@8
rdata$r	SEGMENT
??_R2CGraphicTexture@@8 DD FLAT:??_R1A@?0A@EA@CGraphicTexture@@8 ; CGraphicTexture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicTexture@@8
rdata$r	SEGMENT
??_R3CGraphicTexture@@8 DD 00H				; CGraphicTexture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicTexture@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicTexture@@@8
data$rs	SEGMENT
??_R0?AVCGraphicTexture@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicTexture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicTexture@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicTexture@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicTexture@@8 DD FLAT:??_R0?AVCGraphicTexture@@@8 ; CGraphicTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicTexture@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicFontTexture@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicFontTexture@@8 DD FLAT:??_R0?AVCGraphicFontTexture@@@8 ; CGraphicFontTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicFontTexture@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicFontTexture@@8
rdata$r	SEGMENT
??_R2CGraphicFontTexture@@8 DD FLAT:??_R1A@?0A@EA@CGraphicFontTexture@@8 ; CGraphicFontTexture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicTexture@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicFontTexture@@8
rdata$r	SEGMENT
??_R3CGraphicFontTexture@@8 DD 00H			; CGraphicFontTexture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGraphicFontTexture@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicFontTexture@@@8
data$rs	SEGMENT
??_R0?AVCGraphicFontTexture@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicFontTexture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicFontTexture@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicFontTexture@@6B@
rdata$r	SEGMENT
??_R4CGraphicFontTexture@@6B@ DD 00H			; CGraphicFontTexture::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicFontTexture@@@8
	DD	FLAT:??_R3CGraphicFontTexture@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicFontTexture@@6B@
CONST	SEGMENT
??_7CGraphicFontTexture@@6B@ DD FLAT:??_R4CGraphicFontTexture@@6B@ ; CGraphicFontTexture::`vftable'
	DD	FLAT:??_ECGraphicFontTexture@@UAEPAXI@Z
	DD	FLAT:?IsEmpty@CGraphicFontTexture@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABU?$pair@G_W@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABU?$pair@G_W@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABU?$pair@G_W@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABU?$pair@G_W@std@@@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABU?$pair@G_W@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABU?$pair@G_W@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABU?$pair@G_W@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABU?$pair@G_W@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBGPAUHFONT__@@@std@@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABU?$pair@G_W@std@@$$V@?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@_N@1@ABU?$pair@G_W@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABU?$pair@G_W@std@@$$V@?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@_N@1@ABU?$pair@G_W@1@@Z$2
__ehfuncinfo$??$_Try_emplace@ABU?$pair@G_W@std@@$$V@?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@_N@1@ABU?$pair@G_W@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABU?$pair@G_W@std@@$$V@?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@_N@1@ABU?$pair@G_W@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGPAUHFONT__@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAEAAUSCharacterInfomation@CGraphicFontTexture@@ABU?$pair@G_W@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAEAAUSCharacterInfomation@CGraphicFontTexture@@ABU?$pair@G_W@1@@Z$2
__ehfuncinfo$??A?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAEAAUSCharacterInfomation@CGraphicFontTexture@@ABU?$pair@G_W@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAEAAUSCharacterInfomation@CGraphicFontTexture@@ABU?$pair@G_W@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z$2
__ehfuncinfo$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AppendTexture@CGraphicFontTexture@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AppendTexture@CGraphicFontTexture@@IAE_NXZ$0
__ehfuncinfo$?AppendTexture@CGraphicFontTexture@@IAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AppendTexture@CGraphicFontTexture@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z$2
__ehfuncinfo$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGraphicFontTexture@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CGraphicFontTexture@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0CGraphicFontTexture@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CGraphicFontTexture@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$4
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCGraphicImageTexture@@@std@@YAPAPAVCGraphicImageTexture@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCGraphicImageTexture@@@std@@YAPAPAVCGraphicImageTexture@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CGraphicImageTexture * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCGraphicImageTexture@@@std@@YAPAPAVCGraphicImageTexture@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CGraphicImageTexture * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicImageTexture@@PAPAV1@@std@@YAPAPAVCGraphicImageTexture@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicImageTexture@@PAPAV1@@std@@YAPAPAVCGraphicImageTexture@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicImageTexture * *,CGraphicImageTexture * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCGraphicImageTexture@@@std@@YAPAPAVCGraphicImageTexture@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CGraphicImageTexture * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicImageTexture@@PAPAV1@@std@@YAPAPAVCGraphicImageTexture@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicImageTexture * *,CGraphicImageTexture * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCGraphicImageTexture@@@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@AAEPAPAVCGraphicImageTexture@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv652 = -8						; size = 4
tv650 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCGraphicImageTexture@@@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@AAEPAPAVCGraphicImageTexture@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Emplace_reallocate<CGraphicImageTexture * const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 09 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 c7 00 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 f8	 mov	 DWORD PTR tv652[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b4	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b7	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b9	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	53		 push	 ebx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageTexture@@PAPAV1@@std@@YAPAPAVCGraphicImageTexture@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageTexture * *,CGraphicImageTexture * *>
  000c3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c6	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c8	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageTexture@@PAPAV1@@std@@YAPAPAVCGraphicImageTexture@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageTexture * *,CGraphicImageTexture * *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	85 c0		 test	 eax, eax
  000e0	74 2c		 je	 SHORT $LN72@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN83@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 2a		 ja	 SHORT $LN80@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00102	8b c2		 mov	 eax, edx
$LN83@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
$LN72@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
  00113	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00116	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00118	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR tv652[ebp]
  0011e	03 cf		 add	 ecx, edi

; 903  :     }

  00120	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCGraphicImageTexture@@@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@AAEPAPAVCGraphicImageTexture@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Emplace_reallocate<CGraphicImageTexture * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 30		 push	 48			; 00000030H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@U?$pair@G_W@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@ABU?$pair@G_W@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@U?$pair@G_W@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@ABU?$pair@G_W@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::_Find_lower_bound<std::pair<unsigned short,wchar_t> >, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 3b		 jne	 SHORT $LN18@Find_lower
  0001d	56		 push	 esi
  0001e	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0001f	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  00022	0f b7 37	 movzx	 esi, WORD PTR [edi]
$LL2@Find_lower:
  00025	0f b7 48 10	 movzx	 ecx, WORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00029	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0002b	66 3b ce	 cmp	 cx, si
  0002e	72 18		 jb	 SHORT $LN12@Find_lower
  00030	77 0a		 ja	 SHORT $LN4@Find_lower
  00032	66 8b 48 12	 mov	 cx, WORD PTR [eax+18]
  00036	66 3b 4f 02	 cmp	 cx, WORD PTR [edi+2]
  0003a	72 0c		 jb	 SHORT $LN12@Find_lower
$LN4@Find_lower:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1629 :                 _Result._Bound           = _Trynode;

  0003c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  0003f	b9 01 00 00 00	 mov	 ecx, 1
  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	eb 05		 jmp	 SHORT $LN5@Find_lower
$LN12@Find_lower:

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {
; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  00048	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0004b	33 c9		 xor	 ecx, ecx
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0004d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00050	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00054	74 cf		 je	 SHORT $LL2@Find_lower
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
$LN18@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00058	8b c2		 mov	 eax, edx
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
??$_Find_lower_bound@U?$pair@G_W@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@ABU?$pair@G_W@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::_Find_lower_bound<std::pair<unsigned short,wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@ABG@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@ABG@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::_Find_lower_bound<unsigned short>, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 2a		 jne	 SHORT $LN13@Find_lower
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	0f b7 31	 movzx	 esi, WORD PTR [ecx]
$LL2@Find_lower:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00024	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00026	66 39 70 10	 cmp	 WORD PTR [eax+16], si
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  0002a	73 07		 jae	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0002c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002f	33 c9		 xor	 ecx, ecx

; 1627 :             } else {

  00031	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00033	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00036	b9 01 00 00 00	 mov	 ecx, 1
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0003d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00040	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00044	74 de		 je	 SHORT $LL2@Find_lower
  00046	5e		 pop	 esi
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00047	8b c2		 mov	 eax, edx
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@ABG@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::_Find_lower_bound<unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN39@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 30		 push	 48			; 00000030H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN39@Erase_tree:
  00035	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN39@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN39@Erase_tree:
  00035	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicFontTexture@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicFontTexture@@UAEPAXI@Z PROC			; CGraphicFontTexture::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicFontTexture@@UAE@XZ ; CGraphicFontTexture::~CGraphicFontTexture
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 b4 00 00 00	 push	 180			; 000000b4H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCGraphicFontTexture@@UAEPAXI@Z ENDP			; CGraphicFontTexture::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@@std@@QAE@XZ PROC ; std::map<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> > >::~map<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >
??1?$map@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> > >::~map<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >, COMDAT
; _this$ = ecx

; 1085 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN72@Tree
  0000f	90		 npad	 1
$LL8@Tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL8@Tree
$LN72@Tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1092 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAE@XZ PROC ; std::map<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::~map<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::~_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >
??1?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::~map<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::~_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >, COMDAT
; _this$ = ecx

; 1085 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN72@Tree
  0000f	90		 npad	 1
$LL8@Tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 30		 push	 48			; 00000030H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL8@Tree
$LN72@Tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 30		 push	 48			; 00000030H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1092 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::~_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::~vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00049	5e		 pop	 esi

; 820  :     }

  0004a	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00050	cc		 int	 3
??1?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::~vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z
_TEXT	SEGMENT
$T2 = -108						; size = 12
$T3 = -104						; size = 8
__Loc$4 = -96						; size = 12
__Loc$5 = -96						; size = 12
$T6 = -84						; size = 8
_logFont$7 = -76					; size = 60
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_codePage$ = 8						; size = 2
?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z PROC	; CGraphicFontTexture::GetFont, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0002d	8d 45 08	 lea	 eax, DWORD PTR _codePage$[ebp]
  00030	50		 push	 eax
  00031	8d 45 a0	 lea	 eax, DWORD PTR __Loc$4[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 112  : 	TFontMap::iterator i = m_fontMap.find(codePage);

  00034	8d 7b 74	 lea	 edi, DWORD PTR [ebx+116]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00037	50		 push	 eax
  00038	8b cf		 mov	 ecx, edi
  0003a	e8 00 00 00 00	 call	 ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::_Find_lower_bound<unsigned short>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003f	8b 45 a8	 mov	 eax, DWORD PTR __Loc$4[ebp+8]
  00042	8b 75 08	 mov	 esi, DWORD PTR _codePage$[ebp]
  00045	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00049	75 12		 jne	 SHORT $LN2@GetFont
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0004b	66 3b 70 10	 cmp	 si, WORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004f	72 0c		 jb	 SHORT $LN2@GetFont

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00051	3b 07		 cmp	 eax, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 114  : 	if(i != m_fontMap.end())

  00053	74 08		 je	 SHORT $LN2@GetFont

; 115  : 	{
; 116  : 		hFont = i->second;

  00055	8b 58 14	 mov	 ebx, DWORD PTR [eax+20]

; 117  : 	}

  00058	e9 0b 01 00 00	 jmp	 $LN146@GetFont
$LN2@GetFont:

; 118  : 	else
; 119  : 	{
; 120  : 		LOGFONT logFont;
; 121  : 
; 122  : 		memset(&logFont, 0, sizeof(LOGFONT));
; 123  : 
; 124  : 		logFont.lfHeight			= m_fontSize;

  0005d	8b 83 ac 00 00
	00		 mov	 eax, DWORD PTR [ebx+172]

; 125  : 		logFont.lfEscapement		= 0;
; 126  : 		logFont.lfOrientation		= 0;
; 127  : //		logFont.lfWeight			= FW_NORMAL;
; 128  : 		logFont.lfWeight			= (m_bBold) ? FW_BOLD : FW_NORMAL; //@natanek155

  00063	b9 bc 02 00 00	 mov	 ecx, 700		; 000002bcH
  00068	80 bb b1 00 00
	00 00		 cmp	 BYTE PTR [ebx+177], 0
  0006f	0f 57 c0	 xorps	 xmm0, xmm0
  00072	89 45 b4	 mov	 DWORD PTR _logFont$7[ebp], eax
  00075	b8 90 01 00 00	 mov	 eax, 400		; 00000190H
  0007a	0f 45 c1	 cmovne	 eax, ecx
  0007d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _logFont$7[ebp+4], 0
  00084	89 45 c4	 mov	 DWORD PTR _logFont$7[ebp+16], eax

; 129  : 		logFont.lfItalic			= (BYTE) m_bItalic;

  00087	8a 83 b0 00 00
	00		 mov	 al, BYTE PTR [ebx+176]

; 130  : 		logFont.lfUnderline			= FALSE;
; 131  : 		logFont.lfStrikeOut			= FALSE;
; 132  : 		logFont.lfCharSet			= GetCharsetFromCodePage(codePage);

  0008d	56		 push	 esi
  0008e	66 0f 13 45 d0	 movlpd	 QWORD PTR _logFont$7[ebp+28], xmm0
  00093	66 0f 13 45 d8	 movlpd	 QWORD PTR _logFont$7[ebp+36], xmm0
  00098	66 0f 13 45 e0	 movlpd	 QWORD PTR _logFont$7[ebp+44], xmm0
  0009d	66 0f 13 45 e8	 movlpd	 QWORD PTR _logFont$7[ebp+52], xmm0
  000a2	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _logFont$7[ebp+8], 0
  000a9	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _logFont$7[ebp+12], 0
  000b0	88 45 c8	 mov	 BYTE PTR _logFont$7[ebp+20], al
  000b3	66 c7 45 c9 00
	00		 mov	 WORD PTR _logFont$7[ebp+21], 0
  000b9	e8 00 00 00 00	 call	 ?GetCharsetFromCodePage@@YAHG@Z ; GetCharsetFromCodePage

; 133  : #if defined(__FONT_TEXTURE_FIX__)
; 134  : 		logFont.lfOutPrecision = OUT_TT_PRECIS;
; 135  : #else
; 136  : 		logFont.lfOutPrecision		= OUT_DEFAULT_PRECIS;
; 137  : #endif
; 138  : 		logFont.lfClipPrecision		= CLIP_DEFAULT_PRECIS;
; 139  : 		logFont.lfQuality			= ANTIALIASED_QUALITY;
; 140  : #ifdef ENABLE_FIX_MOBS_LAG
; 141  : 		logFont.lfPitchAndFamily	= VARIABLE_PITCH;
; 142  : #else
; 143  : 		logFont.lfPitchAndFamily	= DEFAULT_PITCH;
; 144  : #endif
; 145  : 		//Tracenf("font: %s", GetFontFaceFromCodePage(codePage));
; 146  : 		strcpy(logFont.lfFaceName, m_fontName); //GetFontFaceFromCodePage(codePage));

  000be	8d 8b 89 00 00
	00		 lea	 ecx, DWORD PTR [ebx+137]
  000c4	88 45 cb	 mov	 BYTE PTR _logFont$7[ebp+23], al
  000c7	8d 55 d0	 lea	 edx, DWORD PTR _logFont$7[ebp+28]
  000ca	c7 45 cc 04 00
	04 00		 mov	 DWORD PTR _logFont$7[ebp+24], 262148 ; 00040004H
  000d1	83 c4 04	 add	 esp, 4
  000d4	2b d1		 sub	 edx, ecx
$LL5@GetFont:
  000d6	8a 01		 mov	 al, BYTE PTR [ecx]
  000d8	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000db	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  000df	84 c0		 test	 al, al
  000e1	75 f3		 jne	 SHORT $LL5@GetFont

; 147  : 		//strcpy(logFont.lfFaceName, GetFontFaceFromCodePage(codePage));
; 148  : 
; 149  : 		hFont = CreateFontIndirect(&logFont);

  000e3	8d 45 b4	 lea	 eax, DWORD PTR _logFont$7[ebp]
  000e6	50		 push	 eax
  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFontIndirectA@4
  000ed	8b d8		 mov	 ebx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000ef	66 89 75 ac	 mov	 WORD PTR $T6[ebp], si
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  000f3	8d 45 ac	 lea	 eax, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000f6	89 5d b0	 mov	 DWORD PTR $T6[ebp+4], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  000f9	50		 push	 eax
  000fa	8d 45 94	 lea	 eax, DWORD PTR $T2[ebp]
  000fd	8b cf		 mov	 ecx, edi
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::_Find_lower_bound<unsigned short>
  00105	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00109	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0010c	66 0f d6 45 a0	 movq	 QWORD PTR __Loc$5[ebp], xmm0

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00111	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00115	75 06		 jne	 SHORT $LN65@GetFont
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00117	66 3b 70 10	 cmp	 si, WORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0011b	73 4b		 jae	 SHORT $LN146@GetFont
$LN65@GetFont:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  0011d	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  00124	74 62		 je	 SHORT $LN170@GetFont

; 1013 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00126	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00128	89 7d 98	 mov	 DWORD PTR $T3[ebp], edi

; 136  :         return ::operator new(_Bytes);

  0012b	6a 18		 push	 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0012d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00134	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  0013b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00140	8b 4d ac	 mov	 ecx, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00143	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00146	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00149	8b cf		 mov	 ecx, edi
  0014b	50		 push	 eax
  0014c	ff 75 a4	 push	 DWORD PTR __Loc$5[ebp+4]

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0014f	89 58 14	 mov	 DWORD PTR [eax+20], ebx

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00152	ff 75 a0	 push	 DWORD PTR __Loc$5[ebp]

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00155	89 30		 mov	 DWORD PTR [eax], esi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00157	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0015a	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 824  :         this->_Ptr->_Color = _Red;

  0015d	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00163	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Insert_node
$LN146@GetFont:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 154  : 	return hFont;

  00168	8b c3		 mov	 eax, ebx

; 155  : }

  0016a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00174	59		 pop	 ecx
  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
  00178	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017b	33 cd		 xor	 ecx, ebp
  0017d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c2 04 00	 ret	 4
$LN170@GetFont:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  00188	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN168@GetFont:
  0018d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z$2:
  00000	8d 4d 98	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z ENDP	; CGraphicFontTexture::GetFont
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?AppendTexture@CGraphicFontTexture@@IAE_NXZ
_TEXT	SEGMENT
_pNewTexture$ = -20					; size = 4
$T2 = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AppendTexture@CGraphicFontTexture@@IAE_NXZ PROC	; CGraphicFontTexture::AppendTexture, COMDAT
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AppendTexture@CGraphicFontTexture@@IAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 f0	 mov	 DWORD PTR _this$1$[ebp], esi

; 159  : 	CGraphicImageTexture * pNewTexture = new CGraphicImageTexture;

  0002d	6a 34		 push	 52			; 00000034H
  0002f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	85 c0		 test	 eax, eax
  00043	74 0b		 je	 SHORT $LN4@AppendText
  00045	8b c8		 mov	 ecx, eax
  00047	e8 00 00 00 00	 call	 ??0CGraphicImageTexture@@QAE@XZ ; CGraphicImageTexture::CGraphicImageTexture
  0004c	8b d8		 mov	 ebx, eax
  0004e	eb 02		 jmp	 SHORT $LN5@AppendText
$LN4@AppendText:
  00050	33 db		 xor	 ebx, ebx
$LN5@AppendText:

; 160  : 
; 161  : 	if (!pNewTexture->Create(m_dib.GetWidth(), m_dib.GetHeight(), D3DFMT_A4R4G4B4))

  00052	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	89 5d ec	 mov	 DWORD PTR _pNewTexture$[ebp], ebx
  0005f	e8 00 00 00 00	 call	 ?GetHeight@CGraphicDib@@QAEHXZ ; CGraphicDib::GetHeight
  00064	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00067	8b f8		 mov	 edi, eax
  00069	e8 00 00 00 00	 call	 ?GetWidth@CGraphicDib@@QAEHXZ ; CGraphicDib::GetWidth
  0006e	6a 03		 push	 3
  00070	6a 1a		 push	 26			; 0000001aH
  00072	57		 push	 edi
  00073	50		 push	 eax
  00074	8b cb		 mov	 ecx, ebx
  00076	e8 00 00 00 00	 call	 ?Create@CGraphicImageTexture@@QAE_NIIW4_D3DFORMAT@@K@Z ; CGraphicImageTexture::Create
  0007b	84 c0		 test	 al, al
  0007d	75 20		 jne	 SHORT $LN2@AppendText

; 162  : 	{
; 163  : 		delete pNewTexture;

  0007f	85 db		 test	 ebx, ebx
  00081	74 08		 je	 SHORT $LN6@AppendText
  00083	8b 03		 mov	 eax, DWORD PTR [ebx]
  00085	8b cb		 mov	 ecx, ebx
  00087	6a 01		 push	 1
  00089	ff 10		 call	 DWORD PTR [eax]
$LN6@AppendText:

; 164  : 		return false;

  0008b	32 c0		 xor	 al, al

; 169  : }

  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
$LN2@AppendText:

; 167  : 	m_pFontTextureVector.push_back(pNewTexture);

  0009f	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  000a2	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 167  : 	m_pFontTextureVector.push_back(pNewTexture);

  000a5	8d 50 60	 lea	 edx, DWORD PTR [eax+96]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  000a8	3b 48 68	 cmp	 ecx, DWORD PTR [eax+104]
  000ab	74 1a		 je	 SHORT $LN12@AppendText

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000ad	89 19		 mov	 DWORD PTR [ecx], ebx

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  000af	83 40 64 04	 add	 DWORD PTR [eax+100], 4
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 168  : 	return true;

  000b3	b0 01		 mov	 al, 1

; 169  : }

  000b5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bf	59		 pop	 ecx
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx
  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
$LN12@AppendText:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000c7	8d 45 ec	 lea	 eax, DWORD PTR _pNewTexture$[ebp]
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	8b ca		 mov	 ecx, edx
  000ce	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicImageTexture@@@?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@AAEPAPAVCGraphicImageTexture@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::_Emplace_reallocate<CGraphicImageTexture * const &>
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 168  : 	return true;

  000d3	b0 01		 mov	 al, 1

; 169  : }

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AppendTexture@CGraphicFontTexture@@IAE_NXZ$0:
  00000	6a 34		 push	 52			; 00000034H
  00002	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?AppendTexture@CGraphicFontTexture@@IAE_NXZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AppendTexture@CGraphicFontTexture@@IAE_NXZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AppendTexture@CGraphicFontTexture@@IAE_NXZ ENDP	; CGraphicFontTexture::AppendTexture
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?Initialize@CGraphicFontTexture@@IAEXXZ
_TEXT	SEGMENT
?Initialize@CGraphicFontTexture@@IAEXXZ PROC		; CGraphicFontTexture::Initialize, COMDAT
; _this$ = ecx

; 18   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 19   : 	CGraphicTexture::Initialize();

  00003	e8 00 00 00 00	 call	 ?Initialize@CGraphicTexture@@IAEXXZ ; CGraphicTexture::Initialize

; 20   : 	m_hFontOld = NULL;

  00008	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0

; 21   : 	m_hFont = NULL;

  0000f	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 22   : 	m_isDirty = false;

  00016	c6 86 88 00 00
	00 00		 mov	 BYTE PTR [esi+136], 0

; 23   : 	m_bItalic = false;

  0001d	66 c7 86 b0 00
	00 00 00 00	 mov	 WORD PTR [esi+176], 0

; 24   : 	m_bBold = false; //@natanek155

  00026	5e		 pop	 esi

; 25   : }

  00027	c3		 ret	 0
?Initialize@CGraphicFontTexture@@IAEXXZ ENDP		; CGraphicFontTexture::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?IsEmpty@CGraphicFontTexture@@UBE_NXZ
_TEXT	SEGMENT
?IsEmpty@CGraphicFontTexture@@UBE_NXZ PROC		; CGraphicFontTexture::IsEmpty, COMDAT
; _this$ = ecx

; 29   : 	return m_fontMap.size() == 0;

  00000	83 79 78 00	 cmp	 DWORD PTR [ecx+120], 0
  00004	0f 94 c0	 sete	 al

; 30   : }

  00007	c3		 ret	 0
?IsEmpty@CGraphicFontTexture@@UBE_NXZ ENDP		; CGraphicFontTexture::IsEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z
_TEXT	SEGMENT
__Loc$2 = -84						; size = 12
$T3 = -72						; size = 8
_width$1$ = -68						; size = 4
_this$GSCopy$1$ = -64					; size = 4
_rhwidth$1$ = -64					; size = 4
_height$1$ = -60					; size = 4
_rhheight$1$ = -60					; size = 4
_keyValue$ = -56					; size = 2
_size$ = -52						; size = 8
_nChrHeight$1$ = -44					; size = 4
tv1299 = -40						; size = 8
tv1305 = -40						; size = 8
tv1309 = -40						; size = 8
tv1315 = -40						; size = 8
tv1319 = -40						; size = 8
tv1325 = -40						; size = 8
_lAdvance$1$ = -36					; size = 4
_size$1$ = -32						; size = 4
tv1217 = -32						; size = 4
tv1219 = -32						; size = 4
_nDIBWidth$1$ = -32					; size = 4
_stABC$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z PROC ; CGraphicFontTexture::UpdateCharacterInfomation, COMDAT
; _this$ = ecx

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	89 7d c0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi

; 222  : 	HDC hDC = m_dib.GetDCHandle();

  0002f	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00032	e8 00 00 00 00	 call	 ?GetDCHandle@CGraphicDib@@QAEPAUHDC__@@XZ ; CGraphicDib::GetDCHandle

; 223  : 	SelectObject(hDC, GetFont(code.first));

  00037	ff 75 08	 push	 DWORD PTR _code$[ebp]
  0003a	8b cf		 mov	 ecx, edi
  0003c	8b f0		 mov	 esi, eax
  0003e	e8 00 00 00 00	 call	 ?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z ; CGraphicFontTexture::GetFont
  00043	50		 push	 eax
  00044	56		 push	 esi
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 224  : 
; 225  : 	wchar_t keyValue = code.second;

  0004b	66 83 7d 0a 08	 cmp	 WORD PTR _code$[ebp+2], 8
  00050	0f b7 4d 0a	 movzx	 ecx, WORD PTR _code$[ebp+2]
  00054	89 4d c8	 mov	 DWORD PTR _keyValue$[ebp], ecx

; 226  : 
; 227  : 	if (keyValue == 0x08)

  00057	75 07		 jne	 SHORT $LN8@UpdateChar

; 228  : 		keyValue = L' ';

  00059	c7 45 c8 20 00
	00 00		 mov	 DWORD PTR _keyValue$[ebp], 32 ; 00000020H
$LN8@UpdateChar:

; 229  : 
; 230  : 	ABCFLOAT	stABC;
; 231  : 	SIZE		size;
; 232  : 
; 233  : 	if (!GetTextExtentPoint32W(hDC, &keyValue, 1, &size) || !GetCharABCWidthsFloatW(hDC, keyValue, keyValue, &stABC))

  00060	8d 45 cc	 lea	 eax, DWORD PTR _size$[ebp]
  00063	50		 push	 eax
  00064	6a 01		 push	 1
  00066	8d 45 c8	 lea	 eax, DWORD PTR _keyValue$[ebp]
  00069	50		 push	 eax
  0006a	56		 push	 esi
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32W@16
  00071	85 c0		 test	 eax, eax
  00073	0f 84 db 03 00
	00		 je	 $LN10@UpdateChar
  00079	0f b7 45 c8	 movzx	 eax, WORD PTR _keyValue$[ebp]
  0007d	8d 4d e4	 lea	 ecx, DWORD PTR _stABC$[ebp]
  00080	51		 push	 ecx
  00081	50		 push	 eax
  00082	50		 push	 eax
  00083	56		 push	 esi
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCharABCWidthsFloatW@16
  0008a	85 c0		 test	 eax, eax
  0008c	0f 84 c2 03 00
	00		 je	 $LN10@UpdateChar

; 235  : 
; 236  : 	size.cx = stABC.abcfB;

  00092	f3 0f 2c 45 e8	 cvttss2si eax, DWORD PTR _stABC$[ebp+4]

; 237  : 	if( stABC.abcfA > 0.0f )

  00097	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _stABC$[ebp]
  0009c	0f 57 c9	 xorps	 xmm1, xmm1
  0009f	0f 2f c1	 comiss	 xmm0, xmm1
  000a2	89 45 e0	 mov	 DWORD PTR _size$1$[ebp], eax
  000a5	76 3f		 jbe	 SHORT $LN11@UpdateChar
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 687  :             return (float)ceil(_X);

  000a7	0f 5a c0	 cvtps2pd xmm0, xmm0
  000aa	83 ec 08	 sub	 esp, 8
  000ad	f2 0f 11 45 d8	 movsd	 QWORD PTR tv1325[ebp], xmm0
  000b2	dd 45 d8	 fld	 QWORD PTR tv1325[ebp]
  000b5	dd 1c 24	 fstp	 QWORD PTR [esp]
  000b8	e8 00 00 00 00	 call	 _ceil
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 238  : 		size.cx += ceilf(stABC.abcfA);

  000bd	f3 0f 2c 45 e8	 cvttss2si eax, DWORD PTR _stABC$[ebp+4]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 687  :             return (float)ceil(_X);

  000c2	83 c4 08	 add	 esp, 8
  000c5	dd 5d d8	 fstp	 QWORD PTR tv1319[ebp]
  000c8	f2 0f 10 4d d8	 movsd	 xmm1, QWORD PTR tv1319[ebp]
  000cd	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
  000d1	66 0f 6e c0	 movd	 xmm0, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 238  : 		size.cx += ceilf(stABC.abcfA);

  000d5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000d8	f3 0f 58 c8	 addss	 xmm1, xmm0
  000dc	f3 0f 2c c1	 cvttss2si eax, xmm1
  000e0	0f 57 c9	 xorps	 xmm1, xmm1
  000e3	89 45 e0	 mov	 DWORD PTR _size$1$[ebp], eax
$LN11@UpdateChar:

; 239  : 	if( stABC.abcfC > 0.0f )

  000e6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _stABC$[ebp+8]
  000eb	0f 2f c1	 comiss	 xmm0, xmm1
  000ee	76 35		 jbe	 SHORT $LN12@UpdateChar
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 687  :             return (float)ceil(_X);

  000f0	0f 5a c0	 cvtps2pd xmm0, xmm0
  000f3	83 ec 08	 sub	 esp, 8
  000f6	f2 0f 11 45 d8	 movsd	 QWORD PTR tv1315[ebp], xmm0
  000fb	dd 45 d8	 fld	 QWORD PTR tv1315[ebp]
  000fe	dd 1c 24	 fstp	 QWORD PTR [esp]
  00101	e8 00 00 00 00	 call	 _ceil
  00106	66 0f 6e 45 e0	 movd	 xmm0, DWORD PTR _size$1$[ebp]
  0010b	83 c4 08	 add	 esp, 8
  0010e	dd 5d d8	 fstp	 QWORD PTR tv1309[ebp]
  00111	f2 0f 10 4d d8	 movsd	 xmm1, QWORD PTR tv1309[ebp]
  00116	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 240  : 		size.cx += ceilf(stABC.abcfC);

  0011a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0011d	f3 0f 58 c8	 addss	 xmm1, xmm0
  00121	f3 0f 2c c1	 cvttss2si eax, xmm1
$LN12@UpdateChar:

; 243  : 	LONG lAdvance = ceilf( stABC.abcfA + stABC.abcfB + stABC.abcfC );

  00125	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _stABC$[ebp]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 687  :             return (float)ceil(_X);

  0012a	83 ec 08	 sub	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 243  : 	LONG lAdvance = ceilf( stABC.abcfA + stABC.abcfB + stABC.abcfC );

  0012d	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _stABC$[ebp+4]
  00132	40		 inc	 eax
  00133	89 45 cc	 mov	 DWORD PTR _size$[ebp], eax
  00136	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _stABC$[ebp+8]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 687  :             return (float)ceil(_X);

  0013b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0013e	f2 0f 11 45 d8	 movsd	 QWORD PTR tv1305[ebp], xmm0
  00143	dd 45 d8	 fld	 QWORD PTR tv1305[ebp]
  00146	dd 1c 24	 fstp	 QWORD PTR [esp]
  00149	e8 00 00 00 00	 call	 _ceil
  0014e	dd 5d d8	 fstp	 QWORD PTR tv1299[ebp]
  00151	f2 0f 10 45 d8	 movsd	 xmm0, QWORD PTR tv1299[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 245  : 	int width = m_dib.GetWidth();

  00156	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 687  :             return (float)ceil(_X);

  00159	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0015d	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 243  : 	LONG lAdvance = ceilf( stABC.abcfA + stABC.abcfB + stABC.abcfC );

  00160	f3 0f 2c c0	 cvttss2si eax, xmm0
  00164	89 45 dc	 mov	 DWORD PTR _lAdvance$1$[ebp], eax

; 245  : 	int width = m_dib.GetWidth();

  00167	e8 00 00 00 00	 call	 ?GetWidth@CGraphicDib@@QAEHXZ ; CGraphicDib::GetWidth

; 246  : 	int height = m_dib.GetHeight();

  0016c	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  0016f	89 45 bc	 mov	 DWORD PTR _width$1$[ebp], eax
  00172	e8 00 00 00 00	 call	 ?GetHeight@CGraphicDib@@QAEHXZ ; CGraphicDib::GetHeight

; 247  : #if defined(__FONT_TEXTURE_FIX__)
; 248  : 	const int padding = 1;
; 249  : #endif
; 250  : 
; 251  : 
; 252  : #if defined(__FONT_TEXTURE_FIX__)
; 253  : 	if (m_x + size.cx + padding >= (width - 1))

  00177	8b 4d cc	 mov	 ecx, DWORD PTR _size$[ebp]
  0017a	8b 57 7c	 mov	 edx, DWORD PTR [edi+124]
  0017d	41		 inc	 ecx
  0017e	03 d1		 add	 edx, ecx
  00180	89 45 c4	 mov	 DWORD PTR _height$1$[ebp], eax
  00183	8b 4d bc	 mov	 ecx, DWORD PTR _width$1$[ebp]
  00186	49		 dec	 ecx
  00187	3b d1		 cmp	 edx, ecx
  00189	7c 5c		 jl	 SHORT $LN14@UpdateChar

; 254  : #else
; 255  : 	if (m_x + size.cx >= (width - 1))
; 256  : #endif
; 257  : 	{
; 258  : 		m_y += (m_step + 1);

  0018b	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  00191	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [edi+128]
  00197	40		 inc	 eax
  00198	03 c8		 add	 ecx, eax

; 259  : 		m_step = 0;

  0019a	c7 87 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+132], 0

; 260  : 		m_x = 0;
; 261  : 
; 262  : #if defined(__FONT_TEXTURE_FIX__)
; 263  : 		if (m_y + size.cy + padding >= (height - 1))

  001a4	8b 45 d0	 mov	 eax, DWORD PTR _size$[ebp+4]
  001a7	40		 inc	 eax
  001a8	89 8f 80 00 00
	00		 mov	 DWORD PTR [edi+128], ecx
  001ae	03 c8		 add	 ecx, eax
  001b0	c7 47 7c 00 00
	00 00		 mov	 DWORD PTR [edi+124], 0
  001b7	8b 45 c4	 mov	 eax, DWORD PTR _height$1$[ebp]
  001ba	48		 dec	 eax
  001bb	3b c8		 cmp	 ecx, eax
  001bd	7c 28		 jl	 SHORT $LN14@UpdateChar

; 264  : #else
; 265  : 		if (m_y + size.cy >= (height - 1))
; 266  : #endif
; 267  : 		{
; 268  : 			if (!UpdateTexture())

  001bf	8b cf		 mov	 ecx, edi
  001c1	e8 00 00 00 00	 call	 ?UpdateTexture@CGraphicFontTexture@@QAE_NXZ ; CGraphicFontTexture::UpdateTexture
  001c6	84 c0		 test	 al, al
  001c8	0f 84 86 02 00
	00		 je	 $LN10@UpdateChar

; 269  : 			{
; 270  : 				return NULL;
; 271  : 			}
; 272  : 
; 273  : 			if (!AppendTexture())

  001ce	8b cf		 mov	 ecx, edi
  001d0	e8 00 00 00 00	 call	 ?AppendTexture@CGraphicFontTexture@@IAE_NXZ ; CGraphicFontTexture::AppendTexture
  001d5	84 c0		 test	 al, al
  001d7	0f 84 77 02 00
	00		 je	 $LN10@UpdateChar

; 274  : 				return NULL;
; 275  : 
; 276  : 			m_y = 0;

  001dd	c7 87 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+128], 0
$LN14@UpdateChar:

; 277  : 		}
; 278  : 	}
; 279  : 
; 280  : 	TextOutW(hDC, m_x, m_y, &keyValue, 1);

  001e7	6a 01		 push	 1
  001e9	8d 45 c8	 lea	 eax, DWORD PTR _keyValue$[ebp]
  001ec	50		 push	 eax
  001ed	ff b7 80 00 00
	00		 push	 DWORD PTR [edi+128]
  001f3	ff 77 7c	 push	 DWORD PTR [edi+124]
  001f6	56		 push	 esi
  001f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutW@20

; 281  : 
; 282  : 	int nChrX;
; 283  : 	int nChrY;
; 284  : 	int nChrWidth = size.cx;
; 285  : 	int nChrHeight = size.cy;

  001fd	8b 45 d0	 mov	 eax, DWORD PTR _size$[ebp+4]

; 286  : 	int nDIBWidth = m_dib.GetWidth();

  00200	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00203	8b 75 cc	 mov	 esi, DWORD PTR _size$[ebp]
  00206	89 45 d4	 mov	 DWORD PTR _nChrHeight$1$[ebp], eax
  00209	e8 00 00 00 00	 call	 ?GetWidth@CGraphicDib@@QAEHXZ ; CGraphicDib::GetWidth

; 287  : 
; 288  : 
; 289  : 	DWORD*pdwDIBData=(DWORD*)m_dib.GetPointer();

  0020e	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00211	89 45 e0	 mov	 DWORD PTR _nDIBWidth$1$[ebp], eax
  00214	e8 00 00 00 00	 call	 ?GetPointer@CGraphicDib@@QAEPAXXZ ; CGraphicDib::GetPointer

; 290  : 	DWORD*pdwDIBBase=pdwDIBData+nDIBWidth*m_y+m_x;

  00219	8b 8f 80 00 00
	00		 mov	 ecx, DWORD PTR [edi+128]
  0021f	0f af 4d e0	 imul	 ecx, DWORD PTR _nDIBWidth$1$[ebp]
  00223	03 4f 7c	 add	 ecx, DWORD PTR [edi+124]

; 291  : 	DWORD*pdwDIBRow;
; 292  : 
; 293  : 	pdwDIBRow=pdwDIBBase;
; 294  : 	for (nChrY=0; nChrY<nChrHeight; ++nChrY, pdwDIBRow+=nDIBWidth)

  00226	83 7d d4 00	 cmp	 DWORD PTR _nChrHeight$1$[ebp], 0
  0022a	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  0022d	0f 8e b6 00 00
	00		 jle	 $LN3@UpdateChar

; 277  : 		}
; 278  : 	}
; 279  : 
; 280  : 	TextOutW(hDC, m_x, m_y, &keyValue, 1);

  00233	8b 45 e0	 mov	 eax, DWORD PTR _nDIBWidth$1$[ebp]
  00236	0f 28 1d 00 00
	00 00		 movaps	 xmm3, XMMWORD PTR __xmm@000000ff000000ff000000ff000000ff
  0023d	0f 28 25 00 00
	00 00		 movaps	 xmm4, XMMWORD PTR __xmm@0000ffff0000ffff0000ffff0000ffff
  00244	0f 28 2d 00 00
	00 00		 movaps	 xmm5, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  0024b	c1 e0 02	 shl	 eax, 2
  0024e	89 45 e0	 mov	 DWORD PTR tv1219[ebp], eax
  00251	8b 45 d4	 mov	 eax, DWORD PTR _nChrHeight$1$[ebp]
  00254	8b 7d e0	 mov	 edi, DWORD PTR tv1219[ebp]
$LL4@UpdateChar:

; 295  : 	{
; 296  : 		for (nChrX=0; nChrX<nChrWidth; ++nChrX)

  00257	33 c9		 xor	 ecx, ecx
  00259	85 f6		 test	 esi, esi
  0025b	7e 7b		 jle	 SHORT $LN2@UpdateChar
  0025d	83 fe 08	 cmp	 esi, 8
  00260	72 5e		 jb	 SHORT $LL172@UpdateChar

; 297  : 		{
; 298  : 			pdwDIBRow[nChrX]=(pdwDIBRow[nChrX]&0xff) ? 0xffff : 0;

  00262	8b c6		 mov	 eax, esi
  00264	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00269	79 05		 jns	 SHORT $LN175@UpdateChar
  0026b	48		 dec	 eax
  0026c	83 c8 f8	 or	 eax, -8			; fffffff8H
  0026f	40		 inc	 eax
$LN175@UpdateChar:
  00270	89 75 e0	 mov	 DWORD PTR tv1217[ebp], esi
  00273	0f 57 d2	 xorps	 xmm2, xmm2
  00276	29 45 e0	 sub	 DWORD PTR tv1217[ebp], eax
  00279	33 c0		 xor	 eax, eax
  0027b	0f 1f 44 00 00	 npad	 5
$LL7@UpdateChar:
  00280	0f 10 04 10	 movups	 xmm0, XMMWORD PTR [eax+edx]
  00284	8d 40 20	 lea	 eax, DWORD PTR [eax+32]
  00287	0f 28 cb	 movaps	 xmm1, xmm3
  0028a	0f 54 c3	 andps	 xmm0, xmm3
  0028d	66 0f 76 c2	 pcmpeqd xmm0, xmm2
  00291	0f 55 c5	 andnps	 xmm0, xmm5
  00294	0f 54 c4	 andps	 xmm0, xmm4
  00297	0f 11 04 8a	 movups	 XMMWORD PTR [edx+ecx*4], xmm0
  0029b	0f 10 44 8a 10	 movups	 xmm0, XMMWORD PTR [edx+ecx*4+16]
  002a0	0f 54 c8	 andps	 xmm1, xmm0
  002a3	66 0f 76 ca	 pcmpeqd xmm1, xmm2
  002a7	0f 55 cd	 andnps	 xmm1, xmm5
  002aa	0f 54 cc	 andps	 xmm1, xmm4
  002ad	0f 11 4c 8a 10	 movups	 XMMWORD PTR [edx+ecx*4+16], xmm1
  002b2	83 c1 08	 add	 ecx, 8
  002b5	3b 4d e0	 cmp	 ecx, DWORD PTR tv1217[ebp]
  002b8	7c c6		 jl	 SHORT $LL7@UpdateChar

; 295  : 	{
; 296  : 		for (nChrX=0; nChrX<nChrWidth; ++nChrX)

  002ba	3b ce		 cmp	 ecx, esi
  002bc	7d 17		 jge	 SHORT $LN173@UpdateChar
  002be	66 90		 npad	 2
$LL172@UpdateChar:

; 297  : 		{
; 298  : 			pdwDIBRow[nChrX]=(pdwDIBRow[nChrX]&0xff) ? 0xffff : 0;

  002c0	0f b6 04 8a	 movzx	 eax, BYTE PTR [edx+ecx*4]
  002c4	f7 d8		 neg	 eax
  002c6	1b c0		 sbb	 eax, eax
  002c8	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  002cd	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
  002d0	41		 inc	 ecx
  002d1	3b ce		 cmp	 ecx, esi
  002d3	7c eb		 jl	 SHORT $LL172@UpdateChar
$LN173@UpdateChar:

; 291  : 	DWORD*pdwDIBRow;
; 292  : 
; 293  : 	pdwDIBRow=pdwDIBBase;
; 294  : 	for (nChrY=0; nChrY<nChrHeight; ++nChrY, pdwDIBRow+=nDIBWidth)

  002d5	8b 45 d4	 mov	 eax, DWORD PTR _nChrHeight$1$[ebp]
$LN2@UpdateChar:
  002d8	03 d7		 add	 edx, edi
  002da	83 e8 01	 sub	 eax, 1
  002dd	89 45 d4	 mov	 DWORD PTR _nChrHeight$1$[ebp], eax
  002e0	0f 85 71 ff ff
	ff		 jne	 $LL4@UpdateChar
  002e6	8b 7d c0	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN3@UpdateChar:
  002e9	66 0f 6e 45 bc	 movd	 xmm0, DWORD PTR _width$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 197  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  002ee	8d 45 08	 lea	 eax, DWORD PTR _code$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 302  : 	float rhwidth = 1.0f / float(width);

  002f1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 197  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  002f9	8d 4f 6c	 lea	 ecx, DWORD PTR [edi+108]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 302  : 	float rhwidth = 1.0f / float(width);

  002fc	0f 5b c0	 cvtdq2ps xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 197  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  002ff	50		 push	 eax
  00300	8d 45 ac	 lea	 eax, DWORD PTR __Loc$2[ebp]
  00303	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 302  : 	float rhwidth = 1.0f / float(width);

  00304	0f 28 d1	 movaps	 xmm2, xmm1
  00307	f3 0f 5e d0	 divss	 xmm2, xmm0
  0030b	66 0f 6e 45 c4	 movd	 xmm0, DWORD PTR _height$1$[ebp]

; 303  : 	float rhheight = 1.0f / float(height);

  00310	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00313	f3 0f 11 55 c0	 movss	 DWORD PTR _rhwidth$1$[ebp], xmm2
  00318	f3 0f 5e c8	 divss	 xmm1, xmm0
  0031c	f3 0f 11 4d c4	 movss	 DWORD PTR _rhheight$1$[ebp], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 197  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00321	e8 00 00 00 00	 call	 ??$_Find_lower_bound@U?$pair@G_W@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@ABU?$pair@G_W@1@@Z ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::_Find_lower_bound<std::pair<unsigned short,wchar_t> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00326	8b 4d b4	 mov	 ecx, DWORD PTR __Loc$2[ebp+8]
  00329	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0032d	75 18		 jne	 SHORT $LN28@UpdateChar
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0032f	0f b7 51 10	 movzx	 edx, WORD PTR [ecx+16]
  00333	8b 45 08	 mov	 eax, DWORD PTR _code$[ebp]
  00336	66 3b c2	 cmp	 ax, dx
  00339	72 0c		 jb	 SHORT $LN28@UpdateChar
  0033b	77 70		 ja	 SHORT $LN27@UpdateChar
  0033d	66 8b 45 0a	 mov	 ax, WORD PTR _code$[ebp+2]
  00341	66 3b 41 12	 cmp	 ax, WORD PTR [ecx+18]
  00345	73 66		 jae	 SHORT $LN27@UpdateChar
$LN28@UpdateChar:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  00347	81 7f 70 55 55
	55 05		 cmp	 DWORD PTR [edi+112], 89478485 ; 05555555H
  0034e	0f 84 1f 01 00
	00		 je	 $LN178@UpdateChar
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 205  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00354	8b 77 6c	 mov	 esi, DWORD PTR [edi+108]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00357	8d 47 6c	 lea	 eax, DWORD PTR [edi+108]
  0035a	89 45 b8	 mov	 DWORD PTR $T3[ebp], eax

; 136  :         return ::operator new(_Bytes);

  0035d	6a 30		 push	 48			; 00000030H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0035f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00366	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  0036d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 478  :         : first(_STD _Tuple_get<_Indices1>(_STD move(_Val1))...),

  00372	8b 4d 08	 mov	 ecx, DWORD PTR _code$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00375	83 c4 04	 add	 esp, 4
  00378	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 478  :         : first(_STD _Tuple_get<_Indices1>(_STD move(_Val1))...),

  0037b	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0037e	8d 4f 6c	 lea	 ecx, DWORD PTR [edi+108]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 479  :           second(_STD _Tuple_get<_Indices2>(_STD move(_Val2))...) {}

  00381	0f 11 40 14	 movups	 XMMWORD PTR [eax+20], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00385	50		 push	 eax
  00386	ff 75 b0	 push	 DWORD PTR __Loc$2[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 479  :           second(_STD _Tuple_get<_Indices2>(_STD move(_Val2))...) {}

  00389	66 0f d6 40 24	 movq	 QWORD PTR [eax+36], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0038e	ff 75 ac	 push	 DWORD PTR __Loc$2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 479  :           second(_STD _Tuple_get<_Indices2>(_STD move(_Val2))...) {}

  00391	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00398	89 30		 mov	 DWORD PTR [eax], esi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0039a	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0039d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 824  :         this->_Ptr->_Color = _Red;

  003a0	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  003a6	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Insert_node
  003ab	8b c8		 mov	 ecx, eax
$LN27@UpdateChar:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  003ad	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  003b0	2b 47 60	 sub	 eax, DWORD PTR [edi+96]
  003b3	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 307  : 	rNewCharInfo.index = m_pFontTextureVector.size() - 1;

  003b6	48		 dec	 eax
  003b7	66 89 41 14	 mov	 WORD PTR [ecx+20], ax

; 308  : 	rNewCharInfo.width = size.cx;

  003bb	0f b7 45 cc	 movzx	 eax, WORD PTR _size$[ebp]
  003bf	66 89 41 16	 mov	 WORD PTR [ecx+22], ax

; 309  : 	rNewCharInfo.height = size.cy;

  003c3	0f b7 45 d0	 movzx	 eax, WORD PTR _size$[ebp+4]
  003c7	66 89 41 18	 mov	 WORD PTR [ecx+24], ax
  003cb	66 0f 6e 47 7c	 movd	 xmm0, DWORD PTR [edi+124]

; 310  : 	rNewCharInfo.left = float(m_x) * rhwidth;

  003d0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003d3	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _rhwidth$1$[ebp]
  003d8	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0
  003dd	66 0f 6e 87 80
	00 00 00	 movd	 xmm0, DWORD PTR [edi+128]

; 311  : 	rNewCharInfo.top = float(m_y) * rhheight;

  003e5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003e8	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _rhheight$1$[ebp]
  003ed	f3 0f 11 41 20	 movss	 DWORD PTR [ecx+32], xmm0

; 312  : 	rNewCharInfo.right = float(m_x+size.cx) * rhwidth;

  003f2	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]
  003f5	03 45 cc	 add	 eax, DWORD PTR _size$[ebp]
  003f8	66 0f 6e c0	 movd	 xmm0, eax
  003fc	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003ff	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _rhwidth$1$[ebp]
  00404	f3 0f 11 41 24	 movss	 DWORD PTR [ecx+36], xmm0

; 313  : 	rNewCharInfo.bottom = float(m_y+size.cy) * rhheight;

  00409	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
  0040f	03 45 d0	 add	 eax, DWORD PTR _size$[ebp+4]
  00412	66 0f 6e c0	 movd	 xmm0, eax
  00416	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00419	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _rhheight$1$[ebp]
  0041e	f3 0f 11 41 28	 movss	 DWORD PTR [ecx+40], xmm0
  00423	66 0f 6e 45 dc	 movd	 xmm0, DWORD PTR _lAdvance$1$[ebp]

; 314  : 	rNewCharInfo.advance = (float) lAdvance;

  00428	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0042b	f3 0f 11 41 2c	 movss	 DWORD PTR [ecx+44], xmm0

; 315  : 
; 316  : #if defined(__FONT_TEXTURE_FIX__)
; 317  : 	m_x += size.cx + padding;

  00430	8b 45 cc	 mov	 eax, DWORD PTR _size$[ebp]
  00433	40		 inc	 eax
  00434	01 47 7c	 add	 DWORD PTR [edi+124], eax

; 318  : #else
; 319  : 	m_x += size.cx;
; 320  : #endif
; 321  : 
; 322  : 	if (m_step < size.cy)

  00437	8b 45 d0	 mov	 eax, DWORD PTR _size$[ebp+4]
  0043a	39 87 84 00 00
	00		 cmp	 DWORD PTR [edi+132], eax
  00440	7d 06		 jge	 SHORT $LN17@UpdateChar

; 323  : 		m_step = size.cy;	

  00442	89 87 84 00 00
	00		 mov	 DWORD PTR [edi+132], eax
$LN17@UpdateChar:

; 324  : 
; 325  : 	m_isDirty = true;

  00448	c6 87 88 00 00
	00 01		 mov	 BYTE PTR [edi+136], 1

; 326  : 
; 327  : 	return &rNewCharInfo;

  0044f	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00452	eb 02		 jmp	 SHORT $LN1@UpdateChar
$LN10@UpdateChar:

; 234  : 		return NULL;

  00454	33 c0		 xor	 eax, eax
$LN1@UpdateChar:

; 328  : }

  00456	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00459	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00460	59		 pop	 ecx
  00461	5f		 pop	 edi
  00462	5e		 pop	 esi
  00463	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00466	33 cd		 xor	 ecx, ebp
  00468	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0046d	8b e5		 mov	 esp, ebp
  0046f	5d		 pop	 ebp
  00470	c2 04 00	 ret	 4
$LN178@UpdateChar:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  00473	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN176@UpdateChar:
  00478	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z$2:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z ENDP ; CGraphicFontTexture::UpdateCharacterInfomation
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z
_TEXT	SEGMENT
__Loc$1 = -16						; size = 12
_this$1$ = -4						; size = 4
_codePage$ = 8						; size = 2
_code$ = 8						; size = 4
_keyValue$ = 12						; size = 2
?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z PROC ; CGraphicFontTexture::GetCharacterInfomation, COMDAT
; _this$ = ecx

; 205  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	8b c1		 mov	 eax, ecx
  00008	53		 push	 ebx
  00009	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0000a	66 8b 75 08	 mov	 si, WORD PTR _codePage$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 208  : 	TCharacterInfomationMap::iterator f = m_charInfoMap.find(code);

  0000e	8d 58 6c	 lea	 ebx, DWORD PTR [eax+108]
  00011	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  00014	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00015	66 8b 7d 0c	 mov	 di, WORD PTR _keyValue$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00019	8d 45 08	 lea	 eax, DWORD PTR _code$[ebp]
  0001c	50		 push	 eax
  0001d	8d 45 f0	 lea	 eax, DWORD PTR __Loc$1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00020	66 89 75 08	 mov	 WORD PTR _code$[ebp], si
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00024	50		 push	 eax
  00025	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00027	66 89 7d 0a	 mov	 WORD PTR _code$[ebp+2], di
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0002b	e8 00 00 00 00	 call	 ??$_Find_lower_bound@U?$pair@G_W@std@@@?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@ABU?$pair@G_W@1@@Z ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::_Find_lower_bound<std::pair<unsigned short,wchar_t> >

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00030	8b 45 f8	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  00033	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00037	75 21		 jne	 SHORT $LN59@GetCharact
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00039	0f b7 48 10	 movzx	 ecx, WORD PTR [eax+16]
  0003d	66 3b f1	 cmp	 si, cx
  00040	72 18		 jb	 SHORT $LN59@GetCharact
  00042	77 06		 ja	 SHORT $LN58@GetCharact
  00044	66 3b 78 12	 cmp	 di, WORD PTR [eax+18]
  00048	72 10		 jb	 SHORT $LN59@GetCharact
$LN58@GetCharact:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0004a	39 03		 cmp	 DWORD PTR [ebx], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 210  : 	if (m_charInfoMap.end() == f)

  0004c	74 0c		 je	 SHORT $LN59@GetCharact

; 213  : 	}
; 214  : 	else
; 215  : 	{
; 216  : 		return &f->second;
; 217  : 	}
; 218  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	83 c0 14	 add	 eax, 20			; 00000014H
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
$LN59@GetCharact:

; 211  : 	{
; 212  : 		return UpdateCharacterInfomation(code);

  0005a	ff 75 08	 push	 DWORD PTR _code$[ebp]
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00060	e8 00 00 00 00	 call	 ?UpdateCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@U?$pair@G_W@std@@@Z ; CGraphicFontTexture::UpdateCharacterInfomation
  00065	5f		 pop	 edi

; 213  : 	}
; 214  : 	else
; 215  : 	{
; 216  : 		return &f->second;
; 217  : 	}
; 218  : }

  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
?GetCharacterInfomation@CGraphicFontTexture@@QAEPAUSCharacterInfomation@1@G_W@Z ENDP ; CGraphicFontTexture::GetCharacterInfomation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?UpdateTexture@CGraphicFontTexture@@QAE_NXZ
_TEXT	SEGMENT
_pFontTexture$1$ = -16					; size = 4
_pitch$ = -12						; size = 4
_height$1$ = -8						; size = 4
_pwDst$ = -4						; size = 4
?UpdateTexture@CGraphicFontTexture@@QAE_NXZ PROC	; CGraphicFontTexture::UpdateTexture, COMDAT
; _this$ = ecx

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 173  : 	if(!m_isDirty)

  00009	80 be 88 00 00
	00 00		 cmp	 BYTE PTR [esi+136], 0
  00010	75 07		 jne	 SHORT $LN8@UpdateText

; 174  : 		return true;

  00012	b0 01		 mov	 al, 1
  00014	5e		 pop	 esi

; 202  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN8@UpdateText:

; 175  : 
; 176  : 	m_isDirty = false;

  00019	c6 86 88 00 00
	00 00		 mov	 BYTE PTR [esi+136], 0

; 177  : 
; 178  : 	CGraphicImageTexture * pFontTexture = m_pFontTextureVector.back();

  00020	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00023	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
  00026	89 45 f0	 mov	 DWORD PTR _pFontTexture$1$[ebp], eax

; 179  : 
; 180  : 	if (!pFontTexture)

  00029	85 c0		 test	 eax, eax
  0002b	0f 84 a3 01 00
	00		 je	 $LN36@UpdateText

; 181  : 		return false;
; 182  : 
; 183  : 	WORD* pwDst;
; 184  : 	int pitch;
; 185  : 
; 186  : 	if (!pFontTexture->Lock(&pitch, (void**)&pwDst))

  00031	6a 00		 push	 0
  00033	8d 4d fc	 lea	 ecx, DWORD PTR _pwDst$[ebp]
  00036	51		 push	 ecx
  00037	8d 4d f4	 lea	 ecx, DWORD PTR _pitch$[ebp]
  0003a	51		 push	 ecx
  0003b	8b c8		 mov	 ecx, eax
  0003d	e8 00 00 00 00	 call	 ?Lock@CGraphicImageTexture@@QAE_NPAHPAPAXH@Z ; CGraphicImageTexture::Lock
  00042	84 c0		 test	 al, al
  00044	0f 84 8a 01 00
	00		 je	 $LN36@UpdateText

; 188  : 
; 189  : 	pitch /= 2;

  0004a	8b 45 f4	 mov	 eax, DWORD PTR _pitch$[ebp]

; 190  : 
; 191  : 	int width = m_dib.GetWidth();

  0004d	83 c6 14	 add	 esi, 20			; 00000014H
  00050	99		 cdq
  00051	8b ce		 mov	 ecx, esi
  00053	2b c2		 sub	 eax, edx
  00055	53		 push	 ebx
  00056	d1 f8		 sar	 eax, 1
  00058	57		 push	 edi
  00059	89 45 f4	 mov	 DWORD PTR _pitch$[ebp], eax
  0005c	e8 00 00 00 00	 call	 ?GetWidth@CGraphicDib@@QAEHXZ ; CGraphicDib::GetWidth

; 192  : 	int height = m_dib.GetHeight();

  00061	8b ce		 mov	 ecx, esi
  00063	8b f8		 mov	 edi, eax
  00065	e8 00 00 00 00	 call	 ?GetHeight@CGraphicDib@@QAEHXZ ; CGraphicDib::GetHeight
  0006a	8b d8		 mov	 ebx, eax

; 193  : 
; 194  : 	DWORD * pdwSrc = (DWORD*)m_dib.GetPointer();

  0006c	8b ce		 mov	 ecx, esi
  0006e	89 5d f8	 mov	 DWORD PTR _height$1$[ebp], ebx
  00071	e8 00 00 00 00	 call	 ?GetPointer@CGraphicDib@@QAEPAXXZ ; CGraphicDib::GetPointer
  00076	8b f0		 mov	 esi, eax

; 195  : 
; 196  : 	for (int y = 0; y < height; ++y, pwDst += pitch, pdwSrc += width)

  00078	85 db		 test	 ebx, ebx
  0007a	0f 8e 41 01 00
	00		 jle	 $LN3@UpdateText
$LL4@UpdateText:

; 197  : 		for (int x = 0; x < width; ++x)

  00080	33 c0		 xor	 eax, eax
  00082	85 ff		 test	 edi, edi
  00084	0f 8e 16 01 00
	00		 jle	 $LN2@UpdateText
  0008a	83 ff 02	 cmp	 edi, 2
  0008d	0f 82 fd 00 00
	00		 jb	 $LL41@UpdateText
  00093	8b 55 fc	 mov	 edx, DWORD PTR _pwDst$[ebp]
  00096	8d 4f ff	 lea	 ecx, DWORD PTR [edi-1]
  00099	8d 0c 8e	 lea	 ecx, DWORD PTR [esi+ecx*4]
  0009c	8d 5a fe	 lea	 ebx, DWORD PTR [edx-2]
  0009f	8d 1c 7b	 lea	 ebx, DWORD PTR [ebx+edi*2]
  000a2	3b d1		 cmp	 edx, ecx
  000a4	77 08		 ja	 SHORT $LN23@UpdateText
  000a6	3b de		 cmp	 ebx, esi
  000a8	0f 83 db 00 00
	00		 jae	 $LN48@UpdateText
$LN23@UpdateText:
  000ae	83 ff 10	 cmp	 edi, 16			; 00000010H
  000b1	0f 82 93 00 00
	00		 jb	 $LN22@UpdateText

; 198  : 			pwDst[x]=pdwSrc[x];

  000b7	8b cf		 mov	 ecx, edi
  000b9	81 e1 0f 00 00
	80		 and	 ecx, -2147483633	; 8000000fH
  000bf	79 05		 jns	 SHORT $LN63@UpdateText
  000c1	49		 dec	 ecx
  000c2	83 c9 f0	 or	 ecx, -16		; fffffff0H
  000c5	41		 inc	 ecx
$LN63@UpdateText:
  000c6	8b 55 fc	 mov	 edx, DWORD PTR _pwDst$[ebp]
  000c9	8b df		 mov	 ebx, edi
  000cb	2b d9		 sub	 ebx, ecx
  000cd	83 c2 10	 add	 edx, 16			; 00000010H
  000d0	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
$LL7@UpdateText:

; 197  : 		for (int x = 0; x < width; ++x)

  000d3	0f 10 41 e0	 movups	 xmm0, XMMWORD PTR [ecx-32]
  000d7	83 c0 10	 add	 eax, 16			; 00000010H
  000da	8d 49 40	 lea	 ecx, DWORD PTR [ecx+64]
  000dd	8d 52 20	 lea	 edx, DWORD PTR [edx+32]
  000e0	f3 0f 70 c0 d8	 pshufhw xmm0, xmm0, 216		; 000000d8H
  000e5	f2 0f 70 c0 d8	 pshuflw xmm0, xmm0, 216		; 000000d8H
  000ea	66 0f 70 c0 d8	 pshufd	 xmm0, xmm0, 216		; 000000d8H

; 198  : 			pwDst[x]=pdwSrc[x];

  000ef	66 0f d6 42 d0	 movq	 QWORD PTR [edx-48], xmm0
  000f4	0f 10 41 b0	 movups	 xmm0, XMMWORD PTR [ecx-80]
  000f8	f3 0f 70 c0 d8	 pshufhw xmm0, xmm0, 216		; 000000d8H
  000fd	f2 0f 70 c0 d8	 pshuflw xmm0, xmm0, 216		; 000000d8H
  00102	66 0f 70 c0 d8	 pshufd	 xmm0, xmm0, 216		; 000000d8H
  00107	66 0f d6 42 d8	 movq	 QWORD PTR [edx-40], xmm0
  0010c	0f 10 41 c0	 movups	 xmm0, XMMWORD PTR [ecx-64]
  00110	f3 0f 70 c0 d8	 pshufhw xmm0, xmm0, 216		; 000000d8H
  00115	f2 0f 70 c0 d8	 pshuflw xmm0, xmm0, 216		; 000000d8H
  0011a	66 0f 70 c0 d8	 pshufd	 xmm0, xmm0, 216		; 000000d8H
  0011f	66 0f d6 42 e0	 movq	 QWORD PTR [edx-32], xmm0
  00124	0f 10 41 d0	 movups	 xmm0, XMMWORD PTR [ecx-48]
  00128	f3 0f 70 c0 d8	 pshufhw xmm0, xmm0, 216		; 000000d8H
  0012d	f2 0f 70 c0 d8	 pshuflw xmm0, xmm0, 216		; 000000d8H
  00132	66 0f 70 c0 d8	 pshufd	 xmm0, xmm0, 216		; 000000d8H
  00137	66 0f d6 42 e8	 movq	 QWORD PTR [edx-24], xmm0
  0013c	3b c3		 cmp	 eax, ebx
  0013e	7c 93		 jl	 SHORT $LL7@UpdateText

; 197  : 		for (int x = 0; x < width; ++x)

  00140	8b cf		 mov	 ecx, edi
  00142	80 e1 0f	 and	 cl, 15			; 0000000fH
  00145	80 f9 02	 cmp	 cl, 2
  00148	72 36		 jb	 SHORT $LN20@UpdateText
$LN22@UpdateText:

; 198  : 			pwDst[x]=pdwSrc[x];

  0014a	8b cf		 mov	 ecx, edi
  0014c	81 e1 01 00 00
	80		 and	 ecx, -2147483647	; 80000001H
  00152	79 05		 jns	 SHORT $LN64@UpdateText
  00154	49		 dec	 ecx
  00155	83 c9 fe	 or	 ecx, -2			; fffffffeH
  00158	41		 inc	 ecx
$LN64@UpdateText:
  00159	8b d7		 mov	 edx, edi
  0015b	2b d1		 sub	 edx, ecx
  0015d	8b 4d fc	 mov	 ecx, DWORD PTR _pwDst$[ebp]
$LL21@UpdateText:

; 197  : 		for (int x = 0; x < width; ++x)

  00160	f3 0f 7e 04 86	 movq	 xmm0, QWORD PTR [esi+eax*4]
  00165	f3 0f 70 c0 d8	 pshufhw xmm0, xmm0, 216		; 000000d8H
  0016a	f2 0f 70 c0 d8	 pshuflw xmm0, xmm0, 216		; 000000d8H
  0016f	66 0f 70 c0 d8	 pshufd	 xmm0, xmm0, 216		; 000000d8H

; 198  : 			pwDst[x]=pdwSrc[x];

  00174	66 0f 7e 04 41	 movd	 DWORD PTR [ecx+eax*2], xmm0
  00179	83 c0 02	 add	 eax, 2
  0017c	3b c2		 cmp	 eax, edx
  0017e	7c e0		 jl	 SHORT $LL21@UpdateText
$LN20@UpdateText:

; 197  : 		for (int x = 0; x < width; ++x)

  00180	8b 5d f8	 mov	 ebx, DWORD PTR _height$1$[ebp]
  00183	3b c7		 cmp	 eax, edi
  00185	7d 19		 jge	 SHORT $LN2@UpdateText
  00187	eb 07		 jmp	 SHORT $LL41@UpdateText
$LN48@UpdateText:
  00189	8b 5d f8	 mov	 ebx, DWORD PTR _height$1$[ebp]
  0018c	0f 1f 40 00	 npad	 4
$LL41@UpdateText:

; 198  : 			pwDst[x]=pdwSrc[x];

  00190	8b 4d fc	 mov	 ecx, DWORD PTR _pwDst$[ebp]
  00193	66 8b 14 86	 mov	 dx, WORD PTR [esi+eax*4]
  00197	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0019b	40		 inc	 eax
  0019c	3b c7		 cmp	 eax, edi
  0019e	7c f0		 jl	 SHORT $LL41@UpdateText
$LN2@UpdateText:

; 195  : 
; 196  : 	for (int y = 0; y < height; ++y, pwDst += pitch, pdwSrc += width)

  001a0	8b 55 fc	 mov	 edx, DWORD PTR _pwDst$[ebp]
  001a3	8b 45 f4	 mov	 eax, DWORD PTR _pitch$[ebp]
  001a6	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  001a9	89 45 fc	 mov	 DWORD PTR _pwDst$[ebp], eax
  001ac	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  001b3	03 f0		 add	 esi, eax
  001b5	83 eb 01	 sub	 ebx, 1
  001b8	89 5d f8	 mov	 DWORD PTR _height$1$[ebp], ebx
  001bb	0f 85 bf fe ff
	ff		 jne	 $LL4@UpdateText
$LN3@UpdateText:

; 199  : 
; 200  : 	pFontTexture->Unlock();

  001c1	8b 4d f0	 mov	 ecx, DWORD PTR _pFontTexture$1$[ebp]
  001c4	6a 00		 push	 0
  001c6	e8 00 00 00 00	 call	 ?Unlock@CGraphicImageTexture@@QAEXH@Z ; CGraphicImageTexture::Unlock

; 201  : 	return true;

  001cb	5f		 pop	 edi
  001cc	5b		 pop	 ebx
  001cd	b0 01		 mov	 al, 1
  001cf	5e		 pop	 esi

; 202  : }

  001d0	8b e5		 mov	 esp, ebp
  001d2	5d		 pop	 ebp
  001d3	c3		 ret	 0
$LN36@UpdateText:

; 187  : 		return false;

  001d4	32 c0		 xor	 al, al
  001d6	5e		 pop	 esi

; 202  : }

  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c3		 ret	 0
?UpdateTexture@CGraphicFontTexture@@QAE_NXZ ENDP	; CGraphicFontTexture::UpdateTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?SelectTexture@CGraphicFontTexture@@QAEXK@Z
_TEXT	SEGMENT
_dwTexture$ = 8						; size = 4
?SelectTexture@CGraphicFontTexture@@QAEXK@Z PROC	; CGraphicFontTexture::SelectTexture, COMDAT
; _this$ = ecx

; 339  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwTexture$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 339  : {

  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00009	8b 56 60	 mov	 edx, DWORD PTR [esi+96]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 341  : 	m_lpd3dTexture = m_pFontTextureVector[dwTexture]->GetD3DTexture();

  0000c	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  0000f	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00014	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00017	5e		 pop	 esi

; 342  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SelectTexture@CGraphicFontTexture@@QAEXK@Z ENDP	; CGraphicFontTexture::SelectTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?CheckTextureIndex@CGraphicFontTexture@@QAE_NK@Z
_TEXT	SEGMENT
_dwTexture$ = 8						; size = 4
?CheckTextureIndex@CGraphicFontTexture@@QAE_NK@Z PROC	; CGraphicFontTexture::CheckTextureIndex, COMDAT
; _this$ = ecx

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00006	2b 41 60	 sub	 eax, DWORD PTR [ecx+96]
  00009	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 332  : 	if (dwTexture >= m_pFontTextureVector.size())

  0000c	39 45 08	 cmp	 DWORD PTR _dwTexture$[ebp], eax
  0000f	0f 92 c0	 setb	 al

; 333  : 		return false;
; 334  : 
; 335  : 	return true;
; 336  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?CheckTextureIndex@CGraphicFontTexture@@QAE_NK@Z ENDP	; CGraphicFontTexture::CheckTextureIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?DestroyDeviceObjects@CGraphicFontTexture@@QAEXXZ
_TEXT	SEGMENT
?DestroyDeviceObjects@CGraphicFontTexture@@QAEXXZ PROC	; CGraphicFontTexture::DestroyDeviceObjects, COMDAT
; _this$ = ecx

; 68   : }

  00000	c2 00 00	 ret	 0
?DestroyDeviceObjects@CGraphicFontTexture@@QAEXXZ ENDP	; CGraphicFontTexture::DestroyDeviceObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?CreateDeviceObjects@CGraphicFontTexture@@QAE_NXZ
_TEXT	SEGMENT
?CreateDeviceObjects@CGraphicFontTexture@@QAE_NXZ PROC	; CGraphicFontTexture::CreateDeviceObjects, COMDAT
; _this$ = ecx

; 63   : 	return true;

  00000	b0 01		 mov	 al, 1

; 64   : }

  00002	c3		 ret	 0
?CreateDeviceObjects@CGraphicFontTexture@@QAE_NXZ ENDP	; CGraphicFontTexture::CreateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?Create@CGraphicFontTexture@@QAE_NPBDH_N1@Z
_TEXT	SEGMENT
_c_szFontName$ = 8					; size = 4
_fontSize$ = 12						; size = 4
_bItalic$ = 16						; size = 1
_bBold$ = 20						; size = 1
?Create@CGraphicFontTexture@@QAE_NPBDH_N1@Z PROC	; CGraphicFontTexture::Create, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 73   : 	Destroy();

  00008	e8 00 00 00 00	 call	 ?Destroy@CGraphicFontTexture@@QAEXXZ ; CGraphicFontTexture::Destroy

; 74   : 
; 75   : 	strncpy(m_fontName, c_szFontName, sizeof(m_fontName)-1);

  0000d	6a 1f		 push	 31			; 0000001fH
  0000f	ff 75 08	 push	 DWORD PTR _c_szFontName$[ebp]
  00012	8d 87 89 00 00
	00		 lea	 eax, DWORD PTR [edi+137]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _strncpy

; 76   : 	m_fontSize	= fontSize;

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _fontSize$[ebp]
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	89 87 ac 00 00
	00		 mov	 DWORD PTR [edi+172], eax

; 77   : 	m_bItalic	= bItalic;

  0002a	8a 45 10	 mov	 al, BYTE PTR _bItalic$[ebp]
  0002d	88 87 b0 00 00
	00		 mov	 BYTE PTR [edi+176], al

; 78   : 	m_bBold		= bBold; //@natanek155

  00033	8a 45 14	 mov	 al, BYTE PTR _bBold$[ebp]
  00036	88 87 b1 00 00
	00		 mov	 BYTE PTR [edi+177], al

; 79   : 
; 80   : 	m_x = 0;

  0003c	c7 47 7c 00 00
	00 00		 mov	 DWORD PTR [edi+124], 0

; 81   : 	m_y = 0;

  00043	c7 87 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+128], 0

; 82   : 	m_step = 0;

  0004d	c7 87 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+132], 0

; 83   : 
; 84   : 	DWORD width = 256,height = 256;
; 85   : 	if (GetMaxTextureWidth() > 512)

  00057	e8 00 00 00 00	 call	 ?GetMaxTextureWidth@@YAKXZ ; GetMaxTextureWidth
  0005c	8b f0		 mov	 esi, eax

; 86   : 		width = 512;
; 87   : 	if (GetMaxTextureHeight() > 512)

  0005e	e8 00 00 00 00	 call	 ?GetMaxTextureHeight@@YAKXZ ; GetMaxTextureHeight

; 88   : 		height = 512;
; 89   : 
; 90   : 	if (!m_dib.Create(ms_hDC, width, height))

  00063	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00068	3b d0		 cmp	 edx, eax
  0006a	1b c9		 sbb	 ecx, ecx
  0006c	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00072	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00078	3b d6		 cmp	 edx, esi
  0007a	51		 push	 ecx
  0007b	1b c0		 sbb	 eax, eax
  0007d	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00080	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00085	05 00 01 00 00	 add	 eax, 256		; 00000100H
  0008a	50		 push	 eax
  0008b	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_hDC@CGraphicBase@@1PAUHDC__@@A ; CGraphicBase::ms_hDC
  00091	e8 00 00 00 00	 call	 ?Create@CGraphicDib@@QAE_NPAUHDC__@@HH@Z ; CGraphicDib::Create
  00096	84 c0		 test	 al, al
  00098	74 4d		 je	 SHORT $LN7@Create

; 91   : 		return false;
; 92   : 
; 93   : 	HDC hDC = m_dib.GetDCHandle();

  0009a	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  0009d	e8 00 00 00 00	 call	 ?GetDCHandle@CGraphicDib@@QAEPAUHDC__@@XZ ; CGraphicDib::GetDCHandle
  000a2	8b f0		 mov	 esi, eax

; 94   : 
; 95   : 	m_hFont = GetFont(GetDefaultCodePage());

  000a4	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  000a9	50		 push	 eax
  000aa	8b cf		 mov	 ecx, edi
  000ac	e8 00 00 00 00	 call	 ?GetFont@CGraphicFontTexture@@IAEPAUHFONT__@@G@Z ; CGraphicFontTexture::GetFont

; 96   : 
; 97   : 	m_hFontOld=(HFONT)SelectObject(hDC, m_hFont);

  000b1	50		 push	 eax
  000b2	56		 push	 esi
  000b3	89 47 5c	 mov	 DWORD PTR [edi+92], eax
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 98   : 	SetTextColor(hDC, RGB(255, 255, 255));

  000bc	68 ff ff ff 00	 push	 16777215		; 00ffffffH
  000c1	56		 push	 esi
  000c2	89 47 58	 mov	 DWORD PTR [edi+88], eax
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 99   : 	SetBkColor(hDC,	0);

  000cb	6a 00		 push	 0
  000cd	56		 push	 esi
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkColor@8

; 100  : 
; 101  : 	if (!AppendTexture())

  000d4	8b cf		 mov	 ecx, edi
  000d6	e8 00 00 00 00	 call	 ?AppendTexture@CGraphicFontTexture@@IAE_NXZ ; CGraphicFontTexture::AppendTexture
  000db	5f		 pop	 edi
  000dc	84 c0		 test	 al, al

; 102  : 		return false;
; 103  : 
; 104  : 	return true;
; 105  : }

  000de	5e		 pop	 esi
  000df	0f 95 c0	 setne	 al
  000e2	5b		 pop	 ebx
  000e3	5d		 pop	 ebp
  000e4	c2 10 00	 ret	 16			; 00000010H
$LN7@Create:
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	32 c0		 xor	 al, al
  000eb	5b		 pop	 ebx
  000ec	5d		 pop	 ebp
  000ed	c2 10 00	 ret	 16			; 00000010H
?Create@CGraphicFontTexture@@QAE_NPBDH_N1@Z ENDP	; CGraphicFontTexture::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ?Destroy@CGraphicFontTexture@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
?Destroy@CGraphicFontTexture@@QAEXXZ PROC		; CGraphicFontTexture::Destroy, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	89 5d f8	 mov	 DWORD PTR _this$1$[ebp], ebx

; 34   : 	HDC hDC = m_dib.GetDCHandle();

  0000e	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00011	e8 00 00 00 00	 call	 ?GetDCHandle@CGraphicDib@@QAEPAUHDC__@@XZ ; CGraphicDib::GetDCHandle

; 35   : 	if (hDC)

  00016	85 c0		 test	 eax, eax
  00018	74 0a		 je	 SHORT $LN4@Destroy

; 36   : 		SelectObject(hDC, m_hFontOld);

  0001a	ff 73 58	 push	 DWORD PTR [ebx+88]
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
$LN4@Destroy:

; 37   : 
; 38   : 	m_dib.Destroy();

  00024	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00027	e8 00 00 00 00	 call	 ?Destroy@CGraphicDib@@QAEXXZ ; CGraphicDib::Destroy

; 39   : 
; 40   : 	m_lpd3dTexture = NULL;
; 41   : 	CGraphicTexture::Destroy();

  0002c	8b cb		 mov	 ecx, ebx
  0002e	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00035	e8 00 00 00 00	 call	 ?Destroy@CGraphicTexture@@IAEXXZ ; CGraphicTexture::Destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0003a	8b 73 60	 mov	 esi, DWORD PTR [ebx+96]
  0003d	8b 43 64	 mov	 eax, DWORD PTR [ebx+100]
  00040	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 113  : 	for (auto i = container.begin(); i != container.end(); ++i)

  00042	74 1c		 je	 SHORT $LN9@Destroy
$LL10@Destroy:

; 114  : 	{
; 115  : 		delete* i;

  00044	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00046	85 c9		 test	 ecx, ecx
  00048	74 06		 je	 SHORT $LN12@Destroy
  0004a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004c	6a 01		 push	 1
  0004e	ff 10		 call	 DWORD PTR [eax]
$LN12@Destroy:

; 116  : 		*i = NULL;

  00050	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  00056	83 c6 04	 add	 esi, 4

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00059	8b 43 64	 mov	 eax, DWORD PTR [ebx+100]

; 166  :         return _Ptr == _Right._Ptr;

  0005c	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 113  : 	for (auto i = container.begin(); i != container.end(); ++i)

  0005e	75 e4		 jne	 SHORT $LL10@Destroy
$LN9@Destroy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00060	8b 4b 60	 mov	 ecx, DWORD PTR [ebx+96]
  00063	3b c8		 cmp	 ecx, eax
  00065	74 03		 je	 SHORT $LN44@Destroy

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00067	89 4b 64	 mov	 DWORD PTR [ebx+100], ecx
$LN44@Destroy:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 43   : 	m_charInfoMap.clear();

  0006a	8d 7b 6c	 lea	 edi, DWORD PTR [ebx+108]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1363 :         auto _Head = _Scary->_Myhead;

  0006d	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1364 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  0006f	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00072	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00076	75 20		 jne	 SHORT $LN197@Destroy
$LL52@Destroy:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00078	ff 76 08	 push	 DWORD PTR [esi+8]
  0007b	8b cf		 mov	 ecx, edi
  0007d	57		 push	 edi
  0007e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00083	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00085	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00087	6a 30		 push	 48			; 00000030H
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008f	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00092	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00096	74 e0		 je	 SHORT $LL52@Destroy
$LN197@Destroy:

; 1365 :         _Head->_Parent  = _Head;

  00098	89 5b 04	 mov	 DWORD PTR [ebx+4], ebx

; 1366 :         _Head->_Left    = _Head;

  0009b	89 1b		 mov	 DWORD PTR [ebx], ebx

; 1367 :         _Head->_Right   = _Head;

  0009d	89 5b 08	 mov	 DWORD PTR [ebx+8], ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 45   : 	if (m_fontMap.size())

  000a0	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1368 :         _Scary->_Mysize = 0;

  000a3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 45   : 	if (m_fontMap.size())

  000aa	83 7b 78 00	 cmp	 DWORD PTR [ebx+120], 0
  000ae	0f 84 a5 00 00
	00		 je	 $LN147@Destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  000b4	8b 7b 74	 mov	 edi, DWORD PTR [ebx+116]
  000b7	8d 43 74	 lea	 eax, DWORD PTR [ebx+116]
  000ba	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000bd	8b 37		 mov	 esi, DWORD PTR [edi]
  000bf	3b f7		 cmp	 esi, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 49   : 		while(i != m_fontMap.end())

  000c1	74 55		 je	 SHORT $LN3@Destroy
  000c3	8b d8		 mov	 ebx, eax
$LL2@Destroy:

; 50   : 		{
; 51   : 			DeleteObject((HGDIOBJ)i->second);

  000c5	ff 76 14	 push	 DWORD PTR [esi+20]
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  000ce	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000d1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d5	74 1d		 je	 SHORT $LN137@Destroy

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  000d7	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000da	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000de	75 10		 jne	 SHORT $LN211@Destroy
$LL135@Destroy:
  000e0	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  000e3	75 0b		 jne	 SHORT $LN211@Destroy

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  000e5	8b f0		 mov	 esi, eax
  000e7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ea	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ee	74 f0		 je	 SHORT $LL135@Destroy
$LN211@Destroy:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  000f0	8b f0		 mov	 esi, eax

; 57   :         } else {

  000f2	eb 18		 jmp	 SHORT $LN143@Destroy
$LN137@Destroy:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  000f4	8b f0		 mov	 esi, eax

; 466  :         while (!_Pnode->_Left->_Isnil) {

  000f6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000fc	75 0e		 jne	 SHORT $LN143@Destroy
  000fe	66 90		 npad	 2
$LL142@Destroy:
  00100	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00102	8b f1		 mov	 esi, ecx
  00104	8b c8		 mov	 ecx, eax
  00106	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0010a	74 f4		 je	 SHORT $LL142@Destroy
$LN143@Destroy:

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0010c	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 232  :         return this->_Ptr == _Right._Ptr;

  0010e	3b f7		 cmp	 esi, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 49   : 		while(i != m_fontMap.end())

  00110	75 b3		 jne	 SHORT $LL2@Destroy
  00112	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00115	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
$LN3@Destroy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1364 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00118	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0011b	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0011f	75 29		 jne	 SHORT $LN198@Destroy
  00121	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LL150@Destroy:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00124	ff 76 08	 push	 DWORD PTR [esi+8]
  00127	8b cb		 mov	 ecx, ebx
  00129	53		 push	 ebx
  0012a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUHFONT__@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUHFONT__@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,HFONT__ *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,HFONT__ *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0012f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00131	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00133	6a 18		 push	 24			; 00000018H
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0013b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0013e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00142	74 e0		 je	 SHORT $LL150@Destroy
  00144	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00147	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
$LN198@Destroy:

; 1365 :         _Head->_Parent  = _Head;

  0014a	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1366 :         _Head->_Left    = _Head;

  0014d	89 3f		 mov	 DWORD PTR [edi], edi

; 1367 :         _Head->_Right   = _Head;

  0014f	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 1368 :         _Scary->_Mysize = 0;

  00152	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN147@Destroy:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 58   : 	Initialize();

  00159	8b cb		 mov	 ecx, ebx
  0015b	e8 00 00 00 00	 call	 ?Initialize@CGraphicFontTexture@@IAEXXZ ; CGraphicFontTexture::Initialize
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx

; 59   : }

  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c3		 ret	 0
?Destroy@CGraphicFontTexture@@QAEXXZ ENDP		; CGraphicFontTexture::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ??1CGraphicFontTexture@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicFontTexture@@UAE@XZ PROC			; CGraphicFontTexture::~CGraphicFontTexture, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicFontTexture@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicFontTexture@@6B@

; 14   : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CGraphicFontTexture@@QAEXXZ ; CGraphicFontTexture::Destroy

; 15   : }

  00030	8d 4e 74	 lea	 ecx, DWORD PTR [esi+116]
  00033	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,HFONT__ *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,HFONT__ *> >,0> >
  00038	8d 4e 6c	 lea	 ecx, DWORD PTR [esi+108]
  0003b	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >::~_Tree<std::_Tmap_traits<std::pair<unsigned short,wchar_t>,CGraphicFontTexture::SCharacterInfomation,std::less<std::pair<unsigned short,wchar_t> >,std::allocator<std::pair<std::pair<unsigned short,wchar_t> const ,CGraphicFontTexture::SCharacterInfomation> >,0> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00040	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00043	85 c0		 test	 eax, eax
  00045	74 41		 je	 SHORT $LN18@CGraphicFo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00047	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  0004a	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004c	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0004f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00055	72 12		 jb	 SHORT $LN37@CGraphicFo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00057	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005a	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00062	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00065	77 40		 ja	 SHORT $LN34@CGraphicFo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00067	8b c2		 mov	 eax, edx
$LN37@CGraphicFo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00069	51		 push	 ecx
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00070	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00077	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0007a	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0

; 2082 :             _Myend   = nullptr;

  00081	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
$LN18@CGraphicFo:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 15   : }

  00088	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0008b	e8 00 00 00 00	 call	 ??1CGraphicDib@@UAE@XZ	; CGraphicDib::~CGraphicDib
  00090	8b ce		 mov	 ecx, esi
  00092	e8 00 00 00 00	 call	 ??1CGraphicTexture@@MAE@XZ ; CGraphicTexture::~CGraphicTexture
  00097	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a1	59		 pop	 ecx
  000a2	5e		 pop	 esi
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
$LN34@CGraphicFo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN44@CGraphicFo:
  000ac	cc		 int	 3
  000ad	cc		 int	 3
  000ae	cc		 int	 3
  000af	cc		 int	 3
  000b0	cc		 int	 3
  000b1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicFontTexture@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicFontTexture@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicFontTexture@@UAE@XZ ENDP			; CGraphicFontTexture::~CGraphicFontTexture
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp
;	COMDAT ??0CGraphicFontTexture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGraphicFontTexture@@QAE@XZ PROC			; CGraphicFontTexture::CGraphicFontTexture, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphicFontTexture@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	e8 00 00 00 00	 call	 ??0CGraphicTexture@@IAE@XZ ; CGraphicTexture::CGraphicTexture
  00031	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CGraphicFontTexture@@6B@
  00041	e8 00 00 00 00	 call	 ??0CGraphicDib@@QAE@XZ	; CGraphicDib::CGraphicDib
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00046	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
  0004d	c7 47 64 00 00
	00 00		 mov	 DWORD PTR [edi+100], 0
  00054	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 8    : {

  0005b	8d 77 6c	 lea	 esi, DWORD PTR [edi+108]
  0005e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00062	6a 30		 push	 48			; 00000030H
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 8    : {

  00064	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00067	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0006d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00074	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00079	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0007b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0007e	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00081	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00087	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 8    : {

  00089	8d 77 74	 lea	 esi, DWORD PTR [edi+116]
  0008c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00090	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 8    : {

  00092	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00095	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0009b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000a2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a7	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  000aa	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  000ac	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  000af	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  000b2	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  000b8	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpFontTexture.cpp

; 9    : 	Initialize();

  000ba	8b cf		 mov	 ecx, edi
  000bc	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000c0	e8 00 00 00 00	 call	 ?Initialize@CGraphicFontTexture@@IAEXXZ ; CGraphicFontTexture::Initialize

; 10   : }

  000c5	8b c7		 mov	 eax, edi
  000c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d1	59		 pop	 ecx
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicTexture@@MAE@XZ ; CGraphicTexture::~CGraphicTexture
__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 14	 add	 ecx, 20			; 00000014H
  0000e	e9 00 00 00 00	 jmp	 ??1CGraphicDib@@UAE@XZ	; CGraphicDib::~CGraphicDib
__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 60	 add	 ecx, 96			; 00000060H
  00019	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCGraphicImageTexture@@V?$allocator@PAVCGraphicImageTexture@@@std@@@std@@QAE@XZ ; std::vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >::~vector<CGraphicImageTexture *,std::allocator<CGraphicImageTexture *> >
__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00024	e9 00 00 00 00	 jmp	 ??1?$map@U?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@U?$less@U?$pair@G_W@std@@@2@V?$allocator@U?$pair@$$CBU?$pair@G_W@std@@USCharacterInfomation@CGraphicFontTexture@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CGraphicFontTexture@@QAE@XZ$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 74	 add	 ecx, 116		; 00000074H
  0002f	e9 00 00 00 00	 jmp	 ??1?$map@GPAUHFONT__@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUHFONT__@@@std@@@3@@std@@QAE@XZ
  00034	cc		 int	 3
  00035	cc		 int	 3
  00036	cc		 int	 3
  00037	cc		 int	 3
  00038	cc		 int	 3
__ehhandler$??0CGraphicFontTexture@@QAE@XZ:
  00039	90		 npad	 1
  0003a	90		 npad	 1
  0003b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00042	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00045	33 c8		 xor	 ecx, eax
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphicFontTexture@@QAE@XZ
  00051	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphicFontTexture@@QAE@XZ ENDP			; CGraphicFontTexture::CGraphicFontTexture
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 417  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
