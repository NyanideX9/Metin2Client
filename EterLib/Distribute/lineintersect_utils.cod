; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\lineintersect_utils.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z ; IntersectLineSegments
PUBLIC	?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z ; IntersectLineSegments
PUBLIC	?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z ; IntersectLineSegments
PUBLIC	?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
PUBLIC	?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ; FindNearestPointOfParallelLineSegments
PUBLIC	?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ; AdjustNearestPoints
PUBLIC	__real@3c23d70b
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c23d70b
CONST	SEGMENT
__real@3c23d70b DD 03c23d70br			; 0.01
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
;	COMDAT ?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z
_TEXT	SEGMENT
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_Lax$ = 20						; size = 4
_Lay$ = 24						; size = 4
_Laz$ = 28						; size = 4
_B1x$ = 32						; size = 4
_B1y$ = 36						; size = 4
_B1z$ = 40						; size = 4
_Lbx$ = 44						; size = 4
_Lby$ = 48						; size = 4
_Lbz$ = 52						; size = 4
_epsilon_squared$ = 56					; size = 4
_s$ = 60						; size = 4
_t$ = 64						; size = 4
_PointOnSegAx$ = 68					; size = 4
_PointOnSegAy$ = 72					; size = 4
_PointOnSegAz$ = 76					; size = 4
_PointOnSegBx$ = 80					; size = 4
_PointOnSegBy$ = 84					; size = 4
_PointOnSegBz$ = 88					; size = 4
?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z PROC	; AdjustNearestPoints, COMDAT

; 798  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 799  : 	// handle the case where both parameter s and t are out of range
; 800  : 	if (OUT_OF_RANGE(s) && OUT_OF_RANGE(t))

  00003	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00008	0f 57 c9	 xorps	 xmm1, xmm1
  0000b	0f 2f c8	 comiss	 xmm1, xmm0
  0000e	f3 0f 10 5d 40	 movss	 xmm3, DWORD PTR _t$[ebp]
  00013	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  0001b	77 05		 ja	 SHORT $LN4@AdjustNear
  0001d	0f 2f c2	 comiss	 xmm0, xmm2
  00020	76 12		 jbe	 SHORT $LN2@AdjustNear
$LN4@AdjustNear:
  00022	0f 2f cb	 comiss	 xmm1, xmm3
  00025	0f 87 af 01 00
	00		 ja	 $LN5@AdjustNear
  0002b	0f 2f da	 comiss	 xmm3, xmm2
  0002e	0f 87 a6 01 00
	00		 ja	 $LN5@AdjustNear
$LN2@AdjustNear:

; 819  : 				PointOnSegAy, PointOnSegAz, false, epsilon_squared,
; 820  : 				PointOnSegBx, PointOnSegBy, PointOnSegBz, t);
; 821  : 		}
; 822  : 	}
; 823  : 	// otherwise, handle the case where the parameter for only one segment is
; 824  : 	// out of range
; 825  : 	else if (OUT_OF_RANGE(s))

  00034	0f 2f c8	 comiss	 xmm1, xmm0
  00037	0f 87 da 00 00
	00		 ja	 $LN10@AdjustNear
  0003d	0f 2f c2	 comiss	 xmm0, xmm2
  00040	0f 87 d1 00 00
	00		 ja	 $LN10@AdjustNear

; 832  : 			PointOnSegAy, PointOnSegAz, false, epsilon_squared,
; 833  : 			PointOnSegBx, PointOnSegBy, PointOnSegBz, t);
; 834  : 	}
; 835  : 	else if (OUT_OF_RANGE(t))

  00046	0f 2f cb	 comiss	 xmm1, xmm3
  00049	77 09		 ja	 SHORT $LN13@AdjustNear
  0004b	0f 2f da	 comiss	 xmm3, xmm2
  0004e	0f 86 b5 03 00
	00		 jbe	 $LN6@AdjustNear
$LN13@AdjustNear:

; 836  : 	{
; 837  : 		t = FMAX(0.0f, FMIN(1.0f, t));
; 838  : 		PointOnSegBx = (B1x + t * Lbx);

  00054	8b 55 50	 mov	 edx, DWORD PTR _PointOnSegBx$[ebp]
  00057	f3 0f 5d da	 minss	 xmm3, xmm2

; 839  : 		PointOnSegBy = (B1y + t * Lby);

  0005b	8b 4d 54	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]

; 840  : 		PointOnSegBz = (B1z + t * Lbz);

  0005e	8b 45 58	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  00061	f3 0f 5f cb	 maxss	 xmm1, xmm3
  00065	0f 28 c1	 movaps	 xmm0, xmm1
  00068	f3 0f 59 45 2c	 mulss	 xmm0, DWORD PTR _Lbx$[ebp]
  0006d	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  00072	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  00076	0f 28 c1	 movaps	 xmm0, xmm1
  00079	f3 0f 59 45 30	 mulss	 xmm0, DWORD PTR _Lby$[ebp]
  0007e	f3 0f 59 4d 34	 mulss	 xmm1, DWORD PTR _Lbz$[ebp]
  00083	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  00088	f3 0f 58 4d 28	 addss	 xmm1, DWORD PTR _B1z$[ebp]
  0008d	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 841  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, PointOnSegBx,

  00091	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00096	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  0009a	8d 45 3c	 lea	 eax, DWORD PTR _s$[ebp]
  0009d	50		 push	 eax
  0009e	ff 75 4c	 push	 DWORD PTR _PointOnSegAz$[ebp]
  000a1	ff 75 48	 push	 DWORD PTR _PointOnSegAy$[ebp]
  000a4	ff 75 44	 push	 DWORD PTR _PointOnSegAx$[ebp]
  000a7	51		 push	 ecx
  000a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ad	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  000b1	6a 00		 push	 0
  000b3	83 ec 24	 sub	 esp, 36			; 00000024H
  000b6	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  000bc	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  000c2	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  000c6	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  000cc	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  000d1	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  000d7	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  000dc	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  000e2	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  000e7	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000ed	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  000f2	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000f8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  000fd	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00103	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010d	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00112	83 c4 3c	 add	 esp, 60			; 0000003cH

; 842  : 			PointOnSegBy, PointOnSegBz, false, epsilon_squared,
; 843  : 			PointOnSegAx, PointOnSegAy, PointOnSegAz, s);
; 844  : 	}
; 845  : 	else
; 846  : 	{
; 847  : 		assert(0);
; 848  : 	}
; 849  : }

  00115	5d		 pop	 ebp
  00116	c3		 ret	 0
$LN10@AdjustNear:

; 826  : 	{
; 827  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  00117	f3 0f 5d c2	 minss	 xmm0, xmm2

; 828  : 		PointOnSegAx = (A1x + s * Lax);

  0011b	8b 55 44	 mov	 edx, DWORD PTR _PointOnSegAx$[ebp]

; 829  : 		PointOnSegAy = (A1y + s * Lay);

  0011e	8b 4d 48	 mov	 ecx, DWORD PTR _PointOnSegAy$[ebp]

; 830  : 		PointOnSegAz = (A1z + s * Laz);

  00121	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00124	f3 0f 5f c8	 maxss	 xmm1, xmm0
  00128	0f 28 c1	 movaps	 xmm0, xmm1
  0012b	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _Lax$[ebp]
  00130	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  00135	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  00139	0f 28 c1	 movaps	 xmm0, xmm1
  0013c	f3 0f 59 45 18	 mulss	 xmm0, DWORD PTR _Lay$[ebp]
  00141	f3 0f 59 4d 1c	 mulss	 xmm1, DWORD PTR _Laz$[ebp]
  00146	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  0014b	f3 0f 58 4d 10	 addss	 xmm1, DWORD PTR _A1z$[ebp]
  00150	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 831  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, PointOnSegAx,

  00154	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00159	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  0015d	8d 45 40	 lea	 eax, DWORD PTR _t$[ebp]
  00160	50		 push	 eax
  00161	ff 75 58	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00164	ff 75 54	 push	 DWORD PTR _PointOnSegBy$[ebp]
  00167	ff 75 50	 push	 DWORD PTR _PointOnSegBx$[ebp]
  0016a	51		 push	 ecx
  0016b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00170	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00174	6a 00		 push	 0
  00176	83 ec 24	 sub	 esp, 36			; 00000024H
  00179	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  0017f	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  00185	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00189	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  0018f	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00194	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0019a	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0019f	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  001a5	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  001aa	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  001b0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  001b5	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001bb	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  001c0	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001c6	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  001cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d0	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  001d5	83 c4 3c	 add	 esp, 60			; 0000003cH

; 842  : 			PointOnSegBy, PointOnSegBz, false, epsilon_squared,
; 843  : 			PointOnSegAx, PointOnSegAy, PointOnSegAz, s);
; 844  : 	}
; 845  : 	else
; 846  : 	{
; 847  : 		assert(0);
; 848  : 	}
; 849  : }

  001d8	5d		 pop	 ebp
  001d9	c3		 ret	 0
$LN5@AdjustNear:

; 801  : 	{
; 802  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  001da	f3 0f 5d c2	 minss	 xmm0, xmm2

; 803  : 		PointOnSegAx = (A1x + s * Lax);
; 804  : 		PointOnSegAy = (A1y + s * Lay);
; 805  : 		PointOnSegAz = (A1z + s * Laz);

  001de	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  001e1	53		 push	 ebx
  001e2	56		 push	 esi
  001e3	8b 75 44	 mov	 esi, DWORD PTR _PointOnSegAx$[ebp]

; 806  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, PointOnSegAx,

  001e6	8b 5d 54	 mov	 ebx, DWORD PTR _PointOnSegBy$[ebp]
  001e9	f3 0f 5f c8	 maxss	 xmm1, xmm0
  001ed	57		 push	 edi
  001ee	8b 7d 48	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]
  001f1	0f 28 c1	 movaps	 xmm0, xmm1
  001f4	f3 0f 11 4d 3c	 movss	 DWORD PTR _s$[ebp], xmm1
  001f9	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _Lax$[ebp]
  001fe	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  00203	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00207	0f 28 c1	 movaps	 xmm0, xmm1
  0020a	f3 0f 59 45 18	 mulss	 xmm0, DWORD PTR _Lay$[ebp]
  0020f	f3 0f 59 4d 1c	 mulss	 xmm1, DWORD PTR _Laz$[ebp]
  00214	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  00219	f3 0f 58 4d 10	 addss	 xmm1, DWORD PTR _A1z$[ebp]
  0021e	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00222	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00227	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  0022b	8d 45 40	 lea	 eax, DWORD PTR _t$[ebp]
  0022e	50		 push	 eax
  0022f	ff 75 58	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00232	53		 push	 ebx
  00233	ff 75 50	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00236	51		 push	 ecx
  00237	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023c	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00240	6a 01		 push	 1
  00242	83 ec 24	 sub	 esp, 36			; 00000024H
  00245	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  0024b	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  00251	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00255	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  0025b	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00260	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00266	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0026b	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00271	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  00276	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0027c	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00281	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00287	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0028c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00292	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00297	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029c	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment

; 807  : 			PointOnSegAy, PointOnSegAz, true, epsilon_squared,
; 808  : 			PointOnSegBx, PointOnSegBy, PointOnSegBz, t);
; 809  : 		if (OUT_OF_RANGE(t))

  002a1	f3 0f 10 55 40	 movss	 xmm2, DWORD PTR _t$[ebp]
  002a6	0f 57 c9	 xorps	 xmm1, xmm1
  002a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b1	83 c4 3c	 add	 esp, 60			; 0000003cH
  002b4	0f 2f ca	 comiss	 xmm1, xmm2
  002b7	77 09		 ja	 SHORT $LN7@AdjustNear
  002b9	0f 2f d0	 comiss	 xmm2, xmm0
  002bc	0f 86 44 01 00
	00		 jbe	 $LN46@AdjustNear
$LN7@AdjustNear:

; 810  : 		{
; 811  : 			t = FMAX(0.0f, FMIN(1.0f, t));

  002c2	f3 0f 5d d0	 minss	 xmm2, xmm0

; 812  : 			PointOnSegBx = (B1x + t * Lbx);

  002c6	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]

; 813  : 			PointOnSegBy = (B1y + t * Lby);
; 814  : 			PointOnSegBz = (B1z + t * Lbz);

  002c9	8b 4d 58	 mov	 ecx, DWORD PTR _PointOnSegBz$[ebp]
  002cc	f3 0f 5f ca	 maxss	 xmm1, xmm2
  002d0	0f 28 c1	 movaps	 xmm0, xmm1
  002d3	f3 0f 11 4d 40	 movss	 DWORD PTR _t$[ebp], xmm1
  002d8	f3 0f 59 45 2c	 mulss	 xmm0, DWORD PTR _Lbx$[ebp]
  002dd	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  002e2	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  002e6	0f 28 c1	 movaps	 xmm0, xmm1
  002e9	f3 0f 59 45 30	 mulss	 xmm0, DWORD PTR _Lby$[ebp]
  002ee	f3 0f 59 4d 34	 mulss	 xmm1, DWORD PTR _Lbz$[ebp]
  002f3	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  002f8	f3 0f 58 4d 28	 addss	 xmm1, DWORD PTR _B1z$[ebp]
  002fd	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0

; 815  : 			FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, PointOnSegBx,

  00301	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00306	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
  0030a	8d 4d 3c	 lea	 ecx, DWORD PTR _s$[ebp]
  0030d	51		 push	 ecx
  0030e	ff 75 4c	 push	 DWORD PTR _PointOnSegAz$[ebp]
  00311	57		 push	 edi
  00312	56		 push	 esi
  00313	51		 push	 ecx
  00314	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00319	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  0031d	6a 00		 push	 0
  0031f	83 ec 24	 sub	 esp, 36			; 00000024H
  00322	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  00328	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  0032e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00332	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  00338	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  0033d	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00343	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  00348	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0034e	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  00353	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00359	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0035e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00364	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00369	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0036f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00374	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00379	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment

; 816  : 				PointOnSegBy, PointOnSegBz, false, epsilon_squared,
; 817  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz, s);
; 818  : 			FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, PointOnSegAx,

  0037e	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00383	8d 45 40	 lea	 eax, DWORD PTR _t$[ebp]
  00386	83 c4 3c	 add	 esp, 60			; 0000003cH
  00389	50		 push	 eax
  0038a	ff 75 58	 push	 DWORD PTR _PointOnSegBz$[ebp]
  0038d	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00390	53		 push	 ebx
  00391	ff 75 50	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00394	51		 push	 ecx
  00395	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0039e	6a 00		 push	 0
  003a0	83 ec 24	 sub	 esp, 36			; 00000024H
  003a3	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  003a9	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  003ad	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  003b3	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  003b7	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  003bd	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  003c2	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  003c8	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  003cd	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  003d3	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  003d8	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  003de	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  003e3	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  003e9	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  003ee	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003f4	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  003f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fe	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00403	83 c4 3c	 add	 esp, 60			; 0000003cH
$LN46@AdjustNear:
  00406	5f		 pop	 edi
  00407	5e		 pop	 esi
  00408	5b		 pop	 ebx
$LN6@AdjustNear:

; 842  : 			PointOnSegBy, PointOnSegBz, false, epsilon_squared,
; 843  : 			PointOnSegAx, PointOnSegAy, PointOnSegAz, s);
; 844  : 	}
; 845  : 	else
; 846  : 	{
; 847  : 		assert(0);
; 848  : 	}
; 849  : }

  00409	5d		 pop	 ebp
  0040a	c3		 ret	 0
?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ENDP	; AdjustNearestPoints
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
;	COMDAT ?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z
_TEXT	SEGMENT
_tp$1 = -20						; size = 12
_s$ = -8						; size = 8
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_A2x$ = 20						; size = 4
_A2y$ = 24						; size = 4
_A2z$ = 28						; size = 4
_Lax$ = 32						; size = 4
_Lay$ = 36						; size = 4
_Laz$ = 40						; size = 4
_B1x$ = 44						; size = 4
_B1y$ = 48						; size = 4
_B1z$ = 52						; size = 4
_B2x$ = 56						; size = 4
_B2y$ = 60						; size = 4
_B2z$ = 64						; size = 4
_Lbx$ = 68						; size = 4
_Lby$ = 72						; size = 4
_Lbz$ = 76						; size = 4
_infinite_lines$ = 80					; size = 1
_temp$ = 80						; size = 4
_epsilon_squared$ = 84					; size = 4
_PointOnSegAx$ = 88					; size = 4
_PointOnSegAy$ = 92					; size = 4
_PointOnSegAz$ = 96					; size = 4
_PointOnSegBx$ = 100					; size = 4
_PointOnSegBy$ = 104					; size = 4
_PointOnSegBz$ = 108					; size = 4
?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z PROC ; FindNearestPointOfParallelLineSegments, COMDAT

; 700  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 701  : 	float s[2], temp;
; 702  : 	FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B1x, B1y, B1z,

  00003	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00008	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0000b	83 ec 14	 sub	 esp, 20			; 00000014H
  0000e	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR _Lay$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 60	 mov	 ebx, DWORD PTR _PointOnSegAz$[ebp]
  00017	56		 push	 esi
  00018	8b 75 5c	 mov	 esi, DWORD PTR _PointOnSegAy$[ebp]
  0001b	57		 push	 edi
  0001c	8b 7d 58	 mov	 edi, DWORD PTR _PointOnSegAx$[ebp]
  0001f	50		 push	 eax
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	51		 push	 ecx
  00024	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00029	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0002e	6a 01		 push	 1
  00030	83 ec 24	 sub	 esp, 36			; 00000024H
  00033	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  00039	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0003e	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  00044	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00049	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  0004f	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  00054	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0005a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0005f	f3 0f 11 54 24
	10		 movss	 DWORD PTR [esp+16], xmm2
  00065	f3 0f 10 55 20	 movss	 xmm2, DWORD PTR _Lax$[ebp]
  0006a	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  00070	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _A1y$[ebp]
  00075	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0007b	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  00081	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _A1x$[ebp]
  00086	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  0008b	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00090	83 c4 3c	 add	 esp, 60			; 0000003cH

; 703  : 		true, epsilon_squared, PointOnSegAx, PointOnSegAy, PointOnSegAz, s[0]);
; 704  : 	if (true == infinite_lines)

  00093	80 7d 50 01	 cmp	 BYTE PTR _infinite_lines$[ebp], 1
  00097	75 2b		 jne	 SHORT $LN2@FindNeares

; 705  : 	{
; 706  : 		PointOnSegBx = B1x;

  00099	8b 45 64	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  0009c	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  000a1	5f		 pop	 edi

; 758  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz, true,
; 759  : 				epsilon_squared, PointOnSegBx, PointOnSegBy, PointOnSegBz, temp);
; 760  : 		}
; 761  : 	}
; 762  : }

  000a2	5e		 pop	 esi
  000a3	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000a7	8b 45 68	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  000aa	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  000af	5b		 pop	 ebx
  000b0	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000b4	8b 45 6c	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  000b7	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  000bc	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
$LN2@FindNeares:

; 707  : 		PointOnSegBy = B1y;
; 708  : 		PointOnSegBz = B1z;
; 709  : 	}
; 710  : 	else
; 711  : 	{
; 712  : 		float tp[3];
; 713  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B2x, B2y, B2z,

  000c4	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  000c9	8d 45 fc	 lea	 eax, DWORD PTR _s$[ebp+4]
  000cc	50		 push	 eax
  000cd	8d 45 f4	 lea	 eax, DWORD PTR _tp$1[ebp+8]
  000d0	50		 push	 eax
  000d1	8d 45 f0	 lea	 eax, DWORD PTR _tp$1[ebp+4]
  000d4	50		 push	 eax
  000d5	8d 45 ec	 lea	 eax, DWORD PTR _tp$1[ebp]
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000df	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  000e4	6a 01		 push	 1
  000e6	83 ec 24	 sub	 esp, 36			; 00000024H
  000e9	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  000ef	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  000f4	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  000fa	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  000ff	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  00105	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  0010a	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00110	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  00115	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0011b	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  00120	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00126	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0012b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00131	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00136	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0013c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00146	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment

; 714  : 			true, epsilon_squared, tp[0], tp[1], tp[2], s[1]);
; 715  : 		if (s[0] < 0.f && s[1] < 0.f)

  0014b	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR _s$[ebp]
  00150	0f 57 e4	 xorps	 xmm4, xmm4
  00153	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _s$[ebp+4]
  00158	83 c4 3c	 add	 esp, 60			; 0000003cH
  0015b	0f 2f e3	 comiss	 xmm4, xmm3
  0015e	76 36		 jbe	 SHORT $LN4@FindNeares
  00160	0f 2f e2	 comiss	 xmm4, xmm2
  00163	76 31		 jbe	 SHORT $LN4@FindNeares

; 716  : 		{
; 717  : 			PointOnSegAx = A1x;
; 718  : 			PointOnSegAy = A1y;
; 719  : 			PointOnSegAz = A1z;
; 720  : 			if (s[0] < s[1])

  00165	0f 2f d3	 comiss	 xmm2, xmm3
  00168	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  0016d	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00171	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00176	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  0017a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0017f	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  00183	77 43		 ja	 SHORT $LN10@FindNeares
$LN34@FindNeares:

; 758  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz, true,
; 759  : 				epsilon_squared, PointOnSegBx, PointOnSegBy, PointOnSegBz, temp);
; 760  : 		}
; 761  : 	}
; 762  : }

  00185	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0018a	f3 0f 10 4d 30	 movss	 xmm1, DWORD PTR _B1y$[ebp]
  0018f	f3 0f 10 55 2c	 movss	 xmm2, DWORD PTR _B1x$[ebp]
  00194	eb 41		 jmp	 SHORT $LN11@FindNeares
$LN4@FindNeares:

; 721  : 			{
; 722  : 				PointOnSegBx = B2x;
; 723  : 				PointOnSegBy = B2y;
; 724  : 				PointOnSegBz = B2z;
; 725  : 			}
; 726  : 			else
; 727  : 			{
; 728  : 				PointOnSegBx = B1x;
; 729  : 				PointOnSegBy = B1y;
; 730  : 				PointOnSegBz = B1z;
; 731  : 			}
; 732  : 		}
; 733  : 		else if (s[0] > 1.f && s[1] > 1.f)

  00196	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0019e	0f 2f d8	 comiss	 xmm3, xmm0
  001a1	76 50		 jbe	 SHORT $LN8@FindNeares
  001a3	0f 2f d0	 comiss	 xmm2, xmm0
  001a6	76 4b		 jbe	 SHORT $LN8@FindNeares

; 734  : 		{
; 735  : 			PointOnSegAx = A2x;
; 736  : 			PointOnSegAy = A2y;
; 737  : 			PointOnSegAz = A2z;
; 738  : 			if (s[0] < s[1])

  001a8	0f 2f d3	 comiss	 xmm2, xmm3
  001ab	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  001b0	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  001b4	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  001b9	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  001bd	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  001c2	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  001c6	77 bd		 ja	 SHORT $LN34@FindNeares
$LN10@FindNeares:

; 758  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz, true,
; 759  : 				epsilon_squared, PointOnSegBx, PointOnSegBy, PointOnSegBz, temp);
; 760  : 		}
; 761  : 	}
; 762  : }

  001c8	f3 0f 10 55 38	 movss	 xmm2, DWORD PTR _B2x$[ebp]
  001cd	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _B2y$[ebp]
  001d2	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _B2z$[ebp]
$LN11@FindNeares:
  001d7	8b 45 64	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi
  001dc	5b		 pop	 ebx
  001dd	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  001e1	8b 45 68	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  001e4	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  001e8	8b 45 6c	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  001eb	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  001ef	8b e5		 mov	 esp, ebp
  001f1	5d		 pop	 ebp
  001f2	c3		 ret	 0
$LN8@FindNeares:

; 739  : 			{
; 740  : 				PointOnSegBx = B1x;
; 741  : 				PointOnSegBy = B1y;
; 742  : 				PointOnSegBz = B1z;
; 743  : 			}
; 744  : 			else
; 745  : 			{
; 746  : 				PointOnSegBx = B2x;
; 747  : 				PointOnSegBy = B2y;
; 748  : 				PointOnSegBz = B2z;
; 749  : 			}
; 750  : 		}
; 751  : 		else
; 752  : 		{
; 753  : 			temp = 0.5f*(FMAX(0.0f, FMIN(1.0f, s[0])) + FMAX(0.0f, FMIN(1.0f, s[1])));

  001f3	f3 0f 5d d0	 minss	 xmm2, xmm0
  001f7	0f 57 c9	 xorps	 xmm1, xmm1
  001fa	f3 0f 5d d8	 minss	 xmm3, xmm0

; 754  : 			PointOnSegAx = (A1x + temp * Lax);
; 755  : 			PointOnSegAy = (A1y + temp * Lay);
; 756  : 			PointOnSegAz = (A1z + temp * Laz);
; 757  : 			FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz,

  001fe	8d 45 50	 lea	 eax, DWORD PTR _temp$[ebp]
  00201	50		 push	 eax
  00202	ff 75 6c	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00205	f3 0f 5f ca	 maxss	 xmm1, xmm2
  00209	f3 0f 5f e3	 maxss	 xmm4, xmm3
  0020d	ff 75 68	 push	 DWORD PTR _PointOnSegBy$[ebp]
  00210	ff 75 64	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00213	f3 0f 58 cc	 addss	 xmm1, xmm4
  00217	51		 push	 ecx
  00218	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00220	0f 28 c1	 movaps	 xmm0, xmm1
  00223	f3 0f 11 4d 50	 movss	 DWORD PTR _temp$[ebp], xmm1
  00228	f3 0f 59 45 20	 mulss	 xmm0, DWORD PTR _Lax$[ebp]
  0022d	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  00232	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00236	0f 28 c1	 movaps	 xmm0, xmm1
  00239	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR _Lay$[ebp]
  0023e	f3 0f 59 4d 28	 mulss	 xmm1, DWORD PTR _Laz$[ebp]
  00243	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  00248	f3 0f 58 4d 10	 addss	 xmm1, DWORD PTR _A1z$[ebp]
  0024d	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00251	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00256	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025b	6a 01		 push	 1
  0025d	83 ec 24	 sub	 esp, 36			; 00000024H
  00260	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1
  00264	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00268	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  0026e	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  00274	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00278	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  0027e	f3 0f 10 45 4c	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00283	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00289	f3 0f 10 45 48	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0028e	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00294	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  00299	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0029f	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  002a4	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  002aa	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  002af	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002b5	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  002ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bf	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  002c4	83 c4 3c	 add	 esp, 60			; 0000003cH
  002c7	5f		 pop	 edi

; 758  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz, true,
; 759  : 				epsilon_squared, PointOnSegBx, PointOnSegBy, PointOnSegBz, temp);
; 760  : 		}
; 761  : 	}
; 762  : }

  002c8	5e		 pop	 esi
  002c9	5b		 pop	 ebx
  002ca	8b e5		 mov	 esp, ebp
  002cc	5d		 pop	 ebp
  002cd	c3		 ret	 0
?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ENDP ; FindNearestPointOfParallelLineSegments
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
;	COMDAT ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z
_TEXT	SEGMENT
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_Lx$ = 20						; size = 4
_Ly$ = 24						; size = 4
_Lz$ = 28						; size = 4
_Bx$ = 32						; size = 4
_By$ = 36						; size = 4
_Bz$ = 40						; size = 4
_infinite_line$ = 44					; size = 1
_epsilon_squared$ = 48					; size = 4
_NearestPointX$ = 52					; size = 4
_NearestPointY$ = 56					; size = 4
_NearestPointZ$ = 60					; size = 4
_parameter$ = 64					; size = 4
?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z PROC ; FindNearestPointOnLineSegment, COMDAT

; 630  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 631  : 	// Line/Segment is degenerate --- special case #1
; 632  : 	float D = Lx * Lx + Ly * Ly + Lz * Lz;

  00003	f3 0f 10 6d 14	 movss	 xmm5, DWORD PTR _Lx$[ebp]
  00008	f3 0f 10 5d 18	 movss	 xmm3, DWORD PTR _Ly$[ebp]
  0000d	0f 28 d5	 movaps	 xmm2, xmm5
  00010	f3 0f 10 65 1c	 movss	 xmm4, DWORD PTR _Lz$[ebp]
  00015	0f 28 c3	 movaps	 xmm0, xmm3
  00018	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0001c	f3 0f 59 d5	 mulss	 xmm2, xmm5
  00020	f3 0f 58 d0	 addss	 xmm2, xmm0
  00024	0f 28 c4	 movaps	 xmm0, xmm4
  00027	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0002b	f3 0f 58 d0	 addss	 xmm2, xmm0

; 633  : 	if (D < epsilon_squared)

  0002f	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00034	0f 2f c2	 comiss	 xmm0, xmm2
  00037	76 26		 jbe	 SHORT $LN2@FindNeares

; 634  : 	{
; 635  : 		NearestPointX = A1x;

  00039	8b 45 34	 mov	 eax, DWORD PTR _NearestPointX$[ebp]
  0003c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00041	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 636  : 		NearestPointY = A1y;

  00045	8b 45 38	 mov	 eax, DWORD PTR _NearestPointY$[ebp]
  00048	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  0004d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 653  : 	return;
; 654  : }

  00051	8b 45 3c	 mov	 eax, DWORD PTR _NearestPointZ$[ebp]
  00054	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00059	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN2@FindNeares:

; 637  : 		NearestPointZ = A1z;
; 638  : 		return;
; 639  : 	}
; 640  : 
; 641  : 	float ABx = Bx - A1x;
; 642  : 	float ABy = By - A1y;
; 643  : 	float ABz = Bz - A1z;
; 644  : 
; 645  : 	// parameter is computed from Equation (20).
; 646  : 	parameter = (Lx * ABx + Ly * ABy + Lz * ABz) / D;
; 647  : 
; 648  : 	if (false == infinite_line) parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  0005f	80 7d 2c 00	 cmp	 BYTE PTR _infinite_line$[ebp], 0
  00063	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _By$[ebp]
  00068	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _Bx$[ebp]
  0006d	f3 0f 10 75 08	 movss	 xmm6, DWORD PTR _A1x$[ebp]
  00072	f3 0f 10 7d 0c	 movss	 xmm7, DWORD PTR _A1y$[ebp]
  00077	f3 0f 5c ce	 subss	 xmm1, xmm6
  0007b	f3 0f 5c c7	 subss	 xmm0, xmm7
  0007f	8b 4d 40	 mov	 ecx, DWORD PTR _parameter$[ebp]
  00082	f3 0f 59 cd	 mulss	 xmm1, xmm5
  00086	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0008a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0008e	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _Bz$[ebp]
  00093	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]
  00098	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0009c	f3 0f 58 c8	 addss	 xmm1, xmm0
  000a0	f3 0f 5e ca	 divss	 xmm1, xmm2
  000a4	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
  000a8	75 1a		 jne	 SHORT $LN3@FindNeares
  000aa	f3 0f 5d 0d 00
	00 00 00	 minss	 xmm1, DWORD PTR __real@3f800000
  000b2	0f 28 c1	 movaps	 xmm0, xmm1
  000b5	0f 57 c9	 xorps	 xmm1, xmm1
  000b8	0f 2f c8	 comiss	 xmm1, xmm0
  000bb	77 03		 ja	 SHORT $LN10@FindNeares
  000bd	0f 28 c8	 movaps	 xmm1, xmm0
$LN10@FindNeares:
  000c0	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
$LN3@FindNeares:

; 649  : 
; 650  : 	NearestPointX = A1x + parameter * Lx;

  000c4	8b 45 34	 mov	 eax, DWORD PTR _NearestPointX$[ebp]
  000c7	f3 0f 59 cd	 mulss	 xmm1, xmm5
  000cb	f3 0f 58 ce	 addss	 xmm1, xmm6
  000cf	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 651  : 	NearestPointY = A1y + parameter * Ly;

  000d3	f3 0f 59 19	 mulss	 xmm3, DWORD PTR [ecx]
  000d7	8b 45 38	 mov	 eax, DWORD PTR _NearestPointY$[ebp]
  000da	f3 0f 58 df	 addss	 xmm3, xmm7
  000de	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3

; 652  : 	NearestPointZ = A1z + parameter * Lz;

  000e2	f3 0f 59 21	 mulss	 xmm4, DWORD PTR [ecx]

; 653  : 	return;
; 654  : }

  000e6	8b 45 3c	 mov	 eax, DWORD PTR _NearestPointZ$[ebp]
  000e9	f3 0f 58 65 10	 addss	 xmm4, DWORD PTR _A1z$[ebp]
  000ee	f3 0f 11 20	 movss	 DWORD PTR [eax], xmm4
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ENDP ; FindNearestPointOnLineSegment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
;	COMDAT ?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z
_TEXT	SEGMENT
_Lbx$1$ = -28						; size = 4
_epsilon_squared$1$ = -24				; size = 4
_ABz$1$ = -24						; size = 4
_ABy$1$ = -20						; size = 4
_temp$ = -16						; size = 4
_ABx$1$ = -16						; size = 4
_Laz$1$ = -12						; size = 4
_Lby$1$ = -8						; size = 4
_Lbz$1$ = -4						; size = 4
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_A2x$ = 20						; size = 4
_A2y$ = 24						; size = 4
_A2z$ = 28						; size = 4
_B1x$ = 32						; size = 4
_B1y$ = 36						; size = 4
_B1z$ = 40						; size = 4
_B2x$ = 44						; size = 4
_B2y$ = 48						; size = 4
_B2z$ = 52						; size = 4
_infinite_lines$ = 56					; size = 1
_epsilon$ = 60						; size = 4
_PointOnSegAx$ = 64					; size = 4
_PointOnSegAy$ = 68					; size = 4
_PointOnSegAz$ = 72					; size = 4
_PointOnSegBx$ = 76					; size = 4
_PointOnSegBy$ = 80					; size = 4
_PointOnSegBz$ = 84					; size = 4
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z PROC ; IntersectLineSegments, COMDAT

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 322  : 	float temp = 0.f;
; 323  : 	float epsilon_squared = epsilon * epsilon;
; 324  : 
; 325  : 	// Compute parameters from Equations (1) and (2) in the text
; 326  : 	float Lax = A2x - A1x;
; 327  : 	float Lay = A2y - A1y;
; 328  : 	float Laz = A2z - A1z;
; 329  : 	float Lbx = B2x - B1x;
; 330  : 	float Lby = B2y - B1y;
; 331  : 	float Lbz = B2z - B1z;

  00006	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  0000b	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _B1z$[ebp]
  00010	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  00015	f3 0f 10 75 14	 movss	 xmm6, DWORD PTR _A2x$[ebp]
  0001a	f3 0f 10 7d 18	 movss	 xmm7, DWORD PTR _A2y$[ebp]
  0001f	f3 0f 5c 75 08	 subss	 xmm6, DWORD PTR _A1x$[ebp]
  00024	f3 0f 5c 7d 0c	 subss	 xmm7, DWORD PTR _A1y$[ebp]
  00029	f3 0f 10 55 2c	 movss	 xmm2, DWORD PTR _B2x$[ebp]
  0002e	f3 0f 10 65 30	 movss	 xmm4, DWORD PTR _B2y$[ebp]
  00033	f3 0f 5c 55 20	 subss	 xmm2, DWORD PTR _B1x$[ebp]
  00038	f3 0f 5c 65 24	 subss	 xmm4, DWORD PTR _B1y$[ebp]
  0003d	f3 0f 11 45 fc	 movss	 DWORD PTR _Lbz$1$[ebp], xmm0

; 332  : 	// From Equation (15)
; 333  : 	float L11 =  (Lax * Lax) + (Lay * Lay) + (Laz * Laz);

  00042	0f 28 ef	 movaps	 xmm5, xmm7
  00045	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00049	0f 28 c6	 movaps	 xmm0, xmm6
  0004c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _temp$[ebp], 0
  00053	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00057	f3 0f 59 ef	 mulss	 xmm5, xmm7

; 334  : 	float L22 =  (Lbx * Lbx) + (Lby * Lby) + (Lbz * Lbz);

  0005b	0f 28 dc	 movaps	 xmm3, xmm4
  0005e	f3 0f 11 4d e8	 movss	 DWORD PTR _epsilon_squared$1$[ebp], xmm1
  00063	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _A2z$[ebp]
  00068	f3 0f 5c 4d 10	 subss	 xmm1, DWORD PTR _A1z$[ebp]
  0006d	f3 0f 58 e8	 addss	 xmm5, xmm0
  00071	f3 0f 59 dc	 mulss	 xmm3, xmm4
  00075	f3 0f 11 55 e4	 movss	 DWORD PTR _Lbx$1$[ebp], xmm2
  0007a	f3 0f 11 65 f8	 movss	 DWORD PTR _Lby$1$[ebp], xmm4
  0007f	0f 28 c1	 movaps	 xmm0, xmm1
  00082	f3 0f 11 4d f4	 movss	 DWORD PTR _Laz$1$[ebp], xmm1
  00087	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0008b	f3 0f 58 e8	 addss	 xmm5, xmm0
  0008f	0f 28 c2	 movaps	 xmm0, xmm2
  00092	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00096	f3 0f 58 d8	 addss	 xmm3, xmm0
  0009a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  0009f	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000a3	f3 0f 58 d8	 addss	 xmm3, xmm0

; 335  : 
; 336  : 	// Line/Segment A is degenerate ---- Special Case #1
; 337  : 	if (L11 < epsilon_squared)

  000a7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _epsilon_squared$1$[ebp]
  000ac	0f 2f c5	 comiss	 xmm0, xmm5
  000af	0f 86 97 00 00
	00		 jbe	 $LN2@IntersectL

; 338  : 	{
; 339  : 		PointOnSegAx = A1x;

  000b5	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  000b8	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]

; 340  : 		PointOnSegAy = A1y;

  000bd	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _A1y$[ebp]

; 341  : 		PointOnSegAz = A1z;

  000c2	f3 0f 10 5d 10	 movss	 xmm3, DWORD PTR _A1z$[ebp]
  000c7	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000cb	8b 45 44	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]

; 342  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, A1x, A1y, A1z,

  000ce	f3 0f 10 6d 3c	 movss	 xmm5, DWORD PTR _epsilon$[ebp]
  000d3	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  000d7	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  000da	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3
  000de	8d 45 f0	 lea	 eax, DWORD PTR _temp$[ebp]
  000e1	50		 push	 eax
  000e2	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  000e5	ff 75 50	 push	 DWORD PTR _PointOnSegBy$[ebp]
  000e8	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  000eb	51		 push	 ecx
  000ec	f3 0f 11 2c 24	 movss	 DWORD PTR [esp], xmm5
  000f1	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  000f4	83 ec 24	 sub	 esp, 36			; 00000024H
  000f7	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [esp+32], xmm3
  000fd	f3 0f 11 4c 24
	1c		 movss	 DWORD PTR [esp+28], xmm1
  00103	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  00109	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  0010e	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00114	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00119	f3 0f 11 64 24
	10		 movss	 DWORD PTR [esp+16], xmm4
  0011f	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  00125	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0012b	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  00130	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00136	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  0013b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00140	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00145	83 c4 3c	 add	 esp, 60			; 0000003cH

; 415  : 					B1x, B1y, B1z, Lbx, Lby, Lbz,
; 416  : 					epsilon, s, t,
; 417  : 					PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 418  : 					PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 
; 423  : }

  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c3		 ret	 0
$LN2@IntersectL:

; 343  : 			infinite_lines, epsilon, PointOnSegBx, PointOnSegBy,
; 344  : 			PointOnSegBz, temp);
; 345  : 	}
; 346  : 	// Line/Segment B is degenerate ---- Special Case #1
; 347  : 	else if (L22 < epsilon_squared)

  0014c	0f 2f c3	 comiss	 xmm0, xmm3
  0014f	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00154	0f 86 8d 00 00
	00		 jbe	 $LN4@IntersectL

; 348  : 	{
; 349  : 		PointOnSegBx = B1x;

  0015a	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]

; 350  : 		PointOnSegBy = B1y;

  0015d	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR _B1y$[ebp]

; 351  : 		PointOnSegBz = B1z;

  00162	f3 0f 10 5d 28	 movss	 xmm3, DWORD PTR _B1z$[ebp]

; 352  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B1x, B1y, B1z,

  00167	f3 0f 10 65 3c	 movss	 xmm4, DWORD PTR _epsilon$[ebp]
  0016c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00170	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  00173	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00177	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0017a	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3
  0017e	8d 45 f0	 lea	 eax, DWORD PTR _temp$[ebp]
  00181	50		 push	 eax
  00182	ff 75 48	 push	 DWORD PTR _PointOnSegAz$[ebp]
  00185	ff 75 44	 push	 DWORD PTR _PointOnSegAy$[ebp]
  00188	ff 75 40	 push	 DWORD PTR _PointOnSegAx$[ebp]
  0018b	51		 push	 ecx
  0018c	f3 0f 11 24 24	 movss	 DWORD PTR [esp], xmm4
  00191	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  00194	83 ec 24	 sub	 esp, 36			; 00000024H
  00197	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [esp+32], xmm3
  0019d	f3 0f 11 54 24
	1c		 movss	 DWORD PTR [esp+28], xmm2
  001a3	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  001a9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  001ae	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  001b4	f3 0f 11 7c 24
	10		 movss	 DWORD PTR [esp+16], xmm7
  001ba	f3 0f 11 74 24
	0c		 movss	 DWORD PTR [esp+12], xmm6
  001c0	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001c6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  001cb	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001d1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  001d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001db	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  001e0	83 c4 3c	 add	 esp, 60			; 0000003cH

; 415  : 					B1x, B1y, B1z, Lbx, Lby, Lbz,
; 416  : 					epsilon, s, t,
; 417  : 					PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 418  : 					PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 
; 423  : }

  001e3	8b e5		 mov	 esp, ebp
  001e5	5d		 pop	 ebp
  001e6	c3		 ret	 0
$LN4@IntersectL:

; 353  : 			infinite_lines, epsilon, PointOnSegAx, PointOnSegAy,
; 354  : 			PointOnSegAz, temp);
; 355  : 	}
; 356  : 	// Neither line/segment is degenerate
; 357  : 	else
; 358  : 	{
; 359  : 		// Compute more parameters from Equation (3) in the text.
; 360  : 		float ABx = B1x - A1x;

  001e7	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _A1x$[ebp]

; 361  : 		float ABy = B1y - A1y;
; 362  : 		float ABz = B1z - A1z;
; 363  : 
; 364  : 		// and from Equation (15).
; 365  : 		float L12 = -(Lax * Lbx) - (Lay * Lby) - (Laz * Lbz);

  001ec	0f 28 e2	 movaps	 xmm4, xmm2

; 366  : 
; 367  : 		float DetL = L11 * L22 - L12 * L12;

  001ef	f3 0f 59 dd	 mulss	 xmm3, xmm5
  001f3	f3 0f 59 e6	 mulss	 xmm4, xmm6
  001f7	f3 0f 11 45 f0	 movss	 DWORD PTR _ABx$1$[ebp], xmm0
  001fc	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  00201	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _A1y$[ebp]
  00206	0f 57 25 00 00
	00 00		 xorps	 xmm4, DWORD PTR __xmm@80000000800000008000000080000000
  0020d	f3 0f 11 45 ec	 movss	 DWORD PTR _ABy$1$[ebp], xmm0
  00212	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00217	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]
  0021c	f3 0f 11 45 e8	 movss	 DWORD PTR _ABz$1$[ebp], xmm0
  00221	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00226	f3 0f 59 c7	 mulss	 xmm0, xmm7
  0022a	f3 0f 5c e0	 subss	 xmm4, xmm0
  0022e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00233	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 368  : 		// Lines/Segments A and B are parallel ---- special case #2.
; 369  : 		if (FABS(DetL) < epsilon)

  00237	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  0023c	f3 0f 5c e0	 subss	 xmm4, xmm0
  00240	0f 28 c4	 movaps	 xmm0, xmm4
  00243	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00247	f3 0f 5c d8	 subss	 xmm3, xmm0
  0024b	0f 28 c3	 movaps	 xmm0, xmm3
  0024e	0f 54 05 00 00
	00 00		 andps	 xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  00255	0f 2f c8	 comiss	 xmm1, xmm0
  00258	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _Laz$1$[ebp]
  0025d	0f 86 e0 00 00
	00		 jbe	 $LN6@IntersectL

; 370  : 		{
; 371  : 			FindNearestPointOfParallelLineSegments(A1x, A1y, A1z, A2x, A2y, A2z,

  00263	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00266	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  0026b	ff 75 50	 push	 DWORD PTR _PointOnSegBy$[ebp]
  0026e	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00271	ff 75 48	 push	 DWORD PTR _PointOnSegAz$[ebp]
  00274	ff 75 44	 push	 DWORD PTR _PointOnSegAy$[ebp]
  00277	ff 75 40	 push	 DWORD PTR _PointOnSegAx$[ebp]
  0027a	51		 push	 ecx
  0027b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00280	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  00283	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00288	83 ec 48	 sub	 esp, 72			; 00000048H
  0028b	f3 0f 11 44 24
	44		 movss	 DWORD PTR [esp+68], xmm0
  00291	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00296	f3 0f 11 44 24
	40		 movss	 DWORD PTR [esp+64], xmm0
  0029c	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  002a1	f3 0f 11 54 24
	3c		 movss	 DWORD PTR [esp+60], xmm2
  002a7	f3 0f 11 44 24
	38		 movss	 DWORD PTR [esp+56], xmm0
  002ad	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  002b2	f3 0f 11 44 24
	34		 movss	 DWORD PTR [esp+52], xmm0
  002b8	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  002bd	f3 0f 11 44 24
	30		 movss	 DWORD PTR [esp+48], xmm0
  002c3	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  002c8	f3 0f 11 44 24
	2c		 movss	 DWORD PTR [esp+44], xmm0
  002ce	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  002d3	f3 0f 11 44 24
	28		 movss	 DWORD PTR [esp+40], xmm0
  002d9	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  002de	f3 0f 11 44 24
	24		 movss	 DWORD PTR [esp+36], xmm0
  002e4	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  002e9	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  002ef	f3 0f 11 7c 24
	1c		 movss	 DWORD PTR [esp+28], xmm7
  002f5	f3 0f 11 74 24
	18		 movss	 DWORD PTR [esp+24], xmm6
  002fb	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00301	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  00306	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0030c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  00311	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00317	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0031c	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00322	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00327	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0032d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00332	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00337	e8 00 00 00 00	 call	 ?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ; FindNearestPointOfParallelLineSegments
  0033c	83 c4 68	 add	 esp, 104		; 00000068H

; 415  : 					B1x, B1y, B1z, Lbx, Lby, Lbz,
; 416  : 					epsilon, s, t,
; 417  : 					PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 418  : 					PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 
; 423  : }

  0033f	8b e5		 mov	 esp, ebp
  00341	5d		 pop	 ebp
  00342	c3		 ret	 0
$LN6@IntersectL:

; 372  : 				Lax, Lay, Laz,
; 373  : 				B1x, B1y, B1z, B2x, B2y, B2z,
; 374  : 				Lbx, Lby, Lbz,
; 375  : 				infinite_lines, epsilon,
; 376  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 377  : 				PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 378  : 		}
; 379  : 		// The general case
; 380  : 		else
; 381  : 		{
; 382  : 			// from Equation (15)
; 383  : 			float ra = Lax * ABx + Lay * ABy + Laz * ABz;
; 384  : 			float rb = -Lbx * ABx - Lby * ABy - Lbz * ABz;
; 385  : 
; 386  : 			float t = (L11 * rb - ra * L12)/DetL; // Equation (12)
; 387  : 
; 388  : #ifdef USE_CRAMERS_RULE
; 389  : 			float s = (L22 * ra - rb * L12)/DetL;
; 390  : #else
; 391  : 			float s = (ra-L12*t)/L11;             // Equation (13)
; 392  : #endif // USE_CRAMERS_RULE
; 393  : 
; 394  : #ifdef CHECK_ANSWERS
; 395  : 			float check_ra = s*L11 + t*L12;
; 396  : 			float check_rb = s*L12 + t*L22;
; 397  : 			assert(FABS(check_ra-ra) < epsilon);
; 398  : 			assert(FABS(check_rb-rb) < epsilon);
; 399  : #endif // CHECK_ANSWERS
; 400  : 
; 401  : 			// if we are dealing with infinite lines or if parameters s and t both
; 402  : 			// lie in the range [0,1] then just compute the points using Equations
; 403  : 			// (1) and (2) from the text.
; 404  : 			PointOnSegAx = (A1x + s * Lax);
; 405  : 			PointOnSegAy = (A1y + s * Lay);
; 406  : 			PointOnSegAz = (A1z + s * Laz);
; 407  : 			PointOnSegBx = (B1x + t * Lbx);
; 408  : 			PointOnSegBy = (B1y + t * Lby);
; 409  : 			PointOnSegBz = (B1z + t * Lbz);
; 410  : 			// otherwise, at least one of s and t is outside of [0,1] and we have to
; 411  : 			// handle this case.
; 412  : 			if (false == infinite_lines && (OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  00343	80 7d 38 00	 cmp	 BYTE PTR _infinite_lines$[ebp], 0
  00347	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR _ABy$1$[ebp]
  0034c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _ABx$1$[ebp]
  00351	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00355	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  00358	f3 0f 59 d7	 mulss	 xmm2, xmm7
  0035c	8b 4d 44	 mov	 ecx, DWORD PTR _PointOnSegAy$[ebp]
  0035f	8b 55 48	 mov	 edx, DWORD PTR _PointOnSegAz$[ebp]
  00362	56		 push	 esi
  00363	f3 0f 58 d0	 addss	 xmm2, xmm0
  00367	8b 75 4c	 mov	 esi, DWORD PTR _PointOnSegBx$[ebp]
  0036a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _ABz$1$[ebp]
  0036f	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00373	57		 push	 edi
  00374	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _Lbx$1$[ebp]
  00379	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00380	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _ABx$1$[ebp]
  00385	f3 0f 58 d0	 addss	 xmm2, xmm0
  00389	8b 7d 50	 mov	 edi, DWORD PTR _PointOnSegBy$[ebp]
  0038c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _ABy$1$[ebp]
  00391	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00396	f3 0f 5c c8	 subss	 xmm1, xmm0
  0039a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _ABz$1$[ebp]
  0039f	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  003a4	f3 0f 5c c8	 subss	 xmm1, xmm0
  003a8	0f 28 c2	 movaps	 xmm0, xmm2
  003ab	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003af	f3 0f 59 cd	 mulss	 xmm1, xmm5
  003b3	f3 0f 5c c8	 subss	 xmm1, xmm0
  003b7	f3 0f 5e cb	 divss	 xmm1, xmm3
  003bb	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _Laz$1$[ebp]
  003c0	0f 28 c1	 movaps	 xmm0, xmm1
  003c3	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003c7	f3 0f 10 65 e4	 movss	 xmm4, DWORD PTR _Lbx$1$[ebp]
  003cc	f3 0f 5c d0	 subss	 xmm2, xmm0
  003d0	f3 0f 5e d5	 divss	 xmm2, xmm5
  003d4	f3 0f 10 6d f8	 movss	 xmm5, DWORD PTR _Lby$1$[ebp]
  003d9	0f 28 c2	 movaps	 xmm0, xmm2
  003dc	f3 0f 59 c6	 mulss	 xmm0, xmm6
  003e0	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  003e5	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  003e9	0f 28 c2	 movaps	 xmm0, xmm2
  003ec	f3 0f 59 c7	 mulss	 xmm0, xmm7
  003f0	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  003f3	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  003f8	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  003fc	0f 28 c2	 movaps	 xmm0, xmm2
  003ff	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00403	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  00408	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  0040c	0f 28 c1	 movaps	 xmm0, xmm1
  0040f	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00413	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  00418	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  0041c	0f 28 c1	 movaps	 xmm0, xmm1
  0041f	f3 0f 59 c5	 mulss	 xmm0, xmm5
  00423	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  00428	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  0042c	0f 28 c1	 movaps	 xmm0, xmm1
  0042f	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00434	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _B1z$[ebp]
  00439	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0043d	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  00440	0f 85 bf 00 00
	00		 jne	 $LN19@IntersectL
  00446	0f 57 c0	 xorps	 xmm0, xmm0
  00449	0f 2f c2	 comiss	 xmm0, xmm2
  0044c	77 23		 ja	 SHORT $LN10@IntersectL
  0044e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00456	0f 2f d0	 comiss	 xmm2, xmm0
  00459	77 16		 ja	 SHORT $LN10@IntersectL
  0045b	0f 57 db	 xorps	 xmm3, xmm3
  0045e	0f 2f d9	 comiss	 xmm3, xmm1
  00461	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _Laz$1$[ebp]
  00466	77 09		 ja	 SHORT $LN10@IntersectL
  00468	0f 2f c8	 comiss	 xmm1, xmm0
  0046b	0f 86 94 00 00
	00		 jbe	 $LN19@IntersectL
$LN10@IntersectL:

; 413  : 			{
; 414  : 				AdjustNearestPoints(A1x, A1y, A1z, Lax, Lay, Laz,

  00471	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00474	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00479	57		 push	 edi
  0047a	56		 push	 esi
  0047b	52		 push	 edx
  0047c	51		 push	 ecx
  0047d	50		 push	 eax
  0047e	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00481	f3 0f 11 4c 24
	38		 movss	 DWORD PTR [esp+56], xmm1
  00487	f3 0f 11 54 24
	34		 movss	 DWORD PTR [esp+52], xmm2
  0048d	f3 0f 11 44 24
	30		 movss	 DWORD PTR [esp+48], xmm0
  00493	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00498	f3 0f 11 44 24
	2c		 movss	 DWORD PTR [esp+44], xmm0
  0049e	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  004a3	f3 0f 11 6c 24
	28		 movss	 DWORD PTR [esp+40], xmm5
  004a9	f3 0f 11 64 24
	24		 movss	 DWORD PTR [esp+36], xmm4
  004af	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  004b5	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  004ba	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  004c0	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  004c5	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  004cb	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  004d0	f3 0f 11 5c 24
	14		 movss	 DWORD PTR [esp+20], xmm3
  004d6	f3 0f 11 7c 24
	10		 movss	 DWORD PTR [esp+16], xmm7
  004dc	f3 0f 11 74 24
	0c		 movss	 DWORD PTR [esp+12], xmm6
  004e2	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  004e8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  004ed	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  004f3	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  004f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fd	e8 00 00 00 00	 call	 ?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ; AdjustNearestPoints
  00502	83 c4 54	 add	 esp, 84			; 00000054H
$LN19@IntersectL:
  00505	5f		 pop	 edi
  00506	5e		 pop	 esi

; 415  : 					B1x, B1y, B1z, Lbx, Lby, Lbz,
; 416  : 					epsilon, s, t,
; 417  : 					PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 418  : 					PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 
; 423  : }

  00507	8b e5		 mov	 esp, ebp
  00509	5d		 pop	 ebp
  0050a	c3		 ret	 0
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z ENDP ; IntersectLineSegments
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
;	COMDAT ?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z
_TEXT	SEGMENT
_Lbx$1$ = -28						; size = 4
_Laz$1$ = -24						; size = 4
_ABz$1$ = -20						; size = 4
_epsilon_squared$1$ = -20				; size = 4
_ABy$1$ = -16						; size = 4
_ABx$1$ = -12						; size = 4
_temp$ = -12						; size = 4
_Lby$1$ = -8						; size = 4
_Lbz$1$ = -4						; size = 4
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_A2x$ = 20						; size = 4
_A2y$ = 24						; size = 4
_A2z$ = 28						; size = 4
_B1x$ = 32						; size = 4
_B1y$ = 36						; size = 4
_B1z$ = 40						; size = 4
_B2x$ = 44						; size = 4
_B2y$ = 48						; size = 4
_B2z$ = 52						; size = 4
_infinite_lines$ = 56					; size = 1
_epsilon$ = 60						; size = 4
_PointOnSegAx$ = 64					; size = 4
_PointOnSegAy$ = 68					; size = 4
_PointOnSegAz$ = 72					; size = 4
_PointOnSegBx$ = 76					; size = 4
_PointOnSegBy$ = 80					; size = 4
_PointOnSegBz$ = 84					; size = 4
_NearestPointX$ = 88					; size = 4
_NearestPointY$ = 92					; size = 4
_NearestPointZ$ = 96					; size = 4
_NearestVectorX$ = 100					; size = 4
_NearestVectorY$ = 104					; size = 4
_NearestVectorZ$ = 108					; size = 4
_true_intersection$ = 112				; size = 4
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z PROC ; IntersectLineSegments, COMDAT

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 481  : 	float temp = 0.f;
; 482  : 	float epsilon_squared = epsilon * epsilon;
; 483  : 
; 484  : 	// Compute parameters from Equations (1) and (2) in the text
; 485  : 	float Lax = A2x - A1x;
; 486  : 	float Lay = A2y - A1y;
; 487  : 	float Laz = A2z - A1z;
; 488  : 	float Lbx = B2x - B1x;
; 489  : 	float Lby = B2y - B1y;
; 490  : 	float Lbz = B2z - B1z;

  00006	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  0000b	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _B1z$[ebp]
  00010	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  00015	f3 0f 10 75 14	 movss	 xmm6, DWORD PTR _A2x$[ebp]
  0001a	f3 0f 10 7d 18	 movss	 xmm7, DWORD PTR _A2y$[ebp]
  0001f	f3 0f 5c 75 08	 subss	 xmm6, DWORD PTR _A1x$[ebp]
  00024	f3 0f 5c 7d 0c	 subss	 xmm7, DWORD PTR _A1y$[ebp]
  00029	f3 0f 10 55 2c	 movss	 xmm2, DWORD PTR _B2x$[ebp]
  0002e	f3 0f 10 65 30	 movss	 xmm4, DWORD PTR _B2y$[ebp]
  00033	f3 0f 5c 55 20	 subss	 xmm2, DWORD PTR _B1x$[ebp]
  00038	f3 0f 5c 65 24	 subss	 xmm4, DWORD PTR _B1y$[ebp]
  0003d	f3 0f 11 45 fc	 movss	 DWORD PTR _Lbz$1$[ebp], xmm0

; 491  : 	// From Equation (15)
; 492  : 	float L11 =  (Lax * Lax) + (Lay * Lay) + (Laz * Laz);

  00042	0f 28 ef	 movaps	 xmm5, xmm7
  00045	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00049	0f 28 c6	 movaps	 xmm0, xmm6
  0004c	56		 push	 esi
  0004d	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 493  : 	float L22 =  (Lbx * Lbx) + (Lby * Lby) + (Lbz * Lbz);
; 494  : 
; 495  : 	// Line/Segment A is degenerate ---- Special Case #1
; 496  : 	if (L11 < epsilon_squared)

  00051	8b 75 40	 mov	 esi, DWORD PTR _PointOnSegAx$[ebp]
  00054	f3 0f 59 ef	 mulss	 xmm5, xmm7
  00058	0f 28 dc	 movaps	 xmm3, xmm4
  0005b	57		 push	 edi
  0005c	f3 0f 11 4d ec	 movss	 DWORD PTR _epsilon_squared$1$[ebp], xmm1
  00061	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _A2z$[ebp]
  00066	f3 0f 5c 4d 10	 subss	 xmm1, DWORD PTR _A1z$[ebp]
  0006b	f3 0f 58 e8	 addss	 xmm5, xmm0
  0006f	f3 0f 59 dc	 mulss	 xmm3, xmm4
  00073	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _temp$[ebp], 0
  0007a	f3 0f 11 55 e4	 movss	 DWORD PTR _Lbx$1$[ebp], xmm2
  0007f	f3 0f 11 65 f8	 movss	 DWORD PTR _Lby$1$[ebp], xmm4
  00084	0f 28 c1	 movaps	 xmm0, xmm1
  00087	f3 0f 11 4d e8	 movss	 DWORD PTR _Laz$1$[ebp], xmm1
  0008c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00090	f3 0f 58 e8	 addss	 xmm5, xmm0
  00094	0f 28 c2	 movaps	 xmm0, xmm2
  00097	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0009b	f3 0f 58 d8	 addss	 xmm3, xmm0
  0009f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  000a4	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000a8	f3 0f 58 d8	 addss	 xmm3, xmm0
  000ac	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _epsilon_squared$1$[ebp]
  000b1	0f 2f c5	 comiss	 xmm0, xmm5
  000b4	0f 86 97 00 00
	00		 jbe	 $LN2@IntersectL

; 497  : 	{
; 498  : 		PointOnSegAx = A1x;

  000ba	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _A1x$[ebp]

; 499  : 		PointOnSegAy = A1y;

  000bf	8b 7d 44	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]

; 500  : 		PointOnSegAz = A1z;

  000c2	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  000c5	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _A1y$[ebp]
  000ca	f3 0f 10 6d 10	 movss	 xmm5, DWORD PTR _A1z$[ebp]

; 501  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, A1x, A1y, A1z,

  000cf	8b 4d 50	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  000d2	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  000d7	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1
  000db	f3 0f 11 1f	 movss	 DWORD PTR [edi], xmm3
  000df	f3 0f 11 28	 movss	 DWORD PTR [eax], xmm5
  000e3	8d 45 f4	 lea	 eax, DWORD PTR _temp$[ebp]
  000e6	50		 push	 eax
  000e7	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  000ea	50		 push	 eax
  000eb	51		 push	 ecx
  000ec	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  000ef	51		 push	 ecx
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  000f8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  000fd	83 ec 24	 sub	 esp, 36			; 00000024H
  00100	f3 0f 11 6c 24
	20		 movss	 DWORD PTR [esp+32], xmm5
  00106	f3 0f 11 5c 24
	1c		 movss	 DWORD PTR [esp+28], xmm3
  0010c	f3 0f 11 4c 24
	18		 movss	 DWORD PTR [esp+24], xmm1
  00112	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00118	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0011d	f3 0f 11 64 24
	10		 movss	 DWORD PTR [esp+16], xmm4
  00123	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  00129	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0012f	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  00134	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0013a	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  0013f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00144	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00149	83 c4 3c	 add	 esp, 60			; 0000003cH

; 502  : 			infinite_lines, epsilon, PointOnSegBx, PointOnSegBy,
; 503  : 			PointOnSegBz, temp);
; 504  : 	}

  0014c	e9 b2 03 00 00	 jmp	 $LN8@IntersectL
$LN2@IntersectL:

; 505  : 	// Line/Segment B is degenerate ---- Special Case #1
; 506  : 	else if (L22 < epsilon_squared)

  00151	0f 2f c3	 comiss	 xmm0, xmm3
  00154	0f 86 93 00 00
	00		 jbe	 $LN4@IntersectL

; 507  : 	{
; 508  : 		PointOnSegBx = B1x;

  0015a	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  0015d	f3 0f 10 55 20	 movss	 xmm2, DWORD PTR _B1x$[ebp]

; 509  : 		PointOnSegBy = B1y;

  00162	8b 4d 50	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  00165	f3 0f 10 5d 24	 movss	 xmm3, DWORD PTR _B1y$[ebp]

; 510  : 		PointOnSegBz = B1z;

  0016a	f3 0f 10 65 28	 movss	 xmm4, DWORD PTR _B1z$[ebp]

; 511  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B1x, B1y, B1z,

  0016f	8b 7d 44	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]
  00172	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00177	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0017b	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0017e	f3 0f 11 19	 movss	 DWORD PTR [ecx], xmm3
  00182	f3 0f 11 20	 movss	 DWORD PTR [eax], xmm4
  00186	8d 45 f4	 lea	 eax, DWORD PTR _temp$[ebp]
  00189	50		 push	 eax
  0018a	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  0018d	50		 push	 eax
  0018e	57		 push	 edi
  0018f	56		 push	 esi
  00190	51		 push	 ecx
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  00199	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0019e	83 ec 24	 sub	 esp, 36			; 00000024H
  001a1	f3 0f 11 64 24
	20		 movss	 DWORD PTR [esp+32], xmm4
  001a7	f3 0f 11 5c 24
	1c		 movss	 DWORD PTR [esp+28], xmm3
  001ad	f3 0f 11 54 24
	18		 movss	 DWORD PTR [esp+24], xmm2
  001b3	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  001b9	f3 0f 11 7c 24
	10		 movss	 DWORD PTR [esp+16], xmm7
  001bf	f3 0f 11 74 24
	0c		 movss	 DWORD PTR [esp+12], xmm6
  001c5	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001cb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  001d0	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001d6	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  001e5	83 c4 3c	 add	 esp, 60			; 0000003cH

; 512  : 			infinite_lines, epsilon, PointOnSegAx, PointOnSegAy,
; 513  : 			PointOnSegAz, temp);
; 514  : 	}

  001e8	e9 16 03 00 00	 jmp	 $LN8@IntersectL
$LN4@IntersectL:

; 515  : 	// Neither line/segment is degenerate
; 516  : 	else
; 517  : 	{
; 518  : 		// Compute more parameters from Equation (3) in the text.
; 519  : 		float ABx = B1x - A1x;

  001ed	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]

; 520  : 		float ABy = B1y - A1y;
; 521  : 		float ABz = B1z - A1z;
; 522  : 
; 523  : 		// and from Equation (15).
; 524  : 		float L12 = -(Lax * Lbx) - (Lay * Lby) - (Laz * Lbz);

  001f2	0f 28 e2	 movaps	 xmm4, xmm2
  001f5	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _A1x$[ebp]
  001fa	f3 0f 59 e6	 mulss	 xmm4, xmm6

; 525  : 
; 526  : 		float DetL = L11 * L22 - L12 * L12;

  001fe	f3 0f 59 dd	 mulss	 xmm3, xmm5
  00202	f3 0f 11 45 f4	 movss	 DWORD PTR _ABx$1$[ebp], xmm0
  00207	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0020c	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _A1y$[ebp]
  00211	0f 57 25 00 00
	00 00		 xorps	 xmm4, DWORD PTR __xmm@80000000800000008000000080000000
  00218	f3 0f 11 45 f0	 movss	 DWORD PTR _ABy$1$[ebp], xmm0
  0021d	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00222	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]
  00227	f3 0f 11 45 ec	 movss	 DWORD PTR _ABz$1$[ebp], xmm0
  0022c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00231	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00235	f3 0f 5c e0	 subss	 xmm4, xmm0
  00239	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  0023e	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 527  : 		// Lines/Segments A and B are parallel ---- special case #2.
; 528  : 		if (FABS(DetL) < epsilon)

  00242	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  00247	f3 0f 5c e0	 subss	 xmm4, xmm0
  0024b	0f 28 c4	 movaps	 xmm0, xmm4
  0024e	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00252	f3 0f 5c d8	 subss	 xmm3, xmm0
  00256	0f 28 c3	 movaps	 xmm0, xmm3
  00259	0f 54 05 00 00
	00 00		 andps	 xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  00260	0f 2f c8	 comiss	 xmm1, xmm0
  00263	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _Laz$1$[ebp]
  00268	0f 86 e3 00 00
	00		 jbe	 $LN6@IntersectL

; 529  : 		{
; 530  : 			FindNearestPointOfParallelLineSegments(A1x, A1y, A1z, A2x, A2y, A2z,

  0026e	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  00271	8b 4d 50	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  00274	8b 7d 44	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]
  00277	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  0027c	50		 push	 eax
  0027d	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00280	51		 push	 ecx
  00281	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00284	50		 push	 eax
  00285	57		 push	 edi
  00286	56		 push	 esi
  00287	51		 push	 ecx
  00288	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028d	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  00290	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00295	83 ec 48	 sub	 esp, 72			; 00000048H
  00298	f3 0f 11 44 24
	44		 movss	 DWORD PTR [esp+68], xmm0
  0029e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$1$[ebp]
  002a3	f3 0f 11 44 24
	40		 movss	 DWORD PTR [esp+64], xmm0
  002a9	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  002ae	f3 0f 11 54 24
	3c		 movss	 DWORD PTR [esp+60], xmm2
  002b4	f3 0f 11 44 24
	38		 movss	 DWORD PTR [esp+56], xmm0
  002ba	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  002bf	f3 0f 11 44 24
	34		 movss	 DWORD PTR [esp+52], xmm0
  002c5	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  002ca	f3 0f 11 44 24
	30		 movss	 DWORD PTR [esp+48], xmm0
  002d0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  002d5	f3 0f 11 44 24
	2c		 movss	 DWORD PTR [esp+44], xmm0
  002db	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  002e0	f3 0f 11 44 24
	28		 movss	 DWORD PTR [esp+40], xmm0
  002e6	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  002eb	f3 0f 11 44 24
	24		 movss	 DWORD PTR [esp+36], xmm0
  002f1	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  002f6	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  002fc	f3 0f 11 7c 24
	1c		 movss	 DWORD PTR [esp+28], xmm7
  00302	f3 0f 11 74 24
	18		 movss	 DWORD PTR [esp+24], xmm6
  00308	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0030e	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  00313	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00319	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  0031e	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00324	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00329	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0032f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00334	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0033a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  0033f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00344	e8 00 00 00 00	 call	 ?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ; FindNearestPointOfParallelLineSegments
  00349	83 c4 68	 add	 esp, 104		; 00000068H

; 531  : 				Lax, Lay, Laz,
; 532  : 				B1x, B1y, B1z, B2x, B2y, B2z,
; 533  : 				Lbx, Lby, Lbz,
; 534  : 				infinite_lines, epsilon,
; 535  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 536  : 				PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 537  : 		}

  0034c	e9 b2 01 00 00	 jmp	 $LN8@IntersectL
$LN6@IntersectL:

; 538  : 		// The general case
; 539  : 		else
; 540  : 		{
; 541  : 			// from Equation (15)
; 542  : 			float ra = Lax * ABx + Lay * ABy + Laz * ABz;
; 543  : 			float rb = -Lbx * ABx - Lby * ABy - Lbz * ABz;
; 544  : 
; 545  : 			float t = (L11 * rb - ra * L12)/DetL; // Equation (12)
; 546  : 
; 547  : #ifdef USE_CRAMERS_RULE
; 548  : 			float s = (L22 * ra - rb * L12)/DetL;
; 549  : #else
; 550  : 			float s = (ra-L12*t)/L11;             // Equation (13)
; 551  : #endif // USE_CRAMERS_RULE
; 552  : 
; 553  : #ifdef CHECK_ANSWERS
; 554  : 			float check_ra = s*L11 + t*L12;
; 555  : 			float check_rb = s*L12 + t*L22;
; 556  : 			assert(FABS(check_ra-ra) < epsilon);
; 557  : 			assert(FABS(check_rb-rb) < epsilon);
; 558  : #endif // CHECK_ANSWERS
; 559  : 
; 560  : 			// if we are dealing with infinite lines or if parameters s and t both
; 561  : 			// lie in the range [0,1] then just compute the points using Equations
; 562  : 			// (1) and (2) from the text.
; 563  : 			PointOnSegAx = (A1x + s * Lax);
; 564  : 			PointOnSegAy = (A1y + s * Lay);
; 565  : 			PointOnSegAz = (A1z + s * Laz);
; 566  : 			PointOnSegBx = (B1x + t * Lbx);
; 567  : 			PointOnSegBy = (B1y + t * Lby);
; 568  : 			PointOnSegBz = (B1z + t * Lbz);
; 569  : 			// otherwise, at least one of s and t is outside of [0,1] and we have to
; 570  : 			// handle this case.
; 571  : 			if (false == infinite_lines && (OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  00351	80 7d 38 00	 cmp	 BYTE PTR _infinite_lines$[ebp], 0
  00355	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _ABy$1$[ebp]
  0035a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _ABx$1$[ebp]
  0035f	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00363	8b 7d 44	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]
  00366	f3 0f 59 d7	 mulss	 xmm2, xmm7
  0036a	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  0036d	8b 4d 4c	 mov	 ecx, DWORD PTR _PointOnSegBx$[ebp]
  00370	8b 55 54	 mov	 edx, DWORD PTR _PointOnSegBz$[ebp]
  00373	f3 0f 58 d0	 addss	 xmm2, xmm0
  00377	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _ABz$1$[ebp]
  0037c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00380	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _Lbx$1$[ebp]
  00385	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0038c	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _ABx$1$[ebp]
  00391	f3 0f 58 d0	 addss	 xmm2, xmm0
  00395	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _ABy$1$[ebp]
  0039a	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _Lby$1$[ebp]
  0039f	f3 0f 5c c8	 subss	 xmm1, xmm0
  003a3	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _ABz$1$[ebp]
  003a8	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  003ad	f3 0f 5c c8	 subss	 xmm1, xmm0
  003b1	0f 28 c2	 movaps	 xmm0, xmm2
  003b4	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003b8	f3 0f 59 cd	 mulss	 xmm1, xmm5
  003bc	f3 0f 5c c8	 subss	 xmm1, xmm0
  003c0	f3 0f 5e cb	 divss	 xmm1, xmm3
  003c4	f3 0f 10 5d e8	 movss	 xmm3, DWORD PTR _Laz$1$[ebp]
  003c9	0f 28 c1	 movaps	 xmm0, xmm1
  003cc	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003d0	f3 0f 10 65 e4	 movss	 xmm4, DWORD PTR _Lbx$1$[ebp]
  003d5	f3 0f 5c d0	 subss	 xmm2, xmm0
  003d9	f3 0f 5e d5	 divss	 xmm2, xmm5
  003dd	f3 0f 10 6d f8	 movss	 xmm5, DWORD PTR _Lby$1$[ebp]
  003e2	0f 28 c2	 movaps	 xmm0, xmm2
  003e5	f3 0f 59 c6	 mulss	 xmm0, xmm6
  003e9	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  003ee	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  003f2	0f 28 c2	 movaps	 xmm0, xmm2
  003f5	f3 0f 59 c7	 mulss	 xmm0, xmm7
  003f9	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  003fe	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00402	0f 28 c2	 movaps	 xmm0, xmm2
  00405	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00409	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  0040e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00412	0f 28 c1	 movaps	 xmm0, xmm1
  00415	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00419	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  0041e	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00422	0f 28 c1	 movaps	 xmm0, xmm1
  00425	8b 4d 50	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  00428	f3 0f 59 c5	 mulss	 xmm0, xmm5
  0042c	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  00431	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00435	0f 28 c1	 movaps	 xmm0, xmm1
  00438	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  0043d	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _B1z$[ebp]
  00442	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  00446	0f 85 b7 00 00
	00		 jne	 $LN8@IntersectL
  0044c	0f 57 c0	 xorps	 xmm0, xmm0
  0044f	0f 2f c2	 comiss	 xmm0, xmm2
  00452	77 1b		 ja	 SHORT $LN10@IntersectL
  00454	0f 2f 15 00 00
	00 00		 comiss	 xmm2, DWORD PTR __real@3f800000
  0045b	77 12		 ja	 SHORT $LN10@IntersectL
  0045d	0f 2f c1	 comiss	 xmm0, xmm1
  00460	77 0d		 ja	 SHORT $LN10@IntersectL
  00462	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00469	0f 86 94 00 00
	00		 jbe	 $LN8@IntersectL
$LN10@IntersectL:

; 572  : 			{
; 573  : 				AdjustNearestPoints(A1x, A1y, A1z, Lax, Lay, Laz,

  0046f	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00474	52		 push	 edx
  00475	51		 push	 ecx
  00476	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00479	50		 push	 eax
  0047a	57		 push	 edi
  0047b	56		 push	 esi
  0047c	83 ec 3c	 sub	 esp, 60			; 0000003cH
  0047f	f3 0f 11 4c 24
	38		 movss	 DWORD PTR [esp+56], xmm1
  00485	f3 0f 11 54 24
	34		 movss	 DWORD PTR [esp+52], xmm2
  0048b	f3 0f 11 44 24
	30		 movss	 DWORD PTR [esp+48], xmm0
  00491	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00496	f3 0f 11 44 24
	2c		 movss	 DWORD PTR [esp+44], xmm0
  0049c	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  004a1	f3 0f 11 6c 24
	28		 movss	 DWORD PTR [esp+40], xmm5
  004a7	f3 0f 11 64 24
	24		 movss	 DWORD PTR [esp+36], xmm4
  004ad	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  004b3	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  004b8	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  004be	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  004c3	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  004c9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  004ce	f3 0f 11 5c 24
	14		 movss	 DWORD PTR [esp+20], xmm3
  004d4	f3 0f 11 7c 24
	10		 movss	 DWORD PTR [esp+16], xmm7
  004da	f3 0f 11 74 24
	0c		 movss	 DWORD PTR [esp+12], xmm6
  004e0	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  004e6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  004eb	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  004f1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  004f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fb	e8 00 00 00 00	 call	 ?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ; AdjustNearestPoints
  00500	83 c4 54	 add	 esp, 84			; 00000054H
$LN8@IntersectL:

; 574  : 					B1x, B1y, B1z, Lbx, Lby, Lbz,
; 575  : 					epsilon, s, t,
; 576  : 					PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 577  : 					PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 578  : 			}
; 579  : 		}
; 580  : 	}
; 581  : 
; 582  : 	NearestPointX = 0.5f * (PointOnSegAx + PointOnSegBx);

  00503	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00507	0f 57 db	 xorps	 xmm3, xmm3
  0050a	8b 4d 4c	 mov	 ecx, DWORD PTR _PointOnSegBx$[ebp]
  0050d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00515	8b 45 58	 mov	 eax, DWORD PTR _NearestPointX$[ebp]

; 583  : 	NearestPointY = 0.5f * (PointOnSegAy + PointOnSegBy);
; 584  : 	NearestPointZ = 0.5f * (PointOnSegAz + PointOnSegBz);

  00518	8b 55 48	 mov	 edx, DWORD PTR _PointOnSegAz$[ebp]
  0051b	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]

; 585  : 
; 586  : 	NearestVectorX = PointOnSegBx - PointOnSegAx;
; 587  : 	NearestVectorY = PointOnSegBy - PointOnSegAy;
; 588  : 	NearestVectorZ = PointOnSegBz - PointOnSegAz;
; 589  : 
; 590  : 	// optional check to indicate if the lines truly intersect
; 591  : 	true_intersection = (FABS(NearestVectorX) +

  0051f	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __xmm@80000000800000008000000080000000
  00527	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0052b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0052f	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00533	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  00536	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0053a	8b 45 5c	 mov	 eax, DWORD PTR _NearestPointY$[ebp]
  0053d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00541	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00545	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00549	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0054c	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00550	8b 45 60	 mov	 eax, DWORD PTR _NearestPointZ$[ebp]
  00553	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00557	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0055b	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0055f	f3 0f 5c 06	 subss	 xmm0, DWORD PTR [esi]
  00563	8b 4d 64	 mov	 ecx, DWORD PTR _NearestVectorX$[ebp]
  00566	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  00569	8b 75 68	 mov	 esi, DWORD PTR _NearestVectorY$[ebp]
  0056c	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00570	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00574	f3 0f 5c 07	 subss	 xmm0, DWORD PTR [edi]
  00578	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0057b	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  0057f	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00583	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  00587	8b 45 6c	 mov	 eax, DWORD PTR _NearestVectorZ$[ebp]
  0058a	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  0058e	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]
  00592	0f 2f da	 comiss	 xmm3, xmm2
  00595	76 03		 jbe	 SHORT $LN13@IntersectL
  00597	0f 57 d4	 xorps	 xmm2, xmm4
$LN13@IntersectL:
  0059a	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0059e	0f 2f d8	 comiss	 xmm3, xmm0
  005a1	5f		 pop	 edi
  005a2	5e		 pop	 esi
  005a3	76 03		 jbe	 SHORT $LN14@IntersectL
  005a5	0f 57 c4	 xorps	 xmm0, xmm4
$LN14@IntersectL:
  005a8	0f 2f d9	 comiss	 xmm3, xmm1
  005ab	76 03		 jbe	 SHORT $LN16@IntersectL
  005ad	0f 57 cc	 xorps	 xmm1, xmm4
$LN16@IntersectL:
  005b0	8b 45 70	 mov	 eax, DWORD PTR _true_intersection$[ebp]
  005b3	f3 0f 58 c2	 addss	 xmm0, xmm2
  005b7	f3 0f 58 c1	 addss	 xmm0, xmm1
  005bb	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  005c0	0f 2f c8	 comiss	 xmm1, xmm0
  005c3	0f 97 c1	 seta	 cl
  005c6	88 08		 mov	 BYTE PTR [eax], cl

; 592  : 		FABS(NearestVectorY) +
; 593  : 		FABS(NearestVectorZ)) < epsilon ? true : false;
; 594  : }

  005c8	8b e5		 mov	 esp, ebp
  005ca	5d		 pop	 ebp
  005cb	c3		 ret	 0
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z ENDP ; IntersectLineSegments
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp
;	COMDAT ?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z
_TEXT	SEGMENT
tv4752 = -36						; size = 4
_La$$sroa$2935$1$ = -36					; size = 4
tv4722 = -32						; size = 4
tv4834 = -32						; size = 4
_D$1$ = -32						; size = 4
tv4828 = -28						; size = 4
tv4721 = -28						; size = 4
tv4778 = -24						; size = 4
tv4614 = -24						; size = 4
tv4612 = -20						; size = 4
_Lb$$sroa$3054$1$ = -16					; size = 4
__real@3f800000$1$ = -12				; size = 4
_L12$1$ = -12						; size = 4
_Lb$$sroa$3052$1$ = -8					; size = 4
_D$1$ = -4						; size = 4
_f$1$ = 8						; size = 4
_D$1$ = 8						; size = 4
_A1$ = 8						; size = 4
_La$$sroa$2938$1$ = 8					; size = 4
_A2$ = 12						; size = 4
_s$1$sroa$2962$ = 12					; size = 4
_s$1$sroa$2964$ = 12					; size = 4
tv4602 = 12						; size = 4
_s$1$sroa$2962$1$ = 12					; size = 4
tv4754 = 12						; size = 4
_s$1$ = 12						; size = 4
_f$1$ = 12						; size = 4
_D$1$ = 12						; size = 4
_f$1$ = 12						; size = 4
tv4601 = 12						; size = 4
_D$1$ = 12						; size = 4
_B1$ = 16						; size = 4
tv4665 = 16						; size = 4
_Lb$$sroa$3050$1$ = 16					; size = 4
_B2$ = 20						; size = 4
tv4664 = 20						; size = 4
_DetL$1$ = 20						; size = 4
tv4753 = 20						; size = 4
_f$1$ = 20						; size = 4
_D$1$ = 20						; size = 4
_OutA$ = 24						; size = 4
_OutB$ = 28						; size = 4
?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z PROC ; IntersectLineSegments, COMDAT

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _A2$[ebp]
  00009	8b 55 10	 mov	 edx, DWORD PTR _B1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 229  : {

  0000c	56		 push	 esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0000d	8b 75 08	 mov	 esi, DWORD PTR _A1$[ebp]
  00010	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00014	f3 0f 10 70 04	 movss	 xmm6, DWORD PTR [eax+4]
  00019	f3 0f 10 78 08	 movss	 xmm7, DWORD PTR [eax+8]
  0001e	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00022	f3 0f 5c c8	 subss	 xmm1, xmm0
  00026	f3 0f 11 45 e8	 movss	 DWORD PTR tv4778[ebp], xmm0
  0002b	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00030	f3 0f 5c f0	 subss	 xmm6, xmm0
  00034	f3 0f 11 45 e4	 movss	 DWORD PTR tv4828[ebp], xmm0
  00039	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0003e	f3 0f 10 62 04	 movss	 xmm4, DWORD PTR [edx+4]
  00043	f3 0f 5c f8	 subss	 xmm7, xmm0
  00047	f3 0f 11 45 e0	 movss	 DWORD PTR tv4834[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 229  : {

  0004c	57		 push	 edi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0004d	8b 7d 14	 mov	 edi, DWORD PTR _B2$[ebp]

; 182  :     z = fz;

  00050	0f 28 c6	 movaps	 xmm0, xmm6
  00053	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00057	f3 0f 11 75 dc	 movss	 DWORD PTR _La$$sroa$2935$1$[ebp], xmm6
  0005c	f3 0f 10 6f 04	 movss	 xmm5, DWORD PTR [edi+4]
  00061	f3 0f 10 1f	 movss	 xmm3, DWORD PTR [edi]
  00065	f3 0f 5c ec	 subss	 xmm5, xmm4
  00069	f3 0f 5c 1a	 subss	 xmm3, DWORD PTR [edx]

; 182  :     z = fz;

  0006d	f3 0f 11 45 fc	 movss	 DWORD PTR _D$1$[ebp], xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00072	0f 28 c1	 movaps	 xmm0, xmm1
  00075	f3 0f 10 75 fc	 movss	 xmm6, DWORD PTR _D$1$[ebp]
  0007a	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0007e	f3 0f 10 57 08	 movss	 xmm2, DWORD PTR [edi+8]
  00083	f3 0f 5c 52 08	 subss	 xmm2, DWORD PTR [edx+8]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00088	f3 0f 58 f0	 addss	 xmm6, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0008c	f3 0f 11 4d 08	 movss	 DWORD PTR _La$$sroa$2938$1$[ebp], xmm1

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00091	0f 28 c7	 movaps	 xmm0, xmm7

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00094	f3 0f 11 5d f0	 movss	 DWORD PTR _Lb$$sroa$3054$1$[ebp], xmm3

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00099	f3 0f 59 c7	 mulss	 xmm0, xmm7

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0009d	f3 0f 11 6d f8	 movss	 DWORD PTR _Lb$$sroa$3052$1$[ebp], xmm5
  000a2	f3 0f 11 55 10	 movss	 DWORD PTR _Lb$$sroa$3050$1$[ebp], xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000a7	f3 0f 58 f0	 addss	 xmm6, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 238  : 	float L11 =  D3DXVec3LengthSq(&La);

  000ab	0f 28 c5	 movaps	 xmm0, xmm5
  000ae	f3 0f 59 c5	 mulss	 xmm0, xmm5
  000b2	f3 0f 11 45 14	 movss	 DWORD PTR _DetL$1$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000b7	0f 28 c3	 movaps	 xmm0, xmm3
  000ba	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _DetL$1$[ebp]
  000bf	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000c3	f3 0f 11 75 fc	 movss	 DWORD PTR _D$1$[ebp], xmm6
  000c8	f3 0f 58 c8	 addss	 xmm1, xmm0
  000cc	0f 28 c2	 movaps	 xmm0, xmm2
  000cf	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000d3	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 242  : 	if (L11 < epsilon_squared)

  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  000df	0f 2f c6	 comiss	 xmm0, xmm6
  000e2	f3 0f 10 75 dc	 movss	 xmm6, DWORD PTR _La$$sroa$2935$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000e7	f3 0f 11 4d 14	 movss	 DWORD PTR _DetL$1$[ebp], xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 242  : 	if (L11 < epsilon_squared)

  000ec	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _La$$sroa$2938$1$[ebp]
  000f1	0f 86 ba 00 00
	00		 jbe	 $LN2@IntersectL

; 243  : 	{
; 244  : 		OutA = A1;

  000f7	8b 4d 18	 mov	 ecx, DWORD PTR _OutA$[ebp]
  000fa	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  000fe	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00102	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  0010a	0f 2f 45 14	 comiss	 xmm0, DWORD PTR _DetL$1$[ebp]

; 243  : 	{
; 244  : 		OutA = A1;

  0010e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00111	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00114	76 17		 jbe	 SHORT $LN25@IntersectL
$LN439@IntersectL:

; 312  : }

  00116	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
  00119	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00123	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00126	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c3		 ret	 0
$LN25@IntersectL:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0012d	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00131	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]
  00135	f3 0f 10 62 04	 movss	 xmm4, DWORD PTR [edx+4]
  0013a	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  0013f	f3 0f 10 6a 08	 movss	 xmm5, DWORD PTR [edx+8]
  00144	f3 0f 5c cc	 subss	 xmm1, xmm4
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00148	8b 45 1c	 mov	 eax, DWORD PTR _OutB$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0014b	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0014f	5f		 pop	 edi

; 182  :     z = fz;

  00150	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _Lb$$sroa$3052$1$[ebp]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00155	f3 0f 58 c8	 addss	 xmm1, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00159	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0015e	f3 0f 5c c5	 subss	 xmm0, xmm5
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 312  : }

  00162	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00163	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00167	0f 57 d2	 xorps	 xmm2, xmm2
  0016a	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  0016e	f3 0f 5e 4d 14	 divss	 xmm1, DWORD PTR _DetL$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00173	f3 0f 5d 0d 00
	00 00 00	 minss	 xmm1, DWORD PTR __real@3f800000
  0017b	f3 0f 5f d1	 maxss	 xmm2, xmm1

; 49   : 	Nearest = A1 + parameter * L;

  0017f	0f 28 c2	 movaps	 xmm0, xmm2
  00182	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00186	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0018a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0018e	0f 28 c2	 movaps	 xmm0, xmm2
  00191	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _Lb$$sroa$3052$1$[ebp]

; 181  :     y = fy;

  00196	f3 0f 59 55 10	 mulss	 xmm2, DWORD PTR _Lb$$sroa$3050$1$[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0019b	f3 0f 58 c4	 addss	 xmm0, xmm4
  0019f	f3 0f 58 d5	 addss	 xmm2, xmm5
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  001a3	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  001a8	f3 0f 11 50 08	 movss	 DWORD PTR [eax+8], xmm2

; 312  : }

  001ad	8b e5		 mov	 esp, ebp
  001af	5d		 pop	 ebp
  001b0	c3		 ret	 0
$LN2@IntersectL:

; 245  : 		FindNearestPointOnLineSegment(B1, Lb, A1,
; 246  : 			OutB, temp);
; 247  : 	}
; 248  : 	// Line/Segment B is degenerate ---- Special Case #1
; 249  : 	else if (L22 < epsilon_squared)

  001b1	0f 2f 45 14	 comiss	 xmm0, DWORD PTR _DetL$1$[ebp]
  001b5	0f 86 b9 00 00
	00		 jbe	 $LN4@IntersectL

; 250  : 	{
; 251  : 		OutB = B1;

  001bb	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
  001be	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  001c2	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _D$1$[ebp]

; 250  : 	{
; 251  : 		OutB = B1;

  001c7	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  001cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  001d3	0f 2f c2	 comiss	 xmm0, xmm2

; 250  : 	{
; 251  : 		OutB = B1;

  001d6	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001d9	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  001dc	76 17		 jbe	 SHORT $LN50@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  001de	8b 4d 18	 mov	 ecx, DWORD PTR _OutA$[ebp]
  001e1	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  001e5	5f		 pop	 edi
  001e6	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  001ea	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001ed	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 312  : }

  001f0	5e		 pop	 esi
  001f1	8b e5		 mov	 esp, ebp
  001f3	5d		 pop	 ebp
  001f4	c3		 ret	 0
$LN50@IntersectL:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001f5	f3 0f 10 66 04	 movss	 xmm4, DWORD PTR [esi+4]
  001fa	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  001ff	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  00203	f3 0f 5c c4	 subss	 xmm0, xmm4
  00207	f3 0f 5c 0e	 subss	 xmm1, DWORD PTR [esi]
  0020b	f3 0f 10 6e 08	 movss	 xmm5, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00210	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  00213	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00214	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 182  :     z = fz;

  00218	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR _La$$sroa$2938$1$[ebp]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0021d	f3 0f 58 c8	 addss	 xmm1, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00221	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00226	f3 0f 5c c5	 subss	 xmm0, xmm5

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0022a	f3 0f 59 c7	 mulss	 xmm0, xmm7
  0022e	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00232	f3 0f 5e ca	 divss	 xmm1, xmm2
  00236	0f 57 d2	 xorps	 xmm2, xmm2

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00239	f3 0f 5d 0d 00
	00 00 00	 minss	 xmm1, DWORD PTR __real@3f800000
  00241	f3 0f 5f d1	 maxss	 xmm2, xmm1

; 49   : 	Nearest = A1 + parameter * L;

  00245	0f 28 c2	 movaps	 xmm0, xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00248	f3 0f 59 f2	 mulss	 xmm6, xmm2
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0024c	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _La$$sroa$2938$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00251	f3 0f 59 fa	 mulss	 xmm7, xmm2

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00255	f3 0f 58 f4	 addss	 xmm6, xmm4
  00259	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 312  : }

  0025d	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0025e	f3 0f 58 fd	 addss	 xmm7, xmm5
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00262	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00266	f3 0f 11 70 04	 movss	 DWORD PTR [eax+4], xmm6
  0026b	f3 0f 11 78 08	 movss	 DWORD PTR [eax+8], xmm7

; 312  : }

  00270	8b e5		 mov	 esp, ebp
  00272	5d		 pop	 ebp
  00273	c3		 ret	 0
$LN4@IntersectL:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00274	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00278	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR tv4778[ebp]
  0027d	f3 0f 5c 65 e4	 subss	 xmm4, DWORD PTR tv4828[ebp]
  00282	f3 0f 11 45 ec	 movss	 DWORD PTR tv4612[ebp], xmm0
  00287	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0028c	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR tv4834[ebp]
  00291	f3 0f 11 45 e8	 movss	 DWORD PTR tv4614[ebp], xmm0

; 182  :     z = fz;

  00296	0f 28 c5	 movaps	 xmm0, xmm5
  00299	f3 0f 59 c6	 mulss	 xmm0, xmm6
  0029d	f3 0f 11 45 f4	 movss	 DWORD PTR _L12$1$[ebp], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  002a2	0f 28 c3	 movaps	 xmm0, xmm3
  002a5	f3 0f 59 c1	 mulss	 xmm0, xmm1
  002a9	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _L12$1$[ebp]
  002ae	f3 0f 58 c8	 addss	 xmm1, xmm0
  002b2	0f 28 c2	 movaps	 xmm0, xmm2
  002b5	f3 0f 59 c7	 mulss	 xmm0, xmm7
  002b9	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 264  : 		float DetL = L11 * L22 - L12 * L12;

  002bd	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _DetL$1$[ebp]
  002c2	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _D$1$[ebp]
  002c7	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  002ce	f3 0f 11 45 14	 movss	 DWORD PTR _DetL$1$[ebp], xmm0
  002d3	0f 28 c1	 movaps	 xmm0, xmm1
  002d6	f3 0f 59 c1	 mulss	 xmm0, xmm1
  002da	f3 0f 11 4d f4	 movss	 DWORD PTR _L12$1$[ebp], xmm1
  002df	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _DetL$1$[ebp]
  002e4	f3 0f 5c c8	 subss	 xmm1, xmm0

; 265  : 		// Lines/Segments A and B are parallel ---- special case #2.
; 266  : 		if (FABS(DetL) < epsilon)

  002e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  002f0	f3 0f 11 4d 14	 movss	 DWORD PTR _DetL$1$[ebp], xmm1
  002f5	0f 54 0d 00 00
	00 00		 andps	 xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  002fc	0f 2f c1	 comiss	 xmm0, xmm1
  002ff	0f 86 e0 02 00
	00		 jbe	 $LN6@IntersectL

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00305	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0030d	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3c23d70b
  00315	0f 2f 5d fc	 comiss	 xmm3, DWORD PTR _D$1$[ebp]
  00319	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _La$$sroa$2938$1$[ebp]
  0031e	f3 0f 11 45 f4	 movss	 DWORD PTR __real@3f800000$1$[ebp], xmm0
  00323	0f 57 c0	 xorps	 xmm0, xmm0
  00326	f3 0f 11 45 14	 movss	 DWORD PTR _f$1$[ebp], xmm0
  0032b	76 1b		 jbe	 SHORT $LN103@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  0032d	8b 4d 18	 mov	 ecx, DWORD PTR _OutA$[ebp]
  00330	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]

; 38   : 		return;

  00334	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR _s$1$sroa$2964$[ebp]
  00339	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0033d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00340	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00343	8b 45 0c	 mov	 eax, DWORD PTR _A2$[ebp]
  00346	eb 69		 jmp	 SHORT $LN102@IntersectL
$LN103@IntersectL:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00348	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR tv4612[ebp]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0034d	f3 0f 59 e6	 mulss	 xmm4, xmm6

; 182  :     z = fz;

  00351	f3 0f 59 d1	 mulss	 xmm2, xmm1

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00355	f3 0f 58 e2	 addss	 xmm4, xmm2
  00359	f3 0f 10 55 e8	 movss	 xmm2, DWORD PTR tv4614[ebp]
  0035e	f3 0f 59 d7	 mulss	 xmm2, xmm7
  00362	f3 0f 58 e2	 addss	 xmm4, xmm2
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00366	f3 0f 5e 65 fc	 divss	 xmm4, DWORD PTR _D$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  0036b	f3 0f 5d 65 f4	 minss	 xmm4, DWORD PTR __real@3f800000$1$[ebp]
  00370	0f 2f c4	 comiss	 xmm0, xmm4
  00373	76 03		 jbe	 SHORT $LN109@IntersectL
  00375	0f 57 e4	 xorps	 xmm4, xmm4
$LN109@IntersectL:

; 49   : 	Nearest = A1 + parameter * L;

  00378	8b 4d 18	 mov	 ecx, DWORD PTR _OutA$[ebp]
  0037b	0f 28 c1	 movaps	 xmm0, xmm1
  0037e	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00382	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _Lb$$sroa$3050$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00387	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0038b	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0038f	0f 28 c6	 movaps	 xmm0, xmm6
  00392	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00396	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR tv4828[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0039b	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  003a0	0f 28 c7	 movaps	 xmm0, xmm7
  003a3	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  003a7	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR tv4834[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  003ac	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
$LN102@IntersectL:

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  003b1	0f 2f 5d fc	 comiss	 xmm3, DWORD PTR _D$1$[ebp]
  003b5	77 6a		 ja	 SHORT $LN404@IntersectL
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003b7	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  003bc	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003c1	f3 0f 59 c6	 mulss	 xmm0, xmm6
  003c5	f3 0f 11 45 0c	 movss	 DWORD PTR _s$1$sroa$2962$1$[ebp], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003ca	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  003ce	f3 0f 5c 06	 subss	 xmm0, DWORD PTR [esi]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003d2	f3 0f 10 6d 0c	 movss	 xmm5, DWORD PTR _s$1$sroa$2962$1$[ebp]

; 182  :     z = fz;

  003d7	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003db	f3 0f 58 e8	 addss	 xmm5, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003df	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  003e4	f3 0f 5c 46 08	 subss	 xmm0, DWORD PTR [esi+8]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003e9	f3 0f 59 c7	 mulss	 xmm0, xmm7
  003ed	f3 0f 58 e8	 addss	 xmm5, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  003f1	0f 28 c5	 movaps	 xmm0, xmm5
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003f4	f3 0f 11 6d 0c	 movss	 DWORD PTR _s$1$sroa$2962$1$[ebp], xmm5
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  003f9	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _D$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  003fe	f3 0f 10 6d 14	 movss	 xmm5, DWORD PTR _f$1$[ebp]
  00403	f3 0f 5d 45 f4	 minss	 xmm0, DWORD PTR __real@3f800000$1$[ebp]
  00408	0f 2f e8	 comiss	 xmm5, xmm0
  0040b	f3 0f 11 45 0c	 movss	 DWORD PTR _s$1$sroa$2962$1$[ebp], xmm0
  00410	76 08		 jbe	 SHORT $LN134@IntersectL
  00412	0f 28 c5	 movaps	 xmm0, xmm5
  00415	f3 0f 11 6d 0c	 movss	 DWORD PTR _s$1$sroa$2962$1$[ebp], xmm5
$LN134@IntersectL:

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0041a	f3 0f 10 6d f8	 movss	 xmm5, DWORD PTR _Lb$$sroa$3052$1$[ebp]
  0041f	eb 0a		 jmp	 SHORT $LN402@IntersectL
$LN404@IntersectL:
  00421	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$1$sroa$2962$[ebp]
  00426	f3 0f 11 45 0c	 movss	 DWORD PTR _s$1$sroa$2962$1$[ebp], xmm0
$LN402@IntersectL:

; 112  : 		if (s[0] < 0.f && s[1] < 0.f)

  0042b	f3 0f 10 5d 14	 movss	 xmm3, DWORD PTR _f$1$[ebp]
  00430	0f 2f dc	 comiss	 xmm3, xmm4
  00433	f3 0f 10 5d f0	 movss	 xmm3, DWORD PTR _Lb$$sroa$3054$1$[ebp]
  00438	76 42		 jbe	 SHORT $LN81@IntersectL
  0043a	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _f$1$[ebp]
  0043f	0f 2f d0	 comiss	 xmm2, xmm0
  00442	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _Lb$$sroa$3050$1$[ebp]
  00447	76 33		 jbe	 SHORT $LN81@IntersectL

; 113  : 		{
; 114  : 			OutA = A1;

  00449	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  0044d	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0

; 115  : 			if (s[0] < s[1])

  00451	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$1$sroa$2962$1$[ebp]
  00456	0f 2f c4	 comiss	 xmm0, xmm4
  00459	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0045c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0045f	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
  00462	0f 86 68 07 00
	00		 jbe	 $LN438@IntersectL
$LN87@IntersectL:

; 312  : }

  00468	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  0046c	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00470	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00473	5f		 pop	 edi
  00474	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00477	5e		 pop	 esi
  00478	8b e5		 mov	 esp, ebp
  0047a	5d		 pop	 ebp
  0047b	c3		 ret	 0
$LN81@IntersectL:

; 124  : 		else if (s[0] > 1.f && s[1] > 1.f)

  0047c	0f 2f 65 f4	 comiss	 xmm4, DWORD PTR __real@3f800000$1$[ebp]
  00480	76 35		 jbe	 SHORT $LN85@IntersectL
  00482	0f 2f 45 f4	 comiss	 xmm0, DWORD PTR __real@3f800000$1$[ebp]
  00486	76 2f		 jbe	 SHORT $LN85@IntersectL

; 125  : 		{
; 126  : 			OutA = A2;

  00488	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0048c	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0

; 127  : 			if (s[0] < s[1])

  00490	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$1$sroa$2962$1$[ebp]
  00495	0f 2f c4	 comiss	 xmm0, xmm4
  00498	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0049b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0049e	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
  004a1	76 c5		 jbe	 SHORT $LN87@IntersectL

; 312  : }

  004a3	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  004a7	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  004ab	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  004ae	5f		 pop	 edi
  004af	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  004b2	5e		 pop	 esi
  004b3	8b e5		 mov	 esp, ebp
  004b5	5d		 pop	 ebp
  004b6	c3		 ret	 0
$LN85@IntersectL:

; 138  : 			temp = 0.5f*(FMAX(0.0f, FMIN(1.0f, s[0])) + FMAX(0.0f, FMIN(1.0f, s[1])));

  004b7	f3 0f 5d 65 f4	 minss	 xmm4, DWORD PTR __real@3f800000$1$[ebp]
  004bc	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _f$1$[ebp]
  004c1	f3 0f 5f c4	 maxss	 xmm0, xmm4
  004c5	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR _s$1$sroa$2962$1$[ebp]
  004ca	f3 0f 5d 65 f4	 minss	 xmm4, DWORD PTR __real@3f800000$1$[ebp]
  004cf	f3 0f 11 45 08	 movss	 DWORD PTR _f$1$[ebp], xmm0
  004d4	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _f$1$[ebp]
  004d9	f3 0f 5f c4	 maxss	 xmm0, xmm4
  004dd	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _f$1$[ebp]
  004e2	f3 0f 58 e0	 addss	 xmm4, xmm0
  004e6	f3 0f 59 25 00
	00 00 00	 mulss	 xmm4, DWORD PTR __real@3f000000
  004ee	f3 0f 11 65 08	 movss	 DWORD PTR _f$1$[ebp], xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004f3	0f 28 c4	 movaps	 xmm0, xmm4
  004f6	f3 0f 59 e7	 mulss	 xmm4, xmm7
  004fa	f3 0f 10 7d 08	 movss	 xmm7, DWORD PTR _f$1$[ebp]
  004ff	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00503	f3 0f 58 66 08	 addss	 xmm4, DWORD PTR [esi+8]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00508	f3 0f 59 f9	 mulss	 xmm7, xmm1

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0050c	0f 28 cb	 movaps	 xmm1, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0050f	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00514	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00518	f3 0f 58 3e	 addss	 xmm7, DWORD PTR [esi]
  0051c	f3 0f 11 45 0c	 movss	 DWORD PTR tv4601[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 139  : 			OutA = A1 + temp * La;

  00521	f3 0f 11 39	 movss	 DWORD PTR [ecx], xmm7
  00525	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0052a	0f 28 c5	 movaps	 xmm0, xmm5
  0052d	f3 0f 59 c5	 mulss	 xmm0, xmm5
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 139  : 			OutA = A1 + temp * La;

  00531	f3 0f 11 61 08	 movss	 DWORD PTR [ecx+8], xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00536	f3 0f 58 c8	 addss	 xmm1, xmm0
  0053a	0f 28 c2	 movaps	 xmm0, xmm2
  0053d	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00541	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00545	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  0054d	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00550	f3 0f 11 4d 08	 movss	 DWORD PTR _D$1$[ebp], xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00555	0f 87 bb fb ff
	ff		 ja	 $LN439@IntersectL
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0055b	f3 0f 5c 3a	 subss	 xmm7, DWORD PTR [edx]
  0055f	f3 0f 10 52 04	 movss	 xmm2, DWORD PTR [edx+4]
  00564	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR tv4601[ebp]
  00569	f3 0f 10 5a 08	 movss	 xmm3, DWORD PTR [edx+8]
  0056e	f3 0f 5c c2	 subss	 xmm0, xmm2
  00572	f3 0f 5c e3	 subss	 xmm4, xmm3
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00576	8b 45 1c	 mov	 eax, DWORD PTR _OutB$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00579	f3 0f 59 7d f0	 mulss	 xmm7, DWORD PTR _Lb$$sroa$3054$1$[ebp]
  0057e	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 312  : }

  0057f	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00580	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00584	f3 0f 11 65 0c	 movss	 DWORD PTR tv4602[ebp], xmm4

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00589	f3 0f 58 f8	 addss	 xmm7, xmm0
  0058d	0f 28 c4	 movaps	 xmm0, xmm4
  00590	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _Lb$$sroa$3050$1$[ebp]
  00595	f3 0f 58 f8	 addss	 xmm7, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00599	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _f$1$[ebp]
  0059e	f3 0f 5e f9	 divss	 xmm7, xmm1
  005a2	f3 0f 5d 7d f4	 minss	 xmm7, DWORD PTR __real@3f800000$1$[ebp]
  005a7	f3 0f 5f c7	 maxss	 xmm0, xmm7
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005ab	0f 28 f8	 movaps	 xmm7, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  005ae	f3 0f 11 45 14	 movss	 DWORD PTR _f$1$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005b3	0f 28 c7	 movaps	 xmm0, xmm7
  005b6	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _Lb$$sroa$3054$1$[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  005bb	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  005bf	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005c3	0f 28 c7	 movaps	 xmm0, xmm7
  005c6	f3 0f 59 7d 10	 mulss	 xmm7, DWORD PTR _Lb$$sroa$3050$1$[ebp]
  005cb	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  005cf	f3 0f 58 fb	 addss	 xmm7, xmm3
  005d3	f3 0f 58 c2	 addss	 xmm0, xmm2
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  005d7	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  005dc	f3 0f 11 78 08	 movss	 DWORD PTR [eax+8], xmm7

; 312  : }

  005e1	8b e5		 mov	 esp, ebp
  005e3	5d		 pop	 ebp
  005e4	c3		 ret	 0
$LN6@IntersectL:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  005e5	0f 28 c4	 movaps	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  005e8	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  005eb	f3 0f 59 c6	 mulss	 xmm0, xmm6
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 300  : 			OutB = (B1 + t * Lb);

  005ef	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  005f2	f3 0f 59 e5	 mulss	 xmm4, xmm5
  005f6	f3 0f 11 45 0c	 movss	 DWORD PTR _s$1$[ebp], xmm0
  005fb	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv4612[ebp]
  00600	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _La$$sroa$2938$1$[ebp]
  00605	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _s$1$[ebp]
  0060a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0060e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR tv4614[ebp]
  00613	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00617	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 278  : 			float ra = D3DXVec3Dot(&La, &AB);//Lax * ABx + Lay * ABy + Laz * ABz;

  0061b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv4612[ebp]
  00620	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00624	f3 0f 58 e0	 addss	 xmm4, xmm0
  00628	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR tv4614[ebp]
  0062d	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 281  : 			float t = (L11 * rb - ra * L12)/DetL; // Equation (12)

  00631	0f 28 d1	 movaps	 xmm2, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00634	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _Lb$$sroa$3050$1$[ebp]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00639	f3 0f 58 e0	 addss	 xmm4, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 281  : 			float t = (L11 * rb - ra * L12)/DetL; // Equation (12)

  0063d	0f 28 c2	 movaps	 xmm0, xmm2
  00640	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _L12$1$[ebp]
  00645	f3 0f 59 65 fc	 mulss	 xmm4, DWORD PTR _D$1$[ebp]
  0064a	f3 0f 5c e0	 subss	 xmm4, xmm0
  0064e	f3 0f 5e 65 14	 divss	 xmm4, DWORD PTR _DetL$1$[ebp]

; 286  : 			float s = (ra-L12*t)/L11;             // Equation (13)

  00653	0f 28 c4	 movaps	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00656	f3 0f 59 cc	 mulss	 xmm1, xmm4
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 286  : 			float s = (ra-L12*t)/L11;             // Equation (13)

  0065a	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _L12$1$[ebp]
  0065f	f3 0f 5c d0	 subss	 xmm2, xmm0
  00663	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _La$$sroa$2938$1$[ebp]
  00668	f3 0f 5e 55 fc	 divss	 xmm2, DWORD PTR _D$1$[ebp]
  0066d	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00671	f3 0f 11 55 0c	 movss	 DWORD PTR _s$1$[ebp], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00676	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  0067a	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0067e	0f 28 c6	 movaps	 xmm0, xmm6
  00681	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00685	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR tv4828[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  0068a	f3 0f 11 47 04	 movss	 DWORD PTR [edi+4], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0068f	0f 28 c7	 movaps	 xmm0, xmm7
  00692	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 180  :     x = fx;

  00696	0f 28 d5	 movaps	 xmm2, xmm5
  00699	f3 0f 59 d4	 mulss	 xmm2, xmm4
  0069d	0f 57 ed	 xorps	 xmm5, xmm5

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  006a0	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR tv4834[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  006a5	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0
  006aa	0f 28 c3	 movaps	 xmm0, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  006ad	f3 0f 58 52 04	 addss	 xmm2, DWORD PTR [edx+4]
  006b2	f3 0f 58 4a 08	 addss	 xmm1, DWORD PTR [edx+8]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  006b7	f3 0f 59 c4	 mulss	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  006bb	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 300  : 			OutB = (B1 + t * Lb);

  006bf	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  006c3	f3 0f 11 51 04	 movss	 DWORD PTR [ecx+4], xmm2
  006c8	f3 0f 11 49 08	 movss	 DWORD PTR [ecx+8], xmm1

; 301  : 			// otherwise, at least one of s and t is outside of [0,1] and we have to
; 302  : 			// handle this case.
; 303  : 			if ((OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  006cd	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _s$1$[ebp]
  006d2	0f 2f e9	 comiss	 xmm5, xmm1
  006d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006dd	77 1d		 ja	 SHORT $LN208@IntersectL
  006df	0f 2f c8	 comiss	 xmm1, xmm0
  006e2	77 0e		 ja	 SHORT $LN10@IntersectL
  006e4	0f 2f ec	 comiss	 xmm5, xmm4
  006e7	77 09		 ja	 SHORT $LN10@IntersectL
  006e9	0f 2f e0	 comiss	 xmm4, xmm0
  006ec	0f 86 6c 05 00
	00		 jbe	 $LN309@IntersectL
$LN10@IntersectL:

; 182  : 	if (OUT_OF_RANGE(s) && OUT_OF_RANGE(t))

  006f2	0f 2f e9	 comiss	 xmm5, xmm1
  006f5	77 05		 ja	 SHORT $LN208@IntersectL
  006f7	0f 2f c8	 comiss	 xmm1, xmm0
  006fa	76 12		 jbe	 SHORT $LN206@IntersectL
$LN208@IntersectL:
  006fc	0f 2f ec	 comiss	 xmm5, xmm4
  006ff	0f 87 20 02 00
	00		 ja	 $LN403@IntersectL
  00705	0f 2f e0	 comiss	 xmm4, xmm0
  00708	0f 87 17 02 00
	00		 ja	 $LN403@IntersectL
$LN206@IntersectL:

; 193  : 			FindNearestPointOnLineSegment(A1, La, OutB,
; 194  : 				OutA, s);
; 195  : 			FindNearestPointOnLineSegment(B1, Lb, OutA,
; 196  : 				OutB, t);
; 197  : 		}
; 198  : 	}
; 199  : 	// otherwise, handle the case where the parameter for only one segment is
; 200  : 	// out of range
; 201  : 	else if (OUT_OF_RANGE(s))

  0070e	0f 2f e9	 comiss	 xmm5, xmm1
  00711	0f 87 20 01 00
	00		 ja	 $LN214@IntersectL
  00717	0f 2f c8	 comiss	 xmm1, xmm0
  0071a	0f 87 17 01 00
	00		 ja	 $LN214@IntersectL

; 205  : 		FindNearestPointOnLineSegment(B1, Lb,
; 206  : 			OutA,
; 207  : 			OutB, t);
; 208  : 	}
; 209  : 	else if (OUT_OF_RANGE(t))

  00720	0f 2f ec	 comiss	 xmm5, xmm4
  00723	77 09		 ja	 SHORT $LN217@IntersectL
  00725	0f 2f e0	 comiss	 xmm4, xmm0
  00728	0f 86 30 05 00
	00		 jbe	 $LN309@IntersectL
$LN217@IntersectL:

; 210  : 	{
; 211  : 		t = FMAX(0.0f, FMIN(1.0f, t));

  0072e	f3 0f 5d e0	 minss	 xmm4, xmm0
  00732	0f 57 c0	 xorps	 xmm0, xmm0
  00735	f3 0f 5f c4	 maxss	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00739	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _La$$sroa$2938$1$[ebp]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0073e	0f 28 c8	 movaps	 xmm1, xmm0
  00741	0f 28 d0	 movaps	 xmm2, xmm0
  00744	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _Lb$$sroa$3052$1$[ebp]
  00749	f3 0f 59 55 10	 mulss	 xmm2, DWORD PTR _Lb$$sroa$3050$1$[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0074e	f3 0f 58 4a 04	 addss	 xmm1, DWORD PTR [edx+4]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00753	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00757	f3 0f 58 52 08	 addss	 xmm2, DWORD PTR [edx+8]
  0075c	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00760	f3 0f 11 4d 14	 movss	 DWORD PTR tv4664[ebp], xmm1
  00765	f3 0f 11 55 10	 movss	 DWORD PTR tv4665[ebp], xmm2
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 212  : 		OutB = B1 + t*Lb;

  0076a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0076e	f3 0f 11 49 04	 movss	 DWORD PTR [ecx+4], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00773	0f 28 cc	 movaps	 xmm1, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00776	f3 0f 11 45 0c	 movss	 DWORD PTR _f$1$[ebp], xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0077b	0f 28 c6	 movaps	 xmm0, xmm6
  0077e	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00782	f3 0f 59 cc	 mulss	 xmm1, xmm4
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 212  : 		OutB = B1 + t*Lb;

  00786	f3 0f 11 51 08	 movss	 DWORD PTR [ecx+8], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0078b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0078f	0f 28 c7	 movaps	 xmm0, xmm7
  00792	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00796	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0079a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  007a2	0f 2f c1	 comiss	 xmm0, xmm1
  007a5	76 14		 jbe	 SHORT $LN376@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  007a7	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  007ab	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  007af	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  007b2	89 47 08	 mov	 DWORD PTR [edi+8], eax
  007b5	5f		 pop	 edi

; 312  : }

  007b6	5e		 pop	 esi
  007b7	8b e5		 mov	 esp, ebp
  007b9	5d		 pop	 ebp
  007ba	c3		 ret	 0
$LN376@IntersectL:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  007bb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$1$[ebp]
  007c0	f3 0f 5c 06	 subss	 xmm0, DWORD PTR [esi]
  007c4	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  007c9	f3 0f 10 5e 08	 movss	 xmm3, DWORD PTR [esi+8]

; 182  :     z = fz;

  007ce	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  007d2	f3 0f 10 65 14	 movss	 xmm4, DWORD PTR tv4664[ebp]
  007d7	f3 0f 5c e2	 subss	 xmm4, xmm2

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  007db	f3 0f 59 e6	 mulss	 xmm4, xmm6
  007df	f3 0f 58 c4	 addss	 xmm0, xmm4

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  007e3	f3 0f 10 65 10	 movss	 xmm4, DWORD PTR tv4665[ebp]
  007e8	f3 0f 5c e3	 subss	 xmm4, xmm3

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  007ec	f3 0f 59 e7	 mulss	 xmm4, xmm7
  007f0	f3 0f 58 c4	 addss	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  007f4	f3 0f 5e c1	 divss	 xmm0, xmm1

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  007f8	f3 0f 5d 05 00
	00 00 00	 minss	 xmm0, DWORD PTR __real@3f800000
  00800	f3 0f 5f e8	 maxss	 xmm5, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00804	0f 28 c5	 movaps	 xmm0, xmm5
  00807	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _La$$sroa$2938$1$[ebp]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0080c	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00810	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00814	0f 28 c5	 movaps	 xmm0, xmm5
  00817	f3 0f 59 c6	 mulss	 xmm0, xmm6
  0081b	f3 0f 59 ef	 mulss	 xmm5, xmm7

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0081f	f3 0f 58 c2	 addss	 xmm0, xmm2
  00823	f3 0f 58 eb	 addss	 xmm5, xmm3
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00827	f3 0f 11 47 04	 movss	 DWORD PTR [edi+4], xmm0
  0082c	f3 0f 11 6f 08	 movss	 DWORD PTR [edi+8], xmm5
  00831	5f		 pop	 edi

; 312  : }

  00832	5e		 pop	 esi
  00833	8b e5		 mov	 esp, ebp
  00835	5d		 pop	 ebp
  00836	c3		 ret	 0
$LN214@IntersectL:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00837	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _Lb$$sroa$3052$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 203  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  0083c	f3 0f 5d c8	 minss	 xmm1, xmm0
  00840	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00843	0f 28 d3	 movaps	 xmm2, xmm3
  00846	f3 0f 59 d3	 mulss	 xmm2, xmm3
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 203  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  0084a	f3 0f 5f c1	 maxss	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0084e	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _La$$sroa$2938$1$[ebp]
  00853	f3 0f 59 f0	 mulss	 xmm6, xmm0
  00857	f3 0f 59 f8	 mulss	 xmm7, xmm0
  0085b	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0085f	0f 28 c4	 movaps	 xmm0, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00862	f3 0f 58 76 04	 addss	 xmm6, DWORD PTR [esi+4]
  00867	f3 0f 58 7e 08	 addss	 xmm7, DWORD PTR [esi+8]
  0086c	f3 0f 58 0e	 addss	 xmm1, DWORD PTR [esi]

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00870	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00874	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 204  : 		OutA = A1 + s*La;

  00878	f3 0f 11 0f	 movss	 DWORD PTR [edi], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0087c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _Lb$$sroa$3050$1$[ebp]
  00881	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 204  : 		OutA = A1 + s*La;

  00885	f3 0f 11 77 04	 movss	 DWORD PTR [edi+4], xmm6
  0088a	f3 0f 11 7f 08	 movss	 DWORD PTR [edi+8], xmm7
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0088f	f3 0f 58 d0	 addss	 xmm2, xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00893	f3 0f 11 4d 08	 movss	 DWORD PTR _La$$sroa$2938$1$[ebp], xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00898	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  008a0	0f 2f c2	 comiss	 xmm0, xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  008a3	f3 0f 11 55 0c	 movss	 DWORD PTR _D$1$[ebp], xmm2
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  008a8	0f 87 22 03 00
	00		 ja	 $LN438@IntersectL
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  008ae	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  008b3	f3 0f 10 52 08	 movss	 xmm2, DWORD PTR [edx+8]
  008b8	f3 0f 5c f1	 subss	 xmm6, xmm1
  008bc	f3 0f 5c fa	 subss	 xmm7, xmm2

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  008c0	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _Lb$$sroa$3050$1$[ebp]
  008c5	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 312  : }

  008c6	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  008c7	f3 0f 59 f4	 mulss	 xmm6, xmm4

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  008cb	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _La$$sroa$2938$1$[ebp]
  008d0	f3 0f 5c 22	 subss	 xmm4, DWORD PTR [edx]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  008d4	f3 0f 59 7d 10	 mulss	 xmm7, DWORD PTR _Lb$$sroa$3050$1$[ebp]

; 182  :     z = fz;

  008d9	f3 0f 59 e3	 mulss	 xmm4, xmm3

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  008dd	f3 0f 58 f4	 addss	 xmm6, xmm4

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  008e1	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _Lb$$sroa$3052$1$[ebp]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  008e6	f3 0f 58 f7	 addss	 xmm6, xmm7
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  008ea	f3 0f 5e 75 0c	 divss	 xmm6, DWORD PTR _D$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  008ef	f3 0f 5d 35 00
	00 00 00	 minss	 xmm6, DWORD PTR __real@3f800000
  008f7	f3 0f 5f ee	 maxss	 xmm5, xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  008fb	f3 0f 59 dd	 mulss	 xmm3, xmm5
  008ff	f3 0f 59 e5	 mulss	 xmm4, xmm5

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00903	f3 0f 58 1a	 addss	 xmm3, DWORD PTR [edx]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00907	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0090b	f3 0f 58 e1	 addss	 xmm4, xmm1
  0090f	f3 0f 58 c2	 addss	 xmm0, xmm2
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00913	f3 0f 11 19	 movss	 DWORD PTR [ecx], xmm3
  00917	f3 0f 11 61 04	 movss	 DWORD PTR [ecx+4], xmm4

; 312  : }

  0091c	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00921	8b e5		 mov	 esp, ebp
  00923	5d		 pop	 ebp
  00924	c3		 ret	 0
$LN403@IntersectL:

; 184  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  00925	f3 0f 5d c8	 minss	 xmm1, xmm0
  00929	0f 57 d2	 xorps	 xmm2, xmm2
  0092c	f3 0f 5f d1	 maxss	 xmm2, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00930	0f 28 c2	 movaps	 xmm0, xmm2
  00933	0f 28 ca	 movaps	 xmm1, xmm2
  00936	f3 0f 59 55 08	 mulss	 xmm2, DWORD PTR _La$$sroa$2938$1$[ebp]
  0093b	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0093f	f3 0f 58 16	 addss	 xmm2, DWORD PTR [esi]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00943	f3 0f 59 cf	 mulss	 xmm1, xmm7

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00947	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]
  0094c	f3 0f 58 4e 08	 addss	 xmm1, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 185  : 		OutA = A1 + s*La;

  00951	f3 0f 11 17	 movss	 DWORD PTR [edi], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00955	f3 0f 11 55 0c	 movss	 DWORD PTR _f$1$[ebp], xmm2

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0095a	0f 28 d3	 movaps	 xmm2, xmm3
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 185  : 		OutA = A1 + s*La;

  0095d	f3 0f 11 47 04	 movss	 DWORD PTR [edi+4], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00962	f3 0f 11 45 e0	 movss	 DWORD PTR tv4722[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 185  : 		OutA = A1 + s*La;

  00967	f3 0f 11 4f 08	 movss	 DWORD PTR [edi+8], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0096c	f3 0f 11 4d e4	 movss	 DWORD PTR tv4721[ebp], xmm1

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00971	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _Lb$$sroa$3052$1$[ebp]
  00976	0f 28 c1	 movaps	 xmm0, xmm1
  00979	f3 0f 59 d3	 mulss	 xmm2, xmm3
  0097d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00981	f3 0f 58 d0	 addss	 xmm2, xmm0
  00985	f3 0f 11 55 14	 movss	 DWORD PTR _D$1$[ebp], xmm2
  0098a	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _Lb$$sroa$3050$1$[ebp]
  0098f	f3 0f 10 75 14	 movss	 xmm6, DWORD PTR _D$1$[ebp]
  00994	0f 28 c2	 movaps	 xmm0, xmm2
  00997	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0099b	f3 0f 58 f0	 addss	 xmm6, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0099f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  009a7	f3 0f 11 75 14	 movss	 DWORD PTR _D$1$[ebp], xmm6
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  009ac	0f 2f c6	 comiss	 xmm0, xmm6
  009af	f3 0f 10 75 dc	 movss	 xmm6, DWORD PTR _La$$sroa$2935$1$[ebp]
  009b4	76 13		 jbe	 SHORT $LN252@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  009b6	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  009ba	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  009be	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  009c1	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 38   : 		return;

  009c4	e9 9e 00 00 00	 jmp	 $LN251@IntersectL
$LN252@IntersectL:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  009c9	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _f$1$[ebp]
  009ce	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]
  009d2	f3 0f 10 52 04	 movss	 xmm2, DWORD PTR [edx+4]
  009d7	f3 0f 10 65 e0	 movss	 xmm4, DWORD PTR tv4722[ebp]
  009dc	f3 0f 10 5a 08	 movss	 xmm3, DWORD PTR [edx+8]
  009e1	f3 0f 5c e2	 subss	 xmm4, xmm2
  009e5	f3 0f 11 45 0c	 movss	 DWORD PTR _f$1$[ebp], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  009ea	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _Lb$$sroa$3054$1$[ebp]
  009ef	f3 0f 10 75 0c	 movss	 xmm6, DWORD PTR _f$1$[ebp]
  009f4	f3 0f 59 f0	 mulss	 xmm6, xmm0

; 182  :     z = fz;

  009f8	f3 0f 59 e1	 mulss	 xmm4, xmm1

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  009fc	f3 0f 58 e6	 addss	 xmm4, xmm6

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00a00	f3 0f 10 75 e4	 movss	 xmm6, DWORD PTR tv4721[ebp]
  00a05	f3 0f 5c f3	 subss	 xmm6, xmm3

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00a09	f3 0f 59 75 10	 mulss	 xmm6, DWORD PTR _Lb$$sroa$3050$1$[ebp]
  00a0e	f3 0f 58 e6	 addss	 xmm4, xmm6
  00a12	f3 0f 10 75 dc	 movss	 xmm6, DWORD PTR _La$$sroa$2935$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00a17	f3 0f 5e 65 14	 divss	 xmm4, DWORD PTR _D$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00a1c	f3 0f 5d 25 00
	00 00 00	 minss	 xmm4, DWORD PTR __real@3f800000
  00a24	f3 0f 11 65 e0	 movss	 DWORD PTR tv4722[ebp], xmm4
  00a29	0f 57 e4	 xorps	 xmm4, xmm4
  00a2c	f3 0f 5f 65 e0	 maxss	 xmm4, DWORD PTR tv4722[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00a31	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00a35	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00a39	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00a3d	0f 28 c1	 movaps	 xmm0, xmm1
  00a40	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00a44	f3 0f 58 c2	 addss	 xmm0, xmm2

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00a48	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _Lb$$sroa$3050$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00a4d	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00a52	0f 28 c2	 movaps	 xmm0, xmm2
  00a55	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00a59	f3 0f 58 c3	 addss	 xmm0, xmm3
  00a5d	f3 0f 10 5d f0	 movss	 xmm3, DWORD PTR _Lb$$sroa$3054$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00a62	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
$LN251@IntersectL:

; 189  : 		if (OUT_OF_RANGE(t))

  00a67	0f 2f ec	 comiss	 xmm5, xmm4
  00a6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a72	77 09		 ja	 SHORT $LN211@IntersectL
  00a74	0f 2f e0	 comiss	 xmm4, xmm0
  00a77	0f 86 e1 01 00
	00		 jbe	 $LN309@IntersectL
$LN211@IntersectL:

; 190  : 		{
; 191  : 			t = FMAX(0.0f, FMIN(1.0f, t));

  00a7d	f3 0f 5d e0	 minss	 xmm4, xmm0
  00a81	0f 57 c0	 xorps	 xmm0, xmm0
  00a84	f3 0f 5f c4	 maxss	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00a88	0f 28 e1	 movaps	 xmm4, xmm1
  00a8b	0f 28 ca	 movaps	 xmm1, xmm2
  00a8e	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00a92	f3 0f 59 e0	 mulss	 xmm4, xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00a96	f3 0f 58 4a 08	 addss	 xmm1, DWORD PTR [edx+8]
  00a9b	f3 0f 58 62 04	 addss	 xmm4, DWORD PTR [edx+4]
  00aa0	f3 0f 11 4d 14	 movss	 DWORD PTR tv4753[ebp], xmm1

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00aa5	0f 28 cb	 movaps	 xmm1, xmm3
  00aa8	f3 0f 59 c8	 mulss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 192  : 			OutB = B1 + t*Lb;

  00aac	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR tv4753[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00ab1	f3 0f 11 65 dc	 movss	 DWORD PTR tv4752[ebp], xmm4
  00ab6	f3 0f 58 0a	 addss	 xmm1, DWORD PTR [edx]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 192  : 			OutB = B1 + t*Lb;

  00aba	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
  00abe	f3 0f 11 61 04	 movss	 DWORD PTR [ecx+4], xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00ac3	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _La$$sroa$2938$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 192  : 			OutB = B1 + t*Lb;

  00ac8	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00acd	0f 28 c6	 movaps	 xmm0, xmm6

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00ad0	f3 0f 11 4d 0c	 movss	 DWORD PTR tv4754[ebp], xmm1

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00ad5	0f 28 cc	 movaps	 xmm1, xmm4
  00ad8	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00adc	f3 0f 59 cc	 mulss	 xmm1, xmm4
  00ae0	f3 0f 58 c8	 addss	 xmm1, xmm0
  00ae4	0f 28 c7	 movaps	 xmm0, xmm7
  00ae7	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00aeb	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00aef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00af7	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00afa	f3 0f 11 4d e0	 movss	 DWORD PTR _D$1$[ebp], xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00aff	76 13		 jbe	 SHORT $LN285@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  00b01	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  00b05	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  00b09	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00b0c	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 38   : 		return;

  00b0f	e9 88 00 00 00	 jmp	 $LN284@IntersectL
$LN285@IntersectL:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00b14	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR tv4754[ebp]
  00b19	f3 0f 5c 06	 subss	 xmm0, DWORD PTR [esi]
  00b1d	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  00b22	f3 0f 10 5e 08	 movss	 xmm3, DWORD PTR [esi+8]

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00b27	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00b2b	f3 0f 10 65 dc	 movss	 xmm4, DWORD PTR tv4752[ebp]
  00b30	f3 0f 5c e2	 subss	 xmm4, xmm2

; 182  :     z = fz;

  00b34	f3 0f 59 e6	 mulss	 xmm4, xmm6

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00b38	f3 0f 58 c4	 addss	 xmm0, xmm4

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00b3c	f3 0f 10 65 14	 movss	 xmm4, DWORD PTR tv4753[ebp]
  00b41	f3 0f 5c e3	 subss	 xmm4, xmm3

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00b45	f3 0f 59 e7	 mulss	 xmm4, xmm7
  00b49	f3 0f 58 c4	 addss	 xmm0, xmm4

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b4d	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _La$$sroa$2938$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00b52	f3 0f 5e 45 e0	 divss	 xmm0, DWORD PTR _D$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00b57	f3 0f 5d 05 00
	00 00 00	 minss	 xmm0, DWORD PTR __real@3f800000
  00b5f	f3 0f 11 45 0c	 movss	 DWORD PTR tv4754[ebp], xmm0
  00b64	0f 57 c0	 xorps	 xmm0, xmm0
  00b67	f3 0f 5f 45 0c	 maxss	 xmm0, DWORD PTR tv4754[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b6c	f3 0f 59 e0	 mulss	 xmm4, xmm0
  00b70	f3 0f 59 f0	 mulss	 xmm6, xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00b74	f3 0f 58 26	 addss	 xmm4, DWORD PTR [esi]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b78	f3 0f 59 f8	 mulss	 xmm7, xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00b7c	f3 0f 58 f2	 addss	 xmm6, xmm2
  00b80	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _Lb$$sroa$3050$1$[ebp]
  00b85	f3 0f 58 fb	 addss	 xmm7, xmm3
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00b89	f3 0f 11 27	 movss	 DWORD PTR [edi], xmm4
  00b8d	f3 0f 10 5d f0	 movss	 xmm3, DWORD PTR _Lb$$sroa$3054$1$[ebp]
  00b92	f3 0f 11 77 04	 movss	 DWORD PTR [edi+4], xmm6
  00b97	f3 0f 11 7f 08	 movss	 DWORD PTR [edi+8], xmm7
$LN284@IntersectL:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00b9c	f3 0f 10 7d f8	 movss	 xmm7, DWORD PTR _Lb$$sroa$3052$1$[ebp]
  00ba1	0f 28 cb	 movaps	 xmm1, xmm3
  00ba4	0f 28 c7	 movaps	 xmm0, xmm7
  00ba7	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00bab	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00baf	f3 0f 58 c8	 addss	 xmm1, xmm0
  00bb3	0f 28 c2	 movaps	 xmm0, xmm2
  00bb6	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00bba	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00bbe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00bc6	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00bc9	f3 0f 11 4d 0c	 movss	 DWORD PTR _D$1$[ebp], xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00bce	76 14		 jbe	 SHORT $LN310@IntersectL
$LN438@IntersectL:

; 312  : }

  00bd0	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00bd4	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00bd8	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00bdb	5f		 pop	 edi
  00bdc	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00bdf	5e		 pop	 esi
  00be0	8b e5		 mov	 esp, ebp
  00be2	5d		 pop	 ebp
  00be3	c3		 ret	 0
$LN310@IntersectL:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00be4	f3 0f 10 5a 04	 movss	 xmm3, DWORD PTR [edx+4]
  00be9	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00bed	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]
  00bf1	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]

; 182  :     z = fz;

  00bf6	f3 0f 10 75 f0	 movss	 xmm6, DWORD PTR _Lb$$sroa$3054$1$[ebp]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00bfb	f3 0f 5c cb	 subss	 xmm1, xmm3
  00bff	f3 0f 10 62 08	 movss	 xmm4, DWORD PTR [edx+8]

; 182  :     z = fz;

  00c04	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00c08	f3 0f 59 cf	 mulss	 xmm1, xmm7
  00c0c	f3 0f 58 c8	 addss	 xmm1, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00c10	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00c15	f3 0f 5c c4	 subss	 xmm0, xmm4

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00c19	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _Lb$$sroa$3050$1$[ebp]
  00c1e	f3 0f 58 c8	 addss	 xmm1, xmm0

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00c22	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _Lb$$sroa$3050$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00c27	f3 0f 5e 4d 0c	 divss	 xmm1, DWORD PTR _D$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00c2c	f3 0f 5d 0d 00
	00 00 00	 minss	 xmm1, DWORD PTR __real@3f800000
  00c34	f3 0f 5f e9	 maxss	 xmm5, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00c38	f3 0f 59 f5	 mulss	 xmm6, xmm5
  00c3c	f3 0f 59 fd	 mulss	 xmm7, xmm5

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00c40	f3 0f 58 32	 addss	 xmm6, DWORD PTR [edx]

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00c44	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00c48	f3 0f 58 fb	 addss	 xmm7, xmm3
  00c4c	f3 0f 58 c4	 addss	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00c50	f3 0f 11 31	 movss	 DWORD PTR [ecx], xmm6
  00c54	f3 0f 11 79 04	 movss	 DWORD PTR [ecx+4], xmm7

; 312  : }

  00c59	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
$LN309@IntersectL:
  00c5e	5f		 pop	 edi
  00c5f	5e		 pop	 esi
  00c60	8b e5		 mov	 esp, ebp
  00c62	5d		 pop	 ebp
  00c63	c3		 ret	 0
?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z ENDP ; IntersectLineSegments
_TEXT	ENDS
END
