; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\ResourceManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_iLoadingDelayTime@@3HA			; g_iLoadingDelayTime
PUBLIC	?m_totalKB@FDumpPrint@@2MA			; FDumpPrint::m_totalKB
_BSS	SEGMENT
?m_totalKB@FDumpPrint@@2MA DD 01H DUP (?)		; FDumpPrint::m_totalKB
_BSS	ENDS
_DATA	SEGMENT
?g_iLoadingDelayTime@@3HA DD 01H			; g_iLoadingDelayTime
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$CSingleton@VCResourceManager@@@@UAE@XZ	; CSingleton<CResourceManager>::~CSingleton<CResourceManager>
PUBLIC	??_G?$CSingleton@VCResourceManager@@@@UAEPAXI@Z	; CSingleton<CResourceManager>::`scalar deleting destructor'
PUBLIC	??0CResourceManager@@QAE@XZ			; CResourceManager::CResourceManager
PUBLIC	??1CResourceManager@@UAE@XZ			; CResourceManager::~CResourceManager
PUBLIC	?LoadStaticCache@CResourceManager@@QAEXPBD@Z	; CResourceManager::LoadStaticCache
PUBLIC	?DestroyDeletingList@CResourceManager@@QAEXXZ	; CResourceManager::DestroyDeletingList
PUBLIC	?Destroy@CResourceManager@@QAEXXZ		; CResourceManager::Destroy
PUBLIC	?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z ; CResourceManager::InsertResourcePointer
PUBLIC	?FindResourcePointer@CResourceManager@@QAEPAVCResource@@K@Z ; CResourceManager::FindResourcePointer
PUBLIC	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
PUBLIC	?GetTypeResourcePointer@CResourceManager@@QAEPAVCResource@@PBDH@Z ; CResourceManager::GetTypeResourcePointer
PUBLIC	?isResourcePointerData@CResourceManager@@QAE_NK@Z ; CResourceManager::isResourcePointerData
PUBLIC	?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z ; CResourceManager::RegisterResourceNewFunctionPointer
PUBLIC	?RegisterResourceNewFunctionByTypePointer@CResourceManager@@QAEXHP6APAVCResource@@PBD@Z@Z ; CResourceManager::RegisterResourceNewFunctionByTypePointer
PUBLIC	?DumpFileListToTextFile@CResourceManager@@QAEXPBD@Z ; CResourceManager::DumpFileListToTextFile
PUBLIC	?IsFileExist@CResourceManager@@QAE_NPBD@Z	; CResourceManager::IsFileExist
PUBLIC	?Update@CResourceManager@@QAEXXZ		; CResourceManager::Update
PUBLIC	?ReserveDeletingResource@CResourceManager@@QAEXPAVCResource@@@Z ; CResourceManager::ReserveDeletingResource
PUBLIC	?ProcessBackgroundLoading@CResourceManager@@QAEXXZ ; CResourceManager::ProcessBackgroundLoading
PUBLIC	?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CResourceManager::PushBackgroundLoadingSet
PUBLIC	?__DestroyDeletingResourceMap@CResourceManager@@IAEXXZ ; CResourceManager::__DestroyDeletingResourceMap
PUBLIC	?__DestroyResourceMap@CResourceManager@@IAEXXZ	; CResourceManager::__DestroyResourceMap
PUBLIC	?__DestroyCacheMap@CResourceManager@@IAEXXZ	; CResourceManager::__DestroyCacheMap
PUBLIC	?__GetFileCRC@CResourceManager@@IAEKPBDPAPBD@Z	; CResourceManager::__GetFileCRC
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::clear
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CResource *> > >::_Insert_node
PUBLIC	??1?$map@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> > >::~map<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> > >
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> >,0> >::find
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >::_Insert_node
PUBLIC	??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >::~_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >::_Insert_node
PUBLIC	??1?$map@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@@std@@QAE@XZ ; std::map<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >::~map<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> >,0> >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Insert_node
PUBLIC	??1?$map@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@@std@@QAE@XZ ; std::map<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> > >::~map<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> > >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
PUBLIC	??1?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE@XZ ; std::map<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~map<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@JPAVCResource@@U?$less@J@std@@V?$allocator@U?$pair@$$CBJPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<long,CResource *,std::less<long>,std::allocator<std::pair<long const ,CResource *> >,0> >::~_Tree<std::_Tmap_traits<long,CResource *,std::less<long>,std::allocator<std::pair<long const ,CResource *> >,0> >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Insert_node
PUBLIC	??_GCResourceManager@@UAEPAXI@Z			; CResourceManager::`scalar deleting destructor'
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base0>::operator++
PUBLIC	??1?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >,std::_Iterator_base0>::operator++
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >,std::_Iterator_base0>::operator++
PUBLIC	?__ConvertPathName@@YAHPBDPADH@Z		; __ConvertPathName
PUBLIC	?DumpKBCompare@@YA_NABUSDumpData@@0@Z		; DumpKBCompare
PUBLIC	?DumpCostCompare@@YA_NABUSDumpData@@0@Z		; DumpCostCompare
PUBLIC	??1?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@QAE@XZ ; std::vector<SDumpData,std::allocator<SDumpData> >::~vector<SDumpData,std::allocator<SDumpData> >
PUBLIC	?_Xlength@?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@CAXXZ ; std::vector<SDumpData,std::allocator<SDumpData> >::_Xlength
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CResource *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??$_Sort_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@0HP6A_NABU1@1@Z@Z ; std::_Sort_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>
PUBLIC	??$_Emplace_reallocate@ABUSDumpData@@@?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@AAEPAUSDumpData@@QAU2@ABU2@@Z ; std::vector<SDumpData,std::allocator<SDumpData> >::_Emplace_reallocate<SDumpData const &>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<long const ,CResource *>,void *> > >
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@ABH@Z ; std::_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >::_Find_lower_bound<int>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,CResource * (__cdecl*)(char const *)>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,CResource * (__cdecl*)(char const *)>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,CResource * (__cdecl*)(char const *)>,void *> > >
PUBLIC	??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<long const ,CResource *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<long const ,CResource *>,void *> > >
PUBLIC	??$_Make_heap_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@0P6A_NABU1@1@Z@Z ; std::_Make_heap_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YA?AU?$pair@PAUSDumpData@@PAU1@@0@PAUSDumpData@@0P6A_NABU2@1@Z@Z ; std::_Partition_by_median_guess_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Pop_heap_hole_by_index@PAUSDumpData@@U1@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@HH$$QAU1@P6A_NABU1@2@Z@Z ; std::_Pop_heap_hole_by_index<SDumpData *,SDumpData,bool (__cdecl*)(SDumpData const &,SDumpData const &)>
PUBLIC	??$_Copy_memmove@PAUSDumpData@@PAU1@@std@@YAPAUSDumpData@@PAU1@00@Z ; std::_Copy_memmove<SDumpData *,SDumpData *>
PUBLIC	??$_Copy_backward_memmove@PAUSDumpData@@PAU1@@std@@YAPAUSDumpData@@PAU1@00@Z ; std::_Copy_backward_memmove<SDumpData *,SDumpData *>
PUBLIC	??$_Med3_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@00P6A_NABU1@1@Z@Z ; std::_Med3_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>
PUBLIC	??$_Copy_memmove_tail@PAUSDumpData@@@std@@YAPAUSDumpData@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<SDumpData *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCResourceManager@@@@6B@	; CSingleton<CResourceManager>::`vftable'
PUBLIC	?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A ; CResourceManager::ms_loadingThread
PUBLIC	??_7CResourceManager@@6B@			; CResourceManager::`vftable'
PUBLIC	??_C@_0CO@DICKOBGD@CResourceManager?3?3LoadStaticCac@ ; `string'
PUBLIC	??_C@_0DC@JIBACBGM@CResourceManager?3?3__DestroyDele@ ; `string'
PUBLIC	??_C@_0CK@GGPMOLNJ@CResourceManager?3?3__DestroyReso@ ; `string'
PUBLIC	??_C@_0DM@HFOFINBK@CResource?3?3InsertResourcePointe@ ; `string'
PUBLIC	??_C@_0DJ@NILLFGHO@ResourceManager?3?3GetResourcePoi@ ; `string'
PUBLIC	??_C@_0DG@LGINPHCP@CResourceManager?3?3GetResourcePo@ ; `string'
PUBLIC	??_C@_09COBKJKAL@?$CF6?41f?5?$CFs?6@		; `string'
PUBLIC	??_C@_08IGNPNJLM@?$CF?94d?5?$CFs?6@		; `string'
PUBLIC	??_C@_04DLFHDFGL@?4sub@				; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_0O@LJOLOKII@total?3?5?$CF?42fmb@		; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CResourceManager@@6B@			; CResourceManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCResourceManager@@@8			; CResourceManager `RTTI Type Descriptor'
PUBLIC	??_R3CResourceManager@@8			; CResourceManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CResourceManager@@8			; CResourceManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CResourceManager@@8		; CResourceManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCResourceManager@@@@8 ; CSingleton<CResourceManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCResourceManager@@@@@8	; CSingleton<CResourceManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCResourceManager@@@@8	; CSingleton<CResourceManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCResourceManager@@@@8	; CSingleton<CResourceManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCResourceManager@@@@6B@	; CSingleton<CResourceManager>::`RTTI Complete Object Locator'
PUBLIC	__real@3a800000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_strrchr:PROC
EXTRN	__strnicmp:PROC
EXTRN	_strncpy:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fseek:PROC
EXTRN	_ftell:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?Lognf@@YAXIPBDZZ:PROC				; Lognf
EXTRN	?Tracenf@@YAXPBDZZ:PROC				; Tracenf
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	?ELTimer_GetMSec@@YAKXZ:PROC			; ELTimer_GetMSec
EXTRN	?korean_tolower@@YADD@Z:PROC			; korean_tolower
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?isExist@CEterPackManager@@QAE_NPBD@Z:PROC	; CEterPackManager::isExist
EXTRN	?AddReference@CReferenceObject@@QAEXXZ:PROC	; CReferenceObject::AddReference
EXTRN	?AddReferenceOnly@CReferenceObject@@QAEXXZ:PROC	; CReferenceObject::AddReferenceOnly
EXTRN	?Release@CReferenceObject@@QAEXXZ:PROC		; CReferenceObject::Release
EXTRN	?canDestroy@CReferenceObject@@QAE_NXZ:PROC	; CReferenceObject::canDestroy
EXTRN	?Clear@CResource@@QAEXXZ:PROC			; CResource::Clear
EXTRN	?SetDeleteImmediately@CResource@@SAX_N@Z:PROC	; CResource::SetDeleteImmediately
EXTRN	?IsData@CResource@@QBE_NXZ:PROC			; CResource::IsData
EXTRN	?IsEmpty@CResource@@QBE_NXZ:PROC		; CResource::IsEmpty
EXTRN	?IsType@CResource@@QAE_NK@Z:PROC		; CResource::IsType
EXTRN	??0CFileLoaderThread@@QAE@XZ:PROC		; CFileLoaderThread::CFileLoaderThread
EXTRN	??1CFileLoaderThread@@QAE@XZ:PROC		; CFileLoaderThread::~CFileLoaderThread
EXTRN	?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CFileLoaderThread::Request
EXTRN	?Fetch@CFileLoaderThread@@QAE_NPAPAUSData@1@@Z:PROC ; CFileLoaderThread::Fetch
EXTRN	??_E?$CSingleton@VCResourceManager@@@@UAEPAXI@Z:PROC ; CSingleton<CResourceManager>::`vector deleting destructor'
EXTRN	??_ECResourceManager@@UAEPAXI@Z:PROC		; CResourceManager::`vector deleting destructor'
EXTRN	?Type@CGraphicImage@@SAKXZ:PROC			; CGraphicImage::Type
EXTRN	?GetWidth@CGraphicImage@@QBEHXZ:PROC		; CGraphicImage::GetWidth
EXTRN	?GetHeight@CGraphicImage@@QBEHXZ:PROC		; CGraphicImage::GetHeight
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A DB 070H DUP (?) ; CResourceManager::ms_loadingThread
_BSS	ENDS
;	COMDAT ?s_szFileExt@?BB@??GetTypeResourcePointer@CResourceManager@@QAEPAVCResource@@PBDH@Z@4PADA
_BSS	SEGMENT
?s_szFileExt@?BB@??GetTypeResourcePointer@CResourceManager@@QAEPAVCResource@@PBDH@Z@4PADA DB 09H DUP (?) ; `CResourceManager::GetTypeResourcePointer'::`17'::s_szFileExt
_BSS	ENDS
;	COMDAT ?s_szFileExt@?9??GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z@4PADA
_BSS	SEGMENT
?s_szFileExt@?9??GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z@4PADA DB 09H DUP (?) ; `CResourceManager::GetResourcePointer'::`10'::s_szFileExt
_BSS	ENDS
;	COMDAT ?s_szFullPathFileName@?1??__GetFileCRC@CResourceManager@@IAEKPBDPAPBD@Z@4PADA
_BSS	SEGMENT
?s_szFullPathFileName@?1??__GetFileCRC@CResourceManager@@IAEKPBDPAPBD@Z@4PADA DB 0104H DUP (?) ; `CResourceManager::__GetFileCRC'::`2'::s_szFullPathFileName
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_loadingThread$initializer$@CResourceManager@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A@@YAXXZ ; ??ms_loadingThread$initializer$@CResourceManager@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@3a800000
CONST	SEGMENT
__real@3a800000 DD 03a800000r			; 0.000976562
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCResourceManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCResourceManager@@@@6B@ DD 00H	; CSingleton<CResourceManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCResourceManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCResourceManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCResourceManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCResourceManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCResourceManager@@@@8 ; CSingleton<CResourceManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCResourceManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCResourceManager@@@@8 DD 00H		; CSingleton<CResourceManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCResourceManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCResourceManager@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCResourceManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CResourceManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCResourceManager@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCResourceManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCResourceManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCResourceManager@@@@@8 ; CSingleton<CResourceManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCResourceManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CResourceManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CResourceManager@@8 DD FLAT:??_R0?AVCResourceManager@@@8 ; CResourceManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CResourceManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CResourceManager@@8
rdata$r	SEGMENT
??_R2CResourceManager@@8 DD FLAT:??_R1A@?0A@EA@CResourceManager@@8 ; CResourceManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCResourceManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CResourceManager@@8
rdata$r	SEGMENT
??_R3CResourceManager@@8 DD 00H				; CResourceManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CResourceManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCResourceManager@@@8
data$rs	SEGMENT
??_R0?AVCResourceManager@@@8 DD FLAT:??_7type_info@@6B@	; CResourceManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCResourceManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CResourceManager@@6B@
rdata$r	SEGMENT
??_R4CResourceManager@@6B@ DD 00H			; CResourceManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCResourceManager@@@8
	DD	FLAT:??_R3CResourceManager@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LJOLOKII@total?3?5?$CF?42fmb@
CONST	SEGMENT
??_C@_0O@LJOLOKII@total?3?5?$CF?42fmb@ DB 'total: %.2fmb', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04DLFHDFGL@?4sub@
CONST	SEGMENT
??_C@_04DLFHDFGL@?4sub@ DB '.sub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IGNPNJLM@?$CF?94d?5?$CFs?6@
CONST	SEGMENT
??_C@_08IGNPNJLM@?$CF?94d?5?$CFs?6@ DB '%-4d %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09COBKJKAL@?$CF6?41f?5?$CFs?6@
CONST	SEGMENT
??_C@_09COBKJKAL@?$CF6?41f?5?$CFs?6@ DB '%6.1f %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LGINPHCP@CResourceManager?3?3GetResourcePo@
CONST	SEGMENT
??_C@_0DG@LGINPHCP@CResourceManager?3?3GetResourcePo@ DB 'CResourceManage'
	DB	'r::GetResourcePointer: filename error!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NILLFGHO@ResourceManager?3?3GetResourcePoi@
CONST	SEGMENT
??_C@_0DJ@NILLFGHO@ResourceManager?3?3GetResourcePoi@ DB 'ResourceManager'
	DB	'::GetResourcePointer: NOT SUPPORT FILE %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@HFOFINBK@CResource?3?3InsertResourcePointe@
CONST	SEGMENT
??_C@_0DM@HFOFINBK@CResource?3?3InsertResourcePointe@ DB 'CResource::Inse'
	DB	'rtResourcePointer: %s is already registered', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GGPMOLNJ@CResourceManager?3?3__DestroyReso@
CONST	SEGMENT
??_C@_0CK@GGPMOLNJ@CResourceManager?3?3__DestroyReso@ DB 'CResourceManage'
	DB	'r::__DestroyResourceMap %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@JIBACBGM@CResourceManager?3?3__DestroyDele@
CONST	SEGMENT
??_C@_0DC@JIBACBGM@CResourceManager?3?3__DestroyDele@ DB 'CResourceManage'
	DB	'r::__DestroyDeletingResourceMap %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DICKOBGD@CResourceManager?3?3LoadStaticCac@
CONST	SEGMENT
??_C@_0CO@DICKOBGD@CResourceManager?3?3LoadStaticCac@ DB 'CResourceManage'
	DB	'r::LoadStaticCache %s - FAILED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CResourceManager@@6B@
CONST	SEGMENT
??_7CResourceManager@@6B@ DD FLAT:??_R4CResourceManager@@6B@ ; CResourceManager::`vftable'
	DD	FLAT:??_ECResourceManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCResourceManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCResourceManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCResourceManager@@@@6B@ ; CSingleton<CResourceManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCResourceManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@QAVCResource@@K@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@1@$$QAU?$pair@QAVCResource@@K@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@QAVCResource@@K@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@1@$$QAU?$pair@QAVCResource@@K@1@@Z$1
__ehfuncinfo$??$?0U?$pair@QAVCResource@@K@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@1@$$QAU?$pair@QAVCResource@@K@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@QAVCResource@@K@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@1@$$QAU?$pair@QAVCResource@@K@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKPAVCResource@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCResource@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKPAVCResource@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCResource@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKPAVCResource@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCResource@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKPAVCResource@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCResource@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBJPAVCResource@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@1@$$QAU?$pair@$$CBJPAVCResource@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBJPAVCResource@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@1@$$QAU?$pair@$$CBJPAVCResource@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBJPAVCResource@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@1@$$QAU?$pair@$$CBJPAVCResource@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBJPAVCResource@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@1@$$QAU?$pair@$$CBJPAVCResource@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAKAAPAVCResource@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@AAKAAPAVCResource@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAKAAPAVCResource@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@AAKAAPAVCResource@@@Z$1
__ehfuncinfo$??$?0AAKAAPAVCResource@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@AAKAAPAVCResource@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0AAKAAPAVCResource@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@AAKAAPAVCResource@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABH@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABH@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABH@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABH@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABH@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@QAVCResource@@K@std@@@?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@_N@1@$$QAU?$pair@QAVCResource@@K@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@QAVCResource@@K@std@@@?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@_N@1@$$QAU?$pair@QAVCResource@@K@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@QAVCResource@@K@std@@@?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@_N@1@$$QAU?$pair@QAVCResource@@K@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@QAVCResource@@K@std@@@?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@_N@1@$$QAU?$pair@QAVCResource@@K@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCResource@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCResource@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKPAVCResource@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCResource@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKPAVCResource@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCResource@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCResource@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCResource@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBJPAVCResource@@@std@@@?$_Tree@V?$_Tmap_traits@JPAVCResource@@U?$less@J@std@@V?$allocator@U?$pair@$$CBJPAVCResource@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBJPAVCResource@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBJPAVCResource@@@std@@@?$_Tree@V?$_Tmap_traits@JPAVCResource@@U?$less@J@std@@V?$allocator@U?$pair@$$CBJPAVCResource@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBJPAVCResource@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBJPAVCResource@@@std@@@?$_Tree@V?$_Tmap_traits@JPAVCResource@@U?$less@J@std@@V?$allocator@U?$pair@$$CBJPAVCResource@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBJPAVCResource@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBJPAVCResource@@@std@@@?$_Tree@V?$_Tmap_traits@JPAVCResource@@U?$less@J@std@@V?$allocator@U?$pair@$$CBJPAVCResource@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBJPAVCResource@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAKAAPAVCResource@@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@_N@1@AAKAAPAVCResource@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAKAAPAVCResource@@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@_N@1@AAKAAPAVCResource@@@Z$2
__ehfuncinfo$??$_Emplace@AAKAAPAVCResource@@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@_N@1@AAKAAPAVCResource@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@AAKAAPAVCResource@@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@_N@1@AAKAAPAVCResource@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
__ehfuncinfo$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABH$$V@?$map@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@_N@1@ABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABH$$V@?$map@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@_N@1@ABH@Z$2
__ehfuncinfo$??$_Try_emplace@ABH$$V@?$map@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@_N@1@ABH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABH$$V@?$map@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@_N@1@ABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@QAVCResource@@K@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@QAVCResource@@K@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@QAVCResource@@K@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@QAVCResource@@K@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCResource@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCResource@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCResource@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCResource@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@JPAVCResource@@U?$less@J@std@@V?$allocator@U?$pair@$$CBJPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBJPAVCResource@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@JPAVCResource@@U?$less@J@std@@V?$allocator@U?$pair@$$CBJPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBJPAVCResource@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@JPAVCResource@@U?$less@J@std@@V?$allocator@U?$pair@$$CBJPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBJPAVCResource@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@JPAVCResource@@U?$less@J@std@@V?$allocator@U?$pair@$$CBJPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBJPAVCResource@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAKAAPAVCResource@@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCResource@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAKAAPAVCResource@@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCResource@@@Z$2
__ehfuncinfo$??$emplace@AAKAAPAVCResource@@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCResource@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$emplace@AAKAAPAVCResource@@@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCResource@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@@std@@QAEAAP6APAVCResource@@PBD@ZABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@@std@@QAEAAP6APAVCResource@@PBD@ZABH@Z$2
__ehfuncinfo$??A?$map@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@@std@@QAEAAP6APAVCResource@@PBD@ZABH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@@std@@QAEAAP6APAVCResource@@PBD@ZABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@@std@@QAEAAP6APAVCResource@@PBD@Z$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@@std@@QAEAAP6APAVCResource@@PBD@Z$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
__ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@@std@@QAEAAP6APAVCResource@@PBD@Z$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@@std@@QAEAAP6APAVCResource@@PBD@Z$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$6
__ehfuncinfo$?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ProcessBackgroundLoading@CResourceManager@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessBackgroundLoading@CResourceManager@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ProcessBackgroundLoading@CResourceManager@@QAEXXZ$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessBackgroundLoading@CResourceManager@@QAEXXZ$17
__ehfuncinfo$?ProcessBackgroundLoading@CResourceManager@@QAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ProcessBackgroundLoading@CResourceManager@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReserveDeletingResource@CResourceManager@@QAEXPAVCResource@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReserveDeletingResource@CResourceManager@@QAEXPAVCResource@@@Z$2
__ehfuncinfo$?ReserveDeletingResource@CResourceManager@@QAEXPAVCResource@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReserveDeletingResource@CResourceManager@@QAEXPAVCResource@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DumpFileListToTextFile@CResourceManager@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DumpFileListToTextFile@CResourceManager@@QAEXPBD@Z$0
__ehfuncinfo$?DumpFileListToTextFile@CResourceManager@@QAEXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DumpFileListToTextFile@CResourceManager@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterResourceNewFunctionByTypePointer@CResourceManager@@QAEXHP6APAVCResource@@PBD@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterResourceNewFunctionByTypePointer@CResourceManager@@QAEXHP6APAVCResource@@PBD@Z@Z$2
__ehfuncinfo$?RegisterResourceNewFunctionByTypePointer@CResourceManager@@QAEXHP6APAVCResource@@PBD@Z@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RegisterResourceNewFunctionByTypePointer@CResourceManager@@QAEXHP6APAVCResource@@PBD@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z$5
__ehfuncinfo$?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z$2
__ehfuncinfo$?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadStaticCache@CResourceManager@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadStaticCache@CResourceManager@@QAEXPBD@Z$2
__ehfuncinfo$?LoadStaticCache@CResourceManager@@QAEXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadStaticCache@CResourceManager@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CResourceManager@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CResourceManager@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??0CResourceManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CResourceManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CResourceManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CResourceManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CResourceManager@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CResourceManager@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CResourceManager@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CResourceManager@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CResourceManager@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CResourceManager@@QAE@XZ$7
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAUSDumpData@@@std@@YAPAUSDumpData@@QBDQAU1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAUSDumpData@@@std@@YAPAUSDumpData@@QBDQAU1@II@Z PROC ; std::_Copy_memmove_tail<SDumpData *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAUSDumpData@@@std@@YAPAUSDumpData@@QBDQAU1@II@Z ENDP ; std::_Copy_memmove_tail<SDumpData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@00P6A_NABU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Med3_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@00P6A_NABU1@1@Z@Z PROC ; std::_Med3_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>, COMDAT

; 8235 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 8236 :     // sort median of three elements to middle
; 8237 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00004	8b 5d 14	 mov	 ebx, DWORD PTR __Pred$[ebp]
  00007	56		 push	 esi
  00008	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000f	57		 push	 edi
  00010	56		 push	 esi
  00011	ff d3		 call	 ebx
  00013	83 c4 08	 add	 esp, 8
  00016	84 c0		 test	 al, al
  00018	74 1c		 je	 SHORT $LN7@Med3_unche
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0001a	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  0001e	f3 0f 7e 0e	 movq	 xmm1, QWORD PTR [esi]
  00022	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00025	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00029	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0002c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 141  :     _Right   = _STD move(_Tmp);

  0002f	66 0f d6 0f	 movq	 QWORD PTR [edi], xmm1
  00033	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
$LN7@Med3_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8241 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00036	56		 push	 esi
  00037	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  0003a	ff d3		 call	 ebx
  0003c	83 c4 08	 add	 esp, 8
  0003f	84 c0		 test	 al, al
  00041	74 46		 je	 SHORT $LN13@Med3_unche
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00043	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]

; 140  :     _Left    = _STD move(_Right);

  00046	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8244 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0004a	57		 push	 edi
  0004b	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  0004c	f3 0f 7e 0a	 movq	 xmm1, QWORD PTR [edx]
  00050	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 140  :     _Left    = _STD move(_Right);

  00053	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00057	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0005a	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 141  :     _Right   = _STD move(_Tmp);

  0005d	66 0f d6 0e	 movq	 QWORD PTR [esi], xmm1
  00061	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8244 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00064	ff d3		 call	 ebx
  00066	83 c4 08	 add	 esp, 8
  00069	84 c0		 test	 al, al
  0006b	74 1c		 je	 SHORT $LN13@Med3_unche
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0006d	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  00071	f3 0f 7e 0e	 movq	 xmm1, QWORD PTR [esi]
  00075	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00078	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  0007c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0007f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 141  :     _Right   = _STD move(_Tmp);

  00082	66 0f d6 0f	 movq	 QWORD PTR [edi], xmm1
  00086	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
$LN13@Med3_unche:
  00089	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8248 : }

  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
??$_Med3_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@00P6A_NABU1@1@Z@Z ENDP ; std::_Med3_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAUSDumpData@@PAU1@@std@@YAPAUSDumpData@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAUSDumpData@@PAU1@@std@@YAPAUSDumpData@@PAU1@00@Z PROC ; std::_Copy_backward_memmove<SDumpData *,SDumpData *>, COMDAT

; 5099 : _CtgIt2 _Copy_backward_memmove(_CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5100 :     // implement copy_backward-like function as memmove
; 5101 :     const auto _First_ptr = _STD _To_address(_First);
; 5102 :     const auto _Last_ptr  = _STD _To_address(_Last);
; 5103 :     const auto _Dest_ptr  = _STD _To_address(_Dest);
; 5104 :     const auto _First_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 5105 :     const auto _Last_ch   = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 5106 :     const auto _Dest_ch   = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 5107 :     const auto _Count     = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b c8		 sub	 ecx, eax

; 5108 :     const auto _Result    = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

  0000b	51		 push	 ecx
  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00010	2b c1		 sub	 eax, ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5109 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 5110 :         return static_cast<_CtgIt2>(_Result);
; 5111 :     } else {
; 5112 :         return _Dest - static_cast<_Iter_diff_t<_CtgIt2>>(_Last_ptr - _First_ptr);
; 5113 :     }
; 5114 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Copy_backward_memmove@PAUSDumpData@@PAU1@@std@@YAPAUSDumpData@@PAU1@00@Z ENDP ; std::_Copy_backward_memmove<SDumpData *,SDumpData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSDumpData@@PAU1@@std@@YAPAUSDumpData@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSDumpData@@PAU1@@std@@YAPAUSDumpData@@PAU1@00@Z PROC ; std::_Copy_memmove<SDumpData *,SDumpData *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  0000e	f7 e9		 imul	 ecx
  00010	d1 fa		 sar	 edx, 1
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAUSDumpData@@@std@@YAPAUSDumpData@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<SDumpData *>
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Copy_memmove@PAUSDumpData@@PAU1@@std@@YAPAUSDumpData@@PAU1@00@Z ENDP ; std::_Copy_memmove<SDumpData *,SDumpData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
;	COMDAT ??$_Pop_heap_hole_by_index@PAUSDumpData@@U1@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@HH$$QAU1@P6A_NABU1@2@Z@Z
_TEXT	SEGMENT
tv294 = -8						; size = 4
__Max_sequence_non_leaf$1$ = -4				; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$1$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$_Pop_heap_hole_by_index@PAUSDumpData@@U1@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@HH$$QAU1@P6A_NABU1@2@Z@Z PROC ; std::_Pop_heap_hole_by_index<SDumpData *,SDumpData,bool (__cdecl*)(SDumpData const &,SDumpData const &)>, COMDAT

; 58   :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 59   :     // percolate _Hole to _Bottom, then push _Val
; 60   :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 61   : 
; 62   :     using _Diff      = _Iter_diff_t<_RanIt>;
; 63   :     const _Diff _Top = _Hole;
; 64   :     _Diff _Idx       = _Hole;
; 65   : 
; 66   :     // Check whether _Idx can have a child before calculating that child's index, since
; 67   :     // calculating the child's index can trigger integer overflows
; 68   :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00006	8b 4d 10	 mov	 ecx, DWORD PTR __Bottom$[ebp]
  00009	53		 push	 ebx

; 69   :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000d	56		 push	 esi
  0000e	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00011	89 45 f8	 mov	 DWORD PTR tv294[ebp], eax
  00014	d1 f8		 sar	 eax, 1
  00016	57		 push	 edi
  00017	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  0001a	8b f7		 mov	 esi, edi
  0001c	89 7d 0c	 mov	 DWORD PTR __Top$1$[ebp], edi
  0001f	89 45 fc	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], eax
  00022	3b f8		 cmp	 edi, eax
  00024	7d 49		 jge	 SHORT $LN3@Pop_heap_h
$LL2@Pop_heap_h:

; 70   :         _Idx = 2 * _Idx + 2;

  00026	03 f6		 add	 esi, esi

; 71   :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  00028	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  0002b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0002e	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  00031	8d 41 f4	 lea	 eax, DWORD PTR [ecx-12]
  00034	50		 push	 eax
  00035	51		 push	 ecx
  00036	ff 55 18	 call	 DWORD PTR __Pred$[ebp]

; 72   :             --_Idx;
; 73   :         }
; 74   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00039	0f b6 c0	 movzx	 eax, al
  0003c	83 c4 08	 add	 esp, 8
  0003f	f7 d8		 neg	 eax
  00041	1b c0		 sbb	 eax, eax
  00043	83 c0 02	 add	 eax, 2
  00046	03 f0		 add	 esi, eax
  00048	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0004b	f3 0f 7e 04 83	 movq	 xmm0, QWORD PTR [ebx+eax*4]
  00050	8d 14 83	 lea	 edx, DWORD PTR [ebx+eax*4]
  00053	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]

; 75   :         _Hole             = _Idx;

  00056	8b fe		 mov	 edi, esi
  00058	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  0005b	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0005f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00062	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00065	8b 45 fc	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  00068	3b f0		 cmp	 esi, eax
  0006a	7c ba		 jl	 SHORT $LL2@Pop_heap_h

; 69   :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0006c	8b 4d 10	 mov	 ecx, DWORD PTR __Bottom$[ebp]
$LN3@Pop_heap_h:

; 76   :     }
; 77   : 
; 78   :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  0006f	3b f0		 cmp	 esi, eax
  00071	75 24		 jne	 SHORT $LN5@Pop_heap_h
  00073	f6 c1 01	 test	 cl, 1
  00076	75 1f		 jne	 SHORT $LN5@Pop_heap_h

; 79   :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  00078	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0007b	f3 0f 7e 44 83
	f4		 movq	 xmm0, QWORD PTR [ebx+eax*4-12]
  00081	8d 14 83	 lea	 edx, DWORD PTR [ebx+eax*4]
  00084	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]

; 80   :         _Hole             = _Bottom - 1;

  00087	8b 7d f8	 mov	 edi, DWORD PTR tv294[ebp]
  0008a	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  0008d	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00091	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  00094	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN5@Pop_heap_h:

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00097	39 7d 0c	 cmp	 DWORD PTR __Top$1$[ebp], edi
  0009a	7c 26		 jl	 SHORT $LN10@Pop_heap_h
  0009c	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
$LN9@Pop_heap_h:

; 31   :     }
; 32   : 
; 33   :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0009f	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  000a2	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000a5	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000af	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  000b3	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b6	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 81   :     }
; 82   : 
; 83   :     _STD _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 84   : }

  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
  000bd	0f 1f 00	 npad	 3
$LL23@Pop_heap_h:

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  000c0	8b da		 mov	 ebx, edx
$LN10@Pop_heap_h:
  000c2	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  000c5	8d 77 ff	 lea	 esi, DWORD PTR [edi-1]
  000c8	d1 fe		 sar	 esi, 1
  000ca	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000cd	8d 1c 83	 lea	 ebx, DWORD PTR [ebx+eax*4]
  000d0	53		 push	 ebx
  000d1	ff 55 18	 call	 DWORD PTR __Pred$[ebp]
  000d4	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  000d7	83 c4 08	 add	 esp, 8
  000da	84 c0		 test	 al, al
  000dc	74 c1		 je	 SHORT $LN9@Pop_heap_h

; 28   :         // move _Hole up to parent
; 29   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  000de	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  000e1	f3 0f 7e 03	 movq	 xmm0, QWORD PTR [ebx]
  000e5	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]

; 30   :         _Hole             = _Idx;

  000e8	8b fe		 mov	 edi, esi
  000ea	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  000ee	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000f1	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  000f4	39 75 0c	 cmp	 DWORD PTR __Top$1$[ebp], esi
  000f7	7c c7		 jl	 SHORT $LL23@Pop_heap_h

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  000f9	eb a4		 jmp	 SHORT $LN9@Pop_heap_h
??$_Pop_heap_hole_by_index@PAUSDumpData@@U1@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@HH$$QAU1@P6A_NABU1@2@Z@Z ENDP ; std::_Pop_heap_hole_by_index<SDumpData *,SDumpData,bool (__cdecl*)(SDumpData const &,SDumpData const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3271 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2854 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]

; 3271 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00006	53		 push	 ebx
  00007	57		 push	 edi

; 434  :         return _Myres > _Small_string_capacity;

  00008	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 2854 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0000c	8b 79 10	 mov	 edi, DWORD PTR [ecx+16]

; 426  :         if (_Large_mode_engaged()) {

  0000f	76 02		 jbe	 SHORT $LN8@operator

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN8@operator:

; 2854 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00013	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  00016	83 7a 14 0f	 cmp	 DWORD PTR [edx+20], 15	; 0000000fH

; 2854 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0001a	8b 5a 10	 mov	 ebx, DWORD PTR [edx+16]

; 426  :         if (_Large_mode_engaged()) {

  0001d	76 02		 jbe	 SHORT $LN15@operator

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0001f	8b 12		 mov	 edx, DWORD PTR [edx]
$LN15@operator:
  00021	56		 push	 esi

; 2854 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00022	3b fb		 cmp	 edi, ebx
  00024	8b f3		 mov	 esi, ebx
  00026	0f 42 f7	 cmovb	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 411  :         return __builtin_memcmp(_First1, _First2, _Count);

  00029	83 ee 04	 sub	 esi, 4
  0002c	72 13		 jb	 SHORT $LN35@operator
  0002e	66 90		 npad	 2
$LL36@operator:
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00034	75 10		 jne	 SHORT $LN34@operator
  00036	83 c2 04	 add	 edx, 4
  00039	83 c1 04	 add	 ecx, 4
  0003c	83 ee 04	 sub	 esi, 4
  0003f	73 ef		 jae	 SHORT $LL36@operator
$LN35@operator:
  00041	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00044	74 34		 je	 SHORT $LN33@operator
$LN34@operator:
  00046	8a 02		 mov	 al, BYTE PTR [edx]
  00048	3a 01		 cmp	 al, BYTE PTR [ecx]
  0004a	75 27		 jne	 SHORT $LN37@operator
  0004c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0004f	74 29		 je	 SHORT $LN33@operator
  00051	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00054	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00057	75 1a		 jne	 SHORT $LN37@operator
  00059	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0005c	74 1c		 je	 SHORT $LN33@operator
  0005e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00061	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  00064	75 0d		 jne	 SHORT $LN37@operator
  00066	83 fe ff	 cmp	 esi, -1
  00069	74 0f		 je	 SHORT $LN33@operator
  0006b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0006e	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  00071	74 07		 je	 SHORT $LN33@operator
$LN37@operator:
  00073	1b c0		 sbb	 eax, eax
  00075	83 c8 01	 or	 eax, 1
  00078	eb 02		 jmp	 SHORT $LN38@operator
$LN33@operator:
  0007a	33 c0		 xor	 eax, eax
$LN38@operator:
  0007c	5e		 pop	 esi

; 595  :     if (_Ans != 0) {

  0007d	85 c0		 test	 eax, eax
  0007f	75 12		 jne	 SHORT $LN24@operator

; 596  :         return _Ans;
; 597  :     }
; 598  : 
; 599  :     if (_Left_size < _Right_size) {

  00081	3b fb		 cmp	 edi, ebx
  00083	76 0a		 jbe	 SHORT $LN51@operator

; 600  :         return -1;

  00085	83 c8 ff	 or	 eax, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3272 :     return _Left.compare(_Right) < 0;

  00088	5f		 pop	 edi
  00089	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008c	5b		 pop	 ebx

; 3273 : }

  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
$LN51@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 603  :     if (_Left_size > _Right_size) {

  0008f	1b c0		 sbb	 eax, eax
  00091	f7 d8		 neg	 eax
$LN24@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3272 :     return _Left.compare(_Right) < 0;

  00093	5f		 pop	 edi
  00094	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00097	5b		 pop	 ebx

; 3273 : }

  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YA?AU?$pair@PAUSDumpData@@PAU1@@0@PAUSDumpData@@0P6A_NABU2@1@Z@Z
_TEXT	SEGMENT
__Gfirst$1$ = -12					; size = 4
__Last$1$ = -12						; size = 4
$T1 = -12						; size = 4
tv448 = -12						; size = 4
__Glast$1$ = -8						; size = 4
$T2 = -8						; size = 4
__Plast$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Partition_by_median_guess_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YA?AU?$pair@PAUSDumpData@@PAU1@@0@PAUSDumpData@@0P6A_NABU2@1@Z@Z PROC ; std::_Partition_by_median_guess_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>, COMDAT

; 8268 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 8269 :     // partition [_First, _Last)
; 8270 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  00014	8b cb		 mov	 ecx, ebx
  00016	2b cf		 sub	 ecx, edi

; 8271 :     _STD _Guess_median_unchecked(_First, _Mid, _STD _Prev_iter(_Last), _Pred);

  00018	83 c3 f4	 add	 ebx, -12		; fffffff4H
  0001b	f7 e9		 imul	 ecx

; 8254 :     const _Diff _Count = _Last - _First;

  0001d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH

; 8271 :     _STD _Guess_median_unchecked(_First, _Mid, _STD _Prev_iter(_Last), _Pred);

  00022	89 5d f4	 mov	 DWORD PTR __Last$1$[ebp], ebx
  00025	d1 fa		 sar	 edx, 1
  00027	8b ca		 mov	 ecx, edx
  00029	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0002c	03 ca		 add	 ecx, edx
  0002e	d1 f9		 sar	 ecx, 1
  00030	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00033	8d 34 8f	 lea	 esi, DWORD PTR [edi+ecx*4]

; 8254 :     const _Diff _Count = _Last - _First;

  00036	8b cb		 mov	 ecx, ebx
  00038	2b cf		 sub	 ecx, edi

; 8255 :     if (40 < _Count) { // Tukey's ninther

  0003a	8b 7d 14	 mov	 edi, DWORD PTR __Pred$[ebp]
  0003d	f7 e9		 imul	 ecx
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00042	d1 fa		 sar	 edx, 1
  00044	8b c2		 mov	 eax, edx
  00046	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00049	03 c2		 add	 eax, edx
  0004b	83 f8 28	 cmp	 eax, 40			; 00000028H
  0004e	7e 59		 jle	 SHORT $LN59@Partition_

; 8256 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller
; 8257 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 8258 :         _STD _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00050	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00053	40		 inc	 eax
  00054	c1 f8 03	 sar	 eax, 3
  00057	8d 1c 40	 lea	 ebx, DWORD PTR [eax+eax*2]
  0005a	8d 3c 40	 lea	 edi, DWORD PTR [eax+eax*2]
  0005d	c1 e3 03	 shl	 ebx, 3
  00060	c1 e7 02	 shl	 edi, 2
  00063	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  00066	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]
  00069	50		 push	 eax
  0006a	52		 push	 edx
  0006b	51		 push	 ecx
  0006c	89 55 f8	 mov	 DWORD PTR $T2[ebp], edx
  0006f	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@00P6A_NABU1@1@Z@Z ; std::_Med3_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>

; 8259 :         _STD _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00074	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00077	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0007a	50		 push	 eax
  0007b	8b c6		 mov	 eax, esi
  0007d	2b c7		 sub	 eax, edi
  0007f	56		 push	 esi
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@00P6A_NABU1@1@Z@Z ; std::_Med3_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>

; 8260 :         _STD _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __Last$1$[ebp]
  00089	8b c1		 mov	 eax, ecx
  0008b	2b c7		 sub	 eax, edi
  0008d	8b 7d 14	 mov	 edi, DWORD PTR __Pred$[ebp]
  00090	57		 push	 edi
  00091	51		 push	 ecx
  00092	50		 push	 eax
  00093	2b cb		 sub	 ecx, ebx
  00095	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@00P6A_NABU1@1@Z@Z ; std::_Med3_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>

; 8261 :         _STD _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);
; 8262 :     } else {

  0009e	8b 45 f4	 mov	 eax, DWORD PTR $T1[ebp]
  000a1	83 c4 30	 add	 esp, 48			; 00000030H
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR $T2[ebp]
  000a7	eb 02		 jmp	 SHORT $LN60@Partition_
$LN59@Partition_:

; 8263 :         _STD _Med3_unchecked(_First, _Mid, _Last, _Pred);

  000a9	8b c3		 mov	 eax, ebx
$LN60@Partition_:

; 8272 :     _RanIt _Pfirst = _Mid;

  000ab	57		 push	 edi
  000ac	50		 push	 eax
  000ad	56		 push	 esi
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@00P6A_NABU1@1@Z@Z ; std::_Med3_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>
  000b4	83 c4 10	 add	 esp, 16			; 00000010H

; 8273 :     _RanIt _Plast  = _STD _Next_iter(_Pfirst);

  000b7	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]
  000ba	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx

; 8274 : 
; 8275 :     while (_First < _Pfirst && !_DEBUG_LT_PRED(_Pred, *_STD _Prev_iter(_Pfirst), *_Pfirst)
; 8276 :            && !_Pred(*_Pfirst, *_STD _Prev_iter(_Pfirst))) {

  000bd	39 75 0c	 cmp	 DWORD PTR __First$[ebp], esi
  000c0	73 2b		 jae	 SHORT $LN64@Partition_
  000c2	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
$LL2@Partition_:
  000c5	8d 46 f4	 lea	 eax, DWORD PTR [esi-12]
  000c8	56		 push	 esi
  000c9	50		 push	 eax
  000ca	89 45 f4	 mov	 DWORD PTR tv448[ebp], eax
  000cd	ff d7		 call	 edi
  000cf	83 c4 08	 add	 esp, 8
  000d2	84 c0		 test	 al, al
  000d4	75 14		 jne	 SHORT $LN89@Partition_
  000d6	ff 75 f4	 push	 DWORD PTR tv448[ebp]
  000d9	56		 push	 esi
  000da	ff d7		 call	 edi
  000dc	83 c4 08	 add	 esp, 8
  000df	84 c0		 test	 al, al
  000e1	75 07		 jne	 SHORT $LN89@Partition_

; 8277 :         --_Pfirst;

  000e3	8b 75 f4	 mov	 esi, DWORD PTR tv448[ebp]
  000e6	3b de		 cmp	 ebx, esi
  000e8	72 db		 jb	 SHORT $LL2@Partition_
$LN89@Partition_:
  000ea	8b 5d fc	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
$LN64@Partition_:

; 8278 :     }
; 8279 : 
; 8280 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  000ed	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  000f0	3b d8		 cmp	 ebx, eax
  000f2	73 28		 jae	 SHORT $LN5@Partition_
$LL4@Partition_:
  000f4	56		 push	 esi
  000f5	53		 push	 ebx
  000f6	ff d7		 call	 edi
  000f8	83 c4 08	 add	 esp, 8
  000fb	84 c0		 test	 al, al
  000fd	75 17		 jne	 SHORT $LN94@Partition_
  000ff	53		 push	 ebx
  00100	56		 push	 esi
  00101	ff d7		 call	 edi
  00103	83 c4 08	 add	 esp, 8
  00106	84 c0		 test	 al, al
  00108	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0010b	75 0c		 jne	 SHORT $LN90@Partition_

; 8281 :         ++_Plast;

  0010d	83 c3 0c	 add	 ebx, 12			; 0000000cH
  00110	3b d8		 cmp	 ebx, eax
  00112	72 e0		 jb	 SHORT $LL4@Partition_

; 8278 :     }
; 8279 : 
; 8280 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00114	eb 03		 jmp	 SHORT $LN90@Partition_
$LN94@Partition_:
  00116	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
$LN90@Partition_:
  00119	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
$LN5@Partition_:

; 8282 :     }
; 8283 : 
; 8284 :     _RanIt _Gfirst = _Plast;

  0011c	8b fb		 mov	 edi, ebx

; 8285 :     _RanIt _Glast  = _Pfirst;

  0011e	8b d6		 mov	 edx, esi
$LN120@Partition_:

; 8288 :         for (; _Gfirst < _Last; ++_Gfirst) {

  00120	89 55 f8	 mov	 DWORD PTR __Glast$1$[ebp], edx
$LN119@Partition_:
  00123	89 7d f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edi
$LL8@Partition_:
  00126	3b f8		 cmp	 edi, eax
  00128	73 52		 jae	 SHORT $LN68@Partition_
  0012a	66 0f 1f 44 00
	00		 npad	 6
$LL11@Partition_:

; 8289 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  00130	57		 push	 edi
  00131	56		 push	 esi
  00132	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00135	83 c4 08	 add	 esp, 8
  00138	84 c0		 test	 al, al
  0013a	75 2f		 jne	 SHORT $LN9@Partition_

; 8290 :                 continue;
; 8291 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  0013c	56		 push	 esi
  0013d	57		 push	 edi
  0013e	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00141	83 c4 08	 add	 esp, 8
  00144	84 c0		 test	 al, al
  00146	75 2b		 jne	 SHORT $LN91@Partition_

; 8292 :                 break;
; 8293 :             } else if (_Plast != _Gfirst) {

  00148	3b df		 cmp	 ebx, edi
  0014a	74 1c		 je	 SHORT $LN19@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0014c	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  00150	f3 0f 7e 0b	 movq	 xmm1, QWORD PTR [ebx]
  00154	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00157	66 0f d6 03	 movq	 QWORD PTR [ebx], xmm0
  0015b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0015e	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 141  :     _Right   = _STD move(_Tmp);

  00161	66 0f d6 0f	 movq	 QWORD PTR [edi], xmm1
  00165	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
$LN19@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8288 :         for (; _Gfirst < _Last; ++_Gfirst) {

  00168	83 c3 0c	 add	 ebx, 12			; 0000000cH
$LN9@Partition_:
  0016b	83 c7 0c	 add	 edi, 12			; 0000000cH
  0016e	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  00171	72 bd		 jb	 SHORT $LL11@Partition_
$LN91@Partition_:
  00173	8b 55 f8	 mov	 edx, DWORD PTR __Glast$1$[ebp]
  00176	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
  00179	89 7d f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edi
$LN68@Partition_:

; 8301 :         for (; _First < _Glast; --_Glast) {

  0017c	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0017f	3b d0		 cmp	 edx, eax
  00181	76 68		 jbe	 SHORT $LN118@Partition_
  00183	8b 5d f8	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
  00186	8d 7b f4	 lea	 edi, DWORD PTR [ebx-12]
  00189	0f 1f 80 00 00
	00 00		 npad	 7
$LL14@Partition_:

; 8302 :             const auto _Glast_prev = _STD _Prev_iter(_Glast);
; 8303 :             if (_DEBUG_LT_PRED(_Pred, *_Glast_prev, *_Pfirst)) {

  00190	56		 push	 esi
  00191	57		 push	 edi
  00192	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00195	83 c4 08	 add	 esp, 8
  00198	84 c0		 test	 al, al
  0019a	75 2f		 jne	 SHORT $LN12@Partition_

; 8304 :                 continue;
; 8305 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  0019c	57		 push	 edi
  0019d	56		 push	 esi
  0019e	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  001a1	83 c4 08	 add	 esp, 8
  001a4	84 c0		 test	 al, al
  001a6	75 32		 jne	 SHORT $LN95@Partition_

; 8306 :                 break;
; 8307 :             } else if (--_Pfirst != _Glast_prev) {

  001a8	83 ee 0c	 sub	 esi, 12			; 0000000cH
  001ab	3b f7		 cmp	 esi, edi
  001ad	74 1c		 je	 SHORT $LN12@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  001af	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  001b3	f3 0f 7e 0e	 movq	 xmm1, QWORD PTR [esi]
  001b7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ba	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  001be	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  001c1	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 141  :     _Right   = _STD move(_Tmp);

  001c4	66 0f d6 0f	 movq	 QWORD PTR [edi], xmm1
  001c8	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
$LN12@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8301 :         for (; _First < _Glast; --_Glast) {

  001cb	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  001ce	83 eb 0c	 sub	 ebx, 12			; 0000000cH
  001d1	83 ef 0c	 sub	 edi, 12			; 0000000cH
  001d4	3b c3		 cmp	 eax, ebx
  001d6	72 b8		 jb	 SHORT $LL14@Partition_

; 8304 :                 continue;
; 8305 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  001d8	eb 03		 jmp	 SHORT $LN92@Partition_
$LN95@Partition_:
  001da	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
$LN92@Partition_:
  001dd	8b 7d f4	 mov	 edi, DWORD PTR __Gfirst$1$[ebp]
  001e0	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
  001e3	8b 55 f8	 mov	 edx, DWORD PTR __Glast$1$[ebp]

; 8308 :                 swap(*_Pfirst, *_Glast_prev); // intentional ADL
; 8309 :             }
; 8310 :         }
; 8311 : 
; 8312 :         if (_Glast == _First && _Gfirst == _Last) {

  001e6	3b d0		 cmp	 edx, eax
  001e8	8b 5d fc	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
$LN118@Partition_:
  001eb	75 59		 jne	 SHORT $LN27@Partition_
  001ed	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  001f0	0f 84 d0 00 00
	00		 je	 $LN70@Partition_

; 8314 :         }
; 8315 : 
; 8316 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 8317 :             if (_Plast != _Gfirst) {

  001f6	3b df		 cmp	 ebx, edi
  001f8	74 1c		 je	 SHORT $LN41@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  001fa	f3 0f 7e 03	 movq	 xmm0, QWORD PTR [ebx]
  001fe	f3 0f 7e 0e	 movq	 xmm1, QWORD PTR [esi]
  00202	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00205	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00209	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0020c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 141  :     _Right   = _STD move(_Tmp);

  0020f	66 0f d6 0b	 movq	 QWORD PTR [ebx], xmm1
  00213	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx
$LN41@Partition_:

; 140  :     _Left    = _STD move(_Right);

  00216	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8321 :             ++_Plast;

  0021a	83 c3 0c	 add	 ebx, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  0021d	f3 0f 7e 0e	 movq	 xmm1, QWORD PTR [esi]
  00221	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 140  :     _Left    = _STD move(_Right);

  00224	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00228	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0022b	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8323 :             ++_Pfirst;

  0022e	83 c6 0c	 add	 esi, 12			; 0000000cH

; 8324 :             ++_Gfirst;

  00231	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  00234	66 0f d6 0f	 movq	 QWORD PTR [edi], xmm1
  00238	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8324 :             ++_Gfirst;

  0023b	83 c7 0c	 add	 edi, 12			; 0000000cH
  0023e	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
  00241	e9 dd fe ff ff	 jmp	 $LN119@Partition_
$LN27@Partition_:

; 8325 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00246	83 c2 f4	 add	 edx, -12		; fffffff4H
  00249	89 55 f8	 mov	 DWORD PTR __Glast$1$[ebp], edx
  0024c	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  0024f	75 4e		 jne	 SHORT $LN30@Partition_

; 8326 :             if (--_Glast != --_Pfirst) {

  00251	83 ee 0c	 sub	 esi, 12			; 0000000cH
  00254	3b d6		 cmp	 edx, esi
  00256	74 1c		 je	 SHORT $LN53@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  00258	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  0025c	f3 0f 7e 0a	 movq	 xmm1, QWORD PTR [edx]
  00260	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00263	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00267	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0026a	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 141  :     _Right   = _STD move(_Tmp);

  0026d	66 0f d6 0e	 movq	 QWORD PTR [esi], xmm1
  00271	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
$LN53@Partition_:

; 140  :     _Left    = _STD move(_Right);

  00274	f3 0f 7e 43 f4	 movq	 xmm0, QWORD PTR [ebx-12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8330 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  00279	83 eb 0c	 sub	 ebx, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  0027c	f3 0f 7e 0e	 movq	 xmm1, QWORD PTR [esi]
  00280	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 140  :     _Left    = _STD move(_Right);

  00283	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00287	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0028a	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8331 :         } else {

  0028d	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  00290	66 0f d6 0b	 movq	 QWORD PTR [ebx], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8330 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  00294	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  00297	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8331 :         } else {

  0029a	e9 87 fe ff ff	 jmp	 $LL8@Partition_
$LN30@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  0029f	f3 0f 7e 0f	 movq	 xmm1, QWORD PTR [edi]
  002a3	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 140  :     _Left    = _STD move(_Right);

  002a6	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  002aa	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  002ae	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002b1	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8333 :             ++_Gfirst;

  002b4	83 c7 0c	 add	 edi, 12			; 0000000cH
  002b7	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  002ba	66 0f d6 0a	 movq	 QWORD PTR [edx], xmm1
  002be	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  002c1	e9 5a fe ff ff	 jmp	 $LN120@Partition_
$LN70@Partition_:

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  002c6	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8313 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  002c9	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  002ca	89 30		 mov	 DWORD PTR [eax], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8313 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  002cc	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  002cd	89 58 04	 mov	 DWORD PTR [eax+4], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8313 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  002d0	5b		 pop	 ebx

; 8334 :         }
; 8335 :     }
; 8336 : }

  002d1	8b e5		 mov	 esp, ebp
  002d3	5d		 pop	 ebp
  002d4	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YA?AU?$pair@PAUSDumpData@@PAU1@@0@PAUSDumpData@@0P6A_NABU2@1@Z@Z ENDP ; std::_Partition_by_median_guess_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
;	COMDAT ??$_Make_heap_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@0P6A_NABU1@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -32						; size = 12
tv273 = -20						; size = 4
tv295 = -16						; size = 4
__Idx$1$ = -12						; size = 4
__Max_sequence_non_leaf$1$ = -8				; size = 4
__Bottom$1$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Hole$1$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Make_heap_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@0P6A_NABU1@1@Z@Z PROC ; std::_Make_heap_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>, COMDAT

; 121  : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 122  :     // make [_First, _Last) into a heap
; 123  :     using _Diff   = _Iter_diff_t<_RanIt>;
; 124  :     _Diff _Bottom = _Last - _First;

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00012	2b cb		 sub	 ecx, ebx
  00014	f7 e9		 imul	 ecx
  00016	56		 push	 esi
  00017	d1 fa		 sar	 edx, 1
  00019	8b ca		 mov	 ecx, edx
  0001b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0001e	03 ca		 add	 ecx, edx

; 125  :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00020	8b f1		 mov	 esi, ecx
  00022	89 4d fc	 mov	 DWORD PTR __Bottom$1$[ebp], ecx
  00025	d1 fe		 sar	 esi, 1
  00027	85 f6		 test	 esi, esi
  00029	0f 8e 19 01 00
	00		 jle	 $LN3@Make_heap_

; 122  :     // make [_First, _Last) into a heap
; 123  :     using _Diff   = _Iter_diff_t<_RanIt>;
; 124  :     _Diff _Bottom = _Last - _First;

  0002f	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00032	8b d0		 mov	 edx, eax
  00034	89 45 f0	 mov	 DWORD PTR tv295[ebp], eax
  00037	d1 fa		 sar	 edx, 1
  00039	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0003c	89 55 f8	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], edx
  0003f	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  00042	57		 push	 edi
$LL4@Make_heap_:

; 126  :         // reheap top half, bottom to top
; 127  :         --_Hole;
; 128  :         _Iter_value_t<_RanIt> _Val(_STD move(*(_First + _Hole)));

  00043	f3 0f 7e 40 f4	 movq	 xmm0, QWORD PTR [eax-12]
  00048	83 e8 0c	 sub	 eax, 12			; 0000000cH
  0004b	4e		 dec	 esi
  0004c	89 45 ec	 mov	 DWORD PTR tv273[ebp], eax
  0004f	89 75 0c	 mov	 DWORD PTR __Hole$1$[ebp], esi

; 129  :         _STD _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00052	8b fe		 mov	 edi, esi
  00054	66 0f d6 45 e0	 movq	 QWORD PTR __Val$1[ebp], xmm0
  00059	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0005c	89 45 e8	 mov	 DWORD PTR __Val$1[ebp+8], eax

; 64   :     _Diff _Idx       = _Hole;

  0005f	89 75 f4	 mov	 DWORD PTR __Idx$1$[ebp], esi

; 65   : 
; 66   :     // Check whether _Idx can have a child before calculating that child's index, since
; 67   :     // calculating the child's index can trigger integer overflows
; 68   :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 69   :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00062	3b f2		 cmp	 esi, edx
  00064	7d 4c		 jge	 SHORT $LN8@Make_heap_
$LL7@Make_heap_:

; 70   :         _Idx = 2 * _Idx + 2;

  00066	03 f6		 add	 esi, esi

; 71   :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  00068	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  0006b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0006e	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  00071	8d 41 f4	 lea	 eax, DWORD PTR [ecx-12]
  00074	50		 push	 eax
  00075	51		 push	 ecx
  00076	ff 55 10	 call	 DWORD PTR __Pred$[ebp]

; 72   :             --_Idx;
; 73   :         }
; 74   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00079	0f b6 c0	 movzx	 eax, al
  0007c	83 c4 08	 add	 esp, 8
  0007f	f7 d8		 neg	 eax
  00081	1b c0		 sbb	 eax, eax
  00083	83 c0 02	 add	 eax, 2
  00086	03 f0		 add	 esi, eax
  00088	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0008b	f3 0f 7e 04 83	 movq	 xmm0, QWORD PTR [ebx+eax*4]
  00090	8d 14 83	 lea	 edx, DWORD PTR [ebx+eax*4]
  00093	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]

; 75   :         _Hole             = _Idx;

  00096	8b fe		 mov	 edi, esi
  00098	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  0009b	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0009f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000a2	8b 55 f8	 mov	 edx, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  000a5	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  000a8	3b f2		 cmp	 esi, edx
  000aa	7c ba		 jl	 SHORT $LL7@Make_heap_
  000ac	8b 75 0c	 mov	 esi, DWORD PTR __Hole$1$[ebp]
  000af	8b 4d fc	 mov	 ecx, DWORD PTR __Bottom$1$[ebp]
$LN8@Make_heap_:

; 76   :     }
; 77   : 
; 78   :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  000b2	3b fa		 cmp	 edi, edx
  000b4	75 24		 jne	 SHORT $LN10@Make_heap_
  000b6	f6 c1 01	 test	 cl, 1
  000b9	75 1f		 jne	 SHORT $LN10@Make_heap_

; 79   :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  000bb	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  000be	f3 0f 7e 44 83
	f4		 movq	 xmm0, QWORD PTR [ebx+eax*4-12]
  000c4	8d 14 83	 lea	 edx, DWORD PTR [ebx+eax*4]
  000c7	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]

; 80   :         _Hole             = _Bottom - 1;

  000ca	8b 7d f0	 mov	 edi, DWORD PTR tv295[ebp]
  000cd	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  000d0	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  000d4	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  000d7	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN10@Make_heap_:

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  000da	3b f7		 cmp	 esi, edi
  000dc	7d 43		 jge	 SHORT $LN29@Make_heap_
  000de	66 90		 npad	 2
$LL15@Make_heap_:

; 26   :     for (_Diff _Idx                                                          = (_Hole - 1) >> 1; // shift for codegen

  000e0	8d 77 ff	 lea	 esi, DWORD PTR [edi-1]
  000e3	d1 fe		 sar	 esi, 1

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  000e5	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000e8	8d 1c 83	 lea	 ebx, DWORD PTR [ebx+eax*4]
  000eb	8d 45 e0	 lea	 eax, DWORD PTR __Val$1[ebp]
  000ee	50		 push	 eax
  000ef	53		 push	 ebx
  000f0	ff 55 10	 call	 DWORD PTR __Pred$[ebp]
  000f3	83 c4 08	 add	 esp, 8
  000f6	84 c0		 test	 al, al
  000f8	74 21		 je	 SHORT $LN30@Make_heap_

; 28   :         // move _Hole up to parent
; 29   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  000fa	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  000fd	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00100	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  00103	f3 0f 7e 03	 movq	 xmm0, QWORD PTR [ebx]

; 30   :         _Hole             = _Idx;

  00107	8b fe		 mov	 edi, esi
  00109	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0010d	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00110	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00113	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00116	39 75 0c	 cmp	 DWORD PTR __Hole$1$[ebp], esi
  00119	7c c5		 jl	 SHORT $LL15@Make_heap_
$LN30@Make_heap_:
  0011b	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0011e	8b 75 0c	 mov	 esi, DWORD PTR __Hole$1$[ebp]
$LN29@Make_heap_:

; 31   :     }
; 32   : 
; 33   :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  00121	f3 0f 7e 45 e0	 movq	 xmm0, QWORD PTR __Val$1[ebp]
  00126	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]

; 125  :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00129	8b 55 f8	 mov	 edx, DWORD PTR __Max_sequence_non_leaf$1$[ebp]

; 33   :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0012c	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  0012f	8b 45 e8	 mov	 eax, DWORD PTR __Val$1[ebp+8]
  00132	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00136	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 125  :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00139	8b 4d fc	 mov	 ecx, DWORD PTR __Bottom$1$[ebp]
  0013c	8b 45 ec	 mov	 eax, DWORD PTR tv273[ebp]
  0013f	85 f6		 test	 esi, esi
  00141	0f 8f fc fe ff
	ff		 jg	 $LL4@Make_heap_
  00147	5f		 pop	 edi
$LN3@Make_heap_:
  00148	5e		 pop	 esi

; 130  :     }
; 131  : }

  00149	5b		 pop	 ebx
  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c3		 ret	 0
??$_Make_heap_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@0P6A_NABU1@1@Z@Z ENDP ; std::_Make_heap_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<long const ,CResource *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<long const ,CResource *>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<long const ,CResource *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<long const ,CResource *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN13@Find_lower
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1627 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 6e		 jne	 SHORT $LN90@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	56		 push	 esi
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 77 08	 push	 DWORD PTR [edi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b f7		 mov	 esi, edi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00027	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0002a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0002d	76 28		 jbe	 SHORT $LN43@Erase_tree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00032	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00033	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00039	72 12		 jb	 SHORT $LN54@Erase_tree

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00041	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00043	83 c0 fc	 add	 eax, -4			; fffffffcH
  00046	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00049	77 3d		 ja	 SHORT $LN51@Erase_tree

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004b	8b c2		 mov	 eax, edx
$LN54@Erase_tree:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004d	51		 push	 ecx
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
$LN43@Erase_tree:
  00057	6a 2c		 push	 44			; 0000002cH
  00059	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0005a	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00061	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00074	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00078	75 05		 jne	 SHORT $LN99@Erase_tree
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007d	eb 99		 jmp	 SHORT $LL2@Erase_tree
$LN99@Erase_tree:
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
$LN90@Erase_tree:
  00081	5f		 pop	 edi

; 762  :     }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN51@Erase_tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN100@Erase_tree:
  0008d	cc		 int	 3
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	89 37		 mov	 DWORD PTR [edi], esi

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0000f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	75 32		 jne	 SHORT $LN13@Find_lower
  0001f	53		 push	 ebx
  00020	8b 5d 0c	 mov	 ebx, DWORD PTR __Keyval$[ebp]
$LL2@Find_lower:

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00023	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00026	89 37		 mov	 DWORD PTR [edi], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00028	53		 push	 ebx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002f	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00032	84 c0		 test	 al, al
  00034	74 07		 je	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  00036	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00039	33 c0		 xor	 eax, eax

; 1627 :             } else {

  0003b	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  0003d	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00047	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 d3		 je	 SHORT $LL2@Find_lower
  00050	5b		 pop	 ebx
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,CResource * (__cdecl*)(char const *)>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN39@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,CResource * (__cdecl*)(char const *)>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN39@Erase_tree:
  00035	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,CResource * (__cdecl*)(char const *)>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,CResource * (__cdecl*)(char const *)>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,CResource * (__cdecl*)(char const *)>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,CResource * (__cdecl*)(char const *)>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,CResource * (__cdecl*)(char const *)>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >::_Find_lower_bound<int>, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN13@Find_lower
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	7d 07		 jge	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1627 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >::_Find_lower_bound<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN13@Find_lower
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1627 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<long const ,CResource *>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN39@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<long const ,CResource *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN39@Erase_tree:
  00035	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<long const ,CResource *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSDumpData@@@?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@AAEPAUSDumpData@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
__Whereoff$1$ = -8					; size = 4
tv650 = -8						; size = 4
tv652 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSDumpData@@@?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@AAEPAUSDumpData@@QAU2@ABU2@@Z PROC ; std::vector<SDumpData,std::allocator<SDumpData> >::_Emplace_reallocate<SDumpData const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	57		 push	 edi
  00012	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00014	2b d7		 sub	 edx, edi

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00016	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00019	f7 ea		 imul	 edx
  0001b	2b cf		 sub	 ecx, edi
  0001d	d1 fa		 sar	 edx, 1
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00024	03 c2		 add	 eax, edx
  00026	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00029	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002e	f7 e9		 imul	 ecx
  00030	d1 fa		 sar	 edx, 1
  00032	8b c2		 mov	 eax, edx
  00034	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00037	03 c2		 add	 eax, edx
  00039	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0003c	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00041	0f 84 38 01 00
	00		 je	 $LN131@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00047	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0004a	2b cf		 sub	 ecx, edi
  0004c	56		 push	 esi

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0004d	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00050	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00055	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00057	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005c	d1 fa		 sar	 edx, 1
  0005e	8b ca		 mov	 ecx, edx
  00060	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00063	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00065	8b d1		 mov	 edx, ecx
  00067	d1 ea		 shr	 edx, 1
  00069	2b c2		 sub	 eax, edx
  0006b	3b c8		 cmp	 ecx, eax
  0006d	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  0006f	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00074	c7 45 fc fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	eb 3e		 jmp	 SHORT $LN129@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00083	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00086	8b ce		 mov	 ecx, esi
  00088	3b c6		 cmp	 eax, esi
  0008a	0f 43 c8	 cmovae	 ecx, eax
  0008d	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00093	0f 87 eb 00 00
	00		 ja	 $LN132@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00099	8d 34 49	 lea	 esi, DWORD PTR [ecx+ecx*2]
  0009c	c1 e6 02	 shl	 esi, 2

; 986  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0009f	8b c6		 mov	 eax, esi

; 122  :     return _Count * _Ty_size;

  000a1	89 75 fc	 mov	 DWORD PTR tv652[ebp], esi

; 227  :     if (_Bytes == 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  000a8	33 ff		 xor	 edi, edi
  000aa	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ac	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b1	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b9	eb 06		 jmp	 SHORT $LN129@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN129@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000c1	8b f8		 mov	 edi, eax
  000c3	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  000c6	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000c9	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000cc	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000cf	8d 34 87	 lea	 esi, DWORD PTR [edi+eax*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d2	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d5	89 75 f8	 mov	 DWORD PTR tv650[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d8	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000dc	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  000e0	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000e3	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000e6	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000e9	8b 03		 mov	 eax, DWORD PTR [ebx]
  000eb	3b d1		 cmp	 edx, ecx
  000ed	75 04		 jne	 SHORT $LN3@Emplace_re
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000ef	8b f7		 mov	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000f1	eb 14		 jmp	 SHORT $LN58@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000f3	57		 push	 edi
  000f4	52		 push	 edx
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSDumpData@@PAU1@@std@@YAPAUSDumpData@@PAU1@00@Z ; std::_Copy_memmove<SDumpData *,SDumpData *>
  000fb	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  00101	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00104	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN58@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  00107	56		 push	 esi
  00108	51		 push	 ecx
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSDumpData@@PAU1@@std@@YAPAUSDumpData@@PAU1@00@Z ; std::_Copy_memmove<SDumpData *,SDumpData *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0010f	8b 33		 mov	 esi, DWORD PTR [ebx]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  00111	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00114	85 f6		 test	 esi, esi
  00116	74 3f		 je	 SHORT $LN80@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00118	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0011b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00120	2b ce		 sub	 ecx, esi
  00122	f7 e9		 imul	 ecx
  00124	d1 fa		 sar	 edx, 1
  00126	8b c2		 mov	 eax, edx
  00128	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0012b	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012d	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00130	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00133	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00139	72 12		 jb	 SHORT $LN91@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0013b	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0013e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00141	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00143	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00146	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00149	77 2f		 ja	 SHORT $LN88@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0014b	8b f2		 mov	 esi, edx
$LN91@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0014d	51		 push	 ecx
  0014e	56		 push	 esi
  0014f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00154	83 c4 08	 add	 esp, 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00157	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  0015a	40		 inc	 eax
  0015b	89 3b		 mov	 DWORD PTR [ebx], edi

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  0015d	5e		 pop	 esi

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0015e	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00161	8b 45 f8	 mov	 eax, DWORD PTR tv650[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00164	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  00167	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0016a	8b 4d fc	 mov	 ecx, DWORD PTR tv652[ebp]
  0016d	03 cf		 add	 ecx, edi

; 903  :     }

  0016f	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00170	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 903  :     }

  00173	5b		 pop	 ebx
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c2 08 00	 ret	 8
$LN88@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0017a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN131@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  0017f	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@CAXXZ ; std::vector<SDumpData,std::allocator<SDumpData> >::_Xlength
$LN132@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00184	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN128@Emplace_re:
  00189	cc		 int	 3
??$_Emplace_reallocate@ABUSDumpData@@@?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@AAEPAUSDumpData@@QAU2@ABU2@@Z ENDP ; std::vector<SDumpData,std::allocator<SDumpData> >::_Emplace_reallocate<SDumpData const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@0HP6A_NABU1@1@Z@Z
_TEXT	SEGMENT
__Val$1 = -20						; size = 12
__Val$2 = -20						; size = 12
__Mid$3 = -8						; size = 8
__Mid$1$ = -4						; size = 4
__First$ = 8						; size = 4
tv255 = 8						; size = 4
__Last$ = 12						; size = 4
tv262 = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Sort_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@0HP6A_NABU1@1@Z@Z PROC ; std::_Sort_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>, COMDAT

; 8339 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 8340 :     // order [_First, _Last)
; 8341 :     for (;;) {
; 8342 :         if (_Last - _First <= _ISORT_MAX) { // small

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000e	8b c6		 mov	 eax, esi
  00010	2b c3		 sub	 eax, ebx
  00012	57		 push	 edi
  00013	8b 7d 14	 mov	 edi, DWORD PTR __Pred$[ebp]
  00016	3d 8c 01 00 00	 cmp	 eax, 396		; 0000018cH
  0001b	0f 8c 90 00 00
	00		 jl	 $LN40@Sort_unche
$LL4@Sort_unche:

; 8343 :             _STD _Insertion_sort_unchecked(_First, _Last, _Pred);
; 8344 :             return;
; 8345 :         }
; 8346 : 
; 8347 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00021	83 7d 10 00	 cmp	 DWORD PTR __Ideal$[ebp], 0
  00025	57		 push	 edi
  00026	56		 push	 esi
  00027	53		 push	 ebx
  00028	0f 8e eb 00 00
	00		 jle	 $LN41@Sort_unche

; 8349 :             _STD _Sort_heap_unchecked(_First, _Last, _Pred);
; 8350 :             return;
; 8351 :         }
; 8352 : 
; 8353 :         // divide and conquer by quicksort
; 8354 :         auto _Mid = _STD _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  0002e	8d 45 f8	 lea	 eax, DWORD PTR __Mid$3[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YA?AU?$pair@PAUSDumpData@@PAU1@@0@PAUSDumpData@@0P6A_NABU2@1@Z@Z ; std::_Partition_by_median_guess_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>

; 8355 : 
; 8356 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions

  00037	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
  0003d	8b c1		 mov	 eax, ecx
  0003f	d1 f9		 sar	 ecx, 1
  00041	c1 f8 02	 sar	 eax, 2
  00044	03 c8		 add	 ecx, eax

; 8357 : 
; 8358 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  00046	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004b	89 4d 10	 mov	 DWORD PTR __Ideal$[ebp], ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	2b 4d fc	 sub	 ecx, DWORD PTR __Mid$3[ebp+4]
  00053	f7 e9		 imul	 ecx
  00055	8b 4d f8	 mov	 ecx, DWORD PTR __Mid$3[ebp]
  00058	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0005d	d1 fa		 sar	 edx, 1
  0005f	2b cb		 sub	 ecx, ebx
  00061	8b f2		 mov	 esi, edx
  00063	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00066	03 f2		 add	 esi, edx
  00068	f7 e9		 imul	 ecx
  0006a	57		 push	 edi
  0006b	ff 75 10	 push	 DWORD PTR __Ideal$[ebp]
  0006e	d1 fa		 sar	 edx, 1
  00070	8b c2		 mov	 eax, edx
  00072	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00075	03 c2		 add	 eax, edx
  00077	3b c6		 cmp	 eax, esi
  00079	7d 12		 jge	 SHORT $LN7@Sort_unche

; 8359 :             _STD _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  0007b	8b 75 f8	 mov	 esi, DWORD PTR __Mid$3[ebp]
  0007e	56		 push	 esi
  0007f	53		 push	 ebx
  00080	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@0HP6A_NABU1@1@Z@Z ; std::_Sort_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>

; 8360 :             _First = _Mid.second;

  00085	8b 5d fc	 mov	 ebx, DWORD PTR __Mid$3[ebp+4]

; 8361 :         } else { // loop on first half

  00088	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0008b	eb 12		 jmp	 SHORT $LN67@Sort_unche
$LN7@Sort_unche:

; 8362 :             _STD _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  0008d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00090	8b 45 fc	 mov	 eax, DWORD PTR __Mid$3[ebp+4]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@0HP6A_NABU1@1@Z@Z ; std::_Sort_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>

; 8363 :             _Last = _Mid.first;

  00099	8b 75 f8	 mov	 esi, DWORD PTR __Mid$3[ebp]
  0009c	89 75 0c	 mov	 DWORD PTR __Last$[ebp], esi
$LN67@Sort_unche:

; 8340 :     // order [_First, _Last)
; 8341 :     for (;;) {
; 8342 :         if (_Last - _First <= _ISORT_MAX) { // small

  0009f	8b c6		 mov	 eax, esi
  000a1	83 c4 10	 add	 esp, 16			; 00000010H
  000a4	2b c3		 sub	 eax, ebx
  000a6	3d 8c 01 00 00	 cmp	 eax, 396		; 0000018cH
  000ab	0f 8d 70 ff ff
	ff		 jge	 $LL4@Sort_unche
$LN40@Sort_unche:

; 8213 :     if (_First != _Last) {

  000b1	3b de		 cmp	 ebx, esi
  000b3	0f 84 3e 01 00
	00		 je	 $LN12@Sort_unche

; 8214 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  000b9	8d 73 0c	 lea	 esi, DWORD PTR [ebx+12]
  000bc	89 75 fc	 mov	 DWORD PTR __Mid$1$[ebp], esi
  000bf	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  000c2	0f 84 2f 01 00
	00		 je	 $LN12@Sort_unche
  000c8	89 5d 08	 mov	 DWORD PTR tv255[ebp], ebx
  000cb	0f 1f 44 00 00	 npad	 5
$LL13@Sort_unche:

; 8215 :             _BidIt _Hole = _Mid;
; 8216 :             _Iter_value_t<_BidIt> _Val(_STD move(*_Mid));

  000d0	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000d3	8b fe		 mov	 edi, esi
  000d5	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  000d9	89 45 f4	 mov	 DWORD PTR __Val$1[ebp+8], eax

; 8217 : 
; 8218 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  000dc	8d 45 ec	 lea	 eax, DWORD PTR __Val$1[ebp]
  000df	53		 push	 ebx
  000e0	50		 push	 eax
  000e1	66 0f d6 45 ec	 movq	 QWORD PTR __Val$1[ebp], xmm0
  000e6	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000e9	83 c4 08	 add	 esp, 8
  000ec	84 c0		 test	 al, al
  000ee	8b 45 08	 mov	 eax, DWORD PTR tv255[ebp]
  000f1	0f 84 a2 00 00
	00		 je	 $LN18@Sort_unche
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5206 :             return _STD _Copy_backward_memmove(_First, _Last, _Dest);

  000f7	83 c0 18	 add	 eax, 24			; 00000018H
  000fa	50		 push	 eax
  000fb	56		 push	 esi
  000fc	53		 push	 ebx
  000fd	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAUSDumpData@@PAU1@@std@@YAPAUSDumpData@@PAU1@00@Z ; std::_Copy_backward_memmove<SDumpData *,SDumpData *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8220 :                 *_First = _STD move(_Val);

  00102	f3 0f 7e 45 ec	 movq	 xmm0, QWORD PTR __Val$1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5206 :             return _STD _Copy_backward_memmove(_First, _Last, _Dest);

  00107	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8220 :                 *_First = _STD move(_Val);

  0010a	8b 45 f4	 mov	 eax, DWORD PTR __Val$1[ebp+8]
  0010d	66 0f d6 03	 movq	 QWORD PTR [ebx], xmm0
  00111	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 8221 :             } else { // look for insertion point after first

  00114	e9 cb 00 00 00	 jmp	 $LN11@Sort_unche
$LN41@Sort_unche:

; 8348 :             _STD _Make_heap_unchecked(_First, _Last, _Pred);

  00119	e8 00 00 00 00	 call	 ??$_Make_heap_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@0P6A_NABU1@1@Z@Z ; std::_Make_heap_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>

; 7118 :     for (; _Last - _First >= 2; --_Last) {

  0011e	8b ce		 mov	 ecx, esi

; 8348 :             _STD _Make_heap_unchecked(_First, _Last, _Pred);

  00120	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7118 :     for (; _Last - _First >= 2; --_Last) {

  00123	2b cb		 sub	 ecx, ebx
  00125	83 f9 18	 cmp	 ecx, 24			; 00000018H
  00128	0f 8c c9 00 00
	00		 jl	 $LN12@Sort_unche

; 8348 :             _STD _Make_heap_unchecked(_First, _Last, _Pred);

  0012e	83 c6 f4	 add	 esi, -12		; fffffff4H
$LL28@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 100  :     if (2 <= _Last - _First) {

  00131	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00136	89 75 0c	 mov	 DWORD PTR tv262[ebp], esi
  00139	f7 e1		 mul	 ecx
  0013b	c1 ea 03	 shr	 edx, 3
  0013e	83 fa 02	 cmp	 edx, 2
  00141	7c 42		 jl	 SHORT $LN26@Sort_unche

; 101  :         --_Last;
; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  00143	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]

; 93   :     _STD _Pop_heap_hole_by_index(

  00147	8b ce		 mov	 ecx, esi

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  00149	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 93   :     _STD _Pop_heap_hole_by_index(

  0014c	2b cb		 sub	 ecx, ebx

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  0014e	89 45 f4	 mov	 DWORD PTR __Val$2[ebp+8], eax
  00151	66 0f d6 45 ec	 movq	 QWORD PTR __Val$2[ebp], xmm0

; 91   :     *_Dest      = _STD move(*_First);

  00156	f3 0f 7e 03	 movq	 xmm0, QWORD PTR [ebx]
  0015a	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  0015e	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00161	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 92   :     using _Diff = _Iter_diff_t<_RanIt>;
; 93   :     _STD _Pop_heap_hole_by_index(

  00164	8d 45 ec	 lea	 eax, DWORD PTR __Val$2[ebp]
  00167	57		 push	 edi
  00168	50		 push	 eax
  00169	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0016e	f7 e9		 imul	 ecx
  00170	d1 fa		 sar	 edx, 1
  00172	8b c2		 mov	 eax, edx
  00174	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00177	03 c2		 add	 eax, edx
  00179	50		 push	 eax
  0017a	6a 00		 push	 0
  0017c	53		 push	 ebx
  0017d	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAUSDumpData@@U1@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@HH$$QAU1@P6A_NABU1@2@Z@Z ; std::_Pop_heap_hole_by_index<SDumpData *,SDumpData,bool (__cdecl*)(SDumpData const &,SDumpData const &)>
  00182	83 c4 14	 add	 esp, 20			; 00000014H
$LN26@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7118 :     for (; _Last - _First >= 2; --_Last) {

  00185	8b 4d 0c	 mov	 ecx, DWORD PTR tv262[ebp]
  00188	83 ee 0c	 sub	 esi, 12			; 0000000cH
  0018b	2b cb		 sub	 ecx, ebx
  0018d	83 f9 18	 cmp	 ecx, 24			; 00000018H
  00190	7d 9f		 jge	 SHORT $LL28@Sort_unche

; 8364 :         }
; 8365 :     }
; 8366 : }

  00192	5f		 pop	 edi
  00193	5e		 pop	 esi
  00194	5b		 pop	 ebx
  00195	8b e5		 mov	 esp, ebp
  00197	5d		 pop	 ebp
  00198	c3		 ret	 0
$LN18@Sort_unche:

; 8222 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00199	50		 push	 eax
  0019a	8b f0		 mov	 esi, eax
  0019c	8d 45 ec	 lea	 eax, DWORD PTR __Val$1[ebp]
  0019f	50		 push	 eax
  001a0	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  001a3	83 c4 08	 add	 esp, 8
  001a6	84 c0		 test	 al, al
  001a8	74 28		 je	 SHORT $LN15@Sort_unche
  001aa	66 0f 1f 44 00
	00		 npad	 6
$LL16@Sort_unche:

; 8223 :                     *_Hole = _STD move(*_Prev); // move hole down

  001b0	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  001b4	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  001b8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001bb	89 47 08	 mov	 DWORD PTR [edi+8], eax
  001be	8b fe		 mov	 edi, esi
  001c0	83 ee 0c	 sub	 esi, 12			; 0000000cH
  001c3	8d 45 ec	 lea	 eax, DWORD PTR __Val$1[ebp]
  001c6	56		 push	 esi
  001c7	50		 push	 eax
  001c8	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  001cb	83 c4 08	 add	 esp, 8
  001ce	84 c0		 test	 al, al
  001d0	75 de		 jne	 SHORT $LL16@Sort_unche
$LN15@Sort_unche:

; 8224 :                 }
; 8225 : 
; 8226 :                 *_Hole = _STD move(_Val); // insert element in hole

  001d2	f3 0f 7e 45 ec	 movq	 xmm0, QWORD PTR __Val$1[ebp]
  001d7	8b 45 f4	 mov	 eax, DWORD PTR __Val$1[ebp+8]
  001da	8b 75 fc	 mov	 esi, DWORD PTR __Mid$1$[ebp]
  001dd	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  001e1	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@Sort_unche:

; 8214 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  001e4	83 45 08 0c	 add	 DWORD PTR tv255[ebp], 12 ; 0000000cH
  001e8	83 c6 0c	 add	 esi, 12			; 0000000cH
  001eb	89 75 fc	 mov	 DWORD PTR __Mid$1$[ebp], esi
  001ee	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  001f1	0f 85 d9 fe ff
	ff		 jne	 $LL13@Sort_unche
$LN12@Sort_unche:
  001f7	5f		 pop	 edi

; 8364 :         }
; 8365 :     }
; 8366 : }

  001f8	5e		 pop	 esi
  001f9	5b		 pop	 ebx
  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c3		 ret	 0
??$_Sort_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@0HP6A_NABU1@1@Z@Z ENDP ; std::_Sort_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT

; 379  :     static void _Freenode(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 380  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode call");
; 381  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00007	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0000a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0000d	76 28		 jbe	 SHORT $LN35@Freenode
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00012	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00013	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00019	72 12		 jb	 SHORT $LN46@Freenode

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00021	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00023	83 c0 fc	 add	 eax, -4			; fffffffcH
  00026	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00029	77 2c		 ja	 SHORT $LN43@Freenode

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002b	8b c2		 mov	 eax, edx
$LN46@Freenode:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00034	83 c4 08	 add	 esp, 8
$LN35@Freenode:
  00037	6a 2c		 push	 44			; 0000002cH
  00039	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0003a	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00041	c7 46 28 0f 00
	00 00		 mov	 DWORD PTR [esi+40], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00048	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00051	83 c4 08	 add	 esp, 8
  00054	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 383  :     }

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN43@Freenode:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00057	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN82@Freenode:
  0005c	cc		 int	 3
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 6e		 jne	 SHORT $LN90@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	56		 push	 esi
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 77 08	 push	 DWORD PTR [edi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b f7		 mov	 esi, edi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00027	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0002a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0002d	76 28		 jbe	 SHORT $LN43@Erase_tree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00032	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00033	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00039	72 12		 jb	 SHORT $LN54@Erase_tree

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00041	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00043	83 c0 fc	 add	 eax, -4			; fffffffcH
  00046	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00049	77 3d		 ja	 SHORT $LN51@Erase_tree

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004b	8b c2		 mov	 eax, edx
$LN54@Erase_tree:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004d	51		 push	 ecx
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
$LN43@Erase_tree:
  00057	6a 2c		 push	 44			; 0000002cH
  00059	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0005a	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00061	c7 46 28 0f 00
	00 00		 mov	 DWORD PTR [esi+40], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00074	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00078	75 05		 jne	 SHORT $LN99@Erase_tree
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007d	eb 99		 jmp	 SHORT $LL2@Erase_tree
$LN99@Erase_tree:
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
$LN90@Erase_tree:
  00081	5f		 pop	 edi

; 762  :     }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN51@Erase_tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN100@Erase_tree:
  0008d	cc		 int	 3
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CResource *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN39@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CResource *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN39@Erase_tree:
  00035	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CResource *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN39@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN39@Erase_tree:
  00035	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@CAXXZ PROC ; std::vector<SDumpData,std::allocator<SDumpData> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@CAXXZ ENDP ; std::vector<SDumpData,std::allocator<SDumpData> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@QAE@XZ PROC ; std::vector<SDumpData,std::allocator<SDumpData> >::~vector<SDumpData,std::allocator<SDumpData> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN5@vector:
  0005d	5f		 pop	 edi

; 820  :     }

  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00065	cc		 int	 3
??1?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@QAE@XZ ENDP ; std::vector<SDumpData,std::allocator<SDumpData> >::~vector<SDumpData,std::allocator<SDumpData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?DumpCostCompare@@YA_NABUSDumpData@@0@Z
_TEXT	SEGMENT
_lhs$ = 8						; size = 4
_rhs$ = 12						; size = 4
?DumpCostCompare@@YA_NABUSDumpData@@0@Z PROC		; DumpCostCompare, COMDAT

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 388  : 	return (lhs.cost > rhs.cost) ? true : false;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lhs$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	8b 45 0c	 mov	 eax, DWORD PTR _rhs$[ebp]
  0000c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0000f	0f 97 c0	 seta	 al

; 389  : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?DumpCostCompare@@YA_NABUSDumpData@@0@Z ENDP		; DumpCostCompare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?DumpKBCompare@@YA_NABUSDumpData@@0@Z
_TEXT	SEGMENT
_lhs$ = 8						; size = 4
_rhs$ = 12						; size = 4
?DumpKBCompare@@YA_NABUSDumpData@@0@Z PROC		; DumpKBCompare, COMDAT

; 382  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 383  : 	return (lhs.KB > rhs.KB) ? true : false;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lhs$[ebp]
  00006	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _rhs$[ebp]
  0000e	0f 2f 40 04	 comiss	 xmm0, DWORD PTR [eax+4]
  00012	0f 97 c0	 seta	 al

; 384  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?DumpKBCompare@@YA_NABUSDumpData@@0@Z ENDP		; DumpKBCompare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?__ConvertPathName@@YAHPBDPADH@Z
_TEXT	SEGMENT
_c_szPathName$ = 8					; size = 4
_pszRetPathName$ = 12					; size = 4
tv175 = 12						; size = 4
_retLen$ = 16						; size = 4
?__ConvertPathName@@YAHPBDPADH@Z PROC			; __ConvertPathName, COMDAT

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 215  : 	const char * pc;
; 216  : 	int len = 0;
; 217  : 
; 218  : 	for (pc = c_szPathName; *pc && len < retLen; ++pc, ++len)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _c_szPathName$[ebp]
  00008	33 f6		 xor	 esi, esi
  0000a	80 3f 00	 cmp	 BYTE PTR [edi], 0
  0000d	74 3a		 je	 SHORT $LN12@ConvertPat
  0000f	53		 push	 ebx
  00010	8b 5d 0c	 mov	 ebx, DWORD PTR _pszRetPathName$[ebp]
$LL4@ConvertPat:
  00013	3b 75 10	 cmp	 esi, DWORD PTR _retLen$[ebp]
  00016	7d 27		 jge	 SHORT $LN13@ConvertPat

; 219  : 	{
; 220  : 		if (*pc == '/')

  00018	8a 07		 mov	 al, BYTE PTR [edi]
  0001a	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0001d	89 4d 0c	 mov	 DWORD PTR tv175[ebp], ecx
  00020	3c 2f		 cmp	 al, 47			; 0000002fH
  00022	75 04		 jne	 SHORT $LN5@ConvertPat

; 221  : 			*(pszRetPathName++) = '\\';

  00024	b0 5c		 mov	 al, 92			; 0000005cH
  00026	eb 0c		 jmp	 SHORT $LN2@ConvertPat
$LN5@ConvertPat:

; 222  : 		else
; 223  : 			*(pszRetPathName++) = (char) korean_tolower(*pc);

  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR tv175[ebp]
  00031	83 c4 04	 add	 esp, 4
$LN2@ConvertPat:

; 215  : 	const char * pc;
; 216  : 	int len = 0;
; 217  : 
; 218  : 	for (pc = c_szPathName; *pc && len < retLen; ++pc, ++len)

  00034	47		 inc	 edi
  00035	88 03		 mov	 BYTE PTR [ebx], al
  00037	46		 inc	 esi
  00038	8b d9		 mov	 ebx, ecx
  0003a	80 3f 00	 cmp	 BYTE PTR [edi], 0
  0003d	75 d4		 jne	 SHORT $LL4@ConvertPat
$LN13@ConvertPat:

; 224  : 	}
; 225  : 
; 226  : 	*pszRetPathName = '\0';

  0003f	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 227  : 	return len;

  00042	8b c6		 mov	 eax, esi
  00044	5b		 pop	 ebx
  00045	5f		 pop	 edi

; 228  : }

  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN12@ConvertPat:

; 224  : 	}
; 225  : 
; 226  : 	*pszRetPathName = '\0';

  00049	8b 45 0c	 mov	 eax, DWORD PTR _pszRetPathName$[ebp]
  0004c	5f		 pop	 edi
  0004d	c6 00 00	 mov	 BYTE PTR [eax], 0

; 227  : 	return len;

  00050	8b c6		 mov	 eax, esi

; 228  : }

  00052	5e		 pop	 esi
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?__ConvertPathName@@YAHPBDPADH@Z ENDP			; __ConvertPathName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 49   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN21@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 62   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN10@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL9@operator
$LN10@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 62   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 49   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN21@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 62   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN10@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL9@operator
$LN10@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 62   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ PROC ; std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 28		 jbe	 SHORT $LN24@pair
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000e	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN35@pair

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 20		 ja	 SHORT $LN32@pair

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN35@pair:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN24@pair:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00033	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0003a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00045	5e		 pop	 esi
  00046	c3		 ret	 0
$LN32@pair:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00047	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN45@pair:
  0004c	cc		 int	 3
??1?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ENDP ; std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 49   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN21@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 62   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN10@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL9@operator
$LN10@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 62   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CResourceManager::ms_loadingThread'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A ; CResourceManager::ms_loadingThread
  00005	e9 00 00 00 00	 jmp	 ??1CFileLoaderThread@@QAE@XZ ; CFileLoaderThread::~CFileLoaderThread
??__F?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CResourceManager::ms_loadingThread''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ??__E?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A@@YAXXZ PROC ; `dynamic initializer for 'CResourceManager::ms_loadingThread'', COMDAT

; 27   : CFileLoaderThread CResourceManager::ms_loadingThread;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A ; CResourceManager::ms_loadingThread
  00005	e8 00 00 00 00	 call	 ??0CFileLoaderThread@@QAE@XZ ; CFileLoaderThread::CFileLoaderThread
  0000a	68 00 00 00 00	 push	 OFFSET ??__F?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A@@YAXXZ ; `dynamic atexit destructor for 'CResourceManager::ms_loadingThread''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__E?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A@@YAXXZ ENDP ; `dynamic initializer for 'CResourceManager::ms_loadingThread''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCResourceManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCResourceManager@@UAEPAXI@Z PROC			; CResourceManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CResourceManager@@UAE@XZ ; CResourceManager::~CResourceManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 44		 push	 68			; 00000044H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCResourceManager@@UAEPAXI@Z ENDP			; CResourceManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1039 = -16						; size = 4
tv1073 = -12						; size = 4
tv1093 = -12						; size = 4
$T1 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Extract, COMDAT
; _this$ = ecx

; 517  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 518  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 f8	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 519  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00017	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >,std::_Iterator_base0>::operator++

; 520  : 
; 521  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 522  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 523  :         _Nodeptr _Pnode = _Erasednode;
; 524  : 
; 525  :         if (_Pnode->_Left->_Isnil) {

  0001c	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	75 18		 jne	 SHORT $LN94@Extract

; 526  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 527  :         } else if (_Pnode->_Right->_Isnil) {

  0002a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002e	74 04		 je	 SHORT $LN7@Extract

; 528  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  00030	8b f8		 mov	 edi, eax

; 529  :         } else { // two subtrees, must lift successor node to replace erased

  00032	eb 0e		 jmp	 SHORT $LN94@Extract
$LN7@Extract:

; 530  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00034	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 531  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00037	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  0003a	3b d1		 cmp	 edx, ecx

; 532  :         }
; 533  : 
; 534  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  0003c	0f 85 91 00 00
	00		 jne	 $LN9@Extract
$LN94@Extract:

; 535  :             _Fixnodeparent = _Erasednode->_Parent;
; 536  :             if (!_Fixnode->_Isnil) {

  00042	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00046	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00049	75 03		 jne	 SHORT $LN11@Extract

; 537  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  0004b	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 538  :             }
; 539  : 
; 540  :             if (_Myhead->_Parent == _Erasednode) {

  0004e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00050	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00053	75 05		 jne	 SHORT $LN12@Extract

; 541  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00055	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00058	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 542  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  0005a	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005c	75 04		 jne	 SHORT $LN14@Extract

; 543  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005e	89 3e		 mov	 DWORD PTR [esi], edi

; 544  :             } else {

  00060	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 545  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00062	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 546  :             }
; 547  : 
; 548  :             if (_Myhead->_Left == _Erasednode) {

  00065	8b 03		 mov	 eax, DWORD PTR [ebx]
  00067	39 08		 cmp	 DWORD PTR [eax], ecx
  00069	75 28		 jne	 SHORT $LN16@Extract

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006b	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006f	74 04		 je	 SHORT $LN42@Extract
  00071	8b d6		 mov	 edx, esi
  00073	eb 1c		 jmp	 SHORT $LN43@Extract
$LN42@Extract:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00075	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00077	8b d7		 mov	 edx, edi

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00079	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007d	75 0f		 jne	 SHORT $LN49@Extract
  0007f	90		 npad	 1
$LL48@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL48@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN49@Extract:
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN43@Extract:

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00091	89 10		 mov	 DWORD PTR [eax], edx
$LN16@Extract:

; 550  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 551  :             }
; 552  : 
; 553  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 13		 mov	 edx, DWORD PTR [ebx]
  00095	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx
  00098	75 34		 jne	 SHORT $LN17@Extract

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0d		 je	 SHORT $LN44@Extract

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a0	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000a3	8b ce		 mov	 ecx, esi
  000a5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  000a8	e9 94 00 00 00	 jmp	 $LN58@Extract
$LN44@Extract:

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000ad	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b0	8b cf		 mov	 ecx, edi

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000b2	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b6	75 13		 jne	 SHORT $LN54@Extract
  000b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL53@Extract:

; 459  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL53@Extract
$LN54@Extract:

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cb	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN17@Extract:

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000ce	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000d1	eb 6e		 jmp	 SHORT $LN58@Extract
$LN9@Extract:

; 558  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d3	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 559  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d8	89 02		 mov	 DWORD PTR [edx], eax

; 560  : 
; 561  :             if (_Pnode == _Erasednode->_Right) {

  000da	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  000dd	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  000e0	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000e3	75 04		 jne	 SHORT $LN18@Extract

; 562  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e5	8b f2		 mov	 esi, edx

; 563  :             } else { // successor further down, link in place of erased

  000e7	eb 1f		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 564  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 565  :                 if (!_Fixnode->_Isnil) {

  000e9	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ed	8b 30		 mov	 esi, DWORD PTR [eax]
  000ef	75 03		 jne	 SHORT $LN20@Extract

; 566  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f1	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 567  :                 }
; 568  : 
; 569  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f4	89 3e		 mov	 DWORD PTR [esi], edi

; 570  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f6	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000f9	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 571  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ff	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00102	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00105	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN19@Extract:

; 572  :             }
; 573  : 
; 574  :             if (_Myhead->_Parent == _Erasednode) {

  00108	8b 03		 mov	 eax, DWORD PTR [ebx]
  0010a	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0010d	75 05		 jne	 SHORT $LN21@Extract

; 575  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00112	eb 0e		 jmp	 SHORT $LN141@Extract
$LN21@Extract:

; 576  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00114	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00117	39 08		 cmp	 DWORD PTR [eax], ecx
  00119	75 04		 jne	 SHORT $LN23@Extract

; 577  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011b	89 10		 mov	 DWORD PTR [eax], edx

; 578  :             } else {

  0011d	eb 03		 jmp	 SHORT $LN141@Extract
$LN23@Extract:

; 579  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011f	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN141@Extract:

; 580  :             }
; 581  : 
; 582  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00122	b8 04 00 00 00	 mov	 eax, 4
  00127	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012d	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0012f	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00132	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00135	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00138	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 141  :     _Right   = _STD move(_Tmp);

  0013b	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0013e	88 48 0c	 mov	 BYTE PTR [eax+12], cl
$LN58@Extract:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 586  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00141	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00145	0f 85 ba 01 00
	00		 jne	 $LN25@Extract

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0014b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014d	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00150	0f 84 a8 01 00
	00		 je	 $LN3@Extract
  00156	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  0015a	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  0015d	0f 85 9b 01 00
	00		 jne	 $LN3@Extract
$LL4@Extract:

; 588  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  00163	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00165	3b f9		 cmp	 edi, ecx
  00167	0f 85 be 00 00
	00		 jne	 $LN26@Extract

; 589  :                     _Pnode = _Fixnodeparent->_Right;

  0016d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 590  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  00170	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00174	75 54		 jne	 SHORT $LN95@Extract

; 591  :                         _Pnode->_Color         = _Black;

  00176	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  0017a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 592  :                         _Fixnodeparent->_Color = _Red;

  0017d	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00181	8b 01		 mov	 eax, DWORD PTR [ecx]
  00183	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  00186	8b 01		 mov	 eax, DWORD PTR [ecx]
  00188	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0018c	75 03		 jne	 SHORT $LN61@Extract

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  0018e	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN61@Extract:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00191	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00194	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00197	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0019a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0019c	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0019f	75 0c		 jne	 SHORT $LN62@Extract

; 484  :             _Myhead->_Parent = _Pnode;

  001a1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001a4	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001a6	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001a8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ab	eb 20		 jmp	 SHORT $LN87@Extract
$LN62@Extract:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ad	8b 02		 mov	 eax, DWORD PTR [edx]
  001af	3b 30		 cmp	 esi, DWORD PTR [eax]
  001b1	75 0b		 jne	 SHORT $LN64@Extract

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001b3	89 08		 mov	 DWORD PTR [eax], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001b5	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001b7	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001b9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001bc	eb 0f		 jmp	 SHORT $LN87@Extract
$LN64@Extract:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001be	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c1	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001c3	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001c5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c8	eb 03		 jmp	 SHORT $LN87@Extract
$LN95@Extract:
  001ca	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN87@Extract:

; 595  :                     }
; 596  : 
; 597  :                     if (_Pnode->_Isnil) {

  001cd	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001d1	0f 85 d0 00 00
	00		 jne	 $LN2@Extract

; 598  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 599  :                     } else if (_Pnode->_Left->_Color == _Black
; 600  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001d7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001d9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001dd	75 0d		 jne	 SHORT $LN97@Extract
  001df	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e6	0f 84 b4 00 00
	00		 je	 $LN142@Extract
$LN97@Extract:

; 601  :                         _Pnode->_Color = _Red;
; 602  :                         _Fixnode       = _Fixnodeparent;
; 603  :                     } else { // must rearrange right subtree
; 604  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  001f2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f6	75 15		 jne	 SHORT $LN33@Extract

; 605  :                             _Pnode->_Left->_Color = _Black;

  001f8	8b 01		 mov	 eax, DWORD PTR [ecx]

; 606  :                             _Pnode->_Color        = _Red;
; 607  :                             _Rrotate(_Pnode);

  001fa	51		 push	 ecx
  001fb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001ff	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00203	8b cb		 mov	 ecx, ebx
  00205	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Rrotate

; 608  :                             _Pnode = _Fixnodeparent->_Right;

  0020a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 609  :                         }
; 610  : 
; 611  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  0020d	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00210	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 612  :                         _Fixnodeparent->_Color = _Black;

  00213	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 613  :                         _Pnode->_Right->_Color = _Black;

  00217	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 614  :                         _Lrotate(_Fixnodeparent);

  0021a	8b cb		 mov	 ecx, ebx
  0021c	56		 push	 esi
  0021d	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00221	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Lrotate

; 615  :                         break; // tree now recolored/rebalanced

  00226	e9 d3 00 00 00	 jmp	 $LN3@Extract
$LN26@Extract:

; 616  :                     }
; 617  :                 } else { // fixup right subtree
; 618  :                     _Pnode = _Fixnodeparent->_Left;
; 619  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  0022b	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0022f	75 55		 jne	 SHORT $LN96@Extract

; 620  :                         _Pnode->_Color         = _Black;

  00231	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00235	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 621  :                         _Fixnodeparent->_Color = _Red;

  00237	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  0023b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0023e	89 06		 mov	 DWORD PTR [esi], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  00240	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00243	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00247	75 03		 jne	 SHORT $LN69@Extract

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00249	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN69@Extract:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0024c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0024f	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00252	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00255	8b 03		 mov	 eax, DWORD PTR [ebx]
  00257	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0025a	75 0c		 jne	 SHORT $LN70@Extract

; 506  :             _Myhead->_Parent = _Pnode;

  0025c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0025f	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00262	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00264	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00266	eb 21		 jmp	 SHORT $LN86@Extract
$LN70@Extract:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00268	8b 02		 mov	 eax, DWORD PTR [edx]
  0026a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0026d	75 0c		 jne	 SHORT $LN72@Extract

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0026f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00272	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00275	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00277	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00279	eb 0e		 jmp	 SHORT $LN86@Extract
$LN72@Extract:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0027b	89 08		 mov	 DWORD PTR [eax], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0027d	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00280	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00282	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00284	eb 03		 jmp	 SHORT $LN86@Extract
$LN96@Extract:
  00286	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN86@Extract:

; 624  :                     }
; 625  : 
; 626  :                     if (_Pnode->_Isnil) {

  00289	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0028d	75 18		 jne	 SHORT $LN2@Extract

; 627  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 628  :                     } else if (_Pnode->_Right->_Color == _Black
; 629  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  0028f	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00292	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00296	75 2c		 jne	 SHORT $LN98@Extract
  00298	8b 01		 mov	 eax, DWORD PTR [ecx]
  0029a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0029e	75 24		 jne	 SHORT $LN98@Extract
$LN142@Extract:

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002a0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002a3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002a7	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a9	8b 4d f4	 mov	 ecx, DWORD PTR tv1093[ebp]
  002ac	8b f9		 mov	 edi, ecx
  002ae	8b 32		 mov	 esi, DWORD PTR [edx]
  002b0	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002b3	74 49		 je	 SHORT $LN3@Extract
  002b5	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  002b9	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  002bc	0f 84 a1 fe ff
	ff		 je	 $LL4@Extract
  002c2	eb 3a		 jmp	 SHORT $LN3@Extract
$LN98@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002c4	8b 01		 mov	 eax, DWORD PTR [ecx]
  002c6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ca	75 17		 jne	 SHORT $LN101@Extract

; 634  :                             _Pnode->_Right->_Color = _Black;

  002cc	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 635  :                             _Pnode->_Color         = _Red;
; 636  :                             _Lrotate(_Pnode);

  002d0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002d3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  002d7	51		 push	 ecx
  002d8	8b cb		 mov	 ecx, ebx
  002da	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Lrotate

; 637  :                             _Pnode = _Fixnodeparent->_Left;

  002df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e1	eb 03		 jmp	 SHORT $LN39@Extract
$LN101@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e3	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN39@Extract:

; 638  :                         }
; 639  : 
; 640  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002e6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002e9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 641  :                         _Fixnodeparent->_Color = _Black;

  002ec	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 642  :                         _Pnode->_Left->_Color  = _Black;

  002f0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 643  :                         _Rrotate(_Fixnodeparent);

  002f2	8b cb		 mov	 ecx, ebx
  002f4	56		 push	 esi
  002f5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002f9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Rrotate
$LN3@Extract:

; 644  :                         break; // tree now recolored/rebalanced
; 645  :                     }
; 646  :                 }
; 647  :             }
; 648  : 
; 649  :             _Fixnode->_Color = _Black; // stopping node is black

  002fe	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00301	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 650  :         }
; 651  : 
; 652  :         if (0 < _Mysize) {

  00305	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00308	85 c9		 test	 ecx, ecx
  0030a	74 04		 je	 SHORT $LN40@Extract

; 653  :             --_Mysize;

  0030c	49		 dec	 ecx
  0030d	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 654  :         }
; 655  : 
; 656  :         return _Erasednode;
; 657  :     }

  00310	5f		 pop	 edi
  00311	5e		 pop	 esi
  00312	5b		 pop	 ebx
  00313	8b e5		 mov	 esp, ebp
  00315	5d		 pop	 ebp
  00316	c2 04 00	 ret	 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 495  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 506  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 509  :         } else {
; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 473  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 484  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 487  :         } else {
; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@JPAVCResource@@U?$less@J@std@@V?$allocator@U?$pair@$$CBJPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@JPAVCResource@@U?$less@J@std@@V?$allocator@U?$pair@$$CBJPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<long,CResource *,std::less<long>,std::allocator<std::pair<long const ,CResource *> >,0> >::~_Tree<std::_Tmap_traits<long,CResource *,std::less<long>,std::allocator<std::pair<long const ,CResource *> >,0> >, COMDAT
; _this$ = ecx

; 1085 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN72@Tree
  0000f	90		 npad	 1
$LL8@Tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<long const ,CResource *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL8@Tree
$LN72@Tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1092 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@JPAVCResource@@U?$less@J@std@@V?$allocator@U?$pair@$$CBJPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<long,CResource *,std::less<long>,std::allocator<std::pair<long const ,CResource *> >,0> >::~_Tree<std::_Tmap_traits<long,CResource *,std::less<long>,std::allocator<std::pair<long const ,CResource *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::map<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~map<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 2c		 push	 44			; 0000002cH
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~map<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1039 = -16						; size = 4
tv1073 = -12						; size = 4
tv1093 = -12						; size = 4
$T1 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Extract, COMDAT
; _this$ = ecx

; 517  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 518  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 f8	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 519  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00017	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base0>::operator++

; 520  : 
; 521  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 522  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 523  :         _Nodeptr _Pnode = _Erasednode;
; 524  : 
; 525  :         if (_Pnode->_Left->_Isnil) {

  0001c	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	75 18		 jne	 SHORT $LN94@Extract

; 526  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 527  :         } else if (_Pnode->_Right->_Isnil) {

  0002a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002e	74 04		 je	 SHORT $LN7@Extract

; 528  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  00030	8b f8		 mov	 edi, eax

; 529  :         } else { // two subtrees, must lift successor node to replace erased

  00032	eb 0e		 jmp	 SHORT $LN94@Extract
$LN7@Extract:

; 530  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00034	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 531  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00037	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  0003a	3b d1		 cmp	 edx, ecx

; 532  :         }
; 533  : 
; 534  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  0003c	0f 85 91 00 00
	00		 jne	 $LN9@Extract
$LN94@Extract:

; 535  :             _Fixnodeparent = _Erasednode->_Parent;
; 536  :             if (!_Fixnode->_Isnil) {

  00042	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00046	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00049	75 03		 jne	 SHORT $LN11@Extract

; 537  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  0004b	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 538  :             }
; 539  : 
; 540  :             if (_Myhead->_Parent == _Erasednode) {

  0004e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00050	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00053	75 05		 jne	 SHORT $LN12@Extract

; 541  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00055	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00058	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 542  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  0005a	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005c	75 04		 jne	 SHORT $LN14@Extract

; 543  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005e	89 3e		 mov	 DWORD PTR [esi], edi

; 544  :             } else {

  00060	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 545  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00062	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 546  :             }
; 547  : 
; 548  :             if (_Myhead->_Left == _Erasednode) {

  00065	8b 03		 mov	 eax, DWORD PTR [ebx]
  00067	39 08		 cmp	 DWORD PTR [eax], ecx
  00069	75 28		 jne	 SHORT $LN16@Extract

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006b	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006f	74 04		 je	 SHORT $LN42@Extract
  00071	8b d6		 mov	 edx, esi
  00073	eb 1c		 jmp	 SHORT $LN43@Extract
$LN42@Extract:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00075	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00077	8b d7		 mov	 edx, edi

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00079	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007d	75 0f		 jne	 SHORT $LN49@Extract
  0007f	90		 npad	 1
$LL48@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL48@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN49@Extract:
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN43@Extract:

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00091	89 10		 mov	 DWORD PTR [eax], edx
$LN16@Extract:

; 550  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 551  :             }
; 552  : 
; 553  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 13		 mov	 edx, DWORD PTR [ebx]
  00095	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx
  00098	75 34		 jne	 SHORT $LN17@Extract

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0d		 je	 SHORT $LN44@Extract

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a0	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000a3	8b ce		 mov	 ecx, esi
  000a5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  000a8	e9 94 00 00 00	 jmp	 $LN58@Extract
$LN44@Extract:

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000ad	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b0	8b cf		 mov	 ecx, edi

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000b2	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b6	75 13		 jne	 SHORT $LN54@Extract
  000b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL53@Extract:

; 459  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL53@Extract
$LN54@Extract:

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cb	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN17@Extract:

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000ce	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000d1	eb 6e		 jmp	 SHORT $LN58@Extract
$LN9@Extract:

; 558  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d3	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 559  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d8	89 02		 mov	 DWORD PTR [edx], eax

; 560  : 
; 561  :             if (_Pnode == _Erasednode->_Right) {

  000da	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  000dd	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  000e0	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000e3	75 04		 jne	 SHORT $LN18@Extract

; 562  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e5	8b f2		 mov	 esi, edx

; 563  :             } else { // successor further down, link in place of erased

  000e7	eb 1f		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 564  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 565  :                 if (!_Fixnode->_Isnil) {

  000e9	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ed	8b 30		 mov	 esi, DWORD PTR [eax]
  000ef	75 03		 jne	 SHORT $LN20@Extract

; 566  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f1	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 567  :                 }
; 568  : 
; 569  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f4	89 3e		 mov	 DWORD PTR [esi], edi

; 570  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f6	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000f9	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 571  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ff	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00102	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00105	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN19@Extract:

; 572  :             }
; 573  : 
; 574  :             if (_Myhead->_Parent == _Erasednode) {

  00108	8b 03		 mov	 eax, DWORD PTR [ebx]
  0010a	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0010d	75 05		 jne	 SHORT $LN21@Extract

; 575  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00112	eb 0e		 jmp	 SHORT $LN141@Extract
$LN21@Extract:

; 576  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00114	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00117	39 08		 cmp	 DWORD PTR [eax], ecx
  00119	75 04		 jne	 SHORT $LN23@Extract

; 577  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011b	89 10		 mov	 DWORD PTR [eax], edx

; 578  :             } else {

  0011d	eb 03		 jmp	 SHORT $LN141@Extract
$LN23@Extract:

; 579  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011f	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN141@Extract:

; 580  :             }
; 581  : 
; 582  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00122	b8 04 00 00 00	 mov	 eax, 4
  00127	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012d	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0012f	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00132	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00135	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00138	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 141  :     _Right   = _STD move(_Tmp);

  0013b	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0013e	88 48 0c	 mov	 BYTE PTR [eax+12], cl
$LN58@Extract:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 586  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00141	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00145	0f 85 ba 01 00
	00		 jne	 $LN25@Extract

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0014b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014d	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00150	0f 84 a8 01 00
	00		 je	 $LN3@Extract
  00156	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  0015a	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  0015d	0f 85 9b 01 00
	00		 jne	 $LN3@Extract
$LL4@Extract:

; 588  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  00163	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00165	3b f9		 cmp	 edi, ecx
  00167	0f 85 be 00 00
	00		 jne	 $LN26@Extract

; 589  :                     _Pnode = _Fixnodeparent->_Right;

  0016d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 590  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  00170	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00174	75 54		 jne	 SHORT $LN95@Extract

; 591  :                         _Pnode->_Color         = _Black;

  00176	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  0017a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 592  :                         _Fixnodeparent->_Color = _Red;

  0017d	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00181	8b 01		 mov	 eax, DWORD PTR [ecx]
  00183	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  00186	8b 01		 mov	 eax, DWORD PTR [ecx]
  00188	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0018c	75 03		 jne	 SHORT $LN61@Extract

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  0018e	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN61@Extract:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00191	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00194	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00197	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0019a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0019c	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0019f	75 0c		 jne	 SHORT $LN62@Extract

; 484  :             _Myhead->_Parent = _Pnode;

  001a1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001a4	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001a6	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001a8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ab	eb 20		 jmp	 SHORT $LN87@Extract
$LN62@Extract:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ad	8b 02		 mov	 eax, DWORD PTR [edx]
  001af	3b 30		 cmp	 esi, DWORD PTR [eax]
  001b1	75 0b		 jne	 SHORT $LN64@Extract

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001b3	89 08		 mov	 DWORD PTR [eax], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001b5	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001b7	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001b9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001bc	eb 0f		 jmp	 SHORT $LN87@Extract
$LN64@Extract:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001be	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c1	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001c3	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001c5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c8	eb 03		 jmp	 SHORT $LN87@Extract
$LN95@Extract:
  001ca	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN87@Extract:

; 595  :                     }
; 596  : 
; 597  :                     if (_Pnode->_Isnil) {

  001cd	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001d1	0f 85 d0 00 00
	00		 jne	 $LN2@Extract

; 598  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 599  :                     } else if (_Pnode->_Left->_Color == _Black
; 600  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001d7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001d9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001dd	75 0d		 jne	 SHORT $LN97@Extract
  001df	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e6	0f 84 b4 00 00
	00		 je	 $LN142@Extract
$LN97@Extract:

; 601  :                         _Pnode->_Color = _Red;
; 602  :                         _Fixnode       = _Fixnodeparent;
; 603  :                     } else { // must rearrange right subtree
; 604  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  001f2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f6	75 15		 jne	 SHORT $LN33@Extract

; 605  :                             _Pnode->_Left->_Color = _Black;

  001f8	8b 01		 mov	 eax, DWORD PTR [ecx]

; 606  :                             _Pnode->_Color        = _Red;
; 607  :                             _Rrotate(_Pnode);

  001fa	51		 push	 ecx
  001fb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001ff	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00203	8b cb		 mov	 ecx, ebx
  00205	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Rrotate

; 608  :                             _Pnode = _Fixnodeparent->_Right;

  0020a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 609  :                         }
; 610  : 
; 611  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  0020d	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00210	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 612  :                         _Fixnodeparent->_Color = _Black;

  00213	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 613  :                         _Pnode->_Right->_Color = _Black;

  00217	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 614  :                         _Lrotate(_Fixnodeparent);

  0021a	8b cb		 mov	 ecx, ebx
  0021c	56		 push	 esi
  0021d	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00221	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Lrotate

; 615  :                         break; // tree now recolored/rebalanced

  00226	e9 d3 00 00 00	 jmp	 $LN3@Extract
$LN26@Extract:

; 616  :                     }
; 617  :                 } else { // fixup right subtree
; 618  :                     _Pnode = _Fixnodeparent->_Left;
; 619  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  0022b	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0022f	75 55		 jne	 SHORT $LN96@Extract

; 620  :                         _Pnode->_Color         = _Black;

  00231	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00235	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 621  :                         _Fixnodeparent->_Color = _Red;

  00237	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  0023b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0023e	89 06		 mov	 DWORD PTR [esi], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  00240	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00243	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00247	75 03		 jne	 SHORT $LN69@Extract

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00249	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN69@Extract:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0024c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0024f	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00252	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00255	8b 03		 mov	 eax, DWORD PTR [ebx]
  00257	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0025a	75 0c		 jne	 SHORT $LN70@Extract

; 506  :             _Myhead->_Parent = _Pnode;

  0025c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0025f	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00262	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00264	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00266	eb 21		 jmp	 SHORT $LN86@Extract
$LN70@Extract:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00268	8b 02		 mov	 eax, DWORD PTR [edx]
  0026a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0026d	75 0c		 jne	 SHORT $LN72@Extract

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0026f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00272	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00275	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00277	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00279	eb 0e		 jmp	 SHORT $LN86@Extract
$LN72@Extract:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0027b	89 08		 mov	 DWORD PTR [eax], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0027d	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00280	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00282	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00284	eb 03		 jmp	 SHORT $LN86@Extract
$LN96@Extract:
  00286	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN86@Extract:

; 624  :                     }
; 625  : 
; 626  :                     if (_Pnode->_Isnil) {

  00289	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0028d	75 18		 jne	 SHORT $LN2@Extract

; 627  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 628  :                     } else if (_Pnode->_Right->_Color == _Black
; 629  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  0028f	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00292	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00296	75 2c		 jne	 SHORT $LN98@Extract
  00298	8b 01		 mov	 eax, DWORD PTR [ecx]
  0029a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0029e	75 24		 jne	 SHORT $LN98@Extract
$LN142@Extract:

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002a0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002a3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002a7	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a9	8b 4d f4	 mov	 ecx, DWORD PTR tv1093[ebp]
  002ac	8b f9		 mov	 edi, ecx
  002ae	8b 32		 mov	 esi, DWORD PTR [edx]
  002b0	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002b3	74 49		 je	 SHORT $LN3@Extract
  002b5	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  002b9	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  002bc	0f 84 a1 fe ff
	ff		 je	 $LL4@Extract
  002c2	eb 3a		 jmp	 SHORT $LN3@Extract
$LN98@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002c4	8b 01		 mov	 eax, DWORD PTR [ecx]
  002c6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ca	75 17		 jne	 SHORT $LN101@Extract

; 634  :                             _Pnode->_Right->_Color = _Black;

  002cc	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 635  :                             _Pnode->_Color         = _Red;
; 636  :                             _Lrotate(_Pnode);

  002d0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002d3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  002d7	51		 push	 ecx
  002d8	8b cb		 mov	 ecx, ebx
  002da	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Lrotate

; 637  :                             _Pnode = _Fixnodeparent->_Left;

  002df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e1	eb 03		 jmp	 SHORT $LN39@Extract
$LN101@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e3	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN39@Extract:

; 638  :                         }
; 639  : 
; 640  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002e6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002e9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 641  :                         _Fixnodeparent->_Color = _Black;

  002ec	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 642  :                         _Pnode->_Left->_Color  = _Black;

  002f0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 643  :                         _Rrotate(_Fixnodeparent);

  002f2	8b cb		 mov	 ecx, ebx
  002f4	56		 push	 esi
  002f5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002f9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Rrotate
$LN3@Extract:

; 644  :                         break; // tree now recolored/rebalanced
; 645  :                     }
; 646  :                 }
; 647  :             }
; 648  : 
; 649  :             _Fixnode->_Color = _Black; // stopping node is black

  002fe	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00301	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 650  :         }
; 651  : 
; 652  :         if (0 < _Mysize) {

  00305	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00308	85 c9		 test	 ecx, ecx
  0030a	74 04		 je	 SHORT $LN40@Extract

; 653  :             --_Mysize;

  0030c	49		 dec	 ecx
  0030d	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 654  :         }
; 655  : 
; 656  :         return _Erasednode;
; 657  :     }

  00310	5f		 pop	 edi
  00311	5e		 pop	 esi
  00312	5b		 pop	 ebx
  00313	8b e5		 mov	 esp, ebp
  00315	5d		 pop	 ebp
  00316	c2 04 00	 ret	 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Rrotate, COMDAT
; _this$ = ecx

; 495  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 506  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 509  :         } else {
; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Lrotate, COMDAT
; _this$ = ecx

; 473  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 484  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 487  :         } else {
; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@@std@@QAE@XZ PROC ; std::map<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> > >::~map<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> >,0> >
??1?$map@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@@std@@QAE@XZ ENDP ; std::map<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> > >::~map<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1039 = -16						; size = 4
tv1073 = -12						; size = 4
tv1093 = -12						; size = 4
$T1 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Extract, COMDAT
; _this$ = ecx

; 517  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 518  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 f8	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 519  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00017	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >,std::_Iterator_base0>::operator++

; 520  : 
; 521  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 522  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 523  :         _Nodeptr _Pnode = _Erasednode;
; 524  : 
; 525  :         if (_Pnode->_Left->_Isnil) {

  0001c	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	75 18		 jne	 SHORT $LN94@Extract

; 526  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 527  :         } else if (_Pnode->_Right->_Isnil) {

  0002a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002e	74 04		 je	 SHORT $LN7@Extract

; 528  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  00030	8b f8		 mov	 edi, eax

; 529  :         } else { // two subtrees, must lift successor node to replace erased

  00032	eb 0e		 jmp	 SHORT $LN94@Extract
$LN7@Extract:

; 530  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00034	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 531  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00037	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  0003a	3b d1		 cmp	 edx, ecx

; 532  :         }
; 533  : 
; 534  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  0003c	0f 85 91 00 00
	00		 jne	 $LN9@Extract
$LN94@Extract:

; 535  :             _Fixnodeparent = _Erasednode->_Parent;
; 536  :             if (!_Fixnode->_Isnil) {

  00042	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00046	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00049	75 03		 jne	 SHORT $LN11@Extract

; 537  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  0004b	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 538  :             }
; 539  : 
; 540  :             if (_Myhead->_Parent == _Erasednode) {

  0004e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00050	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00053	75 05		 jne	 SHORT $LN12@Extract

; 541  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00055	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00058	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 542  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  0005a	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005c	75 04		 jne	 SHORT $LN14@Extract

; 543  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005e	89 3e		 mov	 DWORD PTR [esi], edi

; 544  :             } else {

  00060	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 545  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00062	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 546  :             }
; 547  : 
; 548  :             if (_Myhead->_Left == _Erasednode) {

  00065	8b 03		 mov	 eax, DWORD PTR [ebx]
  00067	39 08		 cmp	 DWORD PTR [eax], ecx
  00069	75 28		 jne	 SHORT $LN16@Extract

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006b	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006f	74 04		 je	 SHORT $LN42@Extract
  00071	8b d6		 mov	 edx, esi
  00073	eb 1c		 jmp	 SHORT $LN43@Extract
$LN42@Extract:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00075	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00077	8b d7		 mov	 edx, edi

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00079	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007d	75 0f		 jne	 SHORT $LN49@Extract
  0007f	90		 npad	 1
$LL48@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL48@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN49@Extract:
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN43@Extract:

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00091	89 10		 mov	 DWORD PTR [eax], edx
$LN16@Extract:

; 550  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 551  :             }
; 552  : 
; 553  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 13		 mov	 edx, DWORD PTR [ebx]
  00095	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx
  00098	75 34		 jne	 SHORT $LN17@Extract

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0d		 je	 SHORT $LN44@Extract

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a0	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000a3	8b ce		 mov	 ecx, esi
  000a5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  000a8	e9 94 00 00 00	 jmp	 $LN58@Extract
$LN44@Extract:

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000ad	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b0	8b cf		 mov	 ecx, edi

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000b2	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b6	75 13		 jne	 SHORT $LN54@Extract
  000b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL53@Extract:

; 459  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL53@Extract
$LN54@Extract:

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cb	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN17@Extract:

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000ce	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000d1	eb 6e		 jmp	 SHORT $LN58@Extract
$LN9@Extract:

; 558  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d3	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 559  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d8	89 02		 mov	 DWORD PTR [edx], eax

; 560  : 
; 561  :             if (_Pnode == _Erasednode->_Right) {

  000da	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  000dd	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  000e0	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000e3	75 04		 jne	 SHORT $LN18@Extract

; 562  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e5	8b f2		 mov	 esi, edx

; 563  :             } else { // successor further down, link in place of erased

  000e7	eb 1f		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 564  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 565  :                 if (!_Fixnode->_Isnil) {

  000e9	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ed	8b 30		 mov	 esi, DWORD PTR [eax]
  000ef	75 03		 jne	 SHORT $LN20@Extract

; 566  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f1	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 567  :                 }
; 568  : 
; 569  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f4	89 3e		 mov	 DWORD PTR [esi], edi

; 570  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f6	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000f9	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 571  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ff	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00102	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00105	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN19@Extract:

; 572  :             }
; 573  : 
; 574  :             if (_Myhead->_Parent == _Erasednode) {

  00108	8b 03		 mov	 eax, DWORD PTR [ebx]
  0010a	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0010d	75 05		 jne	 SHORT $LN21@Extract

; 575  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00112	eb 0e		 jmp	 SHORT $LN141@Extract
$LN21@Extract:

; 576  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00114	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00117	39 08		 cmp	 DWORD PTR [eax], ecx
  00119	75 04		 jne	 SHORT $LN23@Extract

; 577  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011b	89 10		 mov	 DWORD PTR [eax], edx

; 578  :             } else {

  0011d	eb 03		 jmp	 SHORT $LN141@Extract
$LN23@Extract:

; 579  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011f	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN141@Extract:

; 580  :             }
; 581  : 
; 582  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00122	b8 04 00 00 00	 mov	 eax, 4
  00127	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012d	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0012f	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00132	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00135	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00138	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 141  :     _Right   = _STD move(_Tmp);

  0013b	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0013e	88 48 0c	 mov	 BYTE PTR [eax+12], cl
$LN58@Extract:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 586  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00141	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00145	0f 85 ba 01 00
	00		 jne	 $LN25@Extract

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0014b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014d	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00150	0f 84 a8 01 00
	00		 je	 $LN3@Extract
  00156	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  0015a	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  0015d	0f 85 9b 01 00
	00		 jne	 $LN3@Extract
$LL4@Extract:

; 588  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  00163	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00165	3b f9		 cmp	 edi, ecx
  00167	0f 85 be 00 00
	00		 jne	 $LN26@Extract

; 589  :                     _Pnode = _Fixnodeparent->_Right;

  0016d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 590  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  00170	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00174	75 54		 jne	 SHORT $LN95@Extract

; 591  :                         _Pnode->_Color         = _Black;

  00176	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  0017a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 592  :                         _Fixnodeparent->_Color = _Red;

  0017d	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00181	8b 01		 mov	 eax, DWORD PTR [ecx]
  00183	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  00186	8b 01		 mov	 eax, DWORD PTR [ecx]
  00188	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0018c	75 03		 jne	 SHORT $LN61@Extract

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  0018e	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN61@Extract:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00191	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00194	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00197	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0019a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0019c	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0019f	75 0c		 jne	 SHORT $LN62@Extract

; 484  :             _Myhead->_Parent = _Pnode;

  001a1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001a4	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001a6	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001a8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ab	eb 20		 jmp	 SHORT $LN87@Extract
$LN62@Extract:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ad	8b 02		 mov	 eax, DWORD PTR [edx]
  001af	3b 30		 cmp	 esi, DWORD PTR [eax]
  001b1	75 0b		 jne	 SHORT $LN64@Extract

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001b3	89 08		 mov	 DWORD PTR [eax], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001b5	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001b7	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001b9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001bc	eb 0f		 jmp	 SHORT $LN87@Extract
$LN64@Extract:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001be	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c1	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001c3	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001c5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c8	eb 03		 jmp	 SHORT $LN87@Extract
$LN95@Extract:
  001ca	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN87@Extract:

; 595  :                     }
; 596  : 
; 597  :                     if (_Pnode->_Isnil) {

  001cd	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001d1	0f 85 d0 00 00
	00		 jne	 $LN2@Extract

; 598  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 599  :                     } else if (_Pnode->_Left->_Color == _Black
; 600  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001d7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001d9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001dd	75 0d		 jne	 SHORT $LN97@Extract
  001df	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e6	0f 84 b4 00 00
	00		 je	 $LN142@Extract
$LN97@Extract:

; 601  :                         _Pnode->_Color = _Red;
; 602  :                         _Fixnode       = _Fixnodeparent;
; 603  :                     } else { // must rearrange right subtree
; 604  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  001f2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f6	75 15		 jne	 SHORT $LN33@Extract

; 605  :                             _Pnode->_Left->_Color = _Black;

  001f8	8b 01		 mov	 eax, DWORD PTR [ecx]

; 606  :                             _Pnode->_Color        = _Red;
; 607  :                             _Rrotate(_Pnode);

  001fa	51		 push	 ecx
  001fb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001ff	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00203	8b cb		 mov	 ecx, ebx
  00205	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Rrotate

; 608  :                             _Pnode = _Fixnodeparent->_Right;

  0020a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 609  :                         }
; 610  : 
; 611  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  0020d	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00210	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 612  :                         _Fixnodeparent->_Color = _Black;

  00213	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 613  :                         _Pnode->_Right->_Color = _Black;

  00217	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 614  :                         _Lrotate(_Fixnodeparent);

  0021a	8b cb		 mov	 ecx, ebx
  0021c	56		 push	 esi
  0021d	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00221	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Lrotate

; 615  :                         break; // tree now recolored/rebalanced

  00226	e9 d3 00 00 00	 jmp	 $LN3@Extract
$LN26@Extract:

; 616  :                     }
; 617  :                 } else { // fixup right subtree
; 618  :                     _Pnode = _Fixnodeparent->_Left;
; 619  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  0022b	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0022f	75 55		 jne	 SHORT $LN96@Extract

; 620  :                         _Pnode->_Color         = _Black;

  00231	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00235	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 621  :                         _Fixnodeparent->_Color = _Red;

  00237	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  0023b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0023e	89 06		 mov	 DWORD PTR [esi], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  00240	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00243	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00247	75 03		 jne	 SHORT $LN69@Extract

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00249	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN69@Extract:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0024c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0024f	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00252	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00255	8b 03		 mov	 eax, DWORD PTR [ebx]
  00257	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0025a	75 0c		 jne	 SHORT $LN70@Extract

; 506  :             _Myhead->_Parent = _Pnode;

  0025c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0025f	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00262	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00264	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00266	eb 21		 jmp	 SHORT $LN86@Extract
$LN70@Extract:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00268	8b 02		 mov	 eax, DWORD PTR [edx]
  0026a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0026d	75 0c		 jne	 SHORT $LN72@Extract

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0026f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00272	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00275	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00277	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00279	eb 0e		 jmp	 SHORT $LN86@Extract
$LN72@Extract:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0027b	89 08		 mov	 DWORD PTR [eax], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0027d	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00280	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00282	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00284	eb 03		 jmp	 SHORT $LN86@Extract
$LN96@Extract:
  00286	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN86@Extract:

; 624  :                     }
; 625  : 
; 626  :                     if (_Pnode->_Isnil) {

  00289	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0028d	75 18		 jne	 SHORT $LN2@Extract

; 627  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 628  :                     } else if (_Pnode->_Right->_Color == _Black
; 629  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  0028f	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00292	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00296	75 2c		 jne	 SHORT $LN98@Extract
  00298	8b 01		 mov	 eax, DWORD PTR [ecx]
  0029a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0029e	75 24		 jne	 SHORT $LN98@Extract
$LN142@Extract:

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002a0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002a3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002a7	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a9	8b 4d f4	 mov	 ecx, DWORD PTR tv1093[ebp]
  002ac	8b f9		 mov	 edi, ecx
  002ae	8b 32		 mov	 esi, DWORD PTR [edx]
  002b0	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002b3	74 49		 je	 SHORT $LN3@Extract
  002b5	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  002b9	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  002bc	0f 84 a1 fe ff
	ff		 je	 $LL4@Extract
  002c2	eb 3a		 jmp	 SHORT $LN3@Extract
$LN98@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002c4	8b 01		 mov	 eax, DWORD PTR [ecx]
  002c6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ca	75 17		 jne	 SHORT $LN101@Extract

; 634  :                             _Pnode->_Right->_Color = _Black;

  002cc	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 635  :                             _Pnode->_Color         = _Red;
; 636  :                             _Lrotate(_Pnode);

  002d0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002d3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  002d7	51		 push	 ecx
  002d8	8b cb		 mov	 ecx, ebx
  002da	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Lrotate

; 637  :                             _Pnode = _Fixnodeparent->_Left;

  002df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e1	eb 03		 jmp	 SHORT $LN39@Extract
$LN101@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e3	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN39@Extract:

; 638  :                         }
; 639  : 
; 640  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002e6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002e9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 641  :                         _Fixnodeparent->_Color = _Black;

  002ec	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 642  :                         _Pnode->_Left->_Color  = _Black;

  002f0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 643  :                         _Rrotate(_Fixnodeparent);

  002f2	8b cb		 mov	 ecx, ebx
  002f4	56		 push	 esi
  002f5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002f9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Rrotate
$LN3@Extract:

; 644  :                         break; // tree now recolored/rebalanced
; 645  :                     }
; 646  :                 }
; 647  :             }
; 648  : 
; 649  :             _Fixnode->_Color = _Black; // stopping node is black

  002fe	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00301	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 650  :         }
; 651  : 
; 652  :         if (0 < _Mysize) {

  00305	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00308	85 c9		 test	 ecx, ecx
  0030a	74 04		 je	 SHORT $LN40@Extract

; 653  :             --_Mysize;

  0030c	49		 dec	 ecx
  0030d	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 654  :         }
; 655  : 
; 656  :         return _Erasednode;
; 657  :     }

  00310	5f		 pop	 edi
  00311	5e		 pop	 esi
  00312	5b		 pop	 ebx
  00313	8b e5		 mov	 esp, ebp
  00315	5d		 pop	 ebp
  00316	c2 04 00	 ret	 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Rrotate, COMDAT
; _this$ = ecx

; 495  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 506  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 509  :         } else {
; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Lrotate, COMDAT
; _this$ = ecx

; 473  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 484  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 487  :         } else {
; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 1085 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN72@Tree
  0000f	90		 npad	 1
$LL8@Tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL8@Tree
$LN72@Tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1092 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@@std@@QAE@XZ PROC ; std::map<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >::~map<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >::~_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >
??1?$map@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >::~map<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >::~_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >, COMDAT
; _this$ = ecx

; 1085 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN72@Tree
  0000f	90		 npad	 1
$LL8@Tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,CResource * (__cdecl*)(char const *)>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL8@Tree
$LN72@Tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1092 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >::~_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 2c		 push	 44			; 0000002cH
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> >,0> >::find, COMDAT
; _this$ = ecx

; 1383 :     _NODISCARD iterator find(const key_type& _Keyval) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00008	ff 75 0c	 push	 DWORD PTR __Keyval$[ebp]
  0000b	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]

; 1383 :     _NODISCARD iterator find(const key_type& _Keyval) {

  0000e	8b f9		 mov	 edi, ecx

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00016	8b 75 fc	 mov	 esi, DWORD PTR __Loc$1[ebp+8]
  00019	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0001d	75 20		 jne	 SHORT $LN4@find
  0001f	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00022	50		 push	 eax
  00023	ff 75 0c	 push	 DWORD PTR __Keyval$[ebp]
  00026	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002e	84 c0		 test	 al, al
  00030	75 0d		 jne	 SHORT $LN4@find

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00032	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00035	5f		 pop	 edi
  00036	89 30		 mov	 DWORD PTR [eax], esi

; 1384 :         return iterator(_Find(_Keyval), _Get_scary());
; 1385 :     }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN4@find:

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0003f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1379 :         return _Get_scary()->_Myhead;

  00042	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00044	5f		 pop	 edi

; 1384 :         return iterator(_Find(_Keyval), _Get_scary());
; 1385 :     }

  00045	5e		 pop	 esi

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00046	89 08		 mov	 DWORD PTR [eax], ecx

; 1384 :         return iterator(_Find(_Keyval), _Get_scary());
; 1385 :     }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@@std@@QAE@XZ PROC ; std::map<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> > >::~map<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >
??1?$map@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> > >::~map<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CResource *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CResource *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::clear, COMDAT
; _this$ = ecx

; 1360 :     void clear() noexcept {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1361 :         const auto _Scary = _Get_scary();
; 1362 :         _Scary->_Orphan_ptr(nullptr);
; 1363 :         auto _Head = _Scary->_Myhead;

  00005	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 1364 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00007	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 20		 jne	 SHORT $LN43@clear
$LL5@clear:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cb		 mov	 ecx, ebx
  00015	53		 push	 ebx
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CResource *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL5@clear
$LN43@clear:

; 1365 :         _Head->_Parent  = _Head;

  00030	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1366 :         _Head->_Left    = _Head;

  00033	89 3f		 mov	 DWORD PTR [edi], edi

; 1367 :         _Head->_Right   = _Head;

  00035	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 1368 :         _Scary->_Mysize = 0;

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00041	5b		 pop	 ebx

; 1369 :     }

  00042	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >, COMDAT
; _this$ = ecx

; 1085 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN72@Tree
  0000f	90		 npad	 1
$LL8@Tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CResource *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL8@Tree
$LN72@Tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1092 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?__GetFileCRC@CResourceManager@@IAEKPBDPAPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
_c_ppszLowerFileName$ = 12				; size = 4
?__GetFileCRC@CResourceManager@@IAEKPBDPAPBD@Z PROC	; CResourceManager::__GetFileCRC, COMDAT
; _this$ = ecx

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 351  : 	static char s_szFullPathFileName[MAX_PATH];
; 352  : 	const char * src = c_szFileName;
; 353  : 	char * dst = s_szFullPathFileName;
; 354  : 	int	len = 0;
; 355  : 
; 356  : 	while (src[len])

  00004	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00007	57		 push	 edi
  00008	33 ff		 xor	 edi, edi
  0000a	8a 06		 mov	 al, BYTE PTR [esi]
  0000c	84 c0		 test	 al, al
  0000e	74 26		 je	 SHORT $LN3@GetFileCRC
  00010	53		 push	 ebx
  00011	bb 00 00 00 00	 mov	 ebx, OFFSET ?s_szFullPathFileName@?1??__GetFileCRC@CResourceManager@@IAEKPBDPAPBD@Z@4PADA
  00016	2b de		 sub	 ebx, esi
$LL2@GetFileCRC:

; 357  : 	{
; 358  : 		if (src[len]=='/')

  00018	3c 2f		 cmp	 al, 47			; 0000002fH
  0001a	75 04		 jne	 SHORT $LN4@GetFileCRC

; 359  : 			dst[len] = '\\';

  0001c	b0 5c		 mov	 al, 92			; 0000005cH
  0001e	eb 09		 jmp	 SHORT $LN5@GetFileCRC
$LN4@GetFileCRC:

; 360  : 		else
; 361  : 			dst[len] = (char) korean_tolower(src[len]);

  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  00026	83 c4 04	 add	 esp, 4
$LN5@GetFileCRC:

; 362  : 
; 363  : 		++len;

  00029	88 04 1e	 mov	 BYTE PTR [esi+ebx], al
  0002c	47		 inc	 edi
  0002d	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  00030	46		 inc	 esi
  00031	84 c0		 test	 al, al
  00033	75 e3		 jne	 SHORT $LL2@GetFileCRC

; 351  : 	static char s_szFullPathFileName[MAX_PATH];
; 352  : 	const char * src = c_szFileName;
; 353  : 	char * dst = s_szFullPathFileName;
; 354  : 	int	len = 0;
; 355  : 
; 356  : 	while (src[len])

  00035	5b		 pop	 ebx
$LN3@GetFileCRC:

; 364  : 	}
; 365  : 
; 366  : 	dst[len] = '\0';
; 367  : 
; 368  : 	if (c_ppszLowerFileName)

  00036	8b 45 0c	 mov	 eax, DWORD PTR _c_ppszLowerFileName$[ebp]
  00039	c6 87 00 00 00
	00 00		 mov	 BYTE PTR ?s_szFullPathFileName@?1??__GetFileCRC@CResourceManager@@IAEKPBDPAPBD@Z@4PADA[edi], 0
  00040	85 c0		 test	 eax, eax
  00042	74 06		 je	 SHORT $LN6@GetFileCRC

; 369  : 		*c_ppszLowerFileName = &s_szFullPathFileName[0];

  00044	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?s_szFullPathFileName@?1??__GetFileCRC@CResourceManager@@IAEKPBDPAPBD@Z@4PADA
$LN6@GetFileCRC:

; 370  : 
; 371  : 	return (GetCRC32(s_szFullPathFileName, len));

  0004a	57		 push	 edi
  0004b	68 00 00 00 00	 push	 OFFSET ?s_szFullPathFileName@?1??__GetFileCRC@CResourceManager@@IAEKPBDPAPBD@Z@4PADA
  00050	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00055	83 c4 08	 add	 esp, 8
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi

; 372  : }

  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
?__GetFileCRC@CResourceManager@@IAEKPBDPAPBD@Z ENDP	; CResourceManager::__GetFileCRC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?__DestroyCacheMap@CResourceManager@@IAEXXZ
_TEXT	SEGMENT
?__DestroyCacheMap@CResourceManager@@IAEXXZ PROC	; CResourceManager::__DestroyCacheMap, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 137  : {

  00003	56		 push	 esi
  00004	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00005	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00008	8b 30		 mov	 esi, DWORD PTR [eax]
  0000a	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 139  : 	for (i = m_pCacheMap.begin(); i != m_pCacheMap.end(); ++i)

  0000c	74 52		 je	 SHORT $LN3@DestroyCac
  0000e	66 90		 npad	 2
$LL4@DestroyCac:

; 140  : 	{
; 141  : 		CResource* pResource = i->second;
; 142  : 		pResource->Release();

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00018	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001f	74 23		 je	 SHORT $LN36@DestroyCac

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00021	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	75 16		 jne	 SHORT $LN84@DestroyCac
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL34@DestroyCac:
  00030	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00033	75 0b		 jne	 SHORT $LN84@DestroyCac

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00035	8b f0		 mov	 esi, eax
  00037	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0003e	74 f0		 je	 SHORT $LL34@DestroyCac
$LN84@DestroyCac:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  00040	8b f0		 mov	 esi, eax

; 57   :         } else {

  00042	eb 18		 jmp	 SHORT $LN42@DestroyCac
$LN36@DestroyCac:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00044	8b f0		 mov	 esi, eax

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00046	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00048	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0004c	75 0e		 jne	 SHORT $LN42@DestroyCac
  0004e	66 90		 npad	 2
$LL41@DestroyCac:
  00050	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00052	8b f1		 mov	 esi, ecx
  00054	8b c8		 mov	 ecx, eax
  00056	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0005a	74 f4		 je	 SHORT $LL41@DestroyCac
$LN42@DestroyCac:

; 232  :         return this->_Ptr == _Right._Ptr;

  0005c	3b 37		 cmp	 esi, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 139  : 	for (i = m_pCacheMap.begin(); i != m_pCacheMap.end(); ++i)

  0005e	75 b0		 jne	 SHORT $LL4@DestroyCac
$LN3@DestroyCac:

; 143  : 	}
; 144  : 
; 145  : 	m_pCacheMap.clear();

  00060	8b cf		 mov	 ecx, edi
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	e9 00 00 00 00	 jmp	 ?clear@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::clear
?__DestroyCacheMap@CResourceManager@@IAEXXZ ENDP	; CResourceManager::__DestroyCacheMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?__DestroyResourceMap@CResourceManager@@IAEXXZ
_TEXT	SEGMENT
?__DestroyResourceMap@CResourceManager@@IAEXXZ PROC	; CResourceManager::__DestroyResourceMap, COMDAT
; _this$ = ecx

; 158  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 159  : 	Tracenf("CResourceManager::__DestroyResourceMap %d", m_pResMap.size());

  00004	ff 76 10	 push	 DWORD PTR [esi+16]
  00007	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@GGPMOLNJ@CResourceManager?3?3__DestroyReso@
  0000c	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00011	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00014	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 159  : 	Tracenf("CResourceManager::__DestroyResourceMap %d", m_pResMap.size());

  00017	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001a	8b 30		 mov	 esi, DWORD PTR [eax]
  0001c	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 162  : 	for (i = m_pResMap.begin(); i != m_pResMap.end(); ++i)

  0001e	0f 84 a1 00 00
	00		 je	 $LN74@DestroyRes
$LL4@DestroyRes:

; 163  : 	{
; 164  : 		CResource* pResource = i->second;
; 165  : 		pResource->Clear();

  00024	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00027	e8 00 00 00 00	 call	 ?Clear@CResource@@QAEXXZ ; CResource::Clear
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  0002c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00033	74 1f		 je	 SHORT $LN36@DestroyRes

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00035	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00038	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0003c	75 12		 jne	 SHORT $LN160@DestroyRes
  0003e	66 90		 npad	 2
$LL34@DestroyRes:
  00040	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00043	75 0b		 jne	 SHORT $LN160@DestroyRes

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00045	8b f0		 mov	 esi, eax
  00047	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004e	74 f0		 je	 SHORT $LL34@DestroyRes
$LN160@DestroyRes:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  00050	8b f0		 mov	 esi, eax

; 57   :         } else {

  00052	eb 18		 jmp	 SHORT $LN42@DestroyRes
$LN36@DestroyRes:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00054	8b f0		 mov	 esi, eax

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00056	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00058	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0005c	75 0e		 jne	 SHORT $LN42@DestroyRes
  0005e	66 90		 npad	 2
$LL41@DestroyRes:
  00060	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00062	8b f1		 mov	 esi, ecx
  00064	8b c8		 mov	 ecx, eax
  00066	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0006a	74 f4		 je	 SHORT $LL41@DestroyRes
$LN42@DestroyRes:

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0006c	8b 07		 mov	 eax, DWORD PTR [edi]

; 232  :         return this->_Ptr == _Right._Ptr;

  0006e	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 162  : 	for (i = m_pResMap.begin(); i != m_pResMap.end(); ++i)

  00070	75 b2		 jne	 SHORT $LL4@DestroyRes
  00072	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00074	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 145  : 	for (auto i = container.begin(); i != container.end(); ++i)

  00076	74 4d		 je	 SHORT $LN74@DestroyRes
$LL75@DestroyRes:

; 146  : 	{
; 147  : 		delete i->second;

  00078	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 06		 je	 SHORT $LN73@DestroyRes
  0007f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00081	6a 01		 push	 1
  00083	ff 10		 call	 DWORD PTR [eax]
$LN73@DestroyRes:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00085	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00088	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008c	74 1d		 je	 SHORT $LN100@DestroyRes

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0008e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00091	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00095	75 10		 jne	 SHORT $LN161@DestroyRes
$LL98@DestroyRes:
  00097	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0009a	75 0b		 jne	 SHORT $LN161@DestroyRes

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0009c	8b f0		 mov	 esi, eax
  0009e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000a5	74 f0		 je	 SHORT $LL98@DestroyRes
$LN161@DestroyRes:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  000a7	8b f0		 mov	 esi, eax

; 57   :         } else {

  000a9	eb 16		 jmp	 SHORT $LN106@DestroyRes
$LN100@DestroyRes:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  000ab	8b f0		 mov	 esi, eax

; 466  :         while (!_Pnode->_Left->_Isnil) {

  000ad	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000af	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000b3	75 0c		 jne	 SHORT $LN106@DestroyRes
$LL105@DestroyRes:
  000b5	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  000b7	8b f1		 mov	 esi, ecx
  000b9	8b c8		 mov	 ecx, eax
  000bb	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000bf	74 f4		 je	 SHORT $LL105@DestroyRes
$LN106@DestroyRes:

; 232  :         return this->_Ptr == _Right._Ptr;

  000c1	3b 37		 cmp	 esi, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 145  : 	for (auto i = container.begin(); i != container.end(); ++i)

  000c3	75 b3		 jne	 SHORT $LL75@DestroyRes
$LN74@DestroyRes:

; 148  : 	}
; 149  : 
; 150  : 	container.clear();

  000c5	8b cf		 mov	 ecx, edi
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	e9 00 00 00 00	 jmp	 ?clear@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::clear
?__DestroyResourceMap@CResourceManager@@IAEXXZ ENDP	; CResourceManager::__DestroyResourceMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?__DestroyDeletingResourceMap@CResourceManager@@IAEXXZ
_TEXT	SEGMENT
_i$1 = -4						; size = 4
?__DestroyDeletingResourceMap@CResourceManager@@IAEXXZ PROC ; CResourceManager::__DestroyDeletingResourceMap, COMDAT
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 150  : 	Tracenf("CResourceManager::__DestroyDeletingResourceMap %d", m_ResourceDeletingMap.size());

  00009	ff 76 28	 push	 DWORD PTR [esi+40]
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@JIBACBGM@CResourceManager?3?3__DestroyDele@
  00011	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00016	8d 5e 24	 lea	 ebx, DWORD PTR [esi+36]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 150  : 	Tracenf("CResourceManager::__DestroyDeletingResourceMap %d", m_ResourceDeletingMap.size());

  00019	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0001c	8b 33		 mov	 esi, DWORD PTR [ebx]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
  00023	3b c6		 cmp	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 151  : 	for (TResourceDeletingMap::iterator i = m_ResourceDeletingMap.begin(); i != m_ResourceDeletingMap.end(); ++i)

  00025	74 19		 je	 SHORT $LN3@DestroyDel
$LL4@DestroyDel:

; 152  : 		(i->first)->Clear();

  00027	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0002a	e8 00 00 00 00	 call	 ?Clear@CResource@@QAEXXZ ; CResource::Clear
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 198  :         _Mybase::operator++();

  0002f	8d 4d fc	 lea	 ecx, DWORD PTR _i$1[ebp]
  00032	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >,std::_Iterator_base0>::operator++

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00037	8b 33		 mov	 esi, DWORD PTR [ebx]

; 232  :         return this->_Ptr == _Right._Ptr;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0003c	3b c6		 cmp	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 151  : 	for (TResourceDeletingMap::iterator i = m_ResourceDeletingMap.begin(); i != m_ResourceDeletingMap.end(); ++i)

  0003e	75 e7		 jne	 SHORT $LL4@DestroyDel
$LN3@DestroyDel:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1364 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00040	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00043	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00047	75 27		 jne	 SHORT $LN96@DestroyDel
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL55@DestroyDel:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00050	ff 77 08	 push	 DWORD PTR [edi+8]
  00053	8b cb		 mov	 ecx, ebx
  00055	53		 push	 ebx
  00056	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0005b	8b c7		 mov	 eax, edi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0005d	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0005f	6a 18		 push	 24			; 00000018H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00067	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0006a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006e	74 e0		 je	 SHORT $LL55@DestroyDel
$LN96@DestroyDel:

; 1368 :         _Scary->_Mysize = 0;

  00070	5f		 pop	 edi
  00071	89 76 04	 mov	 DWORD PTR [esi+4], esi
  00074	89 36		 mov	 DWORD PTR [esi], esi
  00076	89 76 08	 mov	 DWORD PTR [esi+8], esi
  00079	5e		 pop	 esi
  0007a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00081	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 155  : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
?__DestroyDeletingResourceMap@CResourceManager@@IAEXXZ ENDP ; CResourceManager::__DestroyDeletingResourceMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
_TEXT	SEGMENT
$T2 = -84						; size = 12
__Loc$3 = -72						; size = 12
$T4 = -60						; size = 8
_dwFileCRC$1$ = -52					; size = 4
_this$GSCopy$1$ = -48					; size = 4
$T5 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_LoadingSet$ = 8					; size = 4
?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z PROC ; CResourceManager::PushBackgroundLoadingSet, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d d0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0002d	8b 45 08	 mov	 eax, DWORD PTR _LoadingSet$[ebp]
  00030	8b 00		 mov	 eax, DWORD PTR [eax]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00032	8b 30		 mov	 esi, DWORD PTR [eax]
  00034	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 121  : 	while (itor != LoadingSet.end())

  00036	0f 84 04 02 00
	00		 je	 $LN3@PushBackgr
  0003c	0f 1f 40 00	 npad	 4
$LL2@PushBackgr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00040	83 7e 24 0f	 cmp	 DWORD PTR [esi+36], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 185  :         return this->_Ptr->_Myval;

  00044	8d 7e 10	 lea	 edi, DWORD PTR [esi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00047	8b c7		 mov	 eax, edi

; 426  :         if (_Large_mode_engaged()) {

  00049	76 02		 jbe	 SHORT $LN322@PushBackgr

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0004b	8b 07		 mov	 eax, DWORD PTR [edi]
$LN322@PushBackgr:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 123  : 		DWORD dwFileCRC = __GetFileCRC(itor->c_str());

  0004d	6a 00		 push	 0
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?__GetFileCRC@CResourceManager@@IAEKPBDPAPBD@Z ; CResourceManager::__GetFileCRC

; 124  : 
; 125  : 		if (NULL != isResourcePointerData(dwFileCRC))

  00055	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00058	50		 push	 eax
  00059	89 45 cc	 mov	 DWORD PTR _dwFileCRC$1$[ebp], eax
  0005c	e8 00 00 00 00	 call	 ?isResourcePointerData@CResourceManager@@QAE_NK@Z ; CResourceManager::isResourcePointerData
  00061	84 c0		 test	 al, al
  00063	74 5c		 je	 SHORT $LN4@PushBackgr
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00065	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00068	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0006c	74 2d		 je	 SHORT $LN53@PushBackgr

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0006e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00071	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00075	0f 85 9c 01 00
	00		 jne	 $LN288@PushBackgr
  0007b	0f 1f 44 00 00	 npad	 5
$LL51@PushBackgr:
  00080	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00083	0f 85 8e 01 00
	00		 jne	 $LN288@PushBackgr

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00089	8b f0		 mov	 esi, eax
  0008b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0008e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00092	74 ec		 je	 SHORT $LL51@PushBackgr

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  00094	8b f0		 mov	 esi, eax

; 57   :         } else {

  00096	e9 96 01 00 00	 jmp	 $LN290@PushBackgr
$LN53@PushBackgr:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  0009b	8b f0		 mov	 esi, eax

; 466  :         while (!_Pnode->_Left->_Isnil) {

  0009d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009f	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000a3	0f 85 88 01 00
	00		 jne	 $LN290@PushBackgr
  000a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL58@PushBackgr:
  000b0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  000b2	8b f1		 mov	 esi, ecx
  000b4	8b c8		 mov	 ecx, eax
  000b6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ba	74 f4		 je	 SHORT $LL58@PushBackgr
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 128  : 			continue;

  000bc	e9 70 01 00 00	 jmp	 $LN290@PushBackgr
$LN4@PushBackgr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000c1	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  000c5	76 02		 jbe	 SHORT $LN72@PushBackgr

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000c7	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN72@PushBackgr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000c9	8b 45 cc	 mov	 eax, DWORD PTR _dwFileCRC$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  000cc	8b cf		 mov	 ecx, edi
  000ce	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000d1	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000d4	0f 11 45 d8	 movups	 XMMWORD PTR $T5[ebp+4], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000d8	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000df	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+24], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  000e6	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  000e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL323@PushBackgr:
  000f0	8a 01		 mov	 al, BYTE PTR [ecx]
  000f2	41		 inc	 ecx
  000f3	84 c0		 test	 al, al
  000f5	75 f9		 jne	 SHORT $LL323@PushBackgr
  000f7	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000f9	51		 push	 ecx
  000fa	57		 push	 edi
  000fb	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp+4]
  000fe	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  00103	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  00106	8d 45 d4	 lea	 eax, DWORD PTR $T5[ebp]
  00109	50		 push	 eax
  0010a	8d 45 ac	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 131  : 		m_RequestMap.insert(TResourceRequestMap::value_type(dwFileCRC, itor->c_str()));

  0010d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  00114	50		 push	 eax
  00115	8d 4f 2c	 lea	 ecx, DWORD PTR [edi+44]
  00118	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>
  0011d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00120	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00124	66 0f d6 45 b8	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00129	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0012d	75 10		 jne	 SHORT $LN107@PushBackgr
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0012f	8b 45 d4	 mov	 eax, DWORD PTR $T5[ebp]
  00132	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00135	72 08		 jb	 SHORT $LN107@PushBackgr
  00137	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp+24]
  0013a	e9 80 00 00 00	 jmp	 $LN224@PushBackgr
$LN107@PushBackgr:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  0013f	81 7f 30 5d 74
	d1 05		 cmp	 DWORD PTR [edi+48], 97612893 ; 05d1745dH
  00146	8d 47 2c	 lea	 eax, DWORD PTR [edi+44]
  00149	0f 84 13 01 00
	00		 je	 $LN304@PushBackgr

; 1013 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0014f	8b 38		 mov	 edi, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00151	89 45 c4	 mov	 DWORD PTR $T4[ebp], eax

; 136  :         return ::operator new(_Bytes);

  00154	6a 2c		 push	 44			; 0000002cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00156	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0015a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00161	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00166	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T5[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 278  :     pair(pair&&)      = default;

  0016a	8b 4d d4	 mov	 ecx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0016d	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00170	c6 45 d8 00	 mov	 BYTE PTR $T5[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 278  :     pair(pair&&)      = default;

  00174	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00177	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0017a	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00181	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00188	0f 11 40 14	 movups	 XMMWORD PTR [eax+20], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0018c	8d 49 2c	 lea	 ecx, DWORD PTR [ecx+44]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0018f	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00196	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T5[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0019b	50		 push	 eax
  0019c	ff 75 bc	 push	 DWORD PTR __Loc$3[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0019f	66 0f d6 40 24	 movq	 QWORD PTR [eax+36], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001a4	ff 75 b8	 push	 DWORD PTR __Loc$3[ebp]

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  001a7	89 38		 mov	 DWORD PTR [eax], edi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  001a9	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  001ac	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 824  :         this->_Ptr->_Color = _Red;

  001af	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001b5	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
  001ba	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
$LN224@PushBackgr:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 131  : 		m_RequestMap.insert(TResourceRequestMap::value_type(dwFileCRC, itor->c_str()));

  001bf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001c6	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001c9	76 2a		 jbe	 SHORT $LN265@PushBackgr
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001cb	8b 55 d8	 mov	 edx, DWORD PTR $T5[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001ce	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d1	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001d3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001d9	72 10		 jb	 SHORT $LN276@PushBackgr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001db	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001de	83 c1 23	 add	 ecx, 35			; 00000023H
  001e1	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001e3	83 c0 fc	 add	 eax, -4			; fffffffcH
  001e6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001e9	77 72		 ja	 SHORT $LN273@PushBackgr
$LN276@PushBackgr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001eb	51		 push	 ecx
  001ec	52		 push	 edx
  001ed	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001f2	83 c4 08	 add	 esp, 8
$LN265@PushBackgr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  001f5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001f8	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001fc	74 1d		 je	 SHORT $LN289@PushBackgr

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  001fe	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00201	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00205	75 10		 jne	 SHORT $LN288@PushBackgr
$LL287@PushBackgr:
  00207	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0020a	75 0b		 jne	 SHORT $LN288@PushBackgr

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0020c	8b f0		 mov	 esi, eax
  0020e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00211	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00215	74 f0		 je	 SHORT $LL287@PushBackgr
$LN288@PushBackgr:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  00217	8b f0		 mov	 esi, eax

; 57   :         } else {

  00219	eb 16		 jmp	 SHORT $LN290@PushBackgr
$LN289@PushBackgr:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  0021b	8b f0		 mov	 esi, eax

; 466  :         while (!_Pnode->_Left->_Isnil) {

  0021d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0021f	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00223	75 0c		 jne	 SHORT $LN290@PushBackgr
$LL294@PushBackgr:
  00225	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00227	8b f1		 mov	 esi, ecx
  00229	8b c8		 mov	 ecx, eax
  0022b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0022f	74 f4		 je	 SHORT $LL294@PushBackgr
$LN290@PushBackgr:

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00231	8b 45 08	 mov	 eax, DWORD PTR _LoadingSet$[ebp]
  00234	3b 30		 cmp	 esi, DWORD PTR [eax]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 121  : 	while (itor != LoadingSet.end())

  00236	74 08		 je	 SHORT $LN3@PushBackgr
  00238	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0023b	e9 00 fe ff ff	 jmp	 $LL2@PushBackgr
$LN3@PushBackgr:

; 134  : }

  00240	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00243	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0024a	59		 pop	 ecx
  0024b	5f		 pop	 edi
  0024c	5e		 pop	 esi
  0024d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00250	33 cd		 xor	 ecx, ebp
  00252	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00257	8b e5		 mov	 esp, ebp
  00259	5d		 pop	 ebp
  0025a	c2 04 00	 ret	 4
$LN273@PushBackgr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0025d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN304@PushBackgr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  00262	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN328@PushBackgr:
  00267	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$6:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PushBackgroundLoadingSet@CResourceManager@@QAEXAAV?$set@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ENDP ; CResourceManager::PushBackgroundLoadingSet
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?ProcessBackgroundLoading@CResourceManager@@QAEXXZ
_TEXT	SEGMENT
$T4 = -116						; size = 12
__Loc$5 = -104						; size = 12
__Loc$6 = -92						; size = 12
$T7 = -88						; size = 8
$T8 = -80						; size = 4
__Loc$2$ = -76						; size = 4
$T9 = -72						; size = 8
_lCurrentTime$1$ = -68					; size = 4
__Myhead$1$ = -68					; size = 4
_pData$ = -64						; size = 4
__Scary$1$ = -60					; size = 4
__Head$1$ = -60						; size = 4
__Loc$1$ = -60						; size = 4
_this$GSCopy$1$ = -56					; size = 4
_dwFileCRC$10 = -52					; size = 4
__First$ = -52						; size = 4
__Successor$11 = -52					; size = 4
tv3289 = -52						; size = 4
__Scary$1$ = -52					; size = 4
_itorRef$ = -48						; size = 4
__Successor$12 = -48					; size = 4
__Successor$13 = -48					; size = 4
_dwFileCRC$1$ = -48					; size = 4
$T14 = -48						; size = 4
$T15 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ProcessBackgroundLoading@CResourceManager@@QAEXXZ PROC	; CResourceManager::ProcessBackgroundLoading, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ProcessBackgroundLoading@CResourceManager@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b d1		 mov	 edx, ecx
  0002c	89 55 c8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0002f	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 49   : 	TResourceRequestMap::iterator itor = m_RequestMap.begin();

  00032	8d 7a 2c	 lea	 edi, DWORD PTR [edx+44]
  00035	89 7d c4	 mov	 DWORD PTR __Scary$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00038	8b 30		 mov	 esi, DWORD PTR [eax]
  0003a	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 51   : 	while (itor != m_RequestMap.end())

  0003c	0f 84 9c 01 00
	00		 je	 $LN743@ProcessBac
$LL2@ProcessBac:

; 52   : 	{
; 53   : 		DWORD dwFileCRC = itor->first;

  00042	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 56   : 		if (isResourcePointerData(dwFileCRC) ||

  00045	8b ca		 mov	 ecx, edx
  00047	50		 push	 eax
  00048	89 45 d0	 mov	 DWORD PTR _dwFileCRC$1$[ebp], eax
  0004b	89 45 cc	 mov	 DWORD PTR _dwFileCRC$10[ebp], eax
  0004e	e8 00 00 00 00	 call	 ?isResourcePointerData@CResourceManager@@QAE_NK@Z ; CResourceManager::isResourcePointerData
  00053	84 c0		 test	 al, al
  00055	0f 85 57 01 00
	00		 jne	 $LN9@ProcessBac
  0005b	8b 7d c8	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0005e	8d 45 cc	 lea	 eax, DWORD PTR _dwFileCRC$10[ebp]
  00061	50		 push	 eax
  00062	8d 45 98	 lea	 eax, DWORD PTR __Loc$5[ebp]
  00065	50		 push	 eax
  00066	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
  00069	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0006e	8b 4d a0	 mov	 ecx, DWORD PTR __Loc$5[ebp+8]
  00071	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00075	75 11		 jne	 SHORT $LN770@ProcessBac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00077	8b 45 d0	 mov	 eax, DWORD PTR _dwFileCRC$1$[ebp]
  0007a	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0007d	72 09		 jb	 SHORT $LN770@ProcessBac

; 232  :         return this->_Ptr == _Right._Ptr;

  0007f	39 4f 34	 cmp	 DWORD PTR [edi+52], ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 56   : 		if (isResourcePointerData(dwFileCRC) ||

  00082	0f 85 27 01 00
	00		 jne	 $LN774@ProcessBac
$LN770@ProcessBac:

; 57   : 			(m_WaitingMap.end() != m_WaitingMap.find(dwFileCRC)))
; 58   : 		{
; 59   : 			//printf("SKP %s\n", stFileName.c_str());
; 60   : 			itor = m_RequestMap.erase(itor);
; 61   : 			continue;
; 62   : 		}
; 63   : 
; 64   : 		//printf("REQ %s\n", stFileName.c_str());
; 65   : 		ms_loadingThread.Request(stFileName);

  00088	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0008b	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A ; CResourceManager::ms_loadingThread
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CFileLoaderThread::Request
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00096	8b 45 d0	 mov	 eax, DWORD PTR _dwFileCRC$1$[ebp]
  00099	8d 4d d8	 lea	 ecx, DWORD PTR $T15[ebp+4]
  0009c	89 45 d4	 mov	 DWORD PTR $T15[ebp], eax
  0009f	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  000a8	8d 45 d4	 lea	 eax, DWORD PTR $T15[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 66   : 		m_WaitingMap.insert(TResourceRequestMap::value_type(dwFileCRC, stFileName));

  000ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  000b2	50		 push	 eax
  000b3	8d 45 8c	 lea	 eax, DWORD PTR $T4[ebp]
  000b6	50		 push	 eax
  000b7	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
  000ba	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>
  000bf	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000c3	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c6	66 0f d6 45 a4	 movq	 QWORD PTR __Loc$6[ebp], xmm0

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000cb	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000cf	75 10		 jne	 SHORT $LN386@ProcessBac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  000d1	8b 4d d4	 mov	 ecx, DWORD PTR $T15[ebp]
  000d4	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000d7	72 08		 jb	 SHORT $LN386@ProcessBac
  000d9	8b 45 ec	 mov	 eax, DWORD PTR $T15[ebp+24]
  000dc	e9 84 00 00 00	 jmp	 $LN503@ProcessBac
$LN386@ProcessBac:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  000e1	81 7f 38 5d 74
	d1 05		 cmp	 DWORD PTR [edi+56], 97612893 ; 05d1745dH
  000e8	0f 84 ff 03 00
	00		 je	 $LN736@ProcessBac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000ee	8b 45 c8	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1013 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  000f1	8b 7f 34	 mov	 edi, DWORD PTR [edi+52]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000f4	83 c0 34	 add	 eax, 52			; 00000034H
  000f7	89 45 b8	 mov	 DWORD PTR $T9[ebp], eax

; 136  :         return ::operator new(_Bytes);

  000fa	6a 2c		 push	 44			; 0000002cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  000fc	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00100	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00107	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0010c	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T15[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 278  :     pair(pair&&)      = default;

  00110	8b 4d d4	 mov	 ecx, DWORD PTR $T15[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00113	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00116	c6 45 d8 00	 mov	 BYTE PTR $T15[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 278  :     pair(pair&&)      = default;

  0011a	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0011d	8b 4d c8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00120	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00127	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0012e	0f 11 40 14	 movups	 XMMWORD PTR [eax+20], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00132	8d 49 34	 lea	 ecx, DWORD PTR [ecx+52]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00135	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0013c	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T15[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00141	50		 push	 eax
  00142	ff 75 a8	 push	 DWORD PTR __Loc$6[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00145	66 0f d6 40 24	 movq	 QWORD PTR [eax+36], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0014a	ff 75 a4	 push	 DWORD PTR __Loc$6[ebp]

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0014d	89 38		 mov	 DWORD PTR [eax], edi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0014f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00152	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 824  :         this->_Ptr->_Color = _Red;

  00155	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0015b	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
  00160	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
$LN503@ProcessBac:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 66   : 		m_WaitingMap.insert(TResourceRequestMap::value_type(dwFileCRC, stFileName));

  00165	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0016c	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0016f	76 2e		 jbe	 SHORT $LN543@ProcessBac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00171	8b 55 d8	 mov	 edx, DWORD PTR $T15[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00174	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00177	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00179	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0017f	72 14		 jb	 SHORT $LN554@ProcessBac

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00181	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00184	83 c1 23	 add	 ecx, 35			; 00000023H
  00187	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00189	83 c0 fc	 add	 eax, -4			; fffffffcH
  0018c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0018f	0f 87 5d 03 00
	00		 ja	 $LN295@ProcessBac
$LN554@ProcessBac:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00195	51		 push	 ecx
  00196	52		 push	 edx
  00197	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0019c	83 c4 08	 add	 esp, 8
$LN543@ProcessBac:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1292 :         ++_Successor; // save successor iterator for return

  0019f	8d 4d d0	 lea	 ecx, DWORD PTR __Successor$13[ebp]
  001a2	89 75 d0	 mov	 DWORD PTR __Successor$13[ebp], esi
  001a5	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base0>::operator++

; 1293 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  001aa	8b 7d c4	 mov	 edi, DWORD PTR __Scary$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 68   : 	}

  001ad	eb 0e		 jmp	 SHORT $LN778@ProcessBac
$LN774@ProcessBac:

; 56   : 		if (isResourcePointerData(dwFileCRC) ||

  001af	8b 7d c4	 mov	 edi, DWORD PTR __Scary$1$[ebp]
$LN9@ProcessBac:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1292 :         ++_Successor; // save successor iterator for return

  001b2	8d 4d d0	 lea	 ecx, DWORD PTR __Successor$12[ebp]
  001b5	89 75 d0	 mov	 DWORD PTR __Successor$12[ebp], esi
  001b8	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base0>::operator++
$LN778@ProcessBac:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 51   : 	while (itor != m_RequestMap.end())

  001bd	56		 push	 esi
  001be	8b cf		 mov	 ecx, edi
  001c0	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Extract
  001c5	8b 75 d0	 mov	 esi, DWORD PTR __Successor$12[ebp]
  001c8	50		 push	 eax
  001c9	57		 push	 edi
  001ca	e8 00 00 00 00	 call	 ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
  001cf	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  001d2	3b 37		 cmp	 esi, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 51   : 	while (itor != m_RequestMap.end())

  001d4	74 08		 je	 SHORT $LN743@ProcessBac
  001d6	8b 55 c8	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
  001d9	e9 64 fe ff ff	 jmp	 $LL2@ProcessBac
$LN743@ProcessBac:

; 69   : 
; 70   : 	DWORD dwCurrentTime = ELTimer_GetMSec();

  001de	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  001e3	89 45 d0	 mov	 DWORD PTR $T14[ebp], eax

; 73   : 	while (ms_loadingThread.Fetch(&pData))

  001e6	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A ; CResourceManager::ms_loadingThread
  001eb	8d 45 c0	 lea	 eax, DWORD PTR _pData$[ebp]
  001ee	50		 push	 eax
  001ef	e8 00 00 00 00	 call	 ?Fetch@CFileLoaderThread@@QAE_NPAPAUSData@1@@Z ; CFileLoaderThread::Fetch
  001f4	84 c0		 test	 al, al
  001f6	0f 84 73 02 00
	00		 je	 $LN744@ProcessBac
  001fc	0f 1f 40 00	 npad	 4
$LL4@ProcessBac:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00200	8b 45 c0	 mov	 eax, DWORD PTR _pData$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  00203	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00207	76 02		 jbe	 SHORT $LN769@ProcessBac

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00209	8b 00		 mov	 eax, DWORD PTR [eax]
$LN769@ProcessBac:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 76   : 		CResource * pResource = GetResourcePointer(pData->stFileName.c_str());

  0020b	8b 7d c8	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  0020e	8b cf		 mov	 ecx, edi
  00210	50		 push	 eax
  00211	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00216	8b f0		 mov	 esi, eax
  00218	89 75 b0	 mov	 DWORD PTR $T8[ebp], esi

; 77   : 
; 78   : 		if (pResource)

  0021b	85 f6		 test	 esi, esi
  0021d	0f 84 e6 00 00
	00		 je	 $LN686@ProcessBac

; 79   : 		{
; 80   : 			if (pResource->IsEmpty())

  00223	8b ce		 mov	 ecx, esi
  00225	e8 00 00 00 00	 call	 ?IsEmpty@CResource@@QBE_NXZ ; CResource::IsEmpty
  0022a	84 c0		 test	 al, al
  0022c	0f 84 d7 00 00
	00		 je	 $LN686@ProcessBac

; 81   : 			{
; 82   : 				pResource->OnLoad(pData->dwSize, pData->pvBuf);

  00232	8b 45 c0	 mov	 eax, DWORD PTR _pData$[ebp]
  00235	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00237	ff b0 5c 01 00
	00		 push	 DWORD PTR [eax+348]
  0023d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00240	8b ce		 mov	 ecx, esi
  00242	ff b0 60 01 00
	00		 push	 DWORD PTR [eax+352]
  00248	ff d2		 call	 edx

; 83   : 				pResource->AddReferenceOnly();

  0024a	8b ce		 mov	 ecx, esi
  0024c	e8 00 00 00 00	 call	 ?AddReferenceOnly@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReferenceOnly
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00251	8b 57 3c	 mov	 edx, DWORD PTR [edi+60]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 85   : 				m_pResRefDecreaseWaitingMap.insert(TResourceRefDecreaseWaitingMap::value_type(dwCurrentTime, pResource));

  00254	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00257	33 f6		 xor	 esi, esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 85   : 				m_pResRefDecreaseWaitingMap.insert(TResourceRefDecreaseWaitingMap::value_type(dwCurrentTime, pResource));

  00259	89 4d cc	 mov	 DWORD PTR __Scary$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  0025c	89 55 bc	 mov	 DWORD PTR __Myhead$1$[ebp], edx
  0025f	8b fa		 mov	 edi, edx
  00261	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00264	89 45 c4	 mov	 DWORD PTR __Loc$1$[ebp], eax

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00267	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0026b	75 2b		 jne	 SHORT $LN596@ProcessBac
  0026d	8b 75 d0	 mov	 esi, DWORD PTR $T14[ebp]
$LL595@ProcessBac:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00270	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00273	89 45 c4	 mov	 DWORD PTR __Loc$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00276	3b d6		 cmp	 edx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00278	7d 05		 jge	 SHORT $LN597@ProcessBac

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0027a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1627 :             } else {

  0027d	eb 04		 jmp	 SHORT $LN598@ProcessBac
$LN597@ProcessBac:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  0027f	8b f8		 mov	 edi, eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00281	8b 00		 mov	 eax, DWORD PTR [eax]
$LN598@ProcessBac:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00283	33 c9		 xor	 ecx, ecx
  00285	3b d6		 cmp	 edx, esi
  00287	0f 9d c1	 setge	 cl
  0028a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0028e	89 4d b4	 mov	 DWORD PTR __Loc$2$[ebp], ecx
  00291	74 dd		 je	 SHORT $LL595@ProcessBac
  00293	8b f1		 mov	 esi, ecx
  00295	8b 4d cc	 mov	 ecx, DWORD PTR __Scary$1$[ebp]
$LN596@ProcessBac:

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00298	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0029c	75 08		 jne	 SHORT $LN605@ProcessBac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0029e	8b 45 d0	 mov	 eax, DWORD PTR $T14[ebp]
  002a1	3b 47 10	 cmp	 eax, DWORD PTR [edi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  002a4	7d 60		 jge	 SHORT $LN775@ProcessBac
$LN605@ProcessBac:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  002a6	81 79 04 aa aa
	aa 0a		 cmp	 DWORD PTR [ecx+4], 178956970 ; 0aaaaaaaH
  002ad	0f 84 3a 02 00
	00		 je	 $LN736@ProcessBac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  002b3	89 4d a8	 mov	 DWORD PTR $T7[ebp], ecx

; 136  :         return ::operator new(_Bytes);

  002b6	6a 18		 push	 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  002b8	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  002bf	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  002c6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  002cb	8b 4d d0	 mov	 ecx, DWORD PTR $T14[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  002ce	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 800  :     }

  002d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  002d8	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  002df	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  002e2	8b 4d b0	 mov	 ecx, DWORD PTR $T8[ebp]
  002e5	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  002e8	8b 4d bc	 mov	 ecx, DWORD PTR __Myhead$1$[ebp]
  002eb	89 08		 mov	 DWORD PTR [eax], ecx

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  002ed	50		 push	 eax

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  002ee	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  002f1	56		 push	 esi
  002f2	ff 75 c4	 push	 DWORD PTR __Loc$1$[ebp]

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  002f5	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  002f8	8b 4d cc	 mov	 ecx, DWORD PTR __Scary$1$[ebp]

; 824  :         this->_Ptr->_Color = _Red;

  002fb	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00301	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Insert_node
$LN775@ProcessBac:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 89   : 		m_WaitingMap.erase(GetCRC32(pData->stFileName.c_str(), pData->stFileName.size()));

  00306	8b 7d c8	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN686@ProcessBac:
  00309	8b 45 c0	 mov	 eax, DWORD PTR _pData$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0030c	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 89   : 		m_WaitingMap.erase(GetCRC32(pData->stFileName.c_str(), pData->stFileName.size()));

  00310	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00313	76 02		 jbe	 SHORT $LN86@ProcessBac

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00315	8b 00		 mov	 eax, DWORD PTR [eax]
$LN86@ProcessBac:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 89   : 		m_WaitingMap.erase(GetCRC32(pData->stFileName.c_str(), pData->stFileName.size()));

  00317	51		 push	 ecx
  00318	50		 push	 eax
  00319	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  0031e	8b d0		 mov	 edx, eax
  00320	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1699 :         _Nodeptr _Pnode   = _Scary->_Myhead->_Parent;

  00323	8b 47 34	 mov	 eax, DWORD PTR [edi+52]

; 1700 :         _Nodeptr _Lonode  = _Scary->_Myhead; // end() if search fails

  00326	8b f8		 mov	 edi, eax
  00328	89 45 c4	 mov	 DWORD PTR __Head$1$[ebp], eax

; 1701 :         _Nodeptr _Hinode  = _Scary->_Myhead; // end() if search fails

  0032b	8b f0		 mov	 esi, eax
  0032d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00330	89 4d cc	 mov	 DWORD PTR tv3289[ebp], ecx

; 1702 : 
; 1703 :         while (!_Pnode->_Isnil) {

  00333	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00337	75 28		 jne	 SHORT $LN97@ProcessBac
  00339	0f 1f 80 00 00
	00 00		 npad	 7
$LL96@ProcessBac:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00340	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00343	3b c2		 cmp	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1705 :             if (_DEBUG_LT_PRED(_Comp, _Nodekey, _Keyval)) {

  00345	73 05		 jae	 SHORT $LN100@ProcessBac

; 1706 :                 _Pnode = _Pnode->_Right; // descend right subtree

  00347	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1707 :             } else { // _Pnode not less than _Keyval, remember it

  0034a	eb 0f		 jmp	 SHORT $LN101@ProcessBac
$LN100@ProcessBac:

; 1708 :                 if (_Hinode->_Isnil && _DEBUG_LT_PRED(_Comp, _Keyval, _Nodekey)) {

  0034c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00350	74 05		 je	 SHORT $LN102@ProcessBac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00352	3b d0		 cmp	 edx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1708 :                 if (_Hinode->_Isnil && _DEBUG_LT_PRED(_Comp, _Keyval, _Nodekey)) {

  00354	0f 42 f1	 cmovb	 esi, ecx
$LN102@ProcessBac:

; 1709 :                     _Hinode = _Pnode; // _Pnode greater, remember it
; 1710 :                 }
; 1711 : 
; 1712 :                 _Lonode = _Pnode;

  00357	8b f9		 mov	 edi, ecx

; 1713 :                 _Pnode  = _Pnode->_Left; // descend left subtree

  00359	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN101@ProcessBac:

; 1702 : 
; 1703 :         while (!_Pnode->_Isnil) {

  0035b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0035f	74 df		 je	 SHORT $LL96@ProcessBac
$LN97@ProcessBac:

; 1714 :             }
; 1715 :         }
; 1716 : 
; 1717 :         _Pnode = _Hinode->_Isnil ? _Scary->_Myhead->_Parent : _Hinode->_Left; // continue scan for upper bound

  00361	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00365	8b 4d cc	 mov	 ecx, DWORD PTR tv3289[ebp]
  00368	8b c1		 mov	 eax, ecx
  0036a	75 02		 jne	 SHORT $LN107@ProcessBac
  0036c	8b 06		 mov	 eax, DWORD PTR [esi]
$LN107@ProcessBac:

; 1718 :         while (!_Pnode->_Isnil) {

  0036e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00372	75 14		 jne	 SHORT $LN99@ProcessBac
$LL98@ProcessBac:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00374	3b 50 10	 cmp	 edx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1719 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Pnode->_Myval))) {

  00377	73 06		 jae	 SHORT $LN103@ProcessBac

; 1720 :                 // _Pnode greater than _Keyval, remember it
; 1721 :                 _Hinode = _Pnode;

  00379	8b f0		 mov	 esi, eax

; 1722 :                 _Pnode  = _Pnode->_Left; // descend left subtree

  0037b	8b 00		 mov	 eax, DWORD PTR [eax]

; 1723 :             } else {

  0037d	eb 03		 jmp	 SHORT $LN104@ProcessBac
$LN103@ProcessBac:

; 1724 :                 _Pnode = _Pnode->_Right; // descend right subtree

  0037f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN104@ProcessBac:

; 1718 :         while (!_Pnode->_Isnil) {

  00382	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00386	74 ec		 je	 SHORT $LL98@ProcessBac
$LN99@ProcessBac:

; 96   :         return _Ptr == _Right._Ptr;

  00388	8b 45 c4	 mov	 eax, DWORD PTR __Head$1$[ebp]

; 1319 :         _Erase_unchecked(_First, _Last);

  0038b	89 7d cc	 mov	 DWORD PTR __First$[ebp], edi

; 96   :         return _Ptr == _Right._Ptr;

  0038e	3b 38		 cmp	 edi, DWORD PTR [eax]

; 1301 :         if (_First == _Begin && _Last._Ptr->_Isnil) {

  00390	75 29		 jne	 SHORT $LN734@ProcessBac
  00392	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00396	74 23		 je	 SHORT $LN734@ProcessBac

; 1364 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00398	8b 75 c8	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0039b	51		 push	 ecx
  0039c	83 c6 34	 add	 esi, 52			; 00000034H
  0039f	56		 push	 esi
  003a0	8b ce		 mov	 ecx, esi
  003a2	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >

; 1365 :         _Head->_Parent  = _Head;

  003a7	8b 45 c4	 mov	 eax, DWORD PTR __Head$1$[ebp]
  003aa	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1366 :         _Head->_Left    = _Head;

  003ad	89 00		 mov	 DWORD PTR [eax], eax

; 1367 :         _Head->_Right   = _Head;

  003af	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1368 :         _Scary->_Mysize = 0;

  003b2	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1304 :             return _Last._Ptr;

  003b9	eb 2c		 jmp	 SHORT $LN155@ProcessBac
$LN734@ProcessBac:

; 96   :         return _Ptr == _Right._Ptr;

  003bb	3b fe		 cmp	 edi, esi

; 1308 :         while (_First != _Last) {

  003bd	74 28		 je	 SHORT $LN155@ProcessBac
  003bf	90		 npad	 1
$LL154@ProcessBac:

; 66   :         ++*this;

  003c0	8d 4d cc	 lea	 ecx, DWORD PTR __First$[ebp]
  003c3	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Iterator_base0>::operator++

; 1293 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  003c8	57		 push	 edi
  003c9	8b 7d c8	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  003cc	83 c7 34	 add	 edi, 52			; 00000034H
  003cf	8b cf		 mov	 ecx, edi
  003d1	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Extract

; 1294 :         _Scary->_Orphan_ptr(_Erasednode);
; 1295 :         _Node::_Freenode(_Getal(), _Erasednode); // delete erased node

  003d6	50		 push	 eax
  003d7	57		 push	 edi
  003d8	e8 00 00 00 00	 call	 ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >

; 96   :         return _Ptr == _Right._Ptr;

  003dd	8b 7d cc	 mov	 edi, DWORD PTR __First$[ebp]

; 1295 :         _Node::_Freenode(_Getal(), _Erasednode); // delete erased node

  003e0	83 c4 08	 add	 esp, 8

; 96   :         return _Ptr == _Right._Ptr;

  003e3	3b fe		 cmp	 edi, esi

; 1308 :         while (_First != _Last) {

  003e5	75 d9		 jne	 SHORT $LL154@ProcessBac
$LN155@ProcessBac:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 91   : 		delete [] ((char *) pData->pvBuf);

  003e7	8b 45 c0	 mov	 eax, DWORD PTR _pData$[ebp]
  003ea	ff b0 5c 01 00
	00		 push	 DWORD PTR [eax+348]
  003f0	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 92   : 		delete pData;

  003f5	8b 75 c0	 mov	 esi, DWORD PTR _pData$[ebp]
  003f8	83 c4 04	 add	 esp, 4
  003fb	85 f6		 test	 esi, esi
  003fd	74 5a		 je	 SHORT $LN259@ProcessBac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  003ff	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00402	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  00407	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0040a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0040d	76 2b		 jbe	 SHORT $LN287@ProcessBac
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0040f	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00411	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00412	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00418	72 16		 jb	 SHORT $LN298@ProcessBac

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0041a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0041d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00420	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00422	83 c0 fc	 add	 eax, -4			; fffffffcH
  00425	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00428	0f 87 c4 00 00
	00		 ja	 $LN295@ProcessBac

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0042e	8b c2		 mov	 eax, edx
$LN298@ProcessBac:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00430	51		 push	 ecx
  00431	50		 push	 eax
  00432	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00437	83 c4 08	 add	 esp, 8
$LN287@ProcessBac:
  0043a	68 64 01 00 00	 push	 356			; 00000164H
  0043f	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00440	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00447	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0044e	c6 06 00	 mov	 BYTE PTR [esi], 0
  00451	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00456	83 c4 08	 add	 esp, 8
$LN259@ProcessBac:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 73   : 	while (ms_loadingThread.Fetch(&pData))

  00459	8d 45 c0	 lea	 eax, DWORD PTR _pData$[ebp]
  0045c	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_loadingThread@CResourceManager@@1VCFileLoaderThread@@A ; CResourceManager::ms_loadingThread
  00461	50		 push	 eax
  00462	e8 00 00 00 00	 call	 ?Fetch@CFileLoaderThread@@QAE_NPAPAUSData@1@@Z ; CFileLoaderThread::Fetch
  00467	84 c0		 test	 al, al
  00469	0f 85 91 fd ff
	ff		 jne	 $LL4@ProcessBac
$LN744@ProcessBac:

; 95   : 	long lCurrentTime = ELTimer_GetMSec();

  0046f	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00474	8b 7d c8	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 95   : 	long lCurrentTime = ELTimer_GetMSec();

  00477	89 45 bc	 mov	 DWORD PTR _lCurrentTime$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0047a	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0047d	8b 31		 mov	 esi, DWORD PTR [ecx]
  0047f	89 75 d0	 mov	 DWORD PTR _itorRef$[ebp], esi
  00482	3b f1		 cmp	 esi, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 99   : 	while (itorRef != m_pResRefDecreaseWaitingMap.end())

  00484	74 4c		 je	 SHORT $LN745@ProcessBac
$LL6@ProcessBac:

; 100  : 	{
; 101  : 		const long & rCreatingTime = itorRef->first;
; 102  : 
; 103  : 		if (lCurrentTime - rCreatingTime > c_Reference_Decrease_Wait_Time)

  00486	2b 46 10	 sub	 eax, DWORD PTR [esi+16]
  00489	3d 00 ba db 00	 cmp	 eax, 14400000		; 00dbba00H
  0048e	7e 2f		 jle	 SHORT $LN12@ProcessBac

; 104  : 		{
; 105  : 			CResource * pResource = itorRef->second;
; 106  : 
; 107  : 			// Decrease Reference Count
; 108  : 			pResource->Release();

  00490	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00493	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1292 :         ++_Successor; // save successor iterator for return

  00498	8d 4d cc	 lea	 ecx, DWORD PTR __Successor$11[ebp]
  0049b	89 75 cc	 mov	 DWORD PTR __Successor$11[ebp], esi
  0049e	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >,std::_Iterator_base0>::operator++

; 1293 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  004a3	56		 push	 esi
  004a4	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  004a7	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >::_Extract
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  004ac	6a 18		 push	 24			; 00000018H
  004ae	50		 push	 eax
  004af	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 109  : 			itorRef = m_pResRefDecreaseWaitingMap.erase(itorRef);

  004b4	8b 75 cc	 mov	 esi, DWORD PTR __Successor$11[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  004b7	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 109  : 			itorRef = m_pResRefDecreaseWaitingMap.erase(itorRef);

  004ba	89 75 d0	 mov	 DWORD PTR _itorRef$[ebp], esi

; 110  : 			//Tracef("Decrease Pre Loading Resource\n", rCreatingTime);
; 111  : 		}

  004bd	eb 0b		 jmp	 SHORT $LN373@ProcessBac
$LN12@ProcessBac:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 198  :         _Mybase::operator++();

  004bf	8d 4d d0	 lea	 ecx, DWORD PTR _itorRef$[ebp]
  004c2	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBJPAVCResource@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<long const ,CResource *> > >,std::_Iterator_base0>::operator++
  004c7	8b 75 d0	 mov	 esi, DWORD PTR _itorRef$[ebp]
$LN373@ProcessBac:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 99   : 	while (itorRef != m_pResRefDecreaseWaitingMap.end())

  004ca	8b 45 bc	 mov	 eax, DWORD PTR _lCurrentTime$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  004cd	3b 77 3c	 cmp	 esi, DWORD PTR [edi+60]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 99   : 	while (itorRef != m_pResRefDecreaseWaitingMap.end())

  004d0	75 b4		 jne	 SHORT $LL6@ProcessBac
$LN745@ProcessBac:

; 115  : }

  004d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004dc	59		 pop	 ecx
  004dd	5f		 pop	 edi
  004de	5e		 pop	 esi
  004df	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004e2	33 cd		 xor	 ecx, ebp
  004e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004e9	8b e5		 mov	 esp, ebp
  004eb	5d		 pop	 ebp
  004ec	c3		 ret	 0
$LN736@ProcessBac:
  004ed	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN295@ProcessBac:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004f2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN777@ProcessBac:
  004f7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessBackgroundLoading@CResourceManager@@QAEXXZ$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T15[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$?ProcessBackgroundLoading@CResourceManager@@QAEXXZ$6:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR $T9[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
__unwindfunclet$?ProcessBackgroundLoading@CResourceManager@@QAEXXZ$17:
  00010	8d 4d a8	 lea	 ecx, DWORD PTR $T7[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBJPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<long const ,CResource *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<long const ,CResource *>,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?ProcessBackgroundLoading@CResourceManager@@QAEXXZ:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcessBackgroundLoading@CResourceManager@@QAEXXZ
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcessBackgroundLoading@CResourceManager@@QAEXXZ ENDP	; CResourceManager::ProcessBackgroundLoading
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?ReserveDeletingResource@CResourceManager@@QAEXPAVCResource@@@Z
_TEXT	SEGMENT
$T4 = -28						; size = 8
__Myhead$1$ = -20					; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pResource$ = 8						; size = 4
__Scary$1$ = 8						; size = 4
?ReserveDeletingResource@CResourceManager@@QAEXPAVCResource@@@Z PROC ; CResourceManager::ReserveDeletingResource, COMDAT
; _this$ = ecx

; 517  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ReserveDeletingResource@CResourceManager@@QAEXPAVCResource@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	8b 7d 08	 mov	 edi, DWORD PTR _pResource$[ebp]

; 518  : 	DWORD dwCurrentTime = ELTimer_GetMSec();

  0002d	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec

; 519  : 	m_ResourceDeletingMap.insert(TResourceDeletingMap::value_type(pResource, dwCurrentTime + c_Deleting_Wait_Time));

  00032	05 00 ba db 00	 add	 eax, 14400000		; 00dbba00H
  00037	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  0003a	89 45 f0	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  0003d	33 f6		 xor	 esi, esi
  0003f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00041	8b d0		 mov	 edx, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 519  : 	m_ResourceDeletingMap.insert(TResourceDeletingMap::value_type(pResource, dwCurrentTime + c_Deleting_Wait_Time));

  00043	89 4d 08	 mov	 DWORD PTR __Scary$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00046	89 45 ec	 mov	 DWORD PTR __Myhead$1$[ebp], eax
  00049	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0004c	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00050	75 1b		 jne	 SHORT $LN14@ReserveDel
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00052	8b c3		 mov	 eax, ebx
$LL13@ReserveDel:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00054	8b d8		 mov	 ebx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00056	39 78 10	 cmp	 DWORD PTR [eax+16], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00059	73 05		 jae	 SHORT $LN15@ReserveDel

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0005b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1627 :             } else {

  0005e	eb 04		 jmp	 SHORT $LN16@ReserveDel
$LN15@ReserveDel:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00060	8b d0		 mov	 edx, eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00062	8b 00		 mov	 eax, DWORD PTR [eax]
$LN16@ReserveDel:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00064	1b f6		 sbb	 esi, esi
  00066	46		 inc	 esi
  00067	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0006b	74 e7		 je	 SHORT $LL13@ReserveDel
$LN14@ReserveDel:

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0006d	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00071	75 05		 jne	 SHORT $LN23@ReserveDel
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00073	3b 7a 10	 cmp	 edi, DWORD PTR [edx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00076	73 49		 jae	 SHORT $LN104@ReserveDel
$LN23@ReserveDel:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  00078	81 79 04 aa aa
	aa 0a		 cmp	 DWORD PTR [ecx+4], 178956970 ; 0aaaaaaaH
  0007f	74 54		 je	 SHORT $LN127@ReserveDel
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00081	89 4d e4	 mov	 DWORD PTR $T4[ebp], ecx

; 136  :         return ::operator new(_Bytes);

  00084	6a 18		 push	 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00086	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0008d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00094	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00099	8b 4d f0	 mov	 ecx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0009c	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0009f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000a2	8b 4d ec	 mov	 ecx, DWORD PTR __Myhead$1$[ebp]
  000a5	89 78 10	 mov	 DWORD PTR [eax+16], edi
  000a8	89 08		 mov	 DWORD PTR [eax], ecx

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000aa	50		 push	 eax

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000ab	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000ae	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000b1	8b 4d 08	 mov	 ecx, DWORD PTR __Scary$1$[ebp]
  000b4	56		 push	 esi
  000b5	53		 push	 ebx

; 824  :         this->_Ptr->_Color = _Red;

  000b6	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000bc	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Insert_node
$LN104@ReserveDel:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 520  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
$LN127@ReserveDel:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  000d5	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN125@ReserveDel:
  000da	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReserveDeletingResource@CResourceManager@@QAEXPAVCResource@@@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CResource * const,unsigned long>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?ReserveDeletingResource@CResourceManager@@QAEXPAVCResource@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ReserveDeletingResource@CResourceManager@@QAEXPAVCResource@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ReserveDeletingResource@CResourceManager@@QAEXPAVCResource@@@Z ENDP ; CResourceManager::ReserveDeletingResource
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?Update@CResourceManager@@QAEXXZ
_TEXT	SEGMENT
_CurrentTime$1$ = -12					; size = 4
_Count$1$ = -8						; size = 4
_itor$ = -4						; size = 4
__Successor$1 = -4					; size = 4
?Update@CResourceManager@@QAEXXZ PROC			; CResourceManager::Update, COMDAT
; _this$ = ecx

; 485  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx

; 486  : 	DWORD CurrentTime = ELTimer_GetMSec();

  0000a	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0000f	8b 53 24	 mov	 edx, DWORD PTR [ebx+36]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 486  : 	DWORD CurrentTime = ELTimer_GetMSec();

  00012	89 45 f4	 mov	 DWORD PTR _CurrentTime$1$[ebp], eax

; 487  : 	CResource * pResource;
; 488  : 	int Count = 0;

  00015	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Count$1$[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001c	8b 32		 mov	 esi, DWORD PTR [edx]
  0001e	89 75 fc	 mov	 DWORD PTR _itor$[ebp], esi
  00021	3b f2		 cmp	 esi, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 492  : 	while (itor != m_ResourceDeletingMap.end())

  00023	74 62		 je	 SHORT $LN122@Update
  00025	57		 push	 edi
$LL2@Update:

; 493  : 	{
; 494  : 		pResource = itor->first;

  00026	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]

; 495  : 
; 496  : 		if (CurrentTime >= itor->second)

  00029	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  0002c	72 45		 jb	 SHORT $LN4@Update

; 497  : 		{
; 498  : 			if (pResource->canDestroy())

  0002e	8b cf		 mov	 ecx, edi
  00030	e8 00 00 00 00	 call	 ?canDestroy@CReferenceObject@@QAE_NXZ ; CReferenceObject::canDestroy
  00035	84 c0		 test	 al, al
  00037	74 07		 je	 SHORT $LN6@Update

; 499  : 			{
; 500  : 				//Tracef("Resource Clear %s\n", pResource->GetFileName());
; 501  : 				pResource->Clear();

  00039	8b cf		 mov	 ecx, edi
  0003b	e8 00 00 00 00	 call	 ?Clear@CResource@@QAEXXZ ; CResource::Clear
$LN6@Update:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1292 :         ++_Successor; // save successor iterator for return

  00040	8d 4d fc	 lea	 ecx, DWORD PTR __Successor$1[ebp]
  00043	89 75 fc	 mov	 DWORD PTR __Successor$1[ebp], esi
  00046	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >,std::_Iterator_base0>::operator++

; 1293 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  0004b	56		 push	 esi
  0004c	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  0004f	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAVCResource@@K@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >::_Extract
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00054	6a 18		 push	 24			; 00000018H
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 506  : 			if (++Count >= c_DeletingCountPerFrame)

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _Count$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0005f	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 504  : 			itor = m_ResourceDeletingMap.erase(itor);

  00062	8b 75 fc	 mov	 esi, DWORD PTR __Successor$1[ebp]

; 506  : 			if (++Count >= c_DeletingCountPerFrame)

  00065	40		 inc	 eax
  00066	89 75 fc	 mov	 DWORD PTR _itor$[ebp], esi
  00069	89 45 f8	 mov	 DWORD PTR _Count$1$[ebp], eax
  0006c	83 f8 01	 cmp	 eax, 1
  0006f	7d 15		 jge	 SHORT $LN126@Update

; 507  : 				break;
; 508  : 		}

  00071	eb 0b		 jmp	 SHORT $LN115@Update
$LN4@Update:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 198  :         _Mybase::operator++();

  00073	8d 4d fc	 lea	 ecx, DWORD PTR _itor$[ebp]
  00076	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAVCResource@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<CResource * const,unsigned long> > >,std::_Iterator_base0>::operator++
  0007b	8b 75 fc	 mov	 esi, DWORD PTR _itor$[ebp]
$LN115@Update:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 492  : 	while (itor != m_ResourceDeletingMap.end())

  0007e	8b 45 f4	 mov	 eax, DWORD PTR _CurrentTime$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00081	3b 73 24	 cmp	 esi, DWORD PTR [ebx+36]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 492  : 	while (itor != m_ResourceDeletingMap.end())

  00084	75 a0		 jne	 SHORT $LL2@Update
$LN126@Update:
  00086	5f		 pop	 edi
$LN122@Update:

; 509  : 		else
; 510  : 			++itor;
; 511  : 	}
; 512  : 
; 513  : 	ProcessBackgroundLoading();

  00087	8b cb		 mov	 ecx, ebx
  00089	e8 00 00 00 00	 call	 ?ProcessBackgroundLoading@CResourceManager@@QAEXXZ ; CResourceManager::ProcessBackgroundLoading
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx

; 514  : }

  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?Update@CResourceManager@@QAEXXZ ENDP			; CResourceManager::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?IsFileExist@CResourceManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?IsFileExist@CResourceManager@@QAE_NPBD@Z PROC		; CResourceManager::IsFileExist, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return CEterPackManager::Instance().isExist(c_szFileName);

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton

; 482  : }

  00009	5d		 pop	 ebp

; 481  : 	return CEterPackManager::Instance().isExist(c_szFileName);

  0000a	e9 00 00 00 00	 jmp	 ?isExist@CEterPackManager@@QAE_NPBD@Z ; CEterPackManager::isExist
?IsFileExist@CResourceManager@@QAE_NPBD@Z ENDP		; CResourceManager::IsFileExist
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?DumpFileListToTextFile@CResourceManager@@QAEXPBD@Z
_TEXT	SEGMENT
_data$2 = -48						; size = 12
_dumpVector$ = -36					; size = 12
_ext$1$ = -24						; size = 4
_fp2$1$ = -24						; size = 4
_this$1$ = -20						; size = 4
_pResource$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?DumpFileListToTextFile@CResourceManager@@QAEXPBD@Z PROC ; CResourceManager::DumpFileListToTextFile, COMDAT
; _this$ = ecx

; 416  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DumpFileListToTextFile@CResourceManager@@QAEXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d ec	 mov	 DWORD PTR _this$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _dumpVector$[ebp], 0
  00034	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _dumpVector$[ebp+4], 0
  0003b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dumpVector$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00042	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 417  : 	std::vector<TDumpData> dumpVector;

  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0004c	8b 30		 mov	 esi, DWORD PTR [eax]
  0004e	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 419  : 	for (TResourcePointerMap::iterator i = m_pResMap.begin(); i != m_pResMap.end(); ++i)

  00050	0f 84 33 01 00
	00		 je	 $LN3@DumpFileLi
$LL4@DumpFileLi:

; 420  : 	{
; 421  : 		CResource* pResource = i->second;

  00056	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]

; 422  : 		TDumpData data;
; 423  : 
; 424  : 		if (pResource->IsEmpty())

  00059	8b cb		 mov	 ecx, ebx
  0005b	89 5d f0	 mov	 DWORD PTR _pResource$1$[ebp], ebx
  0005e	e8 00 00 00 00	 call	 ?IsEmpty@CResource@@QBE_NXZ ; CResource::IsEmpty
  00063	84 c0		 test	 al, al
  00065	0f 85 d9 00 00
	00		 jne	 $LN2@DumpFileLi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0006b	83 7b 20 0f	 cmp	 DWORD PTR [ebx+32], 15	; 0000000fH

; 2328 :         return _Mypair._Myval2._Myptr();

  0006f	8d 7b 0c	 lea	 edi, DWORD PTR [ebx+12]

; 426  :         if (_Large_mode_engaged()) {

  00072	76 02		 jbe	 SHORT $LN93@DumpFileLi

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00074	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN93@DumpFileLi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 431  : 		const char * ext = strrchr(data.filename, '.');

  00076	6a 2e		 push	 46			; 0000002eH
  00078	57		 push	 edi
  00079	89 7d d0	 mov	 DWORD PTR _data$2[ebp], edi
  0007c	e8 00 00 00 00	 call	 _strrchr
  00081	83 c4 08	 add	 esp, 8
  00084	89 45 e8	 mov	 DWORD PTR _ext$1$[ebp], eax

; 432  : 
; 433  : 		if (pResource->IsType(CGraphicImage::Type()) && strnicmp(ext, ".sub", 4))

  00087	e8 00 00 00 00	 call	 ?Type@CGraphicImage@@SAKXZ ; CGraphicImage::Type
  0008c	50		 push	 eax
  0008d	8b cb		 mov	 ecx, ebx
  0008f	e8 00 00 00 00	 call	 ?IsType@CResource@@QAE_NK@Z ; CResource::IsType
  00094	84 c0		 test	 al, al
  00096	74 2f		 je	 SHORT $LN6@DumpFileLi
  00098	6a 04		 push	 4
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_04DLFHDFGL@?4sub@
  0009f	ff 75 e8	 push	 DWORD PTR _ext$1$[ebp]
  000a2	e8 00 00 00 00	 call	 __strnicmp
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000aa	85 c0		 test	 eax, eax
  000ac	74 19		 je	 SHORT $LN6@DumpFileLi

; 434  : 			filesize = ((CGraphicImage*) pResource)->GetWidth() * ((CGraphicImage*) pResource)->GetHeight() * 4;

  000ae	8b cb		 mov	 ecx, ebx
  000b0	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImage@@QBEHXZ ; CGraphicImage::GetWidth
  000b5	8b 4d f0	 mov	 ecx, DWORD PTR _pResource$1$[ebp]
  000b8	8b d8		 mov	 ebx, eax
  000ba	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImage@@QBEHXZ ; CGraphicImage::GetHeight
  000bf	0f af d8	 imul	 ebx, eax
  000c2	c1 e3 02	 shl	 ebx, 2
  000c5	eb 38		 jmp	 SHORT $LN9@DumpFileLi
$LN6@DumpFileLi:

; 435  : 		else
; 436  : 		{
; 437  : 			FILE * fp2 = fopen(data.filename, "rb");

  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  000cc	57		 push	 edi
  000cd	e8 00 00 00 00	 call	 _fopen
  000d2	8b d8		 mov	 ebx, eax
  000d4	83 c4 08	 add	 esp, 8
  000d7	89 5d e8	 mov	 DWORD PTR _fp2$1$[ebp], ebx

; 438  : 
; 439  : 			if (fp2)

  000da	85 db		 test	 ebx, ebx
  000dc	74 1f		 je	 SHORT $LN8@DumpFileLi

; 440  : 			{
; 441  : 				fseek(fp2, 0L, SEEK_END);

  000de	6a 02		 push	 2
  000e0	6a 00		 push	 0
  000e2	53		 push	 ebx
  000e3	e8 00 00 00 00	 call	 _fseek

; 442  : 				filesize = ftell(fp2);

  000e8	53		 push	 ebx
  000e9	e8 00 00 00 00	 call	 _ftell

; 443  : 				fclose(fp2);

  000ee	ff 75 e8	 push	 DWORD PTR _fp2$1$[ebp]
  000f1	8b d8		 mov	 ebx, eax
  000f3	e8 00 00 00 00	 call	 _fclose
  000f8	83 c4 14	 add	 esp, 20			; 00000014H

; 444  : 			}

  000fb	eb 02		 jmp	 SHORT $LN9@DumpFileLi
$LN8@DumpFileLi:

; 445  : 			else
; 446  : 				filesize = 0;

  000fd	33 db		 xor	 ebx, ebx
$LN9@DumpFileLi:

; 450  : 		data.cost = pResource->GetLoadCostMilliSecond();

  000ff	8b 45 f0	 mov	 eax, DWORD PTR _pResource$1$[ebp]
  00102	66 0f 6e c3	 movd	 xmm0, ebx
  00106	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00109	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0010c	8b 45 e0	 mov	 eax, DWORD PTR _dumpVector$[ebp+4]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 450  : 		data.cost = pResource->GetLoadCostMilliSecond();

  0010f	89 4d d8	 mov	 DWORD PTR _data$2[ebp+8], ecx
  00112	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a800000
  0011a	f3 0f 11 45 d4	 movss	 DWORD PTR _data$2[ebp+4], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0011f	3b 45 e4	 cmp	 eax, DWORD PTR _dumpVector$[ebp+8]
  00122	74 10		 je	 SHORT $LN102@DumpFileLi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 506  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00124	89 38		 mov	 DWORD PTR [eax], edi
  00126	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  0012b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  0012e	83 45 e0 0c	 add	 DWORD PTR _dumpVector$[ebp+4], 12 ; 0000000cH

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00132	eb 0d		 jmp	 SHORT $LN248@DumpFileLi
$LN102@DumpFileLi:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00134	8d 4d d0	 lea	 ecx, DWORD PTR _data$2[ebp]
  00137	51		 push	 ecx
  00138	50		 push	 eax
  00139	8d 4d dc	 lea	 ecx, DWORD PTR _dumpVector$[ebp]
  0013c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSDumpData@@@?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@AAEPAUSDumpData@@QAU2@ABU2@@Z ; std::vector<SDumpData,std::allocator<SDumpData> >::_Emplace_reallocate<SDumpData const &>
$LN248@DumpFileLi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00141	8b 7d ec	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN2@DumpFileLi:
  00144	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00147	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0014b	74 1d		 je	 SHORT $LN40@DumpFileLi

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0014d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00150	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00154	75 10		 jne	 SHORT $LN245@DumpFileLi
$LL38@DumpFileLi:
  00156	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00159	75 0b		 jne	 SHORT $LN245@DumpFileLi

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0015b	8b f0		 mov	 esi, eax
  0015d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00160	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00164	74 f0		 je	 SHORT $LL38@DumpFileLi
$LN245@DumpFileLi:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  00166	8b f0		 mov	 esi, eax

; 57   :         } else {

  00168	eb 16		 jmp	 SHORT $LN46@DumpFileLi
$LN40@DumpFileLi:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  0016a	8b f0		 mov	 esi, eax

; 466  :         while (!_Pnode->_Left->_Isnil) {

  0016c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0016e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00172	75 0c		 jne	 SHORT $LN46@DumpFileLi
$LL45@DumpFileLi:
  00174	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00176	8b f1		 mov	 esi, ecx
  00178	8b c8		 mov	 ecx, eax
  0017a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0017e	74 f4		 je	 SHORT $LL45@DumpFileLi
$LN46@DumpFileLi:

; 232  :         return this->_Ptr == _Right._Ptr;

  00180	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 419  : 	for (TResourcePointerMap::iterator i = m_pResMap.begin(); i != m_pResMap.end(); ++i)

  00183	0f 85 cd fe ff
	ff		 jne	 $LL4@DumpFileLi
$LN3@DumpFileLi:

; 451  : 
; 452  : 		dumpVector.push_back(data);
; 453  : 	}
; 454  : 
; 455  : 	FILE * fp = fopen(c_szFileName, "w");

  00189	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  0018e	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00191	e8 00 00 00 00	 call	 _fopen
  00196	8b d8		 mov	 ebx, eax
  00198	83 c4 08	 add	 esp, 8

; 456  : 
; 457  : 	if (fp)

  0019b	85 db		 test	 ebx, ebx
  0019d	0f 84 1a 01 00
	00		 je	 $LN10@DumpFileLi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8373 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  001a3	8b 7d e0	 mov	 edi, DWORD PTR _dumpVector$[ebp+4]
  001a6	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001ab	8b 75 dc	 mov	 esi, DWORD PTR _dumpVector$[ebp]
  001ae	8b cf		 mov	 ecx, edi
  001b0	2b ce		 sub	 ecx, esi
  001b2	f7 e9		 imul	 ecx
  001b4	68 00 00 00 00	 push	 OFFSET ?DumpKBCompare@@YA_NABUSDumpData@@0@Z ; DumpKBCompare
  001b9	d1 fa		 sar	 edx, 1
  001bb	8b c2		 mov	 eax, edx
  001bd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001c0	03 c2		 add	 eax, edx
  001c2	50		 push	 eax
  001c3	57		 push	 edi
  001c4	56		 push	 esi
  001c5	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@0HP6A_NABU1@1@Z@Z ; std::_Sort_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>

; 369  :     auto _UFirst      = _STD _Get_unwrapped(_First);

  001ca	8b 7d e0	 mov	 edi, DWORD PTR _dumpVector$[ebp+4]

; 8373 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  001cd	83 c4 10	 add	 esp, 16			; 00000010H

; 369  :     auto _UFirst      = _STD _Get_unwrapped(_First);

  001d0	8b 75 dc	 mov	 esi, DWORD PTR _dumpVector$[ebp]
  001d3	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 463  : 		DumpPrint.m_totalKB = 0;

  001d6	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR ?m_totalKB@FDumpPrint@@2MA, xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 369  :     auto _UFirst      = _STD _Get_unwrapped(_First);

  001de	3b f7		 cmp	 esi, edi

; 371  :     for (; _UFirst != _ULast; ++_UFirst) {

  001e0	74 40		 je	 SHORT $LN149@DumpFileLi
$LL150@DumpFileLi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 398  : 		m_totalKB += data.KB;

  001e2	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  001e7	f3 0f 58 c1	 addss	 xmm0, xmm1
  001eb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?m_totalKB@FDumpPrint@@2MA, xmm0

; 399  : 		fprintf(m_fp, "%6.1f %s\n", data.KB, data.filename);

  001f3	ff 36		 push	 DWORD PTR [esi]
  001f5	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  001fa	0f 5a c0	 cvtps2pd xmm0, xmm0
  001fd	83 ec 08	 sub	 esp, 8
  00200	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00205	68 00 00 00 00	 push	 OFFSET ??_C@_09COBKJKAL@?$CF6?41f?5?$CFs?6@
  0020a	53		 push	 ebx
  0020b	e8 00 00 00 00	 call	 _fprintf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 371  :     for (; _UFirst != _ULast; ++_UFirst) {

  00210	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?m_totalKB@FDumpPrint@@2MA
  00218	83 c6 0c	 add	 esi, 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 399  : 		fprintf(m_fp, "%6.1f %s\n", data.KB, data.filename);

  0021b	83 c4 14	 add	 esp, 20			; 00000014H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 371  :     for (; _UFirst != _ULast; ++_UFirst) {

  0021e	3b f7		 cmp	 esi, edi
  00220	75 c0		 jne	 SHORT $LL150@DumpFileLi
$LN149@DumpFileLi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 466  : 		fprintf(fp,	"total: %.2fmb", DumpPrint.m_totalKB / 1024.0f);

  00222	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3a800000
  0022a	83 ec 08	 sub	 esp, 8
  0022d	0f 5a c1	 cvtps2pd xmm0, xmm1
  00230	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00235	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LJOLOKII@total?3?5?$CF?42fmb@
  0023a	53		 push	 ebx
  0023b	e8 00 00 00 00	 call	 _fprintf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8373 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  00240	8b 7d e0	 mov	 edi, DWORD PTR _dumpVector$[ebp+4]
  00243	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00248	8b 75 dc	 mov	 esi, DWORD PTR _dumpVector$[ebp]
  0024b	8b cf		 mov	 ecx, edi
  0024d	2b ce		 sub	 ecx, esi
  0024f	f7 e9		 imul	 ecx
  00251	68 00 00 00 00	 push	 OFFSET ?DumpCostCompare@@YA_NABUSDumpData@@0@Z ; DumpCostCompare
  00256	d1 fa		 sar	 edx, 1
  00258	8b c2		 mov	 eax, edx
  0025a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0025d	03 c2		 add	 eax, edx
  0025f	50		 push	 eax
  00260	57		 push	 edi
  00261	56		 push	 esi
  00262	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAUSDumpData@@P6A_NABU1@0@Z@std@@YAXPAUSDumpData@@0HP6A_NABU1@1@Z@Z ; std::_Sort_unchecked<SDumpData *,bool (__cdecl*)(SDumpData const &,SDumpData const &)>

; 369  :     auto _UFirst      = _STD _Get_unwrapped(_First);

  00267	8b 7d e0	 mov	 edi, DWORD PTR _dumpVector$[ebp+4]

; 8373 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  0026a	83 c4 20	 add	 esp, 32			; 00000020H

; 369  :     auto _UFirst      = _STD _Get_unwrapped(_First);

  0026d	8b 75 dc	 mov	 esi, DWORD PTR _dumpVector$[ebp]
  00270	3b f7		 cmp	 esi, edi

; 371  :     for (; _UFirst != _ULast; ++_UFirst) {

  00272	74 1a		 je	 SHORT $LN194@DumpFileLi
$LL195@DumpFileLi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 411  : 		fprintf(m_fp, "%-4d %s\n", data.cost, data.filename);

  00274	ff 36		 push	 DWORD PTR [esi]
  00276	ff 76 08	 push	 DWORD PTR [esi+8]
  00279	68 00 00 00 00	 push	 OFFSET ??_C@_08IGNPNJLM@?$CF?94d?5?$CFs?6@
  0027e	53		 push	 ebx
  0027f	e8 00 00 00 00	 call	 _fprintf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 371  :     for (; _UFirst != _ULast; ++_UFirst) {

  00284	83 c6 0c	 add	 esi, 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 411  : 		fprintf(m_fp, "%-4d %s\n", data.cost, data.filename);

  00287	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 371  :     for (; _UFirst != _ULast; ++_UFirst) {

  0028a	3b f7		 cmp	 esi, edi
  0028c	75 e6		 jne	 SHORT $LL195@DumpFileLi
$LN194@DumpFileLi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 473  : 		fprintf(fp,	"total: %.2fmb", DumpPrint.m_totalKB / 1024.0f);

  0028e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?m_totalKB@FDumpPrint@@2MA
  00296	83 ec 08	 sub	 esp, 8
  00299	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a800000
  002a1	0f 5a c0	 cvtps2pd xmm0, xmm0
  002a4	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LJOLOKII@total?3?5?$CF?42fmb@
  002ae	53		 push	 ebx
  002af	e8 00 00 00 00	 call	 _fprintf

; 474  : 
; 475  : 		fclose(fp);

  002b4	53		 push	 ebx
  002b5	e8 00 00 00 00	 call	 _fclose
  002ba	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@DumpFileLi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  002bd	8b 75 dc	 mov	 esi, DWORD PTR _dumpVector$[ebp]
  002c0	85 f6		 test	 esi, esi
  002c2	74 3f		 je	 SHORT $LN62@DumpFileLi

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  002c4	8b 4d e4	 mov	 ecx, DWORD PTR _dumpVector$[ebp+8]
  002c7	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002cc	2b ce		 sub	 ecx, esi
  002ce	f7 e9		 imul	 ecx
  002d0	d1 fa		 sar	 edx, 1
  002d2	8b c2		 mov	 eax, edx
  002d4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002d7	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002d9	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  002dc	8b c6		 mov	 eax, esi
  002de	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  002e1	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002e7	72 10		 jb	 SHORT $LN81@DumpFileLi

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002e9	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  002ec	83 c1 23	 add	 ecx, 35			; 00000023H
  002ef	2b c6		 sub	 eax, esi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002f1	83 c0 fc	 add	 eax, -4			; fffffffcH
  002f4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002f7	77 1e		 ja	 SHORT $LN250@DumpFileLi
$LN81@DumpFileLi:

; 289  :         ::operator delete(_Ptr, _Bytes);

  002f9	51		 push	 ecx
  002fa	56		 push	 esi
  002fb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00300	83 c4 08	 add	 esp, 8
$LN62@DumpFileLi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 477  : }

  00303	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00306	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0030d	59		 pop	 ecx
  0030e	5f		 pop	 edi
  0030f	5e		 pop	 esi
  00310	5b		 pop	 ebx
  00311	8b e5		 mov	 esp, ebp
  00313	5d		 pop	 ebp
  00314	c2 04 00	 ret	 4
$LN250@DumpFileLi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00317	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN247@DumpFileLi:
  0031c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DumpFileListToTextFile@CResourceManager@@QAEXPBD@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _dumpVector$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@USDumpData@@V?$allocator@USDumpData@@@std@@@std@@QAE@XZ ; std::vector<SDumpData,std::allocator<SDumpData> >::~vector<SDumpData,std::allocator<SDumpData> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?DumpFileListToTextFile@CResourceManager@@QAEXPBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DumpFileListToTextFile@CResourceManager@@QAEXPBD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DumpFileListToTextFile@CResourceManager@@QAEXPBD@Z ENDP ; CResourceManager::DumpFileListToTextFile
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?RegisterResourceNewFunctionByTypePointer@CResourceManager@@QAEXHP6APAVCResource@@PBD@Z@Z
_TEXT	SEGMENT
__Loc$2 = -32						; size = 12
$T3 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_iType$ = 8						; size = 4
_pNewFunc$ = 12						; size = 4
?RegisterResourceNewFunctionByTypePointer@CResourceManager@@QAEXHP6APAVCResource@@PBD@Z@Z PROC ; CResourceManager::RegisterResourceNewFunctionByTypePointer, COMDAT
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterResourceNewFunctionByTypePointer@CResourceManager@@QAEXHP6APAVCResource@@PBD@Z@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 197  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00027	8d 45 08	 lea	 eax, DWORD PTR _iType$[ebp]
  0002a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 193  : 	m_pResNewFuncByTypeMap[iType] = pNewFunc;

  0002b	8d 79 1c	 lea	 edi, DWORD PTR [ecx+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 197  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  0002e	8d 45 e0	 lea	 eax, DWORD PTR __Loc$2[ebp]
  00031	8b cf		 mov	 ecx, edi
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@ABH@Z ; std::_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >::_Find_lower_bound<int>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00039	8b 55 e8	 mov	 edx, DWORD PTR __Loc$2[ebp+8]
  0003c	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00040	75 08		 jne	 SHORT $LN6@RegisterRe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00042	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  00045	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00048	7d 53		 jge	 SHORT $LN5@RegisterRe
$LN6@RegisterRe:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  0004a	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  00051	74 63		 je	 SHORT $LN119@RegisterRe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 205  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00053	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00055	89 7d ec	 mov	 DWORD PTR $T3[ebp], edi

; 136  :         return ::operator new(_Bytes);

  00058	6a 18		 push	 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00061	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00068	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  0006d	8b d0		 mov	 edx, eax

; 136  :         return ::operator new(_Bytes);

  0006f	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 478  :         : first(_STD _Tuple_get<_Indices1>(_STD move(_Val1))...),

  00072	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00075	8b cf		 mov	 ecx, edi
  00077	52		 push	 edx
  00078	ff 75 e4	 push	 DWORD PTR __Loc$2[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 478  :         : first(_STD _Tuple_get<_Indices1>(_STD move(_Val1))...),

  0007b	89 42 10	 mov	 DWORD PTR [edx+16], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0007e	ff 75 e0	 push	 DWORD PTR __Loc$2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 479  :           second(_STD _Tuple_get<_Indices2>(_STD move(_Val2))...) {}

  00081	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00088	89 32		 mov	 DWORD PTR [edx], esi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0008a	89 72 04	 mov	 DWORD PTR [edx+4], esi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0008d	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 824  :         this->_Ptr->_Color = _Red;

  00090	66 c7 42 0c 00
	00		 mov	 WORD PTR [edx+12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00096	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,CResource * (__cdecl*)(char const *)> > >::_Insert_node
  0009b	8b d0		 mov	 edx, eax
$LN5@RegisterRe:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 193  : 	m_pResNewFuncByTypeMap[iType] = pNewFunc;

  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR _pNewFunc$[ebp]
  000a0	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 194  : }

  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
$LN119@RegisterRe:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  000b6	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN117@RegisterRe:
  000bb	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterResourceNewFunctionByTypePointer@CResourceManager@@QAEXHP6APAVCResource@@PBD@Z@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,CResource * (__cdecl*)(char const *)>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,CResource * (__cdecl*)(char const *)>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RegisterResourceNewFunctionByTypePointer@CResourceManager@@QAEXHP6APAVCResource@@PBD@Z@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterResourceNewFunctionByTypePointer@CResourceManager@@QAEXHP6APAVCResource@@PBD@Z@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterResourceNewFunctionByTypePointer@CResourceManager@@QAEXHP6APAVCResource@@PBD@Z@Z ENDP ; CResourceManager::RegisterResourceNewFunctionByTypePointer
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z
_TEXT	SEGMENT
$T2 = -60						; size = 8
__Loc$3 = -52						; size = 12
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileExt$ = 8					; size = 4
_pNewFunc$ = 12						; size = 4
?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z PROC ; CResourceManager::RegisterResourceNewFunctionPointer, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 55 08	 mov	 edx, DWORD PTR _c_szFileExt$[ebp]

; 187  : 	m_pResNewFuncMap[c_szFileExt] = pNewFunc;

  0002d	8d 79 14	 lea	 edi, DWORD PTR [ecx+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00030	8b ca		 mov	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00032	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0
  00039	0f 57 c0	 xorps	 xmm0, xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0003c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00043	0f 11 45 d8	 movups	 XMMWORD PTR $T4[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00047	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL252@RegisterRe:
  00050	8a 01		 mov	 al, BYTE PTR [ecx]
  00052	41		 inc	 ecx
  00053	84 c0		 test	 al, al
  00055	75 f9		 jne	 SHORT $LL252@RegisterRe
  00057	2b ce		 sub	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00059	51		 push	 ecx
  0005a	52		 push	 edx
  0005b	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  0005e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 197  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00063	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 187  : 	m_pResNewFuncMap[c_szFileExt] = pNewFunc;

  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 197  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  0006d	50		 push	 eax
  0006e	8d 45 cc	 lea	 eax, DWORD PTR __Loc$3[ebp]
  00071	8b cf		 mov	 ecx, edi
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00079	8b 75 d4	 mov	 esi, DWORD PTR __Loc$3[ebp+8]
  0007c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00080	75 18		 jne	 SHORT $LN25@RegisterRe
  00082	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00085	50		 push	 eax
  00086	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0008f	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00092	84 c0		 test	 al, al
  00094	0f 84 85 00 00
	00		 je	 $LN24@RegisterRe
$LN25@RegisterRe:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  0009a	81 7f 04 5d 74
	d1 05		 cmp	 DWORD PTR [edi+4], 97612893 ; 05d1745dH
  000a1	0f 84 cb 00 00
	00		 je	 $LN256@RegisterRe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 205  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  000a7	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000a9	89 7d c4	 mov	 DWORD PTR $T2[ebp], edi

; 136  :         return ::operator new(_Bytes);

  000ac	6a 2c		 push	 44			; 0000002cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  000ae	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000b2	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  000b9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000be	0f 57 c0	 xorps	 xmm0, xmm0
  000c1	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000c4	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000c6	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000ca	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000d1	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000d8	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000dc	50		 push	 eax
  000dd	ff 75 d0	 push	 DWORD PTR __Loc$3[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000e0	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  000e4	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T4[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000e9	ff 75 cc	 push	 DWORD PTR __Loc$3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ec	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  000f1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  000f8	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  000ff	c6 45 d8 00	 mov	 BYTE PTR $T4[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 479  :           second(_STD _Tuple_get<_Indices2>(_STD move(_Val2))...) {}

  00103	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0010a	89 30		 mov	 DWORD PTR [eax], esi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0010c	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0010f	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 824  :         this->_Ptr->_Color = _Red;

  00112	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00118	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >::_Insert_node
  0011d	8b f0		 mov	 esi, eax
$LN24@RegisterRe:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 187  : 	m_pResNewFuncMap[c_szFileExt] = pNewFunc;

  0011f	8b 4d 0c	 mov	 ecx, DWORD PTR _pNewFunc$[ebp]
  00122	89 4e 28	 mov	 DWORD PTR [esi+40], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00125	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp+20]
  00128	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0012b	76 28		 jbe	 SHORT $LN234@RegisterRe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012d	8b 55 d8	 mov	 edx, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00130	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00131	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00133	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00139	72 10		 jb	 SHORT $LN245@RegisterRe

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0013b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0013e	83 c1 23	 add	 ecx, 35			; 00000023H
  00141	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00143	83 c0 fc	 add	 eax, -4			; fffffffcH
  00146	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00149	77 2c		 ja	 SHORT $LN257@RegisterRe
$LN245@RegisterRe:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0014b	51		 push	 ecx
  0014c	52		 push	 edx
  0014d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00152	83 c4 08	 add	 esp, 8
$LN234@RegisterRe:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 188  : }

  00155	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00158	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015f	59		 pop	 ecx
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00165	33 cd		 xor	 ecx, ebp
  00167	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c2 08 00	 ret	 8
$LN256@RegisterRe:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  00172	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN257@RegisterRe:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN254@RegisterRe:
  0017c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z$5:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterResourceNewFunctionPointer@CResourceManager@@QAEXPBDP6APAVCResource@@0@Z@Z ENDP ; CResourceManager::RegisterResourceNewFunctionPointer
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?isResourcePointerData@CResourceManager@@QAE_NK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwFileCRC$ = 8						; size = 4
?isResourcePointerData@CResourceManager@@QAE_NK@Z PROC	; CResourceManager::isResourcePointerData, COMDAT
; _this$ = ecx

; 340  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwFileCRC$[ebp]
  0000a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 341  : 	TResourcePointerMap::iterator itor = m_pResMap.find(dwFileCRC);

  0000b	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 1b		 jne	 SHORT $LN50@isResource
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwFileCRC$[ebp]
  00025	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 13		 jb	 SHORT $LN50@isResource

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	39 0e		 cmp	 DWORD PTR [esi], ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 343  : 	if (m_pResMap.end() == itor)

  0002c	74 0f		 je	 SHORT $LN50@isResource

; 345  : 
; 346  : 	return (itor->second)->IsData();

  0002e	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00031	e8 00 00 00 00	 call	 ?IsData@CResource@@QBE_NXZ ; CResource::IsData
  00036	5e		 pop	 esi

; 347  : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
$LN50@isResource:

; 344  : 		return NULL;

  0003d	32 c0		 xor	 al, al
  0003f	5e		 pop	 esi

; 347  : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?isResourcePointerData@CResourceManager@@QAE_NK@Z ENDP	; CResourceManager::isResourcePointerData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?GetTypeResourcePointer@CResourceManager@@QAEPAVCResource@@PBDH@Z
_TEXT	SEGMENT
_dwFileCRC$1$ = -36					; size = 4
_c_pszFile$ = -32					; size = 4
_f$1 = -32						; size = 4
$T2 = -28						; size = 24
__Loc$3 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_c_szFileName$ = 8					; size = 4
_iType$ = 12						; size = 4
?GetTypeResourcePointer@CResourceManager@@QAEPAVCResource@@PBDH@Z PROC ; CResourceManager::GetTypeResourcePointer, COMDAT
; _this$ = ecx

; 231  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _c_szFileName$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 232  : 	if (!c_szFileName || !*c_szFileName)

  00016	85 c0		 test	 eax, eax
  00018	0f 84 5f 01 00
	00		 je	 $LN3@GetTypeRes
  0001e	80 38 00	 cmp	 BYTE PTR [eax], 0
  00021	0f 84 56 01 00
	00		 je	 $LN3@GetTypeRes

; 233  : 	{
; 234  : 		assert(c_szFileName != NULL && *c_szFileName != '\0');
; 235  : 		return NULL;
; 236  : 	}
; 237  : 
; 238  : 	const char * c_pszFile;
; 239  : 	DWORD dwFileCRC = __GetFileCRC(c_szFileName, &c_pszFile);

  00027	8d 4d e0	 lea	 ecx, DWORD PTR _c_pszFile$[ebp]
  0002a	51		 push	 ecx
  0002b	50		 push	 eax
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?__GetFileCRC@CResourceManager@@IAEKPBDPAPBD@Z ; CResourceManager::__GetFileCRC

; 240  : 	CResource * pResource = FindResourcePointer(dwFileCRC);

  00033	50		 push	 eax
  00034	8b ce		 mov	 ecx, esi
  00036	89 45 dc	 mov	 DWORD PTR _dwFileCRC$1$[ebp], eax
  00039	e8 00 00 00 00	 call	 ?FindResourcePointer@CResourceManager@@QAEPAVCResource@@K@Z ; CResourceManager::FindResourcePointer

; 241  : 
; 242  : 	if (pResource)

  0003e	85 c0		 test	 eax, eax
  00040	0f 85 03 01 00
	00		 jne	 $LN1@GetTypeRes

; 243  : 		return pResource;
; 244  : 
; 245  : 	CResource *	(*newFunc) (const char *) = NULL;
; 246  : 
; 247  : 	if (iType != -1)

  00046	53		 push	 ebx
  00047	8b 5d e0	 mov	 ebx, DWORD PTR _c_pszFile$[ebp]
  0004a	57		 push	 edi
  0004b	8b 7d 0c	 mov	 edi, DWORD PTR _iType$[ebp]
  0004e	83 ff ff	 cmp	 edi, -1
  00051	74 37		 je	 SHORT $LN5@GetTypeRes
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00053	8d 4d 0c	 lea	 ecx, DWORD PTR _iType$[ebp]
  00056	51		 push	 ecx
  00057	8d 4d f0	 lea	 ecx, DWORD PTR __Loc$3[ebp]
  0005a	51		 push	 ecx
  0005b	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0005e	e8 00 00 00 00	 call	 ??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@PAX@std@@@1@ABH@Z ; std::_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >::_Find_lower_bound<int>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00063	8b 45 f8	 mov	 eax, DWORD PTR __Loc$3[ebp+8]
  00066	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0006a	0f 85 ea 00 00
	00		 jne	 $LN145@GetTypeRes
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00070	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00073	0f 8c e1 00 00
	00		 jl	 $LN145@GetTypeRes

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00079	39 46 1c	 cmp	 DWORD PTR [esi+28], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 251  : 		if (m_pResNewFuncByTypeMap.end() != f)

  0007c	0f 84 d8 00 00
	00		 je	 $LN145@GetTypeRes

; 252  : 			newFunc = f->second;

  00082	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 253  : 	}

  00085	e9 a8 00 00 00	 jmp	 $LN9@GetTypeRes
$LN5@GetTypeRes:

; 254  : 	else
; 255  : 	{
; 256  : 		const char * pcFileExt = strrchr(c_pszFile, '.');

  0008a	6a 2e		 push	 46			; 0000002eH
  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 _strrchr
  00092	83 c4 08	 add	 esp, 8

; 257  : 
; 258  : 		if (pcFileExt)

  00095	85 c0		 test	 eax, eax
  00097	0f 84 bd 00 00
	00		 je	 $LN145@GetTypeRes

; 261  : 			strncpy(s_szFileExt, pcFileExt + 1, 8);

  0009d	6a 08		 push	 8
  0009f	40		 inc	 eax
  000a0	50		 push	 eax
  000a1	68 00 00 00 00	 push	 OFFSET ?s_szFileExt@?BB@??GetTypeResourcePointer@CResourceManager@@QAEPAVCResource@@PBDH@Z@4PADA
  000a6	e8 00 00 00 00	 call	 _strncpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  000ab	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_szFileExt@?BB@??GetTypeResourcePointer@CResourceManager@@QAEPAVCResource@@PBDH@Z@4PADA
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000b0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0
  000b7	0f 57 c0	 xorps	 xmm0, xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000ba	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 261  : 			strncpy(s_szFileExt, pcFileExt + 1, 8);

  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000c4	0f 11 45 e4	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  000c8	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  000cb	0f 1f 44 00 00	 npad	 5
$LL146@GetTypeRes:
  000d0	8a 01		 mov	 al, BYTE PTR [ecx]
  000d2	41		 inc	 ecx
  000d3	84 c0		 test	 al, al
  000d5	75 f9		 jne	 SHORT $LL146@GetTypeRes
  000d7	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000d9	51		 push	 ecx
  000da	68 00 00 00 00	 push	 OFFSET ?s_szFileExt@?BB@??GetTypeResourcePointer@CResourceManager@@QAEPAVCResource@@PBDH@Z@4PADA
  000df	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  000e2	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 263  : 			TResourceNewFunctionPointerMap::iterator f = m_pResNewFuncMap.find(s_szFileExt);

  000e7	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  000ea	50		 push	 eax
  000eb	8d 45 e0	 lea	 eax, DWORD PTR _f$1[ebp]
  000ee	50		 push	 eax
  000ef	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  000f2	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> >,0> >::find
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000f7	8b 4d f8	 mov	 ecx, DWORD PTR $T2[ebp+20]
  000fa	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000fd	76 28		 jbe	 SHORT $LN99@GetTypeRes
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ff	8b 55 e4	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00102	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00103	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00105	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0010b	72 10		 jb	 SHORT $LN110@GetTypeRes

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00110	83 c1 23	 add	 ecx, 35			; 00000023H
  00113	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00115	83 c0 fc	 add	 eax, -4			; fffffffcH
  00118	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011b	77 73		 ja	 SHORT $LN165@GetTypeRes
$LN110@GetTypeRes:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0011d	51		 push	 ecx
  0011e	52		 push	 edx
  0011f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00124	83 c4 08	 add	 esp, 8
$LN99@GetTypeRes:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00127	8b 45 e0	 mov	 eax, DWORD PTR _f$1[ebp]
  0012a	39 46 14	 cmp	 DWORD PTR [esi+20], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 265  : 			if (m_pResNewFuncMap.end() != f)

  0012d	74 2b		 je	 SHORT $LN145@GetTypeRes

; 266  : 				newFunc = f->second;

  0012f	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
$LN9@GetTypeRes:

; 267  : 		}
; 268  : 	}
; 269  : 
; 270  : 	if (!newFunc)

  00132	85 c0		 test	 eax, eax
  00134	74 24		 je	 SHORT $LN145@GetTypeRes

; 274  : 	}
; 275  : 
; 276  : 	pResource = InsertResourcePointer(dwFileCRC, newFunc(c_pszFile));

  00136	53		 push	 ebx
  00137	ff d0		 call	 eax
  00139	83 c4 04	 add	 esp, 4
  0013c	8b ce		 mov	 ecx, esi
  0013e	50		 push	 eax
  0013f	ff 75 dc	 push	 DWORD PTR _dwFileCRC$1$[ebp]
  00142	e8 00 00 00 00	 call	 ?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z ; CResourceManager::InsertResourcePointer
  00147	5f		 pop	 edi
  00148	5b		 pop	 ebx
$LN1@GetTypeRes:
  00149	5e		 pop	 esi

; 278  : }

  0014a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014d	33 cd		 xor	 ecx, ebp
  0014f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c2 08 00	 ret	 8
$LN145@GetTypeRes:

; 271  : 	{
; 272  : 		TraceError("ResourceManager::GetResourcePointer: NOT SUPPORT FILE %s", c_pszFile);

  0015a	53		 push	 ebx
  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@NILLFGHO@ResourceManager?3?3GetResourcePoi@
  00160	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00165	83 c4 08	 add	 esp, 8

; 273  : 		return NULL;

  00168	33 c0		 xor	 eax, eax
  0016a	5f		 pop	 edi
  0016b	5b		 pop	 ebx
  0016c	5e		 pop	 esi

; 278  : }

  0016d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00170	33 cd		 xor	 ecx, ebp
  00172	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c2 08 00	 ret	 8
$LN3@GetTypeRes:
  0017d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00180	33 c0		 xor	 eax, eax
  00182	33 cd		 xor	 ecx, ebp
  00184	5e		 pop	 esi
  00185	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018a	8b e5		 mov	 esp, ebp
  0018c	5d		 pop	 ebp
  0018d	c2 08 00	 ret	 8
$LN165@GetTypeRes:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00190	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN163@GetTypeRes:
  00195	cc		 int	 3
?GetTypeResourcePointer@CResourceManager@@QAEPAVCResource@@PBDH@Z ENDP ; CResourceManager::GetTypeResourcePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z
_TEXT	SEGMENT
_dwFileCRC$1$ = -36					; size = 4
_c_pszFile$ = -32					; size = 4
_f$1 = -32						; size = 4
$T2 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_c_szFileName$ = 8					; size = 4
?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z PROC ; CResourceManager::GetResourcePointer, COMDAT
; _this$ = ecx

; 281  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _c_szFileName$[ebp]
  00013	57		 push	 edi
  00014	8b f9		 mov	 edi, ecx

; 282  : 	if (!c_szFileName || !*c_szFileName)

  00016	85 c0		 test	 eax, eax
  00018	0f 84 23 01 00
	00		 je	 $LN3@GetResourc
  0001e	80 38 00	 cmp	 BYTE PTR [eax], 0
  00021	0f 84 1a 01 00
	00		 je	 $LN3@GetResourc

; 285  : 		return NULL;
; 286  : 	}
; 287  : 
; 288  : 	const char * c_pszFile;
; 289  : 	DWORD dwFileCRC = __GetFileCRC(c_szFileName, &c_pszFile);

  00027	8d 4d e0	 lea	 ecx, DWORD PTR _c_pszFile$[ebp]
  0002a	51		 push	 ecx
  0002b	50		 push	 eax
  0002c	8b cf		 mov	 ecx, edi
  0002e	e8 00 00 00 00	 call	 ?__GetFileCRC@CResourceManager@@IAEKPBDPAPBD@Z ; CResourceManager::__GetFileCRC

; 290  : 	CResource * pResource = FindResourcePointer(dwFileCRC);

  00033	50		 push	 eax
  00034	8b cf		 mov	 ecx, edi
  00036	89 45 dc	 mov	 DWORD PTR _dwFileCRC$1$[ebp], eax
  00039	e8 00 00 00 00	 call	 ?FindResourcePointer@CResourceManager@@QAEPAVCResource@@K@Z ; CResourceManager::FindResourcePointer

; 291  : 
; 292  : 	if (pResource)

  0003e	85 c0		 test	 eax, eax
  00040	0f 85 c7 00 00
	00		 jne	 $LN1@GetResourc

; 293  : 		return pResource;
; 294  : 
; 295  : 	const char * pcFileExt = strrchr(c_pszFile, '.');

  00046	53		 push	 ebx
  00047	56		 push	 esi
  00048	8b 75 e0	 mov	 esi, DWORD PTR _c_pszFile$[ebp]
  0004b	6a 2e		 push	 46			; 0000002eH
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 _strrchr
  00053	83 c4 08	 add	 esp, 8

; 296  : 
; 297  : #ifdef _DEBUG
; 298  : 	if (!IsFileExist(c_szFileName) )
; 299  : 	{
; 300  : 		if( pcFileExt == NULL || (stricmp( pcFileExt, ".fnt" ) != 0) ) {
; 301  : 			TraceError("CResourceManager::GetResourcePointer: File not exist %s", c_szFileName);
; 302  : 		}
; 303  : 	}
; 304  : #endif
; 305  : 
; 306  : 	CResource *	(*newFunc) (const char *) = NULL;
; 307  : 
; 308  : 	if (pcFileExt)

  00056	85 c0		 test	 eax, eax
  00058	0f 84 c0 00 00
	00		 je	 $LN93@GetResourc

; 311  : 		strncpy(s_szFileExt, pcFileExt + 1, 8);

  0005e	6a 08		 push	 8
  00060	40		 inc	 eax
  00061	50		 push	 eax
  00062	68 00 00 00 00	 push	 OFFSET ?s_szFileExt@?9??GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z@4PADA
  00067	e8 00 00 00 00	 call	 _strncpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0006c	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_szFileExt@?9??GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z@4PADA
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00071	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0
  00078	0f 57 c0	 xorps	 xmm0, xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0007b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 311  : 		strncpy(s_szFileExt, pcFileExt + 1, 8);

  00082	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00085	0f 11 45 e4	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00089	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0008c	0f 1f 40 00	 npad	 4
$LL94@GetResourc:
  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL94@GetResourc
  00097	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00099	51		 push	 ecx
  0009a	68 00 00 00 00	 push	 OFFSET ?s_szFileExt@?9??GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z@4PADA
  0009f	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  000a2	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 313  : 		TResourceNewFunctionPointerMap::iterator f = m_pResNewFuncMap.find(s_szFileExt);

  000a7	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  000aa	50		 push	 eax
  000ab	8d 45 e0	 lea	 eax, DWORD PTR _f$1[ebp]
  000ae	50		 push	 eax
  000af	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  000b2	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CResource * (__cdecl*)(char const *),std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> >,0> >::find
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000b7	8b 4d f8	 mov	 ecx, DWORD PTR $T2[ebp+20]
  000ba	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000bd	76 2c		 jbe	 SHORT $LN48@GetResourc
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bf	8b 55 e4	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000c2	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c3	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000c5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000cb	72 14		 jb	 SHORT $LN59@GetResourc

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000cd	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000d0	83 c1 23	 add	 ecx, 35			; 00000023H
  000d3	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d5	83 c0 fc	 add	 eax, -4			; fffffffcH
  000d8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000db	0f 87 80 00 00
	00		 ja	 $LN109@GetResourc
$LN59@GetResourc:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000e1	51		 push	 ecx
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e8	83 c4 08	 add	 esp, 8
$LN48@GetResourc:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000eb	8b 45 e0	 mov	 eax, DWORD PTR _f$1[ebp]
  000ee	39 47 14	 cmp	 DWORD PTR [edi+20], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 315  : 		if (m_pResNewFuncMap.end() != f)

  000f1	74 2b		 je	 SHORT $LN93@GetResourc

; 316  : 			newFunc = f->second;

  000f3	8b 40 28	 mov	 eax, DWORD PTR [eax+40]

; 317  : 	}
; 318  : 
; 319  : 	if (!newFunc)

  000f6	85 c0		 test	 eax, eax
  000f8	74 24		 je	 SHORT $LN93@GetResourc

; 323  : 	}
; 324  : 
; 325  : 	pResource = InsertResourcePointer(dwFileCRC, newFunc(c_pszFile));

  000fa	56		 push	 esi
  000fb	ff d0		 call	 eax
  000fd	83 c4 04	 add	 esp, 4
  00100	8b cf		 mov	 ecx, edi
  00102	50		 push	 eax
  00103	ff 75 dc	 push	 DWORD PTR _dwFileCRC$1$[ebp]
  00106	e8 00 00 00 00	 call	 ?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z ; CResourceManager::InsertResourcePointer
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
$LN1@GetResourc:
  0010d	5f		 pop	 edi

; 327  : }

  0010e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00111	33 cd		 xor	 ecx, ebp
  00113	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c2 04 00	 ret	 4
$LN93@GetResourc:

; 320  : 	{
; 321  : 		TraceError("ResourceManager::GetResourcePointer: NOT SUPPORT FILE %s", c_pszFile);

  0011e	56		 push	 esi
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@NILLFGHO@ResourceManager?3?3GetResourcePoi@
  00124	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00129	83 c4 08	 add	 esp, 8

; 322  : 		return NULL;

  0012c	33 c0		 xor	 eax, eax
  0012e	5e		 pop	 esi
  0012f	5b		 pop	 ebx
  00130	5f		 pop	 edi

; 327  : }

  00131	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00134	33 cd		 xor	 ecx, ebp
  00136	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c2 04 00	 ret	 4
$LN3@GetResourc:

; 283  : 	{
; 284  : 		TraceError("CResourceManager::GetResourcePointer: filename error!");

  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@LGINPHCP@CResourceManager?3?3GetResourcePo@
  00146	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 327  : }

  0014b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014e	83 c4 04	 add	 esp, 4
  00151	33 cd		 xor	 ecx, ebp
  00153	33 c0		 xor	 eax, eax
  00155	5f		 pop	 edi
  00156	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c2 04 00	 ret	 4
$LN109@GetResourc:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00161	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN107@GetResourc:
  00166	cc		 int	 3
?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ENDP ; CResourceManager::GetResourcePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?FindResourcePointer@CResourceManager@@QAEPAVCResource@@K@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwFileCRC$ = 8						; size = 4
?FindResourcePointer@CResourceManager@@QAEPAVCResource@@K@Z PROC ; CResourceManager::FindResourcePointer, COMDAT
; _this$ = ecx

; 330  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwFileCRC$[ebp]
  0000a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 331  : 	TResourcePointerMap::iterator itor = m_pResMap.find(dwFileCRC);

  0000b	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 45 fc	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  0001c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00020	75 16		 jne	 SHORT $LN50@FindResour
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00022	8b 4d 08	 mov	 ecx, DWORD PTR _dwFileCRC$[ebp]
  00025	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 0e		 jb	 SHORT $LN50@FindResour

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	39 06		 cmp	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 333  : 	if (m_pResMap.end() == itor)

  0002c	74 0a		 je	 SHORT $LN50@FindResour

; 335  : 
; 336  : 	return itor->second;

  0002e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00031	5e		 pop	 esi

; 337  : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN50@FindResour:

; 334  : 		return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	5e		 pop	 esi

; 337  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?FindResourcePointer@CResourceManager@@QAEPAVCResource@@K@Z ENDP ; CResourceManager::FindResourcePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z
_TEXT	SEGMENT
$T2 = -44						; size = 12
__Loc$3 = -32						; size = 12
__Loc$4 = -32						; size = 12
$T5 = -20						; size = 8
$T6 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_dwFileCRC$ = 8						; size = 4
_pResource$ = 12					; size = 4
?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z PROC ; CResourceManager::InsertResourcePointer, COMDAT
; _this$ = ecx

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00028	8d 45 08	 lea	 eax, DWORD PTR _dwFileCRC$[ebp]
  0002b	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 198  : 	TResourcePointerMap::iterator itor = m_pResMap.find(dwFileCRC);

  0002c	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0002f	8d 45 e0	 lea	 eax, DWORD PTR __Loc$3[ebp]
  00032	8b ce		 mov	 ecx, esi
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003a	8b 7d e8	 mov	 edi, DWORD PTR __Loc$3[ebp+8]
  0003d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00041	75 4d		 jne	 SHORT $LN9@InsertReso
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00043	8b 45 08	 mov	 eax, DWORD PTR _dwFileCRC$[ebp]
  00046	3b 47 10	 cmp	 eax, DWORD PTR [edi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00049	72 45		 jb	 SHORT $LN9@InsertReso

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0004b	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0004d	3b df		 cmp	 ebx, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 200  : 	if (m_pResMap.end() != itor)

  0004f	74 41		 je	 SHORT $LN2@InsertReso
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  00051	8b 75 0c	 mov	 esi, DWORD PTR _pResource$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  00054	83 7e 20 0f	 cmp	 DWORD PTR [esi+32], 15	; 0000000fH

; 2328 :         return _Mypair._Myval2._Myptr();

  00058	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]

; 426  :         if (_Large_mode_engaged()) {

  0005b	76 02		 jbe	 SHORT $LN51@InsertReso

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0005d	8b 00		 mov	 eax, DWORD PTR [eax]
$LN51@InsertReso:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 202  : 		TraceError("CResource::InsertResourcePointer: %s is already registered\n", pResource->GetFileName());

  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@HFOFINBK@CResource?3?3InsertResourcePointe@
  00065	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0006a	83 c4 08	 add	 esp, 8

; 203  : 		assert(!"CResource::InsertResourcePointer: Resource already resistered");
; 204  : 		delete pResource;

  0006d	85 f6		 test	 esi, esi
  0006f	74 08		 je	 SHORT $LN4@InsertReso
  00071	8b 16		 mov	 edx, DWORD PTR [esi]
  00073	8b ce		 mov	 ecx, esi
  00075	6a 01		 push	 1
  00077	ff 12		 call	 DWORD PTR [edx]
$LN4@InsertReso:

; 205  : 		return itor->second;

  00079	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 210  : }

  0007c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00086	59		 pop	 ecx
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
$LN9@InsertReso:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1379 :         return _Get_scary()->_Myhead;

  00090	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN2@InsertReso:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00092	8b 45 0c	 mov	 eax, DWORD PTR _pResource$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  00095	8b ce		 mov	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00097	8b 7d 08	 mov	 edi, DWORD PTR _dwFileCRC$[ebp]
  0009a	89 45 f0	 mov	 DWORD PTR $T5[ebp+4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  0009d	8d 45 ec	 lea	 eax, DWORD PTR $T5[ebp]
  000a0	50		 push	 eax
  000a1	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000a4	89 7d ec	 mov	 DWORD PTR $T5[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::_Find_lower_bound<unsigned long>
  000ad	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000b1	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b4	66 0f d6 45 e0	 movq	 QWORD PTR __Loc$4[ebp], xmm0

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000b9	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000bd	75 05		 jne	 SHORT $LN77@InsertReso
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  000bf	3b 78 10	 cmp	 edi, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000c2	73 49		 jae	 SHORT $LN158@InsertReso
$LN77@InsertReso:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  000c4	81 7e 04 aa aa
	aa 0a		 cmp	 DWORD PTR [esi+4], 178956970 ; 0aaaaaaaH
  000cb	74 57		 je	 SHORT $LN179@InsertReso
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000cd	89 75 ec	 mov	 DWORD PTR $T6[ebp], esi

; 136  :         return ::operator new(_Bytes);

  000d0	6a 18		 push	 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  000d2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000d9	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  000e0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  000e5	8b 4d 0c	 mov	 ecx, DWORD PTR _pResource$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000e8	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  000eb	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000ee	8b ce		 mov	 ecx, esi
  000f0	50		 push	 eax
  000f1	ff 75 e4	 push	 DWORD PTR __Loc$4[ebp+4]

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  000f4	89 78 10	 mov	 DWORD PTR [eax+16], edi

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000f7	ff 75 e0	 push	 DWORD PTR __Loc$4[ebp]

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000fa	89 18		 mov	 DWORD PTR [eax], ebx

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000fc	89 58 04	 mov	 DWORD PTR [eax+4], ebx

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000ff	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 824  :         this->_Ptr->_Color = _Red;

  00102	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00108	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CResource *> > >::_Insert_node
$LN158@InsertReso:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 209  : 	return pResource;

  0010d	8b 45 0c	 mov	 eax, DWORD PTR _pResource$[ebp]

; 210  : }

  00110	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00113	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011a	59		 pop	 ecx
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	5b		 pop	 ebx
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 08 00	 ret	 8
$LN179@InsertReso:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  00124	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN177@InsertReso:
  00129	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T6[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InsertResourcePointer@CResourceManager@@QAEPAVCResource@@KPAV2@@Z ENDP ; CResourceManager::InsertResourcePointer
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?Destroy@CResourceManager@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CResourceManager@@QAEXXZ PROC			; CResourceManager::Destroy, COMDAT
; _this$ = ecx

; 181  : 	assert(m_ResourceDeletingMap.empty() && "CResourceManager::Destroy - YOU MUST CALL DestroyDeletingList");
; 182  : 	__DestroyResourceMap();

  00000	e9 00 00 00 00	 jmp	 ?__DestroyResourceMap@CResourceManager@@IAEXXZ ; CResourceManager::__DestroyResourceMap
?Destroy@CResourceManager@@QAEXXZ ENDP			; CResourceManager::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?DestroyDeletingList@CResourceManager@@QAEXXZ
_TEXT	SEGMENT
?DestroyDeletingList@CResourceManager@@QAEXXZ PROC	; CResourceManager::DestroyDeletingList, COMDAT
; _this$ = ecx

; 172  : {

  00000	56		 push	 esi

; 173  : 	CResource::SetDeleteImmediately(true);

  00001	6a 01		 push	 1
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?SetDeleteImmediately@CResource@@SAX_N@Z ; CResource::SetDeleteImmediately
  0000a	83 c4 04	 add	 esp, 4

; 174  : 
; 175  : 	__DestroyCacheMap();

  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ?__DestroyCacheMap@CResourceManager@@IAEXXZ ; CResourceManager::__DestroyCacheMap

; 176  : 	__DestroyDeletingResourceMap();

  00014	8b ce		 mov	 ecx, esi
  00016	5e		 pop	 esi
  00017	e9 00 00 00 00	 jmp	 ?__DestroyDeletingResourceMap@CResourceManager@@IAEXXZ ; CResourceManager::__DestroyDeletingResourceMap
?DestroyDeletingList@CResourceManager@@QAEXXZ ENDP	; CResourceManager::DestroyDeletingList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ?LoadStaticCache@CResourceManager@@QAEXPBD@Z
_TEXT	SEGMENT
__Loc$2 = -40						; size = 12
__Loc$3 = -40						; size = 12
$T4 = -28						; size = 12
$T5 = -24						; size = 8
_pkRes$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_dwCacheKey$ = 8					; size = 4
?LoadStaticCache@CResourceManager@@QAEXPBD@Z PROC	; CResourceManager::LoadStaticCache, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadStaticCache@CResourceManager@@QAEXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 31   : 	CResource* pkRes=GetResourcePointer(c_szFileName);

  0002a	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00033	89 45 f0	 mov	 DWORD PTR _pkRes$1$[ebp], eax
  00036	85 c0		 test	 eax, eax

; 32   : 	if (!pkRes)

  00038	75 24		 jne	 SHORT $LN2@LoadStatic

; 33   : 	{
; 34   : 		Lognf(1, "CResourceManager::LoadStaticCache %s - FAILED", c_szFileName);

  0003a	56		 push	 esi
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@DICKOBGD@CResourceManager?3?3LoadStaticCac@
  00040	6a 01		 push	 1
  00042	e8 00 00 00 00	 call	 ?Lognf@@YAXIPBDZZ	; Lognf
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 45   : }

  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN2@LoadStatic:

; 38   : 	DWORD dwCacheKey=GetCRC32(c_szFileName, strlen(c_szFileName));

  0005e	8b ce		 mov	 ecx, esi
  00060	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL157@LoadStatic:
  00063	8a 01		 mov	 al, BYTE PTR [ecx]
  00065	41		 inc	 ecx
  00066	84 c0		 test	 al, al
  00068	75 f9		 jne	 SHORT $LL157@LoadStatic
  0006a	2b ca		 sub	 ecx, edx
  0006c	51		 push	 ecx
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00073	83 c4 08	 add	 esp, 8
  00076	8b d8		 mov	 ebx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00078	8d 45 08	 lea	 eax, DWORD PTR _dwCacheKey$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 38   : 	DWORD dwCacheKey=GetCRC32(c_szFileName, strlen(c_szFileName));

  0007b	89 5d 08	 mov	 DWORD PTR _dwCacheKey$[ebp], ebx

; 39   : 	if (m_pCacheMap.find(dwCacheKey) != m_pCacheMap.end())

  0007e	83 c7 04	 add	 edi, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00081	8b cf		 mov	 ecx, edi
  00083	50		 push	 eax
  00084	8d 45 d8	 lea	 eax, DWORD PTR __Loc$2[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0008d	8b 45 e0	 mov	 eax, DWORD PTR __Loc$2[ebp+8]
  00090	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00094	75 09		 jne	 SHORT $LN156@LoadStatic
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00096	3b 58 10	 cmp	 ebx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00099	72 04		 jb	 SHORT $LN156@LoadStatic

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0009b	3b 07		 cmp	 eax, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 39   : 	if (m_pCacheMap.find(dwCacheKey) != m_pCacheMap.end())

  0009d	75 79		 jne	 SHORT $LN138@LoadStatic
$LN156@LoadStatic:

; 40   : 		return;
; 41   : 
; 42   : 	pkRes->AddReference();

  0009f	8b 4d f0	 mov	 ecx, DWORD PTR _pkRes$1$[ebp]
  000a2	e8 00 00 00 00	 call	 ?AddReference@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReference
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  000a7	8d 45 08	 lea	 eax, DWORD PTR _dwCacheKey$[ebp]
  000aa	8b cf		 mov	 ecx, edi
  000ac	50		 push	 eax
  000ad	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::_Find_lower_bound<unsigned long>
  000b6	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000ba	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000bd	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000c2	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c6	75 05		 jne	 SHORT $LN52@LoadStatic
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  000c8	3b 58 10	 cmp	 ebx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000cb	73 4b		 jae	 SHORT $LN138@LoadStatic
$LN52@LoadStatic:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  000cd	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  000d4	74 56		 je	 SHORT $LN161@LoadStatic

; 1013 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  000d6	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000d8	89 7d e8	 mov	 DWORD PTR $T5[ebp], edi

; 136  :         return ::operator new(_Bytes);

  000db	6a 18		 push	 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  000dd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000e4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  000eb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000f0	8b 4d f0	 mov	 ecx, DWORD PTR _pkRes$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000f3	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000f6	89 48 14	 mov	 DWORD PTR [eax+20], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000f9	8b cf		 mov	 ecx, edi
  000fb	50		 push	 eax
  000fc	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000ff	89 58 10	 mov	 DWORD PTR [eax+16], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00102	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp]

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00105	89 30		 mov	 DWORD PTR [eax], esi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00107	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0010a	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 824  :         this->_Ptr->_Color = _Red;

  0010d	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00113	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCResource@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CResource *> > >::_Insert_node
$LN138@LoadStatic:
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 45   : }

  00118	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00122	59		 pop	 ecx
  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 04 00	 ret	 4
$LN161@LoadStatic:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  0012c	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN159@LoadStatic:
  00131	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadStaticCache@CResourceManager@@QAEXPBD@Z$2:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCResource@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CResource *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?LoadStaticCache@CResourceManager@@QAEXPBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadStaticCache@CResourceManager@@QAEXPBD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadStaticCache@CResourceManager@@QAEXPBD@Z ENDP	; CResourceManager::LoadStaticCache
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ??1CResourceManager@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CResourceManager@@UAE@XZ PROC			; CResourceManager::~CResourceManager, COMDAT
; _this$ = ecx

; 528  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CResourceManager@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx
  00026	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CResourceManager@@6B@

; 529  : 	Destroy();

  0002c	e8 00 00 00 00	 call	 ?Destroy@CResourceManager@@QAEXXZ ; CResourceManager::Destroy

; 531  : }

  00031	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00034	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@JPAVCResource@@U?$less@J@std@@V?$allocator@U?$pair@$$CBJPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<long,CResource *,std::less<long>,std::allocator<std::pair<long const ,CResource *> >,0> >::~_Tree<std::_Tmap_traits<long,CResource *,std::less<long>,std::allocator<std::pair<long const ,CResource *> >,0> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00039	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 531  : }

  0003c	8d 77 34	 lea	 esi, DWORD PTR [edi+52]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  0003f	8b ce		 mov	 ecx, esi
  00041	ff 70 04	 push	 DWORD PTR [eax+4]
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004a	6a 2c		 push	 44			; 0000002cH
  0004c	ff 36		 push	 DWORD PTR [esi]
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00053	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 531  : }

  00056	8d 77 2c	 lea	 esi, DWORD PTR [edi+44]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00059	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  0005c	8b ce		 mov	 ecx, esi
  0005e	ff 70 04	 push	 DWORD PTR [eax+4]
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00067	6a 2c		 push	 44			; 0000002cH
  00069	ff 36		 push	 DWORD PTR [esi]
  0006b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00070	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 531  : }

  00073	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  00076	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<CResource *,unsigned long,std::less<CResource *>,std::allocator<std::pair<CResource * const,unsigned long> >,0> >
  0007b	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  0007e	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >::~_Tree<std::_Tmap_traits<int,CResource * (__cdecl*)(char const *),std::less<int>,std::allocator<std::pair<int const ,CResource * (__cdecl*)(char const *)> >,0> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00083	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 531  : }

  00086	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00089	8b ce		 mov	 ecx, esi
  0008b	ff 70 04	 push	 DWORD PTR [eax+4]
  0008e	56		 push	 esi
  0008f	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CResource * (__cdecl*)(char const *)>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00094	6a 2c		 push	 44			; 0000002cH
  00096	ff 36		 push	 DWORD PTR [esi]
  00098	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009d	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 531  : }

  000a0	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  000a3	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >
  000a8	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  000ab	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CResource *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CResource *> >,0> >
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 19   : 	{

  000b0	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CSingleton@VCResourceManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  000b6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A, 0 ; CSingleton<CResourceManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 531  : }

  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
  000d1	cc		 int	 3
  000d2	cc		 int	 3
  000d3	cc		 int	 3
  000d4	cc		 int	 3
  000d5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CResourceManager@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CResourceManager@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CResourceManager@@UAE@XZ ENDP			; CResourceManager::~CResourceManager
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp
;	COMDAT ??0CResourceManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CResourceManager@@QAE@XZ PROC			; CResourceManager::CResourceManager, COMDAT
; _this$ = ecx

; 523  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CResourceManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002c	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A, edi ; CSingleton<CResourceManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  00032	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  00035	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CResourceManager@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0003b	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00054	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00059	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0005b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0005e	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00061	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00067	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  00069	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  0006c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00070	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  00072	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00075	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0007b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00087	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00089	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0008c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  0008f	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00095	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  00097	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
  0009a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0009e	6a 2c		 push	 44			; 0000002cH
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  000a0	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000a3	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000a9	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000b0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  000b5	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  000b7	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  000ba	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  000bd	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  000c3	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  000c5	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
  000c8	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000cc	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  000ce	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000d1	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000d7	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000de	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  000e3	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  000e5	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  000e8	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  000eb	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  000f1	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  000f3	8d 77 24	 lea	 esi, DWORD PTR [edi+36]
  000f6	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000fa	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  000fc	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000ff	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00105	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0010c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00111	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00113	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00116	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00119	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0011f	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  00121	8d 77 2c	 lea	 esi, DWORD PTR [edi+44]
  00124	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00128	6a 2c		 push	 44			; 0000002cH
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  0012a	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0012d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00133	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0013a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0013f	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00141	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00144	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00147	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0014d	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  0014f	8d 77 34	 lea	 esi, DWORD PTR [edi+52]
  00152	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00156	6a 2c		 push	 44			; 0000002cH
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  00158	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0015b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00161	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00168	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0016d	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0016f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00172	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00175	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0017b	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  0017d	8d 77 3c	 lea	 esi, DWORD PTR [edi+60]
  00180	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00184	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 523  : {

  00186	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00189	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0018f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00196	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0019b	83 c4 20	 add	 esp, 32			; 00000020H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0019e	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  001a0	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  001a3	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  001a6	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  001ac	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\ResourceManager.cpp

; 525  : }

  001ae	8b c7		 mov	 eax, edi
  001b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ba	59		 pop	 ecx
  001bb	5f		 pop	 edi
  001bc	5e		 pop	 esi
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CResourceManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCResourceManager@@@@UAE@XZ ; CSingleton<CResourceManager>::~CSingleton<CResourceManager>
__unwindfunclet$??0CResourceManager@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$map@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@@std@@QAE@XZ
__unwindfunclet$??0CResourceManager@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$map@KPAVCResource@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCResource@@@std@@@3@@std@@QAE@XZ
__unwindfunclet$??0CResourceManager@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@ZU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@P6APAVCResource@@PBD@Z@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CResourceManager@@QAE@XZ$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$map@HP6APAVCResource@@PBD@ZU?$less@H@std@@V?$allocator@U?$pair@$$CBHP6APAVCResource@@PBD@Z@std@@@3@@std@@QAE@XZ
__unwindfunclet$??0CResourceManager@@QAE@XZ$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 24	 add	 ecx, 36			; 00000024H
  0003a	e9 00 00 00 00	 jmp	 ??1?$map@PAVCResource@@KU?$less@PAVCResource@@@std@@V?$allocator@U?$pair@QAVCResource@@K@std@@@3@@std@@QAE@XZ
__unwindfunclet$??0CResourceManager@@QAE@XZ$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00045	e9 00 00 00 00	 jmp	 ??1?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CResourceManager@@QAE@XZ$7:
  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	83 c1 34	 add	 ecx, 52			; 00000034H
  00050	e9 00 00 00 00	 jmp	 ??1?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE@XZ
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
__ehhandler$??0CResourceManager@@QAE@XZ:
  0005a	90		 npad	 1
  0005b	90		 npad	 1
  0005c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00060	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00063	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00066	33 c8		 xor	 ecx, eax
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CResourceManager@@QAE@XZ
  00072	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CResourceManager@@QAE@XZ ENDP			; CResourceManager::CResourceManager
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCResourceManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCResourceManager@@@@UAEPAXI@Z PROC	; CSingleton<CResourceManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCResourceManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A, 0 ; CSingleton<CResourceManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN8@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCResourceManager@@@@UAEPAXI@Z ENDP	; CSingleton<CResourceManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCResourceManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCResourceManager@@@@UAE@XZ PROC	; CSingleton<CResourceManager>::~CSingleton<CResourceManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCResourceManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A, 0 ; CSingleton<CResourceManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCResourceManager@@@@UAE@XZ ENDP	; CSingleton<CResourceManager>::~CSingleton<CResourceManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
$T1 = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 847  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 848  :         auto& _My_data = _Mypair._Myval2;
; 849  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 850  : 
; 851  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 852  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 853  :         } else {
; 854  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 855  :         }
; 856  : 
; 857  :         if (_Count > max_size()) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00010	0f 87 95 00 00
	00		 ja	 $LN40@Construct

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00016	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00019	77 21		 ja	 SHORT $LN3@Construct
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0001b	56		 push	 esi
  0001c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0001f	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00023	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
  00036	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	57		 push	 edi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003d	8b fe		 mov	 edi, esi
  0003f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00042	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 12		 jbe	 SHORT $LN9@Construct

; 2944 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	eb 26		 jmp	 SHORT $LN38@Construct
$LN9@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005c	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00061	3b f8		 cmp	 edi, eax
  00063	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00066	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00069	85 c0		 test	 eax, eax
  0006b	74 18		 je	 SHORT $LN37@Construct
$LN23@Construct:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0006d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00072	72 08		 jb	 SHORT $LN24@Construct

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007a	eb 06		 jmp	 SHORT $LN38@Construct
$LN24@Construct:

; 136  :         return ::operator new(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN38@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00082	83 c4 04	 add	 esp, 4
$LN37@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	56		 push	 esi
  00086	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00089	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0008d	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0008f	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  00092	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00095	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0009a	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a0	5f		 pop	 edi
  000a1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
  000a5	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  000a6	5b		 pop	 ebx
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@Construct:

; 858  :             _Xlen_string(); // result too long

  000ab	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN36@Construct:
  000b0	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 417  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 693  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000d	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00010	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00017	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 434  :         return _Myres > _Small_string_capacity;

  0001e	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00022	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  00025	76 05		 jbe	 SHORT $LN17@basic_stri

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00027	8b 00		 mov	 eax, DWORD PTR [eax]
  00029	89 45 08	 mov	 DWORD PTR __Right$[ebp], eax
$LN17@basic_stri:

; 857  :         if (_Count > max_size()) {

  0002c	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00032	0f 87 8d 00 00
	00		 ja	 $LN63@basic_stri

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00038	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  0003b	77 18		 ja	 SHORT $LN25@basic_stri

; 866  :             _My_data._Mysize = _Count;

  0003d	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00040	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00047	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  0004a	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  0004f	5f		 pop	 edi
  00050	5b		 pop	 ebx
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN25@basic_stri:
  00055	56		 push	 esi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00056	8b f3		 mov	 esi, ebx
  00058	83 ce 0f	 or	 esi, 15			; 0000000fH
  0005b	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00061	76 12		 jbe	 SHORT $LN31@basic_stri

; 2944 :             return _Max;

  00063	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00068	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00073	eb 2a		 jmp	 SHORT $LN61@basic_stri
$LN31@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00075	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0007a	3b f0		 cmp	 esi, eax
  0007c	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0007f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00082	85 c0		 test	 eax, eax
  00084	75 04		 jne	 SHORT $LN45@basic_stri

; 228  :         return nullptr;

  00086	33 c9		 xor	 ecx, ecx
  00088	eb 1a		 jmp	 SHORT $LN44@basic_stri
$LN45@basic_stri:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0008a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0008f	72 08		 jb	 SHORT $LN46@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00097	eb 06		 jmp	 SHORT $LN61@basic_stri
$LN46@basic_stri:

; 136  :         return ::operator new(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN61@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0009f	8b c8		 mov	 ecx, eax
  000a1	83 c4 04	 add	 esp, 4
$LN44@basic_stri:

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000a4	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000a7	89 0f		 mov	 DWORD PTR [edi], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax
  000aa	ff 75 08	 push	 DWORD PTR __Right$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  000ad	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b0	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 892  :         _My_data._Myres  = _New_capacity;

  000b1	89 77 14	 mov	 DWORD PTR [edi+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b4	e8 00 00 00 00	 call	 _memcpy
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  000bc	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  000bf	5f		 pop	 edi
  000c0	5b		 pop	 ebx
  000c1	5d		 pop	 ebp
  000c2	c2 04 00	 ret	 4
$LN63@basic_stri:

; 858  :             _Xlen_string(); // result too long

  000c5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN60@basic_stri:
  000ca	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 837  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 838  :         int _Result;
; 839  :         va_list _ArgList;
; 840  :         __crt_va_start(_ArgList, _Format);
; 841  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 842  :         __crt_va_end(_ArgList);
; 843  :         return _Result;
; 844  :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
