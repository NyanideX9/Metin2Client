; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\GrpExpandedImageInstance.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
PUBLIC	??_7?$CDynamicPool@VCGraphicExpandedImageInstance@@@@6B@ ; CDynamicPool<CGraphicExpandedImageInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCGraphicExpandedImageInstance@@@@UAEPAXI@Z ; CDynamicPool<CGraphicExpandedImageInstance>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPool@VCGraphicExpandedImageInstance@@@@6B@ ; CDynamicPool<CGraphicExpandedImageInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCGraphicExpandedImageInstance@@@@@8 ; CDynamicPool<CGraphicExpandedImageInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCGraphicExpandedImageInstance@@@@8 ; CDynamicPool<CGraphicExpandedImageInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCGraphicExpandedImageInstance@@@@8 ; CDynamicPool<CGraphicExpandedImageInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCGraphicExpandedImageInstance@@@@8 ; CDynamicPool<CGraphicExpandedImageInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPool@VCGraphicExpandedImageInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CGraphicExpandedImageInstance>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCGraphicExpandedImageInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCGraphicExpandedImageInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCGraphicExpandedImageInstance@@@@@8 ; CDynamicPool<CGraphicExpandedImageInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCGraphicExpandedImageInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCGraphicExpandedImageInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCGraphicExpandedImageInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCGraphicExpandedImageInstance@@@@8 ; CDynamicPool<CGraphicExpandedImageInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCGraphicExpandedImageInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCGraphicExpandedImageInstance@@@@8 DD 00H ; CDynamicPool<CGraphicExpandedImageInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCGraphicExpandedImageInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCGraphicExpandedImageInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCGraphicExpandedImageInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CGraphicExpandedImageInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCGraphicExpandedImageInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCGraphicExpandedImageInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCGraphicExpandedImageInstance@@@@6B@ DD 00H ; CDynamicPool<CGraphicExpandedImageInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCGraphicExpandedImageInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCGraphicExpandedImageInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPool@VCGraphicExpandedImageInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCGraphicExpandedImageInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCGraphicExpandedImageInstance@@@@6B@ ; CDynamicPool<CGraphicExpandedImageInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCGraphicExpandedImageInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0SPDTVertex@@QAE@XZ				; SPDTVertex::SPDTVertex
PUBLIC	?Type@CGraphicExpandedImageInstance@@SAKXZ	; CGraphicExpandedImageInstance::Type
PUBLIC	??0CGraphicExpandedImageInstance@@QAE@XZ	; CGraphicExpandedImageInstance::CGraphicExpandedImageInstance
PUBLIC	??1CGraphicExpandedImageInstance@@UAE@XZ	; CGraphicExpandedImageInstance::~CGraphicExpandedImageInstance
PUBLIC	?Destroy@CGraphicExpandedImageInstance@@QAEXXZ	; CGraphicExpandedImageInstance::Destroy
PUBLIC	?SetDepth@CGraphicExpandedImageInstance@@QAEXM@Z ; CGraphicExpandedImageInstance::SetDepth
PUBLIC	?SetOrigin@CGraphicExpandedImageInstance@@QAEXXZ ; CGraphicExpandedImageInstance::SetOrigin
PUBLIC	?SetOrigin@CGraphicExpandedImageInstance@@QAEXMM@Z ; CGraphicExpandedImageInstance::SetOrigin
PUBLIC	?SetRotation@CGraphicExpandedImageInstance@@QAEXM@Z ; CGraphicExpandedImageInstance::SetRotation
PUBLIC	?SetScale@CGraphicExpandedImageInstance@@UAEXMM@Z ; CGraphicExpandedImageInstance::SetScale
PUBLIC	?SetRenderingRect@CGraphicExpandedImageInstance@@QAEXMMMM@Z ; CGraphicExpandedImageInstance::SetRenderingRect
PUBLIC	?SetRenderingMode@CGraphicExpandedImageInstance@@QAEXH@Z ; CGraphicExpandedImageInstance::SetRenderingMode
PUBLIC	?Initialize@CGraphicExpandedImageInstance@@IAEXXZ ; CGraphicExpandedImageInstance::Initialize
PUBLIC	?OnRender@CGraphicExpandedImageInstance@@MAEXXZ	; CGraphicExpandedImageInstance::OnRender
PUBLIC	?OnSetImagePointer@CGraphicExpandedImageInstance@@MAEXXZ ; CGraphicExpandedImageInstance::OnSetImagePointer
PUBLIC	?OnIsType@CGraphicExpandedImageInstance@@MAEHK@Z ; CGraphicExpandedImageInstance::OnIsType
PUBLIC	?CreateSystem@CGraphicExpandedImageInstance@@SAXI@Z ; CGraphicExpandedImageInstance::CreateSystem
PUBLIC	?DestroySystem@CGraphicExpandedImageInstance@@SAXXZ ; CGraphicExpandedImageInstance::DestroySystem
PUBLIC	?New@CGraphicExpandedImageInstance@@SAPAV1@XZ	; CGraphicExpandedImageInstance::New
PUBLIC	?Delete@CGraphicExpandedImageInstance@@SAXPAV1@@Z ; CGraphicExpandedImageInstance::Delete
PUBLIC	??_GCGraphicExpandedImageInstance@@UAEPAXI@Z	; CGraphicExpandedImageInstance::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCGraphicExpandedImageInstance@@@@UAE@XZ ; CDynamicPool<CGraphicExpandedImageInstance>::~CDynamicPool<CGraphicExpandedImageInstance>
PUBLIC	?push_back@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@QAEXABQAVCGraphicExpandedImageInstance@@@Z ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::push_back
PUBLIC	?reserve@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@QAEXI@Z ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::reserve
PUBLIC	?_Change_array@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@AAEXQAPAVCGraphicExpandedImageInstance@@II@Z ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::_Xlength
PUBLIC	??$_Copy_memmove@PAPAVCGraphicExpandedImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicExpandedImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicExpandedImageInstance * *,CGraphicExpandedImageInstance * *>
PUBLIC	??$_Copy_memmove_tail@PAPAVCGraphicExpandedImageInstance@@@std@@YAPAPAVCGraphicExpandedImageInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CGraphicExpandedImageInstance * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A ; CGraphicExpandedImageInstance::ms_kPool
PUBLIC	??_7CGraphicExpandedImageInstance@@6B@		; CGraphicExpandedImageInstance::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0BO@COPDODEE@CGraphicExpandedImageInstance@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CGraphicExpandedImageInstance@@6B@		; CGraphicExpandedImageInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicExpandedImageInstance@@@8	; CGraphicExpandedImageInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicExpandedImageInstance@@8		; CGraphicExpandedImageInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicExpandedImageInstance@@8		; CGraphicExpandedImageInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicExpandedImageInstance@@8	; CGraphicExpandedImageInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicImageInstance@@8		; CGraphicImageInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicImageInstance@@@8		; CGraphicImageInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicImageInstance@@8			; CGraphicImageInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicImageInstance@@8			; CGraphicImageInstance::`RTTI Base Class Array'
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@437f0000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z:PROC ; CGraphicBase::SetDefaultIndexBuffer
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	?GetWidth@CGraphicTexture@@QBEHXZ:PROC		; CGraphicTexture::GetWidth
EXTRN	?GetHeight@CGraphicTexture@@QBEHXZ:PROC		; CGraphicTexture::GetHeight
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	?GetWidth@CGraphicImage@@QBEHXZ:PROC		; CGraphicImage::GetWidth
EXTRN	?GetHeight@CGraphicImage@@QBEHXZ:PROC		; CGraphicImage::GetHeight
EXTRN	?GetRectReference@CGraphicImage@@QBEABUtagRECT@@XZ:PROC ; CGraphicImage::GetRectReference
EXTRN	?GetTexturePointer@CGraphicImage@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImage::GetTexturePointer
EXTRN	?IsType@CGraphicImageInstance@@QAEHK@Z:PROC	; CGraphicImageInstance::IsType
EXTRN	??0CGraphicImageInstance@@QAE@XZ:PROC		; CGraphicImageInstance::CGraphicImageInstance
EXTRN	??1CGraphicImageInstance@@UAE@XZ:PROC		; CGraphicImageInstance::~CGraphicImageInstance
EXTRN	?Destroy@CGraphicImageInstance@@QAEXXZ:PROC	; CGraphicImageInstance::Destroy
EXTRN	?IsEmpty@CGraphicImageInstance@@QBE_NXZ:PROC	; CGraphicImageInstance::IsEmpty
EXTRN	?GetWidth@CGraphicImageInstance@@QAEHXZ:PROC	; CGraphicImageInstance::GetWidth
EXTRN	?GetHeight@CGraphicImageInstance@@QAEHXZ:PROC	; CGraphicImageInstance::GetHeight
EXTRN	??_ECGraphicExpandedImageInstance@@UAEPAXI@Z:PROC ; CGraphicExpandedImageInstance::`vector deleting destructor'
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	_memmove:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?s_dwType@?1??Type@CGraphicExpandedImageInstance@@SAKXZ@4KA
_BSS	SEGMENT
?s_dwType@?1??Type@CGraphicExpandedImageInstance@@SAKXZ@4KA DD 01H DUP (?) ; `CGraphicExpandedImageInstance::Type'::`2'::s_dwType
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Type@CGraphicExpandedImageInstance@@SAKXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Type@CGraphicExpandedImageInstance@@SAKXZ@4HA DD 01H DUP (?) ; `CGraphicExpandedImageInstance::Type'::`2'::$TSS0
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CGraphicExpandedImageInstance@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CGraphicExpandedImageInstance@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_R2CGraphicImageInstance@@8
rdata$r	SEGMENT
??_R2CGraphicImageInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicImageInstance@@8 ; CGraphicImageInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicImageInstance@@8
rdata$r	SEGMENT
??_R3CGraphicImageInstance@@8 DD 00H			; CGraphicImageInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicImageInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicImageInstance@@@8
data$rs	SEGMENT
??_R0?AVCGraphicImageInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicImageInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicImageInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicImageInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicImageInstance@@8 DD FLAT:??_R0?AVCGraphicImageInstance@@@8 ; CGraphicImageInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicImageInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicExpandedImageInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicExpandedImageInstance@@8 DD FLAT:??_R0?AVCGraphicExpandedImageInstance@@@8 ; CGraphicExpandedImageInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicExpandedImageInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicExpandedImageInstance@@8
rdata$r	SEGMENT
??_R2CGraphicExpandedImageInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicExpandedImageInstance@@8 ; CGraphicExpandedImageInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicImageInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicExpandedImageInstance@@8
rdata$r	SEGMENT
??_R3CGraphicExpandedImageInstance@@8 DD 00H		; CGraphicExpandedImageInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicExpandedImageInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicExpandedImageInstance@@@8
data$rs	SEGMENT
??_R0?AVCGraphicExpandedImageInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicExpandedImageInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicExpandedImageInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicExpandedImageInstance@@6B@
rdata$r	SEGMENT
??_R4CGraphicExpandedImageInstance@@6B@ DD 00H		; CGraphicExpandedImageInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicExpandedImageInstance@@@8
	DD	FLAT:??_R3CGraphicExpandedImageInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@COPDODEE@CGraphicExpandedImageInstance@
CONST	SEGMENT
??_C@_0BO@COPDODEE@CGraphicExpandedImageInstance@ DB 'CGraphicExpandedIma'
	DB	'geInstance', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicExpandedImageInstance@@6B@
CONST	SEGMENT
??_7CGraphicExpandedImageInstance@@6B@ DD FLAT:??_R4CGraphicExpandedImageInstance@@6B@ ; CGraphicExpandedImageInstance::`vftable'
	DD	FLAT:??_ECGraphicExpandedImageInstance@@UAEPAXI@Z
	DD	FLAT:?SetScale@CGraphicExpandedImageInstance@@UAEXMM@Z
	DD	FLAT:?OnRender@CGraphicExpandedImageInstance@@MAEXXZ
	DD	FLAT:?OnSetImagePointer@CGraphicExpandedImageInstance@@MAEXXZ
	DD	FLAT:?OnIsType@CGraphicExpandedImageInstance@@MAEHK@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCGraphicExpandedImageInstance@@@@6B@ ; CGraphicExpandedImageInstance::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCGraphicExpandedImageInstance@@@@QAEPAVCGraphicExpandedImageInstance@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCGraphicExpandedImageInstance@@@@QAEPAVCGraphicExpandedImageInstance@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCGraphicExpandedImageInstance@@@@QAEPAVCGraphicExpandedImageInstance@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCGraphicExpandedImageInstance@@@@QAEPAVCGraphicExpandedImageInstance@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CGraphicExpandedImageInstance@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CGraphicExpandedImageInstance@@SAPAV1@XZ$0
__ehfuncinfo$?New@CGraphicExpandedImageInstance@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CGraphicExpandedImageInstance@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGraphicExpandedImageInstance@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Type@CGraphicExpandedImageInstance@@SAKXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Type@CGraphicExpandedImageInstance@@SAKXZ$0
__ehfuncinfo$?Type@CGraphicExpandedImageInstance@@SAKXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Type@CGraphicExpandedImageInstance@@SAKXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCGraphicExpandedImageInstance@@@std@@YAPAPAVCGraphicExpandedImageInstance@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCGraphicExpandedImageInstance@@@std@@YAPAPAVCGraphicExpandedImageInstance@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CGraphicExpandedImageInstance * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCGraphicExpandedImageInstance@@@std@@YAPAPAVCGraphicExpandedImageInstance@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CGraphicExpandedImageInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicExpandedImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicExpandedImageInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicExpandedImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicExpandedImageInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicExpandedImageInstance * *,CGraphicExpandedImageInstance * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCGraphicExpandedImageInstance@@@std@@YAPAPAVCGraphicExpandedImageInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CGraphicExpandedImageInstance * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicExpandedImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicExpandedImageInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicExpandedImageInstance * *,CGraphicExpandedImageInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CGraphicExpandedImageInstance::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A ; CGraphicExpandedImageInstance::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCGraphicExpandedImageInstance@@@@UAE@XZ ; CDynamicPool<CGraphicExpandedImageInstance>::~CDynamicPool<CGraphicExpandedImageInstance>
??__F?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CGraphicExpandedImageInstance::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ??__E?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CGraphicExpandedImageInstance::ms_kPool'', COMDAT

; 6    : CDynamicPool<CGraphicExpandedImageInstance>		CGraphicExpandedImageInstance::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CGraphicExpandedImageInstance::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CGraphicExpandedImageInstance::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCGraphicExpandedImageInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCGraphicExpandedImageInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CGraphicExpandedImageInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCGraphicExpandedImageInstance@@@@UAE@XZ ; CDynamicPool<CGraphicExpandedImageInstance>::~CDynamicPool<CGraphicExpandedImageInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCGraphicExpandedImageInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CGraphicExpandedImageInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@AAEXQAPAVCGraphicExpandedImageInstance@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@AAEXQAPAVCGraphicExpandedImageInstance@@II@Z PROC ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::_Change_array, COMDAT
; _this$ = ecx

; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN10@Change_arr

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN21@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN18@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN21@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN10@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2060 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2064 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN18@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@AAEXQAPAVCGraphicExpandedImageInstance@@II@Z ENDP ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?reserve@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newcapacity$ = 8					; size = 4
__Size$1$ = 8						; size = 4
?reserve@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@QAEXI@Z PROC ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::reserve, COMDAT
; _this$ = ecx

; 1708 :     _CONSTEXPR20 void reserve(_CRT_GUARDOVERFLOW size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1709 :         // increase capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1710 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	8b 16		 mov	 edx, DWORD PTR [esi]
  0000e	2b c2		 sub	 eax, edx
  00010	c1 f8 02	 sar	 eax, 2

; 1709 :         // increase capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1710 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00013	3b c8		 cmp	 ecx, eax
  00015	0f 86 95 00 00
	00		 jbe	 $LN71@reserve

; 1711 :             if (_Newcapacity > max_size()) {

  0001b	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00021	0f 87 93 00 00
	00		 ja	 $LN97@reserve

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	53		 push	 ebx
  0002b	2b c2		 sub	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  0002d	8d 1c 8d 00 00
	00 00		 lea	 ebx, DWORD PTR [ecx*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00034	c1 f8 02	 sar	 eax, 2
  00037	89 45 08	 mov	 DWORD PTR __Size$1$[ebp], eax
  0003a	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0003b	85 db		 test	 ebx, ebx
  0003d	75 04		 jne	 SHORT $LN20@reserve

; 228  :         return nullptr;

  0003f	33 ff		 xor	 edi, edi
  00041	eb 1a		 jmp	 SHORT $LN19@reserve
$LN20@reserve:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00043	53		 push	 ebx
  00044	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0004a	72 07		 jb	 SHORT $LN21@reserve

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00051	eb 05		 jmp	 SHORT $LN95@reserve
$LN21@reserve:

; 136  :         return ::operator new(_Bytes);

  00053	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN95@reserve:

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00058	8b f8		 mov	 edi, eax
  0005a	83 c4 04	 add	 esp, 4
$LN19@reserve:
  0005d	57		 push	 edi
  0005e	ff 76 04	 push	 DWORD PTR [esi+4]
  00061	ff 36		 push	 DWORD PTR [esi]
  00063	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicExpandedImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicExpandedImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicExpandedImageInstance * *,CGraphicExpandedImageInstance * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00068	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0006d	85 c0		 test	 eax, eax
  0006f	74 2c		 je	 SHORT $LN47@reserve

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00071	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00074	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00076	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00079	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0007f	72 12		 jb	 SHORT $LN58@reserve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00081	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00084	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00087	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00089	83 c0 fc	 add	 eax, -4			; fffffffcH
  0008c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0008f	77 24		 ja	 SHORT $LN55@reserve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00091	8b c2		 mov	 eax, edx
$LN58@reserve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00093	51		 push	 ecx
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009a	83 c4 08	 add	 esp, 8
$LN47@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0009d	8b 45 08	 mov	 eax, DWORD PTR __Size$1$[ebp]
  000a0	89 3e		 mov	 DWORD PTR [esi], edi
  000a2	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  000a5	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  000a8	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  000ab	5f		 pop	 edi
  000ac	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000af	5b		 pop	 ebx
$LN71@reserve:
  000b0	5e		 pop	 esi

; 1713 :             }
; 1714 : 
; 1715 :             _Reallocate<_Reallocation_policy::_At_least>(_Newcapacity);
; 1716 :         }
; 1717 :     }

  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
$LN55@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN97@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1712 :                 _Xlength();

  000ba	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::_Xlength
$LN94@reserve:
  000bf	cc		 int	 3
?reserve@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?push_back@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@QAEXABQAVCGraphicExpandedImageInstance@@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
tv621 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
$T1 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@QAEXABQAVCGraphicExpandedImageInstance@@@Z PROC ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::push_back, COMDAT
; _this$ = ecx

; 917  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 829  :         if (_Mylast != _My_data._Myend) {

  0000b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000e	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00011	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  00014	3b ca		 cmp	 ecx, edx
  00016	74 14		 je	 SHORT $LN4@push_back

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00018	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  0001f	83 46 04 04	 add	 DWORD PTR [esi+4], 4

; 919  :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN4@push_back:

; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0002c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0002e	8b c1		 mov	 eax, ecx
  00030	2b c7		 sub	 eax, edi
  00032	c1 f8 02	 sar	 eax, 2
  00035	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  00038	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0003d	0f 84 c0 00 00
	00		 je	 $LN106@push_back

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00043	2b d7		 sub	 edx, edi

; 876  :         const size_type _Newsize = _Oldsize + 1;

  00045	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00048	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00050	8b fa		 mov	 edi, edx

; 876  :         const size_type _Newsize = _Oldsize + 1;

  00052	89 5d f8	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00055	d1 ef		 shr	 edi, 1
  00057	2b c7		 sub	 eax, edi
  00059	3b d0		 cmp	 edx, eax
  0005b	76 12		 jbe	 SHORT $LN15@push_back

; 1997 :             return _Max; // geometric growth would overflow

  0005d	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00062	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006d	eb 38		 jmp	 SHORT $LN104@push_back
$LN15@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0006f	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00072	3b c3		 cmp	 eax, ebx
  00074	0f 43 d8	 cmovae	 ebx, eax
  00077	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0007d	0f 87 85 00 00
	00		 ja	 $LN107@push_back

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00083	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]

; 227  :     if (_Bytes == 0) {

  0008a	85 c0		 test	 eax, eax
  0008c	75 04		 jne	 SHORT $LN30@push_back

; 228  :         return nullptr;

  0008e	33 ff		 xor	 edi, edi
  00090	eb 1d		 jmp	 SHORT $LN29@push_back
$LN30@push_back:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 08		 jb	 SHORT $LN31@push_back

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	eb 06		 jmp	 SHORT $LN104@push_back
$LN31@push_back:

; 136  :         return ::operator new(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN104@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a7	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  000aa	8b f8		 mov	 edi, eax
  000ac	83 c4 04	 add	 esp, 4
$LN29@push_back:
  000af	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  000b2	8d 14 87	 lea	 edx, DWORD PTR [edi+eax*4]
  000b5	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000b8	89 55 f4	 mov	 DWORD PTR tv621[ebp], edx
  000bb	8b 00		 mov	 eax, DWORD PTR [eax]
  000bd	89 02		 mov	 DWORD PTR [edx], eax

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000bf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c2	8b 16		 mov	 edx, DWORD PTR [esi]
  000c4	3b c8		 cmp	 ecx, eax
  000c6	75 04		 jne	 SHORT $LN10@push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000c8	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000ca	eb 17		 jmp	 SHORT $LN59@push_back
$LN10@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cc	57		 push	 edi
  000cd	51		 push	 ecx
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicExpandedImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicExpandedImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicExpandedImageInstance * *,CGraphicExpandedImageInstance * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8b 4d f4	 mov	 ecx, DWORD PTR tv621[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000da	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000dd	83 c1 04	 add	 ecx, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000e0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
$LN59@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 900  :         _Guard._New_begin = nullptr;

  000e3	51		 push	 ecx
  000e4	50		 push	 eax
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicExpandedImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicExpandedImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicExpandedImageInstance * *,CGraphicExpandedImageInstance * *>
  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000ee	8b ce		 mov	 ecx, esi
  000f0	53		 push	 ebx
  000f1	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000f4	57		 push	 edi
  000f5	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@AAEXQAPAVCGraphicExpandedImageInstance@@II@Z ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::_Change_array

; 919  :     }

  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 04 00	 ret	 4
$LN106@push_back:

; 873  :             _Xlength();

  00103	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::_Xlength
$LN107@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00108	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN103@push_back:
  0010d	cc		 int	 3
?push_back@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@QAEXABQAVCGraphicExpandedImageInstance@@@Z ENDP ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCGraphicExpandedImageInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCGraphicExpandedImageInstance@@@@UAE@XZ PROC ; CDynamicPool<CGraphicExpandedImageInstance>::~CDynamicPool<CGraphicExpandedImageInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCGraphicExpandedImageInstance@@@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN8@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN27@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN27@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2082 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN8@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN37@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN56@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN56@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2082 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN37@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN53@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN67@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCGraphicExpandedImageInstance@@@@UAE@XZ ENDP ; CDynamicPool<CGraphicExpandedImageInstance>::~CDynamicPool<CGraphicExpandedImageInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicExpandedImageInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicExpandedImageInstance@@UAEPAXI@Z PROC	; CGraphicExpandedImageInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicExpandedImageInstance@@UAE@XZ ; CGraphicExpandedImageInstance::~CGraphicExpandedImageInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 4c		 push	 76			; 0000004cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGraphicExpandedImageInstance@@UAEPAXI@Z ENDP	; CGraphicExpandedImageInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?Delete@CGraphicExpandedImageInstance@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkImgInst$ = 8						; size = 4
_pkData$ = 8						; size = 4
?Delete@CGraphicExpandedImageInstance@@SAXPAV1@@Z PROC	; CGraphicExpandedImageInstance::Delete, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 25   : 	pkImgInst->Destroy();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkImgInst$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Destroy@CGraphicExpandedImageInstance@@QAEXXZ ; CGraphicExpandedImageInstance::Destroy
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 82   : 			m_kVct_pkFree.push_back(pkData);

  0000e	8d 45 08	 lea	 eax, DWORD PTR _pkData$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 26   : 	ms_kPool.Free(pkImgInst);

  00011	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 82   : 			m_kVct_pkFree.push_back(pkData);

  00014	50		 push	 eax
  00015	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+16
  0001a	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@QAEXABQAVCGraphicExpandedImageInstance@@@Z ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::push_back
  0001f	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 27   : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?Delete@CGraphicExpandedImageInstance@@SAXPAV1@@Z ENDP	; CGraphicExpandedImageInstance::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?New@CGraphicExpandedImageInstance@@SAPAV1@XZ
_TEXT	SEGMENT
_pkNewData$2 = -16					; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?New@CGraphicExpandedImageInstance@@SAPAV1@XZ PROC	; CGraphicExpandedImageInstance::New, COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CGraphicExpandedImageInstance@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00023	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+20
  00029	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+16, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 64   : 			if (m_kVct_pkFree.empty())

  0002f	75 53		 jne	 SHORT $LN4@New

; 65   : 			{
; 66   : 				T* pkNewData=new T;

  00031	6a 4c		 push	 76			; 0000004cH
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00038	83 c4 04	 add	 esp, 4
  0003b	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	85 c0		 test	 eax, eax
  00047	74 09		 je	 SHORT $LN6@New
  00049	8b c8		 mov	 ecx, eax
  0004b	e8 00 00 00 00	 call	 ??0CGraphicExpandedImageInstance@@QAE@XZ ; CGraphicExpandedImageInstance::CGraphicExpandedImageInstance
  00050	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  00052	33 c0		 xor	 eax, eax
$LN7@New:
  00054	89 45 f0	 mov	 DWORD PTR _pkNewData$2[ebp], eax

; 67   : 				m_kVct_pkData.push_back(pkNewData);

  00057	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+4
  0005c	8d 45 f0	 lea	 eax, DWORD PTR _pkNewData$2[ebp]
  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@QAEXABQAVCGraphicExpandedImageInstance@@@Z ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::push_back

; 68   : 				++m_uUsedCapacity;

  0006c	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 20   : 	return ms_kPool.Alloc();

  00072	8b 45 f0	 mov	 eax, DWORD PTR _pkNewData$2[ebp]

; 21   : }

  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN4@New:
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  00084	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1744 :         --_Mylast;

  00087	83 c1 fc	 add	 ecx, -4			; fffffffcH
  0008a	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+20, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 21   : }

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CGraphicExpandedImageInstance@@SAPAV1@XZ$0:
  00000	6a 4c		 push	 76			; 0000004cH
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?New@CGraphicExpandedImageInstance@@SAPAV1@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CGraphicExpandedImageInstance@@SAPAV1@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CGraphicExpandedImageInstance@@SAPAV1@XZ ENDP	; CGraphicExpandedImageInstance::New
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?DestroySystem@CGraphicExpandedImageInstance@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CGraphicExpandedImageInstance@@SAXXZ PROC ; CGraphicExpandedImageInstance::DestroySystem, COMDAT

; 14   : {

  00000	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+4
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 14   : {

  00007	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+8
  0000e	3b f7		 cmp	 esi, edi
  00010	74 29		 je	 SHORT $LN12@DestroySys
$LL6@DestroySys:

; 111  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN4@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN4@DestroySys:

; 50   : 			for (auto v : m_kVct_pkData)

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL6@DestroySys
  00025	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+8
  0002b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	3b f7		 cmp	 esi, edi
  00033	74 06		 je	 SHORT $LN12@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00035	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+8, esi
$LN12@DestroySys:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0003b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+16
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+20
  00048	74 05		 je	 SHORT $LN16@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0004a	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+20, eax
$LN16@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 16   : }

  0004f	c3		 ret	 0
?DestroySystem@CGraphicExpandedImageInstance@@SAXXZ ENDP ; CGraphicExpandedImageInstance::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?CreateSystem@CGraphicExpandedImageInstance@@SAXI@Z
_TEXT	SEGMENT
_uCapacity$ = 8						; size = 4
?CreateSystem@CGraphicExpandedImageInstance@@SAXI@Z PROC ; CGraphicExpandedImageInstance::CreateSystem, COMDAT

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 58   : 			m_uInitCapacity=uCapacity;

  00004	8b 75 08	 mov	 esi, DWORD PTR _uCapacity$[ebp]

; 59   : 			m_kVct_pkData.reserve(uCapacity);

  00007	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+4
  0000c	56		 push	 esi
  0000d	89 35 1c 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+28, esi
  00013	e8 00 00 00 00	 call	 ?reserve@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@QAEXI@Z ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::reserve

; 60   : 			m_kVct_pkFree.reserve(uCapacity);

  00018	56		 push	 esi
  00019	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicExpandedImageInstance@@2V?$CDynamicPool@VCGraphicExpandedImageInstance@@@@A+16
  0001e	e8 00 00 00 00	 call	 ?reserve@?$vector@PAVCGraphicExpandedImageInstance@@V?$allocator@PAVCGraphicExpandedImageInstance@@@std@@@std@@QAEXI@Z ; std::vector<CGraphicExpandedImageInstance *,std::allocator<CGraphicExpandedImageInstance *> >::reserve
  00023	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 11   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?CreateSystem@CGraphicExpandedImageInstance@@SAXI@Z ENDP ; CGraphicExpandedImageInstance::CreateSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?OnIsType@CGraphicExpandedImageInstance@@MAEHK@Z
_TEXT	SEGMENT
_dwType$ = 8						; size = 4
?OnIsType@CGraphicExpandedImageInstance@@MAEHK@Z PROC	; CGraphicExpandedImageInstance::OnIsType, COMDAT
; _this$ = ecx

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 205  : 	if (CGraphicExpandedImageInstance::Type() == dwType)

  00006	e8 00 00 00 00	 call	 ?Type@CGraphicExpandedImageInstance@@SAKXZ ; CGraphicExpandedImageInstance::Type
  0000b	8b 55 08	 mov	 edx, DWORD PTR _dwType$[ebp]
  0000e	3b c2		 cmp	 eax, edx
  00010	75 0a		 jne	 SHORT $LN2@OnIsType

; 206  : 		return TRUE;

  00012	b8 01 00 00 00	 mov	 eax, 1
  00017	5e		 pop	 esi

; 209  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@OnIsType:

; 207  : 
; 208  : 	return CGraphicImageInstance::IsType(dwType);

  0001c	52		 push	 edx
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?IsType@CGraphicImageInstance@@QAEHK@Z ; CGraphicImageInstance::IsType
  00024	5e		 pop	 esi

; 209  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?OnIsType@CGraphicExpandedImageInstance@@MAEHK@Z ENDP	; CGraphicExpandedImageInstance::OnIsType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?OnSetImagePointer@CGraphicExpandedImageInstance@@MAEXXZ
_TEXT	SEGMENT
tv76 = -4						; size = 4
?OnSetImagePointer@CGraphicExpandedImageInstance@@MAEXXZ PROC ; CGraphicExpandedImageInstance::OnSetImagePointer, COMDAT
; _this$ = ecx

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 197  : 	if (IsEmpty())

  00007	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0000c	84 c0		 test	 al, al
  0000e	75 4b		 jne	 SHORT $LN1@OnSetImage

; 198  : 		return;
; 199  : 
; 200  : 	SetOrigin(float(GetWidth()) / 2.0f, float(GetHeight()) / 2.0f);

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetHeight
  00017	8b ce		 mov	 ecx, esi
  00019	66 0f 6e c0	 movd	 xmm0, eax
  0001d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00020	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00028	f3 0f 11 45 fc	 movss	 DWORD PTR tv76[ebp], xmm0
  0002d	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetWidth
  00032	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR tv76[ebp]
  00037	83 ec 08	 sub	 esp, 8
  0003a	8b ce		 mov	 ecx, esi
  0003c	66 0f 6e c0	 movd	 xmm0, eax
  00040	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00043	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00049	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00051	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00056	e8 00 00 00 00	 call	 ?SetOrigin@CGraphicExpandedImageInstance@@QAEXMM@Z ; CGraphicExpandedImageInstance::SetOrigin
$LN1@OnSetImage:
  0005b	5e		 pop	 esi

; 201  : }

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?OnSetImagePointer@CGraphicExpandedImageInstance@@MAEXXZ ENDP ; CGraphicExpandedImageInstance::OnSetImagePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?OnRender@CGraphicExpandedImageInstance@@MAEXXZ
_TEXT	SEGMENT
tv1965 = -144						; size = 8
_eu$1$ = -140						; size = 4
tv1936 = -136						; size = 4
_sv$1$ = -136						; size = 4
_pTexture$1$ = -132					; size = 4
_su$1$ = -128						; size = 4
_fimgWidth$1$ = -128					; size = 4
_fimgHalfHeight$1$ = -128				; size = 4
_pImage$1$ = -124					; size = 4
_fimgHalfWidth$1$ = -124				; size = 4
tv1927 = -120						; size = 4
_texReverseWidth$1$ = -120				; size = 4
_ev$1$ = -120						; size = 4
tv1862 = -116						; size = 4
_dwR$1$ = -116						; size = 4
tv1861 = -112						; size = 4
_dwG$1$ = -112						; size = 4
_dwG$1$ = -108						; size = 4
_dwR$1$ = -108						; size = 4
_dwR$1$ = -108						; size = 4
tv1940 = -104						; size = 4
_dwR$1$ = -104						; size = 4
_dwG$1$ = -104						; size = 4
_dwG$1$ = -104						; size = 4
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
?OnRender@CGraphicExpandedImageInstance@@MAEXXZ PROC	; CGraphicExpandedImageInstance::OnRender, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx

; 31   : 	CGraphicImage * pImage = m_roImage.GetPointer();

  00017	8b 77 24	 mov	 esi, DWORD PTR [edi+36]

; 32   : 	CGraphicTexture * pTexture = pImage->GetTexturePointer();

  0001a	8b ce		 mov	 ecx, esi
  0001c	89 75 84	 mov	 DWORD PTR _pImage$1$[ebp], esi
  0001f	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImage@@QAEPAVCGraphicTexture@@XZ ; CGraphicImage::GetTexturePointer

; 33   : 
; 34   : 	const RECT& c_rRect = pImage->GetRectReference();

  00024	8b ce		 mov	 ecx, esi
  00026	89 85 7c ff ff
	ff		 mov	 DWORD PTR _pTexture$1$[ebp], eax
  0002c	e8 00 00 00 00	 call	 ?GetRectReference@CGraphicImage@@QBEABUtagRECT@@XZ ; CGraphicImage::GetRectReference

; 35   : 	float texReverseWidth = 1.0f / float(pTexture->GetWidth());

  00031	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _pTexture$1$[ebp]
  00037	8b f0		 mov	 esi, eax
  00039	e8 00 00 00 00	 call	 ?GetWidth@CGraphicTexture@@QBEHXZ ; CGraphicTexture::GetWidth
  0003e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000

; 36   : 	float texReverseHeight = 1.0f / float(pTexture->GetHeight());

  00046	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _pTexture$1$[ebp]
  0004c	66 0f 6e c0	 movd	 xmm0, eax
  00050	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00053	f3 0f 5e c8	 divss	 xmm1, xmm0
  00057	f3 0f 11 4d 88	 movss	 DWORD PTR _texReverseWidth$1$[ebp], xmm1
  0005c	e8 00 00 00 00	 call	 ?GetHeight@CGraphicTexture@@QBEHXZ ; CGraphicTexture::GetHeight
  00061	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00069	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00071	66 0f 6e c0	 movd	 xmm0, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 37   : 	float su = (c_rRect.left - m_RenderingRect.left) * texReverseWidth;

  00075	8b 06		 mov	 eax, DWORD PTR [esi]
  00077	2b 47 38	 sub	 eax, DWORD PTR [edi+56]
  0007a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0007d	66 0f 6e e8	 movd	 xmm5, eax

; 38   : 	float sv = (c_rRect.top - m_RenderingRect.top) * texReverseHeight;

  00081	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00084	2b 47 3c	 sub	 eax, DWORD PTR [edi+60]
  00087	f3 0f 5e c8	 divss	 xmm1, xmm0
  0008b	66 0f 6e e0	 movd	 xmm4, eax

; 39   : 	float eu = (c_rRect.left + m_RenderingRect.right + (c_rRect.right-c_rRect.left)) * texReverseWidth;

  0008f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00092	03 47 40	 add	 eax, DWORD PTR [edi+64]
  00095	0f 5b ed	 cvtdq2ps xmm5, xmm5
  00098	66 0f 6e d0	 movd	 xmm2, eax

; 40   : 	float ev = (c_rRect.top + m_RenderingRect.bottom + (c_rRect.bottom-c_rRect.top)) * texReverseHeight;

  0009c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0009f	03 47 44	 add	 eax, DWORD PTR [edi+68]
  000a2	f3 0f 59 6d 88	 mulss	 xmm5, DWORD PTR _texReverseWidth$1$[ebp]
  000a7	0f 5b d2	 cvtdq2ps xmm2, xmm2
  000aa	66 0f 6e c0	 movd	 xmm0, eax
  000ae	f3 0f 59 55 88	 mulss	 xmm2, DWORD PTR _texReverseWidth$1$[ebp]
  000b3	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000b6	f3 0f 11 95 74
	ff ff ff	 movss	 DWORD PTR _eu$1$[ebp], xmm2

; 43   : 	vertices[0].position.x	= m_v2Position.x-0.5f;

  000be	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  000c6	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000ca	0f 5b e4	 cvtdq2ps xmm4, xmm4
  000cd	f3 0f 11 45 88	 movss	 DWORD PTR _ev$1$[ebp], xmm0
  000d2	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  000d7	f3 0f 5c c2	 subss	 xmm0, xmm2
  000db	f3 0f 59 e1	 mulss	 xmm4, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  000df	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]
  000e4	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 43   : 	vertices[0].position.x	= m_v2Position.x-0.5f;

  000eb	f3 0f 11 45 90	 movss	 DWORD PTR tv1861[ebp], xmm0
  000f0	f3 0f 11 45 9c	 movss	 DWORD PTR _vertices$[ebp], xmm0

; 44   : 	vertices[0].position.y	= m_v2Position.y-0.5f;

  000f5	f3 0f 10 47 18	 movss	 xmm0, DWORD PTR [edi+24]
  000fa	f3 0f 5c c2	 subss	 xmm0, xmm2
  000fe	f3 0f 11 6d 80	 movss	 DWORD PTR _su$1$[ebp], xmm5
  00103	f3 0f 11 a5 78
	ff ff ff	 movss	 DWORD PTR _sv$1$[ebp], xmm4

; 45   : 	vertices[0].position.z	= m_fDepth;
; 46   : 	vertices[0].texCoord	= TTextureCoordinate(su, sv);

  0010b	f3 0f 11 6d ac	 movss	 DWORD PTR _vertices$[ebp+16], xmm5
  00110	f3 0f 11 65 b0	 movss	 DWORD PTR _vertices$[ebp+20], xmm4
  00115	f3 0f 11 45 8c	 movss	 DWORD PTR tv1862[ebp], xmm0
  0011a	f3 0f 11 45 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm0
  0011f	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  00124	f3 0f 11 45 a4	 movss	 DWORD PTR _vertices$[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00129	0f 57 c0	 xorps	 xmm0, xmm0
  0012c	72 09		 jb	 SHORT $LN78@OnRender
  0012e	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  00135	eb 34		 jmp	 SHORT $LN77@OnRender
$LN78@OnRender:
  00137	0f 2f c1	 comiss	 xmm0, xmm1
  0013a	72 09		 jb	 SHORT $LN76@OnRender
  0013c	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  00143	eb 26		 jmp	 SHORT $LN77@OnRender
$LN76@OnRender:
  00145	0f 28 c1	 movaps	 xmm0, xmm1
  00148	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0014c	f3 0f 58 c2	 addss	 xmm0, xmm2
  00150	e8 00 00 00 00	 call	 __ftol3
  00155	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f000000
  0015d	0f 57 c0	 xorps	 xmm0, xmm0
  00160	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00168	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN77@OnRender:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0016b	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
  00170	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00177	72 09		 jb	 SHORT $LN82@OnRender
  00179	c7 45 94 ff 00
	00 00		 mov	 DWORD PTR _dwG$1$[ebp], 255 ; 000000ffH
  00180	eb 21		 jmp	 SHORT $LN81@OnRender
$LN82@OnRender:
  00182	0f 2f c1	 comiss	 xmm0, xmm1
  00185	72 09		 jb	 SHORT $LN80@OnRender
  00187	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _dwG$1$[ebp], 0
  0018e	eb 13		 jmp	 SHORT $LN81@OnRender
$LN80@OnRender:
  00190	0f 28 c1	 movaps	 xmm0, xmm1
  00193	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00197	f3 0f 58 c2	 addss	 xmm0, xmm2
  0019b	e8 00 00 00 00	 call	 __ftol3
  001a0	89 45 94	 mov	 DWORD PTR _dwG$1$[ebp], eax
$LN81@OnRender:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  001a3	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  001a8	0f 57 c0	 xorps	 xmm0, xmm0
  001ab	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  001b2	72 07		 jb	 SHORT $LN86@OnRender
  001b4	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  001b9	eb 26		 jmp	 SHORT $LN85@OnRender
$LN86@OnRender:
  001bb	0f 2f c1	 comiss	 xmm0, xmm1
  001be	72 04		 jb	 SHORT $LN84@OnRender
  001c0	33 f6		 xor	 esi, esi
  001c2	eb 1d		 jmp	 SHORT $LN85@OnRender
$LN84@OnRender:
  001c4	0f 28 c1	 movaps	 xmm0, xmm1
  001c7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  001cf	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  001d7	e8 00 00 00 00	 call	 __ftol3
  001dc	8b f0		 mov	 esi, eax
  001de	0f 57 c0	 xorps	 xmm0, xmm0
$LN85@OnRender:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  001e1	f3 0f 10 4f 10	 movss	 xmm1, DWORD PTR [edi+16]
  001e6	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  001ed	72 07		 jb	 SHORT $LN90@OnRender
  001ef	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  001f4	eb 21		 jmp	 SHORT $LN89@OnRender
$LN90@OnRender:
  001f6	0f 2f c1	 comiss	 xmm0, xmm1
  001f9	72 04		 jb	 SHORT $LN88@OnRender
  001fb	33 c0		 xor	 eax, eax
  001fd	eb 18		 jmp	 SHORT $LN89@OnRender
$LN88@OnRender:
  001ff	0f 28 c1	 movaps	 xmm0, xmm1
  00202	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0020a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00212	e8 00 00 00 00	 call	 __ftol3
$LN89@OnRender:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 49   : 	vertices[1].position.x	= m_v2Position.x-0.5f;

  00217	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR tv1861[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0021c	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00221	c1 e0 08	 shl	 eax, 8
  00224	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 49   : 	vertices[1].position.x	= m_v2Position.x-0.5f;

  00227	f3 0f 11 45 b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm0

; 50   : 	vertices[1].position.y	= m_v2Position.y-0.5f;

  0022c	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv1862[ebp]
  00231	f3 0f 11 45 b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm0

; 51   : 	vertices[1].position.z	= m_fDepth;

  00236	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0023b	c1 e0 08	 shl	 eax, 8
  0023e	0b 45 94	 or	 eax, DWORD PTR _dwG$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 51   : 	vertices[1].position.z	= m_fDepth;

  00241	f3 0f 11 45 bc	 movss	 DWORD PTR _vertices$[ebp+32], xmm0

; 52   : 	vertices[1].texCoord	= TTextureCoordinate(eu, sv);

  00246	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _eu$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0024e	c1 e0 08	 shl	 eax, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 52   : 	vertices[1].texCoord	= TTextureCoordinate(eu, sv);

  00251	f3 0f 11 45 c4	 movss	 DWORD PTR _vertices$[ebp+40], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00256	0b c6		 or	 eax, esi

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00258	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 47   : 	vertices[0].diffuse		= m_DiffuseColor;

  0025f	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+12], eax

; 52   : 	vertices[1].texCoord	= TTextureCoordinate(eu, sv);

  00262	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _sv$1$[ebp]
  0026a	f3 0f 11 45 c8	 movss	 DWORD PTR _vertices$[ebp+44], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0026f	0f 57 c0	 xorps	 xmm0, xmm0
  00272	72 09		 jb	 SHORT $LN98@OnRender
  00274	c7 45 94 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  0027b	eb 2c		 jmp	 SHORT $LN97@OnRender
$LN98@OnRender:
  0027d	0f 2f c1	 comiss	 xmm0, xmm1
  00280	72 09		 jb	 SHORT $LN96@OnRender
  00282	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  00289	eb 1e		 jmp	 SHORT $LN97@OnRender
$LN96@OnRender:
  0028b	0f 28 c1	 movaps	 xmm0, xmm1
  0028e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00296	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0029e	e8 00 00 00 00	 call	 __ftol3
  002a3	89 45 94	 mov	 DWORD PTR _dwR$1$[ebp], eax
  002a6	0f 57 c0	 xorps	 xmm0, xmm0
$LN97@OnRender:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  002a9	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
  002ae	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  002b5	72 09		 jb	 SHORT $LN102@OnRender
  002b7	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwG$1$[ebp], 255 ; 000000ffH
  002be	eb 29		 jmp	 SHORT $LN101@OnRender
$LN102@OnRender:
  002c0	0f 2f c1	 comiss	 xmm0, xmm1
  002c3	72 09		 jb	 SHORT $LN100@OnRender
  002c5	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwG$1$[ebp], 0
  002cc	eb 1b		 jmp	 SHORT $LN101@OnRender
$LN100@OnRender:
  002ce	0f 28 c1	 movaps	 xmm0, xmm1
  002d1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  002d9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  002e1	e8 00 00 00 00	 call	 __ftol3
  002e6	89 45 98	 mov	 DWORD PTR _dwG$1$[ebp], eax
$LN101@OnRender:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  002e9	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  002ee	0f 57 c0	 xorps	 xmm0, xmm0
  002f1	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  002f8	72 07		 jb	 SHORT $LN106@OnRender
  002fa	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  002ff	eb 26		 jmp	 SHORT $LN105@OnRender
$LN106@OnRender:
  00301	0f 2f c1	 comiss	 xmm0, xmm1
  00304	72 04		 jb	 SHORT $LN104@OnRender
  00306	33 f6		 xor	 esi, esi
  00308	eb 1d		 jmp	 SHORT $LN105@OnRender
$LN104@OnRender:
  0030a	0f 28 c1	 movaps	 xmm0, xmm1
  0030d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00315	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0031d	e8 00 00 00 00	 call	 __ftol3
  00322	8b f0		 mov	 esi, eax
  00324	0f 57 c0	 xorps	 xmm0, xmm0
$LN105@OnRender:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00327	f3 0f 10 4f 10	 movss	 xmm1, DWORD PTR [edi+16]
  0032c	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00333	72 07		 jb	 SHORT $LN110@OnRender
  00335	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0033a	eb 21		 jmp	 SHORT $LN109@OnRender
$LN110@OnRender:
  0033c	0f 2f c1	 comiss	 xmm0, xmm1
  0033f	72 04		 jb	 SHORT $LN108@OnRender
  00341	33 c0		 xor	 eax, eax
  00343	eb 18		 jmp	 SHORT $LN109@OnRender
$LN108@OnRender:
  00345	0f 28 c1	 movaps	 xmm0, xmm1
  00348	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00350	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00358	e8 00 00 00 00	 call	 __ftol3
$LN109@OnRender:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 55   : 	vertices[2].position.x	= m_v2Position.x-0.5f;

  0035d	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR tv1861[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00362	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00367	c1 e0 08	 shl	 eax, 8
  0036a	0b 45 94	 or	 eax, DWORD PTR _dwR$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 55   : 	vertices[2].position.x	= m_v2Position.x-0.5f;

  0036d	f3 0f 11 45 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm0

; 56   : 	vertices[2].position.y	= m_v2Position.y-0.5f;

  00372	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv1862[ebp]
  00377	f3 0f 11 45 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm0

; 57   : 	vertices[2].position.z	= m_fDepth;

  0037c	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00381	c1 e0 08	 shl	 eax, 8
  00384	0b 45 98	 or	 eax, DWORD PTR _dwG$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 57   : 	vertices[2].position.z	= m_fDepth;

  00387	f3 0f 11 45 d4	 movss	 DWORD PTR _vertices$[ebp+56], xmm0

; 58   : 	vertices[2].texCoord	= TTextureCoordinate(su, ev);

  0038c	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _su$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00391	c1 e0 08	 shl	 eax, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 58   : 	vertices[2].texCoord	= TTextureCoordinate(su, ev);

  00394	f3 0f 11 45 dc	 movss	 DWORD PTR _vertices$[ebp+64], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00399	0b c6		 or	 eax, esi

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0039b	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 53   : 	vertices[1].diffuse		= m_DiffuseColor;

  003a2	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+36], eax

; 58   : 	vertices[2].texCoord	= TTextureCoordinate(su, ev);

  003a5	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _ev$1$[ebp]
  003aa	f3 0f 11 45 e0	 movss	 DWORD PTR _vertices$[ebp+68], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  003af	0f 57 c0	 xorps	 xmm0, xmm0
  003b2	72 09		 jb	 SHORT $LN118@OnRender
  003b4	c7 45 94 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  003bb	eb 2c		 jmp	 SHORT $LN117@OnRender
$LN118@OnRender:
  003bd	0f 2f c1	 comiss	 xmm0, xmm1
  003c0	72 09		 jb	 SHORT $LN116@OnRender
  003c2	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  003c9	eb 1e		 jmp	 SHORT $LN117@OnRender
$LN116@OnRender:
  003cb	0f 28 c1	 movaps	 xmm0, xmm1
  003ce	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  003d6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  003de	e8 00 00 00 00	 call	 __ftol3
  003e3	89 45 94	 mov	 DWORD PTR _dwR$1$[ebp], eax
  003e6	0f 57 c0	 xorps	 xmm0, xmm0
$LN117@OnRender:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  003e9	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
  003ee	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  003f5	72 09		 jb	 SHORT $LN122@OnRender
  003f7	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwG$1$[ebp], 255 ; 000000ffH
  003fe	eb 29		 jmp	 SHORT $LN121@OnRender
$LN122@OnRender:
  00400	0f 2f c1	 comiss	 xmm0, xmm1
  00403	72 09		 jb	 SHORT $LN120@OnRender
  00405	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwG$1$[ebp], 0
  0040c	eb 1b		 jmp	 SHORT $LN121@OnRender
$LN120@OnRender:
  0040e	0f 28 c1	 movaps	 xmm0, xmm1
  00411	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00419	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00421	e8 00 00 00 00	 call	 __ftol3
  00426	89 45 98	 mov	 DWORD PTR _dwG$1$[ebp], eax
$LN121@OnRender:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  00429	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  0042e	0f 57 c0	 xorps	 xmm0, xmm0
  00431	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00438	72 07		 jb	 SHORT $LN126@OnRender
  0043a	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  0043f	eb 26		 jmp	 SHORT $LN125@OnRender
$LN126@OnRender:
  00441	0f 2f c1	 comiss	 xmm0, xmm1
  00444	72 04		 jb	 SHORT $LN124@OnRender
  00446	33 f6		 xor	 esi, esi
  00448	eb 1d		 jmp	 SHORT $LN125@OnRender
$LN124@OnRender:
  0044a	0f 28 c1	 movaps	 xmm0, xmm1
  0044d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00455	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0045d	e8 00 00 00 00	 call	 __ftol3
  00462	8b f0		 mov	 esi, eax
  00464	0f 57 c0	 xorps	 xmm0, xmm0
$LN125@OnRender:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00467	f3 0f 10 4f 10	 movss	 xmm1, DWORD PTR [edi+16]
  0046c	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00473	72 07		 jb	 SHORT $LN130@OnRender
  00475	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0047a	eb 21		 jmp	 SHORT $LN129@OnRender
$LN130@OnRender:
  0047c	0f 2f c1	 comiss	 xmm0, xmm1
  0047f	72 04		 jb	 SHORT $LN128@OnRender
  00481	33 c0		 xor	 eax, eax
  00483	eb 18		 jmp	 SHORT $LN129@OnRender
$LN128@OnRender:
  00485	0f 28 c1	 movaps	 xmm0, xmm1
  00488	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00490	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00498	e8 00 00 00 00	 call	 __ftol3
$LN129@OnRender:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 61   : 	vertices[3].position.x	= m_v2Position.x-0.5f;

  0049d	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR tv1861[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  004a2	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004a7	c1 e0 08	 shl	 eax, 8
  004aa	0b 45 94	 or	 eax, DWORD PTR _dwR$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 61   : 	vertices[3].position.x	= m_v2Position.x-0.5f;

  004ad	f3 0f 11 45 e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm0

; 62   : 	vertices[3].position.y	= m_v2Position.y-0.5f;

  004b2	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv1862[ebp]
  004b7	f3 0f 11 45 e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm0

; 63   : 	vertices[3].position.z	= m_fDepth;

  004bc	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004c1	c1 e0 08	 shl	 eax, 8
  004c4	0b 45 98	 or	 eax, DWORD PTR _dwG$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 63   : 	vertices[3].position.z	= m_fDepth;

  004c7	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+80], xmm0

; 64   : 	vertices[3].texCoord	= TTextureCoordinate(eu, ev);

  004cc	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _eu$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004d4	c1 e0 08	 shl	 eax, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 64   : 	vertices[3].texCoord	= TTextureCoordinate(eu, ev);

  004d7	f3 0f 11 45 f4	 movss	 DWORD PTR _vertices$[ebp+88], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004dc	0b c6		 or	 eax, esi

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  004de	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 59   : 	vertices[2].diffuse		= m_DiffuseColor;

  004e5	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+60], eax

; 64   : 	vertices[3].texCoord	= TTextureCoordinate(eu, ev);

  004e8	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _ev$1$[ebp]
  004ed	f3 0f 11 45 f8	 movss	 DWORD PTR _vertices$[ebp+92], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  004f2	0f 57 c0	 xorps	 xmm0, xmm0
  004f5	72 09		 jb	 SHORT $LN138@OnRender
  004f7	c7 45 8c ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  004fe	eb 2c		 jmp	 SHORT $LN137@OnRender
$LN138@OnRender:
  00500	0f 2f c1	 comiss	 xmm0, xmm1
  00503	72 09		 jb	 SHORT $LN136@OnRender
  00505	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  0050c	eb 1e		 jmp	 SHORT $LN137@OnRender
$LN136@OnRender:
  0050e	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  00516	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  0051e	0f 28 c1	 movaps	 xmm0, xmm1
  00521	e8 00 00 00 00	 call	 __ftol3
  00526	89 45 8c	 mov	 DWORD PTR _dwR$1$[ebp], eax
  00529	0f 57 c0	 xorps	 xmm0, xmm0
$LN137@OnRender:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0052c	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
  00531	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00538	72 09		 jb	 SHORT $LN142@OnRender
  0053a	c7 45 90 ff 00
	00 00		 mov	 DWORD PTR _dwG$1$[ebp], 255 ; 000000ffH
  00541	eb 29		 jmp	 SHORT $LN141@OnRender
$LN142@OnRender:
  00543	0f 2f c1	 comiss	 xmm0, xmm1
  00546	72 09		 jb	 SHORT $LN140@OnRender
  00548	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _dwG$1$[ebp], 0
  0054f	eb 1b		 jmp	 SHORT $LN141@OnRender
$LN140@OnRender:
  00551	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  00559	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00561	0f 28 c1	 movaps	 xmm0, xmm1
  00564	e8 00 00 00 00	 call	 __ftol3
  00569	89 45 90	 mov	 DWORD PTR _dwG$1$[ebp], eax
$LN141@OnRender:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0056c	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  00571	0f 57 c0	 xorps	 xmm0, xmm0
  00574	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  0057b	72 07		 jb	 SHORT $LN146@OnRender
  0057d	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00582	eb 26		 jmp	 SHORT $LN145@OnRender
$LN146@OnRender:
  00584	0f 2f c1	 comiss	 xmm0, xmm1
  00587	72 04		 jb	 SHORT $LN144@OnRender
  00589	33 f6		 xor	 esi, esi
  0058b	eb 1d		 jmp	 SHORT $LN145@OnRender
$LN144@OnRender:
  0058d	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  00595	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  0059d	0f 28 c1	 movaps	 xmm0, xmm1
  005a0	e8 00 00 00 00	 call	 __ftol3
  005a5	8b f0		 mov	 esi, eax
  005a7	0f 57 c0	 xorps	 xmm0, xmm0
$LN145@OnRender:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  005aa	f3 0f 10 4f 10	 movss	 xmm1, DWORD PTR [edi+16]
  005af	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  005b6	72 07		 jb	 SHORT $LN150@OnRender
  005b8	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  005bd	eb 21		 jmp	 SHORT $LN149@OnRender
$LN150@OnRender:
  005bf	0f 2f c1	 comiss	 xmm0, xmm1
  005c2	72 04		 jb	 SHORT $LN148@OnRender
  005c4	33 c0		 xor	 eax, eax
  005c6	eb 18		 jmp	 SHORT $LN149@OnRender
$LN148@OnRender:
  005c8	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  005d0	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  005d8	0f 28 c1	 movaps	 xmm0, xmm1
  005db	e8 00 00 00 00	 call	 __ftol3
$LN149@OnRender:

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  005e0	c1 e0 08	 shl	 eax, 8
  005e3	0f 57 c0	 xorps	 xmm0, xmm0
  005e6	0b 45 8c	 or	 eax, DWORD PTR _dwR$1$[ebp]
  005e9	c1 e0 08	 shl	 eax, 8
  005ec	0b 45 90	 or	 eax, DWORD PTR _dwG$1$[ebp]
  005ef	c1 e0 08	 shl	 eax, 8
  005f2	0b c6		 or	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 67   : 	if (0.0f == m_fRotation)

  005f4	0f 2e 47 34	 ucomiss xmm0, DWORD PTR [edi+52]
  005f8	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+84], eax
  005fb	9f		 lahf
  005fc	f6 c4 44	 test	 ah, 68			; 00000044H
  005ff	0f 8a 01 01 00
	00		 jp	 $LN9@OnRender

; 68   : 	{
; 69   : 		float fimgWidth = float(pImage->GetWidth()) * m_v2Scale.x;

  00605	8b 4d 84	 mov	 ecx, DWORD PTR _pImage$1$[ebp]
  00608	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImage@@QBEHXZ ; CGraphicImage::GetWidth

; 70   : 		float fimgHeight = float(pImage->GetHeight()) * m_v2Scale.y;

  0060d	8b 4d 84	 mov	 ecx, DWORD PTR _pImage$1$[ebp]
  00610	66 0f 6e c0	 movd	 xmm0, eax
  00614	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00617	f3 0f 59 47 1c	 mulss	 xmm0, DWORD PTR [edi+28]
  0061c	f3 0f 11 45 80	 movss	 DWORD PTR _fimgWidth$1$[ebp], xmm0
  00621	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImage@@QBEHXZ ; CGraphicImage::GetHeight
  00626	66 0f 6e 5f 38	 movd	 xmm3, DWORD PTR [edi+56]

; 71   : 
; 72   : 		vertices[0].position.x -= m_RenderingRect.left;

  0062b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _vertices$[ebp]
  00630	66 0f 6e 4f 3c	 movd	 xmm1, DWORD PTR [edi+60]
  00635	66 0f 6e 57 40	 movd	 xmm2, DWORD PTR [edi+64]
  0063a	0f 5b db	 cvtdq2ps xmm3, xmm3

; 73   : 		vertices[0].position.y -= m_RenderingRect.top;

  0063d	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00640	f3 0f 5c c3	 subss	 xmm0, xmm3
  00644	f3 0f 10 6f 20	 movss	 xmm5, DWORD PTR [edi+32]

; 74   : 		vertices[1].position.x += fimgWidth + m_RenderingRect.right;

  00649	0f 5b d2	 cvtdq2ps xmm2, xmm2
  0064c	f3 0f 11 45 9c	 movss	 DWORD PTR _vertices$[ebp], xmm0
  00651	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _vertices$[ebp+4]
  00656	f3 0f 58 55 80	 addss	 xmm2, DWORD PTR _fimgWidth$1$[ebp]
  0065b	f3 0f 5c c1	 subss	 xmm0, xmm1
  0065f	66 0f 6e e0	 movd	 xmm4, eax
  00663	0f 5b e4	 cvtdq2ps xmm4, xmm4
  00666	f3 0f 11 45 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm0
  0066b	0f 28 c2	 movaps	 xmm0, xmm2
  0066e	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _vertices$[ebp+24]
  00673	f3 0f 59 e5	 mulss	 xmm4, xmm5
  00677	f3 0f 11 45 b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm0

; 75   : 		vertices[1].position.y -= m_RenderingRect.top;

  0067c	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _vertices$[ebp+28]
  00681	f3 0f 5c c1	 subss	 xmm0, xmm1
  00685	66 0f 6e 4f 44	 movd	 xmm1, DWORD PTR [edi+68]

; 76   : 		vertices[2].position.x -= m_RenderingRect.left;
; 77   : 		vertices[2].position.y += fimgHeight + m_RenderingRect.bottom;

  0068a	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0068d	f3 0f 11 45 b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm0
  00692	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _vertices$[ebp+48]
  00697	f3 0f 58 cc	 addss	 xmm1, xmm4
  0069b	f3 0f 5c c3	 subss	 xmm0, xmm3
  0069f	f3 0f 11 45 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm0
  006a4	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _vertices$[ebp+52]
  006a9	f3 0f 58 c1	 addss	 xmm0, xmm1
  006ad	f3 0f 11 45 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm0

; 78   : 		vertices[3].position.x += fimgWidth + m_RenderingRect.right;

  006b2	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _vertices$[ebp+72]
  006b7	f3 0f 58 c2	 addss	 xmm0, xmm2
  006bb	f3 0f 11 45 e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm0

; 79   : 		vertices[3].position.y += fimgHeight + m_RenderingRect.bottom;

  006c0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _vertices$[ebp+76]
  006c5	f3 0f 58 c1	 addss	 xmm0, xmm1

; 80   : 		if ((0.0f < m_v2Scale.x && 0.0f > m_v2Scale.y) || (0.0f > m_v2Scale.x && 0.0f < m_v2Scale.y)) {

  006c9	f3 0f 10 4f 1c	 movss	 xmm1, DWORD PTR [edi+28]
  006ce	f3 0f 11 45 e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm0
  006d3	0f 57 c0	 xorps	 xmm0, xmm0
  006d6	0f 2f c8	 comiss	 xmm1, xmm0
  006d9	76 05		 jbe	 SHORT $LN13@OnRender
  006db	0f 2f c5	 comiss	 xmm0, xmm5
  006de	77 12		 ja	 SHORT $LN12@OnRender
$LN13@OnRender:
  006e0	0f 2f c1	 comiss	 xmm0, xmm1
  006e3	0f 86 cb 01 00
	00		 jbe	 $LN10@OnRender
  006e9	0f 2f e8	 comiss	 xmm5, xmm0
  006ec	0f 86 c2 01 00
	00		 jbe	 $LN10@OnRender
$LN12@OnRender:

; 81   : 			STATEMANAGER.SetRenderState(D3DRS_CULLMODE, D3DCULL_CCW);

  006f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  006f8	6a 03		 push	 3
  006fa	6a 16		 push	 22			; 00000016H
  006fc	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 82   : 		}
; 83   : 	}

  00701	e9 ae 01 00 00	 jmp	 $LN10@OnRender
$LN9@OnRender:

; 84   : 	else
; 85   : 	{
; 86   : 		float fimgHalfWidth = float(pImage->GetWidth())/2.0f * m_v2Scale.x;

  00706	8b 75 84	 mov	 esi, DWORD PTR _pImage$1$[ebp]
  00709	8b ce		 mov	 ecx, esi
  0070b	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImage@@QBEHXZ ; CGraphicImage::GetWidth

; 87   : 		float fimgHalfHeight = float(pImage->GetHeight())/2.0f * m_v2Scale.y;

  00710	8b ce		 mov	 ecx, esi
  00712	66 0f 6e c0	 movd	 xmm0, eax
  00716	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00719	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00721	f3 0f 59 47 1c	 mulss	 xmm0, DWORD PTR [edi+28]
  00726	f3 0f 11 45 84	 movss	 DWORD PTR _fimgHalfWidth$1$[ebp], xmm0
  0072b	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImage@@QBEHXZ ; CGraphicImage::GetHeight
  00730	66 0f 6e c0	 movd	 xmm0, eax
  00734	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00737	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0073f	f3 0f 59 47 20	 mulss	 xmm0, DWORD PTR [edi+32]
  00744	f3 0f 11 45 80	 movss	 DWORD PTR _fimgHalfHeight$1$[ebp], xmm0

; 92   : 			vertices[i].position.y += m_v2Origin.y;
; 93   : 		}
; 94   : 
; 95   : 		float fRadian = D3DXToRadian(m_fRotation);

  00749	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]
  0074e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  00756	0f 5a c0	 cvtps2pd xmm0, xmm0
  00759	f2 0f 11 85 70
	ff ff ff	 movsd	 QWORD PTR tv1965[ebp], xmm0
  00761	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00766	0f 57 c9	 xorps	 xmm1, xmm1
  00769	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 96   : 		vertices[0].position.x += (-fimgHalfWidth*cosf(fRadian)) - (-fimgHalfHeight*sinf(fRadian));

  0076d	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _fimgHalfWidth$1$[ebp]
  00772	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00779	f3 0f 11 45 88	 movss	 DWORD PTR tv1927[ebp], xmm0
  0077e	f3 0f 59 c1	 mulss	 xmm0, xmm1
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  00782	f3 0f 11 4d 98	 movss	 DWORD PTR tv1940[ebp], xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 96   : 		vertices[0].position.x += (-fimgHalfWidth*cosf(fRadian)) - (-fimgHalfHeight*sinf(fRadian));

  00787	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR tv1936[ebp], xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  0078f	f2 0f 10 85 70
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1965[ebp]
  00797	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 96   : 		vertices[0].position.x += (-fimgHalfWidth*cosf(fRadian)) - (-fimgHalfHeight*sinf(fRadian));

  0079c	f3 0f 10 7d 80	 movss	 xmm7, DWORD PTR _fimgHalfHeight$1$[ebp]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  007a1	0f 57 ed	 xorps	 xmm5, xmm5
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 96   : 		vertices[0].position.x += (-fimgHalfWidth*cosf(fRadian)) - (-fimgHalfHeight*sinf(fRadian));

  007a4	f3 0f 10 a5 78
	ff ff ff	 movss	 xmm4, DWORD PTR tv1936[ebp]
  007ac	0f 28 d7	 movaps	 xmm2, xmm7
  007af	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  007b6	0f 28 cc	 movaps	 xmm1, xmm4
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  007b9	f2 0f 5a e8	 cvtsd2ss xmm5, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 91   : 			vertices[i].position.x += m_v2Origin.x;

  007bd	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _vertices$[ebp]
  007c2	f3 0f 58 47 2c	 addss	 xmm0, DWORD PTR [edi+44]

; 97   : 		vertices[0].position.y += (-fimgHalfWidth*sinf(fRadian)) + (-fimgHalfHeight*cosf(fRadian));

  007c7	f3 0f 10 5d 98	 movss	 xmm3, DWORD PTR tv1940[ebp]
  007cc	f3 0f 59 d5	 mulss	 xmm2, xmm5
  007d0	f3 0f 59 df	 mulss	 xmm3, xmm7
  007d4	f3 0f 5c ca	 subss	 xmm1, xmm2
  007d8	f3 0f 58 c8	 addss	 xmm1, xmm0
  007dc	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _vertices$[ebp+4]
  007e1	f3 0f 58 47 30	 addss	 xmm0, DWORD PTR [edi+48]
  007e6	f3 0f 11 4d 9c	 movss	 DWORD PTR _vertices$[ebp], xmm1
  007eb	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR tv1927[ebp]
  007f0	f3 0f 59 cd	 mulss	 xmm1, xmm5
  007f4	f3 0f 5c cb	 subss	 xmm1, xmm3
  007f8	f3 0f 58 c8	 addss	 xmm1, xmm0

; 98   : 		vertices[1].position.x += (+fimgHalfWidth*cosf(fRadian)) - (-fimgHalfHeight*sinf(fRadian));

  007fc	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR tv1940[ebp]
  00801	f3 0f 59 45 84	 mulss	 xmm0, DWORD PTR _fimgHalfWidth$1$[ebp]
  00806	f3 0f 11 4d a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm1
  0080b	0f 28 c8	 movaps	 xmm1, xmm0
  0080e	f3 0f 11 45 98	 movss	 DWORD PTR tv1940[ebp], xmm0
  00813	f3 0f 5c ca	 subss	 xmm1, xmm2
  00817	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _vertices$[ebp+24]

; 99   : 		vertices[1].position.y += (+fimgHalfWidth*sinf(fRadian)) + (-fimgHalfHeight*cosf(fRadian));

  0081c	0f 28 d5	 movaps	 xmm2, xmm5
  0081f	f3 0f 58 47 2c	 addss	 xmm0, DWORD PTR [edi+44]
  00824	f3 0f 59 55 84	 mulss	 xmm2, DWORD PTR _fimgHalfWidth$1$[ebp]

; 100  : 		vertices[2].position.x += (-fimgHalfWidth*cosf(fRadian)) - (+fimgHalfHeight*sinf(fRadian));

  00829	f3 0f 59 ef	 mulss	 xmm5, xmm7
  0082d	f3 0f 58 c8	 addss	 xmm1, xmm0
  00831	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _vertices$[ebp+28]
  00836	f3 0f 58 47 30	 addss	 xmm0, DWORD PTR [edi+48]
  0083b	f3 0f 5c e5	 subss	 xmm4, xmm5
  0083f	f3 0f 11 4d b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm1
  00844	0f 28 ca	 movaps	 xmm1, xmm2
  00847	f3 0f 5c cb	 subss	 xmm1, xmm3
  0084b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0084f	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _vertices$[ebp+48]
  00854	f3 0f 58 47 2c	 addss	 xmm0, DWORD PTR [edi+44]
  00859	f3 0f 11 4d b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm1

; 101  : 		vertices[2].position.y += (-fimgHalfWidth*sinf(fRadian)) + (+fimgHalfHeight*cosf(fRadian));

  0085e	0f 28 cb	 movaps	 xmm1, xmm3
  00861	f3 0f 58 e0	 addss	 xmm4, xmm0
  00865	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _vertices$[ebp+52]
  0086a	f3 0f 58 47 30	 addss	 xmm0, DWORD PTR [edi+48]
  0086f	f3 0f 5c ca	 subss	 xmm1, xmm2
  00873	f3 0f 11 65 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm4
  00878	f3 0f 58 c8	 addss	 xmm1, xmm0
  0087c	f3 0f 11 4d d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm1

; 102  : 		vertices[3].position.x += (+fimgHalfWidth*cosf(fRadian)) - (+fimgHalfHeight*sinf(fRadian));
; 103  : 		vertices[3].position.y += (+fimgHalfWidth*sinf(fRadian)) + (+fimgHalfHeight*cosf(fRadian));

  00881	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _vertices$[ebp+72]
  00886	f3 0f 58 d3	 addss	 xmm2, xmm3
  0088a	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR tv1940[ebp]
  0088f	f3 0f 58 47 2c	 addss	 xmm0, DWORD PTR [edi+44]
  00894	f3 0f 5c cd	 subss	 xmm1, xmm5
  00898	f3 0f 58 c8	 addss	 xmm1, xmm0
  0089c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _vertices$[ebp+76]
  008a1	f3 0f 58 47 30	 addss	 xmm0, DWORD PTR [edi+48]
  008a6	f3 0f 11 4d e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm1
  008ab	f3 0f 58 d0	 addss	 xmm2, xmm0
  008af	f3 0f 11 55 e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm2
$LN10@OnRender:

; 104  : 	}
; 105  : 
; 106  : 	switch (m_iRenderingMode)

  008b4	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  008b7	83 e8 01	 sub	 eax, 1
  008ba	74 1d		 je	 SHORT $LN14@OnRender
  008bc	83 e8 01	 sub	 eax, 1
  008bf	74 18		 je	 SHORT $LN14@OnRender
  008c1	83 e8 01	 sub	 eax, 1
  008c4	75 31		 jne	 SHORT $LN5@OnRender

; 112  : 			break;
; 113  : 		case RENDERING_MODE_MODULATE:
; 114  : 			STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_ZERO);

  008c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  008cc	6a 01		 push	 1
  008ce	6a 13		 push	 19			; 00000013H
  008d0	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 115  : 			STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_SRCCOLOR);

  008d5	6a 03		 push	 3
  008d7	eb 11		 jmp	 SHORT $LN209@OnRender
$LN14@OnRender:

; 107  : 	{
; 108  : 		case RENDERING_MODE_SCREEN:
; 109  : 		case RENDERING_MODE_COLOR_DODGE:
; 110  : 			STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_INVDESTCOLOR);

  008d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  008df	6a 0a		 push	 10			; 0000000aH
  008e1	6a 13		 push	 19			; 00000013H
  008e3	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 111  : 			STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);

  008e8	6a 02		 push	 2
$LN209@OnRender:

; 116  : 			break;
; 117  : 	}
; 118  : 
; 119  : 	if (CGraphicBase::SetPDTStream(vertices, 4))

  008ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  008f0	6a 14		 push	 20			; 00000014H
  008f2	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState
$LN5@OnRender:
  008f7	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  008fa	6a 04		 push	 4
  008fc	50		 push	 eax
  008fd	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  00902	83 c4 08	 add	 esp, 8
  00905	84 c0		 test	 al, al
  00907	74 59		 je	 SHORT $LN17@OnRender

; 120  : 	{
; 121  : 		CGraphicBase::SetDefaultIndexBuffer(CGraphicBase::DEFAULT_IB_FILL_RECT);

  00909	6a 05		 push	 5
  0090b	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 123  : 		STATEMANAGER.SetTexture(0, pTexture->GetD3DTexture());

  00910	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _pTexture$1$[ebp]
  00916	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00919	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp

; 123  : 		STATEMANAGER.SetTexture(0, pTexture->GetD3DTexture());

  0091f	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00924	50		 push	 eax
  00925	6a 00		 push	 0
  00927	8b ce		 mov	 ecx, esi
  00929	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 124  : 		STATEMANAGER.SetTexture(1, NULL);

  0092e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00934	6a 00		 push	 0
  00936	6a 01		 push	 1
  00938	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 125  : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  0093d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00943	68 42 01 00 00	 push	 322			; 00000142H
  00948	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 126  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 4, 0, 2);

  0094d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00953	6a 02		 push	 2
  00955	6a 00		 push	 0
  00957	6a 04		 push	 4
  00959	6a 00		 push	 0
  0095b	6a 04		 push	 4
  0095d	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN17@OnRender:

; 127  : 	}
; 128  : 	//STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, c_FillRectIndices, D3DFMT_INDEX16, vertices, sizeof(TPDTVertex));
; 129  : 	/////////////////////////////////////////////////////////////
; 130  : 
; 131  : 	switch (m_iRenderingMode)

  00962	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  00965	5f		 pop	 edi
  00966	5e		 pop	 esi
  00967	83 e8 01	 sub	 eax, 1
  0096a	74 0a		 je	 SHORT $LN18@OnRender
  0096c	83 e8 01	 sub	 eax, 1
  0096f	74 05		 je	 SHORT $LN18@OnRender
  00971	83 e8 01	 sub	 eax, 1
  00974	75 1a		 jne	 SHORT $LN7@OnRender
$LN18@OnRender:

; 132  : 	{
; 133  : 		case RENDERING_MODE_SCREEN:
; 134  : 		case RENDERING_MODE_COLOR_DODGE:
; 135  : 		case RENDERING_MODE_MODULATE:
; 136  : 			STATEMANAGER.RestoreRenderState(D3DRS_SRCBLEND);

  00976	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0097c	6a 13		 push	 19			; 00000013H
  0097e	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 137  : 			STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  00983	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00989	6a 14		 push	 20			; 00000014H
  0098b	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
$LN7@OnRender:

; 138  : 			break;
; 139  : 	}
; 140  : 	STATEMANAGER.SetRenderState(D3DRS_CULLMODE, D3DCULL_CW);

  00990	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00996	6a 02		 push	 2
  00998	6a 16		 push	 22			; 00000016H
  0099a	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 141  : }

  0099f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009a2	33 cd		 xor	 ecx, ebp
  009a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009a9	8b e5		 mov	 esp, ebp
  009ab	5d		 pop	 ebp
  009ac	c3		 ret	 0
?OnRender@CGraphicExpandedImageInstance@@MAEXXZ ENDP	; CGraphicExpandedImageInstance::OnRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?Initialize@CGraphicExpandedImageInstance@@IAEXXZ
_TEXT	SEGMENT
?Initialize@CGraphicExpandedImageInstance@@IAEXXZ PROC	; CGraphicExpandedImageInstance::Initialize, COMDAT
; _this$ = ecx

; 212  : {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 213  : 	m_iRenderingMode = RENDERING_MODE_NORMAL;

  00003	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 214  : 	m_fDepth = 0.0f;

  0000a	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 215  : 	m_v2Origin.x = m_v2Origin.y = 0.0f;

  00011	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  00018	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 216  : 	m_v2Scale.x = m_v2Scale.y = 1.0f;

  0001f	c7 41 20 00 00
	80 3f		 mov	 DWORD PTR [ecx+32], 1065353216 ; 3f800000H
  00026	c7 41 1c 00 00
	80 3f		 mov	 DWORD PTR [ecx+28], 1065353216 ; 3f800000H

; 217  : 	m_fRotation = 0.0f;

  0002d	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 218  : 	memset(&m_RenderingRect, 0, sizeof(RECT));

  00034	0f 11 41 38	 movups	 XMMWORD PTR [ecx+56], xmm0

; 219  : }

  00038	c3		 ret	 0
?Initialize@CGraphicExpandedImageInstance@@IAEXXZ ENDP	; CGraphicExpandedImageInstance::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?SetRenderingMode@CGraphicExpandedImageInstance@@QAEXH@Z
_TEXT	SEGMENT
_iMode$ = 8						; size = 4
?SetRenderingMode@CGraphicExpandedImageInstance@@QAEXH@Z PROC ; CGraphicExpandedImageInstance::SetRenderingMode, COMDAT
; _this$ = ecx

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 186  : 	m_iRenderingMode = iMode;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iMode$[ebp]
  00006	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 187  : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetRenderingMode@CGraphicExpandedImageInstance@@QAEXH@Z ENDP ; CGraphicExpandedImageInstance::SetRenderingMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?SetRenderingRect@CGraphicExpandedImageInstance@@QAEXMMMM@Z
_TEXT	SEGMENT
_fWidth$1$ = -4						; size = 4
_fLeft$ = 8						; size = 4
_fTop$ = 12						; size = 4
_fRight$ = 16						; size = 4
_fBottom$ = 20						; size = 4
?SetRenderingRect@CGraphicExpandedImageInstance@@QAEXMMMM@Z PROC ; CGraphicExpandedImageInstance::SetRenderingRect, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 172  : 	if (IsEmpty())

  00007	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0000c	84 c0		 test	 al, al
  0000e	75 5c		 jne	 SHORT $LN1@SetRenderi

; 173  : 		return;
; 174  : 
; 175  : 	float fWidth = float(GetWidth());

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetWidth

; 176  : 	float fHeight = float(GetHeight());

  00017	8b ce		 mov	 ecx, esi
  00019	66 0f 6e c0	 movd	 xmm0, eax
  0001d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00020	f3 0f 11 45 fc	 movss	 DWORD PTR _fWidth$1$[ebp], xmm0
  00025	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetHeight

; 177  : 
; 178  : 	m_RenderingRect.left = fWidth * fLeft;

  0002a	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _fWidth$1$[ebp]
  0002f	0f 28 c1	 movaps	 xmm0, xmm1

; 179  : 	m_RenderingRect.top = fHeight * fTop;
; 180  : 	m_RenderingRect.right = fWidth * fRight;

  00032	f3 0f 59 4d 10	 mulss	 xmm1, DWORD PTR _fRight$[ebp]
  00037	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _fLeft$[ebp]
  0003c	66 0f 6e d0	 movd	 xmm2, eax
  00040	0f 5b d2	 cvtdq2ps xmm2, xmm2
  00043	f3 0f 2c c0	 cvttss2si eax, xmm0
  00047	0f 28 c2	 movaps	 xmm0, xmm2

; 181  : 	m_RenderingRect.bottom = fHeight * fBottom;

  0004a	f3 0f 59 55 14	 mulss	 xmm2, DWORD PTR _fBottom$[ebp]
  0004f	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00052	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _fTop$[ebp]
  00057	f3 0f 2c c0	 cvttss2si eax, xmm0
  0005b	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  0005e	f3 0f 2c c1	 cvttss2si eax, xmm1
  00062	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00065	f3 0f 2c c2	 cvttss2si eax, xmm2
  00069	89 46 44	 mov	 DWORD PTR [esi+68], eax
$LN1@SetRenderi:
  0006c	5e		 pop	 esi

; 182  : }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 10 00	 ret	 16			; 00000010H
?SetRenderingRect@CGraphicExpandedImageInstance@@QAEXMMMM@Z ENDP ; CGraphicExpandedImageInstance::SetRenderingRect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?SetScale@CGraphicExpandedImageInstance@@UAEXMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
?SetScale@CGraphicExpandedImageInstance@@UAEXMM@Z PROC	; CGraphicExpandedImageInstance::SetScale, COMDAT
; _this$ = ecx

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 166  : 	m_v2Scale.x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0

; 167  : 	m_v2Scale.y = fy;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00012	f3 0f 11 41 20	 movss	 DWORD PTR [ecx+32], xmm0

; 168  : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?SetScale@CGraphicExpandedImageInstance@@UAEXMM@Z ENDP	; CGraphicExpandedImageInstance::SetScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?SetRotation@CGraphicExpandedImageInstance@@QAEXM@Z
_TEXT	SEGMENT
_fRotation$ = 8						; size = 4
?SetRotation@CGraphicExpandedImageInstance@@QAEXM@Z PROC ; CGraphicExpandedImageInstance::SetRotation, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 161  : 	m_fRotation = fRotation;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRotation$[ebp]
  00008	f3 0f 11 41 34	 movss	 DWORD PTR [ecx+52], xmm0

; 162  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetRotation@CGraphicExpandedImageInstance@@QAEXM@Z ENDP ; CGraphicExpandedImageInstance::SetRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?SetOrigin@CGraphicExpandedImageInstance@@QAEXMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
?SetOrigin@CGraphicExpandedImageInstance@@QAEXMM@Z PROC	; CGraphicExpandedImageInstance::SetOrigin, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 155  : 	m_v2Origin.x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	f3 0f 11 41 2c	 movss	 DWORD PTR [ecx+44], xmm0

; 156  : 	m_v2Origin.y = fy;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00012	f3 0f 11 41 30	 movss	 DWORD PTR [ecx+48], xmm0

; 157  : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?SetOrigin@CGraphicExpandedImageInstance@@QAEXMM@Z ENDP	; CGraphicExpandedImageInstance::SetOrigin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?SetOrigin@CGraphicExpandedImageInstance@@QAEXXZ
_TEXT	SEGMENT
tv68 = -4						; size = 4
?SetOrigin@CGraphicExpandedImageInstance@@QAEXXZ PROC	; CGraphicExpandedImageInstance::SetOrigin, COMDAT
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 150  : 	SetOrigin(float(GetWidth()) / 2.0f, float(GetHeight()) / 2.0f);

  00007	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetHeight
  0000c	8b ce		 mov	 ecx, esi
  0000e	66 0f 6e c0	 movd	 xmm0, eax
  00012	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00015	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0001d	f3 0f 11 45 fc	 movss	 DWORD PTR tv68[ebp], xmm0
  00022	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetWidth
  00027	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR tv68[ebp]
  0002c	83 ec 08	 sub	 esp, 8
  0002f	8b ce		 mov	 ecx, esi
  00031	66 0f 6e c0	 movd	 xmm0, eax
  00035	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00038	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  0003e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	e8 00 00 00 00	 call	 ?SetOrigin@CGraphicExpandedImageInstance@@QAEXMM@Z ; CGraphicExpandedImageInstance::SetOrigin
  00050	5e		 pop	 esi

; 151  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?SetOrigin@CGraphicExpandedImageInstance@@QAEXXZ ENDP	; CGraphicExpandedImageInstance::SetOrigin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?SetDepth@CGraphicExpandedImageInstance@@QAEXM@Z
_TEXT	SEGMENT
_fDepth$ = 8						; size = 4
?SetDepth@CGraphicExpandedImageInstance@@QAEXM@Z PROC	; CGraphicExpandedImageInstance::SetDepth, COMDAT
; _this$ = ecx

; 144  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 145  : 	m_fDepth = fDepth;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDepth$[ebp]
  00008	f3 0f 11 41 28	 movss	 DWORD PTR [ecx+40], xmm0

; 146  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetDepth@CGraphicExpandedImageInstance@@QAEXM@Z ENDP	; CGraphicExpandedImageInstance::SetDepth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?Destroy@CGraphicExpandedImageInstance@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CGraphicExpandedImageInstance@@QAEXXZ PROC	; CGraphicExpandedImageInstance::Destroy, COMDAT
; _this$ = ecx

; 222  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 223  : 	CGraphicImageInstance::Destroy();

  00003	e8 00 00 00 00	 call	 ?Destroy@CGraphicImageInstance@@QAEXXZ ; CGraphicImageInstance::Destroy

; 224  : 	Initialize();

  00008	8b ce		 mov	 ecx, esi
  0000a	5e		 pop	 esi
  0000b	e9 00 00 00 00	 jmp	 ?Initialize@CGraphicExpandedImageInstance@@IAEXXZ ; CGraphicExpandedImageInstance::Initialize
?Destroy@CGraphicExpandedImageInstance@@QAEXXZ ENDP	; CGraphicExpandedImageInstance::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ??1CGraphicExpandedImageInstance@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicExpandedImageInstance@@UAE@XZ PROC		; CGraphicExpandedImageInstance::~CGraphicExpandedImageInstance, COMDAT
; _this$ = ecx

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicExpandedImageInstance@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicExpandedImageInstance@@6B@

; 234  : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CGraphicExpandedImageInstance@@QAEXXZ ; CGraphicExpandedImageInstance::Destroy

; 235  : }

  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  00037	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00041	59		 pop	 ecx
  00042	5e		 pop	 esi
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
  0004a	cc		 int	 3
  0004b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicExpandedImageInstance@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicExpandedImageInstance@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicExpandedImageInstance@@UAE@XZ ENDP		; CGraphicExpandedImageInstance::~CGraphicExpandedImageInstance
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ??0CGraphicExpandedImageInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGraphicExpandedImageInstance@@QAE@XZ PROC		; CGraphicExpandedImageInstance::CGraphicExpandedImageInstance, COMDAT
; _this$ = ecx

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance

; 229  : 	Initialize();

  0000f	8b ce		 mov	 ecx, esi
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicExpandedImageInstance@@6B@
  00017	e8 00 00 00 00	 call	 ?Initialize@CGraphicExpandedImageInstance@@IAEXXZ ; CGraphicExpandedImageInstance::Initialize

; 230  : }

  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??0CGraphicExpandedImageInstance@@QAE@XZ ENDP		; CGraphicExpandedImageInstance::CGraphicExpandedImageInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpExpandedImageInstance.cpp
;	COMDAT ?Type@CGraphicExpandedImageInstance@@SAKXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Type@CGraphicExpandedImageInstance@@SAKXZ PROC		; CGraphicExpandedImageInstance::Type, COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Type@CGraphicExpandedImageInstance@@SAKXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 191  : 	static DWORD s_dwType = GetCRC32("CGraphicExpandedImageInstance", strlen("CGraphicExpandedImageInstance"));

  00022	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0002e	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Type@CGraphicExpandedImageInstance@@SAKXZ@4HA
  00036	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0003c	7f 14		 jg	 SHORT $LN9@Type
$LN5@Type:

; 192  : 	return (s_dwType);
; 193  : }

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_dwType@?1??Type@CGraphicExpandedImageInstance@@SAKXZ@4KA
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN9@Type:

; 191  : 	static DWORD s_dwType = GetCRC32("CGraphicExpandedImageInstance", strlen("CGraphicExpandedImageInstance"));

  00052	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicExpandedImageInstance@@SAKXZ@4HA
  00057	e8 00 00 00 00	 call	 __Init_thread_header
  0005c	83 c4 04	 add	 esp, 4
  0005f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Type@CGraphicExpandedImageInstance@@SAKXZ@4HA, -1
  00066	75 d6		 jne	 SHORT $LN5@Type
  00068	6a 1d		 push	 29			; 0000001dH
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@COPDODEE@CGraphicExpandedImageInstance@
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00076	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  0007b	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicExpandedImageInstance@@SAKXZ@4HA
  00080	a3 00 00 00 00	 mov	 DWORD PTR ?s_dwType@?1??Type@CGraphicExpandedImageInstance@@SAKXZ@4KA, eax
  00085	e8 00 00 00 00	 call	 __Init_thread_footer
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	eb af		 jmp	 SHORT $LN5@Type
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Type@CGraphicExpandedImageInstance@@SAKXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicExpandedImageInstance@@SAKXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Type@CGraphicExpandedImageInstance@@SAKXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Type@CGraphicExpandedImageInstance@@SAKXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Type@CGraphicExpandedImageInstance@@SAKXZ ENDP		; CGraphicExpandedImageInstance::Type
; Function compile flags: /Ogtp
;	COMDAT ??0SPDTVertex@@QAE@XZ
_TEXT	SEGMENT
??0SPDTVertex@@QAE@XZ PROC				; SPDTVertex::SPDTVertex, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SPDTVertex@@QAE@XZ ENDP				; SPDTVertex::SPDTVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
