; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\TextFileLoader.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
PUBLIC	?ms_isCacheMode@CTextFileLoader@@1_NA		; CTextFileLoader::ms_isCacheMode
PUBLIC	??_7?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@ ; CDynamicPool<CTextFileLoader::SGroupNode>::`vftable'
PUBLIC	??_G?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAEPAXI@Z ; CDynamicPool<CTextFileLoader::SGroupNode>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@ ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@USGroupNode@CTextFileLoader@@@@@8 ; CDynamicPool<CTextFileLoader::SGroupNode> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAEPAXI@Z:PROC ; CDynamicPool<CTextFileLoader::SGroupNode>::`vector deleting destructor'
_BSS	SEGMENT
?ms_isCacheMode@CTextFileLoader@@1_NA DB 01H DUP (?)	; CTextFileLoader::ms_isCacheMode
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@USGroupNode@CTextFileLoader@@@@@8 ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8 DD 00H ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@USGroupNode@CTextFileLoader@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@USGroupNode@CTextFileLoader@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CTextFileLoader::SGroupNode> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@USGroupNode@CTextFileLoader@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@ DD 00H ; CDynamicPool<CTextFileLoader::SGroupNode>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@USGroupNode@CTextFileLoader@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@USGroupNode@CTextFileLoader@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@ DD FLAT:??_R4?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@ ; CDynamicPool<CTextFileLoader::SGroupNode>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
PUBLIC	?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ; CTextFileLoader::SGroupNode::GenNameKey
PUBLIC	?SetGroupName@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::SGroupNode::SetGroupName
PUBLIC	?IsGroupNameKey@SGroupNode@CTextFileLoader@@QAE_NK@Z ; CTextFileLoader::SGroupNode::IsGroupNameKey
PUBLIC	?GetGroupName@SGroupNode@CTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CTextFileLoader::SGroupNode::GetGroupName
PUBLIC	?GetTokenVector@SGroupNode@CTextFileLoader@@QAEPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z ; CTextFileLoader::SGroupNode::GetTokenVector
PUBLIC	?IsExistTokenVector@SGroupNode@CTextFileLoader@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::SGroupNode::IsExistTokenVector
PUBLIC	?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z ; CTextFileLoader::SGroupNode::InsertTokenVector
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
PUBLIC	??1?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAE@XZ ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::~vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >
PUBLIC	?push_back@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEXABQAUSGroupNode@CTextFileLoader@@@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::push_back
PUBLIC	?_Change_array@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXQAPAUSGroupNode@CTextFileLoader@@II@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@CAXXZ ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Xlength
PUBLIC	?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ	; CTextFileLoader::SGroupNode::New
PUBLIC	?Delete@SGroupNode@CTextFileLoader@@SAXPAU12@@Z	; CTextFileLoader::SGroupNode::Delete
PUBLIC	?DestroySystem@SGroupNode@CTextFileLoader@@SAXXZ ; CTextFileLoader::SGroupNode::DestroySystem
PUBLIC	??0SGroupNode@CTextFileLoader@@QAE@XZ		; CTextFileLoader::SGroupNode::SGroupNode
PUBLIC	??1SGroupNode@CTextFileLoader@@QAE@XZ		; CTextFileLoader::SGroupNode::~SGroupNode
PUBLIC	?DestroySystem@CTextFileLoader@@SAXXZ		; CTextFileLoader::DestroySystem
PUBLIC	?SetCacheMode@CTextFileLoader@@SAXXZ		; CTextFileLoader::SetCacheMode
PUBLIC	?Cache@CTextFileLoader@@SAPAV1@PBD@Z		; CTextFileLoader::Cache
PUBLIC	??0CTextFileLoader@@QAE@XZ			; CTextFileLoader::CTextFileLoader
PUBLIC	??1CTextFileLoader@@UAE@XZ			; CTextFileLoader::~CTextFileLoader
PUBLIC	?Destroy@CTextFileLoader@@QAEXXZ		; CTextFileLoader::Destroy
PUBLIC	?Load@CTextFileLoader@@QAE_NPBD@Z		; CTextFileLoader::Load
PUBLIC	?GetFileName@CTextFileLoader@@QAEPBDXZ		; CTextFileLoader::GetFileName
PUBLIC	?IsEmpty@CTextFileLoader@@QAE_NXZ		; CTextFileLoader::IsEmpty
PUBLIC	?SetTop@CTextFileLoader@@QAEXXZ			; CTextFileLoader::SetTop
PUBLIC	?GetChildNodeCount@CTextFileLoader@@QAEKXZ	; CTextFileLoader::GetChildNodeCount
PUBLIC	?SetChildNode@CTextFileLoader@@QAEHPBD@Z	; CTextFileLoader::SetChildNode
PUBLIC	?SetChildNode@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ; CTextFileLoader::SetChildNode
PUBLIC	?SetChildNode@CTextFileLoader@@QAEHK@Z		; CTextFileLoader::SetChildNode
PUBLIC	?SetParentNode@CTextFileLoader@@QAEHXZ		; CTextFileLoader::SetParentNode
PUBLIC	?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::GetCurrentNodeName
PUBLIC	?IsToken@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::IsToken
PUBLIC	?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
PUBLIC	?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenBoolean
PUBLIC	?GetTokenByte@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE@Z ; CTextFileLoader::GetTokenByte
PUBLIC	?GetTokenWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ; CTextFileLoader::GetTokenWord
PUBLIC	?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
PUBLIC	?GetTokenDoubleWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAK@Z ; CTextFileLoader::GetTokenDoubleWord
PUBLIC	?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
PUBLIC	?GetTokenVector2@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR2@@@Z ; CTextFileLoader::GetTokenVector2
PUBLIC	?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ; CTextFileLoader::GetTokenVector3
PUBLIC	?GetTokenVector4@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR4@@@Z ; CTextFileLoader::GetTokenVector4
PUBLIC	?GetTokenPosition@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ; CTextFileLoader::GetTokenPosition
PUBLIC	?GetTokenQuaternion@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXQUATERNION@@@Z ; CTextFileLoader::GetTokenQuaternion
PUBLIC	?GetTokenDirection@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DVECTOR@@@Z ; CTextFileLoader::GetTokenDirection
PUBLIC	?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXCOLOR@@@Z ; CTextFileLoader::GetTokenColor
PUBLIC	?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DCOLORVALUE@@@Z ; CTextFileLoader::GetTokenColor
PUBLIC	?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ; CTextFileLoader::GetTokenString
PUBLIC	?__DestroyGroupNodeVector@CTextFileLoader@@IAEXXZ ; CTextFileLoader::__DestroyGroupNodeVector
PUBLIC	?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z ; CTextFileLoader::LoadGroup
PUBLIC	??_GCTextFileLoader@@UAEPAXI@Z			; CTextFileLoader::`scalar deleting destructor'
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Insert_node
PUBLIC	??1?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAE@XZ ; CDynamicPool<CTextFileLoader::SGroupNode>::~CDynamicPool<CTextFileLoader::SGroupNode>
PUBLIC	??1?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
PUBLIC	??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z ; std::_Copy_memmove<CTextFileLoader::SGroupNode * *,CTextFileLoader::SGroupNode * *>
PUBLIC	??1_Reallocation_guard@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocation_guard::~_Reallocation_guard
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$_Tidy_guard@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??$_Copy_memmove_tail@PAPAUSGroupNode@CTextFileLoader@@@std@@YAPAPAUSGroupNode@CTextFileLoader@@QBDQAPAU12@II@Z ; std::_Copy_memmove_tail<CTextFileLoader::SGroupNode * *>
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A ; CTextFileLoader::SGroupNode::ms_kPool
PUBLIC	?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
PUBLIC	??_7CTextFileLoader@@6B@			; CTextFileLoader::`vftable'
PUBLIC	??_C@_06FJKEMHGD@global@			; `string'
PUBLIC	??_C@_02OJDBNLEE@?5?7@				; `string'
PUBLIC	??_C@_0BI@BCFJNLGN@cannot?5find?5?$CC?5in?5?$CFs?3?$CFlu@ ; `string'
PUBLIC	??_C@_05MGJOOGAJ@group@				; `string'
PUBLIC	??_C@_04DONFEANM@list@				; `string'
PUBLIC	??_C@_0EP@OILOFBHI@CTextFileLoader?3?3LoadGroup?5?3?5mu@ ; `string'
PUBLIC	??_C@_06POANKNEN@?$CFs?$CF02u@			; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_R4CTextFileLoader@@6B@			; CTextFileLoader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTextFileLoader@@@8			; CTextFileLoader `RTTI Type Descriptor'
PUBLIC	??_R3CTextFileLoader@@8				; CTextFileLoader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTextFileLoader@@8				; CTextFileLoader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTextFileLoader@@8		; CTextFileLoader::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	__atoi64:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; stl_lowers
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	??0CMemoryTextFileLoader@@QAE@XZ:PROC		; CMemoryTextFileLoader::CMemoryTextFileLoader
EXTRN	??1CMemoryTextFileLoader@@UAE@XZ:PROC		; CMemoryTextFileLoader::~CMemoryTextFileLoader
EXTRN	?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z:PROC	; CMemoryTextFileLoader::Bind
EXTRN	?GetLineCount@CMemoryTextFileLoader@@QAEKXZ:PROC ; CMemoryTextFileLoader::GetLineCount
EXTRN	?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z:PROC ; CMemoryTextFileLoader::SplitLine
EXTRN	?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z:PROC ; CMemoryTextFileLoader::SplitLine2
EXTRN	??_ECTextFileLoader@@UAEPAXI@Z:PROC		; CTextFileLoader::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A DQ 01H DUP (?) ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kMap_dwNameKey_pkTextFileLoader$initializer$@CTextFileLoader@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ ; ??ms_kMap_dwNameKey_pkTextFileLoader$initializer$@CTextFileLoader@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CTextFileLoader@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTextFileLoader@@8 DD FLAT:??_R0?AVCTextFileLoader@@@8 ; CTextFileLoader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTextFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_R2CTextFileLoader@@8
rdata$r	SEGMENT
??_R2CTextFileLoader@@8 DD FLAT:??_R1A@?0A@EA@CTextFileLoader@@8 ; CTextFileLoader::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CTextFileLoader@@8
rdata$r	SEGMENT
??_R3CTextFileLoader@@8 DD 00H				; CTextFileLoader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CTextFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTextFileLoader@@@8
data$rs	SEGMENT
??_R0?AVCTextFileLoader@@@8 DD FLAT:??_7type_info@@6B@	; CTextFileLoader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTextFileLoader@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CTextFileLoader@@6B@
rdata$r	SEGMENT
??_R4CTextFileLoader@@6B@ DD 00H			; CTextFileLoader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTextFileLoader@@@8
	DD	FLAT:??_R3CTextFileLoader@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06POANKNEN@?$CFs?$CF02u@
CONST	SEGMENT
??_C@_06POANKNEN@?$CFs?$CF02u@ DB '%s%02u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@OILOFBHI@CTextFileLoader?3?3LoadGroup?5?3?5mu@
CONST	SEGMENT
??_C@_0EP@OILOFBHI@CTextFileLoader?3?3LoadGroup?5?3?5mu@ DB 'CTextFileLoa'
	DB	'der::LoadGroup : must have a value (filename: %s line: %d key'
	DB	': %s)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04DONFEANM@list@
CONST	SEGMENT
??_C@_04DONFEANM@list@ DB 'list', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MGJOOGAJ@group@
CONST	SEGMENT
??_C@_05MGJOOGAJ@group@ DB 'group', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BCFJNLGN@cannot?5find?5?$CC?5in?5?$CFs?3?$CFlu@
CONST	SEGMENT
??_C@_0BI@BCFJNLGN@cannot?5find?5?$CC?5in?5?$CFs?3?$CFlu@ DB 'cannot find'
	DB	' " in %s:%lu', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02OJDBNLEE@?5?7@
CONST	SEGMENT
??_C@_02OJDBNLEE@?5?7@ DB ' ', 09H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJKEMHGD@global@
CONST	SEGMENT
??_C@_06FJKEMHGD@global@ DB 'global', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CTextFileLoader@@6B@
CONST	SEGMENT
??_7CTextFileLoader@@6B@ DD FLAT:??_R4CTextFileLoader@@6B@ ; CTextFileLoader::`vftable'
	DD	FLAT:??_ECTextFileLoader@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A DD FLAT:??_7?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@ ; CTextFileLoader::SGroupNode::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAKAAPAVCTextFileLoader@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@AAKAAPAVCTextFileLoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAKAAPAVCTextFileLoader@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@AAKAAPAVCTextFileLoader@@@Z$1
__ehfuncinfo$??$?0AAKAAPAVCTextFileLoader@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@AAKAAPAVCTextFileLoader@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0AAKAAPAVCTextFileLoader@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@AAKAAPAVCTextFileLoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct_n@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABQAV12@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXIABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct_n@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABQAV12@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXIABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct_n@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABQAV12@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXIABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z$1
__ehfuncinfo$??$_Construct_n@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABQAV12@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXIABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct_n@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABQAV12@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXIABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0
__ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@AAKAAPAVCTextFileLoader@@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@_N@1@AAKAAPAVCTextFileLoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@AAKAAPAVCTextFileLoader@@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@_N@1@AAKAAPAVCTextFileLoader@@@Z$2
__ehfuncinfo$??$_Emplace@AAKAAPAVCTextFileLoader@@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@_N@1@AAKAAPAVCTextFileLoader@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@AAKAAPAVCTextFileLoader@@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@_N@1@AAKAAPAVCTextFileLoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@AAKAAPAVCTextFileLoader@@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCTextFileLoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@AAKAAPAVCTextFileLoader@@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCTextFileLoader@@@Z$2
__ehfuncinfo$??$emplace@AAKAAPAVCTextFileLoader@@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCTextFileLoader@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$emplace@AAKAAPAVCTextFileLoader@@@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@@std@@_N@1@AAKAAPAVCTextFileLoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@$0A@@?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@$0A@@?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$?0AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@$0A@@?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z$2
__ehfuncinfo$??$?0AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@$0A@@?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@$0A@@?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@AAKABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@QAEPAUSGroupNode@CTextFileLoader@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@QAEPAUSGroupNode@CTextFileLoader@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@QAEPAUSGroupNode@CTextFileLoader@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@USGroupNode@CTextFileLoader@@@@QAEPAUSGroupNode@CTextFileLoader@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$3
__ehfuncinfo$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@CTextFileLoader@@QAE_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CTextFileLoader@@QAE_NPBD@Z$0
__ehfuncinfo$?Load@CTextFileLoader@@QAE_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@CTextFileLoader@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CTextFileLoader@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CTextFileLoader@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CTextFileLoader@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CTextFileLoader@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CTextFileLoader@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CTextFileLoader@@QAE@XZ$3
__ehfuncinfo$??0CTextFileLoader@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CTextFileLoader@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Cache@CTextFileLoader@@SAPAV1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Cache@CTextFileLoader@@SAPAV1@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Cache@CTextFileLoader@@SAPAV1@PBD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Cache@CTextFileLoader@@SAPAV1@PBD@Z$4
__ehfuncinfo$?Cache@CTextFileLoader@@SAPAV1@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Cache@CTextFileLoader@@SAPAV1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SGroupNode@CTextFileLoader@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SGroupNode@CTextFileLoader@@QAE@XZ$0
__ehfuncinfo$??0SGroupNode@CTextFileLoader@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SGroupNode@CTextFileLoader@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ$0
__ehfuncinfo$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$0
	DD	02H
	DD	FLAT:__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$7
__ehfuncinfo$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@SGroupNode@CTextFileLoader@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ ; ??ms_kPool$initializer$@SGroupNode@CTextFileLoader@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	ff 71 04	 push	 DWORD PTR [ecx+4]
  00006	ff 31		 push	 DWORD PTR [ecx]
  00008	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0000d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1803 :     }

  00010	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAUSGroupNode@CTextFileLoader@@@std@@YAPAPAUSGroupNode@CTextFileLoader@@QBDQAPAU12@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAUSGroupNode@CTextFileLoader@@@std@@YAPAPAUSGroupNode@CTextFileLoader@@QBDQAPAU12@II@Z PROC ; std::_Copy_memmove_tail<CTextFileLoader::SGroupNode * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAUSGroupNode@CTextFileLoader@@@std@@YAPAPAUSGroupNode@CTextFileLoader@@QBDQAPAU12@II@Z ENDP ; std::_Copy_memmove_tail<CTextFileLoader::SGroupNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tidy_guard@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 87   :         if (_Target) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	0f 85 00 00 00
	00		 jne	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy

; 88   :             _Target->_Tidy();
; 89   :         }
; 90   :     }

  0000a	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1940 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1941 :     // move [_First, _Last) to raw _Dest, using _Al
; 1942 :     // note: only called internally from elsewhere in the STL
; 1943 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1944 :     _STD _Adl_verify_range(_First, _Last);
; 1945 : #endif // ^^^ defined(_ENABLE_STL_INTERNAL_CHECK) ^^^
; 1946 :     using _Ptrval     = typename _Alloc::value_type*;
; 1947 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1949 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1950 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1951 : #if _HAS_CXX20
; 1952 :         if (!_STD is_constant_evaluated())
; 1953 : #endif // _HAS_CXX20
; 1954 :         {
; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));
; 1956 :             return _Dest + (_ULast - _UFirst);
; 1957 :         }
; 1958 :     }
; 1959 : 
; 1960 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1941 :     // move [_First, _Last) to raw _Dest, using _Al
; 1942 :     // note: only called internally from elsewhere in the STL
; 1943 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1944 :     _STD _Adl_verify_range(_First, _Last);
; 1945 : #endif // ^^^ defined(_ENABLE_STL_INTERNAL_CHECK) ^^^
; 1946 :     using _Ptrval     = typename _Alloc::value_type*;
; 1947 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1949 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1950 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1951 : #if _HAS_CXX20
; 1952 :         if (!_STD is_constant_evaluated())
; 1953 : #endif // _HAS_CXX20
; 1954 :         {
; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));
; 1956 :             return _Dest + (_ULast - _UFirst);
; 1957 :         }
; 1958 :     }
; 1959 : 
; 1960 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 4f		 je	 SHORT $LN3@Uninitiali

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:
  00020	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00023	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0002d	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00035	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00038	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0003b	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00040	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00045	83 c6 18	 add	 esi, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1264 :                 _Right_data._Mysize = 0;

  00048	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0004f	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00056	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00059	83 c0 18	 add	 eax, 24			; 00000018H

; 1941 :     // move [_First, _Last) to raw _Dest, using _Al
; 1942 :     // note: only called internally from elsewhere in the STL
; 1943 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1944 :     _STD _Adl_verify_range(_First, _Last);
; 1945 : #endif // ^^^ defined(_ENABLE_STL_INTERNAL_CHECK) ^^^
; 1946 :     using _Ptrval     = typename _Alloc::value_type*;
; 1947 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1949 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1950 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1951 : #if _HAS_CXX20
; 1952 :         if (!_STD is_constant_evaluated())
; 1953 : #endif // _HAS_CXX20
; 1954 :         {
; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));
; 1956 :             return _Dest + (_ULast - _UFirst);
; 1957 :         }
; 1958 :     }
; 1959 : 
; 1960 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  0005c	3b c2		 cmp	 eax, edx
  0005e	75 c0		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00060	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00063	56		 push	 esi
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1962 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1963 :     }
; 1964 : 
; 1965 :     return _Backout._Release();

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi

; 1966 : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1_Reallocation_guard@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Reallocation_guard@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocation_guard::~_Reallocation_guard, COMDAT
; _this$ = ecx

; 605  :         _CONSTEXPR20 ~_Reallocation_guard() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 606  :             if (_New_begin != nullptr) {

  00003	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00007	74 40		 je	 SHORT $LN10@Reallocati

; 607  :                 _STD _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  00009	ff 36		 push	 DWORD PTR [esi]
  0000b	ff 76 10	 push	 DWORD PTR [esi+16]
  0000e	ff 76 0c	 push	 DWORD PTR [esi+12]
  00011	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00016	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 607  :                 _STD _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001c	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0001f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00022	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN21@Reallocati

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	83 c0 fc	 add	 eax, -4			; fffffffcH
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 0e		 ja	 SHORT $LN18@Reallocati

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b c2		 mov	 eax, edx
$LN21@Reallocati:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00046	83 c4 08	 add	 esp, 8
$LN10@Reallocati:
  00049	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 610  :         }

  0004a	c3		 ret	 0
$LN18@Reallocati:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Reallocati:
  00050	cc		 int	 3
??1_Reallocation_guard@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocation_guard::~_Reallocation_guard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CTextFileLoader::SGroupNode * *,CTextFileLoader::SGroupNode * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAUSGroupNode@CTextFileLoader@@@std@@YAPAPAUSGroupNode@CTextFileLoader@@QBDQAPAU12@II@Z ; std::_Copy_memmove_tail<CTextFileLoader::SGroupNode * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CTextFileLoader::SGroupNode * *,CTextFileLoader::SGroupNode * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 20		 push	 32			; 00000020H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
__Guard$ = -48						; size = 20
tv517 = -28						; size = 4
__Oldsize$1$ = -24					; size = 4
__Whereoff$1$ = -20					; size = 4
$T2 = -20						; size = 4
tv518 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0002a	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0002c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00031	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00034	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00037	2b d3		 sub	 edx, ebx
  00039	f7 ea		 imul	 edx
  0003b	2b cb		 sub	 ecx, ebx
  0003d	c1 fa 02	 sar	 edx, 2
  00040	8b c2		 mov	 eax, edx
  00042	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00045	03 c2		 add	 eax, edx
  00047	89 45 ec	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0004a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004f	f7 e9		 imul	 ecx
  00051	c1 fa 02	 sar	 edx, 2
  00054	8b c2		 mov	 eax, edx
  00056	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00059	03 c2		 add	 eax, edx
  0005b	89 45 e8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0005e	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00063	0f 84 6a 01 00
	00		 je	 $LN85@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00069	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0006c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006f	2b cb		 sub	 ecx, ebx
  00071	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00076	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00078	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0007d	c1 fa 02	 sar	 edx, 2
  00080	8b ca		 mov	 ecx, edx
  00082	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00085	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00087	8b d1		 mov	 edx, ecx
  00089	d1 ea		 shr	 edx, 1
  0008b	2b c2		 sub	 eax, edx
  0008d	3b c8		 cmp	 ecx, eax
  0008f	76 19		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00091	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  00096	c7 45 f0 f0 ff
	ff ff		 mov	 DWORD PTR tv518[ebp], -16 ; fffffff0H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009d	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1997 :             return _Max; // geometric growth would overflow

  0009e	bb aa aa aa 0a	 mov	 ebx, 178956970		; 0aaaaaaaH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	eb 3c		 jmp	 SHORT $LN83@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000aa	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  000ad	8b df		 mov	 ebx, edi
  000af	3b c7		 cmp	 eax, edi
  000b1	0f 43 d8	 cmovae	 ebx, eax
  000b4	81 fb aa aa aa
	0a		 cmp	 ebx, 178956970		; 0aaaaaaaH
  000ba	0f 87 18 01 00
	00		 ja	 $LN86@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  000c0	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  000c3	c1 e0 03	 shl	 eax, 3
  000c6	89 45 f0	 mov	 DWORD PTR tv518[ebp], eax

; 227  :     if (_Bytes == 0) {

  000c9	85 c0		 test	 eax, eax
  000cb	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  000cd	33 ff		 xor	 edi, edi
  000cf	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000d1	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d6	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000de	eb 06		 jmp	 SHORT $LN83@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN83@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 880  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000e6	8b f8		 mov	 edi, eax
  000e8	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  000eb	8b 45 ec	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 882  :         _Reallocation_guard _Guard{_Al, _Newvec, _Newcapacity, _Constructed_last, _Constructed_last};

  000ee	89 75 d0	 mov	 DWORD PTR __Guard$[ebp], esi
  000f1	89 7d d4	 mov	 DWORD PTR __Guard$[ebp+4], edi
  000f4	89 5d d8	 mov	 DWORD PTR __Guard$[ebp+8], ebx
  000f7	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000fa	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
  000fd	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00100	89 4d e4	 mov	 DWORD PTR tv517[ebp], ecx
  00103	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  00106	89 45 dc	 mov	 DWORD PTR __Guard$[ebp+12], eax
  00109	89 45 e0	 mov	 DWORD PTR __Guard$[ebp+16], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0010c	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 882  :         _Reallocation_guard _Guard{_Al, _Newvec, _Newcapacity, _Constructed_last, _Constructed_last};

  0010f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00116	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0011b	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0011e	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00121	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00123	3b da		 cmp	 ebx, edx
  00125	75 04		 jne	 SHORT $LN3@Emplace_re

; 889  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 890  :                 _STD _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00127	8b c7		 mov	 eax, edi

; 891  :             } else {
; 892  :                 _STD _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 893  :             }
; 894  :         } else { // provide basic guarantee

  00129	eb 14		 jmp	 SHORT $LN4@Emplace_re
$LN3@Emplace_re:

; 895  :             _STD _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  0012b	56		 push	 esi
  0012c	57		 push	 edi
  0012d	53		 push	 ebx
  0012e	51		 push	 ecx
  0012f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 896  :             _Constructed_first = _Newvec;
; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00134	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00137	83 c4 10	 add	 esp, 16			; 00000010H
  0013a	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  0013d	8b cb		 mov	 ecx, ebx
$LN4@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  0013f	56		 push	 esi
  00140	50		 push	 eax
  00141	52		 push	 edx
  00142	51		 push	 ecx
  00143	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00148	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  0014a	83 c4 10	 add	 esp, 16			; 00000010H

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0014d	85 c9		 test	 ecx, ecx
  0014f	74 4f		 je	 SHORT $LN41@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00151	56		 push	 esi
  00152	ff 76 04	 push	 DWORD PTR [esi+4]
  00155	51		 push	 ecx
  00156	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0015b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0015e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00163	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00165	83 c4 0c	 add	 esp, 12			; 0000000cH
  00168	2b cb		 sub	 ecx, ebx
  0016a	f7 e9		 imul	 ecx
  0016c	c1 fa 02	 sar	 edx, 2
  0016f	8b c2		 mov	 eax, edx
  00171	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00174	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00176	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00179	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0017c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00182	72 12		 jb	 SHORT $LN52@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00184	8b 53 fc	 mov	 edx, DWORD PTR [ebx-4]
  00187	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0018a	2b da		 sub	 ebx, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018c	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  0018f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00192	77 3a		 ja	 SHORT $LN49@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00194	8b da		 mov	 ebx, edx
$LN52@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00196	51		 push	 ecx
  00197	53		 push	 ebx
  00198	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0019d	83 c4 08	 add	 esp, 8
$LN41@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  001a0	8b 45 e8	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  001a3	40		 inc	 eax
  001a4	89 3e		 mov	 DWORD PTR [esi], edi
  001a6	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  001a9	8b 45 e4	 mov	 eax, DWORD PTR tv517[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  001ac	8d 0c cf	 lea	 ecx, DWORD PTR [edi+ecx*8]
  001af	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  001b2	8b 4d f0	 mov	 ecx, DWORD PTR tv518[ebp]
  001b5	03 cf		 add	 ecx, edi
  001b7	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  001ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c4	59		 pop	 ecx
  001c5	5f		 pop	 edi
  001c6	5e		 pop	 esi
  001c7	5b		 pop	 ebx
  001c8	8b e5		 mov	 esp, ebp
  001ca	5d		 pop	 ebp
  001cb	c2 08 00	 ret	 8
$LN49@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ce	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  001d3	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN86@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  001d8	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN82@Emplace_re:
  001dd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Guard$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Reallocation_guard@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocation_guard::~_Reallocation_guard
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN13@Find_lower
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1627 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN13@Find_lower
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1627 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1094 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1098 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 48		 je	 SHORT $LN55@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00016	76 27		 jbe	 SHORT $LN33@Destroy_ra
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0001a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN44@Destroy_ra

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 28		 ja	 SHORT $LN41@Destroy_ra

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN44@Destroy_ra:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN33@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL4@Destroy_ra
$LN55@Destroy_ra:
  00057	5f		 pop	 edi

; 1099 :             allocator_traits<_Alloc>::destroy(_Al, _STD _Unfancy(_First));
; 1100 :         }
; 1101 :     }
; 1102 : }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN41@Destroy_ra:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN62@Destroy_ra:
  00060	cc		 int	 3
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00011	75 32		 jne	 SHORT $LN53@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	57		 push	 edi
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 76 08	 push	 DWORD PTR [esi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b fe		 mov	 edi, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 381  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00027	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  0002a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002f	6a 20		 push	 32			; 00000020H
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003a	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00041	74 d5		 je	 SHORT $LL2@Erase_tree
  00043	5f		 pop	 edi
  00044	5b		 pop	 ebx
$LN53@Erase_tree:
  00045	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN39@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN39@Erase_tree:
  00035	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
  00000	83 c1 04	 add	 ecx, 4

; 815  :         _Tidy();

  00003	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
??1?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CTextFileLoader::SGroupNode::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A ; CTextFileLoader::SGroupNode::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAE@XZ ; CDynamicPool<CTextFileLoader::SGroupNode>::~CDynamicPool<CTextFileLoader::SGroupNode>
??__F?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CTextFileLoader::SGroupNode::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ??__E?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CTextFileLoader::SGroupNode::ms_kPool'', COMDAT

; 12   : CDynamicPool<CTextFileLoader::SGroupNode>	CTextFileLoader::SGroupNode::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CTextFileLoader::SGroupNode::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CTextFileLoader::SGroupNode::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAEPAXI@Z PROC ; CDynamicPool<CTextFileLoader::SGroupNode>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAE@XZ ; CDynamicPool<CTextFileLoader::SGroupNode>::~CDynamicPool<CTextFileLoader::SGroupNode>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAEPAXI@Z ENDP ; CDynamicPool<CTextFileLoader::SGroupNode>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAE@XZ PROC ; CDynamicPool<CTextFileLoader::SGroupNode>::~CDynamicPool<CTextFileLoader::SGroupNode>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@USGroupNode@CTextFileLoader@@@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN8@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN27@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN27@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2082 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN8@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN37@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN56@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN56@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2082 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN37@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN53@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN67@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@USGroupNode@CTextFileLoader@@@@UAE@XZ ENDP ; CDynamicPool<CTextFileLoader::SGroupNode>::~CDynamicPool<CTextFileLoader::SGroupNode>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
  00005	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >
??__F?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ??__E?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader'', COMDAT
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 9    : std::map<DWORD, CTextFileLoader*> CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader;

  00007	68 00 00 00 00	 push	 OFFSET ??__F?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader''
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0000c	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0000e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00011	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00014	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 9    : std::map<DWORD, CTextFileLoader*> CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader;

  0001f	e8 00 00 00 00	 call	 _atexit
  00024	83 c4 08	 add	 esp, 8
  00027	c3		 ret	 0
??__E?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >, COMDAT
; _this$ = ecx

; 1085 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN72@Tree
  0000f	90		 npad	 1
$LL8@Tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL8@Tree
$LN72@Tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1092 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCTextFileLoader@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTextFileLoader@@UAEPAXI@Z PROC			; CTextFileLoader::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CTextFileLoader@@UAE@XZ ; CTextFileLoader::~CTextFileLoader
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 80 00 00 00	 push	 128			; 00000080H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCTextFileLoader@@UAEPAXI@Z ENDP			; CTextFileLoader::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z
_TEXT	SEGMENT
_stSubTokenVector$2 = -92				; size = 12
tv1531 = -80						; size = 4
_pGroupNode$GSCopy$1$ = -76				; size = 4
_nLocalGroupDepth$1$ = -72				; size = 4
tv1514 = -68						; size = 4
__Last$1$ = -68						; size = 4
_pNewNode$3 = -64					; size = 4
_j$1$ = -64						; size = 4
_stTokenVector$ = -60					; size = 12
_this$GSCopy$1$ = -48					; size = 4
$T4 = -41						; size = 1
_key$5 = -40						; size = 24
_key$6 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pGroupNode$ = 8					; size = 4
?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z PROC ; CTextFileLoader::LoadGroup, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	89 7d d0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  0002f	8b 45 08	 mov	 eax, DWORD PTR _pGroupNode$[ebp]
  00032	89 45 b4	 mov	 DWORD PTR _pGroupNode$GSCopy$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00035	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _stTokenVector$[ebp], 0
  0003c	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _stTokenVector$[ebp+4], 0
  00043	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _stTokenVector$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 212  : 	for (; m_dwcurLineIndex < m_textFileLoader.GetLineCount(); ++m_dwcurLineIndex)

  0004a	8d 47 2c	 lea	 eax, DWORD PTR [edi+44]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00054	8b c8		 mov	 ecx, eax
  00056	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _nLocalGroupDepth$1$[ebp], 0
  0005d	89 45 b0	 mov	 DWORD PTR tv1531[ebp], eax
  00060	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  00065	8b 77 28	 mov	 esi, DWORD PTR [edi+40]
  00068	3b f0		 cmp	 esi, eax
  0006a	0f 83 25 04 00
	00		 jae	 $LN387@LoadGroup
$LL4@LoadGroup:

; 213  : 	{
; 214  : 		int iRet;
; 215  : 
; 216  : 		if ((iRet = m_textFileLoader.SplitLine2(m_dwcurLineIndex, &stTokenVector)) != 0)

  00070	68 00 00 00 00	 push	 OFFSET ??_C@_02OJDBNLEE@?5?7@
  00075	8d 45 c4	 lea	 eax, DWORD PTR _stTokenVector$[ebp]
  00078	50		 push	 eax
  00079	56		 push	 esi
  0007a	8d 4f 2c	 lea	 ecx, DWORD PTR [edi+44]
  0007d	e8 00 00 00 00	 call	 ?SplitLine2@CMemoryTextFileLoader@@QAEHKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z ; CMemoryTextFileLoader::SplitLine2
  00082	85 c0		 test	 eax, eax
  00084	74 2a		 je	 SHORT $LN11@LoadGroup

; 217  : 		{
; 218  : 			if (iRet == -2)

  00086	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  00089	0f 85 ac 03 00
	00		 jne	 $LN2@LoadGroup
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0008f	83 7f 18 0f	 cmp	 DWORD PTR [edi+24], 15	; 0000000fH

; 2328 :         return _Mypair._Myval2._Myptr();

  00093	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 426  :         if (_Large_mode_engaged()) {

  00096	76 02		 jbe	 SHORT $LN55@LoadGroup

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00098	8b 00		 mov	 eax, DWORD PTR [eax]
$LN55@LoadGroup:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 219  : 				TraceError("cannot find \" in %s:%lu", m_strFileName.c_str(), m_dwcurLineIndex);

  0009a	ff 77 28	 push	 DWORD PTR [edi+40]
  0009d	50		 push	 eax
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@BCFJNLGN@cannot?5find?5?$CC?5in?5?$CFs?3?$CFlu@
  000a3	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 220  : 			continue;

  000ab	e9 8b 03 00 00	 jmp	 $LN2@LoadGroup
$LN11@LoadGroup:

; 223  : 		stl_lowers(stTokenVector[0]);

  000b0	ff 75 c4	 push	 DWORD PTR _stTokenVector$[ebp]
  000b3	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  000b8	8b 75 c4	 mov	 esi, DWORD PTR _stTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 223  : 		stl_lowers(stTokenVector[0]);

  000bb	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  000be	8b c6		 mov	 eax, esi
  000c0	8b f8		 mov	 edi, eax

; 434  :         return _Myres > _Small_string_capacity;

  000c2	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  000c5	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  000c8	76 02		 jbe	 SHORT $LN380@LoadGroup

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  000ca	8b 06		 mov	 eax, DWORD PTR [esi]
$LN380@LoadGroup:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 225  : 		if ('{' == stTokenVector[0][0])

  000cc	80 38 7b	 cmp	 BYTE PTR [eax], 123	; 0000007bH
  000cf	75 08		 jne	 SHORT $LN13@LoadGroup

; 226  : 		{
; 227  : 			nLocalGroupDepth++;

  000d1	ff 45 b8	 inc	 DWORD PTR _nLocalGroupDepth$1$[ebp]

; 228  : 			continue;

  000d4	e9 5f 03 00 00	 jmp	 $LN385@LoadGroup
$LN13@LoadGroup:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  000d9	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  000db	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  000de	76 02		 jbe	 SHORT $LN68@LoadGroup

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  000e0	8b 06		 mov	 eax, DWORD PTR [esi]
$LN68@LoadGroup:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 231  : 		if ('}' == stTokenVector[0][0]) {

  000e2	80 38 7d	 cmp	 BYTE PTR [eax], 125	; 0000007dH
  000e5	0f 84 a4 03 00
	00		 je	 $LN361@LoadGroup

; 233  : 			break;
; 234  : 		}
; 235  : 
; 236  : 		// Group
; 237  : 		if (0 == stTokenVector[0].compare("group"))

  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_05MGJOOGAJ@group@
  000f0	8b ce		 mov	 ecx, esi
  000f2	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  000f7	85 c0		 test	 eax, eax
  000f9	75 66		 jne	 SHORT $LN15@LoadGroup

; 238  : 		{
; 239  : 			if (2 != stTokenVector.size())

  000fb	8b 45 c8	 mov	 eax, DWORD PTR _stTokenVector$[ebp+4]
  000fe	2b c7		 sub	 eax, edi
  00100	83 e8 30	 sub	 eax, 48			; 00000030H
  00103	83 f8 18	 cmp	 eax, 24			; 00000018H
  00106	0f 83 2c 03 00
	00		 jae	 $LN385@LoadGroup

; 240  : 			{
; 241  : 				assert(!"There is no group name!");
; 242  : 				continue;
; 243  : 			}
; 244  : 
; 245  : 			TGroupNode * pNewNode = TGroupNode::New();

  0010c	e8 00 00 00 00	 call	 ?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ ; CTextFileLoader::SGroupNode::New

; 246  : 			m_kVct_pkNode.push_back(pNewNode);

  00111	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  00114	89 45 c0	 mov	 DWORD PTR _pNewNode$3[ebp], eax
  00117	8d 45 c0	 lea	 eax, DWORD PTR _pNewNode$3[ebp]
  0011a	50		 push	 eax
  0011b	8d 4f 74	 lea	 ecx, DWORD PTR [edi+116]
  0011e	e8 00 00 00 00	 call	 ?push_back@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEXABQAUSGroupNode@CTextFileLoader@@@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::push_back

; 247  : 
; 248  : 			pNewNode->pParentNode = pGroupNode;

  00123	8b 4d c0	 mov	 ecx, DWORD PTR _pNewNode$3[ebp]
  00126	8b 75 b4	 mov	 esi, DWORD PTR _pGroupNode$GSCopy$1$[ebp]
  00129	89 71 24	 mov	 DWORD PTR [ecx+36], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  0012c	8b 45 c4	 mov	 eax, DWORD PTR _stTokenVector$[ebp]
  0012f	83 c0 18	 add	 eax, 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 249  : 			pNewNode->SetGroupName(stTokenVector[1]);

  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ?SetGroupName@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::SGroupNode::SetGroupName

; 250  : 			pGroupNode->ChildNodeVector.push_back(pNewNode);

  00138	8d 45 c0	 lea	 eax, DWORD PTR _pNewNode$3[ebp]
  0013b	50		 push	 eax
  0013c	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0013f	e8 00 00 00 00	 call	 ?push_back@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEXABQAUSGroupNode@CTextFileLoader@@@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::push_back

; 251  : 
; 252  : 			++m_dwcurLineIndex;
; 253  : 
; 254  : 			if( false == LoadGroup(pNewNode) )

  00144	ff 75 c0	 push	 DWORD PTR _pNewNode$3[ebp]
  00147	ff 47 28	 inc	 DWORD PTR [edi+40]
  0014a	8b cf		 mov	 ecx, edi
  0014c	e8 00 00 00 00	 call	 ?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z ; CTextFileLoader::LoadGroup
  00151	84 c0		 test	 al, al
  00153	0f 85 e2 02 00
	00		 jne	 $LN2@LoadGroup
  00159	88 45 d7	 mov	 BYTE PTR $T4[ebp], al
  0015c	e9 3c 03 00 00	 jmp	 $LN31@LoadGroup
$LN15@LoadGroup:

; 255  : 				return false;
; 256  : 		}
; 257  : 		// List
; 258  : 		else if (0 == stTokenVector[0].compare("list"))

  00161	68 00 00 00 00	 push	 OFFSET ??_C@_04DONFEANM@list@
  00166	8b ce		 mov	 ecx, esi
  00168	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  0016d	85 c0		 test	 eax, eax
  0016f	0f 85 c0 01 00
	00		 jne	 $LN19@LoadGroup

; 259  : 		{
; 260  : 			if (2 != stTokenVector.size())

  00175	8b 45 c8	 mov	 eax, DWORD PTR _stTokenVector$[ebp+4]
  00178	2b c7		 sub	 eax, edi
  0017a	83 e8 30	 sub	 eax, 48			; 00000030H
  0017d	83 f8 18	 cmp	 eax, 24			; 00000018H
  00180	0f 83 b2 02 00
	00		 jae	 $LN385@LoadGroup
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00186	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _stSubTokenVector$2[ebp], 0
  0018d	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _stSubTokenVector$2[ebp+4], 0
  00194	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _stSubTokenVector$2[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 266  : 			CTokenVector stSubTokenVector;

  0019b	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0019e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 267  : 
; 268  : 			stl_lowers(stTokenVector[1]);

  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  001a8	8b 45 c4	 mov	 eax, DWORD PTR _stTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 269  : 			std::string key = stTokenVector[1];

  001ab	8d 4d d8	 lea	 ecx, DWORD PTR _key$5[ebp]
  001ae	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  001b1	83 c0 18	 add	 eax, 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 269  : 			std::string key = stTokenVector[1];

  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  001ba	8b 45 c4	 mov	 eax, DWORD PTR _stTokenVector$[ebp]
  001bd	8b 4d c8	 mov	 ecx, DWORD PTR _stTokenVector$[ebp+4]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 269  : 			std::string key = stTokenVector[1];

  001c0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  001c4	3b c1		 cmp	 eax, ecx
  001c6	74 14		 je	 SHORT $LN195@LoadGroup

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  001c8	8d 55 c4	 lea	 edx, DWORD PTR _stTokenVector$[ebp]
  001cb	52		 push	 edx
  001cc	51		 push	 ecx
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  001d3	8b 45 c4	 mov	 eax, DWORD PTR _stTokenVector$[ebp]
  001d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d9	89 45 c8	 mov	 DWORD PTR _stTokenVector$[ebp+4], eax
$LN195@LoadGroup:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 273  : 			++m_dwcurLineIndex;

  001dc	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  001df	ff 47 28	 inc	 DWORD PTR [edi+40]

; 274  : 			for (; m_dwcurLineIndex < m_textFileLoader.GetLineCount(); ++m_dwcurLineIndex)

  001e2	8d 4f 2c	 lea	 ecx, DWORD PTR [edi+44]
  001e5	8b 77 28	 mov	 esi, DWORD PTR [edi+40]
  001e8	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  001ed	3b f0		 cmp	 esi, eax
  001ef	0f 83 d5 00 00
	00		 jae	 $LN360@LoadGroup
$LL7@LoadGroup:

; 275  : 			{
; 276  : 				if (!m_textFileLoader.SplitLine(m_dwcurLineIndex, &stSubTokenVector))

  001f5	8b 4d b0	 mov	 ecx, DWORD PTR tv1531[ebp]
  001f8	8d 45 a4	 lea	 eax, DWORD PTR _stSubTokenVector$2[ebp]
  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_02OJDBNLEE@?5?7@
  00200	50		 push	 eax
  00201	56		 push	 esi
  00202	e8 00 00 00 00	 call	 ?SplitLine@CMemoryTextFileLoader@@QAE_NKPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PBD@Z ; CMemoryTextFileLoader::SplitLine
  00207	84 c0		 test	 al, al
  00209	0f 84 9f 00 00
	00		 je	 $LN5@LoadGroup
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  0020f	8b 7d a4	 mov	 edi, DWORD PTR _stSubTokenVector$2[ebp]
  00212	8b c7		 mov	 eax, edi
  00214	8b d0		 mov	 edx, eax

; 434  :         return _Myres > _Small_string_capacity;

  00216	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00219	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0021c	76 02		 jbe	 SHORT $LN381@LoadGroup

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0021e	8b 07		 mov	 eax, DWORD PTR [edi]
$LN381@LoadGroup:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 279  : 				if ('{' == stSubTokenVector[0][0])

  00220	80 38 7b	 cmp	 BYTE PTR [eax], 123	; 0000007bH
  00223	0f 84 85 00 00
	00		 je	 $LN5@LoadGroup
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  00229	8b c2		 mov	 eax, edx

; 434  :         return _Myres > _Small_string_capacity;

  0022b	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0022e	76 02		 jbe	 SHORT $LN374@LoadGroup

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00230	8b 07		 mov	 eax, DWORD PTR [edi]
$LN374@LoadGroup:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 282  : 				if ('}' == stSubTokenVector[0][0])

  00232	80 38 7d	 cmp	 BYTE PTR [eax], 125	; 0000007dH
  00235	0f 84 8c 00 00
	00		 je	 $LN382@LoadGroup

; 285  : 				for (DWORD j = 0; j < stSubTokenVector.size(); ++j)

  0023b	33 c9		 xor	 ecx, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0023d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 285  : 				for (DWORD j = 0; j < stSubTokenVector.size(); ++j)

  00242	89 4d c0	 mov	 DWORD PTR _j$1$[ebp], ecx
  00245	8b 4d a8	 mov	 ecx, DWORD PTR _stSubTokenVector$2[ebp+4]
  00248	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0024a	f7 e9		 imul	 ecx
  0024c	c1 fa 02	 sar	 edx, 2
  0024f	8b c2		 mov	 eax, edx
  00251	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00254	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 285  : 				for (DWORD j = 0; j < stSubTokenVector.size(); ++j)

  00256	74 56		 je	 SHORT $LN5@LoadGroup
  00258	8b 75 c8	 mov	 esi, DWORD PTR _stTokenVector$[ebp+4]
  0025b	33 c0		 xor	 eax, eax
  0025d	89 45 bc	 mov	 DWORD PTR tv1514[ebp], eax
$LL10@LoadGroup:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00260	03 c7		 add	 eax, edi

; 829  :         if (_Mylast != _My_data._Myend) {

  00262	50		 push	 eax
  00263	3b 75 cc	 cmp	 esi, DWORD PTR _stTokenVector$[ebp+8]
  00266	74 12		 je	 SHORT $LN139@LoadGroup
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00268	8b ce		 mov	 ecx, esi
  0026a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  0026f	8b 75 c8	 mov	 esi, DWORD PTR _stTokenVector$[ebp+4]
  00272	83 c6 18	 add	 esi, 24			; 00000018H
  00275	89 75 c8	 mov	 DWORD PTR _stTokenVector$[ebp+4], esi

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00278	eb 0c		 jmp	 SHORT $LN8@LoadGroup
$LN139@LoadGroup:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0027a	56		 push	 esi
  0027b	8d 4d c4	 lea	 ecx, DWORD PTR _stTokenVector$[ebp]
  0027e	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00283	8b 75 c8	 mov	 esi, DWORD PTR _stTokenVector$[ebp+4]
$LN8@LoadGroup:

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00286	8b 4d a8	 mov	 ecx, DWORD PTR _stSubTokenVector$2[ebp+4]
  00289	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0028e	8b 7d a4	 mov	 edi, DWORD PTR _stSubTokenVector$2[ebp]
  00291	2b cf		 sub	 ecx, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 285  : 				for (DWORD j = 0; j < stSubTokenVector.size(); ++j)

  00293	83 45 bc 18	 add	 DWORD PTR tv1514[ebp], 24 ; 00000018H
  00297	ff 45 c0	 inc	 DWORD PTR _j$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0029a	f7 e9		 imul	 ecx
  0029c	c1 fa 02	 sar	 edx, 2
  0029f	8b c2		 mov	 eax, edx
  002a1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002a4	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 285  : 				for (DWORD j = 0; j < stSubTokenVector.size(); ++j)

  002a6	39 45 c0	 cmp	 DWORD PTR _j$1$[ebp], eax
  002a9	8b 45 bc	 mov	 eax, DWORD PTR tv1514[ebp]
  002ac	72 b2		 jb	 SHORT $LL10@LoadGroup
$LN5@LoadGroup:

; 274  : 			for (; m_dwcurLineIndex < m_textFileLoader.GetLineCount(); ++m_dwcurLineIndex)

  002ae	8b 45 d0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  002b1	8b 4d b0	 mov	 ecx, DWORD PTR tv1531[ebp]
  002b4	ff 40 28	 inc	 DWORD PTR [eax+40]
  002b7	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  002ba	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  002bf	3b f0		 cmp	 esi, eax
  002c1	0f 82 2e ff ff
	ff		 jb	 $LL7@LoadGroup
$LN382@LoadGroup:
  002c7	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN360@LoadGroup:

; 286  : 				{
; 287  : 					stTokenVector.push_back(stSubTokenVector[j]);
; 288  : 				}
; 289  : 			}
; 290  : 
; 291  : 			pGroupNode->InsertTokenVector(key, stTokenVector);

  002ca	8b 4d b4	 mov	 ecx, DWORD PTR _pGroupNode$GSCopy$1$[ebp]
  002cd	8d 45 c4	 lea	 eax, DWORD PTR _stTokenVector$[ebp]
  002d0	50		 push	 eax
  002d1	8d 45 d8	 lea	 eax, DWORD PTR _key$5[ebp]
  002d4	50		 push	 eax
  002d5	e8 00 00 00 00	 call	 ?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z ; CTextFileLoader::SGroupNode::InsertTokenVector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002da	8b 4d ec	 mov	 ecx, DWORD PTR _key$5[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 293  : 		}

  002dd	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002e1	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  002e4	76 2c		 jbe	 SHORT $LN109@LoadGroup
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002e6	8b 55 d8	 mov	 edx, DWORD PTR _key$5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  002e9	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002ea	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  002ec	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002f2	72 14		 jb	 SHORT $LN120@LoadGroup

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002f4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002f7	83 c1 23	 add	 ecx, 35			; 00000023H
  002fa	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002fc	83 c0 fc	 add	 eax, -4			; fffffffcH
  002ff	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00302	0f 87 bd 01 00
	00		 ja	 $LN117@LoadGroup
$LN120@LoadGroup:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00308	51		 push	 ecx
  00309	52		 push	 edx
  0030a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0030f	83 c4 08	 add	 esp, 8
$LN109@LoadGroup:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  00312	8d 4d a4	 lea	 ecx, DWORD PTR _stSubTokenVector$2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00315	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _key$5[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0031c	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _key$5[ebp+20], 15 ; 0000000fH

; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00323	c6 45 d8 00	 mov	 BYTE PTR _key$5[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 293  : 		}

  00327	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  0032b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 293  : 		}

  00330	e9 06 01 00 00	 jmp	 $LN2@LoadGroup
$LN19@LoadGroup:

; 294  : 		else
; 295  : 		{
; 296  : 			std::string key = stTokenVector[0];

  00335	56		 push	 esi
  00336	8d 4d d8	 lea	 ecx, DWORD PTR _key$6[ebp]
  00339	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 297  : 
; 298  : 			if (1 == stTokenVector.size())

  0033e	8b 4d c8	 mov	 ecx, DWORD PTR _stTokenVector$[ebp+4]
  00341	8b c1		 mov	 eax, ecx
  00343	8b 7d c4	 mov	 edi, DWORD PTR _stTokenVector$[ebp]
  00346	2b c7		 sub	 eax, edi
  00348	83 e8 18	 sub	 eax, 24			; 00000018H
  0034b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0034f	89 4d bc	 mov	 DWORD PTR __Last$1$[ebp], ecx
  00352	83 f8 18	 cmp	 eax, 24			; 00000018H
  00355	0f 82 fb 00 00
	00		 jb	 $LN363@LoadGroup
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1760 :         _STD _Move_unchecked(_Whereptr + 1, _Mylast, _Whereptr);

  0035b	8d 77 18	 lea	 esi, DWORD PTR [edi+24]

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0035e	3b f1		 cmp	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5167 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  00360	74 3f		 je	 SHORT $LN239@LoadGroup
$LL240@LoadGroup:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1202 :         if (this == _STD addressof(_Right)) {

  00362	3b fe		 cmp	 edi, esi
  00364	74 2b		 je	 SHORT $LN238@LoadGroup

; 1203 :             return *this;
; 1204 :         }
; 1205 : 
; 1206 :         auto& _Al                 = _Getal();
; 1207 :         auto& _Right_al           = _Right._Getal();
; 1208 :         constexpr auto _Pocma_val = _Choose_pocma_v<_Alty>;
; 1209 :         if constexpr (_Pocma_val == _Pocma_values::_Propagate_allocators) {
; 1210 :             if (_Al != _Right_al) {
; 1211 :                 // intentionally slams into noexcept on OOM, TRANSITION, VSO-466800
; 1212 :                 _Mypair._Myval2._Orphan_all();
; 1213 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1214 :             }
; 1215 :         } else if constexpr (_Pocma_val == _Pocma_values::_No_propagate_allocators) {
; 1216 :             if (_Al != _Right_al) {
; 1217 :                 assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
; 1218 :                 return *this;
; 1219 :             }
; 1220 :         }
; 1221 : 
; 1222 :         _Tidy_deallocate();

  00366	8b cf		 mov	 ecx, edi
  00368	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0036d	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  00370	8b 4d bc	 mov	 ecx, DWORD PTR __Last$1$[ebp]
  00373	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  00376	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  0037b	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00380	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00387	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  0038e	c6 06 00	 mov	 BYTE PTR [esi], 0
$LN238@LoadGroup:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5167 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  00391	83 c6 18	 add	 esi, 24			; 00000018H
  00394	83 c7 18	 add	 edi, 24			; 00000018H
  00397	3b f1		 cmp	 esi, ecx
  00399	75 c7		 jne	 SHORT $LL240@LoadGroup
  0039b	8b 4d c8	 mov	 ecx, DWORD PTR _stTokenVector$[ebp+4]
  0039e	89 4d bc	 mov	 DWORD PTR __Last$1$[ebp], ecx
$LN239@LoadGroup:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  003a1	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  003a4	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  003a7	76 31		 jbe	 SHORT $LN286@LoadGroup

; 3048 :             _ASAN_STRING_REMOVE(*this);
; 3049 :             auto& _Al = _Getal();
; 3050 :             _Deallocate_for_capacity(_Al, _My_data._Bx._Ptr, _My_data._Myres);

  003a9	8b 41 e8	 mov	 eax, DWORD PTR [ecx-24]

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  003ac	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  003af	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003b5	72 16		 jb	 SHORT $LN297@LoadGroup

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003b7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003ba	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  003bd	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003bf	83 c0 fc	 add	 eax, -4			; fffffffcH
  003c2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003c5	0f 87 fa 00 00
	00		 ja	 $LN117@LoadGroup

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  003cb	8b c2		 mov	 eax, edx
$LN297@LoadGroup:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003cd	51		 push	 ecx
  003ce	50		 push	 eax
  003cf	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003d4	8b 4d bc	 mov	 ecx, DWORD PTR __Last$1$[ebp]
  003d7	83 c4 08	 add	 esp, 8
$LN286@LoadGroup:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 308  : 			pGroupNode->InsertTokenVector(key, stTokenVector);

  003da	8d 45 c4	 lea	 eax, DWORD PTR _stTokenVector$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  003dd	c7 41 f8 00 00
	00 00		 mov	 DWORD PTR [ecx-8], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 308  : 			pGroupNode->InsertTokenVector(key, stTokenVector);

  003e4	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  003e5	c7 41 fc 0f 00
	00 00		 mov	 DWORD PTR [ecx-4], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 308  : 			pGroupNode->InsertTokenVector(key, stTokenVector);

  003ec	8d 45 d8	 lea	 eax, DWORD PTR _key$6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003ef	c6 41 e8 00	 mov	 BYTE PTR [ecx-24], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 308  : 			pGroupNode->InsertTokenVector(key, stTokenVector);

  003f3	8b 4d b4	 mov	 ecx, DWORD PTR _pGroupNode$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1763 :         --_Mylast;

  003f6	83 6d c8 18	 sub	 DWORD PTR _stTokenVector$[ebp+4], 24 ; 00000018H
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 308  : 			pGroupNode->InsertTokenVector(key, stTokenVector);

  003fa	50		 push	 eax
  003fb	e8 00 00 00 00	 call	 ?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z ; CTextFileLoader::SGroupNode::InsertTokenVector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00400	8b 4d ec	 mov	 ecx, DWORD PTR _key$6[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 310  : 		}

  00403	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00407	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0040a	76 2c		 jbe	 SHORT $LN385@LoadGroup
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0040c	8b 55 d8	 mov	 edx, DWORD PTR _key$6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0040f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00410	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00412	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00418	72 14		 jb	 SHORT $LN343@LoadGroup

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0041a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0041d	83 c1 23	 add	 ecx, 35			; 00000023H
  00420	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00422	83 c0 fc	 add	 eax, -4			; fffffffcH
  00425	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00428	0f 87 97 00 00
	00		 ja	 $LN117@LoadGroup
$LN343@LoadGroup:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0042e	51		 push	 ecx
  0042f	52		 push	 edx
  00430	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00435	83 c4 08	 add	 esp, 8
$LN385@LoadGroup:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 212  : 	for (; m_dwcurLineIndex < m_textFileLoader.GetLineCount(); ++m_dwcurLineIndex)

  00438	8b 7d d0	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
$LN2@LoadGroup:
  0043b	ff 47 28	 inc	 DWORD PTR [edi+40]
  0043e	8d 4f 2c	 lea	 ecx, DWORD PTR [edi+44]
  00441	8b 77 28	 mov	 esi, DWORD PTR [edi+40]
  00444	e8 00 00 00 00	 call	 ?GetLineCount@CMemoryTextFileLoader@@QAEKXZ ; CMemoryTextFileLoader::GetLineCount
  00449	3b f0		 cmp	 esi, eax
  0044b	0f 82 1f fc ff
	ff		 jb	 $LL4@LoadGroup

; 313  : 	return (nLocalGroupDepth == 0);

  00451	8b 45 b8	 mov	 eax, DWORD PTR _nLocalGroupDepth$1$[ebp]
  00454	eb 41		 jmp	 SHORT $LN3@LoadGroup
$LN363@LoadGroup:

; 300  : 				TraceError("CTextFileLoader::LoadGroup : must have a value (filename: %s line: %d key: %s)",

  00456	8b 45 d0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00459	8d 4d d8	 lea	 ecx, DWORD PTR _key$6[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  0045c	83 7d ec 0f	 cmp	 DWORD PTR _key$6[ebp+20], 15 ; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00460	0f 47 4d d8	 cmova	 ecx, DWORD PTR _key$6[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 300  : 				TraceError("CTextFileLoader::LoadGroup : must have a value (filename: %s line: %d key: %s)",

  00464	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  00467	83 c0 04	 add	 eax, 4

; 434  :         return _Myres > _Small_string_capacity;

  0046a	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0046e	76 02		 jbe	 SHORT $LN219@LoadGroup

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00470	8b 00		 mov	 eax, DWORD PTR [eax]
$LN219@LoadGroup:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 300  : 				TraceError("CTextFileLoader::LoadGroup : must have a value (filename: %s line: %d key: %s)",

  00472	51		 push	 ecx
  00473	52		 push	 edx
  00474	50		 push	 eax
  00475	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@OILOFBHI@CTextFileLoader?3?3LoadGroup?5?3?5mu@
  0047a	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0047f	83 c4 10	 add	 esp, 16			; 00000010H

; 301  : 							m_strFileName.c_str(),
; 302  : 							m_dwcurLineIndex,
; 303  : 							key.c_str());
; 304  : 				break;

  00482	8d 4d d8	 lea	 ecx, DWORD PTR _key$6[ebp]
  00485	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 313  : 	return (nLocalGroupDepth == 0);

  0048a	8b 45 b8	 mov	 eax, DWORD PTR _nLocalGroupDepth$1$[ebp]
  0048d	eb 08		 jmp	 SHORT $LN3@LoadGroup
$LN361@LoadGroup:

; 232  : 			nLocalGroupDepth--;

  0048f	8b 45 b8	 mov	 eax, DWORD PTR _nLocalGroupDepth$1$[ebp]
  00492	48		 dec	 eax
  00493	eb 02		 jmp	 SHORT $LN3@LoadGroup
$LN387@LoadGroup:

; 212  : 	for (; m_dwcurLineIndex < m_textFileLoader.GetLineCount(); ++m_dwcurLineIndex)

  00495	33 c0		 xor	 eax, eax
$LN3@LoadGroup:

; 313  : 	return (nLocalGroupDepth == 0);

  00497	85 c0		 test	 eax, eax
  00499	0f 94 45 d7	 sete	 BYTE PTR $T4[ebp]
$LN31@LoadGroup:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  0049d	8d 4d c4	 lea	 ecx, DWORD PTR _stTokenVector$[ebp]
  004a0	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 313  : 	return (nLocalGroupDepth == 0);

  004a5	8a 45 d7	 mov	 al, BYTE PTR $T4[ebp]

; 314  : }

  004a8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004b2	59		 pop	 ecx
  004b3	5f		 pop	 edi
  004b4	5e		 pop	 esi
  004b5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004b8	33 cd		 xor	 ecx, ebp
  004ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004bf	8b e5		 mov	 esp, ebp
  004c1	5d		 pop	 ebp
  004c2	c2 04 00	 ret	 4
$LN117@LoadGroup:
  004c5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN389@LoadGroup:
  004ca	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR _stTokenVector$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$1:
  00008	8d 4d a4	 lea	 ecx, DWORD PTR _stSubTokenVector$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR _key$5[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z$3:
  00018	8d 4d d8	 lea	 ecx, DWORD PTR _key$6[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z ENDP ; CTextFileLoader::LoadGroup
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?__DestroyGroupNodeVector@CTextFileLoader@@IAEXXZ
_TEXT	SEGMENT
?__DestroyGroupNodeVector@CTextFileLoader@@IAEXXZ PROC	; CTextFileLoader::__DestroyGroupNodeVector, COMDAT
; _this$ = ecx

; 161  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00004	8b 77 74	 mov	 esi, DWORD PTR [edi+116]
  00007	3b 77 78	 cmp	 esi, DWORD PTR [edi+120]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 163  : 	for (i=m_kVct_pkNode.begin(); i!=m_kVct_pkNode.end(); ++i)

  0000a	74 16		 je	 SHORT $LN3@DestroyGro
  0000c	0f 1f 40 00	 npad	 4
$LL4@DestroyGro:

; 164  : 		SGroupNode::Delete(*i);

  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ?Delete@SGroupNode@CTextFileLoader@@SAXPAU12@@Z ; CTextFileLoader::SGroupNode::Delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  00017	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 164  : 		SGroupNode::Delete(*i);

  0001a	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  0001d	3b 77 78	 cmp	 esi, DWORD PTR [edi+120]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 163  : 	for (i=m_kVct_pkNode.begin(); i!=m_kVct_pkNode.end(); ++i)

  00020	75 ee		 jne	 SHORT $LL4@DestroyGro
$LN3@DestroyGro:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00022	8b 47 74	 mov	 eax, DWORD PTR [edi+116]
  00025	3b 47 78	 cmp	 eax, DWORD PTR [edi+120]
  00028	74 03		 je	 SHORT $LN42@DestroyGro

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002a	89 47 78	 mov	 DWORD PTR [edi+120], eax
$LN42@DestroyGro:
  0002d	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 166  : }

  0002e	5e		 pop	 esi
  0002f	c3		 ret	 0
?__DestroyGroupNodeVector@CTextFileLoader@@IAEXXZ ENDP	; CTextFileLoader::__DestroyGroupNodeVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pString$ = 12						; size = 4
?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z PROC ; CTextFileLoader::GetTokenString, COMDAT
; _this$ = ecx

; 682  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 683  : 	CTokenVector * pTokenVector;
; 684  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00007	50		 push	 eax
  00008	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00010	85 c0		 test	 eax, eax
  00012	74 47		 je	 SHORT $LN22@GetTokenSt
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001c	3b ca		 cmp	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 687  : 	if (pTokenVector->empty())

  0001e	74 3b		 je	 SHORT $LN22@GetTokenSt
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00020	2b d1		 sub	 edx, ecx
  00022	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00027	f7 ea		 imul	 edx
  00029	c1 fa 02	 sar	 edx, 2
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	74 2e		 je	 SHORT $LN26@GetTokenSt
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  00035	8b 45 0c	 mov	 eax, DWORD PTR _pString$[ebp]
  00038	3b c1		 cmp	 eax, ecx
  0003a	74 14		 je	 SHORT $LN12@GetTokenSt

; 434  :         return _Myres > _Small_string_capacity;

  0003c	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00040	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]

; 426  :         if (_Large_mode_engaged()) {

  00043	76 02		 jbe	 SHORT $LN16@GetTokenSt

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00045	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN16@GetTokenSt:

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00047	52		 push	 edx
  00048	51		 push	 ecx
  00049	8b c8		 mov	 ecx, eax
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN12@GetTokenSt:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 695  : 	return TRUE;

  00050	b8 01 00 00 00	 mov	 eax, 1

; 696  : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
$LN22@GetTokenSt:

; 688  : 	{
; 689  : 		//Tracef(" CTextFileLoader::GetTokenString - Failed to find the value %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 690  : 		return FALSE;

  0005b	33 c0		 xor	 eax, eax

; 696  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
$LN26@GetTokenSt:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  00063	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN24@GetTokenSt:
  00068	cc		 int	 3
?GetTokenString@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV23@@Z ENDP ; CTextFileLoader::GetTokenString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DCOLORVALUE@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pColor$ = 12						; size = 4
?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DCOLORVALUE@@@Z PROC ; CTextFileLoader::GetTokenColor, COMDAT
; _this$ = ecx

; 662  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 663  : 	CTokenVector * pTokenVector;
; 664  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	0f 84 f3 00 00
	00		 je	 $LN65@GetTokenCo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	2b d1		 sub	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 667  : 	if (pTokenVector->size() != 4)

  00023	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00026	83 f8 18	 cmp	 eax, 24			; 00000018H
  00029	0f 83 dd 00 00
	00		 jae	 $LN65@GetTokenCo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1933 :         auto& _My_data = _Mypair._Myval2;

  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ea		 imul	 edx
  00036	c1 fa 02	 sar	 edx, 2
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00040	0f 84 cf 00 00
	00		 je	 $LN61@GetTokenCo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00046	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0004a	76 02		 jbe	 SHORT $LN16@GetTokenCo

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN16@GetTokenCo:
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 673  : 	pColor->r = atof(pTokenVector->at(0).c_str());

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _atof
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _pColor$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00059	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 673  : 	pColor->r = atof(pTokenVector->at(0).c_str());

  0005e	83 c4 04	 add	 esp, 4
  00061	d9 1f		 fstp	 DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00063	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00066	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
  00076	83 f8 01	 cmp	 eax, 1
  00079	0f 86 96 00 00
	00		 jbe	 $LN61@GetTokenCo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0007f	83 7b 2c 0f	 cmp	 DWORD PTR [ebx+44], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00083	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00086	76 02		 jbe	 SHORT $LN29@GetTokenCo

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00088	8b 00		 mov	 eax, DWORD PTR [eax]
$LN29@GetTokenCo:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 674  : 	pColor->g = atof(pTokenVector->at(1).c_str());

  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _atof
  00090	d9 5f 04	 fstp	 DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00093	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00096	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0009b	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 674  : 	pColor->g = atof(pTokenVector->at(1).c_str());

  0009d	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000a0	2b cb		 sub	 ecx, ebx
  000a2	f7 e9		 imul	 ecx
  000a4	c1 fa 02	 sar	 edx, 2
  000a7	8b c2		 mov	 eax, edx
  000a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ac	03 c2		 add	 eax, edx
  000ae	83 f8 02	 cmp	 eax, 2
  000b1	76 62		 jbe	 SHORT $LN61@GetTokenCo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000b3	83 7b 44 0f	 cmp	 DWORD PTR [ebx+68], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  000b7	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000ba	76 02		 jbe	 SHORT $LN42@GetTokenCo

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000bc	8b 00		 mov	 eax, DWORD PTR [eax]
$LN42@GetTokenCo:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 675  : 	pColor->b = atof(pTokenVector->at(2).c_str());

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _atof
  000c4	d9 5f 08	 fstp	 DWORD PTR [edi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000c7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ca	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000cf	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 675  : 	pColor->b = atof(pTokenVector->at(2).c_str());

  000d1	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000d4	2b cb		 sub	 ecx, ebx
  000d6	f7 e9		 imul	 ecx
  000d8	c1 fa 02	 sar	 edx, 2
  000db	8b c2		 mov	 eax, edx
  000dd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e0	03 c2		 add	 eax, edx
  000e2	83 f8 03	 cmp	 eax, 3
  000e5	76 2e		 jbe	 SHORT $LN61@GetTokenCo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000e7	83 7b 5c 0f	 cmp	 DWORD PTR [ebx+92], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  000eb	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000ee	76 02		 jbe	 SHORT $LN55@GetTokenCo

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000f0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN55@GetTokenCo:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 676  : 	pColor->a = atof(pTokenVector->at(3).c_str());

  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _atof
  000f8	83 c4 04	 add	 esp, 4

; 677  : 
; 678  : 	return TRUE;

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	d9 5f 0c	 fstp	 DWORD PTR [edi+12]
  00103	5f		 pop	 edi
  00104	5b		 pop	 ebx
  00105	5e		 pop	 esi

; 679  : }

  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN65@GetTokenCo:

; 668  : 	{
; 669  : 		//Tracef(" CTextFileLoader::GetTokenColor - This key should have 4 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 670  : 		return FALSE;

  0010c	33 c0		 xor	 eax, eax
  0010e	5e		 pop	 esi

; 679  : }

  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 08 00	 ret	 8
$LN61@GetTokenCo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  00115	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN77@GetTokenCo:
  0011a	cc		 int	 3
?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DCOLORVALUE@@@Z ENDP ; CTextFileLoader::GetTokenColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXCOLOR@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pColor$ = 12						; size = 4
?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXCOLOR@@@Z PROC ; CTextFileLoader::GetTokenColor, COMDAT
; _this$ = ecx

; 642  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 643  : 	CTokenVector * pTokenVector;
; 644  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	0f 84 f3 00 00
	00		 je	 $LN65@GetTokenCo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	2b d1		 sub	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 647  : 	if (pTokenVector->size() != 4)

  00023	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00026	83 f8 18	 cmp	 eax, 24			; 00000018H
  00029	0f 83 dd 00 00
	00		 jae	 $LN65@GetTokenCo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1933 :         auto& _My_data = _Mypair._Myval2;

  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ea		 imul	 edx
  00036	c1 fa 02	 sar	 edx, 2
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00040	0f 84 cf 00 00
	00		 je	 $LN61@GetTokenCo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00046	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0004a	76 02		 jbe	 SHORT $LN16@GetTokenCo

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN16@GetTokenCo:
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 653  : 	pColor->r = atof(pTokenVector->at(0).c_str());

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _atof
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _pColor$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00059	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 653  : 	pColor->r = atof(pTokenVector->at(0).c_str());

  0005e	83 c4 04	 add	 esp, 4
  00061	d9 1f		 fstp	 DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00063	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00066	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
  00076	83 f8 01	 cmp	 eax, 1
  00079	0f 86 96 00 00
	00		 jbe	 $LN61@GetTokenCo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0007f	83 7b 2c 0f	 cmp	 DWORD PTR [ebx+44], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00083	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00086	76 02		 jbe	 SHORT $LN29@GetTokenCo

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00088	8b 00		 mov	 eax, DWORD PTR [eax]
$LN29@GetTokenCo:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 654  : 	pColor->g = atof(pTokenVector->at(1).c_str());

  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _atof
  00090	d9 5f 04	 fstp	 DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00093	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00096	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0009b	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 654  : 	pColor->g = atof(pTokenVector->at(1).c_str());

  0009d	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000a0	2b cb		 sub	 ecx, ebx
  000a2	f7 e9		 imul	 ecx
  000a4	c1 fa 02	 sar	 edx, 2
  000a7	8b c2		 mov	 eax, edx
  000a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ac	03 c2		 add	 eax, edx
  000ae	83 f8 02	 cmp	 eax, 2
  000b1	76 62		 jbe	 SHORT $LN61@GetTokenCo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000b3	83 7b 44 0f	 cmp	 DWORD PTR [ebx+68], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  000b7	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000ba	76 02		 jbe	 SHORT $LN42@GetTokenCo

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000bc	8b 00		 mov	 eax, DWORD PTR [eax]
$LN42@GetTokenCo:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 655  : 	pColor->b = atof(pTokenVector->at(2).c_str());

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _atof
  000c4	d9 5f 08	 fstp	 DWORD PTR [edi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000c7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ca	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000cf	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 655  : 	pColor->b = atof(pTokenVector->at(2).c_str());

  000d1	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000d4	2b cb		 sub	 ecx, ebx
  000d6	f7 e9		 imul	 ecx
  000d8	c1 fa 02	 sar	 edx, 2
  000db	8b c2		 mov	 eax, edx
  000dd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e0	03 c2		 add	 eax, edx
  000e2	83 f8 03	 cmp	 eax, 3
  000e5	76 2e		 jbe	 SHORT $LN61@GetTokenCo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000e7	83 7b 5c 0f	 cmp	 DWORD PTR [ebx+92], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  000eb	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000ee	76 02		 jbe	 SHORT $LN55@GetTokenCo

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000f0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN55@GetTokenCo:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 656  : 	pColor->a = atof(pTokenVector->at(3).c_str());

  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _atof
  000f8	83 c4 04	 add	 esp, 4

; 657  : 
; 658  : 	return TRUE;

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	d9 5f 0c	 fstp	 DWORD PTR [edi+12]
  00103	5f		 pop	 edi
  00104	5b		 pop	 ebx
  00105	5e		 pop	 esi

; 659  : }

  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN65@GetTokenCo:

; 648  : 	{
; 649  : 		//Tracef(" CTextFileLoader::GetTokenColor - This key should have 4 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 650  : 		return FALSE;

  0010c	33 c0		 xor	 eax, eax
  0010e	5e		 pop	 esi

; 659  : }

  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 08 00	 ret	 8
$LN61@GetTokenCo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  00115	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN77@GetTokenCo:
  0011a	cc		 int	 3
?GetTokenColor@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXCOLOR@@@Z ENDP ; CTextFileLoader::GetTokenColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenDirection@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DVECTOR@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pVector$ = 12						; size = 4
?GetTokenDirection@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DVECTOR@@@Z PROC ; CTextFileLoader::GetTokenDirection, COMDAT
; _this$ = ecx

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 624  : 	CTokenVector * pTokenVector;
; 625  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	0f 84 bb 00 00
	00		 je	 $LN51@GetTokenDi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	2b d1		 sub	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 628  : 	if (pTokenVector->size() != 3)

  00023	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  00026	83 f8 18	 cmp	 eax, 24			; 00000018H
  00029	0f 83 a5 00 00
	00		 jae	 $LN51@GetTokenDi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1933 :         auto& _My_data = _Mypair._Myval2;

  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ea		 imul	 edx
  00036	c1 fa 02	 sar	 edx, 2
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00040	0f 84 97 00 00
	00		 je	 $LN48@GetTokenDi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00046	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0004a	76 02		 jbe	 SHORT $LN16@GetTokenDi

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN16@GetTokenDi:
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 634  : 	pVector->x = atof(pTokenVector->at(0).c_str());

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _atof
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _pVector$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00059	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 634  : 	pVector->x = atof(pTokenVector->at(0).c_str());

  0005e	83 c4 04	 add	 esp, 4
  00061	d9 1f		 fstp	 DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00063	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00066	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
  00076	83 f8 01	 cmp	 eax, 1
  00079	76 62		 jbe	 SHORT $LN48@GetTokenDi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0007b	83 7b 2c 0f	 cmp	 DWORD PTR [ebx+44], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  0007f	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00082	76 02		 jbe	 SHORT $LN29@GetTokenDi

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00084	8b 00		 mov	 eax, DWORD PTR [eax]
$LN29@GetTokenDi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 635  : 	pVector->y = atof(pTokenVector->at(1).c_str());

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _atof
  0008c	d9 5f 04	 fstp	 DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0008f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00092	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00097	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 635  : 	pVector->y = atof(pTokenVector->at(1).c_str());

  00099	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0009c	2b cb		 sub	 ecx, ebx
  0009e	f7 e9		 imul	 ecx
  000a0	c1 fa 02	 sar	 edx, 2
  000a3	8b c2		 mov	 eax, edx
  000a5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a8	03 c2		 add	 eax, edx
  000aa	83 f8 02	 cmp	 eax, 2
  000ad	76 2e		 jbe	 SHORT $LN48@GetTokenDi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000af	83 7b 44 0f	 cmp	 DWORD PTR [ebx+68], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  000b3	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000b6	76 02		 jbe	 SHORT $LN42@GetTokenDi

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000b8	8b 00		 mov	 eax, DWORD PTR [eax]
$LN42@GetTokenDi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 636  : 	pVector->z = atof(pTokenVector->at(2).c_str());

  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _atof
  000c0	83 c4 04	 add	 esp, 4

; 637  : 
; 638  : 	return TRUE;

  000c3	b8 01 00 00 00	 mov	 eax, 1
  000c8	d9 5f 08	 fstp	 DWORD PTR [edi+8]
  000cb	5f		 pop	 edi
  000cc	5b		 pop	 ebx
  000cd	5e		 pop	 esi

; 639  : }

  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
$LN51@GetTokenDi:

; 629  : 	{
; 630  : 		//Tracef(" CTextFileLoader::GetTokenDirection - This key should have 3 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 631  : 		return FALSE;

  000d4	33 c0		 xor	 eax, eax
  000d6	5e		 pop	 esi

; 639  : }

  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8
$LN48@GetTokenDi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  000dd	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN61@GetTokenDi:
  000e2	cc		 int	 3
?GetTokenDirection@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_D3DVECTOR@@@Z ENDP ; CTextFileLoader::GetTokenDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenQuaternion@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXQUATERNION@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pQ$ = 12						; size = 4
?GetTokenQuaternion@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXQUATERNION@@@Z PROC ; CTextFileLoader::GetTokenQuaternion, COMDAT
; _this$ = ecx

; 603  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 604  : 	CTokenVector * pTokenVector;
; 605  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	0f 84 f3 00 00
	00		 je	 $LN65@GetTokenQu
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	2b d1		 sub	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 608  : 	if (pTokenVector->size() != 4)

  00023	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00026	83 f8 18	 cmp	 eax, 24			; 00000018H
  00029	0f 83 dd 00 00
	00		 jae	 $LN65@GetTokenQu
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1933 :         auto& _My_data = _Mypair._Myval2;

  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ea		 imul	 edx
  00036	c1 fa 02	 sar	 edx, 2
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00040	0f 84 cf 00 00
	00		 je	 $LN61@GetTokenQu
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00046	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0004a	76 02		 jbe	 SHORT $LN16@GetTokenQu

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN16@GetTokenQu:
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 614  : 	pQ->x = atof(pTokenVector->at(0).c_str());

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _atof
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _pQ$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00059	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 614  : 	pQ->x = atof(pTokenVector->at(0).c_str());

  0005e	83 c4 04	 add	 esp, 4
  00061	d9 1f		 fstp	 DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00063	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00066	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
  00076	83 f8 01	 cmp	 eax, 1
  00079	0f 86 96 00 00
	00		 jbe	 $LN61@GetTokenQu
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0007f	83 7b 2c 0f	 cmp	 DWORD PTR [ebx+44], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00083	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00086	76 02		 jbe	 SHORT $LN29@GetTokenQu

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00088	8b 00		 mov	 eax, DWORD PTR [eax]
$LN29@GetTokenQu:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 615  : 	pQ->y = atof(pTokenVector->at(1).c_str());

  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _atof
  00090	d9 5f 04	 fstp	 DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00093	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00096	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0009b	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 615  : 	pQ->y = atof(pTokenVector->at(1).c_str());

  0009d	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000a0	2b cb		 sub	 ecx, ebx
  000a2	f7 e9		 imul	 ecx
  000a4	c1 fa 02	 sar	 edx, 2
  000a7	8b c2		 mov	 eax, edx
  000a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ac	03 c2		 add	 eax, edx
  000ae	83 f8 02	 cmp	 eax, 2
  000b1	76 62		 jbe	 SHORT $LN61@GetTokenQu
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000b3	83 7b 44 0f	 cmp	 DWORD PTR [ebx+68], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  000b7	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000ba	76 02		 jbe	 SHORT $LN42@GetTokenQu

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000bc	8b 00		 mov	 eax, DWORD PTR [eax]
$LN42@GetTokenQu:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 616  : 	pQ->z = atof(pTokenVector->at(2).c_str());

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _atof
  000c4	d9 5f 08	 fstp	 DWORD PTR [edi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000c7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ca	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000cf	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 616  : 	pQ->z = atof(pTokenVector->at(2).c_str());

  000d1	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000d4	2b cb		 sub	 ecx, ebx
  000d6	f7 e9		 imul	 ecx
  000d8	c1 fa 02	 sar	 edx, 2
  000db	8b c2		 mov	 eax, edx
  000dd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e0	03 c2		 add	 eax, edx
  000e2	83 f8 03	 cmp	 eax, 3
  000e5	76 2e		 jbe	 SHORT $LN61@GetTokenQu
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000e7	83 7b 5c 0f	 cmp	 DWORD PTR [ebx+92], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  000eb	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000ee	76 02		 jbe	 SHORT $LN55@GetTokenQu

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000f0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN55@GetTokenQu:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 617  : 	pQ->w = atof(pTokenVector->at(3).c_str());

  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _atof
  000f8	83 c4 04	 add	 esp, 4

; 618  : 
; 619  : 	return TRUE;

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	d9 5f 0c	 fstp	 DWORD PTR [edi+12]
  00103	5f		 pop	 edi
  00104	5b		 pop	 ebx
  00105	5e		 pop	 esi

; 620  : }

  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN65@GetTokenQu:

; 609  : 	{
; 610  : 		//Tracef(" CTextFileLoader::GetTokenVector3 - This key should have 3 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 611  : 		return FALSE;

  0010c	33 c0		 xor	 eax, eax
  0010e	5e		 pop	 esi

; 620  : }

  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 08 00	 ret	 8
$LN61@GetTokenQu:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  00115	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN77@GetTokenQu:
  0011a	cc		 int	 3
?GetTokenQuaternion@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXQUATERNION@@@Z ENDP ; CTextFileLoader::GetTokenQuaternion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenPosition@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_c_rstrKey$ = 8						; size = 4
_pVector$ = 12						; size = 4
?GetTokenPosition@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z PROC ; CTextFileLoader::GetTokenPosition, COMDAT
; _this$ = ecx

; 598  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : }

  00003	5d		 pop	 ebp

; 599  : 	return GetTokenVector3(c_rstrKey, pVector);

  00004	e9 00 00 00 00	 jmp	 ?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ; CTextFileLoader::GetTokenVector3
?GetTokenPosition@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ENDP ; CTextFileLoader::GetTokenPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenVector4@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR4@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pVector4$ = 12						; size = 4
?GetTokenVector4@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR4@@@Z PROC ; CTextFileLoader::GetTokenVector4, COMDAT
; _this$ = ecx

; 577  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 578  : 	CTokenVector * pTokenVector;
; 579  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	0f 84 f3 00 00
	00		 je	 $LN65@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	2b d1		 sub	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 582  : 	if (pTokenVector->size() != 4)

  00023	8d 42 a0	 lea	 eax, DWORD PTR [edx-96]
  00026	83 f8 18	 cmp	 eax, 24			; 00000018H
  00029	0f 83 dd 00 00
	00		 jae	 $LN65@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1933 :         auto& _My_data = _Mypair._Myval2;

  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ea		 imul	 edx
  00036	c1 fa 02	 sar	 edx, 2
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00040	0f 84 cf 00 00
	00		 je	 $LN61@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00046	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0004a	76 02		 jbe	 SHORT $LN16@GetTokenVe

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN16@GetTokenVe:
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 588  : 	pVector4->x = atof(pTokenVector->at(0).c_str());

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _atof
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _pVector4$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00059	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 588  : 	pVector4->x = atof(pTokenVector->at(0).c_str());

  0005e	83 c4 04	 add	 esp, 4
  00061	d9 1f		 fstp	 DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00063	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00066	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
  00076	83 f8 01	 cmp	 eax, 1
  00079	0f 86 96 00 00
	00		 jbe	 $LN61@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0007f	83 7b 2c 0f	 cmp	 DWORD PTR [ebx+44], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00083	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00086	76 02		 jbe	 SHORT $LN29@GetTokenVe

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00088	8b 00		 mov	 eax, DWORD PTR [eax]
$LN29@GetTokenVe:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 589  : 	pVector4->y = atof(pTokenVector->at(1).c_str());

  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _atof
  00090	d9 5f 04	 fstp	 DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00093	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00096	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0009b	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 589  : 	pVector4->y = atof(pTokenVector->at(1).c_str());

  0009d	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000a0	2b cb		 sub	 ecx, ebx
  000a2	f7 e9		 imul	 ecx
  000a4	c1 fa 02	 sar	 edx, 2
  000a7	8b c2		 mov	 eax, edx
  000a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ac	03 c2		 add	 eax, edx
  000ae	83 f8 02	 cmp	 eax, 2
  000b1	76 62		 jbe	 SHORT $LN61@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000b3	83 7b 44 0f	 cmp	 DWORD PTR [ebx+68], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  000b7	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000ba	76 02		 jbe	 SHORT $LN42@GetTokenVe

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000bc	8b 00		 mov	 eax, DWORD PTR [eax]
$LN42@GetTokenVe:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 590  : 	pVector4->z = atof(pTokenVector->at(2).c_str());

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _atof
  000c4	d9 5f 08	 fstp	 DWORD PTR [edi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000c7	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ca	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000cf	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 590  : 	pVector4->z = atof(pTokenVector->at(2).c_str());

  000d1	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000d4	2b cb		 sub	 ecx, ebx
  000d6	f7 e9		 imul	 ecx
  000d8	c1 fa 02	 sar	 edx, 2
  000db	8b c2		 mov	 eax, edx
  000dd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e0	03 c2		 add	 eax, edx
  000e2	83 f8 03	 cmp	 eax, 3
  000e5	76 2e		 jbe	 SHORT $LN61@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000e7	83 7b 5c 0f	 cmp	 DWORD PTR [ebx+92], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  000eb	8d 43 48	 lea	 eax, DWORD PTR [ebx+72]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000ee	76 02		 jbe	 SHORT $LN55@GetTokenVe

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000f0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN55@GetTokenVe:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 591  : 	pVector4->w = atof(pTokenVector->at(3).c_str());

  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _atof
  000f8	83 c4 04	 add	 esp, 4

; 592  : 
; 593  : 	return TRUE;

  000fb	b8 01 00 00 00	 mov	 eax, 1
  00100	d9 5f 0c	 fstp	 DWORD PTR [edi+12]
  00103	5f		 pop	 edi
  00104	5b		 pop	 ebx
  00105	5e		 pop	 esi

; 594  : }

  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN65@GetTokenVe:

; 583  : 	{
; 584  : 		//Tracef(" CTextFileLoader::GetTokenVector3 - This key should have 3 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 585  : 		return FALSE;

  0010c	33 c0		 xor	 eax, eax
  0010e	5e		 pop	 esi

; 594  : }

  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 08 00	 ret	 8
$LN61@GetTokenVe:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  00115	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN77@GetTokenVe:
  0011a	cc		 int	 3
?GetTokenVector4@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR4@@@Z ENDP ; CTextFileLoader::GetTokenVector4
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pVector3$ = 12						; size = 4
?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z PROC ; CTextFileLoader::GetTokenVector3, COMDAT
; _this$ = ecx

; 558  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 559  : 	CTokenVector * pTokenVector;
; 560  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	0f 84 bb 00 00
	00		 je	 $LN51@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  0001c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00021	2b d1		 sub	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 563  : 	if (pTokenVector->size() != 3)

  00023	8d 42 b8	 lea	 eax, DWORD PTR [edx-72]
  00026	83 f8 18	 cmp	 eax, 24			; 00000018H
  00029	0f 83 a5 00 00
	00		 jae	 $LN51@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1933 :         auto& _My_data = _Mypair._Myval2;

  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ea		 imul	 edx
  00036	c1 fa 02	 sar	 edx, 2
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00040	0f 84 97 00 00
	00		 je	 $LN48@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00046	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0004a	76 02		 jbe	 SHORT $LN16@GetTokenVe

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0004c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN16@GetTokenVe:
  0004e	53		 push	 ebx
  0004f	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 569  : 	pVector3->x = atof(pTokenVector->at(0).c_str());

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _atof
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _pVector3$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00059	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 569  : 	pVector3->x = atof(pTokenVector->at(0).c_str());

  0005e	83 c4 04	 add	 esp, 4
  00061	d9 1f		 fstp	 DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00063	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00066	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00068	2b cb		 sub	 ecx, ebx
  0006a	f7 e9		 imul	 ecx
  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
  00076	83 f8 01	 cmp	 eax, 1
  00079	76 62		 jbe	 SHORT $LN48@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0007b	83 7b 2c 0f	 cmp	 DWORD PTR [ebx+44], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  0007f	8d 43 18	 lea	 eax, DWORD PTR [ebx+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00082	76 02		 jbe	 SHORT $LN29@GetTokenVe

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00084	8b 00		 mov	 eax, DWORD PTR [eax]
$LN29@GetTokenVe:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 570  : 	pVector3->y = atof(pTokenVector->at(1).c_str());

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 _atof
  0008c	d9 5f 04	 fstp	 DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0008f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00092	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00097	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 570  : 	pVector3->y = atof(pTokenVector->at(1).c_str());

  00099	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0009c	2b cb		 sub	 ecx, ebx
  0009e	f7 e9		 imul	 ecx
  000a0	c1 fa 02	 sar	 edx, 2
  000a3	8b c2		 mov	 eax, edx
  000a5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a8	03 c2		 add	 eax, edx
  000aa	83 f8 02	 cmp	 eax, 2
  000ad	76 2e		 jbe	 SHORT $LN48@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000af	83 7b 44 0f	 cmp	 DWORD PTR [ebx+68], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  000b3	8d 43 30	 lea	 eax, DWORD PTR [ebx+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000b6	76 02		 jbe	 SHORT $LN42@GetTokenVe

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000b8	8b 00		 mov	 eax, DWORD PTR [eax]
$LN42@GetTokenVe:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 571  : 	pVector3->z = atof(pTokenVector->at(2).c_str());

  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _atof
  000c0	83 c4 04	 add	 esp, 4

; 572  : 
; 573  : 	return TRUE;

  000c3	b8 01 00 00 00	 mov	 eax, 1
  000c8	d9 5f 08	 fstp	 DWORD PTR [edi+8]
  000cb	5f		 pop	 edi
  000cc	5b		 pop	 ebx
  000cd	5e		 pop	 esi

; 574  : }

  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
$LN51@GetTokenVe:

; 564  : 	{
; 565  : 		//Tracef(" CTextFileLoader::GetTokenVector3 - This key should have 3 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 566  : 		return FALSE;

  000d4	33 c0		 xor	 eax, eax
  000d6	5e		 pop	 esi

; 574  : }

  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8
$LN48@GetTokenVe:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  000dd	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN61@GetTokenVe:
  000e2	cc		 int	 3
?GetTokenVector3@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR3@@@Z ENDP ; CTextFileLoader::GetTokenVector3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenVector2@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR2@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pVector2$ = 12						; size = 4
?GetTokenVector2@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR2@@@Z PROC ; CTextFileLoader::GetTokenVector2, COMDAT
; _this$ = ecx

; 540  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 541  : 	CTokenVector * pTokenVector;
; 542  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00008	50		 push	 eax
  00009	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00011	85 c0		 test	 eax, eax
  00013	74 7f		 je	 SHORT $LN37@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00015	8b 75 fc	 mov	 esi, DWORD PTR _pTokenVector$[ebp]
  00018	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001d	2b d1		 sub	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 545  : 	if (pTokenVector->size() != 2)

  0001f	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  00022	83 f8 18	 cmp	 eax, 24			; 00000018H
  00025	73 6d		 jae	 SHORT $LN37@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1933 :         auto& _My_data = _Mypair._Myval2;

  00027	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002c	f7 ea		 imul	 edx
  0002e	c1 fa 02	 sar	 edx, 2
  00031	8b c2		 mov	 eax, edx
  00033	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00036	03 c2		 add	 eax, edx

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00038	74 63		 je	 SHORT $LN35@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0003a	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0003e	76 02		 jbe	 SHORT $LN16@GetTokenVe

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00040	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN16@GetTokenVe:
  00042	53		 push	 ebx
  00043	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 551  : 	pVector2->x = atof(pTokenVector->at(0).c_str());

  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _atof
  0004a	8b 5d 0c	 mov	 ebx, DWORD PTR _pVector2$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0004d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 551  : 	pVector2->x = atof(pTokenVector->at(0).c_str());

  00052	83 c4 04	 add	 esp, 4
  00055	d9 1b		 fstp	 DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00057	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005a	8b 3e		 mov	 edi, DWORD PTR [esi]
  0005c	2b cf		 sub	 ecx, edi
  0005e	f7 e9		 imul	 ecx
  00060	c1 fa 02	 sar	 edx, 2
  00063	8b c2		 mov	 eax, edx
  00065	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00068	03 c2		 add	 eax, edx
  0006a	83 f8 01	 cmp	 eax, 1
  0006d	76 2e		 jbe	 SHORT $LN35@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0006f	83 7f 2c 0f	 cmp	 DWORD PTR [edi+44], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00073	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00076	76 02		 jbe	 SHORT $LN29@GetTokenVe

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00078	8b 00		 mov	 eax, DWORD PTR [eax]
$LN29@GetTokenVe:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 552  : 	pVector2->y = atof(pTokenVector->at(1).c_str());

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _atof
  00080	83 c4 04	 add	 esp, 4

; 553  : 
; 554  : 	return TRUE;

  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	d9 5b 04	 fstp	 DWORD PTR [ebx+4]
  0008b	5f		 pop	 edi
  0008c	5b		 pop	 ebx
  0008d	5e		 pop	 esi

; 555  : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
$LN37@GetTokenVe:

; 546  : 	{
; 547  : 		//Tracef(" CTextFileLoader::GetTokenVector2 - This key should have 2 values %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 548  : 		return FALSE;

  00094	33 c0		 xor	 eax, eax
  00096	5e		 pop	 esi

; 555  : }

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
$LN35@GetTokenVe:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  0009d	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN45@GetTokenVe:
  000a2	cc		 int	 3
?GetTokenVector2@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUD3DXVECTOR2@@@Z ENDP ; CTextFileLoader::GetTokenVector2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pData$ = 12						; size = 4
?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z PROC ; CTextFileLoader::GetTokenFloat, COMDAT
; _this$ = ecx

; 523  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 524  : 	CTokenVector * pTokenVector;
; 525  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00007	50		 push	 eax
  00008	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00010	85 c0		 test	 eax, eax
  00012	74 42		 je	 SHORT $LN22@GetTokenFl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001c	3b ca		 cmp	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 528  : 	if (pTokenVector->empty())

  0001e	74 36		 je	 SHORT $LN22@GetTokenFl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00020	2b d1		 sub	 edx, ecx
  00022	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00027	f7 ea		 imul	 edx
  00029	c1 fa 02	 sar	 edx, 2
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	74 29		 je	 SHORT $LN26@GetTokenFl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00035	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00039	76 02		 jbe	 SHORT $LN16@GetTokenFl

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN16@GetTokenFl:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 534  : 	*pData = atof(pTokenVector->at(0).c_str());

  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 _atof
  00043	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00046	83 c4 04	 add	 esp, 4
  00049	d9 18		 fstp	 DWORD PTR [eax]

; 535  : 
; 536  : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 537  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN22@GetTokenFl:

; 529  : 	{
; 530  : 		//Tracef(" CTextFileLoader::GetTokenFloat - Failed to find the value %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 531  : 		return FALSE;

  00056	33 c0		 xor	 eax, eax

; 537  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
$LN26@GetTokenFl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  0005e	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN24@GetTokenFl:
  00063	cc		 int	 3
?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ENDP ; CTextFileLoader::GetTokenFloat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenDoubleWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAK@Z
_TEXT	SEGMENT
_c_rstrKey$ = 8						; size = 4
_pData$ = 12						; size = 4
?GetTokenDoubleWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAK@Z PROC ; CTextFileLoader::GetTokenDoubleWord, COMDAT
; _this$ = ecx

; 518  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 520  : }

  00003	5d		 pop	 ebp

; 519  : 	return GetTokenInteger(c_rstrKey, *(int **)(&pData));

  00004	e9 00 00 00 00	 jmp	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
?GetTokenDoubleWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAK@Z ENDP ; CTextFileLoader::GetTokenDoubleWord
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pData$ = 12						; size = 4
?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z PROC ; CTextFileLoader::GetTokenInteger, COMDAT
; _this$ = ecx

; 501  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 502  : 	CTokenVector * pTokenVector;
; 503  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00007	50		 push	 eax
  00008	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00010	85 c0		 test	 eax, eax
  00012	74 42		 je	 SHORT $LN22@GetTokenIn
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001c	3b ca		 cmp	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 506  : 	if (pTokenVector->empty())

  0001e	74 36		 je	 SHORT $LN22@GetTokenIn
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00020	2b d1		 sub	 edx, ecx
  00022	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00027	f7 ea		 imul	 edx
  00029	c1 fa 02	 sar	 edx, 2
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	74 29		 je	 SHORT $LN26@GetTokenIn
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00035	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00039	76 02		 jbe	 SHORT $LN16@GetTokenIn

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN16@GetTokenIn:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 512  : 	*pData = atoi(pTokenVector->at(0).c_str());

  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 __atoi64
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  00046	83 c4 04	 add	 esp, 4
  00049	89 01		 mov	 DWORD PTR [ecx], eax

; 513  : 
; 514  : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 515  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN22@GetTokenIn:

; 507  : 	{
; 508  : 		//Tracef(" CTextFileLoader::GetTokenInteger - Failed to find the value %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 509  : 		return FALSE;

  00056	33 c0		 xor	 eax, eax

; 515  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
$LN26@GetTokenIn:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  0005e	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN24@GetTokenIn:
  00063	cc		 int	 3
?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ENDP ; CTextFileLoader::GetTokenInteger
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pData$ = 12						; size = 4
?GetTokenWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z PROC ; CTextFileLoader::GetTokenWord, COMDAT
; _this$ = ecx

; 484  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 485  : 	CTokenVector * pTokenVector;
; 486  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00007	50		 push	 eax
  00008	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00010	85 c0		 test	 eax, eax
  00012	74 43		 je	 SHORT $LN22@GetTokenWo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001c	3b ca		 cmp	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 489  : 	if (pTokenVector->empty())

  0001e	74 37		 je	 SHORT $LN22@GetTokenWo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00020	2b d1		 sub	 edx, ecx
  00022	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00027	f7 ea		 imul	 edx
  00029	c1 fa 02	 sar	 edx, 2
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	74 2a		 je	 SHORT $LN26@GetTokenWo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00035	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00039	76 02		 jbe	 SHORT $LN16@GetTokenWo

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN16@GetTokenWo:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 495  : 	*pData = WORD(atoi(pTokenVector->at(0).c_str()));

  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 __atoi64
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  00046	83 c4 04	 add	 esp, 4
  00049	66 89 01	 mov	 WORD PTR [ecx], ax

; 496  : 
; 497  : 	return TRUE;

  0004c	b8 01 00 00 00	 mov	 eax, 1

; 498  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
$LN22@GetTokenWo:

; 490  : 	{
; 491  : 		//Tracef(" CTextFileLoader::GetTokenWord - Failed to find the value %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 492  : 		return FALSE;

  00057	33 c0		 xor	 eax, eax

; 498  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN26@GetTokenWo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  0005f	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN24@GetTokenWo:
  00064	cc		 int	 3
?GetTokenWord@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAG@Z ENDP ; CTextFileLoader::GetTokenWord
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenByte@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pData$ = 12						; size = 4
?GetTokenByte@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE@Z PROC ; CTextFileLoader::GetTokenByte, COMDAT
; _this$ = ecx

; 467  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 468  : 	CTokenVector * pTokenVector;
; 469  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00007	50		 push	 eax
  00008	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00010	85 c0		 test	 eax, eax
  00012	74 42		 je	 SHORT $LN22@GetTokenBy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001c	3b ca		 cmp	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 472  : 	if (pTokenVector->empty())

  0001e	74 36		 je	 SHORT $LN22@GetTokenBy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00020	2b d1		 sub	 edx, ecx
  00022	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00027	f7 ea		 imul	 edx
  00029	c1 fa 02	 sar	 edx, 2
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	74 29		 je	 SHORT $LN26@GetTokenBy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00035	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00039	76 02		 jbe	 SHORT $LN16@GetTokenBy

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN16@GetTokenBy:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 478  : 	*pData = BYTE(atoi(pTokenVector->at(0).c_str()));

  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 __atoi64
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  00046	83 c4 04	 add	 esp, 4
  00049	88 01		 mov	 BYTE PTR [ecx], al

; 479  : 
; 480  : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 481  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN22@GetTokenBy:

; 473  : 	{
; 474  : 		//Tracef(" CTextFileLoader::GetTokenByte - Failed to find the value %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 475  : 		return FALSE;

  00056	33 c0		 xor	 eax, eax

; 481  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
$LN26@GetTokenBy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  0005e	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN24@GetTokenBy:
  00063	cc		 int	 3
?GetTokenByte@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAE@Z ENDP ; CTextFileLoader::GetTokenByte
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z
_TEXT	SEGMENT
_pTokenVector$ = -4					; size = 4
_c_rstrKey$ = 8						; size = 4
_pData$ = 12						; size = 4
?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z PROC ; CTextFileLoader::GetTokenBoolean, COMDAT
; _this$ = ecx

; 450  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 451  : 	CTokenVector * pTokenVector;
; 452  : 	if (!GetTokenVector(c_rstrKey, &pTokenVector))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00007	50		 push	 eax
  00008	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  00010	85 c0		 test	 eax, eax
  00012	74 42		 je	 SHORT $LN22@GetTokenBo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001c	3b ca		 cmp	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 455  : 	if (pTokenVector->empty())

  0001e	74 36		 je	 SHORT $LN22@GetTokenBo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00020	2b d1		 sub	 edx, ecx
  00022	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00027	f7 ea		 imul	 edx
  00029	c1 fa 02	 sar	 edx, 2
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	74 29		 je	 SHORT $LN26@GetTokenBo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00035	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00039	76 02		 jbe	 SHORT $LN16@GetTokenBo

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN16@GetTokenBo:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 461  : 	*pData = BOOL(atoi(pTokenVector->at(0).c_str()));

  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 __atoi64
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  00046	83 c4 04	 add	 esp, 4
  00049	89 01		 mov	 DWORD PTR [ecx], eax

; 462  : 
; 463  : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 464  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN22@GetTokenBo:

; 456  : 	{
; 457  : 		//Tracef(" CTextFileLoader::GetTokenBoolean - Failed to find the value %s [%s : %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 458  : 		return FALSE;

  00056	33 c0		 xor	 eax, eax

; 464  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
$LN26@GetTokenBo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  0005e	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN24@GetTokenBo:
  00063	cc		 int	 3
?GetTokenBoolean@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ENDP ; CTextFileLoader::GetTokenBoolean
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z
_TEXT	SEGMENT
_c_rstrKey$ = 8						; size = 4
_ppTokenVector$ = 12					; size = 4
?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z PROC ; CTextFileLoader::GetTokenVector, COMDAT
; _this$ = ecx

; 424  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 425  : 	if (!m_pcurNode)

  00003	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1a		 je	 SHORT $LN5@GetTokenVe

; 426  : 	{
; 427  : 		assert(!"Node to access has not set!");
; 428  : 		return FALSE;
; 429  : 	}
; 430  : 
; 431  : 	CTokenVector* pkRetTokenVector=m_pcurNode->GetTokenVector(c_rstrKey);

  0000a	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  0000d	e8 00 00 00 00	 call	 ?GetTokenVector@SGroupNode@CTextFileLoader@@QAEPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z ; CTextFileLoader::SGroupNode::GetTokenVector

; 432  : 	if (!pkRetTokenVector)

  00012	85 c0		 test	 eax, eax
  00014	74 0e		 je	 SHORT $LN5@GetTokenVe

; 434  : 
; 435  : 	*ppTokenVector = pkRetTokenVector;

  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _ppTokenVector$[ebp]
  00019	89 01		 mov	 DWORD PTR [ecx], eax

; 436  : 
; 437  : 	//CTokenVectorMap::iterator itor = m_pcurNode->LocalTokenVectorMap.find(c_rstrKey);
; 438  : 	//if (m_pcurNode->LocalTokenVectorMap.end() == itor)
; 439  : 	//{
; 440  : 		//Tracef(" CTextFileLoader::GetTokenVector - Failed to find the key %s [%s :: %s]\n", m_File.GetFileName(), m_pcurNode->strGroupName.c_str(), c_rstrKey.c_str());
; 441  : 	//	return FALSE;
; 442  : 	//}
; 443  : 
; 444  : 	//*ppTokenVector = &itor->second;
; 445  : 
; 446  : 	return TRUE;

  0001b	b8 01 00 00 00	 mov	 eax, 1

; 447  : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN5@GetTokenVe:

; 433  : 		return FALSE;

  00024	33 c0		 xor	 eax, eax

; 447  : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ENDP ; CTextFileLoader::GetTokenVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?IsToken@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_rstrKey$ = 8						; size = 4
?IsToken@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CTextFileLoader::IsToken, COMDAT
; _this$ = ecx

; 412  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 413  : 	if (!m_pcurNode)

  00003	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  00006	85 c9		 test	 ecx, ecx
  00008	75 06		 jne	 SHORT $LN2@IsToken

; 414  : 	{
; 415  : 		assert(!"Node to access has not set!");
; 416  : 		return FALSE;

  0000a	33 c0		 xor	 eax, eax

; 420  : 	//return m_pcurNode->LocalTokenVectorMap.end() != m_pcurNode->LocalTokenVectorMap.find(c_rstrKey);
; 421  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@IsToken:

; 417  : 	}
; 418  : 
; 419  : 	return m_pcurNode->IsExistTokenVector(c_rstrKey);

  00010	ff 75 08	 push	 DWORD PTR _c_rstrKey$[ebp]
  00013	e8 00 00 00 00	 call	 ?IsExistTokenVector@SGroupNode@CTextFileLoader@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTextFileLoader::SGroupNode::IsExistTokenVector
  00018	0f b6 c0	 movzx	 eax, al

; 420  : 	//return m_pcurNode->LocalTokenVectorMap.end() != m_pcurNode->LocalTokenVectorMap.find(c_rstrKey);
; 421  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?IsToken@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CTextFileLoader::IsToken
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_pstrName$ = 8						; size = 4
?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CTextFileLoader::GetCurrentNodeName, COMDAT
; _this$ = ecx

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 401  : 	if (!m_pcurNode)

  00003	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2d		 je	 SHORT $LN15@GetCurrent

; 402  : 		return FALSE;
; 403  : 	if (NULL == m_pcurNode->pParentNode)

  0000a	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0000e	74 27		 je	 SHORT $LN15@GetCurrent

; 405  : 
; 406  : 	*pstrName = m_pcurNode->GetGroupName();

  00010	e8 00 00 00 00	 call	 ?GetGroupName@SGroupNode@CTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CTextFileLoader::SGroupNode::GetGroupName
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  00015	8b 4d 08	 mov	 ecx, DWORD PTR _pstrName$[ebp]
  00018	3b c8		 cmp	 ecx, eax
  0001a	74 12		 je	 SHORT $LN5@GetCurrent

; 434  :         return _Myres > _Small_string_capacity;

  0001c	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00020	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  00023	76 02		 jbe	 SHORT $LN9@GetCurrent

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00025	8b 00		 mov	 eax, DWORD PTR [eax]
$LN9@GetCurrent:

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00027	52		 push	 edx
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN5@GetCurrent:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 408  : 	return TRUE;

  0002e	b8 01 00 00 00	 mov	 eax, 1

; 409  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN15@GetCurrent:

; 404  : 		return FALSE;

  00037	33 c0		 xor	 eax, eax

; 409  : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?GetCurrentNodeName@CTextFileLoader@@QAEHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CTextFileLoader::GetCurrentNodeName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetParentNode@CTextFileLoader@@QAEHXZ
_TEXT	SEGMENT
?SetParentNode@CTextFileLoader@@QAEHXZ PROC		; CTextFileLoader::SetParentNode, COMDAT
; _this$ = ecx

; 382  : 	if (!m_pcurNode)

  00000	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  00003	85 c0		 test	 eax, eax
  00005	74 10		 je	 SHORT $LN5@SetParentN

; 383  : 	{
; 384  : 		assert(!"Node to access has not set!");
; 385  : 		return FALSE;
; 386  : 	}
; 387  : 
; 388  : 	if (NULL == m_pcurNode->pParentNode)

  00007	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0000a	85 c0		 test	 eax, eax
  0000c	74 09		 je	 SHORT $LN5@SetParentN

; 392  : 	}
; 393  : 
; 394  : 	m_pcurNode = m_pcurNode->pParentNode;

  0000e	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 395  : 
; 396  : 	return TRUE;

  00011	b8 01 00 00 00	 mov	 eax, 1

; 397  : }

  00016	c3		 ret	 0
$LN5@SetParentN:

; 389  : 	{
; 390  : 		assert(!"Current group node is already top!");
; 391  : 		return FALSE;

  00017	33 c0		 xor	 eax, eax

; 397  : }

  00019	c3		 ret	 0
?SetParentNode@CTextFileLoader@@QAEHXZ ENDP		; CTextFileLoader::SetParentNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetChildNode@CTextFileLoader@@QAEHK@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?SetChildNode@CTextFileLoader@@QAEHK@Z PROC		; CTextFileLoader::SetChildNode, COMDAT
; _this$ = ecx

; 362  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 363  : 	if (!m_pcurNode)

  00003	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  00006	56		 push	 esi
  00007	85 c0		 test	 eax, eax
  00009	74 22		 je	 SHORT $LN11@SetChildNo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000b	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  0000e	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 369  : 	if (dwIndex >= m_pcurNode->ChildNodeVector.size())

  00011	8b 75 08	 mov	 esi, DWORD PTR _dwIndex$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	2b c2		 sub	 eax, edx
  00016	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 369  : 	if (dwIndex >= m_pcurNode->ChildNodeVector.size())

  00019	3b f0		 cmp	 esi, eax
  0001b	73 10		 jae	 SHORT $LN11@SetChildNo

; 373  : 	}
; 374  : 
; 375  : 	m_pcurNode = m_pcurNode->ChildNodeVector[dwIndex];

  0001d	8b 04 b2	 mov	 eax, DWORD PTR [edx+esi*4]
  00020	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 376  : 
; 377  : 	return TRUE;

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	5e		 pop	 esi

; 378  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN11@SetChildNo:

; 370  : 	{
; 371  : 		assert(!"Node index to set is too large to access!");
; 372  : 		return FALSE;

  0002d	33 c0		 xor	 eax, eax
  0002f	5e		 pop	 esi

; 378  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?SetChildNode@CTextFileLoader@@QAEHK@Z ENDP		; CTextFileLoader::SetChildNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetChildNode@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z
_TEXT	SEGMENT
_szKey$ = -40						; size = 33
__$ArrayPad$ = -4					; size = 4
_c_rstrKeyHead$ = 8					; size = 4
_dwIndex$ = 12						; size = 4
?SetChildNode@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z PROC ; CTextFileLoader::SetChildNode, COMDAT
; _this$ = ecx

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _c_rstrKeyHead$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00016	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0001a	76 02		 jbe	 SHORT $LN7@SetChildNo

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@SetChildNo:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 357  : 	_snprintf(szKey, sizeof(szKey), "%s%02u", c_rstrKeyHead.c_str(), dwIndex);

  0001e	ff 75 0c	 push	 DWORD PTR _dwIndex$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_06POANKNEN@?$CFs?$CF02u@
  00027	8d 45 d8	 lea	 eax, DWORD PTR _szKey$[ebp]
  0002a	6a 21		 push	 33			; 00000021H
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 __snprintf
  00032	83 c4 14	 add	 esp, 20			; 00000014H

; 358  : 
; 359  : 	return SetChildNode(szKey);

  00035	8d 45 d8	 lea	 eax, DWORD PTR _szKey$[ebp]
  00038	8b ce		 mov	 ecx, esi
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?SetChildNode@CTextFileLoader@@QAEHPBD@Z ; CTextFileLoader::SetChildNode

; 360  : }

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00043	33 cd		 xor	 ecx, ebp
  00045	5e		 pop	 esi
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
?SetChildNode@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@K@Z ENDP ; CTextFileLoader::SetChildNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetChildNode@CTextFileLoader@@QAEHPBD@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_dwKey$1$ = -4						; size = 4
_c_szKey$ = 8						; size = 4
tv205 = 8						; size = 4
?SetChildNode@CTextFileLoader@@QAEHPBD@Z PROC		; CTextFileLoader::SetChildNode, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	89 5d f8	 mov	 DWORD PTR _this$1$[ebp], ebx

; 334  : 	if (!m_pcurNode)

  0000e	83 7b 70 00	 cmp	 DWORD PTR [ebx+112], 0
  00012	74 56		 je	 SHORT $LN3@SetChildNo

; 340  : 	DWORD dwKey=SGroupNode::GenNameKey(c_szKey, strlen(c_szKey));

  00014	8b 55 08	 mov	 edx, DWORD PTR _c_szKey$[ebp]
  00017	8b c2		 mov	 eax, edx
  00019	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0001c	0f 1f 40 00	 npad	 4
$LL20@SetChildNo:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $LL20@SetChildNo
  00027	2b c6		 sub	 eax, esi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 ?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ; CTextFileLoader::SGroupNode::GenNameKey
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  00030	8b 4b 70	 mov	 ecx, DWORD PTR [ebx+112]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 340  : 	DWORD dwKey=SGroupNode::GenNameKey(c_szKey, strlen(c_szKey));

  00033	8b d0		 mov	 edx, eax
  00035	83 c4 08	 add	 esp, 8
  00038	89 55 fc	 mov	 DWORD PTR _dwKey$1$[ebp], edx

; 342  : 	for (DWORD i = 0; i < m_pcurNode->ChildNodeVector.size(); ++i)

  0003b	33 f6		 xor	 esi, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0003d	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00040	8b 79 28	 mov	 edi, DWORD PTR [ecx+40]
  00043	2b c7		 sub	 eax, edi
  00045	c1 f8 02	 sar	 eax, 2
  00048	89 45 08	 mov	 DWORD PTR tv205[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 342  : 	for (DWORD i = 0; i < m_pcurNode->ChildNodeVector.size(); ++i)

  0004b	85 c0		 test	 eax, eax
  0004d	74 1b		 je	 SHORT $LN3@SetChildNo
  0004f	90		 npad	 1
$LL4@SetChildNo:

; 343  : 	{
; 344  : 		TGroupNode * pGroupNode = m_pcurNode->ChildNodeVector[i];

  00050	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 345  : 		if (pGroupNode->IsGroupNameKey(dwKey))

  00052	8b cb		 mov	 ecx, ebx
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 ?IsGroupNameKey@SGroupNode@CTextFileLoader@@QAE_NK@Z ; CTextFileLoader::SGroupNode::IsGroupNameKey
  0005a	84 c0		 test	 al, al
  0005c	75 17		 jne	 SHORT $LN15@SetChildNo

; 342  : 	for (DWORD i = 0; i < m_pcurNode->ChildNodeVector.size(); ++i)

  0005e	8b 55 fc	 mov	 edx, DWORD PTR _dwKey$1$[ebp]
  00061	46		 inc	 esi
  00062	83 c7 04	 add	 edi, 4
  00065	3b 75 08	 cmp	 esi, DWORD PTR tv205[ebp]
  00068	72 e6		 jb	 SHORT $LL4@SetChildNo
$LN3@SetChildNo:
  0006a	5f		 pop	 edi

; 348  : 			return TRUE;
; 349  : 		}
; 350  : 	}
; 351  : 
; 352  : 	return FALSE;
; 353  : }

  0006b	5e		 pop	 esi
  0006c	33 c0		 xor	 eax, eax
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
$LN15@SetChildNo:

; 346  : 		{
; 347  : 			m_pcurNode = pGroupNode;

  00075	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  00078	5f		 pop	 edi

; 348  : 			return TRUE;
; 349  : 		}
; 350  : 	}
; 351  : 
; 352  : 	return FALSE;
; 353  : }

  00079	5e		 pop	 esi
  0007a	89 58 70	 mov	 DWORD PTR [eax+112], ebx
  0007d	b8 01 00 00 00	 mov	 eax, 1
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
?SetChildNode@CTextFileLoader@@QAEHPBD@Z ENDP		; CTextFileLoader::SetChildNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetChildNodeCount@CTextFileLoader@@QAEKXZ
_TEXT	SEGMENT
?GetChildNodeCount@CTextFileLoader@@QAEKXZ PROC		; CTextFileLoader::GetChildNodeCount, COMDAT
; _this$ = ecx

; 323  : 	if (!m_pcurNode)

  00000	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  00003	85 c9		 test	 ecx, ecx
  00005	75 03		 jne	 SHORT $LN2@GetChildNo

; 324  : 	{
; 325  : 		assert(!"Node to access has not set!");
; 326  : 		return 0;

  00007	33 c0		 xor	 eax, eax

; 330  : }

  00009	c3		 ret	 0
$LN2@GetChildNo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000a	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0000d	2b 41 28	 sub	 eax, DWORD PTR [ecx+40]
  00010	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 330  : }

  00013	c3		 ret	 0
?GetChildNodeCount@CTextFileLoader@@QAEKXZ ENDP		; CTextFileLoader::GetChildNodeCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetTop@CTextFileLoader@@QAEXXZ
_TEXT	SEGMENT
?SetTop@CTextFileLoader@@QAEXXZ PROC			; CTextFileLoader::SetTop, COMDAT
; _this$ = ecx

; 318  : 	m_pcurNode = &m_GlobalNode;

  00000	8d 41 3c	 lea	 eax, DWORD PTR [ecx+60]
  00003	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 319  : }

  00006	c3		 ret	 0
?SetTop@CTextFileLoader@@QAEXXZ ENDP			; CTextFileLoader::SetTop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?IsEmpty@CTextFileLoader@@QAE_NXZ
_TEXT	SEGMENT
?IsEmpty@CTextFileLoader@@QAE_NXZ PROC			; CTextFileLoader::IsEmpty, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2458 :         return _Mypair._Myval2._Mysize == 0;

  00000	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00004	0f 94 c0	 sete	 al
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 176  : }

  00007	c3		 ret	 0
?IsEmpty@CTextFileLoader@@QAE_NXZ ENDP			; CTextFileLoader::IsEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetFileName@CTextFileLoader@@QAEPBDXZ
_TEXT	SEGMENT
?GetFileName@CTextFileLoader@@QAEPBDXZ PROC		; CTextFileLoader::GetFileName, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00000	83 79 18 0f	 cmp	 DWORD PTR [ecx+24], 15	; 0000000fH

; 2328 :         return _Mypair._Myval2._Myptr();

  00004	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 426  :         if (_Large_mode_engaged()) {

  00007	76 02		 jbe	 SHORT $LN7@GetFileNam
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 170  : 	return m_strFileName.c_str();

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@GetFileNam:

; 171  : }

  0000b	c3		 ret	 0
?GetFileName@CTextFileLoader@@QAEPBDXZ ENDP		; CTextFileLoader::GetFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?Load@CTextFileLoader@@QAE_NPBD@Z
_TEXT	SEGMENT
_pvData$ = -344						; size = 4
_kFile$ = -340						; size = 324
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?Load@CTextFileLoader@@QAE_NPBD@Z PROC			; CTextFileLoader::Load, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@CTextFileLoader@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f1		 mov	 esi, ecx
  00030	8b 5d 08	 mov	 ebx, DWORD PTR _c_szFileName$[ebp]

; 180  : 	m_strFileName = "";

  00033	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00036	6a 00		 push	 0
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 183  : 	CMappedFile kFile;

  00042	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00048	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile

; 184  : 	if (!CEterPackManager::Instance().Get(kFile, c_szFileName, &pvData))

  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00053	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _pvData$[ebp]
  00059	50		 push	 eax
  0005a	53		 push	 ebx
  0005b	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _kFile$[ebp]
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  0006e	84 c0		 test	 al, al
  00070	75 07		 jne	 SHORT $LN2@Load
  00072	32 db		 xor	 bl, bl
  00074	e9 9c 00 00 00	 jmp	 $LN7@Load
$LN2@Load:

; 185  : 		return false;
; 186  : 
; 187  : 	if (m_dwBufCapacity<kFile.Size())

  00079	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  0007f	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00084	39 46 24	 cmp	 DWORD PTR [esi+36], eax
  00087	73 2c		 jae	 SHORT $LN23@Load

; 188  : 	{
; 189  : 		m_dwBufCapacity=kFile.Size();

  00089	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  0008f	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  00094	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 190  : 
; 191  : 		if (m_acBufData)

  00097	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0009a	85 c0		 test	 eax, eax
  0009c	74 09		 je	 SHORT $LN4@Load

; 192  : 			delete [] m_acBufData;

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000a4	83 c4 04	 add	 esp, 4
$LN4@Load:

; 193  : 
; 194  : 		m_acBufData=new char[m_dwBufCapacity];

  000a7	ff 76 24	 push	 DWORD PTR [esi+36]
  000aa	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000af	83 c4 04	 add	 esp, 4
  000b2	89 46 1c	 mov	 DWORD PTR [esi+28], eax
$LN23@Load:

; 195  : 	}
; 196  : 
; 197  : 	m_dwBufSize=kFile.Size();

  000b5	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  000bb	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size

; 198  : 	memcpy(m_acBufData, pvData, m_dwBufSize);

  000c0	50		 push	 eax
  000c1	ff b5 a8 fe ff
	ff		 push	 DWORD PTR _pvData$[ebp]
  000c7	89 46 20	 mov	 DWORD PTR [esi+32], eax
  000ca	ff 76 1c	 push	 DWORD PTR [esi+28]
  000cd	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  000d2	8b cb		 mov	 ecx, ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 198  : 	memcpy(m_acBufData, pvData, m_dwBufSize);

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  000d7	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  000da	66 0f 1f 44 00
	00		 npad	 6
$LL24@Load:
  000e0	8a 01		 mov	 al, BYTE PTR [ecx]
  000e2	41		 inc	 ecx
  000e3	84 c0		 test	 al, al
  000e5	75 f9		 jne	 SHORT $LL24@Load
  000e7	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000e9	51		 push	 ecx
  000ea	53		 push	 ebx
  000eb	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000ee	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 203  : 	m_textFileLoader.Bind(m_dwBufSize, m_acBufData);

  000f3	ff 76 1c	 push	 DWORD PTR [esi+28]
  000f6	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  000f9	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00100	ff 76 20	 push	 DWORD PTR [esi+32]
  00103	e8 00 00 00 00	 call	 ?Bind@CMemoryTextFileLoader@@QAEXHPBX@Z ; CMemoryTextFileLoader::Bind

; 204  : 	return LoadGroup(&m_GlobalNode);

  00108	8d 46 3c	 lea	 eax, DWORD PTR [esi+60]
  0010b	8b ce		 mov	 ecx, esi
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ?LoadGroup@CTextFileLoader@@IAE_NPAUSGroupNode@1@@Z ; CTextFileLoader::LoadGroup
  00113	8a d8		 mov	 bl, al
$LN7@Load:
  00115	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  0011b	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  00120	8a c3		 mov	 al, bl

; 205  : }

  00122	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00125	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012c	59		 pop	 ecx
  0012d	5f		 pop	 edi
  0012e	5e		 pop	 esi
  0012f	5b		 pop	 ebx
  00130	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00133	33 cd		 xor	 ecx, ebp
  00135	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CTextFileLoader@@QAE_NPBD@Z$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _kFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?Load@CTextFileLoader@@QAE_NPBD@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a a4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-348]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CTextFileLoader@@QAE_NPBD@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CTextFileLoader@@QAE_NPBD@Z ENDP			; CTextFileLoader::Load
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?Destroy@CTextFileLoader@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CTextFileLoader@@QAEXXZ PROC			; CTextFileLoader::Destroy, COMDAT
; _this$ = ecx

; 135  : 	__DestroyGroupNodeVector();

  00000	e9 00 00 00 00	 jmp	 ?__DestroyGroupNodeVector@CTextFileLoader@@IAEXXZ ; CTextFileLoader::__DestroyGroupNodeVector
?Destroy@CTextFileLoader@@QAEXXZ ENDP			; CTextFileLoader::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ??1CTextFileLoader@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CTextFileLoader@@UAE@XZ PROC				; CTextFileLoader::~CTextFileLoader, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CTextFileLoader@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTextFileLoader@@6B@

; 154  : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CTextFileLoader@@QAEXXZ ; CTextFileLoader::Destroy

; 155  : 
; 156  : 	if (m_acBufData)

  00030	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00033	85 c0		 test	 eax, eax
  00035	74 09		 je	 SHORT $LN2@CTextFileL

; 157  : 		delete [] m_acBufData;

  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0003d	83 c4 04	 add	 esp, 4
$LN2@CTextFileL:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00040	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00043	85 c0		 test	 eax, eax
  00045	74 45		 je	 SHORT $LN9@CTextFileL

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00047	8b 4e 7c	 mov	 ecx, DWORD PTR [esi+124]
  0004a	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004c	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0004f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00055	72 16		 jb	 SHORT $LN28@CTextFileL

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00057	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005a	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00062	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00065	0f 87 83 00 00
	00		 ja	 $LN62@CTextFileL

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006b	8b c2		 mov	 eax, edx
$LN28@CTextFileL:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006d	51		 push	 ecx
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00074	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0007e	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 2082 :             _Myend   = nullptr;

  00085	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
$LN9@CTextFileL:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 158  : }

  0008c	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0008f	e8 00 00 00 00	 call	 ??1SGroupNode@CTextFileLoader@@QAE@XZ
  00094	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00097	e8 00 00 00 00	 call	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0009c	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0009f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000a2	76 28		 jbe	 SHORT $LN54@CTextFileL
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000a7	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000a8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ae	72 12		 jb	 SHORT $LN65@CTextFileL

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000b3	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b6	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000bb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000be	77 2e		 ja	 SHORT $LN62@CTextFileL

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000c0	8b c2		 mov	 eax, edx
$LN65@CTextFileL:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000c2	51		 push	 ecx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c9	83 c4 08	 add	 esp, 8
$LN54@CTextFileL:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  000cc	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  000d3	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000da	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 158  : }

  000de	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e8	59		 pop	 ecx
  000e9	5e		 pop	 esi
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c3		 ret	 0
$LN62@CTextFileL:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ee	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN72@CTextFileL:
  000f3	cc		 int	 3
  000f4	cc		 int	 3
  000f5	cc		 int	 3
  000f6	cc		 int	 3
  000f7	cc		 int	 3
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CTextFileLoader@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CTextFileLoader@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CTextFileLoader@@UAE@XZ ENDP				; CTextFileLoader::~CTextFileLoader
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ??0CTextFileLoader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Size$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CTextFileLoader@@QAE@XZ PROC				; CTextFileLoader::CTextFileLoader, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CTextFileLoader@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx
  00029	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTextFileLoader@@6B@
  00032	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00035	0f 11 46 04	 movups	 XMMWORD PTR [esi+4], xmm0

; 836  :         _My_data._Mysize = 0;

  00039	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00040	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00047	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 139  : {

  0004b	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00055	e8 00 00 00 00	 call	 ??0CMemoryTextFileLoader@@QAE@XZ ; CMemoryTextFileLoader::CMemoryTextFileLoader
  0005a	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0005d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00061	e8 00 00 00 00	 call	 ??0SGroupNode@CTextFileLoader@@QAE@XZ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00066	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  0006d	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  00074	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 140  : 	SetTop();

  0007b	8b ce		 mov	 ecx, esi
  0007d	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00081	e8 00 00 00 00	 call	 ?SetTop@CTextFileLoader@@QAEXXZ ; CTextFileLoader::SetTop
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00086	6a 06		 push	 6
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_06FJKEMHGD@global@
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 146  : 	m_GlobalNode.m_strGroupName = "global";

  0008d	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00090	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00097	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0009e	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000a5	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 147  : 	m_GlobalNode.pParentNode = NULL;

  000aa	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000b1	8b 46 7c	 mov	 eax, DWORD PTR [esi+124]
  000b4	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  000b7	2b c1		 sub	 eax, ecx
  000b9	c1 f8 02	 sar	 eax, 2

; 1710 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  000bc	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  000c1	73 6e		 jae	 SHORT $LN113@CTextFileL

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  000c3	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  000c6	2b c1		 sub	 eax, ecx
  000c8	c1 f8 02	 sar	 eax, 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000cb	68 00 02 00 00	 push	 512			; 00000200H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  000d0	89 45 f0	 mov	 DWORD PTR __Size$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000d3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  000d8	8b f8		 mov	 edi, eax

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000da	57		 push	 edi
  000db	ff 76 78	 push	 DWORD PTR [esi+120]
  000de	ff 76 74	 push	 DWORD PTR [esi+116]
  000e1	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z ; std::_Copy_memmove<CTextFileLoader::SGroupNode * *,CTextFileLoader::SGroupNode * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000e6	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000e9	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000ec	85 c0		 test	 eax, eax
  000ee	74 2c		 je	 SHORT $LN89@CTextFileL

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000f0	8b 4e 7c	 mov	 ecx, DWORD PTR [esi+124]
  000f3	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f5	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000f8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fe	72 12		 jb	 SHORT $LN100@CTextFileL

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00100	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00103	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00106	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00108	83 c0 fc	 add	 eax, -4			; fffffffcH
  0010b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010e	77 34		 ja	 SHORT $LN97@CTextFileL

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00110	8b c2		 mov	 eax, edx
$LN100@CTextFileL:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00112	51		 push	 ecx
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00119	83 c4 08	 add	 esp, 8
$LN89@CTextFileL:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0011c	8b 45 f0	 mov	 eax, DWORD PTR __Size$1$[ebp]
  0011f	89 7e 74	 mov	 DWORD PTR [esi+116], edi
  00122	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00125	89 46 78	 mov	 DWORD PTR [esi+120], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00128	8d 87 00 02 00
	00		 lea	 eax, DWORD PTR [edi+512]
  0012e	89 46 7c	 mov	 DWORD PTR [esi+124], eax
$LN113@CTextFileL:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 150  : }

  00131	8b c6		 mov	 eax, esi
  00133	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00136	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013d	59		 pop	 ecx
  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
$LN97@CTextFileL:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00144	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN131@CTextFileL:
  00149	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CTextFileLoader@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CTextFileLoader@@QAE@XZ$1:
  0000b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00011	e9 00 00 00 00	 jmp	 ??1CMemoryTextFileLoader@@UAE@XZ ; CMemoryTextFileLoader::~CMemoryTextFileLoader
__unwindfunclet$??0CTextFileLoader@@QAE@XZ$2:
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001c	e9 00 00 00 00	 jmp	 ??1SGroupNode@CTextFileLoader@@QAE@XZ
__unwindfunclet$??0CTextFileLoader@@QAE@XZ$3:
  00021	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 74	 add	 ecx, 116		; 00000074H
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAE@XZ ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::~vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
__ehhandler$??0CTextFileLoader@@QAE@XZ:
  00031	90		 npad	 1
  00032	90		 npad	 1
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CTextFileLoader@@QAE@XZ
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CTextFileLoader@@QAE@XZ ENDP				; CTextFileLoader::CTextFileLoader
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?Cache@CTextFileLoader@@SAPAV1@PBD@Z
_TEXT	SEGMENT
__Loc$2 = -40						; size = 12
__Loc$3 = -40						; size = 12
$T4 = -28						; size = 12
$T5 = -24						; size = 8
$T6 = -20						; size = 4
_dwNameKey$ = -16					; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?Cache@CTextFileLoader@@SAPAV1@PBD@Z PROC		; CTextFileLoader::Cache, COMDAT

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Cache@CTextFileLoader@@SAPAV1@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 93   : 	DWORD dwNameKey=GetCRC32(c_szFileName, strlen(c_szFileName));

  00028	8b 5d 08	 mov	 ebx, DWORD PTR _c_szFileName$[ebp]
  0002b	8b cb		 mov	 ecx, ebx
  0002d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL201@Cache:
  00030	8a 01		 mov	 al, BYTE PTR [ecx]
  00032	41		 inc	 ecx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL201@Cache
  00037	2b ca		 sub	 ecx, edx
  00039	51		 push	 ecx
  0003a	53		 push	 ebx
  0003b	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00040	83 c4 08	 add	 esp, 8
  00043	8b f8		 mov	 edi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00045	8d 45 f0	 lea	 eax, DWORD PTR _dwNameKey$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 93   : 	DWORD dwNameKey=GetCRC32(c_szFileName, strlen(c_szFileName));

  00048	89 7d f0	 mov	 DWORD PTR _dwNameKey$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0004b	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
  00050	50		 push	 eax
  00051	8d 45 d8	 lea	 eax, DWORD PTR __Loc$2[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0005a	8b 75 e0	 mov	 esi, DWORD PTR __Loc$2[ebp+8]
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A
  00062	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00066	75 05		 jne	 SHORT $LN16@Cache
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00068	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0006b	73 02		 jae	 SHORT $LN15@Cache
$LN16@Cache:

; 1379 :         return _Get_scary()->_Myhead;

  0006d	8b f0		 mov	 esi, eax
$LN15@Cache:

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0006f	3b c6		 cmp	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 95   : 	if (ms_kMap_dwNameKey_pkTextFileLoader.end()!=f)

  00071	74 6d		 je	 SHORT $LN2@Cache

; 96   : 	{
; 97   : 		if (!ms_isCacheMode)

  00073	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?ms_isCacheMode@CTextFileLoader@@1_NA, 0 ; CTextFileLoader::ms_isCacheMode
  0007a	75 47		 jne	 SHORT $LN200@Cache

; 98   : 		{
; 99   : 			delete f->second;

  0007c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0007f	85 c9		 test	 ecx, ecx
  00081	74 06		 je	 SHORT $LN5@Cache
  00083	8b 01		 mov	 eax, DWORD PTR [ecx]
  00085	6a 01		 push	 1
  00087	ff 10		 call	 DWORD PTR [eax]
$LN5@Cache:

; 100  : 
; 101  : 			CTextFileLoader* pkNewTextFileLoader=new CTextFileLoader;

  00089	68 80 00 00 00	 push	 128			; 00000080H
  0008e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00093	83 c4 04	 add	 esp, 4
  00096	89 45 f0	 mov	 DWORD PTR $T7[ebp], eax
  00099	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000a0	85 c0		 test	 eax, eax
  000a2	74 0b		 je	 SHORT $LN7@Cache
  000a4	8b c8		 mov	 ecx, eax
  000a6	e8 00 00 00 00	 call	 ??0CTextFileLoader@@QAE@XZ ; CTextFileLoader::CTextFileLoader
  000ab	8b f8		 mov	 edi, eax
  000ad	eb 02		 jmp	 SHORT $LN8@Cache
$LN7@Cache:
  000af	33 ff		 xor	 edi, edi
$LN8@Cache:

; 102  : 			pkNewTextFileLoader->Load(c_szFileName);

  000b1	53		 push	 ebx
  000b2	8b cf		 mov	 ecx, edi
  000b4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bb	e8 00 00 00 00	 call	 ?Load@CTextFileLoader@@QAE_NPBD@Z ; CTextFileLoader::Load

; 103  : 			f->second=pkNewTextFileLoader;

  000c0	89 7e 14	 mov	 DWORD PTR [esi+20], edi
$LN200@Cache:

; 104  : 		}
; 105  : 		f->second->SetTop();

  000c3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000c6	e8 00 00 00 00	 call	 ?SetTop@CTextFileLoader@@QAEXXZ ; CTextFileLoader::SetTop

; 106  : 		return f->second;

  000cb	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 114  : }

  000ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d8	59		 pop	 ecx
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
$LN2@Cache:

; 107  : 	}
; 108  : 
; 109  : 	CTextFileLoader* pkNewTextFileLoader=new CTextFileLoader;

  000e0	68 80 00 00 00	 push	 128			; 00000080H
  000e5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ea	83 c4 04	 add	 esp, 4
  000ed	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
  000f0	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000f7	85 c0		 test	 eax, eax
  000f9	74 0b		 je	 SHORT $LN9@Cache
  000fb	8b c8		 mov	 ecx, eax
  000fd	e8 00 00 00 00	 call	 ??0CTextFileLoader@@QAE@XZ ; CTextFileLoader::CTextFileLoader
  00102	8b f8		 mov	 edi, eax
  00104	eb 02		 jmp	 SHORT $LN10@Cache
$LN9@Cache:
  00106	33 ff		 xor	 edi, edi
$LN10@Cache:

; 110  : 	pkNewTextFileLoader->Load(c_szFileName);

  00108	53		 push	 ebx
  00109	8b cf		 mov	 ecx, edi
  0010b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00112	e8 00 00 00 00	 call	 ?Load@CTextFileLoader@@QAE_NPBD@Z ; CTextFileLoader::Load
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  00117	8d 45 f0	 lea	 eax, DWORD PTR _dwNameKey$[ebp]
  0011a	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
  0011f	50		 push	 eax
  00120	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTextFileLoader *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTextFileLoader *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00129	8b 5d f0	 mov	 ebx, DWORD PTR _dwNameKey$[ebp]

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  0012c	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00130	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00133	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00138	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0013c	75 05		 jne	 SHORT $LN96@Cache
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0013e	3b 58 10	 cmp	 ebx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00141	73 56		 jae	 SHORT $LN182@Cache
$LN96@Cache:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  00143	81 3d 04 00 00
	00 aa aa aa 0a	 cmp	 DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A+4, 178956970 ; 0aaaaaaaH
  0014d	74 5e		 je	 SHORT $LN206@Cache

; 1013 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0014f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00155	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader

; 136  :         return ::operator new(_Bytes);

  0015c	6a 18		 push	 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0015e	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00165	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  0016c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00171	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00174	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00179	89 58 10	 mov	 DWORD PTR [eax+16], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0017c	50		 push	 eax
  0017d	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00180	89 78 14	 mov	 DWORD PTR [eax+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00183	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp]

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00186	89 30		 mov	 DWORD PTR [eax], esi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00188	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0018b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 824  :         this->_Ptr->_Color = _Red;

  0018e	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00194	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Insert_node
$LN182@Cache:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 113  : 	return pkNewTextFileLoader;

  00199	8b c7		 mov	 eax, edi

; 114  : }

  0019b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0019e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a5	59		 pop	 ecx
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c3		 ret	 0
$LN206@Cache:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  001ad	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN204@Cache:
  001b2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Cache@CTextFileLoader@@SAPAV1@PBD@Z$0:
  00000	68 80 00 00 00	 push	 128			; 00000080H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?Cache@CTextFileLoader@@SAPAV1@PBD@Z$1:
  00012	68 80 00 00 00	 push	 128			; 00000080H
  00017	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	c3		 ret	 0
__unwindfunclet$?Cache@CTextFileLoader@@SAPAV1@PBD@Z$4:
  00024	8d 4d e8	 lea	 ecx, DWORD PTR $T5[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
__ehhandler$?Cache@CTextFileLoader@@SAPAV1@PBD@Z:
  00031	90		 npad	 1
  00032	90		 npad	 1
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Cache@CTextFileLoader@@SAPAV1@PBD@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Cache@CTextFileLoader@@SAPAV1@PBD@Z ENDP		; CTextFileLoader::Cache
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetCacheMode@CTextFileLoader@@SAXXZ
_TEXT	SEGMENT
?SetCacheMode@CTextFileLoader@@SAXXZ PROC		; CTextFileLoader::SetCacheMode, COMDAT

; 118  : 	ms_isCacheMode=true;

  00000	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?ms_isCacheMode@CTextFileLoader@@1_NA, 1 ; CTextFileLoader::ms_isCacheMode

; 119  : }

  00007	c3		 ret	 0
?SetCacheMode@CTextFileLoader@@SAXXZ ENDP		; CTextFileLoader::SetCacheMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?DestroySystem@CTextFileLoader@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CTextFileLoader@@SAXXZ PROC		; CTextFileLoader::DestroySystem, COMDAT

; 122  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00002	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A
  00008	8b 37		 mov	 esi, DWORD PTR [edi]
  0000a	3b f7		 cmp	 esi, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 125  : 		for (i=ms_kMap_dwNameKey_pkTextFileLoader.begin(); i!=ms_kMap_dwNameKey_pkTextFileLoader.end(); ++i)

  0000c	74 55		 je	 SHORT $LN3@DestroySys
  0000e	66 90		 npad	 2
$LL4@DestroySys:

; 126  : 			delete i->second;

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	85 c9		 test	 ecx, ecx
  00015	74 0c		 je	 SHORT $LN2@DestroySys
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	6a 01		 push	 1
  0001b	ff 10		 call	 DWORD PTR [eax]
  0001d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A
$LN2@DestroySys:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00023	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00026	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002a	74 1d		 je	 SHORT $LN38@DestroySys

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0002c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00033	75 10		 jne	 SHORT $LN132@DestroySys
$LL36@DestroySys:
  00035	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00038	75 0b		 jne	 SHORT $LN132@DestroySys

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0003a	8b f0		 mov	 esi, eax
  0003c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00043	74 f0		 je	 SHORT $LL36@DestroySys
$LN132@DestroySys:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

  00045	8b f0		 mov	 esi, eax

; 57   :         } else {

  00047	eb 16		 jmp	 SHORT $LN44@DestroySys
$LN38@DestroySys:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00049	8b f0		 mov	 esi, eax

; 466  :         while (!_Pnode->_Left->_Isnil) {

  0004b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0004d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00051	75 0c		 jne	 SHORT $LN44@DestroySys
$LL43@DestroySys:
  00053	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00055	8b f1		 mov	 esi, ecx
  00057	8b c8		 mov	 ecx, eax
  00059	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0005d	74 f4		 je	 SHORT $LL43@DestroySys
$LN44@DestroySys:

; 232  :         return this->_Ptr == _Right._Ptr;

  0005f	3b f7		 cmp	 esi, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 125  : 		for (i=ms_kMap_dwNameKey_pkTextFileLoader.begin(); i!=ms_kMap_dwNameKey_pkTextFileLoader.end(); ++i)

  00061	75 ad		 jne	 SHORT $LL4@DestroySys
$LN3@DestroySys:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1364 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00063	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00066	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0006a	75 2b		 jne	 SHORT $LN123@DestroySys
  0006c	0f 1f 40 00	 npad	 4
$LL78@DestroySys:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00070	ff 76 08	 push	 DWORD PTR [esi+8]
  00073	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
  00078	68 00 00 00 00	 push	 OFFSET ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A ; CTextFileLoader::ms_kMap_dwNameKey_pkTextFileLoader
  0007d	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCTextFileLoader@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CTextFileLoader *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CTextFileLoader *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00082	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00084	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00086	6a 18		 push	 24			; 00000018H
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008e	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00091	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00095	74 d9		 je	 SHORT $LL78@DestroySys
$LN123@DestroySys:

; 1365 :         _Head->_Parent  = _Head;

  00097	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1366 :         _Head->_Left    = _Head;

  0009a	89 3f		 mov	 DWORD PTR [edi], edi

; 1367 :         _Head->_Right   = _Head;

  0009c	89 7f 08	 mov	 DWORD PTR [edi+8], edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 130  : 	SGroupNode::DestroySystem();

  0009f	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1368 :         _Scary->_Mysize = 0;

  000a0	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_kMap_dwNameKey_pkTextFileLoader@CTextFileLoader@@1V?$map@KPAVCTextFileLoader@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTextFileLoader@@@std@@@3@@std@@A+4, 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 130  : 	SGroupNode::DestroySystem();

  000aa	5e		 pop	 esi
  000ab	e9 00 00 00 00	 jmp	 ?DestroySystem@SGroupNode@CTextFileLoader@@SAXXZ ; CTextFileLoader::SGroupNode::DestroySystem
?DestroySystem@CTextFileLoader@@SAXXZ ENDP		; CTextFileLoader::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1SGroupNode@CTextFileLoader@@QAE@XZ
_TEXT	SEGMENT
??1SGroupNode@CTextFileLoader@@QAE@XZ PROC		; CTextFileLoader::SGroupNode::~SGroupNode, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx
  00003	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00006	85 c0		 test	 eax, eax
  00008	74 45		 je	 SHORT $LN8@SGroupNode

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  0000d	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00012	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00018	72 16		 jb	 SHORT $LN27@SGroupNode

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00020	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00022	83 c0 fc	 add	 eax, -4			; fffffffcH
  00025	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00028	0f 87 84 00 00
	00		 ja	 $LN98@SGroupNode

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002e	8b c2		 mov	 eax, edx
$LN27@SGroupNode:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00037	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003e	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00041	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 2082 :             _Myend   = nullptr;

  00048	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
$LN8@SGroupNode:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  0004f	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00052	56		 push	 esi
  00053	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
  00056	8b ce		 mov	 ecx, esi
  00058	ff 70 04	 push	 DWORD PTR [eax+4]
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00061	6a 20		 push	 32			; 00000020H
  00063	ff 36		 push	 DWORD PTR [esi]
  00065	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0006a	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006d	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00070	5e		 pop	 esi
  00071	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00074	76 28		 jbe	 SHORT $LN90@SGroupNode
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00076	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00079	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0007a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00080	72 12		 jb	 SHORT $LN101@SGroupNode

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00082	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00085	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00088	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0008d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00090	77 20		 ja	 SHORT $LN98@SGroupNode

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00092	8b c2		 mov	 eax, edx
$LN101@SGroupNode:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00094	51		 push	 ecx
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009b	83 c4 08	 add	 esp, 8
$LN90@SGroupNode:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0009e	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  000a5	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000ac	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0
  000b0	5f		 pop	 edi
  000b1	c3		 ret	 0
$LN98@SGroupNode:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN113@SGroupNode:
  000b7	cc		 int	 3
??1SGroupNode@CTextFileLoader@@QAE@XZ ENDP		; CTextFileLoader::SGroupNode::~SGroupNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??0SGroupNode@CTextFileLoader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0SGroupNode@CTextFileLoader@@QAE@XZ PROC		; CTextFileLoader::SGroupNode::SGroupNode, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SGroupNode@CTextFileLoader@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0002f	0f 11 47 04	 movups	 XMMWORD PTR [edi+4], xmm0

; 836  :         _My_data._Mysize = 0;

  00033	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0003a	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0
  00045	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0004f	6a 20		 push	 32			; 00000020H
  00051	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00054	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0005a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00061	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00066	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00069	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0006b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0006e	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00071	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00077	89 06		 mov	 DWORD PTR [esi], eax
  00079	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0007b	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  00082	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  00089	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SGroupNode@CTextFileLoader@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0SGroupNode@CTextFileLoader@@QAE@XZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SGroupNode@CTextFileLoader@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SGroupNode@CTextFileLoader@@QAE@XZ ENDP		; CTextFileLoader::SGroupNode::SGroupNode
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?DestroySystem@SGroupNode@CTextFileLoader@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@SGroupNode@CTextFileLoader@@SAXXZ PROC	; CTextFileLoader::SGroupNode::DestroySystem, COMDAT

; 86   : {

  00000	53		 push	 ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00001	8b 1d 08 00 00
	00		 mov	 ebx, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+8
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 86   : {

  00007	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00008	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+4
  0000e	3b f3		 cmp	 esi, ebx
  00010	74 37		 je	 SHORT $LN16@DestroySys
  00012	57		 push	 edi
$LL6@DestroySys:

; 111  : 			delete pkData;

  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	85 ff		 test	 edi, edi
  00017	74 12		 je	 SHORT $LN4@DestroySys
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ??1SGroupNode@CTextFileLoader@@QAE@XZ
  00020	6a 34		 push	 52			; 00000034H
  00022	57		 push	 edi
  00023	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00028	83 c4 08	 add	 esp, 8
$LN4@DestroySys:

; 50   : 			for (auto v : m_kVct_pkData)

  0002b	83 c6 04	 add	 esi, 4
  0002e	3b f3		 cmp	 esi, ebx
  00030	75 e1		 jne	 SHORT $LL6@DestroySys
  00032	8b 1d 08 00 00
	00		 mov	 ebx, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+8
  00038	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+4
  0003e	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0003f	3b f3		 cmp	 esi, ebx
  00041	74 06		 je	 SHORT $LN16@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00043	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+8, esi
$LN16@DestroySys:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00049	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+16
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+20
  00056	74 05		 je	 SHORT $LN20@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00058	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+20, eax
$LN20@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 88   : }

  0005d	c3		 ret	 0
?DestroySystem@SGroupNode@CTextFileLoader@@SAXXZ ENDP	; CTextFileLoader::SGroupNode::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?Delete@SGroupNode@CTextFileLoader@@SAXPAU12@@Z
_TEXT	SEGMENT
_pkNode$ = 8						; size = 4
_pkData$ = 8						; size = 4
?Delete@SGroupNode@CTextFileLoader@@SAXPAU12@@Z PROC	; CTextFileLoader::SGroupNode::Delete, COMDAT

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 76   : 	pkNode->m_kMap_dwKey_kVct_stToken.clear();

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pkNode$[ebp]
  00007	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1363 :         auto _Head = _Scary->_Myhead;

  00008	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 75   : {

  0000b	57		 push	 edi

; 76   : 	pkNode->m_kMap_dwKey_kVct_stToken.clear();

  0000c	8d 7b 1c	 lea	 edi, DWORD PTR [ebx+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1364 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  0000f	8b cf		 mov	 ecx, edi
  00011	ff 76 04	 push	 DWORD PTR [esi+4]
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >

; 1365 :         _Head->_Parent  = _Head;

  0001a	89 76 04	 mov	 DWORD PTR [esi+4], esi

; 1366 :         _Head->_Left    = _Head;

  0001d	89 36		 mov	 DWORD PTR [esi], esi

; 1367 :         _Head->_Right   = _Head;

  0001f	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1368 :         _Scary->_Mysize = 0;

  00022	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00029	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  0002c	3b 43 2c	 cmp	 eax, DWORD PTR [ebx+44]
  0002f	74 03		 je	 SHORT $LN6@Delete

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00031	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
$LN6@Delete:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00034	6a 00		 push	 0
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 78   : 	pkNode->m_strGroupName="";

  0003b	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1614 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0003e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 82   : 			m_kVct_pkFree.push_back(pkData);

  00043	8d 45 08	 lea	 eax, DWORD PTR _pkData$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 79   : 	pkNode->m_dwGroupNameKey=0;

  00046	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 82   : 			m_kVct_pkFree.push_back(pkData);

  0004c	50		 push	 eax
  0004d	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+16
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 80   : 	ms_kPool.Free(pkNode);

  00052	89 5d 08	 mov	 DWORD PTR _pkData$[ebp], ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 82   : 			m_kVct_pkFree.push_back(pkData);

  00055	e8 00 00 00 00	 call	 ?push_back@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEXABQAUSGroupNode@CTextFileLoader@@@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::push_back
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 81   : }

  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?Delete@SGroupNode@CTextFileLoader@@SAXPAU12@@Z ENDP	; CTextFileLoader::SGroupNode::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ
_TEXT	SEGMENT
_pkNewData$2 = -16					; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ PROC	; CTextFileLoader::SGroupNode::New, COMDAT

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00023	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+20
  00029	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+16, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 64   : 			if (m_kVct_pkFree.empty())

  0002f	75 53		 jne	 SHORT $LN4@New

; 65   : 			{
; 66   : 				T* pkNewData=new T;

  00031	6a 34		 push	 52			; 00000034H
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00038	83 c4 04	 add	 esp, 4
  0003b	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	85 c0		 test	 eax, eax
  00047	74 09		 je	 SHORT $LN6@New
  00049	8b c8		 mov	 ecx, eax
  0004b	e8 00 00 00 00	 call	 ??0SGroupNode@CTextFileLoader@@QAE@XZ
  00050	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  00052	33 c0		 xor	 eax, eax
$LN7@New:
  00054	89 45 f0	 mov	 DWORD PTR _pkNewData$2[ebp], eax

; 67   : 				m_kVct_pkData.push_back(pkNewData);

  00057	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+4
  0005c	8d 45 f0	 lea	 eax, DWORD PTR _pkNewData$2[ebp]
  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?push_back@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEXABQAUSGroupNode@CTextFileLoader@@@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::push_back

; 68   : 				++m_uUsedCapacity;

  0006c	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 71   : 	return ms_kPool.Alloc();

  00072	8b 45 f0	 mov	 eax, DWORD PTR _pkNewData$2[ebp]

; 72   : }

  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN4@New:
; File C:\Marty 5.5\Src-Client\Client\EterLib\Pool.h

; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  00084	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1744 :         --_Mylast;

  00087	83 c1 fc	 add	 ecx, -4			; fffffffcH
  0008a	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@SGroupNode@CTextFileLoader@@2V?$CDynamicPool@USGroupNode@CTextFileLoader@@@@A+20, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 72   : }

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ$0:
  00000	6a 34		 push	 52			; 00000034H
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@SGroupNode@CTextFileLoader@@SAPAU12@XZ ENDP	; CTextFileLoader::SGroupNode::New
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@CAXXZ PROC ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@CAXXZ ENDP ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Change_array@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXQAPAUSGroupNode@CTextFileLoader@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXQAPAUSGroupNode@CTextFileLoader@@II@Z PROC ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Change_array, COMDAT
; _this$ = ecx

; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN10@Change_arr

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN21@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN18@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN21@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN10@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2060 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2064 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN18@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXQAPAUSGroupNode@CTextFileLoader@@II@Z ENDP ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?push_back@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEXABQAUSGroupNode@CTextFileLoader@@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
tv621 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
$T1 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEXABQAUSGroupNode@CTextFileLoader@@@Z PROC ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::push_back, COMDAT
; _this$ = ecx

; 917  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 829  :         if (_Mylast != _My_data._Myend) {

  0000b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000e	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00011	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  00014	3b ca		 cmp	 ecx, edx
  00016	74 14		 je	 SHORT $LN4@push_back

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00018	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  0001f	83 46 04 04	 add	 DWORD PTR [esi+4], 4

; 919  :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN4@push_back:

; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0002c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0002e	8b c1		 mov	 eax, ecx
  00030	2b c7		 sub	 eax, edi
  00032	c1 f8 02	 sar	 eax, 2
  00035	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  00038	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0003d	0f 84 c0 00 00
	00		 je	 $LN106@push_back

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00043	2b d7		 sub	 edx, edi

; 876  :         const size_type _Newsize = _Oldsize + 1;

  00045	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00048	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00050	8b fa		 mov	 edi, edx

; 876  :         const size_type _Newsize = _Oldsize + 1;

  00052	89 5d f8	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00055	d1 ef		 shr	 edi, 1
  00057	2b c7		 sub	 eax, edi
  00059	3b d0		 cmp	 edx, eax
  0005b	76 12		 jbe	 SHORT $LN15@push_back

; 1997 :             return _Max; // geometric growth would overflow

  0005d	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00062	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006d	eb 38		 jmp	 SHORT $LN104@push_back
$LN15@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0006f	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00072	3b c3		 cmp	 eax, ebx
  00074	0f 43 d8	 cmovae	 ebx, eax
  00077	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0007d	0f 87 85 00 00
	00		 ja	 $LN107@push_back

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00083	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]

; 227  :     if (_Bytes == 0) {

  0008a	85 c0		 test	 eax, eax
  0008c	75 04		 jne	 SHORT $LN30@push_back

; 228  :         return nullptr;

  0008e	33 ff		 xor	 edi, edi
  00090	eb 1d		 jmp	 SHORT $LN29@push_back
$LN30@push_back:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 08		 jb	 SHORT $LN31@push_back

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	eb 06		 jmp	 SHORT $LN104@push_back
$LN31@push_back:

; 136  :         return ::operator new(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN104@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a7	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  000aa	8b f8		 mov	 edi, eax
  000ac	83 c4 04	 add	 esp, 4
$LN29@push_back:
  000af	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  000b2	8d 14 87	 lea	 edx, DWORD PTR [edi+eax*4]
  000b5	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000b8	89 55 f4	 mov	 DWORD PTR tv621[ebp], edx
  000bb	8b 00		 mov	 eax, DWORD PTR [eax]
  000bd	89 02		 mov	 DWORD PTR [edx], eax

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000bf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c2	8b 16		 mov	 edx, DWORD PTR [esi]
  000c4	3b c8		 cmp	 ecx, eax
  000c6	75 04		 jne	 SHORT $LN10@push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000c8	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000ca	eb 17		 jmp	 SHORT $LN59@push_back
$LN10@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cc	57		 push	 edi
  000cd	51		 push	 ecx
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z ; std::_Copy_memmove<CTextFileLoader::SGroupNode * *,CTextFileLoader::SGroupNode * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8b 4d f4	 mov	 ecx, DWORD PTR tv621[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000da	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000dd	83 c1 04	 add	 ecx, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000e0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
$LN59@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 900  :         _Guard._New_begin = nullptr;

  000e3	51		 push	 ecx
  000e4	50		 push	 eax
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSGroupNode@CTextFileLoader@@PAPAU12@@std@@YAPAPAUSGroupNode@CTextFileLoader@@PAPAU12@00@Z ; std::_Copy_memmove<CTextFileLoader::SGroupNode * *,CTextFileLoader::SGroupNode * *>
  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000ee	8b ce		 mov	 ecx, esi
  000f0	53		 push	 ebx
  000f1	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000f4	57		 push	 edi
  000f5	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@AAEXQAPAUSGroupNode@CTextFileLoader@@II@Z ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Change_array

; 919  :     }

  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 04 00	 ret	 4
$LN106@push_back:

; 873  :             _Xlength();

  00103	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@CAXXZ ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::_Xlength
$LN107@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00108	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN103@push_back:
  0010d	cc		 int	 3
?push_back@?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAEXABQAUSGroupNode@CTextFileLoader@@@Z ENDP ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAE@XZ PROC ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::~vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00049	5e		 pop	 esi

; 820  :     }

  0004a	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00050	cc		 int	 3
??1?$vector@PAUSGroupNode@CTextFileLoader@@V?$allocator@PAUSGroupNode@CTextFileLoader@@@std@@@std@@QAE@XZ ENDP ; std::vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >::~vector<CTextFileLoader::SGroupNode *,std::allocator<CTextFileLoader::SGroupNode *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z
_TEXT	SEGMENT
$T2 = -60						; size = 16
$T3 = -44						; size = 12
__Backout$4 = -32					; size = 12
__Loc$5 = -32						; size = 12
$T6 = -20						; size = 8
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_rstGroupName$ = 8					; size = 4
__Last$1$ = 8						; size = 4
_c_rkVct_stToken$ = 12					; size = 4
__Guard$7 = 12						; size = 4
?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z PROC ; CTextFileLoader::SGroupNode::InsertTokenVector, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 37   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  0002b	8b 45 08	 mov	 eax, DWORD PTR _c_rstGroupName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0002e	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 37   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00032	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00035	76 02		 jbe	 SHORT $LN8@InsertToke

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00037	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@InsertToke:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 37   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00039	51		 push	 ecx
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ; CTextFileLoader::SGroupNode::GenNameKey
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 733  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00040	8b 7d 0c	 mov	 edi, DWORD PTR _c_rkVct_stToken$[ebp]

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00043	33 db		 xor	 ebx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00045	89 45 c4	 mov	 DWORD PTR $T2[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00048	33 f6		 xor	 esi, esi

; 733  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  0004a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0004f	89 5d c8	 mov	 DWORD PTR $T2[ebp+4], ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 37   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00052	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00055	89 75 cc	 mov	 DWORD PTR $T2[ebp+8], esi

; 733  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00058	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0005b	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0005d	f7 e9		 imul	 ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0005f	89 5d d0	 mov	 DWORD PTR $T2[ebp+12], ebx

; 733  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00062	c1 fa 02	 sar	 edx, 2
  00065	8b c2		 mov	 eax, edx
  00067	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006a	03 c2		 add	 eax, edx

; 2096 :         if (_Count != 0) {

  0006c	0f 84 89 00 00
	00		 je	 $LN124@InsertToke

; 2036 :         if (_Newcapacity > max_size()) {

  00072	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00077	0f 87 94 01 00
	00		 ja	 $LN321@InsertToke
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  0007d	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00080	c1 e6 03	 shl	 esi, 3

; 227  :     if (_Bytes == 0) {

  00083	85 f6		 test	 esi, esi
  00085	74 1a		 je	 SHORT $LN42@InsertToke
$LN43@InsertToke:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00087	56		 push	 esi
  00088	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  0008e	72 07		 jb	 SHORT $LN44@InsertToke

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00090	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00095	eb 05		 jmp	 SHORT $LN319@InsertToke
$LN44@InsertToke:

; 136  :         return ::operator new(_Bytes);

  00097	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN319@InsertToke:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  0009c	8b d8		 mov	 ebx, eax
  0009e	83 c4 04	 add	 esp, 4
$LN42@InsertToke:

; 2022 :         _Myend                = _Newvec + _Newcapacity;

  000a1	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  000a4	89 5d c8	 mov	 DWORD PTR $T2[ebp+4], ebx
  000a7	89 45 d0	 mov	 DWORD PTR $T2[ebp+12], eax

; 2098 :             _Tidy_guard<vector> _Guard{this};

  000aa	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp+4]

; 2021 :         _Mylast               = _Newvec;

  000ad	89 5d cc	 mov	 DWORD PTR $T2[ebp+8], ebx

; 2098 :             _Tidy_guard<vector> _Guard{this};

  000b0	89 45 0c	 mov	 DWORD PTR __Guard$7[ebp], eax

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000b3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000b6	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000b9	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000bb	8b f3		 mov	 esi, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2098 :             _Tidy_guard<vector> _Guard{this};

  000bd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000c4	89 45 08	 mov	 DWORD PTR __Last$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000c7	89 5d e0	 mov	 DWORD PTR __Backout$4[ebp], ebx
  000ca	89 75 e4	 mov	 DWORD PTR __Backout$4[ebp+4], esi
  000cd	89 4d e8	 mov	 DWORD PTR __Backout$4[ebp+8], ecx

; 1863 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  000d0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1864 :     for (; _UFirst != _ULast; ++_UFirst) {

  000d4	3b f8		 cmp	 edi, eax
  000d6	74 20		 je	 SHORT $LN54@InsertToke
  000d8	8b d8		 mov	 ebx, eax
  000da	66 0f 1f 44 00
	00		 npad	 6
$LL55@InsertToke:

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000e0	57		 push	 edi
  000e1	8b ce		 mov	 ecx, esi
  000e3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1808 :         ++_Last;

  000e8	83 c6 18	 add	 esi, 24			; 00000018H

; 1864 :     for (; _UFirst != _ULast; ++_UFirst) {

  000eb	83 c7 18	 add	 edi, 24			; 00000018H

; 1808 :         ++_Last;

  000ee	89 75 e4	 mov	 DWORD PTR __Backout$4[ebp+4], esi

; 1864 :     for (; _UFirst != _ULast; ++_UFirst) {

  000f1	3b fb		 cmp	 edi, ebx
  000f3	75 eb		 jne	 SHORT $LL55@InsertToke
  000f5	8b 5d c8	 mov	 ebx, DWORD PTR $T2[ebp+4]
$LN54@InsertToke:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000f8	89 75 cc	 mov	 DWORD PTR $T2[ebp+8], esi
$LN124@InsertToke:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  000fb	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
  000fe	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
  00101	50		 push	 eax
  00102	8d 45 d4	 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 39   : 	m_kMap_dwKey_kVct_stToken.insert(std::map<DWORD, CTokenVector>::value_type(dwGroupNameKey, c_rkVct_stToken));

  00105	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  0010c	50		 push	 eax
  0010d	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  00110	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<unsigned long>
  00115	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00118	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0011c	66 0f d6 45 e0	 movq	 QWORD PTR __Loc$5[ebp], xmm0

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00121	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00125	75 08		 jne	 SHORT $LN138@InsertToke
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00127	8b 45 c4	 mov	 eax, DWORD PTR $T2[ebp]
  0012a	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0012d	73 79		 jae	 SHORT $LN258@InsertToke
$LN138@InsertToke:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  0012f	81 7f 20 ff ff
	ff 07		 cmp	 DWORD PTR [edi+32], 134217727 ; 07ffffffH
  00136	8d 5f 1c	 lea	 ebx, DWORD PTR [edi+28]
  00139	0f 84 d7 00 00
	00		 je	 $LN322@InsertToke

; 1013 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0013f	8b 3b		 mov	 edi, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00141	89 5d ec	 mov	 DWORD PTR $T6[ebp], ebx

; 136  :         return ::operator new(_Bytes);

  00144	6a 20		 push	 32			; 00000020H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00146	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0014a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00151	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 278  :     pair(pair&&)      = default;

  00156	8b 4d c4	 mov	 ecx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00159	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 278  :     pair(pair&&)      = default;

  0015c	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0015f	8b 4d c8	 mov	 ecx, DWORD PTR $T2[ebp+4]
  00162	8b 75 d0	 mov	 esi, DWORD PTR $T2[ebp+12]
  00165	8b 55 cc	 mov	 edx, DWORD PTR $T2[ebp+8]

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00168	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+12], 0
  0016f	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+8], 0
  00176	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 403  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  0017d	89 48 14	 mov	 DWORD PTR [eax+20], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00180	8b cb		 mov	 ecx, ebx
  00182	50		 push	 eax
  00183	ff 75 e4	 push	 DWORD PTR __Loc$5[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 403  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00186	89 50 18	 mov	 DWORD PTR [eax+24], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00189	ff 75 e0	 push	 DWORD PTR __Loc$5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 403  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  0018c	89 70 1c	 mov	 DWORD PTR [eax+28], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0018f	89 38		 mov	 DWORD PTR [eax], edi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00191	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00194	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 824  :         this->_Ptr->_Color = _Red;

  00197	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0019d	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
  001a2	8b 75 cc	 mov	 esi, DWORD PTR $T2[ebp+8]
  001a5	8b 5d c8	 mov	 ebx, DWORD PTR $T2[ebp+4]
$LN258@InsertToke:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  001a8	85 db		 test	 ebx, ebx
  001aa	74 51		 je	 SHORT $LN282@InsertToke

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  001ac	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp+4]
  001af	51		 push	 ecx
  001b0	56		 push	 esi
  001b1	53		 push	 ebx
  001b2	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001b7	8b 4d d0	 mov	 ecx, DWORD PTR $T2[ebp+12]
  001ba	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001bf	8b 75 c8	 mov	 esi, DWORD PTR $T2[ebp+4]
  001c2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c5	2b ce		 sub	 ecx, esi
  001c7	f7 e9		 imul	 ecx
  001c9	c1 fa 02	 sar	 edx, 2
  001cc	8b c2		 mov	 eax, edx
  001ce	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001d1	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d3	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  001d6	8b c6		 mov	 eax, esi
  001d8	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001db	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001e1	72 10		 jb	 SHORT $LN301@InsertToke

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001e3	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  001e6	83 c1 23	 add	 ecx, 35			; 00000023H
  001e9	2b c6		 sub	 eax, esi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001eb	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ee	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001f1	77 28		 ja	 SHORT $LN323@InsertToke
$LN301@InsertToke:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001f3	51		 push	 ecx
  001f4	56		 push	 esi
  001f5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001fa	83 c4 08	 add	 esp, 8
$LN282@InsertToke:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 40   : }

  001fd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00200	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00207	59		 pop	 ecx
  00208	5f		 pop	 edi
  00209	5e		 pop	 esi
  0020a	5b		 pop	 ebx
  0020b	8b e5		 mov	 esp, ebp
  0020d	5d		 pop	 ebp
  0020e	c2 08 00	 ret	 8
$LN321@InsertToke:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2037 :             _Xlength();

  00211	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN322@InsertToke:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  00216	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN323@InsertToke:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0021b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN318@InsertToke:
  00220	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$2:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR __Guard$7[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Tidy_guard<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$3:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$0:
  00010	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ
__unwindfunclet$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z$7:
  00018	8d 4d ec	 lea	 ecx, DWORD PTR $T6[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InsertTokenVector@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z ENDP ; CTextFileLoader::SGroupNode::InsertTokenVector
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?IsExistTokenVector@SGroupNode@CTextFileLoader@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_c_rstGroupName$ = 8					; size = 4
_dwGroupNameKey$ = 8					; size = 4
?IsExistTokenVector@SGroupNode@CTextFileLoader@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CTextFileLoader::SGroupNode::IsExistTokenVector, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 27   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rstGroupName$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00009	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 26   : {

  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx

; 27   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00011	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00014	76 02		 jbe	 SHORT $LN8@IsExistTok

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@IsExistTok:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 27   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00018	51		 push	 ecx
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ; CTextFileLoader::SGroupNode::GenNameKey
  0001f	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1142 :         return iterator(_Scary->_Myhead, _Scary);

  00022	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00025	8b 39		 mov	 edi, DWORD PTR [ecx]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 27   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00027	8b f0		 mov	 esi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00029	8d 45 08	 lea	 eax, DWORD PTR _dwGroupNameKey$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 27   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  0002c	89 75 08	 mov	 DWORD PTR _dwGroupNameKey$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00039	8b 45 fc	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  0003c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00040	75 12		 jne	 SHORT $LN51@IsExistTok
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00042	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00045	72 0d		 jb	 SHORT $LN51@IsExistTok

; 232  :         return this->_Ptr == _Right._Ptr;

  00047	3b f8		 cmp	 edi, eax
  00049	5f		 pop	 edi
  0004a	0f 95 c0	 setne	 al
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 33   : }

  0004d	5e		 pop	 esi
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
$LN51@IsExistTok:
  00054	5f		 pop	 edi

; 28   : 
; 29   : 	if (m_kMap_dwKey_kVct_stToken.end()==m_kMap_dwKey_kVct_stToken.find(dwGroupNameKey))
; 30   : 		return false;

  00055	32 c0		 xor	 al, al

; 33   : }

  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?IsExistTokenVector@SGroupNode@CTextFileLoader@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CTextFileLoader::SGroupNode::IsExistTokenVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetTokenVector@SGroupNode@CTextFileLoader@@QAEPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_c_rstGroupName$ = 8					; size = 4
_dwGroupNameKey$ = 8					; size = 4
?GetTokenVector@SGroupNode@CTextFileLoader@@QAEPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z PROC ; CTextFileLoader::SGroupNode::GetTokenVector, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 16   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rstGroupName$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00009	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 15   : {

  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx

; 16   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00011	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00014	76 02		 jbe	 SHORT $LN8@GetTokenVe

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00016	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@GetTokenVe:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 16   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00018	51		 push	 ecx
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ; CTextFileLoader::SGroupNode::GenNameKey
  0001f	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00022	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 16   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  00025	8b f0		 mov	 esi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00027	8d 45 08	 lea	 eax, DWORD PTR _dwGroupNameKey$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 16   : 	DWORD dwGroupNameKey=GenNameKey(c_rstGroupName.c_str(), c_rstGroupName.length());

  0002a	89 75 08	 mov	 DWORD PTR _dwGroupNameKey$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00037	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0003a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0003e	75 18		 jne	 SHORT $LN60@GetTokenVe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00040	3b 71 10	 cmp	 esi, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	72 13		 jb	 SHORT $LN60@GetTokenVe

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00045	33 d2		 xor	 edx, edx
  00047	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  0004a	39 4f 1c	 cmp	 DWORD PTR [edi+28], ecx
  0004d	5f		 pop	 edi
  0004e	0f 44 c2	 cmove	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 23   : }

  00051	5e		 pop	 esi
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
$LN60@GetTokenVe:
  00058	5f		 pop	 edi

; 17   : 
; 18   : 	std::map<DWORD, CTokenVector>::iterator f=m_kMap_dwKey_kVct_stToken.find(dwGroupNameKey);
; 19   : 	if (m_kMap_dwKey_kVct_stToken.end()==f)
; 20   : 		return NULL;

  00059	33 c0		 xor	 eax, eax

; 23   : }

  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?GetTokenVector@SGroupNode@CTextFileLoader@@QAEPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z ENDP ; CTextFileLoader::SGroupNode::GetTokenVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GetGroupName@SGroupNode@CTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?GetGroupName@SGroupNode@CTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CTextFileLoader::SGroupNode::GetGroupName, COMDAT
; _this$ = ecx

; 49   : 	return m_strGroupName;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 50   : }

  00003	c3		 ret	 0
?GetGroupName@SGroupNode@CTextFileLoader@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CTextFileLoader::SGroupNode::GetGroupName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?IsGroupNameKey@SGroupNode@CTextFileLoader@@QAE_NK@Z
_TEXT	SEGMENT
_dwGroupNameKey$ = 8					; size = 4
?IsGroupNameKey@SGroupNode@CTextFileLoader@@QAE_NK@Z PROC ; CTextFileLoader::SGroupNode::IsGroupNameKey, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   : 	if (dwGroupNameKey==m_dwGroupNameKey)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwGroupNameKey$[ebp]
  00006	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00008	0f 94 c0	 sete	 al

; 55   : 		return true;
; 56   : 
; 57   : 	return false;
; 58   : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?IsGroupNameKey@SGroupNode@CTextFileLoader@@QAE_NK@Z ENDP ; CTextFileLoader::SGroupNode::IsGroupNameKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?SetGroupName@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_rstGroupName$ = 8					; size = 4
?SetGroupName@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CTextFileLoader::SGroupNode::SetGroupName, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rstGroupName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 61   : {

  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 62   : 	m_strGroupName=c_rstGroupName;

  0000a	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  0000d	3b f0		 cmp	 esi, eax
  0000f	74 14		 je	 SHORT $LN3@SetGroupNa

; 434  :         return _Myres > _Small_string_capacity;

  00011	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00015	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  00018	76 02		 jbe	 SHORT $LN7@SetGroupNa

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0001a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@SetGroupNa:

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN3@SetGroupNa:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 63   : 	stl_lowers(m_strGroupName);

  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
  0002b	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0002e	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00032	76 02		 jbe	 SHORT $LN20@SetGroupNa

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00034	8b 36		 mov	 esi, DWORD PTR [esi]
$LN20@SetGroupNa:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp

; 65   : 	m_dwGroupNameKey=GenNameKey(m_strGroupName.c_str(), m_strGroupName.length());

  00036	ff 77 14	 push	 DWORD PTR [edi+20]
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 ?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ; CTextFileLoader::SGroupNode::GenNameKey
  0003f	83 c4 08	 add	 esp, 8
  00042	89 07		 mov	 DWORD PTR [edi], eax
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 66   : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?SetGroupName@SGroupNode@CTextFileLoader@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CTextFileLoader::SGroupNode::SetGroupName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextFileLoader.cpp
;	COMDAT ?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z
_TEXT	SEGMENT
_c_szGroupName$ = 8					; size = 4
_uGroupNameLen$ = 12					; size = 4
?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z PROC	; CTextFileLoader::SGroupNode::GenNameKey, COMDAT

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   : }

  00003	5d		 pop	 ebp

; 44   : 	return GetCRC32(c_szGroupName, uGroupNameLen);

  00004	e9 00 00 00 00	 jmp	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
?GenNameKey@SGroupNode@CTextFileLoader@@SAKPBDI@Z ENDP	; CTextFileLoader::SGroupNode::GenNameKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange, COMDAT

; 2173 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 2066 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2067 :         auto& _Al         = _Getal();
; 2068 :         auto& _My_data    = _Mypair._Myval2;
; 2069 :         pointer& _Myfirst = _My_data._Myfirst;
; 2070 :         pointer& _Mylast  = _My_data._Mylast;
; 2071 :         pointer& _Myend   = _My_data._Myend;
; 2072 : 
; 2073 :         _My_data._Orphan_all();
; 2074 : 
; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 65		 je	 SHORT $LN2@Tidy

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00009	57		 push	 edi
  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	c1 fa 02	 sar	 edx, 2
  00028	8b c2		 mov	 eax, edx
  0002a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002d	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00032	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00035	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003b	72 12		 jb	 SHORT $LN21@Tidy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003d	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00040	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00043	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00048	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004b	77 23		 ja	 SHORT $LN18@Tidy

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004d	8b fa		 mov	 edi, edx
$LN21@Tidy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004f	51		 push	 ecx
  00050	57		 push	 edi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2081 :             _Mylast  = nullptr;

  0005f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00066	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006d	5f		 pop	 edi
$LN2@Tidy:

; 2084 :     }

  0006e	5e		 pop	 esi
  0006f	c3		 ret	 0
$LN18@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Tidy:
  00075	cc		 int	 3
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 815  :         _Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 417  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3044 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3045 :         auto& _My_data = _Mypair._Myval2;
; 3046 :         _My_data._Orphan_all();
; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN16@Tidy_deall
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN27@Tidy_deall

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN24@Tidy_deall

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN27@Tidy_deall:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN16@Tidy_deall:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3058 :     }

  00044	c3		 ret	 0
$LN24@Tidy_deall:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN35@Tidy_deall:
  0004a	cc		 int	 3
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2874 :     _NODISCARD _CONSTEXPR20 int compare(_In_z_ const _Elem* const _Ptr) const noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00005	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2874 :     _NODISCARD _CONSTEXPR20 int compare(_In_z_ const _Elem* const _Ptr) const noexcept /* strengthened */ {

  00008	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00009	8b fe		 mov	 edi, esi
  0000b	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  0000e	66 90		 npad	 2
$LL26@compare:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL26@compare
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2876 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00017	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0001a	2b fa		 sub	 edi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0001c	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00020	76 02		 jbe	 SHORT $LN8@compare

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN8@compare:

; 2876 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00024	3b fb		 cmp	 edi, ebx
  00026	8b d3		 mov	 edx, ebx
  00028	0f 42 d7	 cmovb	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 411  :         return __builtin_memcmp(_First1, _First2, _Count);

  0002b	83 ea 04	 sub	 edx, 4
  0002e	72 11		 jb	 SHORT $LN29@compare
$LL30@compare:
  00030	8b 01		 mov	 eax, DWORD PTR [ecx]
  00032	3b 06		 cmp	 eax, DWORD PTR [esi]
  00034	75 10		 jne	 SHORT $LN28@compare
  00036	83 c1 04	 add	 ecx, 4
  00039	83 c6 04	 add	 esi, 4
  0003c	83 ea 04	 sub	 edx, 4
  0003f	73 ef		 jae	 SHORT $LL30@compare
$LN29@compare:
  00041	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00044	74 34		 je	 SHORT $LN27@compare
$LN28@compare:
  00046	8a 01		 mov	 al, BYTE PTR [ecx]
  00048	3a 06		 cmp	 al, BYTE PTR [esi]
  0004a	75 27		 jne	 SHORT $LN31@compare
  0004c	83 fa fd	 cmp	 edx, -3			; fffffffdH
  0004f	74 29		 je	 SHORT $LN27@compare
  00051	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00054	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00057	75 1a		 jne	 SHORT $LN31@compare
  00059	83 fa fe	 cmp	 edx, -2			; fffffffeH
  0005c	74 1c		 je	 SHORT $LN27@compare
  0005e	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00061	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00064	75 0d		 jne	 SHORT $LN31@compare
  00066	83 fa ff	 cmp	 edx, -1
  00069	74 0f		 je	 SHORT $LN27@compare
  0006b	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  0006e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00071	74 07		 je	 SHORT $LN27@compare
$LN31@compare:
  00073	1b c0		 sbb	 eax, eax
  00075	83 c8 01	 or	 eax, 1
  00078	eb 02		 jmp	 SHORT $LN32@compare
$LN27@compare:
  0007a	33 c0		 xor	 eax, eax
$LN32@compare:

; 595  :     if (_Ans != 0) {

  0007c	85 c0		 test	 eax, eax
  0007e	75 12		 jne	 SHORT $LN17@compare

; 596  :         return _Ans;
; 597  :     }
; 598  : 
; 599  :     if (_Left_size < _Right_size) {

  00080	3b fb		 cmp	 edi, ebx
  00082	76 0a		 jbe	 SHORT $LN45@compare
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2877 :     }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	83 c8 ff	 or	 eax, -1
  00089	5b		 pop	 ebx
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
$LN45@compare:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 603  :     if (_Left_size > _Right_size) {

  0008e	1b c0		 sbb	 eax, eax
  00090	f7 d8		 neg	 eax
$LN17@compare:
  00092	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2877 :     }

  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
$T2 = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1592 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1593 :         // assign [_Ptr, _Ptr + _Count)
; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 416  :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 434  :         return _Myres > _Small_string_capacity;

  00018	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0001b	76 02		 jbe	 SHORT $LN5@assign

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 1609 :             },
; 1610 :             _Ptr);
; 1611 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 2962 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 c7 00 00
	00		 ja	 $LN87@assign

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 12		 jbe	 SHORT $LN23@assign

; 2944 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	eb 45		 jmp	 SHORT $LN85@assign
$LN23@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00069	8b d1		 mov	 edx, ecx
  0006b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00070	d1 ea		 shr	 edx, 1
  00072	2b c2		 sub	 eax, edx
  00074	3b c8		 cmp	 ecx, eax
  00076	76 12		 jbe	 SHORT $LN24@assign

; 2948 :             return _Max;

  00078	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0007d	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00088	eb 24		 jmp	 SHORT $LN85@assign
$LN24@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0008a	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0008d	3b f8		 cmp	 edi, eax
  0008f	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00092	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00095	85 c0		 test	 eax, eax
  00097	74 18		 je	 SHORT $LN84@assign
$LN37@assign:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00099	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0009e	72 08		 jb	 SHORT $LN38@assign

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a6	eb 06		 jmp	 SHORT $LN85@assign
$LN38@assign:

; 136  :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN85@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000ae	83 c4 04	 add	 esp, 4
$LN84@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b1	53		 push	 ebx
  000b2	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000b5	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b8	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000b9	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  000bc	89 7e 14	 mov	 DWORD PTR [esi+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000c4	8b 7d 0c	 mov	 edi, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000ca	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000cd	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000d1	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000d4	76 29		 jbe	 SHORT $LN16@assign

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d6	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000db	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e1	72 12		 jb	 SHORT $LN66@assign

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000e3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000e6	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e9	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000eb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ee	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f1	77 19		 ja	 SHORT $LN63@assign

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000f3	8b c2		 mov	 eax, edx
$LN66@assign:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f5	51		 push	 ecx
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000fc	83 c4 08	 add	 esp, 8
$LN16@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1604 :         return _Reallocate_for(

  000ff	89 3e		 mov	 DWORD PTR [esi], edi

; 1609 :             },
; 1610 :             _Ptr);
; 1611 :     }

  00101	8b c6		 mov	 eax, esi
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 08 00	 ret	 8
$LN63@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN87@assign:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  00111	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN82@assign:
  00116	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 693  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000d	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00010	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00017	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 434  :         return _Myres > _Small_string_capacity;

  0001e	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00022	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  00025	76 05		 jbe	 SHORT $LN17@basic_stri

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00027	8b 00		 mov	 eax, DWORD PTR [eax]
  00029	89 45 08	 mov	 DWORD PTR __Right$[ebp], eax
$LN17@basic_stri:

; 857  :         if (_Count > max_size()) {

  0002c	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00032	0f 87 8d 00 00
	00		 ja	 $LN63@basic_stri

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00038	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  0003b	77 18		 ja	 SHORT $LN25@basic_stri

; 866  :             _My_data._Mysize = _Count;

  0003d	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00040	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00047	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  0004a	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  0004f	5f		 pop	 edi
  00050	5b		 pop	 ebx
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN25@basic_stri:
  00055	56		 push	 esi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00056	8b f3		 mov	 esi, ebx
  00058	83 ce 0f	 or	 esi, 15			; 0000000fH
  0005b	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00061	76 12		 jbe	 SHORT $LN31@basic_stri

; 2944 :             return _Max;

  00063	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00068	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00073	eb 2a		 jmp	 SHORT $LN61@basic_stri
$LN31@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00075	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0007a	3b f0		 cmp	 esi, eax
  0007c	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0007f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00082	85 c0		 test	 eax, eax
  00084	75 04		 jne	 SHORT $LN45@basic_stri

; 228  :         return nullptr;

  00086	33 c9		 xor	 ecx, ecx
  00088	eb 1a		 jmp	 SHORT $LN44@basic_stri
$LN45@basic_stri:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0008a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0008f	72 08		 jb	 SHORT $LN46@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00097	eb 06		 jmp	 SHORT $LN61@basic_stri
$LN46@basic_stri:

; 136  :         return ::operator new(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN61@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0009f	8b c8		 mov	 ecx, eax
  000a1	83 c4 04	 add	 esp, 4
$LN44@basic_stri:

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000a4	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000a7	89 0f		 mov	 DWORD PTR [edi], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax
  000aa	ff 75 08	 push	 DWORD PTR __Right$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  000ad	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b0	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 892  :         _My_data._Myres  = _New_capacity;

  000b1	89 77 14	 mov	 DWORD PTR [edi+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b4	e8 00 00 00 00	 call	 _memcpy
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  000bc	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  000bf	5f		 pop	 edi
  000c0	5b		 pop	 ebx
  000c1	5d		 pop	 ebp
  000c2	c2 04 00	 ret	 4
$LN63@basic_stri:

; 858  :             _Xlen_string(); // result too long

  000c5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN60@basic_stri:
  000ca	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
