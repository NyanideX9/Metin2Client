; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\TextBar.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CTextBar@@QAE@H_N@Z				; CTextBar::CTextBar
PUBLIC	??1CTextBar@@UAE@XZ				; CTextBar::~CTextBar
PUBLIC	?TextOutA@CTextBar@@QAEXHHPBD@Z			; CTextBar::TextOutA
PUBLIC	?SetTextColor@CTextBar@@QAEXHHH@Z		; CTextBar::SetTextColor
PUBLIC	?GetTextExtent@CTextBar@@QAEXPBDPAUtagSIZE@@@Z	; CTextBar::GetTextExtent
PUBLIC	?__SetFont@CTextBar@@IAEXH_N@Z			; CTextBar::__SetFont
PUBLIC	?OnCreate@CTextBar@@MAEXXZ			; CTextBar::OnCreate
PUBLIC	??_GCTextBar@@UAEPAXI@Z				; CTextBar::`scalar deleting destructor'
PUBLIC	??0bad_cast@std@@QAE@XZ				; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	?_Throw_bad_cast@std@@YAXXZ			; std::_Throw_bad_cast
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	?translate@?$_Regex_traits@D@std@@QBEDD@Z	; std::_Regex_traits<char>::translate
PUBLIC	??1?$regex_traits@D@std@@QAE@XZ			; std::regex_traits<char>::~regex_traits<char>
PUBLIC	??1_Node_base@std@@UAE@XZ			; std::_Node_base::~_Node_base
PUBLIC	??_G_Node_base@std@@UAEPAXI@Z			; std::_Node_base::`scalar deleting destructor'
PUBLIC	??_G_Root_node@std@@UAEPAXI@Z			; std::_Root_node::`scalar deleting destructor'
PUBLIC	??_G_Node_end_group@std@@UAEPAXI@Z		; std::_Node_end_group::`scalar deleting destructor'
PUBLIC	??_G_Node_assert@std@@UAEPAXI@Z			; std::_Node_assert::`scalar deleting destructor'
PUBLIC	??_G_Node_capture@std@@UAEPAXI@Z		; std::_Node_capture::`scalar deleting destructor'
PUBLIC	??_G_Node_back@std@@UAEPAXI@Z			; std::_Node_back::`scalar deleting destructor'
PUBLIC	??_G_Node_endif@std@@UAEPAXI@Z			; std::_Node_endif::`scalar deleting destructor'
PUBLIC	??_G_Node_if@std@@UAEPAXI@Z			; std::_Node_if::`scalar deleting destructor'
PUBLIC	??_G_Node_end_rep@std@@UAEPAXI@Z		; std::_Node_end_rep::`scalar deleting destructor'
PUBLIC	??_G_Node_rep@std@@UAEPAXI@Z			; std::_Node_rep::`scalar deleting destructor'
PUBLIC	?_Buy_raw@?$vector@IV?$allocator@I@std@@@std@@AAEXI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_raw
PUBLIC	?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
PUBLIC	??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ	; std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >
PUBLIC	??4?$vector@_NV?$allocator@_N@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<bool,std::allocator<bool> >::operator=
PUBLIC	?resize@?$vector@_NV?$allocator@_N@std@@@std@@QAEXI_N@Z ; std::vector<bool,std::allocator<bool> >::resize
PUBLIC	?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@V?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@0@Z ; std::vector<bool,std::allocator<bool> >::erase
PUBLIC	?_Insert_x@?$vector@_NV?$allocator@_N@std@@@std@@QAEIV?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@I@Z ; std::vector<bool,std::allocator<bool> >::_Insert_x
PUBLIC	?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@SAXXZ ; std::vector<bool,std::allocator<bool> >::_Xlen
PUBLIC	??1?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@QAE@XZ ; std::vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >::~vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >
PUBLIC	?_Xlength@?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@CAXXZ ; std::vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >::_Xlength
PUBLIC	?_Calculate_loop_simplicity@std@@YAXPAV_Node_base@1@0PAV_Node_rep@1@@Z ; std::_Calculate_loop_simplicity
PUBLIC	??1?$basic_regex@DV?$regex_traits@D@std@@@std@@QAE@XZ ; std::basic_regex<char,std::regex_traits<char> >::~basic_regex<char,std::regex_traits<char> >
PUBLIC	?_Tidy@?$basic_regex@DV?$regex_traits@D@std@@@std@@AAEXXZ ; std::basic_regex<char,std::regex_traits<char> >::_Tidy
PUBLIC	??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z ; std::regex_replace<std::regex_traits<char>,char>
PUBLIC	??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z ; std::use_facet<std::collate<char> >
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	??$regex_replace@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z ; std::regex_replace<std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >,std::regex_traits<char>,char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@PBD1W4syntax_option_type@regex_constants@1@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Parser<char const *,char,std::regex_traits<char> >
PUBLIC	?_Compile@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Compile
PUBLIC	?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
PUBLIC	?_Is_esc@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@ABE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Is_esc
PUBLIC	?_Trans@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Trans
PUBLIC	?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next
PUBLIC	?_Expect@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4_Meta_type@2@W4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Expect
PUBLIC	?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEHHHW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_digits
PUBLIC	?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_DecimalDigits
PUBLIC	?_HexDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXH@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_HexDigits
PUBLIC	?_OctalDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_OctalDigits
PUBLIC	?_Do_ex_class@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4_Meta_type@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ex_class
PUBLIC	?_CharacterClassEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_N_N@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterClassEscape
PUBLIC	?_ClassEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE?AW4_Prs_ret@2@_N@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassEscape
PUBLIC	?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE?AW4_Prs_ret@2@XZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassAtom
PUBLIC	?_ClassRanges@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassRanges
PUBLIC	?_CharacterClass@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterClass
PUBLIC	?_IdentityEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_IdentityEscape
PUBLIC	?_IsIdentityEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@ABE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_IsIdentityEscape
PUBLIC	?_Do_ffn@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_ND@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ffn
PUBLIC	?_Do_ffnx@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_ND@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ffnx
PUBLIC	?_CharacterEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterEscape
PUBLIC	?_AtomEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_AtomEscape
PUBLIC	?_Do_capture_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_capture_group
PUBLIC	?_Do_noncapture_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_noncapture_group
PUBLIC	?_Do_assert_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEX_N@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_assert_group
PUBLIC	?_Wrapped_disjunction@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Wrapped_disjunction
PUBLIC	?_Quantifier@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Quantifier
PUBLIC	?_Alternative@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Alternative
PUBLIC	?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Disjunction
PUBLIC	??0?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@W4syntax_option_type@regex_constants@1@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Builder<char const *,char,std::regex_traits<char> >
PUBLIC	?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QBE_NXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Beg_expr
PUBLIC	?_Setlong@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Setlong
PUBLIC	?_Tidy@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Tidy
PUBLIC	?_Getmark@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QBEPAV_Node_base@2@XZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Getmark
PUBLIC	?_Add_bol@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_bol
PUBLIC	?_Add_eol@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_eol
PUBLIC	?_Add_wbound@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_wbound
PUBLIC	?_Add_dot@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_dot
PUBLIC	?_Add_char@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char
PUBLIC	?_Add_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_class
PUBLIC	?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_class
PUBLIC	?_Add_range@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXDD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_range
PUBLIC	?_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXF_N@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_named_class
PUBLIC	?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_equiv
PUBLIC	?_Add_coll@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_coll
PUBLIC	?_Begin_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@XZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_group
PUBLIC	?_End_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_group
PUBLIC	?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@_N@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_assert_group
PUBLIC	?_End_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_assert_group
PUBLIC	?_Begin_capture_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@I@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_capture_group
PUBLIC	?_Add_backreference@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXI@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_backreference
PUBLIC	?_Begin_if@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_if
PUBLIC	?_Else_if@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@0@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Else_if
PUBLIC	?_Add_rep@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXHH_N@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_rep
PUBLIC	?_Negate@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Negate
PUBLIC	?_Mark_final@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Mark_final
PUBLIC	?_End_pattern@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_pattern
PUBLIC	?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
PUBLIC	?_Insert_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@CAXPAV_Node_base@2@0@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Insert_node
PUBLIC	?_New_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@W4_Node_type@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_New_node
PUBLIC	?_Add_str_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_str_node
PUBLIC	?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABE_NPAV_Node_base@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Beg_expr
PUBLIC	?_Add_char_to_bitmap@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_bitmap
PUBLIC	?_Add_char_to_array@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_array
PUBLIC	?_Add_elts@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXPAV?$_Node_class@DV?$regex_traits@D@std@@@2@F_N@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_elts
PUBLIC	?_Char_to_elts@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXPBD0HPAPAU?$_Sequence@D@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Char_to_elts
PUBLIC	?_Get_bmax@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABEIXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Get_bmax
PUBLIC	?_Get_tmax@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABEIXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Get_tmax
PUBLIC	??1?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@XZ ; std::_Parser<char const *,char,std::regex_traits<char> >::~_Parser<char const *,char,std::regex_traits<char> >
PUBLIC	?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::collate<char>::_Getcat
PUBLIC	??1?$collate@D@std@@MAE@XZ			; std::collate<char>::~collate<char>
PUBLIC	?do_compare@?$collate@D@std@@MBEHPBD000@Z	; std::collate<char>::do_compare
PUBLIC	?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z ; std::collate<char>::do_transform
PUBLIC	?do_hash@?$collate@D@std@@MBEJPBD0@Z		; std::collate<char>::do_hash
PUBLIC	??_G?$collate@D@std@@MAEPAXI@Z			; std::collate<char>::`scalar deleting destructor'
PUBLIC	??$_Hash_array_representation@D@std@@YAIQBDI@Z	; std::_Hash_array_representation<char>
PUBLIC	??$_Regex_replace1@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PBDV?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@PBD1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z ; std::_Regex_replace1<std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,char const *,std::regex_traits<char>,char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$_Tidy_guard@V?$_Builder@PBDDV?$regex_traits@D@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::_Builder<char const *,char,std::regex_traits<char> > >::~_Tidy_guard<std::_Builder<char const *,char,std::regex_traits<char> > >
PUBLIC	??1?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@QAE@XZ ; std::vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >::~vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >
PUBLIC	?_Xlength@?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@CAXXZ ; std::vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >::_Xlength
PUBLIC	?_Resize@?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@std@@QAEXI@Z ; std::match_results<char const *,std::allocator<std::sub_match<char const *> > >::_Resize
PUBLIC	??1?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@std@@QAE@XZ ; std::match_results<char const *,std::allocator<std::sub_match<char const *> > >::~match_results<char const *,std::allocator<std::sub_match<char const *> > >
PUBLIC	??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z ; std::_Regex_search2<char const *,std::allocator<std::sub_match<char const *> >,char,std::regex_traits<char>,char const *>
PUBLIC	?_Skip@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAEPBDPBD0PAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Skip
PUBLIC	??1?$_Bt_state_t@PBD@std@@QAE@XZ		; std::_Bt_state_t<char const *>::~_Bt_state_t<char const *>
PUBLIC	??0?$_Bt_state_t@PBD@std@@QAE@ABV01@@Z		; std::_Bt_state_t<char const *>::_Bt_state_t<char const *>
PUBLIC	?_Buy_raw@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXI@Z ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Buy_raw
PUBLIC	?_Xlength@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@CAXXZ ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Xlength
PUBLIC	??1?$_Tgt_state_t@PBD@std@@QAE@XZ		; std::_Tgt_state_t<char const *>::~_Tgt_state_t<char const *>
PUBLIC	??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z		; std::_Tgt_state_t<char const *>::_Tgt_state_t<char const *>
PUBLIC	??4?$_Tgt_state_t@PBD@std@@QAEAAV01@ABV01@@Z	; std::_Tgt_state_t<char const *>::operator=
PUBLIC	?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_if
PUBLIC	?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_rep0
PUBLIC	?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_rep
PUBLIC	?_Do_class@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_class
PUBLIC	?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat
PUBLIC	?_Better_match@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NXZ ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Better_match
PUBLIC	?_Is_wbound@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABE_NXZ ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Is_wbound
PUBLIC	?_Get_ncap@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABEIXZ ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Get_ncap
PUBLIC	??1?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE@XZ ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::~_Matcher<char const *,char,std::regex_traits<char>,char const *>
PUBLIC	??$_Match@V?$allocator@V?$sub_match@PBD@std@@@std@@@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE_NPAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@1@_N@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match<std::allocator<std::sub_match<char const *> > >
PUBLIC	??$_Format_sed@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@PBDV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@V10@PBD2W4match_flag_type@regex_constants@0@@Z ; std::_Format_sed<char const *,std::allocator<std::sub_match<char const *> >,char const *,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Format_default@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@PBDV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@V10@PBD2W4match_flag_type@regex_constants@0@@Z ; std::_Format_default<char const *,std::allocator<std::sub_match<char const *> >,char const *,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >::_Resize<std::_Value_init_tag>
PUBLIC	?_Insert@?$_Buf@D@std@@QAEXD@Z			; std::_Buf<char>::_Insert
PUBLIC	??_G?$_Node_str@D@std@@UAEPAXI@Z		; std::_Node_str<char>::`scalar deleting destructor'
PUBLIC	??$find@PBDW4_Meta_type@std@@@std@@YAPBDPBDQBDABW4_Meta_type@0@@Z ; std::find<char const *,enum std::_Meta_type>
PUBLIC	??$_Compare@PBDPBDV?$regex_traits@D@std@@@std@@YAPBDPBD000ABV?$regex_traits@D@0@W4syntax_option_type@regex_constants@0@@Z ; std::_Compare<char const *,char const *,std::regex_traits<char> >
PUBLIC	??_G?$_Node_class@DV?$regex_traits@D@std@@@std@@UAEPAXI@Z ; std::_Node_class<char,std::regex_traits<char> >::`scalar deleting destructor'
PUBLIC	??$_Lookup_coll@PBDD@std@@YAPBDPBD0PBU?$_Sequence@D@0@@Z ; std::_Lookup_coll<char const *,char>
PUBLIC	??$_Lookup_range@D@std@@YA_NIPBU?$_Buf@D@0@@Z	; std::_Lookup_range<char>
PUBLIC	??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z ; std::_Lookup_equiv<char,std::regex_traits<char> >
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Resize<std::_Value_init_tag>
PUBLIC	??Y?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator+=
PUBLIC	??$fill_n@V?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@I_N@std@@YA?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@0@V10@IAB_N@Z ; std::fill_n<std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >,unsigned int,bool>
PUBLIC	??$_Resize@I@?$vector@IV?$allocator@I@std@@@std@@AAEXIABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize<unsigned int>
PUBLIC	??$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z ; std::_Regex_traits<char>::lookup_classname<char const *>
PUBLIC	??$_Cmp_chrange@PBDPBDU?$_Cmp_icase@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_icase@V?$regex_traits@D@std@@@0@@Z ; std::_Cmp_chrange<char const *,char const *,std::_Cmp_icase<std::regex_traits<char> > >
PUBLIC	??$_Cmp_chrange@PBDPBDU?$_Cmp_collate@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_collate@V?$regex_traits@D@std@@@0@@Z ; std::_Cmp_chrange<char const *,char const *,std::_Cmp_collate<std::regex_traits<char> > >
PUBLIC	??$_Cmp_chrange@PBDPBDU?$_Cmp_cs@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_cs@V?$regex_traits@D@std@@@0@@Z ; std::_Cmp_chrange<char const *,char const *,std::_Cmp_cs<std::regex_traits<char> > >
PUBLIC	??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z ; std::_Regex_traits<char>::transform_primary<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@V?$sub_match@PBD@std@@@std@@@std@@YAPAV?$sub_match@PBD@0@PAV10@IAAV?$allocator@V?$sub_match@PBD@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<std::sub_match<char const *> > >
PUBLIC	??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z	; std::_Copy_memmove<unsigned int *,unsigned int *>
PUBLIC	??$_Uninitialized_fill_n@V?$allocator@I@std@@@std@@YAPAIPAIIABIAAV?$allocator@I@0@@Z ; std::_Uninitialized_fill_n<std::allocator<unsigned int> >
PUBLIC	??1?$unique_ptr@V_Node_assert@std@@U?$default_delete@V_Node_assert@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Node_assert,std::default_delete<std::_Node_assert> >::~unique_ptr<std::_Node_assert,std::default_delete<std::_Node_assert> >
PUBLIC	??$_Find_vectorized@$$CBDE@std@@YAPBDQBD0E@Z	; std::_Find_vectorized<char const ,unsigned char>
PUBLIC	??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
PUBLIC	?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ; std::vector<char,std::allocator<char> >::_Buy_nonzero
PUBLIC	?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ ; std::vector<char,std::allocator<char> >::_Xlength
PUBLIC	??$_Copy_memmove@PAU_Loop_vals_t@std@@PAU12@@std@@YAPAU_Loop_vals_t@0@PAU10@00@Z ; std::_Copy_memmove<std::_Loop_vals_t *,std::_Loop_vals_t *>
PUBLIC	??$_Copy_vbool@V?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@V12@@std@@YA?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@0@V10@00@Z ; std::_Copy_vbool<std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >,std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > > >
PUBLIC	??$_Copy_memmove_tail@PAI@std@@YAPAIQBDQAIII@Z	; std::_Copy_memmove_tail<unsigned int *>
PUBLIC	??$_Is_all_bits_zero@I@std@@YA_NABI@Z		; std::_Is_all_bits_zero<unsigned int>
PUBLIC	??$_Fill_zero_memset@PAI@std@@YAXPAII@Z		; std::_Fill_zero_memset<unsigned int *>
PUBLIC	??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
PUBLIC	??$_Copy_memmove_n@PAIPAI@std@@YAPAIPAII0@Z	; std::_Copy_memmove_n<unsigned int *,unsigned int *>
PUBLIC	??$_Copy_memmove_tail@PAU_Loop_vals_t@std@@@std@@YAPAU_Loop_vals_t@0@QBDQAU10@II@Z ; std::_Copy_memmove_tail<std::_Loop_vals_t *>
PUBLIC	??$_Copy_memmove@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@00@Z ; std::_Copy_memmove<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
PUBLIC	??$_Copy_memmove@PAV?$sub_match@PBD@std@@PAV12@@std@@YAPAV?$sub_match@PBD@0@PAV10@00@Z ; std::_Copy_memmove<std::sub_match<char const *> *,std::sub_match<char const *> *>
PUBLIC	??$_Copy_memmove_tail@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@QBDQAU120@II@Z ; std::_Copy_memmove_tail<std::_Tgt_state_t<char const *>::_Grp_t *>
PUBLIC	??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z ; std::_Regex_traits<char>::transform_primary<char const *>
PUBLIC	??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z ; std::_Regex_traits<char>::transform_primary<char *>
PUBLIC	??$_Copy_memmove_tail@PAV?$sub_match@PBD@std@@@std@@YAPAV?$sub_match@PBD@0@QBDQAV10@II@Z ; std::_Copy_memmove_tail<std::sub_match<char const *> *>
PUBLIC	??$_Copy_memmove@PBDPAD@std@@YAPADPBD0PAD@Z	; std::_Copy_memmove<char const *,char *>
PUBLIC	??$_Insert@PBD@?$_Buf@D@std@@QAEXPBD0@Z		; std::_Buf<char>::_Insert<char const *>
PUBLIC	??$_Copy_memmove@PADPAD@std@@YAPADPAD00@Z	; std::_Copy_memmove<char *,char *>
PUBLIC	??$_Copy_memmove_tail@PAD@std@@YAPADQBDQADII@Z	; std::_Copy_memmove_tail<char *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_7CTextBar@@6B@				; CTextBar::`vftable'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name@		; `string'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	?_Is_word_table@?1??_Is_word@std@@YA_NE@Z@4QB_NB ; `std::_Is_word'::`2'::_Is_word_table
PUBLIC	??_7_Node_base@std@@6B@				; std::_Node_base::`vftable'
PUBLIC	??_7_Root_node@std@@6B@				; std::_Root_node::`vftable'
PUBLIC	??_7_Node_end_group@std@@6B@			; std::_Node_end_group::`vftable'
PUBLIC	??_7_Node_assert@std@@6B@			; std::_Node_assert::`vftable'
PUBLIC	??_7_Node_capture@std@@6B@			; std::_Node_capture::`vftable'
PUBLIC	??_7_Node_back@std@@6B@				; std::_Node_back::`vftable'
PUBLIC	??_7_Node_endif@std@@6B@			; std::_Node_endif::`vftable'
PUBLIC	??_7_Node_if@std@@6B@				; std::_Node_if::`vftable'
PUBLIC	??_7_Node_end_rep@std@@6B@			; std::_Node_end_rep::`vftable'
PUBLIC	??_7_Node_rep@std@@6B@				; std::_Node_rep::`vftable'
PUBLIC	??_C@_0BM@CIBGAEGH@?2?$HMc?$FLa?9zA?9Z0?99?$FN?$CL?$HM?2?$HM?$FLr?$HMR?$HMH?$HMh?$FN@ ; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$collate@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::collate<char> >::_Psave
PUBLIC	?id@?$collate@D@std@@2V0locale@2@A		; std::collate<char>::id
PUBLIC	??_7?$collate@D@std@@6B@			; std::collate<char>::`vftable'
PUBLIC	?_Meta_map@?1??_Trans@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ@4QBDB ; `std::_Parser<char const *,char,std::regex_traits<char> >::_Trans'::`2'::_Meta_map
PUBLIC	??_7?$_Node_str@D@std@@6B@			; std::_Node_str<char>::`vftable'
PUBLIC	??_7?$_Node_class@DV?$regex_traits@D@std@@@std@@6B@ ; std::_Node_class<char,std::regex_traits<char> >::`vftable'
PUBLIC	??_C@_0BG@EOMJEIFA@vector?$DMbool?$DO?5too?5long@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	?_Names@?1???$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z@4QBU_Cl_names@2@B ; `std::_Regex_traits<char>::lookup_classname<char const *>'::`2'::_Names
PUBLIC	??_C@_05IIMHCHIO@alnum@				; `string'
PUBLIC	??_C@_1M@KLMEPMCM@?$AAa?$AAl?$AAn?$AAu?$AAm@	; `string'
PUBLIC	??_C@_05IAEKHIAN@alpha@				; `string'
PUBLIC	??_C@_1M@DHGLHBMI@?$AAa?$AAl?$AAp?$AAh?$AAa@	; `string'
PUBLIC	??_C@_05BABJKOGB@blank@				; `string'
PUBLIC	??_C@_1M@EJAAJBPE@?$AAb?$AAl?$AAa?$AAn?$AAk@	; `string'
PUBLIC	??_C@_05JMDPEFNK@cntrl@				; `string'
PUBLIC	??_C@_1M@LMIMILA@?$AAc?$AAn?$AAt?$AAr?$AAl@	; `string'
PUBLIC	??_C@_01LPLHEDKD@d@				; `string'
PUBLIC	??_C@_13GKPPEALH@?$AAd@				; `string'
PUBLIC	??_C@_05ODNOIFML@digit@				; `string'
PUBLIC	??_C@_1M@JDAEIBKG@?$AAd?$AAi?$AAg?$AAi?$AAt@	; `string'
PUBLIC	??_C@_05KCJBMLII@graph@				; `string'
PUBLIC	??_C@_1M@MDKNJLLK@?$AAg?$AAr?$AAa?$AAp?$AAh@	; `string'
PUBLIC	??_C@_05IPJEPLHL@lower@				; `string'
PUBLIC	??_C@_1M@LGAECJJD@?$AAl?$AAo?$AAw?$AAe?$AAr@	; `string'
PUBLIC	??_C@_05IJDJACGD@print@				; `string'
PUBLIC	??_C@_1M@ELNLAPLA@?$AAp?$AAr?$AAi?$AAn?$AAt@	; `string'
PUBLIC	??_C@_05KOBGHFJJ@punct@				; `string'
PUBLIC	??_C@_1M@BPFMAOAO@?$AAp?$AAu?$AAn?$AAc?$AAt@	; `string'
PUBLIC	??_C@_05OLNILLAB@space@				; `string'
PUBLIC	??_C@_1M@LPGODFOM@?$AAs?$AAp?$AAa?$AAc?$AAe@	; `string'
PUBLIC	??_C@_01LKDEMHDF@s@				; `string'
PUBLIC	??_C@_13KHDBCPJB@?$AAs@				; `string'
PUBLIC	??_C@_05NECKJAMC@upper@				; `string'
PUBLIC	??_C@_1M@PLNFCNIC@?$AAu?$AAp?$AAp?$AAe?$AAr@	; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_13CIFDLIMG@?$AAw@				; `string'
PUBLIC	??_C@_06BAPHGFFK@xdigit@			; `string'
PUBLIC	??_C@_1O@OAFMJDHN@?$AAx?$AAd?$AAi?$AAg?$AAi?$AAt@ ; `string'
PUBLIC	??_R4CTextBar@@6B@				; CTextBar::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTextBar@@@8				; CTextBar `RTTI Type Descriptor'
PUBLIC	??_R3CTextBar@@8				; CTextBar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTextBar@@8				; CTextBar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTextBar@@8			; CTextBar::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CDibBar@@8			; CDibBar::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCDibBar@@@8				; CDibBar `RTTI Type Descriptor'
PUBLIC	??_R3CDibBar@@8					; CDibBar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDibBar@@8					; CDibBar::`RTTI Base Class Array'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$collate@D@std@@6B@			; std::collate<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$collate@D@std@@@8			; std::collate<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$collate@D@std@@8				; std::collate<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$collate@D@std@@8				; std::collate<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$collate@D@std@@8		; std::collate<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Node_base@std@@6B@			; std::_Node_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_base@std@@@8			; std::_Node_base `RTTI Type Descriptor'
PUBLIC	??_R3_Node_base@std@@8				; std::_Node_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_base@std@@8				; std::_Node_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_base@std@@8			; std::_Node_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Root_node@std@@6B@			; std::_Root_node::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Root_node@std@@@8			; std::_Root_node `RTTI Type Descriptor'
PUBLIC	??_R3_Root_node@std@@8				; std::_Root_node::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Root_node@std@@8				; std::_Root_node::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Root_node@std@@8			; std::_Root_node::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Node_end_group@std@@6B@			; std::_Node_end_group::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_end_group@std@@@8			; std::_Node_end_group `RTTI Type Descriptor'
PUBLIC	??_R3_Node_end_group@std@@8			; std::_Node_end_group::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_end_group@std@@8			; std::_Node_end_group::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_end_group@std@@8		; std::_Node_end_group::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Node_assert@std@@6B@			; std::_Node_assert::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_assert@std@@@8			; std::_Node_assert `RTTI Type Descriptor'
PUBLIC	??_R3_Node_assert@std@@8			; std::_Node_assert::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_assert@std@@8			; std::_Node_assert::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_assert@std@@8		; std::_Node_assert::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Node_capture@std@@6B@			; std::_Node_capture::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_capture@std@@@8			; std::_Node_capture `RTTI Type Descriptor'
PUBLIC	??_R3_Node_capture@std@@8			; std::_Node_capture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_capture@std@@8			; std::_Node_capture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_capture@std@@8		; std::_Node_capture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Node_back@std@@6B@			; std::_Node_back::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_back@std@@@8			; std::_Node_back `RTTI Type Descriptor'
PUBLIC	??_R3_Node_back@std@@8				; std::_Node_back::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_back@std@@8				; std::_Node_back::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_back@std@@8			; std::_Node_back::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Node_endif@std@@6B@			; std::_Node_endif::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_endif@std@@@8			; std::_Node_endif `RTTI Type Descriptor'
PUBLIC	??_R3_Node_endif@std@@8				; std::_Node_endif::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_endif@std@@8				; std::_Node_endif::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_endif@std@@8		; std::_Node_endif::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Node_if@std@@6B@				; std::_Node_if::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_if@std@@@8			; std::_Node_if `RTTI Type Descriptor'
PUBLIC	??_R3_Node_if@std@@8				; std::_Node_if::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_if@std@@8				; std::_Node_if::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_if@std@@8			; std::_Node_if::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Node_rep@std@@6B@				; std::_Node_rep::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_rep@std@@@8			; std::_Node_rep `RTTI Type Descriptor'
PUBLIC	??_R3_Node_rep@std@@8				; std::_Node_rep::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_rep@std@@8				; std::_Node_rep::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_rep@std@@8			; std::_Node_rep::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Node_end_rep@std@@6B@			; std::_Node_end_rep::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Node_end_rep@std@@@8			; std::_Node_end_rep `RTTI Type Descriptor'
PUBLIC	??_R3_Node_end_rep@std@@8			; std::_Node_end_rep::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Node_end_rep@std@@8			; std::_Node_end_rep::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Node_end_rep@std@@8		; std::_Node_end_rep::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$_Node_class@DV?$regex_traits@D@std@@@std@@6B@ ; std::_Node_class<char,std::regex_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$_Node_class@DV?$regex_traits@D@std@@@std@@@8 ; std::_Node_class<char,std::regex_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$_Node_class@DV?$regex_traits@D@std@@@std@@8 ; std::_Node_class<char,std::regex_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Node_class@DV?$regex_traits@D@std@@@std@@8 ; std::_Node_class<char,std::regex_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Node_class@DV?$regex_traits@D@std@@@std@@8 ; std::_Node_class<char,std::regex_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$_Node_str@D@std@@6B@			; std::_Node_str<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$_Node_str@D@std@@@8			; std::_Node_str<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Node_str@D@std@@8			; std::_Node_str<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Node_str@D@std@@8			; std::_Node_str<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Node_str@D@std@@8		; std::_Node_str<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_free:PROC
EXTRN	_realloc:PROC
EXTRN	_strchr:PROC
EXTRN	__imp__CreateFontIndirectA@4:PROC
EXTRN	__imp__GetTextExtentPoint32A@16:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	___std_find_trivial_1@12:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xruntime_error@std@@YAXPBD@Z:PROC		; std::_Xruntime_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?SetBkMode@CGraphicDib@@QAEXH@Z:PROC		; CGraphicDib::SetBkMode
EXTRN	?TextOutA@CGraphicDib@@QAEXHHPBD@Z:PROC		; CGraphicDib::TextOutA
EXTRN	?GetDCHandle@CGraphicDib@@QAEPAUHDC__@@XZ:PROC	; CGraphicDib::GetDCHandle
EXTRN	??0CDibBar@@QAE@XZ:PROC				; CDibBar::CDibBar
EXTRN	??1CDibBar@@UAE@XZ:PROC				; CDibBar::~CDibBar
EXTRN	?Invalidate@CDibBar@@QAEXXZ:PROC		; CDibBar::Invalidate
EXTRN	??_ECTextBar@@UAEPAXI@Z:PROC			; CTextBar::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__Getcoll:PROC
EXTRN	__Getctype:PROC
EXTRN	__Strcoll:PROC
EXTRN	__Strxfrm:PROC
EXTRN	__Tolower:PROC
EXTRN	__Toupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:PROC	; std::locale::_Init
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	?GetCharsetFromCodePage@@YAHG@Z:PROC		; GetCharsetFromCodePage
EXTRN	?GetDefaultCodePage@@YAKXZ:PROC			; GetDefaultCodePage
EXTRN	?GetFontFaceFromCodePage@@YAPBDG@Z:PROC		; GetFontFaceFromCodePage
EXTRN	?_Xregex_error@std@@YAXW4error_type@regex_constants@1@@Z:PROC ; std::_Xregex_error
EXTRN	??_E_Node_base@std@@UAEPAXI@Z:PROC		; std::_Node_base::`vector deleting destructor'
EXTRN	??_E_Root_node@std@@UAEPAXI@Z:PROC		; std::_Root_node::`vector deleting destructor'
EXTRN	??_E_Node_end_group@std@@UAEPAXI@Z:PROC		; std::_Node_end_group::`vector deleting destructor'
EXTRN	??_E_Node_assert@std@@UAEPAXI@Z:PROC		; std::_Node_assert::`vector deleting destructor'
EXTRN	??_E_Node_capture@std@@UAEPAXI@Z:PROC		; std::_Node_capture::`vector deleting destructor'
EXTRN	??_E_Node_back@std@@UAEPAXI@Z:PROC		; std::_Node_back::`vector deleting destructor'
EXTRN	??_E_Node_endif@std@@UAEPAXI@Z:PROC		; std::_Node_endif::`vector deleting destructor'
EXTRN	??_E_Node_if@std@@UAEPAXI@Z:PROC		; std::_Node_if::`vector deleting destructor'
EXTRN	??_E_Node_end_rep@std@@UAEPAXI@Z:PROC		; std::_Node_end_rep::`vector deleting destructor'
EXTRN	??_E_Node_rep@std@@UAEPAXI@Z:PROC		; std::_Node_rep::`vector deleting destructor'
EXTRN	??_E?$collate@D@std@@MAEPAXI@Z:PROC		; std::collate<char>::`vector deleting destructor'
EXTRN	??_E?$_Node_str@D@std@@UAEPAXI@Z:PROC		; std::_Node_str<char>::`vector deleting destructor'
EXTRN	??_E?$_Node_class@DV?$regex_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::_Node_class<char,std::regex_traits<char> >::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	___security_cookie:DWORD
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$collate@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$collate@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::collate<char> >::_Psave
_BSS	ENDS
;	COMDAT ?id@?$collate@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$collate@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::collate<char>::id
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Node_str@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Node_str@D@std@@8 DD FLAT:??_R0?AV?$_Node_str@D@std@@@8 ; std::_Node_str<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Node_str@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Node_str@D@std@@8
rdata$r	SEGMENT
??_R2?$_Node_str@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Node_str@D@std@@8 ; std::_Node_str<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$_Node_str@D@std@@8
rdata$r	SEGMENT
??_R3?$_Node_str@D@std@@8 DD 00H			; std::_Node_str<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$_Node_str@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Node_str@D@std@@@8
data$rs	SEGMENT
??_R0?AV?$_Node_str@D@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Node_str<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Node_str@D@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$_Node_str@D@std@@6B@
rdata$r	SEGMENT
??_R4?$_Node_str@D@std@@6B@ DD 00H			; std::_Node_str<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$_Node_str@D@std@@@8
	DD	FLAT:??_R3?$_Node_str@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Node_class@DV?$regex_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Node_class@DV?$regex_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$_Node_class@DV?$regex_traits@D@std@@@std@@@8 ; std::_Node_class<char,std::regex_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Node_class@DV?$regex_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Node_class@DV?$regex_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$_Node_class@DV?$regex_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Node_class@DV?$regex_traits@D@std@@@std@@8 ; std::_Node_class<char,std::regex_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$_Node_class@DV?$regex_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$_Node_class@DV?$regex_traits@D@std@@@std@@8 DD 00H ; std::_Node_class<char,std::regex_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$_Node_class@DV?$regex_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Node_class@DV?$regex_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$_Node_class@DV?$regex_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Node_class<char,std::regex_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Node_class@DV?$regex_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$_Node_class@DV?$regex_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$_Node_class@DV?$regex_traits@D@std@@@std@@6B@ DD 00H ; std::_Node_class<char,std::regex_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$_Node_class@DV?$regex_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$_Node_class@DV?$regex_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Node_end_rep@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_end_rep@std@@8 DD FLAT:??_R0?AV_Node_end_rep@std@@@8 ; std::_Node_end_rep::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_end_rep@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_end_rep@std@@8
rdata$r	SEGMENT
??_R2_Node_end_rep@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_end_rep@std@@8 ; std::_Node_end_rep::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_end_rep@std@@8
rdata$r	SEGMENT
??_R3_Node_end_rep@std@@8 DD 00H			; std::_Node_end_rep::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_end_rep@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_end_rep@std@@@8
data$rs	SEGMENT
??_R0?AV_Node_end_rep@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Node_end_rep `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_end_rep@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Node_end_rep@std@@6B@
rdata$r	SEGMENT
??_R4_Node_end_rep@std@@6B@ DD 00H			; std::_Node_end_rep::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_end_rep@std@@@8
	DD	FLAT:??_R3_Node_end_rep@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Node_rep@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_rep@std@@8 DD FLAT:??_R0?AV_Node_rep@std@@@8 ; std::_Node_rep::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_rep@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_rep@std@@8
rdata$r	SEGMENT
??_R2_Node_rep@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_rep@std@@8 ; std::_Node_rep::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_rep@std@@8
rdata$r	SEGMENT
??_R3_Node_rep@std@@8 DD 00H				; std::_Node_rep::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_rep@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_rep@std@@@8
data$rs	SEGMENT
??_R0?AV_Node_rep@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Node_rep `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_rep@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Node_rep@std@@6B@
rdata$r	SEGMENT
??_R4_Node_rep@std@@6B@ DD 00H				; std::_Node_rep::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_rep@std@@@8
	DD	FLAT:??_R3_Node_rep@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Node_if@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_if@std@@8 DD FLAT:??_R0?AV_Node_if@std@@@8 ; std::_Node_if::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_if@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_if@std@@8
rdata$r	SEGMENT
??_R2_Node_if@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_if@std@@8 ; std::_Node_if::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_if@std@@8
rdata$r	SEGMENT
??_R3_Node_if@std@@8 DD 00H				; std::_Node_if::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_if@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_if@std@@@8
data$rs	SEGMENT
??_R0?AV_Node_if@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Node_if `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_if@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Node_if@std@@6B@
rdata$r	SEGMENT
??_R4_Node_if@std@@6B@ DD 00H				; std::_Node_if::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_if@std@@@8
	DD	FLAT:??_R3_Node_if@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Node_endif@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_endif@std@@8 DD FLAT:??_R0?AV_Node_endif@std@@@8 ; std::_Node_endif::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_endif@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_endif@std@@8
rdata$r	SEGMENT
??_R2_Node_endif@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_endif@std@@8 ; std::_Node_endif::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_endif@std@@8
rdata$r	SEGMENT
??_R3_Node_endif@std@@8 DD 00H				; std::_Node_endif::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_endif@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_endif@std@@@8
data$rs	SEGMENT
??_R0?AV_Node_endif@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Node_endif `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_endif@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Node_endif@std@@6B@
rdata$r	SEGMENT
??_R4_Node_endif@std@@6B@ DD 00H			; std::_Node_endif::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_endif@std@@@8
	DD	FLAT:??_R3_Node_endif@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Node_back@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_back@std@@8 DD FLAT:??_R0?AV_Node_back@std@@@8 ; std::_Node_back::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_back@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_back@std@@8
rdata$r	SEGMENT
??_R2_Node_back@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_back@std@@8 ; std::_Node_back::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_back@std@@8
rdata$r	SEGMENT
??_R3_Node_back@std@@8 DD 00H				; std::_Node_back::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_back@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_back@std@@@8
data$rs	SEGMENT
??_R0?AV_Node_back@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Node_back `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_back@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Node_back@std@@6B@
rdata$r	SEGMENT
??_R4_Node_back@std@@6B@ DD 00H				; std::_Node_back::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_back@std@@@8
	DD	FLAT:??_R3_Node_back@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Node_capture@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_capture@std@@8 DD FLAT:??_R0?AV_Node_capture@std@@@8 ; std::_Node_capture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_capture@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_capture@std@@8
rdata$r	SEGMENT
??_R2_Node_capture@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_capture@std@@8 ; std::_Node_capture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_capture@std@@8
rdata$r	SEGMENT
??_R3_Node_capture@std@@8 DD 00H			; std::_Node_capture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_capture@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_capture@std@@@8
data$rs	SEGMENT
??_R0?AV_Node_capture@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Node_capture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_capture@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Node_capture@std@@6B@
rdata$r	SEGMENT
??_R4_Node_capture@std@@6B@ DD 00H			; std::_Node_capture::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_capture@std@@@8
	DD	FLAT:??_R3_Node_capture@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Node_assert@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_assert@std@@8 DD FLAT:??_R0?AV_Node_assert@std@@@8 ; std::_Node_assert::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_assert@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_assert@std@@8
rdata$r	SEGMENT
??_R2_Node_assert@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_assert@std@@8 ; std::_Node_assert::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_assert@std@@8
rdata$r	SEGMENT
??_R3_Node_assert@std@@8 DD 00H				; std::_Node_assert::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_assert@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_assert@std@@@8
data$rs	SEGMENT
??_R0?AV_Node_assert@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Node_assert `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_assert@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Node_assert@std@@6B@
rdata$r	SEGMENT
??_R4_Node_assert@std@@6B@ DD 00H			; std::_Node_assert::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_assert@std@@@8
	DD	FLAT:??_R3_Node_assert@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Node_end_group@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_end_group@std@@8 DD FLAT:??_R0?AV_Node_end_group@std@@@8 ; std::_Node_end_group::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_end_group@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_end_group@std@@8
rdata$r	SEGMENT
??_R2_Node_end_group@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_end_group@std@@8 ; std::_Node_end_group::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Node_end_group@std@@8
rdata$r	SEGMENT
??_R3_Node_end_group@std@@8 DD 00H			; std::_Node_end_group::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Node_end_group@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_end_group@std@@@8
data$rs	SEGMENT
??_R0?AV_Node_end_group@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Node_end_group `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_end_group@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Node_end_group@std@@6B@
rdata$r	SEGMENT
??_R4_Node_end_group@std@@6B@ DD 00H			; std::_Node_end_group::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_end_group@std@@@8
	DD	FLAT:??_R3_Node_end_group@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Root_node@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Root_node@std@@8 DD FLAT:??_R0?AV_Root_node@std@@@8 ; std::_Root_node::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Root_node@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Root_node@std@@8
rdata$r	SEGMENT
??_R2_Root_node@std@@8 DD FLAT:??_R1A@?0A@EA@_Root_node@std@@8 ; std::_Root_node::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Root_node@std@@8
rdata$r	SEGMENT
??_R3_Root_node@std@@8 DD 00H				; std::_Root_node::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Root_node@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Root_node@std@@@8
data$rs	SEGMENT
??_R0?AV_Root_node@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Root_node `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Root_node@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Root_node@std@@6B@
rdata$r	SEGMENT
??_R4_Root_node@std@@6B@ DD 00H				; std::_Root_node::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Root_node@std@@@8
	DD	FLAT:??_R3_Root_node@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Node_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Node_base@std@@8 DD FLAT:??_R0?AV_Node_base@std@@@8 ; std::_Node_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Node_base@std@@8
rdata$r	SEGMENT
??_R2_Node_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Node_base@std@@8 ; std::_Node_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Node_base@std@@8
rdata$r	SEGMENT
??_R3_Node_base@std@@8 DD 00H				; std::_Node_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Node_base@std@@@8
data$rs	SEGMENT
??_R0?AV_Node_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Node_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Node_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Node_base@std@@6B@
rdata$r	SEGMENT
??_R4_Node_base@std@@6B@ DD 00H				; std::_Node_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Node_base@std@@@8
	DD	FLAT:??_R3_Node_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$collate@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$collate@D@std@@8 DD FLAT:??_R0?AV?$collate@D@std@@@8 ; std::collate<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$collate@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$collate@D@std@@8
rdata$r	SEGMENT
??_R2?$collate@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$collate@D@std@@8 ; std::collate<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$collate@D@std@@8
rdata$r	SEGMENT
??_R3?$collate@D@std@@8 DD 00H				; std::collate<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$collate@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$collate@D@std@@@8
data$rs	SEGMENT
??_R0?AV?$collate@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::collate<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$collate@D@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$collate@D@std@@6B@
rdata$r	SEGMENT
??_R4?$collate@D@std@@6B@ DD 00H			; std::collate<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$collate@D@std@@@8
	DD	FLAT:??_R3?$collate@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
data$rs	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$rs	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD FLAT:??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$rs	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$rs	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$rs	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2CDibBar@@8
rdata$r	SEGMENT
??_R2CDibBar@@8 DD FLAT:??_R1A@?0A@EA@CDibBar@@8	; CDibBar::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDibBar@@8
rdata$r	SEGMENT
??_R3CDibBar@@8 DD 00H					; CDibBar::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDibBar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDibBar@@@8
data$rs	SEGMENT
??_R0?AVCDibBar@@@8 DD FLAT:??_7type_info@@6B@		; CDibBar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDibBar@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CDibBar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDibBar@@8 DD FLAT:??_R0?AVCDibBar@@@8	; CDibBar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDibBar@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CTextBar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTextBar@@8 DD FLAT:??_R0?AVCTextBar@@@8	; CTextBar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTextBar@@8
rdata$r	ENDS
;	COMDAT ??_R2CTextBar@@8
rdata$r	SEGMENT
??_R2CTextBar@@8 DD FLAT:??_R1A@?0A@EA@CTextBar@@8	; CTextBar::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDibBar@@8
rdata$r	ENDS
;	COMDAT ??_R3CTextBar@@8
rdata$r	SEGMENT
??_R3CTextBar@@8 DD 00H					; CTextBar::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CTextBar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTextBar@@@8
data$rs	SEGMENT
??_R0?AVCTextBar@@@8 DD FLAT:??_7type_info@@6B@		; CTextBar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTextBar@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CTextBar@@6B@
rdata$r	SEGMENT
??_R4CTextBar@@6B@ DD 00H				; CTextBar::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTextBar@@@8
	DD	FLAT:??_R3CTextBar@@8
rdata$r	ENDS
;	COMDAT ??_C@_1O@OAFMJDHN@?$AAx?$AAd?$AAi?$AAg?$AAi?$AAt@
CONST	SEGMENT
??_C@_1O@OAFMJDHN@?$AAx?$AAd?$AAi?$AAg?$AAi?$AAt@ DB 'x', 00H, 'd', 00H, 'i'
	DB	00H, 'g', 00H, 'i', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAPHGFFK@xdigit@
CONST	SEGMENT
??_C@_06BAPHGFFK@xdigit@ DB 'xdigit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13CIFDLIMG@?$AAw@
CONST	SEGMENT
??_C@_13CIFDLIMG@?$AAw@ DB 'w', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PLNFCNIC@?$AAu?$AAp?$AAp?$AAe?$AAr@
CONST	SEGMENT
??_C@_1M@PLNFCNIC@?$AAu?$AAp?$AAp?$AAe?$AAr@ DB 'u', 00H, 'p', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NECKJAMC@upper@
CONST	SEGMENT
??_C@_05NECKJAMC@upper@ DB 'upper', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_13KHDBCPJB@?$AAs@
CONST	SEGMENT
??_C@_13KHDBCPJB@?$AAs@ DB 's', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s@
CONST	SEGMENT
??_C@_01LKDEMHDF@s@ DB 's', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@LPGODFOM@?$AAs?$AAp?$AAa?$AAc?$AAe@
CONST	SEGMENT
??_C@_1M@LPGODFOM@?$AAs?$AAp?$AAa?$AAc?$AAe@ DB 's', 00H, 'p', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OLNILLAB@space@
CONST	SEGMENT
??_C@_05OLNILLAB@space@ DB 'space', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@BPFMAOAO@?$AAp?$AAu?$AAn?$AAc?$AAt@
CONST	SEGMENT
??_C@_1M@BPFMAOAO@?$AAp?$AAu?$AAn?$AAc?$AAt@ DB 'p', 00H, 'u', 00H, 'n', 00H
	DB	'c', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KOBGHFJJ@punct@
CONST	SEGMENT
??_C@_05KOBGHFJJ@punct@ DB 'punct', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@ELNLAPLA@?$AAp?$AAr?$AAi?$AAn?$AAt@
CONST	SEGMENT
??_C@_1M@ELNLAPLA@?$AAp?$AAr?$AAi?$AAn?$AAt@ DB 'p', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print@
CONST	SEGMENT
??_C@_05IJDJACGD@print@ DB 'print', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@LGAECJJD@?$AAl?$AAo?$AAw?$AAe?$AAr@
CONST	SEGMENT
??_C@_1M@LGAECJJD@?$AAl?$AAo?$AAw?$AAe?$AAr@ DB 'l', 00H, 'o', 00H, 'w', 00H
	DB	'e', 00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPJEPLHL@lower@
CONST	SEGMENT
??_C@_05IPJEPLHL@lower@ DB 'lower', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@MDKNJLLK@?$AAg?$AAr?$AAa?$AAp?$AAh@
CONST	SEGMENT
??_C@_1M@MDKNJLLK@?$AAg?$AAr?$AAa?$AAp?$AAh@ DB 'g', 00H, 'r', 00H, 'a', 00H
	DB	'p', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KCJBMLII@graph@
CONST	SEGMENT
??_C@_05KCJBMLII@graph@ DB 'graph', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@JDAEIBKG@?$AAd?$AAi?$AAg?$AAi?$AAt@
CONST	SEGMENT
??_C@_1M@JDAEIBKG@?$AAd?$AAi?$AAg?$AAi?$AAt@ DB 'd', 00H, 'i', 00H, 'g', 00H
	DB	'i', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ODNOIFML@digit@
CONST	SEGMENT
??_C@_05ODNOIFML@digit@ DB 'digit', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_13GKPPEALH@?$AAd@
CONST	SEGMENT
??_C@_13GKPPEALH@?$AAd@ DB 'd', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LPLHEDKD@d@
CONST	SEGMENT
??_C@_01LPLHEDKD@d@ DB 'd', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@LMIMILA@?$AAc?$AAn?$AAt?$AAr?$AAl@
CONST	SEGMENT
??_C@_1M@LMIMILA@?$AAc?$AAn?$AAt?$AAr?$AAl@ DB 'c', 00H, 'n', 00H, 't', 00H
	DB	'r', 00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JMDPEFNK@cntrl@
CONST	SEGMENT
??_C@_05JMDPEFNK@cntrl@ DB 'cntrl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@EJAAJBPE@?$AAb?$AAl?$AAa?$AAn?$AAk@
CONST	SEGMENT
??_C@_1M@EJAAJBPE@?$AAb?$AAl?$AAa?$AAn?$AAk@ DB 'b', 00H, 'l', 00H, 'a', 00H
	DB	'n', 00H, 'k', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BABJKOGB@blank@
CONST	SEGMENT
??_C@_05BABJKOGB@blank@ DB 'blank', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@DHGLHBMI@?$AAa?$AAl?$AAp?$AAh?$AAa@
CONST	SEGMENT
??_C@_1M@DHGLHBMI@?$AAa?$AAl?$AAp?$AAh?$AAa@ DB 'a', 00H, 'l', 00H, 'p', 00H
	DB	'h', 00H, 'a', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IAEKHIAN@alpha@
CONST	SEGMENT
??_C@_05IAEKHIAN@alpha@ DB 'alpha', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@KLMEPMCM@?$AAa?$AAl?$AAn?$AAu?$AAm@
CONST	SEGMENT
??_C@_1M@KLMEPMCM@?$AAa?$AAl?$AAn?$AAu?$AAm@ DB 'a', 00H, 'l', 00H, 'n', 00H
	DB	'u', 00H, 'm', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IIMHCHIO@alnum@
CONST	SEGMENT
??_C@_05IIMHCHIO@alnum@ DB 'alnum', 00H			; `string'
CONST	ENDS
;	COMDAT ?_Names@?1???$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z@4QBU_Cl_names@2@B
CONST	SEGMENT
?_Names@?1???$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z@4QBU_Cl_names@2@B DD FLAT:??_C@_05IIMHCHIO@alnum@ ; `std::_Regex_traits<char>::lookup_classname<char const *>'::`2'::_Names
	DD	FLAT:??_C@_1M@KLMEPMCM@?$AAa?$AAl?$AAn?$AAu?$AAm@
	DD	05H
	DW	0107H
	ORG $+2
	DD	FLAT:??_C@_05IAEKHIAN@alpha@
	DD	FLAT:??_C@_1M@DHGLHBMI@?$AAa?$AAl?$AAp?$AAh?$AAa@
	DD	05H
	DW	0103H
	ORG $+2
	DD	FLAT:??_C@_05BABJKOGB@blank@
	DD	FLAT:??_C@_1M@EJAAJBPE@?$AAb?$AAl?$AAa?$AAn?$AAk@
	DD	05H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_05JMDPEFNK@cntrl@
	DD	FLAT:??_C@_1M@LMIMILA@?$AAc?$AAn?$AAt?$AAr?$AAl@
	DD	05H
	DW	020H
	ORG $+2
	DD	FLAT:??_C@_01LPLHEDKD@d@
	DD	FLAT:??_C@_13GKPPEALH@?$AAd@
	DD	01H
	DW	04H
	ORG $+2
	DD	FLAT:??_C@_05ODNOIFML@digit@
	DD	FLAT:??_C@_1M@JDAEIBKG@?$AAd?$AAi?$AAg?$AAi?$AAt@
	DD	05H
	DW	04H
	ORG $+2
	DD	FLAT:??_C@_05KCJBMLII@graph@
	DD	FLAT:??_C@_1M@MDKNJLLK@?$AAg?$AAr?$AAa?$AAp?$AAh@
	DD	05H
	DW	0117H
	ORG $+2
	DD	FLAT:??_C@_05IPJEPLHL@lower@
	DD	FLAT:??_C@_1M@LGAECJJD@?$AAl?$AAo?$AAw?$AAe?$AAr@
	DD	05H
	DW	02H
	ORG $+2
	DD	FLAT:??_C@_05IJDJACGD@print@
	DD	FLAT:??_C@_1M@ELNLAPLA@?$AAp?$AAr?$AAi?$AAn?$AAt@
	DD	05H
	DW	01d7H
	ORG $+2
	DD	FLAT:??_C@_05KOBGHFJJ@punct@
	DD	FLAT:??_C@_1M@BPFMAOAO@?$AAp?$AAu?$AAn?$AAc?$AAt@
	DD	05H
	DW	010H
	ORG $+2
	DD	FLAT:??_C@_05OLNILLAB@space@
	DD	FLAT:??_C@_1M@LPGODFOM@?$AAs?$AAp?$AAa?$AAc?$AAe@
	DD	05H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_13KHDBCPJB@?$AAs@
	DD	01H
	DW	048H
	ORG $+2
	DD	FLAT:??_C@_05NECKJAMC@upper@
	DD	FLAT:??_C@_1M@PLNFCNIC@?$AAu?$AAp?$AAp?$AAe?$AAr@
	DD	05H
	DW	01H
	ORG $+2
	DD	FLAT:??_C@_01NOFIACDB@w@
	DD	FLAT:??_C@_13CIFDLIMG@?$AAw@
	DD	01H
	DW	0ffffH
	ORG $+2
	DD	FLAT:??_C@_06BAPHGFFK@xdigit@
	DD	FLAT:??_C@_1O@OAFMJDHN@?$AAx?$AAd?$AAi?$AAg?$AAi?$AAt@
	DD	06H
	DW	080H
	ORG $+2
	DD	00H
	DD	00H
	DD	00H
	DW	00H
	ORG $+2
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EOMJEIFA@vector?$DMbool?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BG@EOMJEIFA@vector?$DMbool?$DO?5too?5long@ DB 'vector<bool> too lo'
	DB	'ng', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7?$_Node_class@DV?$regex_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$_Node_class@DV?$regex_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$_Node_class@DV?$regex_traits@D@std@@@std@@6B@ ; std::_Node_class<char,std::regex_traits<char> >::`vftable'
	DD	FLAT:??_E?$_Node_class@DV?$regex_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$_Node_str@D@std@@6B@
CONST	SEGMENT
??_7?$_Node_str@D@std@@6B@ DD FLAT:??_R4?$_Node_str@D@std@@6B@ ; std::_Node_str<char>::`vftable'
	DD	FLAT:??_E?$_Node_str@D@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?_Meta_map@?1??_Trans@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ@4QBDB
CONST	SEGMENT
?_Meta_map@?1??_Trans@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ@4QBDB DB 028H ; `std::_Parser<char const *,char,std::regex_traits<char> >::_Trans'::`2'::_Meta_map
	DB	029H
	DB	024H
	DB	05eH
	DB	02eH
	DB	02aH
	DB	02bH
	DB	03fH
	DB	05bH
	DB	05dH
	DB	07cH
	DB	05cH
	DB	02dH
	DB	07bH
	DB	07dH
	DB	02cH
	DB	03aH
	DB	03dH
	DB	021H
	DB	0aH
	DB	0dH
	DB	08H
	DB	00H
CONST	ENDS
;	COMDAT ??_7?$collate@D@std@@6B@
CONST	SEGMENT
??_7?$collate@D@std@@6B@ DD FLAT:??_R4?$collate@D@std@@6B@ ; std::collate<char>::`vftable'
	DD	FLAT:??_E?$collate@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_compare@?$collate@D@std@@MBEHPBD000@Z
	DD	FLAT:?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
	DD	FLAT:?do_hash@?$collate@D@std@@MBEJPBD0@Z
CONST	ENDS
;	COMDAT ??_C@_0BM@CIBGAEGH@?2?$HMc?$FLa?9zA?9Z0?99?$FN?$CL?$HM?2?$HM?$FLr?$HMR?$HMH?$HMh?$FN@
CONST	SEGMENT
??_C@_0BM@CIBGAEGH@?2?$HMc?$FLa?9zA?9Z0?99?$FN?$CL?$HM?2?$HM?$FLr?$HMR?$HMH?$HMh?$FN@ DB '\'
	DB	'|c[a-zA-Z0-9]+|\|[r|R|H|h]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Node_rep@std@@6B@
CONST	SEGMENT
??_7_Node_rep@std@@6B@ DD FLAT:??_R4_Node_rep@std@@6B@	; std::_Node_rep::`vftable'
	DD	FLAT:??_E_Node_rep@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7_Node_end_rep@std@@6B@
CONST	SEGMENT
??_7_Node_end_rep@std@@6B@ DD FLAT:??_R4_Node_end_rep@std@@6B@ ; std::_Node_end_rep::`vftable'
	DD	FLAT:??_E_Node_end_rep@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7_Node_if@std@@6B@
CONST	SEGMENT
??_7_Node_if@std@@6B@ DD FLAT:??_R4_Node_if@std@@6B@	; std::_Node_if::`vftable'
	DD	FLAT:??_E_Node_if@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7_Node_endif@std@@6B@
CONST	SEGMENT
??_7_Node_endif@std@@6B@ DD FLAT:??_R4_Node_endif@std@@6B@ ; std::_Node_endif::`vftable'
	DD	FLAT:??_E_Node_endif@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7_Node_back@std@@6B@
CONST	SEGMENT
??_7_Node_back@std@@6B@ DD FLAT:??_R4_Node_back@std@@6B@ ; std::_Node_back::`vftable'
	DD	FLAT:??_E_Node_back@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7_Node_capture@std@@6B@
CONST	SEGMENT
??_7_Node_capture@std@@6B@ DD FLAT:??_R4_Node_capture@std@@6B@ ; std::_Node_capture::`vftable'
	DD	FLAT:??_E_Node_capture@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7_Node_assert@std@@6B@
CONST	SEGMENT
??_7_Node_assert@std@@6B@ DD FLAT:??_R4_Node_assert@std@@6B@ ; std::_Node_assert::`vftable'
	DD	FLAT:??_E_Node_assert@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7_Node_end_group@std@@6B@
CONST	SEGMENT
??_7_Node_end_group@std@@6B@ DD FLAT:??_R4_Node_end_group@std@@6B@ ; std::_Node_end_group::`vftable'
	DD	FLAT:??_E_Node_end_group@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7_Root_node@std@@6B@
CONST	SEGMENT
??_7_Root_node@std@@6B@ DD FLAT:??_R4_Root_node@std@@6B@ ; std::_Root_node::`vftable'
	DD	FLAT:??_E_Root_node@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7_Node_base@std@@6B@
CONST	SEGMENT
??_7_Node_base@std@@6B@ DD FLAT:??_R4_Node_base@std@@6B@ ; std::_Node_base::`vftable'
	DD	FLAT:??_E_Node_base@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?_Is_word_table@?1??_Is_word@std@@YA_NE@Z@4QB_NB
CONST	SEGMENT
?_Is_word_table@?1??_Is_word@std@@YA_NE@Z@4QB_NB DB 00H	; `std::_Is_word'::`2'::_Is_word_table
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7CTextBar@@6B@
CONST	SEGMENT
??_7CTextBar@@6B@ DD FLAT:??_R4CTextBar@@6B@		; CTextBar::`vftable'
	DD	FLAT:??_ECTextBar@@UAEPAXI@Z
	DD	FLAT:?OnCreate@CTextBar@@MAEXXZ
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z$1
__ehfuncinfo$??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z$1
__ehfuncinfo$??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$1
__ehfuncinfo$??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z$5
__ehfuncinfo$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z$0
__ehfuncinfo$?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z$0
__ehfuncinfo$?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z$1
__ehfuncinfo$?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z$1
__ehfuncinfo$?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE@PBD0ABV?$regex_traits@D@1@PAV_Root_node@1@IW4syntax_option_type@regex_constants@1@W4match_flag_type@51@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE@PBD0ABV?$regex_traits@D@1@PAV_Root_node@1@IW4syntax_option_type@regex_constants@1@W4match_flag_type@51@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE@PBD0ABV?$regex_traits@D@1@PAV_Root_node@1@IW4syntax_option_type@regex_constants@1@W4match_flag_type@51@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE@PBD0ABV?$regex_traits@D@1@PAV_Root_node@1@IW4syntax_option_type@regex_constants@1@W4match_flag_type@51@@Z$2
__ehfuncinfo$??0?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE@PBD0ABV?$regex_traits@D@1@PAV_Root_node@1@IW4syntax_option_type@regex_constants@1@W4match_flag_type@51@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE@PBD0ABV?$regex_traits@D@1@PAV_Root_node@1@IW4syntax_option_type@regex_constants@1@W4match_flag_type@51@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z$0
__ehfuncinfo$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Regex_replace1@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PBDV?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@PBD1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Regex_replace1@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PBDV?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@PBD1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z$0
__ehfuncinfo$??$_Regex_replace1@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PBDV?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@PBD1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Regex_replace1@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PBDV?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@PBD1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z$0
__ehfuncinfo$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@_N@Z$0
__ehfuncinfo$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z$0
__ehfuncinfo$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Compile@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Compile@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ$0
__ehfuncinfo$?_Compile@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Compile@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@PBD1W4syntax_option_type@regex_constants@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@PBD1W4syntax_option_type@regex_constants@1@@Z$0
__ehfuncinfo$??0?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@PBD1W4syntax_option_type@regex_constants@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@PBD1W4syntax_option_type@regex_constants@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Reset@PBD@?$basic_regex@DV?$regex_traits@D@std@@@std@@AAEXPBD0W4syntax_option_type@regex_constants@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Reset@PBD@?$basic_regex@DV?$regex_traits@D@std@@@std@@AAEXPBD0W4syntax_option_type@regex_constants@1@@Z$0
__ehfuncinfo$??$_Reset@PBD@?$basic_regex@DV?$regex_traits@D@std@@@std@@AAEXPBD0W4syntax_option_type@regex_constants@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Reset@PBD@?$basic_regex@DV?$regex_traits@D@std@@@std@@AAEXPBD0W4syntax_option_type@regex_constants@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z$2
__ehfuncinfo$??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_regex@DV?$regex_traits@D@std@@@std@@QAE@PBDW4syntax_option_type@regex_constants@1@@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_regex@DV?$regex_traits@D@std@@@std@@QAE@PBDW4syntax_option_type@regex_constants@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_regex@DV?$regex_traits@D@std@@@std@@QAE@PBDW4syntax_option_type@regex_constants@1@@Z$0
	DD	02H
	DD	FLAT:__unwindfunclet$??0?$basic_regex@DV?$regex_traits@D@std@@@std@@QAE@PBDW4syntax_option_type@regex_constants@1@@Z$4
__ehfuncinfo$??0?$basic_regex@DV?$regex_traits@D@std@@@std@@QAE@PBDW4syntax_option_type@regex_constants@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0?$basic_regex@DV?$regex_traits@D@std@@@std@@QAE@PBDW4syntax_option_type@regex_constants@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@V?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$regex_traits@D@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$regex_traits@D@std@@QAE@XZ$1
__ehfuncinfo$??0?$regex_traits@D@std@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$regex_traits@D@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Regex_traits@D@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Regex_traits@D@std@@QAE@XZ$0
__ehfuncinfo$??0?$_Regex_traits@D@std@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$_Regex_traits@D@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?TextOutA@CTextBar@@QAEXHHPBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?TextOutA@CTextBar@@QAEXHHPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?TextOutA@CTextBar@@QAEXHHPBD@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?TextOutA@CTextBar@@QAEXHHPBD@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?TextOutA@CTextBar@@QAEXHHPBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?TextOutA@CTextBar@@QAEXHHPBD@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?TextOutA@CTextBar@@QAEXHHPBD@Z$0
	DD	04H
	DD	FLAT:__unwindfunclet$?TextOutA@CTextBar@@QAEXHHPBD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?TextOutA@CTextBar@@QAEXHHPBD@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CTextBar@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAD@std@@YAPADQBDQADII@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAD@std@@YAPADQBDQADII@Z PROC	; std::_Copy_memmove_tail<char *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAD@std@@YAPADQBDQADII@Z ENDP	; std::_Copy_memmove_tail<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PADPAD@std@@YAPADPAD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PADPAD@std@@YAPADPAD00@Z PROC		; std::_Copy_memmove<char *,char *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  0000b	50		 push	 eax
  0000c	50		 push	 eax
  0000d	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAD@std@@YAPADQBDQADII@Z ; std::_Copy_memmove_tail<char *>
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Copy_memmove@PADPAD@std@@YAPADPAD00@Z ENDP		; std::_Copy_memmove<char *,char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$_Insert@PBD@?$_Buf@D@std@@QAEXPBD0@Z
_TEXT	SEGMENT
__Len$1$ = -4						; size = 4
__First$ = 8						; size = 4
$T1 = 11						; size = 1
__Last$ = 12						; size = 4
??$_Insert@PBD@?$_Buf@D@std@@QAEXPBD0@Z PROC		; std::_Buf<char>::_Insert<char const *>, COMDAT
; _this$ = ecx

; 1273 :     void _Insert(_FwdIt _First, _FwdIt _Last) { // append multiple characters

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1274 :         while (_First != _Last) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  0000e	74 41		 je	 SHORT $LN16@Insert
  00010	57		 push	 edi
$LL2@Insert:

; 1275 :             _Insert(*_First++);

  00011	8a 03		 mov	 al, BYTE PTR [ebx]
  00013	43		 inc	 ebx
  00014	88 45 0b	 mov	 BYTE PTR $T1[ebp], al

; 1261 :         if (_Sz <= _Nchrs) {

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	39 06		 cmp	 DWORD PTR [esi], eax
  0001c	77 1e		 ja	 SHORT $LN20@Insert

; 1262 :             _Expand(_Nchrs + _Buf_incr);

  0001e	83 c0 10	 add	 eax, 16			; 00000010H

; 1281 :         _Elem* _Tmp = static_cast<_Elem*>(_CSTD realloc(_Chrs, _Get_size_of_n<sizeof(_Elem)>(_Len)));

  00021	50		 push	 eax
  00022	ff 76 08	 push	 DWORD PTR [esi+8]

; 1262 :             _Expand(_Nchrs + _Buf_incr);

  00025	89 45 fc	 mov	 DWORD PTR __Len$1$[ebp], eax

; 1281 :         _Elem* _Tmp = static_cast<_Elem*>(_CSTD realloc(_Chrs, _Get_size_of_n<sizeof(_Elem)>(_Len)));

  00028	e8 00 00 00 00	 call	 _realloc
  0002d	83 c4 08	 add	 esp, 8

; 1282 :         if (!_Tmp) {

  00030	85 c0		 test	 eax, eax
  00032	74 25		 je	 SHORT $LN14@Insert

; 1284 :         }
; 1285 : 
; 1286 :         _Chrs = _Tmp;

  00034	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1287 :         _Sz   = _Len;

  00037	8b 45 fc	 mov	 eax, DWORD PTR __Len$1$[ebp]
  0003a	89 06		 mov	 DWORD PTR [esi], eax
$LN20@Insert:

; 1265 :         _Chrs[_Nchrs++] = _Ch;

  0003c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00042	8a 55 0b	 mov	 dl, BYTE PTR $T1[ebp]
  00045	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00048	ff 46 04	 inc	 DWORD PTR [esi+4]

; 1274 :         while (_First != _Last) {

  0004b	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  0004e	75 c1		 jne	 SHORT $LL2@Insert
  00050	5f		 pop	 edi
$LN16@Insert:
  00051	5e		 pop	 esi

; 1276 :         }
; 1277 :     }

  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
$LN14@Insert:

; 1283 :             _Xbad_alloc();

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN25@Insert:
  0005e	cc		 int	 3
??$_Insert@PBD@?$_Buf@D@std@@QAEXPBD0@Z ENDP		; std::_Buf<char>::_Insert<char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PBDPAD@std@@YAPADPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PBDPAD@std@@YAPADPBD0PAD@Z PROC	; std::_Copy_memmove<char const *,char *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  0000b	50		 push	 eax
  0000c	50		 push	 eax
  0000d	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAD@std@@YAPADQBDQADII@Z ; std::_Copy_memmove_tail<char *>
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Copy_memmove@PBDPAD@std@@YAPADPBD0PAD@Z ENDP	; std::_Copy_memmove<char const *,char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAV?$sub_match@PBD@std@@@std@@YAPAV?$sub_match@PBD@0@QBDQAV10@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAV?$sub_match@PBD@std@@@std@@YAPAV?$sub_match@PBD@0@QBDQAV10@II@Z PROC ; std::_Copy_memmove_tail<std::sub_match<char const *> *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAV?$sub_match@PBD@std@@@std@@YAPAV?$sub_match@PBD@0@QBDQAV10@II@Z ENDP ; std::_Copy_memmove_tail<std::sub_match<char const *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -92				; size = 4
__Count$1$ = -88					; size = 4
__First$GSCopy$1$ = -84					; size = 4
$T2 = -80						; size = 4
__Temp$3 = -76						; size = 12
__Bytes$1$ = -64					; size = 4
$T4 = -60						; size = 4
$T5 = -56						; size = 4
__Temp$2$ = -52						; size = 4
_this$GSCopy$1$ = -48					; size = 4
__ULast$1$ = -44					; size = 4
$T6 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z PROC ; std::_Regex_traits<char>::transform_primary<char *>, COMDAT
; _this$ = ecx

; 311  :     string_type transform_primary(_FwdIt _First, _FwdIt _Last) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d d0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00036	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	89 75 a4	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  0003c	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00043	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00046	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0004d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 836  :         _My_data._Mysize = 0;

  00054	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0005b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 311  :     string_type transform_primary(_FwdIt _First, _FwdIt _Last) const {

  00062	89 4d ac	 mov	 DWORD PTR __First$GSCopy$1$[ebp], ecx
  00065	89 45 d4	 mov	 DWORD PTR __ULast$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 06 00	 mov	 BYTE PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 321  :         return _Res;

  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00072	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00079	3b c8		 cmp	 ecx, eax
  0007b	0f 84 56 01 00
	00		 je	 $LN158@transform_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00081	33 c0		 xor	 eax, eax
  00083	33 d2		 xor	 edx, edx
  00085	89 45 c0	 mov	 DWORD PTR __Bytes$1$[ebp], eax
  00088	33 ff		 xor	 edi, edi
  0008a	89 45 bc	 mov	 DWORD PTR __Temp$3[ebp+8], eax

; 681  :         auto _ULast  = _STD _Get_unwrapped(_Last);

  0008d	8b 45 d4	 mov	 eax, DWORD PTR __ULast$1$[ebp]
  00090	2b c1		 sub	 eax, ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00092	89 7d b4	 mov	 DWORD PTR __Temp$3[ebp], edi
  00095	89 55 cc	 mov	 DWORD PTR __Temp$2$[ebp], edx
  00098	89 55 b8	 mov	 DWORD PTR __Temp$3[ebp+4], edx

; 681  :         auto _ULast  = _STD _Get_unwrapped(_Last);

  0009b	89 45 a8	 mov	 DWORD PTR __Count$1$[ebp], eax

; 682  :         if constexpr (_Is_cpp17_fwd_iter_v<_Iter>) {
; 683  :             const auto _Length = static_cast<size_t>(_STD distance(_UFirst, _ULast));
; 684  :             const auto _Count  = _STD _Convert_size<size_type>(_Length);

  0009e	89 55 c8	 mov	 DWORD PTR $T5[ebp], edx
  000a1	89 55 c4	 mov	 DWORD PTR $T4[ebp], edx

; 2096 :         if (_Count != 0) {

  000a4	74 34		 je	 SHORT $LN54@transform_

; 2097 :             _Buy_nonzero(_Count);

  000a6	50		 push	 eax
  000a7	8d 4d b4	 lea	 ecx, DWORD PTR __Temp$3[ebp]
  000aa	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ; std::vector<char,std::allocator<char> >::_Buy_nonzero
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1852 :                 _STD _Copy_memmove(_STD _To_address(_UFirst), _STD _To_address(_ULast), _STD _Unfancy(_Dest));

  000af	8b 7d b4	 mov	 edi, DWORD PTR __Temp$3[ebp]
  000b2	57		 push	 edi
  000b3	ff 75 d4	 push	 DWORD PTR __ULast$1$[ebp]
  000b6	ff 75 ac	 push	 DWORD PTR __First$GSCopy$1$[ebp]
  000b9	e8 00 00 00 00	 call	 ??$_Copy_memmove@PADPAD@std@@YAPADPAD00@Z ; std::_Copy_memmove<char *,char *>

; 1853 :                 _Dest += _ULast - _UFirst;

  000be	8b 55 a8	 mov	 edx, DWORD PTR __Count$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2110 :             _Guard._Target = nullptr;

  000c1	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1852 :                 _STD _Copy_memmove(_STD _To_address(_UFirst), _STD _To_address(_ULast), _STD _Unfancy(_Dest));

  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2110 :             _Guard._Target = nullptr;

  000c6	89 45 c8	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1853 :                 _Dest += _ULast - _UFirst;

  000c9	03 d7		 add	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2110 :             _Guard._Target = nullptr;

  000cb	89 45 c4	 mov	 DWORD PTR $T4[ebp], eax
  000ce	8b 45 bc	 mov	 eax, DWORD PTR __Temp$3[ebp+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1853 :                 _Dest += _ULast - _UFirst;

  000d1	89 55 cc	 mov	 DWORD PTR __Temp$2$[ebp], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000d4	89 55 b8	 mov	 DWORD PTR __Temp$3[ebp+4], edx

; 2110 :             _Guard._Target = nullptr;

  000d7	89 45 c0	 mov	 DWORD PTR __Bytes$1$[ebp], eax
$LN54@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 318  :             _Getctype()->tolower(_Temp.data(), _Temp.data() + _Temp.size());

  000da	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2739 :         return do_tolower(_First, _Last);

  000dd	52		 push	 edx
  000de	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 316  :             vector<_Elem> _Temp(_First, _Last);

  000df	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 318  :             _Getctype()->tolower(_Temp.data(), _Temp.data() + _Temp.size());

  000e6	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2739 :         return do_tolower(_First, _Last);

  000e9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000eb	ff 50 0c	 call	 DWORD PTR [eax+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 319  :             _Res = _Getcoll()->transform(_Temp.data(), _Temp.data() + _Temp.size());

  000ee	8b 45 d0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 40   :         return do_transform(_First, _Last);

  000f1	8b 55 cc	 mov	 edx, DWORD PTR __Temp$2$[ebp]
  000f4	2b 55 c8	 sub	 edx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000f7	03 55 c4	 add	 edx, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 319  :             _Res = _Getcoll()->transform(_Temp.data(), _Temp.data() + _Temp.size());

  000fa	8b 08		 mov	 ecx, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 40   :         return do_transform(_First, _Last);

  000fc	52		 push	 edx
  000fd	57		 push	 edi
  000fe	8d 55 d8	 lea	 edx, DWORD PTR $T6[ebp]
  00101	8b 01		 mov	 eax, DWORD PTR [ecx]
  00103	52		 push	 edx
  00104	ff 50 10	 call	 DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1202 :         if (this == _STD addressof(_Right)) {

  00107	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  0010a	3b f0		 cmp	 esi, eax
  0010c	74 6a		 je	 SHORT $LN182@transform_

; 434  :         return _Myres > _Small_string_capacity;

  0010e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00111	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00114	76 2b		 jbe	 SHORT $LN88@transform_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00116	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00118	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00119	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011f	72 16		 jb	 SHORT $LN99@transform_

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00121	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00124	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00127	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00129	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012f	0f 87 c1 00 00
	00		 ja	 $LN145@transform_

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00135	8b c2		 mov	 eax, edx
$LN99@transform_:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00137	51		 push	 ecx
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0013e	83 c4 08	 add	 esp, 8
$LN88@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00141	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T6[ebp]

; 3054 :         _My_data._Mysize = 0;

  00145	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0014c	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00151	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00158	c6 06 00	 mov	 BYTE PTR [esi], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0015b	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  0015e	c6 45 d8 00	 mov	 BYTE PTR $T6[ebp], 0
  00162	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T6[ebp+16]
  00167	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  0016c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0
  00173	89 45 ec	 mov	 DWORD PTR $T6[ebp+20], eax

; 1202 :         if (this == _STD addressof(_Right)) {

  00176	eb 03		 jmp	 SHORT $LN105@transform_
$LN182@transform_:
  00178	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp+20]
$LN105@transform_:

; 434  :         return _Myres > _Small_string_capacity;

  0017b	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0017e	76 2a		 jbe	 SHORT $LN137@transform_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00180	8b 55 d8	 mov	 edx, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00183	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00186	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00188	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0018e	72 10		 jb	 SHORT $LN148@transform_

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00190	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00193	83 c1 23	 add	 ecx, 35			; 00000023H
  00196	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00198	83 c0 fc	 add	 eax, -4			; fffffffcH
  0019b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0019e	77 56		 ja	 SHORT $LN145@transform_
$LN148@transform_:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001a0	51		 push	 ecx
  001a1	52		 push	 edx
  001a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001a7	83 c4 08	 add	 esp, 8
$LN137@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  001aa	85 ff		 test	 edi, edi
  001ac	74 29		 je	 SHORT $LN158@transform_

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001ae	8b 4d c0	 mov	 ecx, DWORD PTR __Bytes$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b1	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001b3	2b cf		 sub	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001b5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001bb	72 10		 jb	 SHORT $LN177@transform_

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001bd	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
  001c0	83 c1 23	 add	 ecx, 35			; 00000023H
  001c3	2b c7		 sub	 eax, edi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c5	83 c0 fc	 add	 eax, -4			; fffffffcH
  001c8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001cb	77 2e		 ja	 SHORT $LN186@transform_
$LN177@transform_:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001cd	51		 push	 ecx
  001ce	57		 push	 edi
  001cf	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d4	83 c4 08	 add	 esp, 8
$LN158@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 321  :         return _Res;

  001d7	8b c6		 mov	 eax, esi

; 322  :     }

  001d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e3	59		 pop	 ecx
  001e4	5f		 pop	 edi
  001e5	5e		 pop	 esi
  001e6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e9	33 cd		 xor	 ecx, ebp
  001eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	c2 0c 00	 ret	 12			; 0000000cH
$LN145@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001f6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN186@transform_:
  001fb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN184@transform_:
  00200	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z$0:
  00000	8b 45 b0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@transform_
  0000c	83 65 b0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d a4	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@transform_:
  00018	c3		 ret	 0
__unwindfunclet$??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z$1:
  00019	8d 4d b4	 lea	 ecx, DWORD PTR __Temp$3[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z ENDP ; std::_Regex_traits<char>::transform_primary<char *>
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -92				; size = 4
__Count$1$ = -88					; size = 4
__First$GSCopy$1$ = -84					; size = 4
$T2 = -80						; size = 4
__Temp$3 = -76						; size = 12
__Bytes$1$ = -64					; size = 4
$T4 = -60						; size = 4
$T5 = -56						; size = 4
__Temp$2$ = -52						; size = 4
_this$GSCopy$1$ = -48					; size = 4
__ULast$1$ = -44					; size = 4
$T6 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z PROC ; std::_Regex_traits<char>::transform_primary<char const *>, COMDAT
; _this$ = ecx

; 311  :     string_type transform_primary(_FwdIt _First, _FwdIt _Last) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d d0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00036	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00039	89 75 a4	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  0003c	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00043	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00046	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0004d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 836  :         _My_data._Mysize = 0;

  00054	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0005b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 311  :     string_type transform_primary(_FwdIt _First, _FwdIt _Last) const {

  00062	89 4d ac	 mov	 DWORD PTR __First$GSCopy$1$[ebp], ecx
  00065	89 45 d4	 mov	 DWORD PTR __ULast$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 06 00	 mov	 BYTE PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 321  :         return _Res;

  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00072	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00079	3b c8		 cmp	 ecx, eax
  0007b	0f 84 56 01 00
	00		 je	 $LN158@transform_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00081	33 c0		 xor	 eax, eax
  00083	33 d2		 xor	 edx, edx
  00085	89 45 c0	 mov	 DWORD PTR __Bytes$1$[ebp], eax
  00088	33 ff		 xor	 edi, edi
  0008a	89 45 bc	 mov	 DWORD PTR __Temp$3[ebp+8], eax

; 681  :         auto _ULast  = _STD _Get_unwrapped(_Last);

  0008d	8b 45 d4	 mov	 eax, DWORD PTR __ULast$1$[ebp]
  00090	2b c1		 sub	 eax, ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00092	89 7d b4	 mov	 DWORD PTR __Temp$3[ebp], edi
  00095	89 55 cc	 mov	 DWORD PTR __Temp$2$[ebp], edx
  00098	89 55 b8	 mov	 DWORD PTR __Temp$3[ebp+4], edx

; 681  :         auto _ULast  = _STD _Get_unwrapped(_Last);

  0009b	89 45 a8	 mov	 DWORD PTR __Count$1$[ebp], eax

; 682  :         if constexpr (_Is_cpp17_fwd_iter_v<_Iter>) {
; 683  :             const auto _Length = static_cast<size_t>(_STD distance(_UFirst, _ULast));
; 684  :             const auto _Count  = _STD _Convert_size<size_type>(_Length);

  0009e	89 55 c8	 mov	 DWORD PTR $T5[ebp], edx
  000a1	89 55 c4	 mov	 DWORD PTR $T4[ebp], edx

; 2096 :         if (_Count != 0) {

  000a4	74 34		 je	 SHORT $LN54@transform_

; 2097 :             _Buy_nonzero(_Count);

  000a6	50		 push	 eax
  000a7	8d 4d b4	 lea	 ecx, DWORD PTR __Temp$3[ebp]
  000aa	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ; std::vector<char,std::allocator<char> >::_Buy_nonzero
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1852 :                 _STD _Copy_memmove(_STD _To_address(_UFirst), _STD _To_address(_ULast), _STD _Unfancy(_Dest));

  000af	8b 7d b4	 mov	 edi, DWORD PTR __Temp$3[ebp]
  000b2	57		 push	 edi
  000b3	ff 75 d4	 push	 DWORD PTR __ULast$1$[ebp]
  000b6	ff 75 ac	 push	 DWORD PTR __First$GSCopy$1$[ebp]
  000b9	e8 00 00 00 00	 call	 ??$_Copy_memmove@PBDPAD@std@@YAPADPBD0PAD@Z ; std::_Copy_memmove<char const *,char *>

; 1853 :                 _Dest += _ULast - _UFirst;

  000be	8b 55 a8	 mov	 edx, DWORD PTR __Count$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2110 :             _Guard._Target = nullptr;

  000c1	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1852 :                 _STD _Copy_memmove(_STD _To_address(_UFirst), _STD _To_address(_ULast), _STD _Unfancy(_Dest));

  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2110 :             _Guard._Target = nullptr;

  000c6	89 45 c8	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1853 :                 _Dest += _ULast - _UFirst;

  000c9	03 d7		 add	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2110 :             _Guard._Target = nullptr;

  000cb	89 45 c4	 mov	 DWORD PTR $T4[ebp], eax
  000ce	8b 45 bc	 mov	 eax, DWORD PTR __Temp$3[ebp+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1853 :                 _Dest += _ULast - _UFirst;

  000d1	89 55 cc	 mov	 DWORD PTR __Temp$2$[ebp], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000d4	89 55 b8	 mov	 DWORD PTR __Temp$3[ebp+4], edx

; 2110 :             _Guard._Target = nullptr;

  000d7	89 45 c0	 mov	 DWORD PTR __Bytes$1$[ebp], eax
$LN54@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 318  :             _Getctype()->tolower(_Temp.data(), _Temp.data() + _Temp.size());

  000da	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2739 :         return do_tolower(_First, _Last);

  000dd	52		 push	 edx
  000de	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 316  :             vector<_Elem> _Temp(_First, _Last);

  000df	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 318  :             _Getctype()->tolower(_Temp.data(), _Temp.data() + _Temp.size());

  000e6	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2739 :         return do_tolower(_First, _Last);

  000e9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000eb	ff 50 0c	 call	 DWORD PTR [eax+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 319  :             _Res = _Getcoll()->transform(_Temp.data(), _Temp.data() + _Temp.size());

  000ee	8b 45 d0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 40   :         return do_transform(_First, _Last);

  000f1	8b 55 cc	 mov	 edx, DWORD PTR __Temp$2$[ebp]
  000f4	2b 55 c8	 sub	 edx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000f7	03 55 c4	 add	 edx, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 319  :             _Res = _Getcoll()->transform(_Temp.data(), _Temp.data() + _Temp.size());

  000fa	8b 08		 mov	 ecx, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 40   :         return do_transform(_First, _Last);

  000fc	52		 push	 edx
  000fd	57		 push	 edi
  000fe	8d 55 d8	 lea	 edx, DWORD PTR $T6[ebp]
  00101	8b 01		 mov	 eax, DWORD PTR [ecx]
  00103	52		 push	 edx
  00104	ff 50 10	 call	 DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1202 :         if (this == _STD addressof(_Right)) {

  00107	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  0010a	3b f0		 cmp	 esi, eax
  0010c	74 6a		 je	 SHORT $LN182@transform_

; 434  :         return _Myres > _Small_string_capacity;

  0010e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00111	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00114	76 2b		 jbe	 SHORT $LN88@transform_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00116	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00118	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00119	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011f	72 16		 jb	 SHORT $LN99@transform_

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00121	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00124	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00127	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00129	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012f	0f 87 c1 00 00
	00		 ja	 $LN145@transform_

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00135	8b c2		 mov	 eax, edx
$LN99@transform_:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00137	51		 push	 ecx
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0013e	83 c4 08	 add	 esp, 8
$LN88@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00141	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T6[ebp]

; 3054 :         _My_data._Mysize = 0;

  00145	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0014c	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00151	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00158	c6 06 00	 mov	 BYTE PTR [esi], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0015b	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  0015e	c6 45 d8 00	 mov	 BYTE PTR $T6[ebp], 0
  00162	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T6[ebp+16]
  00167	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  0016c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0
  00173	89 45 ec	 mov	 DWORD PTR $T6[ebp+20], eax

; 1202 :         if (this == _STD addressof(_Right)) {

  00176	eb 03		 jmp	 SHORT $LN105@transform_
$LN182@transform_:
  00178	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp+20]
$LN105@transform_:

; 434  :         return _Myres > _Small_string_capacity;

  0017b	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0017e	76 2a		 jbe	 SHORT $LN137@transform_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00180	8b 55 d8	 mov	 edx, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00183	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00186	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00188	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0018e	72 10		 jb	 SHORT $LN148@transform_

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00190	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00193	83 c1 23	 add	 ecx, 35			; 00000023H
  00196	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00198	83 c0 fc	 add	 eax, -4			; fffffffcH
  0019b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0019e	77 56		 ja	 SHORT $LN145@transform_
$LN148@transform_:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001a0	51		 push	 ecx
  001a1	52		 push	 edx
  001a2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001a7	83 c4 08	 add	 esp, 8
$LN137@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  001aa	85 ff		 test	 edi, edi
  001ac	74 29		 je	 SHORT $LN158@transform_

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001ae	8b 4d c0	 mov	 ecx, DWORD PTR __Bytes$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b1	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001b3	2b cf		 sub	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001b5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001bb	72 10		 jb	 SHORT $LN177@transform_

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001bd	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
  001c0	83 c1 23	 add	 ecx, 35			; 00000023H
  001c3	2b c7		 sub	 eax, edi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c5	83 c0 fc	 add	 eax, -4			; fffffffcH
  001c8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001cb	77 2e		 ja	 SHORT $LN186@transform_
$LN177@transform_:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001cd	51		 push	 ecx
  001ce	57		 push	 edi
  001cf	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d4	83 c4 08	 add	 esp, 8
$LN158@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 321  :         return _Res;

  001d7	8b c6		 mov	 eax, esi

; 322  :     }

  001d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e3	59		 pop	 ecx
  001e4	5f		 pop	 edi
  001e5	5e		 pop	 esi
  001e6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e9	33 cd		 xor	 ecx, ebp
  001eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	c2 0c 00	 ret	 12			; 0000000cH
$LN145@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001f6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN186@transform_:
  001fb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN184@transform_:
  00200	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z$0:
  00000	8b 45 b0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@transform_
  0000c	83 65 b0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d a4	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@transform_:
  00018	c3		 ret	 0
__unwindfunclet$??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z$1:
  00019	8d 4d b4	 lea	 ecx, DWORD PTR __Temp$3[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z ENDP ; std::_Regex_traits<char>::transform_primary<char const *>
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@QBDQAU120@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@QBDQAU120@II@Z PROC ; std::_Copy_memmove_tail<std::_Tgt_state_t<char const *>::_Grp_t *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@QBDQAU120@II@Z ENDP ; std::_Copy_memmove_tail<std::_Tgt_state_t<char const *>::_Grp_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAV?$sub_match@PBD@std@@PAV12@@std@@YAPAV?$sub_match@PBD@0@PAV10@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAV?$sub_match@PBD@std@@PAV12@@std@@YAPAV?$sub_match@PBD@0@PAV10@00@Z PROC ; std::_Copy_memmove<std::sub_match<char const *> *,std::sub_match<char const *> *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  0000e	f7 e9		 imul	 ecx
  00010	d1 fa		 sar	 edx, 1
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAV?$sub_match@PBD@std@@@std@@YAPAV?$sub_match@PBD@0@QBDQAV10@II@Z ; std::_Copy_memmove_tail<std::sub_match<char const *> *>
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Copy_memmove@PAV?$sub_match@PBD@std@@PAV12@@std@@YAPAV?$sub_match@PBD@0@PAV10@00@Z ENDP ; std::_Copy_memmove<std::sub_match<char const *> *,std::sub_match<char const *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@00@Z PROC ; std::_Copy_memmove<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 03	 sar	 eax, 3

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@QBDQAU120@II@Z ; std::_Copy_memmove_tail<std::_Tgt_state_t<char const *>::_Grp_t *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@00@Z ENDP ; std::_Copy_memmove<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAU_Loop_vals_t@std@@@std@@YAPAU_Loop_vals_t@0@QBDQAU10@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAU_Loop_vals_t@std@@@std@@YAPAU_Loop_vals_t@0@QBDQAU10@II@Z PROC ; std::_Copy_memmove_tail<std::_Loop_vals_t *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAU_Loop_vals_t@std@@@std@@YAPAU_Loop_vals_t@0@QBDQAU10@II@Z ENDP ; std::_Copy_memmove_tail<std::_Loop_vals_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_n@PAIPAI@std@@YAPAIPAII0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Object_count$ = 12					; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove_n@PAIPAI@std@@YAPAIPAII0@Z PROC	; std::_Copy_memmove_n<unsigned int *,unsigned int *>, COMDAT

; 4790 : _OutCtgIt _Copy_memmove_n(_CtgIt _First, const size_t _Object_count, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4791 :     const auto _First_ptr  = _STD _To_address(_First);
; 4792 :     const auto _First_ch   = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4793 :     const auto _Byte_count = _Object_count * sizeof(*_First_ptr);
; 4794 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Object_count$[ebp]
  00006	50		 push	 eax
  00007	c1 e0 02	 shl	 eax, 2
  0000a	50		 push	 eax
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00011	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAI@std@@YAPAIQBDQAIII@Z ; std::_Copy_memmove_tail<unsigned int *>
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 4795 : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Copy_memmove_n@PAIPAI@std@@YAPAIPAII0@Z ENDP	; std::_Copy_memmove_n<unsigned int *,unsigned int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Object_count$ = 12					; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z PROC ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>, COMDAT

; 4790 : _OutCtgIt _Copy_memmove_n(_CtgIt _First, const size_t _Object_count, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4791 :     const auto _First_ptr  = _STD _To_address(_First);
; 4792 :     const auto _First_ch   = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4793 :     const auto _Byte_count = _Object_count * sizeof(*_First_ptr);
; 4794 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Object_count$[ebp]
  00006	50		 push	 eax
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00011	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@QBDQAU120@II@Z ; std::_Copy_memmove_tail<std::_Tgt_state_t<char const *>::_Grp_t *>
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 4795 : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ENDP ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Fill_zero_memset@PAI@std@@YAXPAII@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Fill_zero_memset@PAI@std@@YAXPAII@Z PROC		; std::_Fill_zero_memset<unsigned int *>, COMDAT

; 5285 : void _Fill_zero_memset(_CtgIt _Dest, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5286 :     _CSTD memset(_STD _To_address(_Dest), 0, _Count * sizeof(_Iter_value_t<_CtgIt>));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	c1 e0 02	 shl	 eax, 2
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 08	 push	 DWORD PTR __Dest$[ebp]
  0000f	e8 00 00 00 00	 call	 _memset
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5287 : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Fill_zero_memset@PAI@std@@YAXPAII@Z ENDP		; std::_Fill_zero_memset<unsigned int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Is_all_bits_zero@I@std@@YA_NABI@Z
_TEXT	SEGMENT
__Zero$1 = -4						; size = 4
__Val$ = 8						; size = 4
??$_Is_all_bits_zero@I@std@@YA_NABI@Z PROC		; std::_Is_all_bits_zero<unsigned int>, COMDAT

; 5290 : _NODISCARD bool _Is_all_bits_zero(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5291 :     // checks if scalar type has all bits set to zero
; 5292 :     _STL_INTERNAL_STATIC_ASSERT(is_scalar_v<_Ty> && !is_member_pointer_v<_Ty>);
; 5293 :     if constexpr (is_same_v<_Ty, nullptr_t>) {
; 5294 :         return true;
; 5295 :     } else {
; 5296 :         constexpr _Ty _Zero{};
; 5297 :         return _CSTD memcmp(&_Val, &_Zero, sizeof(_Ty)) == 0;

  00004	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00007	8d 4d fc	 lea	 ecx, DWORD PTR __Zero$1[ebp]
  0000a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Zero$1[ebp], 0
  00011	8b 00		 mov	 eax, DWORD PTR [eax]
  00013	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00015	0f 94 c0	 sete	 al

; 5298 :     }
; 5299 : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Is_all_bits_zero@I@std@@YA_NABI@Z ENDP		; std::_Is_all_bits_zero<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAI@std@@YAPAIQBDQAIII@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAI@std@@YAPAIQBDQAIII@Z PROC	; std::_Copy_memmove_tail<unsigned int *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAI@std@@YAPAIQBDQAIII@Z ENDP	; std::_Copy_memmove_tail<unsigned int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Copy_vbool@V?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@V12@@std@@YA?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@0@V10@00@Z
_TEXT	SEGMENT
__DestEnd$ = -52					; size = 8
__DestEnd$1$ = -48					; size = 4
tv1137 = -44						; size = 4
__UnalignedLastBits$1$ = -44				; size = 4
__VbLast_ch$1$ = -44					; size = 4
__CarryMask$1$ = -44					; size = 4
__DestEnd$2$ = -40					; size = 4
__FirstSourceMask$1$ = -36				; size = 4
tv1051 = -36						; size = 4
tv1139 = -32						; size = 4
__UnalignedDestBits$1$ = -32				; size = 4
__DestMask$1$ = -32					; size = 4
__CarryVal$1$ = -32					; size = 4
__DestMask$1$ = -28					; size = 4
$T1 = -24						; size = 4
__UnalignedFirstBits$1$ = -20				; size = 4
__CarryShift$1$ = -20					; size = 4
$T2 = -20						; size = 4
__VbLast$1$ = -16					; size = 4
__VbFirst$2$ = -12					; size = 4
__FirstDestMask$1$ = -8					; size = 4
__IsRightShift$1$ = -1					; size = 1
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
__Dest$ = 28						; size = 8
??$_Copy_vbool@V?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@V12@@std@@YA?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@0@V10@00@Z PROC ; std::_Copy_vbool<std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >,std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > > >, COMDAT

; 3780 : _CONSTEXPR20 _OutIt _Copy_vbool(_VbIt _First, _VbIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 2627 :         return this->_Myptr == _Right._Myptr && this->_Myoff == _Right._Myoff;

  00006	8b 4d 14	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	8b 55 18	 mov	 edx, DWORD PTR __Last$[ebp+4]

; 3780 : _CONSTEXPR20 _OutIt _Copy_vbool(_VbIt _First, _VbIt _Last, _OutIt _Dest) {

  0000c	53		 push	 ebx

; 2627 :         return this->_Myptr == _Right._Myptr && this->_Myoff == _Right._Myoff;

  0000d	8b 5d 10	 mov	 ebx, DWORD PTR __First$[ebp+4]

; 3780 : _CONSTEXPR20 _OutIt _Copy_vbool(_VbIt _First, _VbIt _Last, _OutIt _Dest) {

  00010	57		 push	 edi

; 2627 :         return this->_Myptr == _Right._Myptr && this->_Myoff == _Right._Myoff;

  00011	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  00014	89 7d f4	 mov	 DWORD PTR __VbFirst$2$[ebp], edi
  00017	89 4d f0	 mov	 DWORD PTR __VbLast$1$[ebp], ecx
  0001a	89 55 d4	 mov	 DWORD PTR __VbLast_ch$1$[ebp], edx
  0001d	3b f9		 cmp	 edi, ecx
  0001f	75 18		 jne	 SHORT $LN8@Copy_vbool
  00021	3b da		 cmp	 ebx, edx
  00023	75 14		 jne	 SHORT $LN8@Copy_vbool

; 3781 :     // copy [_First, _Last) to [_Dest, ...)
; 3782 :     if (_First == _Last) {
; 3783 :         return _Dest;

  00025	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00028	8b 4d 1c	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0002b	8b 55 20	 mov	 edx, DWORD PTR __Dest$[ebp+4]
  0002e	5f		 pop	 edi
  0002f	89 08		 mov	 DWORD PTR [eax], ecx
  00031	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 3946 : }

  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
$LN8@Copy_vbool:

; 3784 :     }
; 3785 : 
; 3786 :     auto _VbFirst       = _First._Myptr;
; 3787 :     const auto _VbLast  = _Last._Myptr;
; 3788 :     auto _VbDest        = const_cast<_Vbase*>(_Dest._Myptr);

  00039	8b 45 1c	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003c	56		 push	 esi
  0003d	8b f1		 mov	 esi, ecx
  0003f	2b f7		 sub	 esi, edi

; 2767 :         _Vb_iterator _Tmp = *this;

  00041	8b 7d 20	 mov	 edi, DWORD PTR __Dest$[ebp+4]

; 2617 :         return static_cast<difference_type>(_Mybase::_VBITS_DIFF * (this->_Myptr - _Right._Myptr))

  00044	c1 fe 02	 sar	 esi, 2
  00047	c1 e6 05	 shl	 esi, 5

; 3789 :     const auto _DestEnd = _Dest + (_Last - _First);

  0004a	2b f3		 sub	 esi, ebx

; 2767 :         _Vb_iterator _Tmp = *this;

  0004c	89 7d d0	 mov	 DWORD PTR __DestEnd$[ebp+4], edi

; 2617 :         return static_cast<difference_type>(_Mybase::_VBITS_DIFF * (this->_Myptr - _Right._Myptr))

  0004f	03 f2		 add	 esi, edx

; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  00051	79 2a		 jns	 SHORT $LN56@Copy_vbool
  00053	8b ce		 mov	 ecx, esi
  00055	f7 d9		 neg	 ecx
  00057	3b f9		 cmp	 edi, ecx
  00059	73 22		 jae	 SHORT $LN56@Copy_vbool

; 2582 :             this->_Myoff += static_cast<_Size_type>(_Off);

  0005b	8d 14 37	 lea	 edx, DWORD PTR [edi+esi]

; 2583 :             this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;

  0005e	8b f0		 mov	 esi, eax
  00060	8b ca		 mov	 ecx, edx
  00062	f7 d1		 not	 ecx
  00064	c1 e9 05	 shr	 ecx, 5
  00067	8d 0c 8d 04 00
	00 00		 lea	 ecx, DWORD PTR [ecx*4+4]
  0006e	2b f1		 sub	 esi, ecx
  00070	8b ca		 mov	 ecx, edx
  00072	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00075	89 75 d8	 mov	 DWORD PTR __DestEnd$2$[ebp], esi
  00078	89 4d d0	 mov	 DWORD PTR __DestEnd$1$[ebp], ecx

; 2584 :             this->_Myoff %= _VBITS;
; 2585 :         } else { // add non-negative increment

  0007b	eb 16		 jmp	 SHORT $LN57@Copy_vbool
$LN56@Copy_vbool:

; 2586 :             this->_Myoff += static_cast<_Size_type>(_Off);

  0007d	8d 14 37	 lea	 edx, DWORD PTR [edi+esi]
  00080	8b f2		 mov	 esi, edx
  00082	8b ce		 mov	 ecx, esi
  00084	c1 e9 05	 shr	 ecx, 5

; 2587 :             this->_Myptr += this->_Myoff / _VBITS;

  00087	83 e6 1f	 and	 esi, 31			; 0000001fH
  0008a	89 75 d0	 mov	 DWORD PTR __DestEnd$1$[ebp], esi
  0008d	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]
  00090	89 4d d8	 mov	 DWORD PTR __DestEnd$2$[ebp], ecx
$LN57@Copy_vbool:

; 3790 : 
; 3791 :     const auto _FirstSourceMask = static_cast<_Vbase>(-1) << _First._Myoff;

  00093	83 e2 1f	 and	 edx, 31			; 0000001fH
  00096	8b cb		 mov	 ecx, ebx
  00098	89 55 ec	 mov	 DWORD PTR $T2[ebp], edx
  0009b	83 ca ff	 or	 edx, -1
  0009e	8b f2		 mov	 esi, edx
  000a0	d3 e6		 shl	 esi, cl
  000a2	89 75 dc	 mov	 DWORD PTR __FirstSourceMask$1$[ebp], esi

; 3792 :     const auto _FirstDestMask   = _Dest._Myoff == 0 ? 0 : (static_cast<_Vbase>(-1) >> (_VBITS - _Dest._Myoff));

  000a5	8d 72 21	 lea	 esi, DWORD PTR [edx+33]
  000a8	85 ff		 test	 edi, edi
  000aa	75 05		 jne	 SHORT $LN31@Copy_vbool
  000ac	89 7d f8	 mov	 DWORD PTR __FirstDestMask$1$[ebp], edi
  000af	eb 0a		 jmp	 SHORT $LN32@Copy_vbool
$LN31@Copy_vbool:
  000b1	8b ce		 mov	 ecx, esi
  000b3	89 55 f8	 mov	 DWORD PTR __FirstDestMask$1$[ebp], edx
  000b6	2b cf		 sub	 ecx, edi
  000b8	d3 6d f8	 shr	 DWORD PTR __FirstDestMask$1$[ebp], cl
$LN32@Copy_vbool:

; 3793 :     const auto _LastSourceMask  = static_cast<_Vbase>(-1) >> (_VBITS - _Last._Myoff);

  000bb	8b ce		 mov	 ecx, esi
  000bd	8b f2		 mov	 esi, edx
  000bf	2b 4d d4	 sub	 ecx, DWORD PTR __VbLast_ch$1$[ebp]
  000c2	d3 ee		 shr	 esi, cl

; 3794 :     const auto _LastDestMask    = static_cast<_Vbase>(-1) << _DestEnd._Myoff;

  000c4	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  000c7	89 75 e8	 mov	 DWORD PTR $T1[ebp], esi
  000ca	8b f2		 mov	 esi, edx
  000cc	d3 e6		 shl	 esi, cl

; 3795 : 
; 3796 :     const bool _IsSingleBlockSource = _VbFirst == _VbLast;
; 3797 :     const bool _IsSingleBlockDest   = _VbDest == _DestEnd._Myptr - (_DestEnd._Myoff == 0 ? 1 : 0);

  000ce	33 c9		 xor	 ecx, ecx
  000d0	39 4d ec	 cmp	 DWORD PTR $T2[ebp], ecx
  000d3	89 75 e4	 mov	 DWORD PTR __DestMask$1$[ebp], esi
  000d6	be 04 00 00 00	 mov	 esi, 4
  000db	0f 44 ce	 cmove	 ecx, esi
  000de	8b 75 d8	 mov	 esi, DWORD PTR __DestEnd$2$[ebp]
  000e1	89 75 e0	 mov	 DWORD PTR tv1139[ebp], esi
  000e4	29 4d e0	 sub	 DWORD PTR tv1139[ebp], ecx

; 3798 :     const bool _IsRightShift        = _Dest._Myoff < _First._Myoff;

  000e7	3b fb		 cmp	 edi, ebx
  000e9	8b 4d f0	 mov	 ecx, DWORD PTR __VbLast$1$[ebp]

; 3799 :     if (_IsSingleBlockSource) {

  000ec	8b 75 e4	 mov	 esi, DWORD PTR __DestMask$1$[ebp]
  000ef	0f 92 45 ff	 setb	 BYTE PTR __IsRightShift$1$[ebp]
  000f3	39 4d f4	 cmp	 DWORD PTR __VbFirst$2$[ebp], ecx
  000f6	75 72		 jne	 SHORT $LN9@Copy_vbool

; 3800 :         // We already excluded _First == _Last, so here _Last._Myoff > 0 and the shift is safe
; 3801 :         const auto _SourceMask  = _FirstSourceMask & _LastSourceMask;

  000f8	8b 55 e8	 mov	 edx, DWORD PTR $T1[ebp]

; 3802 :         const auto _SourceShift = _IsRightShift ? _First._Myoff - _Dest._Myoff : _Dest._Myoff - _First._Myoff;

  000fb	8b cb		 mov	 ecx, ebx
  000fd	23 55 dc	 and	 edx, DWORD PTR __FirstSourceMask$1$[ebp]
  00100	2b cf		 sub	 ecx, edi
  00102	2b fb		 sub	 edi, ebx
  00104	89 55 e8	 mov	 DWORD PTR $T1[ebp], edx
  00107	80 7d ff 00	 cmp	 BYTE PTR __IsRightShift$1$[ebp], 0

; 3803 :         const auto _SourceVal   = _IsRightShift ? (*_VbFirst & _SourceMask) >> _SourceShift //

  0010b	8b 5d f4	 mov	 ebx, DWORD PTR __VbFirst$2$[ebp]
  0010e	0f 45 f9	 cmovne	 edi, ecx
  00111	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00113	23 ca		 and	 ecx, edx
  00115	89 4d d4	 mov	 DWORD PTR tv1137[ebp], ecx

; 3804 :                                                 : (*_VbFirst & _SourceMask) << _SourceShift;
; 3805 :         if (_IsSingleBlockDest) {

  00118	8b d1		 mov	 edx, ecx
  0011a	8b cf		 mov	 ecx, edi
  0011c	8b 7d d4	 mov	 edi, DWORD PTR tv1137[ebp]
  0011f	d3 e2		 shl	 edx, cl
  00121	d3 ef		 shr	 edi, cl
  00123	80 7d ff 00	 cmp	 BYTE PTR __IsRightShift$1$[ebp], 0
  00127	8b 08		 mov	 ecx, DWORD PTR [eax]
  00129	0f 44 fa	 cmove	 edi, edx
  0012c	3b 45 e0	 cmp	 eax, DWORD PTR tv1139[ebp]
  0012f	75 16		 jne	 SHORT $LN11@Copy_vbool

; 3806 :             const auto _DestMask = _FirstDestMask | (_DestEnd._Myoff == 0 ? 0 : _LastDestMask);

  00131	33 d2		 xor	 edx, edx
  00133	39 55 ec	 cmp	 DWORD PTR $T2[ebp], edx
  00136	0f 44 f2	 cmove	 esi, edx
  00139	0b 75 f8	 or	 esi, DWORD PTR __FirstDestMask$1$[ebp]

; 3807 :             *_VbDest             = (*_VbDest & _DestMask) | _SourceVal;

  0013c	23 f1		 and	 esi, ecx
  0013e	0b f7		 or	 esi, edi
  00140	89 30		 mov	 DWORD PTR [eax], esi

; 3808 :         } else {

  00142	e9 8f 02 00 00	 jmp	 $LN29@Copy_vbool
$LN11@Copy_vbool:

; 3809 :             *_VbDest = (*_VbDest & _FirstDestMask) | _SourceVal;

  00147	23 4d f8	 and	 ecx, DWORD PTR __FirstDestMask$1$[ebp]
  0014a	0b cf		 or	 ecx, edi
  0014c	89 08		 mov	 DWORD PTR [eax], ecx

; 3810 :             ++_VbDest;
; 3811 : 
; 3812 :             const auto _LastShift     = _Last._Myoff - _DestEnd._Myoff;

  0014e	8b 4d 18	 mov	 ecx, DWORD PTR __Last$[ebp+4]
  00151	2b 4d ec	 sub	 ecx, DWORD PTR $T2[ebp]

; 3813 :             const auto _LastSourceVal = (*_VbFirst & _SourceMask) >> _LastShift;

  00154	8b 13		 mov	 edx, DWORD PTR [ebx]
  00156	23 55 e8	 and	 edx, DWORD PTR $T1[ebp]
  00159	d3 ea		 shr	 edx, cl

; 3814 :             *_VbDest                  = (*_VbDest & _LastDestMask) | _LastSourceVal;

  0015b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0015e	23 ce		 and	 ecx, esi
  00160	0b d1		 or	 edx, ecx
  00162	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00165	e9 6c 02 00 00	 jmp	 $LN29@Copy_vbool
$LN9@Copy_vbool:

; 3815 :         }
; 3816 : 
; 3817 :         return _DestEnd;
; 3818 :     } else if (_IsSingleBlockDest) {

  0016a	3b 45 e0	 cmp	 eax, DWORD PTR tv1139[ebp]
  0016d	75 67		 jne	 SHORT $LN13@Copy_vbool

; 3819 :         const auto _SourceShift = _IsRightShift ? _First._Myoff - _Dest._Myoff : _Dest._Myoff - _First._Myoff;

  0016f	8b cb		 mov	 ecx, ebx
  00171	2b cf		 sub	 ecx, edi
  00173	2b fb		 sub	 edi, ebx
  00175	80 7d ff 00	 cmp	 BYTE PTR __IsRightShift$1$[ebp], 0
  00179	0f 45 f9	 cmovne	 edi, ecx

; 3820 :         const auto _SourceVal   = _IsRightShift ? (*_VbFirst & _FirstSourceMask) >> _SourceShift //

  0017c	8b 4d f4	 mov	 ecx, DWORD PTR __VbFirst$2$[ebp]
  0017f	8b 19		 mov	 ebx, DWORD PTR [ecx]

; 3821 :                                                 : (*_VbFirst & _FirstSourceMask) << _SourceShift;
; 3822 : 
; 3823 :         const auto _DestMask = _FirstDestMask | (_DestEnd._Myoff == 0 ? 0 : _LastDestMask);

  00181	8b cf		 mov	 ecx, edi
  00183	23 5d dc	 and	 ebx, DWORD PTR __FirstSourceMask$1$[ebp]
  00186	8b d3		 mov	 edx, ebx
  00188	d3 eb		 shr	 ebx, cl
  0018a	d3 e2		 shl	 edx, cl
  0018c	80 7d ff 00	 cmp	 BYTE PTR __IsRightShift$1$[ebp], 0
  00190	0f 44 da	 cmove	 ebx, edx
  00193	33 c9		 xor	 ecx, ecx
  00195	89 5d dc	 mov	 DWORD PTR tv1051[ebp], ebx
  00198	8b 5d ec	 mov	 ebx, DWORD PTR $T2[ebp]
  0019b	85 db		 test	 ebx, ebx
  0019d	0f 44 f1	 cmove	 esi, ecx

; 3824 :         if (_Last._Myoff != 0) {

  001a0	8b 4d d4	 mov	 ecx, DWORD PTR __VbLast_ch$1$[ebp]
  001a3	0b 75 f8	 or	 esi, DWORD PTR __FirstDestMask$1$[ebp]
  001a6	85 c9		 test	 ecx, ecx
  001a8	74 1e		 je	 SHORT $LN14@Copy_vbool

; 3825 :             const auto _LastShift     = _DestEnd._Myoff - _Last._Myoff;
; 3826 :             const auto _LastSourceVal = (*_VbLast & _LastSourceMask) << _LastShift;

  001aa	8b 55 e8	 mov	 edx, DWORD PTR $T1[ebp]
  001ad	2b d9		 sub	 ebx, ecx
  001af	8b 4d f0	 mov	 ecx, DWORD PTR __VbLast$1$[ebp]
  001b2	23 11		 and	 edx, DWORD PTR [ecx]
  001b4	8b cb		 mov	 ecx, ebx
  001b6	d3 e2		 shl	 edx, cl

; 3827 :             *_VbDest                  = (*_VbDest & _DestMask) | _SourceVal | _LastSourceVal;

  001b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ba	23 ce		 and	 ecx, esi
  001bc	0b d1		 or	 edx, ecx

; 3830 :         }
; 3831 : 
; 3832 :         return _DestEnd;

  001be	8b 4d dc	 mov	 ecx, DWORD PTR tv1051[ebp]
  001c1	0b ca		 or	 ecx, edx
  001c3	e9 0c 02 00 00	 jmp	 $LN99@Copy_vbool
$LN14@Copy_vbool:

; 3828 :         } else {
; 3829 :             *_VbDest = (*_VbDest & _DestMask) | _SourceVal;

  001c8	8b 10		 mov	 edx, DWORD PTR [eax]

; 3830 :         }
; 3831 : 
; 3832 :         return _DestEnd;

  001ca	8b 4d dc	 mov	 ecx, DWORD PTR tv1051[ebp]
  001cd	23 d6		 and	 edx, esi
  001cf	0b ca		 or	 ecx, edx
  001d1	e9 fe 01 00 00	 jmp	 $LN99@Copy_vbool
$LN13@Copy_vbool:

; 3833 :     }
; 3834 : 
; 3835 : #if _HAS_CXX20
; 3836 :     if (!_STD is_constant_evaluated())
; 3837 : #endif
; 3838 :     {
; 3839 :         // If _First and _Dest have matching char alignment, use memmove
; 3840 :         const auto _UnalignedFirstBits = _First._Myoff & _Vbase{7};

  001d6	8b f3		 mov	 esi, ebx

; 3841 :         const auto _UnalignedDestBits  = _Dest._Myoff & _Vbase{7};

  001d8	89 7d e0	 mov	 DWORD PTR __UnalignedDestBits$1$[ebp], edi
  001db	83 65 e0 07	 and	 DWORD PTR __UnalignedDestBits$1$[ebp], 7
  001df	83 e6 07	 and	 esi, 7
  001e2	89 75 ec	 mov	 DWORD PTR __UnalignedFirstBits$1$[ebp], esi

; 3842 :         if (_UnalignedFirstBits == _UnalignedDestBits) {

  001e5	3b 75 e0	 cmp	 esi, DWORD PTR __UnalignedDestBits$1$[ebp]
  001e8	0f 85 84 00 00
	00		 jne	 $LN16@Copy_vbool

; 3843 :             const auto _UnalignedLastBits = _Last._Myoff & _Vbase{7};

  001ee	8b 75 d4	 mov	 esi, DWORD PTR __VbLast_ch$1$[ebp]
  001f1	8b d6		 mov	 edx, esi

; 3844 : 
; 3845 :             auto _VbFirst_ch      = reinterpret_cast<const char*>(_VbFirst) + (_First._Myoff - _UnalignedFirstBits) / 8;
; 3846 :             const auto _VbLast_ch = reinterpret_cast<const char*>(_VbLast) + (_Last._Myoff - _UnalignedLastBits) / 8;
; 3847 :             auto _VbDest_ch       = reinterpret_cast<char*>(_VbDest) + (_Dest._Myoff - _UnalignedDestBits) / 8;

  001f3	2b 7d e0	 sub	 edi, DWORD PTR __UnalignedDestBits$1$[ebp]
  001f6	83 e2 07	 and	 edx, 7
  001f9	2b 5d ec	 sub	 ebx, DWORD PTR __UnalignedFirstBits$1$[ebp]
  001fc	2b f2		 sub	 esi, edx
  001fe	c1 ef 03	 shr	 edi, 3
  00201	c1 eb 03	 shr	 ebx, 3
  00204	03 f8		 add	 edi, eax
  00206	03 5d f4	 add	 ebx, DWORD PTR __VbFirst$2$[ebp]

; 3848 : 
; 3849 :             // Copy bits until the next char alignment
; 3850 :             if (_UnalignedFirstBits != 0) {

  00209	8b 45 ec	 mov	 eax, DWORD PTR __UnalignedFirstBits$1$[ebp]
  0020c	c1 ee 03	 shr	 esi, 3
  0020f	03 f1		 add	 esi, ecx
  00211	89 55 d4	 mov	 DWORD PTR __UnalignedLastBits$1$[ebp], edx
  00214	85 c0		 test	 eax, eax
  00216	74 1f		 je	 SHORT $LN17@Copy_vbool

; 3851 :                 const auto _SourceBitMask = static_cast<char>(UCHAR_MAX << _UnalignedFirstBits);
; 3852 :                 const auto _DestBitMask   = static_cast<char>(UCHAR_MAX >> (8 - _UnalignedFirstBits));

  00218	b9 08 00 00 00	 mov	 ecx, 8
  0021d	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  00222	2b c8		 sub	 ecx, eax
  00224	0c ff		 or	 al, -1
  00226	d3 fa		 sar	 edx, cl
  00228	8b 4d ec	 mov	 ecx, DWORD PTR __UnalignedFirstBits$1$[ebp]

; 3853 :                 *_VbDest_ch               = (*_VbDest_ch & _DestBitMask) | (*_VbFirst_ch & _SourceBitMask);

  0022b	22 17		 and	 dl, BYTE PTR [edi]
  0022d	d2 e0		 shl	 al, cl
  0022f	22 03		 and	 al, BYTE PTR [ebx]

; 3854 :                 ++_VbFirst_ch;

  00231	43		 inc	 ebx
  00232	0a d0		 or	 dl, al
  00234	88 17		 mov	 BYTE PTR [edi], dl

; 3855 :                 ++_VbDest_ch;

  00236	47		 inc	 edi
$LN17@Copy_vbool:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4862 :                     return _STD _Copy_memmove(_First, _Last, _Dest);

  00237	57		 push	 edi
  00238	56		 push	 esi
  00239	53		 push	 ebx
  0023a	e8 00 00 00 00	 call	 ??$_Copy_memmove@PBDPAD@std@@YAPADPBD0PAD@Z ; std::_Copy_memmove<char const *,char *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 3861 :             if (_UnalignedLastBits != 0) {

  0023f	8b 7d d4	 mov	 edi, DWORD PTR __UnalignedLastBits$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4862 :                     return _STD _Copy_memmove(_First, _Last, _Dest);

  00242	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 3858 :             _VbDest_ch = _Copy_unchecked(_VbFirst_ch, _VbLast_ch, _VbDest_ch);

  00245	8b d8		 mov	 ebx, eax

; 3861 :             if (_UnalignedLastBits != 0) {

  00247	85 ff		 test	 edi, edi
  00249	0f 84 87 01 00
	00		 je	 $LN29@Copy_vbool

; 3862 :                 const auto _SourceBitMask = static_cast<char>(UCHAR_MAX >> (8 - _UnalignedLastBits));

  0024f	b8 08 00 00 00	 mov	 eax, 8
  00254	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  00259	2b c7		 sub	 eax, edi
  0025b	8b c8		 mov	 ecx, eax

; 3863 :                 const auto _DestBitMask   = static_cast<char>(UCHAR_MAX << _UnalignedLastBits);

  0025d	0c ff		 or	 al, -1
  0025f	d3 fa		 sar	 edx, cl
  00261	8b cf		 mov	 ecx, edi

; 3864 :                 *_VbDest_ch               = (*_VbDest_ch & _DestBitMask) | (*_VbLast_ch & _SourceBitMask);

  00263	22 16		 and	 dl, BYTE PTR [esi]
  00265	d2 e0		 shl	 al, cl
  00267	22 03		 and	 al, BYTE PTR [ebx]
  00269	0a d0		 or	 dl, al
  0026b	88 13		 mov	 BYTE PTR [ebx], dl
  0026d	e9 64 01 00 00	 jmp	 $LN29@Copy_vbool
$LN16@Copy_vbool:

; 3865 :             }
; 3866 : 
; 3867 :             return _DestEnd;
; 3868 :         }
; 3869 :     }
; 3870 : 
; 3871 :     // Unaligned _VbFirst and _VbLast require a two step copy with carry
; 3872 :     if (_IsRightShift) {

  00272	8b 75 f4	 mov	 esi, DWORD PTR __VbFirst$2$[ebp]
  00275	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0027a	83 c6 04	 add	 esi, 4
  0027d	80 7d ff 00	 cmp	 BYTE PTR __IsRightShift$1$[ebp], 0
  00281	0f 84 b4 00 00
	00		 je	 $LN19@Copy_vbool

; 3873 :         const auto _SourceShift = _First._Myoff - _Dest._Myoff;

  00287	2b df		 sub	 ebx, edi

; 3874 :         const auto _CarryShift  = _VBITS - _SourceShift;

  00289	2b cb		 sub	 ecx, ebx
  0028b	89 4d ec	 mov	 DWORD PTR __CarryShift$1$[ebp], ecx

; 3875 :         const auto _CarryMask   = static_cast<_Vbase>(-1) >> _SourceShift;

  0028e	8b cb		 mov	 ecx, ebx
  00290	d3 ea		 shr	 edx, cl

; 3876 :         const auto _DestMask    = ~_CarryMask;

  00292	8b ca		 mov	 ecx, edx
  00294	89 55 d4	 mov	 DWORD PTR __CarryMask$1$[ebp], edx
  00297	f7 d1		 not	 ecx
  00299	89 4d e0	 mov	 DWORD PTR __DestMask$1$[ebp], ecx

; 3877 : 
; 3878 :         const auto _FirstSourceVal = (*_VbFirst & _FirstSourceMask) >> _SourceShift;

  0029c	8b 4d f4	 mov	 ecx, DWORD PTR __VbFirst$2$[ebp]
  0029f	8b 39		 mov	 edi, DWORD PTR [ecx]
  002a1	8b cb		 mov	 ecx, ebx
  002a3	23 7d dc	 and	 edi, DWORD PTR __FirstSourceMask$1$[ebp]
  002a6	d3 ef		 shr	 edi, cl

; 3879 :         *_VbDest                   = (*_VbDest & _FirstDestMask) | _FirstSourceVal;

  002a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  002aa	23 4d f8	 and	 ecx, DWORD PTR __FirstDestMask$1$[ebp]
  002ad	0b f9		 or	 edi, ecx
  002af	89 38		 mov	 DWORD PTR [eax], edi

; 3880 : 
; 3881 :         ++_VbFirst;
; 3882 :         for (; _VbFirst != _VbLast; ++_VbFirst) {

  002b1	3b 75 f0	 cmp	 esi, DWORD PTR __VbLast$1$[ebp]
  002b4	74 2d		 je	 SHORT $LN3@Copy_vbool
$LL4@Copy_vbool:

; 3883 :             const auto _CarryVal = *_VbFirst << _CarryShift;

  002b6	8b 16		 mov	 edx, DWORD PTR [esi]
  002b8	8b 4d ec	 mov	 ecx, DWORD PTR __CarryShift$1$[ebp]
  002bb	d3 e2		 shl	 edx, cl

; 3884 :             *_VbDest             = (*_VbDest & _CarryMask) | _CarryVal;

  002bd	8b 4d d4	 mov	 ecx, DWORD PTR __CarryMask$1$[ebp]
  002c0	23 cf		 and	 ecx, edi
  002c2	0b d1		 or	 edx, ecx

; 3885 : 
; 3886 :             ++_VbDest;
; 3887 :             const auto _SourceVal = *_VbFirst >> _SourceShift;

  002c4	8b cb		 mov	 ecx, ebx
  002c6	89 10		 mov	 DWORD PTR [eax], edx
  002c8	83 c0 04	 add	 eax, 4
  002cb	8b 3e		 mov	 edi, DWORD PTR [esi]
  002cd	83 c6 04	 add	 esi, 4
  002d0	d3 ef		 shr	 edi, cl

; 3888 :             *_VbDest              = (*_VbDest & _DestMask) | _SourceVal;

  002d2	8b 4d e0	 mov	 ecx, DWORD PTR __DestMask$1$[ebp]
  002d5	23 08		 and	 ecx, DWORD PTR [eax]
  002d7	0b f9		 or	 edi, ecx
  002d9	89 38		 mov	 DWORD PTR [eax], edi
  002db	3b 75 f0	 cmp	 esi, DWORD PTR __VbLast$1$[ebp]
  002de	75 d6		 jne	 SHORT $LL4@Copy_vbool
  002e0	8b 55 d4	 mov	 edx, DWORD PTR __CarryMask$1$[ebp]
$LN3@Copy_vbool:

; 3889 :         }
; 3890 : 
; 3891 :         if (_Last._Myoff != 0) {

  002e3	83 7d 18 00	 cmp	 DWORD PTR __Last$[ebp+4], 0
  002e7	0f 84 e9 00 00
	00		 je	 $LN29@Copy_vbool

; 3892 :             const auto _CarryVal = (*_VbFirst & _LastSourceMask) << _CarryShift;

  002ed	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002ef	8b 7d e8	 mov	 edi, DWORD PTR $T1[ebp]
  002f2	23 cf		 and	 ecx, edi
  002f4	89 4d e0	 mov	 DWORD PTR __CarryVal$1$[ebp], ecx
  002f7	8b 4d ec	 mov	 ecx, DWORD PTR __CarryShift$1$[ebp]
  002fa	d3 65 e0	 shl	 DWORD PTR __CarryVal$1$[ebp], cl
  002fd	8b 08		 mov	 ecx, DWORD PTR [eax]

; 3893 :             if (_Last._Myoff >= _SourceShift) {

  002ff	39 5d 18	 cmp	 DWORD PTR __Last$[ebp+4], ebx
  00302	72 28		 jb	 SHORT $LN22@Copy_vbool

; 3894 :                 *_VbDest = (*_VbDest & _CarryMask) | _CarryVal;

  00304	23 ca		 and	 ecx, edx
  00306	0b 4d e0	 or	 ecx, DWORD PTR __CarryVal$1$[ebp]
  00309	89 08		 mov	 DWORD PTR [eax], ecx

; 3895 : 
; 3896 :                 // We have more bits remaining than the final block has left
; 3897 :                 if (_Last._Myoff != _SourceShift) {

  0030b	39 5d 18	 cmp	 DWORD PTR __Last$[ebp+4], ebx
  0030e	0f 84 c2 00 00
	00		 je	 $LN29@Copy_vbool

; 3898 :                     ++_VbDest;
; 3899 :                     const auto _SourceVal = (*_VbFirst & _LastSourceMask) >> _SourceShift;

  00314	8b 16		 mov	 edx, DWORD PTR [esi]
  00316	8b cb		 mov	 ecx, ebx
  00318	23 d7		 and	 edx, edi
  0031a	d3 ea		 shr	 edx, cl

; 3900 :                     *_VbDest              = (*_VbDest & _LastDestMask) | _SourceVal;

  0031c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0031f	23 4d e4	 and	 ecx, DWORD PTR __DestMask$1$[ebp]
  00322	0b d1		 or	 edx, ecx
  00324	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 3901 :                 }
; 3902 :             } else {

  00327	e9 aa 00 00 00	 jmp	 $LN29@Copy_vbool
$LN22@Copy_vbool:

; 3903 :                 // There are not enough bits to fill the final block so we need to mask both ends
; 3904 :                 const auto _FinalMask = _CarryMask | _LastDestMask;

  0032c	0b 55 e4	 or	 edx, DWORD PTR __DestMask$1$[ebp]

; 3905 :                 *_VbDest              = (*_VbDest & _FinalMask) | _CarryVal;

  0032f	23 d1		 and	 edx, ecx
  00331	0b 55 e0	 or	 edx, DWORD PTR __CarryVal$1$[ebp]
  00334	89 10		 mov	 DWORD PTR [eax], edx

; 3906 :             }
; 3907 :         }
; 3908 :     } else {

  00336	e9 9b 00 00 00	 jmp	 $LN29@Copy_vbool
$LN19@Copy_vbool:

; 3909 :         const auto _SourceShift = _Dest._Myoff - _First._Myoff;

  0033b	2b fb		 sub	 edi, ebx

; 3910 :         const auto _CarryShift  = _VBITS - _SourceShift;
; 3911 : 
; 3912 :         const auto _FirstSourceVal = (*_VbFirst & _FirstSourceMask) << _SourceShift;

  0033d	8b 5d f4	 mov	 ebx, DWORD PTR __VbFirst$2$[ebp]
  00340	2b cf		 sub	 ecx, edi
  00342	89 4d ec	 mov	 DWORD PTR __CarryShift$1$[ebp], ecx
  00345	8b cf		 mov	 ecx, edi
  00347	8b 13		 mov	 edx, DWORD PTR [ebx]
  00349	23 55 dc	 and	 edx, DWORD PTR __FirstSourceMask$1$[ebp]
  0034c	d3 e2		 shl	 edx, cl

; 3913 :         *_VbDest                   = (*_VbDest & _FirstDestMask) | _FirstSourceVal;

  0034e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00350	23 4d f8	 and	 ecx, DWORD PTR __FirstDestMask$1$[ebp]
  00353	0b d1		 or	 edx, ecx

; 3914 :         auto _CarryVal             = *_VbFirst >> _CarryShift;

  00355	8b 4d ec	 mov	 ecx, DWORD PTR __CarryShift$1$[ebp]
  00358	89 10		 mov	 DWORD PTR [eax], edx

; 3915 : 
; 3916 :         ++_VbFirst;
; 3917 :         ++_VbDest;

  0035a	83 c0 04	 add	 eax, 4
  0035d	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  0035f	d3 eb		 shr	 ebx, cl

; 3918 :         for (; _VbFirst != _VbLast; ++_VbFirst, ++_VbDest) {

  00361	3b 75 f0	 cmp	 esi, DWORD PTR __VbLast$1$[ebp]
  00364	74 1c		 je	 SHORT $LN6@Copy_vbool
$LL69@Copy_vbool:

; 3919 :             const auto _SourceVal = *_VbFirst << _SourceShift;

  00366	8b 16		 mov	 edx, DWORD PTR [esi]
  00368	8b cf		 mov	 ecx, edi
  0036a	d3 e2		 shl	 edx, cl

; 3920 :             *_VbDest              = _CarryVal | _SourceVal;
; 3921 :             _CarryVal             = *_VbFirst >> _CarryShift;

  0036c	8b 4d ec	 mov	 ecx, DWORD PTR __CarryShift$1$[ebp]
  0036f	0b d3		 or	 edx, ebx
  00371	89 10		 mov	 DWORD PTR [eax], edx
  00373	83 c0 04	 add	 eax, 4
  00376	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00378	83 c6 04	 add	 esi, 4
  0037b	d3 eb		 shr	 ebx, cl
  0037d	3b 75 f0	 cmp	 esi, DWORD PTR __VbLast$1$[ebp]
  00380	75 e4		 jne	 SHORT $LL69@Copy_vbool
$LN6@Copy_vbool:

; 3922 :         }
; 3923 : 
; 3924 :         if (_Last._Myoff >= _CarryShift) {

  00382	8b 55 18	 mov	 edx, DWORD PTR __Last$[ebp+4]
  00385	3b d1		 cmp	 edx, ecx
  00387	72 2a		 jb	 SHORT $LN25@Copy_vbool

; 3925 :             const auto _SourceVal = *_VbFirst << _SourceShift;

  00389	8b 16		 mov	 edx, DWORD PTR [esi]
  0038b	8b cf		 mov	 ecx, edi
  0038d	d3 e2		 shl	 edx, cl

; 3928 : 
; 3929 :             // We have more bits remaining than the final block has left
; 3930 :             if (_Last._Myoff != _CarryShift) {

  0038f	8b 4d ec	 mov	 ecx, DWORD PTR __CarryShift$1$[ebp]
  00392	0b d3		 or	 edx, ebx
  00394	89 10		 mov	 DWORD PTR [eax], edx
  00396	39 4d 18	 cmp	 DWORD PTR __Last$[ebp+4], ecx
  00399	74 3b		 je	 SHORT $LN29@Copy_vbool

; 3926 :             *_VbDest              = _CarryVal | _SourceVal;
; 3927 :             _CarryVal             = *_VbFirst >> _CarryShift;

  0039b	8b 16		 mov	 edx, DWORD PTR [esi]
  0039d	d3 ea		 shr	 edx, cl

; 3931 :                 ++_VbDest;
; 3932 :                 const auto _LastCarryMask = ~_LastDestMask;

  0039f	8b 4d e4	 mov	 ecx, DWORD PTR __DestMask$1$[ebp]
  003a2	f7 d1		 not	 ecx

; 3933 :                 *_VbDest                  = (*_VbDest & _LastDestMask) | (_CarryVal & _LastCarryMask);

  003a4	23 d1		 and	 edx, ecx
  003a6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003a9	23 4d e4	 and	 ecx, DWORD PTR __DestMask$1$[ebp]
  003ac	0b d1		 or	 edx, ecx
  003ae	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 3934 :             }

  003b1	eb 23		 jmp	 SHORT $LN29@Copy_vbool
$LN25@Copy_vbool:

; 3935 :         } else if (_Last._Myoff != 0) {

  003b3	85 d2		 test	 edx, edx
  003b5	74 16		 je	 SHORT $LN28@Copy_vbool

; 3936 :             // There are not enough bits to fill the final block so we need to mask both ends
; 3937 :             const auto _LastSourceVal = (*_VbFirst & _LastSourceMask) << _SourceShift;

  003b7	8b 16		 mov	 edx, DWORD PTR [esi]
  003b9	8b cf		 mov	 ecx, edi
  003bb	23 55 e8	 and	 edx, DWORD PTR $T1[ebp]
  003be	d3 e2		 shl	 edx, cl

; 3938 :             *_VbDest                  = (*_VbDest & _LastDestMask) | _CarryVal | _LastSourceVal;

  003c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c2	23 4d e4	 and	 ecx, DWORD PTR __DestMask$1$[ebp]
  003c5	0b d1		 or	 edx, ecx
  003c7	0b d3		 or	 edx, ebx
  003c9	89 10		 mov	 DWORD PTR [eax], edx

; 3939 :         } else {

  003cb	eb 09		 jmp	 SHORT $LN29@Copy_vbool
$LN28@Copy_vbool:

; 3940 :             // No new bits, just copy the carry
; 3941 :             *_VbDest = (*_VbDest & _LastDestMask) | _CarryVal;

  003cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cf	23 4d e4	 and	 ecx, DWORD PTR __DestMask$1$[ebp]
  003d2	0b cb		 or	 ecx, ebx
$LN99@Copy_vbool:
  003d4	89 08		 mov	 DWORD PTR [eax], ecx
$LN29@Copy_vbool:

; 3942 :         }
; 3943 :     }
; 3944 : 
; 3945 :     return _DestEnd;

  003d6	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  003d9	8b 4d d8	 mov	 ecx, DWORD PTR __DestEnd$2$[ebp]
  003dc	5e		 pop	 esi
  003dd	5f		 pop	 edi
  003de	89 08		 mov	 DWORD PTR [eax], ecx
  003e0	8b 4d d0	 mov	 ecx, DWORD PTR __DestEnd$1$[ebp]
  003e3	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3946 : }

  003e6	5b		 pop	 ebx
  003e7	8b e5		 mov	 esp, ebp
  003e9	5d		 pop	 ebp
  003ea	c3		 ret	 0
??$_Copy_vbool@V?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@V12@@std@@YA?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@0@V10@00@Z ENDP ; std::_Copy_vbool<std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >,std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAU_Loop_vals_t@std@@PAU12@@std@@YAPAU_Loop_vals_t@0@PAU10@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAU_Loop_vals_t@std@@PAU12@@std@@YAPAU_Loop_vals_t@0@PAU10@00@Z PROC ; std::_Copy_memmove<std::_Loop_vals_t *,std::_Loop_vals_t *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 03	 sar	 eax, 3

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAU_Loop_vals_t@std@@@std@@YAPAU_Loop_vals_t@0@QBDQAU10@II@Z ; std::_Copy_memmove_tail<std::_Loop_vals_t *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAU_Loop_vals_t@std@@PAU12@@std@@YAPAU_Loop_vals_t@0@PAU10@00@Z ENDP ; std::_Copy_memmove<std::_Loop_vals_t *,std::_Loop_vals_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ PROC ; std::vector<char,std::allocator<char> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ ENDP ; std::vector<char,std::allocator<char> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newcapacity$ = 8					; size = 4
?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z PROC ; std::vector<char,std::allocator<char> >::_Buy_nonzero, COMDAT
; _this$ = ecx

; 2025 :     _CONSTEXPR20 void _Buy_nonzero(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2026 :         // allocate array with _Newcapacity elements
; 2027 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 2028 :         auto& _My_data    = _Mypair._Myval2;
; 2029 :         pointer& _Myfirst = _My_data._Myfirst;
; 2030 :         pointer& _Mylast  = _My_data._Mylast;
; 2031 :         pointer& _Myend   = _My_data._Myend;
; 2032 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 2033 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 2034 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 2035 : 
; 2036 :         if (_Newcapacity > max_size()) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newcapacity$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00010	77 4f		 ja	 SHORT $LN22@Buy_nonzer
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00012	85 f6		 test	 esi, esi
  00014	75 12		 jne	 SHORT $LN11@Buy_nonzer

; 228  :         return nullptr;

  00016	33 c0		 xor	 eax, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  00018	89 07		 mov	 DWORD PTR [edi], eax

; 2021 :         _Mylast               = _Newvec;

  0001a	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2022 :         _Myend                = _Newvec + _Newcapacity;

  0001d	8b c6		 mov	 eax, esi
  0001f	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 2038 :         }
; 2039 : 
; 2040 :         _Buy_raw(_Newcapacity);
; 2041 :     }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN11@Buy_nonzer:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00028	56		 push	 esi
  00029	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  0002f	72 18		 jb	 SHORT $LN12@Buy_nonzer

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00031	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  00036	89 07		 mov	 DWORD PTR [edi], eax
  00038	83 c4 04	 add	 esp, 4

; 2021 :         _Mylast               = _Newvec;

  0003b	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2022 :         _Myend                = _Newvec + _Newcapacity;

  0003e	03 c6		 add	 eax, esi
  00040	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 2038 :         }
; 2039 : 
; 2040 :         _Buy_raw(_Newcapacity);
; 2041 :     }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN12@Buy_nonzer:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00049	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  0004e	89 07		 mov	 DWORD PTR [edi], eax
  00050	83 c4 04	 add	 esp, 4

; 2021 :         _Mylast               = _Newvec;

  00053	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2022 :         _Myend                = _Newvec + _Newcapacity;

  00056	03 c6		 add	 eax, esi
  00058	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 2038 :         }
; 2039 : 
; 2040 :         _Buy_raw(_Newcapacity);
; 2041 :     }

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN22@Buy_nonzer:

; 2037 :             _Xlength();

  00061	e8 00 00 00 00	 call	 ?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ ; std::vector<char,std::allocator<char> >::_Xlength
$LN19@Buy_nonzer:
  00066	cc		 int	 3
?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ENDP ; std::vector<char,std::allocator<char> >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 3d		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 22		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00035	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00038	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  0003f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00046	5e		 pop	 esi

; 820  :     }

  00047	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00048	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  0004d	cc		 int	 3
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Find_vectorized@$$CBDE@std@@YAPBDQBD0E@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 1
??$_Find_vectorized@$$CBDE@std@@YAPBDQBD0E@Z PROC	; std::_Find_vectorized<char const ,unsigned char>, COMDAT

; 199  : _Ty* _Find_vectorized(_Ty* const _First, _Ty* const _Last, const _TVal _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  :     if constexpr (is_pointer_v<_TVal> || is_null_pointer_v<_TVal>) {
; 201  : #ifdef _WIN64
; 202  :         return const_cast<_Ty*>(
; 203  :             static_cast<const _Ty*>(::__std_find_trivial_8(_First, _Last, reinterpret_cast<uint64_t>(_Val))));
; 204  : #else
; 205  :         return const_cast<_Ty*>(
; 206  :             static_cast<const _Ty*>(::__std_find_trivial_4(_First, _Last, reinterpret_cast<uint32_t>(_Val))));
; 207  : #endif
; 208  :     } else if constexpr (sizeof(_Ty) == 1) {
; 209  :         return const_cast<_Ty*>(

  00003	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ___std_find_trivial_1@12

; 210  :             static_cast<const _Ty*>(::__std_find_trivial_1(_First, _Last, static_cast<uint8_t>(_Val))));
; 211  :     } else if constexpr (sizeof(_Ty) == 2) {
; 212  :         return const_cast<_Ty*>(
; 213  :             static_cast<const _Ty*>(::__std_find_trivial_2(_First, _Last, static_cast<uint16_t>(_Val))));
; 214  :     } else if constexpr (sizeof(_Ty) == 4) {
; 215  :         return const_cast<_Ty*>(
; 216  :             static_cast<const _Ty*>(::__std_find_trivial_4(_First, _Last, static_cast<uint32_t>(_Val))));
; 217  :     } else if constexpr (sizeof(_Ty) == 8) {
; 218  :         return const_cast<_Ty*>(
; 219  :             static_cast<const _Ty*>(::__std_find_trivial_8(_First, _Last, static_cast<uint64_t>(_Val))));
; 220  :     } else {
; 221  :         _STL_INTERNAL_STATIC_ASSERT(false); // unexpected size
; 222  :     }
; 223  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Find_vectorized@$$CBDE@std@@YAPBDQBD0E@Z ENDP	; std::_Find_vectorized<char const ,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\memory
;	COMDAT ??1?$unique_ptr@V_Node_assert@std@@U?$default_delete@V_Node_assert@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$unique_ptr@V_Node_assert@std@@U?$default_delete@V_Node_assert@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Node_assert,std::default_delete<std::_Node_assert> >::~unique_ptr<std::_Node_assert,std::default_delete<std::_Node_assert> >, COMDAT
; _this$ = ecx

; 3408 :         if (_Mypair._Myval2) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN7@unique_ptr

; 3299 :         delete _Ptr;

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	ff 10		 call	 DWORD PTR [eax]
$LN7@unique_ptr:

; 3409 :             _Mypair._Get_first()(_Mypair._Myval2);
; 3410 :         }
; 3411 :     }

  0000c	c3		 ret	 0
??1?$unique_ptr@V_Node_assert@std@@U?$default_delete@V_Node_assert@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Node_assert,std::default_delete<std::_Node_assert> >::~unique_ptr<std::_Node_assert,std::default_delete<std::_Node_assert> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_fill_n@V?$allocator@I@std@@@std@@YAPAIPAIIABIAAV?$allocator@I@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@V?$allocator@I@std@@@std@@YAPAIPAIIABIAAV?$allocator@I@0@@Z PROC ; std::_Uninitialized_fill_n<std::allocator<unsigned int> >, COMDAT

; 1970 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, const typename _Alloc::value_type& _Val, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1971 :     // copy _Count copies of _Val to raw _First, using _Al
; 1972 :     using _Ty = typename _Alloc::value_type;
; 1973 :     if constexpr (_Fill_memset_is_safe<_Ty*, _Ty> && _Uses_default_construct<_Alloc, _Ty*, _Ty>::value) {
; 1974 : #if _HAS_CXX20
; 1975 :         if (!_STD is_constant_evaluated())
; 1976 : #endif // _HAS_CXX20
; 1977 :         {
; 1978 :             _Fill_memset(_Unfancy(_First), _Val, static_cast<size_t>(_Count));
; 1979 :             return _First + _Count;
; 1980 :         }
; 1981 :     } else if constexpr (_Fill_zero_memset_is_safe<_Ty*, _Ty> && _Uses_default_construct<_Alloc, _Ty*, _Ty>::value) {
; 1982 : #if _HAS_CXX20
; 1983 :         if (!_STD is_constant_evaluated())
; 1984 : #endif // _HAS_CXX20
; 1985 :         {
; 1986 :             if (_Is_all_bits_zero(_Val)) {

  00004	8b 75 10	 mov	 esi, DWORD PTR __Val$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ??$_Is_all_bits_zero@I@std@@YA_NABI@Z ; std::_Is_all_bits_zero<unsigned int>
  0000d	83 c4 04	 add	 esp, 4
  00010	84 c0		 test	 al, al
  00012	74 18		 je	 SHORT $LN5@Uninitiali

; 1987 :                 _Fill_zero_memset(_Unfancy(_First), static_cast<size_t>(_Count));

  00014	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0001b	57		 push	 edi
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??$_Fill_zero_memset@PAI@std@@YAXPAII@Z ; std::_Fill_zero_memset<unsigned int *>
  00022	83 c4 08	 add	 esp, 8

; 1988 :                 return _First + _Count;

  00025	8d 04 be	 lea	 eax, DWORD PTR [esi+edi*4]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 1995 :         _Backout._Emplace_back(_Val);
; 1996 :     }
; 1997 : 
; 1998 :     return _Backout._Release();
; 1999 : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN5@Uninitiali:

; 1989 :             }
; 1990 :         }
; 1991 :     }
; 1992 : 
; 1993 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1994 :     for (; 0 < _Count; --_Count) {

  0002c	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0002f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 1989 :             }
; 1990 :         }
; 1991 :     }
; 1992 : 
; 1993 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1994 :     for (; 0 < _Count; --_Count) {

  00032	85 d2		 test	 edx, edx
  00034	74 0c		 je	 SHORT $LN1@Uninitiali
$LL4@Uninitiali:

; 1807 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00036	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00038	89 08		 mov	 DWORD PTR [eax], ecx

; 1808 :         ++_Last;

  0003a	83 c0 04	 add	 eax, 4

; 1989 :             }
; 1990 :         }
; 1991 :     }
; 1992 : 
; 1993 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1994 :     for (; 0 < _Count; --_Count) {

  0003d	83 ea 01	 sub	 edx, 1
  00040	75 f4		 jne	 SHORT $LL4@Uninitiali
$LN1@Uninitiali:
  00042	5e		 pop	 esi

; 1995 :         _Backout._Emplace_back(_Val);
; 1996 :     }
; 1997 : 
; 1998 :     return _Backout._Release();
; 1999 : }

  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Uninitialized_fill_n@V?$allocator@I@std@@@std@@YAPAIPAIIABIAAV?$allocator@I@0@@Z ENDP ; std::_Uninitialized_fill_n<std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z PROC		; std::_Copy_memmove<unsigned int *,unsigned int *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAI@std@@YAPAIQBDQAIII@Z ; std::_Copy_memmove_tail<unsigned int *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z ENDP		; std::_Copy_memmove<unsigned int *,unsigned int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@V?$sub_match@PBD@std@@@std@@@std@@YAPAV?$sub_match@PBD@0@PAV10@IAAV?$allocator@V?$sub_match@PBD@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@V?$sub_match@PBD@std@@@std@@@std@@YAPAV?$sub_match@PBD@0@PAV10@IAAV?$allocator@V?$sub_match@PBD@std@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<std::sub_match<char const *> > >, COMDAT

; 2041 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  00009	85 c9		 test	 ecx, ecx
  0000b	74 19		 je	 SHORT $LN3@Uninitiali
  0000d	0f 1f 00	 npad	 3
$LL4@Uninitiali:
  00010	0f 57 c0	 xorps	 xmm0, xmm0

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1808 :         ++_Last;

  0001e	83 c0 0c	 add	 eax, 12			; 0000000cH

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  00021	83 e9 01	 sub	 ecx, 1
  00024	75 ea		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 2057 :         _Backout._Emplace_back();
; 2058 :     }
; 2059 : 
; 2060 :     return _Backout._Release();
; 2061 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@V?$sub_match@PBD@std@@@std@@@std@@YAPAV?$sub_match@PBD@0@PAV10@IAAV?$allocator@V?$sub_match@PBD@std@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<std::sub_match<char const *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -8					; size = 4
tv529 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1537 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1538 :         if (_Newsize > max_size()) {

  00006	81 7d 08 55 55
	55 15		 cmp	 DWORD PTR __Newsize$[ebp], 357913941 ; 15555555H
  0000d	53		 push	 ebx
  0000e	57		 push	 edi
  0000f	8b d9		 mov	 ebx, ecx
  00011	0f 87 37 01 00
	00		 ja	 $LN125@Resize_rea

; 1540 :         }
; 1541 : 
; 1542 :         auto& _Al         = _Getal();
; 1543 :         auto& _My_data    = _Mypair._Myval2;
; 1544 :         pointer& _Myfirst = _My_data._Myfirst;
; 1545 :         pointer& _Mylast  = _My_data._Mylast;
; 1546 : 
; 1547 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001f	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00021	f7 e9		 imul	 ecx

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00023	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00026	2b 0b		 sub	 ecx, DWORD PTR [ebx]

; 1540 :         }
; 1541 : 
; 1542 :         auto& _Al         = _Getal();
; 1543 :         auto& _My_data    = _Mypair._Myval2;
; 1544 :         pointer& _Myfirst = _My_data._Myfirst;
; 1545 :         pointer& _Mylast  = _My_data._Mylast;
; 1546 : 
; 1547 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

  00028	d1 fa		 sar	 edx, 1
  0002a	8b c2		 mov	 eax, edx
  0002c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002f	03 c2		 add	 eax, edx
  00031	89 45 f8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00034	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00039	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0003b	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00040	d1 fa		 sar	 edx, 1
  00042	8b ca		 mov	 ecx, edx
  00044	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00047	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00049	8b d1		 mov	 edx, ecx
  0004b	d1 ea		 shr	 edx, 1
  0004d	2b c2		 sub	 eax, edx
  0004f	56		 push	 esi
  00050	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00053	3b c8		 cmp	 ecx, eax
  00055	76 14		 jbe	 SHORT $LN6@Resize_rea

; 1997 :             return _Max; // geometric growth would overflow

  00057	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0005c	c7 45 fc fc ff
	ff ff		 mov	 DWORD PTR tv529[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00069	eb 3c		 jmp	 SHORT $LN123@Resize_rea
$LN6@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0006b	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  0006e	3b c6		 cmp	 eax, esi
  00070	73 13		 jae	 SHORT $LN7@Resize_rea

; 2003 :             return _Newsize; // geometric growth would be insufficient

  00072	8b c6		 mov	 eax, esi
$LN17@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  00074	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00077	c1 e0 02	 shl	 eax, 2
  0007a	89 45 fc	 mov	 DWORD PTR tv529[ebp], eax

; 227  :     if (_Bytes == 0) {

  0007d	85 c0		 test	 eax, eax
  0007f	75 11		 jne	 SHORT $LN21@Resize_rea

; 228  :         return nullptr;

  00081	33 ff		 xor	 edi, edi
  00083	eb 27		 jmp	 SHORT $LN20@Resize_rea
$LN7@Resize_rea:

; 117  :         if (_Count > _Max_possible) {

  00085	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0008a	0f 87 c3 00 00
	00		 ja	 $LN126@Resize_rea
  00090	eb e2		 jmp	 SHORT $LN17@Resize_rea
$LN21@Resize_rea:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 08		 jb	 SHORT $LN22@Resize_rea

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	eb 06		 jmp	 SHORT $LN123@Resize_rea
$LN22@Resize_rea:

; 136  :         return ::operator new(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN123@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000a7	8b f8		 mov	 edi, eax
  000a9	83 c4 04	 add	 esp, 4
$LN20@Resize_rea:
  000ac	8b 55 f8	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]

; 1552 : 
; 1553 :         _Reallocation_guard _Guard{_Al, _Newvec, _Newcapacity, _Appended_first, _Appended_first};
; 1554 :         auto& _Appended_last = _Guard._Constructed_last;
; 1555 : 
; 1556 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1557 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1558 :         } else {
; 1559 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000af	8b ce		 mov	 ecx, esi
  000b1	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  000b4	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  000b7	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2056 :     for (; 0 < _Count; --_Count) {

  000b9	74 1c		 je	 SHORT $LN30@Resize_rea
  000bb	0f 1f 44 00 00	 npad	 5
$LL31@Resize_rea:

; 1808 :         ++_Last;

  000c0	8d 40 0c	 lea	 eax, DWORD PTR [eax+12]
  000c3	0f 57 c0	 xorps	 xmm0, xmm0

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000c6	66 0f d6 40 f4	 movq	 QWORD PTR [eax-12], xmm0
  000cb	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0

; 2056 :     for (; 0 < _Count; --_Count) {

  000d2	83 e9 01	 sub	 ecx, 1
  000d5	75 e9		 jne	 SHORT $LL31@Resize_rea
$LN30@Resize_rea:

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000d7	57		 push	 edi
  000d8	ff 73 04	 push	 DWORD PTR [ebx+4]
  000db	ff 33		 push	 DWORD PTR [ebx]
  000dd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAV?$sub_match@PBD@std@@PAV12@@std@@YAPAV?$sub_match@PBD@0@PAV10@00@Z ; std::_Copy_memmove<std::sub_match<char const *> *,std::sub_match<char const *> *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000e2	8b 33		 mov	 esi, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000e7	85 f6		 test	 esi, esi
  000e9	74 3f		 je	 SHORT $LN69@Resize_rea

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000eb	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000ee	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000f3	2b ce		 sub	 ecx, esi
  000f5	f7 e9		 imul	 ecx
  000f7	d1 fa		 sar	 edx, 1
  000f9	8b c2		 mov	 eax, edx
  000fb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000fe	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00100	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00103	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00106	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0010c	72 12		 jb	 SHORT $LN80@Resize_rea

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010e	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00111	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00114	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00116	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00119	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011c	77 2b		 ja	 SHORT $LN77@Resize_rea

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0011e	8b f2		 mov	 esi, edx
$LN80@Resize_rea:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00120	51		 push	 ecx
  00121	56		 push	 esi
  00122	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00127	83 c4 08	 add	 esp, 8
$LN69@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0012a	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0012d	89 3b		 mov	 DWORD PTR [ebx], edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0012f	5e		 pop	 esi
  00130	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00133	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00136	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00139	8b 45 fc	 mov	 eax, DWORD PTR tv529[ebp]
  0013c	03 c7		 add	 eax, edi

; 1571 :     }

  0013e	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0013f	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 1571 :     }

  00142	5b		 pop	 ebx
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 08 00	 ret	 8
$LN77@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00149	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN125@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1539 :             _Xlength();

  0014e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@CAXXZ ; std::vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >::_Xlength
$LN126@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00153	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN122@Resize_rea:
  00158	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -88				; size = 4
__Count$1$ = -84					; size = 4
__ULast$1$ = -80					; size = 4
$T2 = -76						; size = 4
__Temp$3 = -72						; size = 12
$T4 = -60						; size = 4
$T5 = -56						; size = 4
__Temp$2$ = -52						; size = 4
_this$GSCopy$1$ = -48					; size = 4
__Bytes$1$ = -44					; size = 4
__Ptr$1$ = -44						; size = 4
$T6 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z PROC ; std::_Regex_traits<char>::transform_primary<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >, COMDAT
; _this$ = ecx

; 311  :     string_type transform_primary(_FwdIt _First, _FwdIt _Last) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d d0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00036	8b 75 0c	 mov	 esi, DWORD PTR __First$[ebp]
  00039	89 7d a8	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi
  0003c	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00043	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00046	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0004d	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 836  :         _My_data._Mysize = 0;

  00054	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0005b	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 311  :     string_type transform_primary(_FwdIt _First, _FwdIt _Last) const {

  00062	89 4d b0	 mov	 DWORD PTR __ULast$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00065	c6 07 00	 mov	 BYTE PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 321  :         return _Res;

  00068	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006f	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 171  :         return _Ptr == _Right._Ptr;

  00076	3b f1		 cmp	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 315  :         if (_First != _Last) { // non-empty string, transform it

  00078	0f 84 5b 01 00
	00		 je	 $LN164@transform_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0007e	33 c0		 xor	 eax, eax
  00080	33 d2		 xor	 edx, edx
  00082	89 45 b8	 mov	 DWORD PTR __Temp$3[ebp], eax
  00085	89 45 d4	 mov	 DWORD PTR __Bytes$1$[ebp], eax
  00088	89 45 c0	 mov	 DWORD PTR __Temp$3[ebp+8], eax

; 681  :         auto _ULast  = _STD _Get_unwrapped(_Last);

  0008b	8b c1		 mov	 eax, ecx
  0008d	2b c6		 sub	 eax, esi

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0008f	89 55 cc	 mov	 DWORD PTR __Temp$2$[ebp], edx
  00092	89 55 bc	 mov	 DWORD PTR __Temp$3[ebp+4], edx

; 681  :         auto _ULast  = _STD _Get_unwrapped(_Last);

  00095	89 45 ac	 mov	 DWORD PTR __Count$1$[ebp], eax

; 682  :         if constexpr (_Is_cpp17_fwd_iter_v<_Iter>) {
; 683  :             const auto _Length = static_cast<size_t>(_STD distance(_UFirst, _ULast));
; 684  :             const auto _Count  = _STD _Convert_size<size_type>(_Length);

  00098	89 55 c8	 mov	 DWORD PTR $T5[ebp], edx
  0009b	89 55 c4	 mov	 DWORD PTR $T4[ebp], edx

; 2096 :         if (_Count != 0) {

  0009e	74 3a		 je	 SHORT $LN189@transform_

; 2097 :             _Buy_nonzero(_Count);

  000a0	50		 push	 eax
  000a1	8d 4d b8	 lea	 ecx, DWORD PTR __Temp$3[ebp]
  000a4	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ; std::vector<char,std::allocator<char> >::_Buy_nonzero
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1852 :                 _STD _Copy_memmove(_STD _To_address(_UFirst), _STD _To_address(_ULast), _STD _Unfancy(_Dest));

  000a9	8b 45 b8	 mov	 eax, DWORD PTR __Temp$3[ebp]
  000ac	50		 push	 eax
  000ad	ff 75 b0	 push	 DWORD PTR __ULast$1$[ebp]
  000b0	89 45 d4	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  000b3	56		 push	 esi
  000b4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PADPAD@std@@YAPADPAD00@Z ; std::_Copy_memmove<char *,char *>

; 1853 :                 _Dest += _ULast - _UFirst;

  000b9	8b 75 d4	 mov	 esi, DWORD PTR __Ptr$1$[ebp]
  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bf	8b 55 ac	 mov	 edx, DWORD PTR __Count$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2110 :             _Guard._Target = nullptr;

  000c2	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1853 :                 _Dest += _ULast - _UFirst;

  000c4	03 d6		 add	 edx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2110 :             _Guard._Target = nullptr;

  000c6	89 45 c8	 mov	 DWORD PTR $T5[ebp], eax
  000c9	89 45 c4	 mov	 DWORD PTR $T4[ebp], eax
  000cc	8b 45 c0	 mov	 eax, DWORD PTR __Temp$3[ebp+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1853 :                 _Dest += _ULast - _UFirst;

  000cf	89 55 cc	 mov	 DWORD PTR __Temp$2$[ebp], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000d2	89 55 bc	 mov	 DWORD PTR __Temp$3[ebp+4], edx

; 2110 :             _Guard._Target = nullptr;

  000d5	89 45 d4	 mov	 DWORD PTR __Bytes$1$[ebp], eax
  000d8	eb 02		 jmp	 SHORT $LN60@transform_
$LN189@transform_:

; 2079 : 
; 2080 :             _Myfirst = nullptr;
; 2081 :             _Mylast  = nullptr;
; 2082 :             _Myend   = nullptr;
; 2083 :         }
; 2084 :     }
; 2085 : 
; 2086 :     template <class... _Valty>
; 2087 :     _CONSTEXPR20 void _Construct_n(_CRT_GUARDOVERFLOW const size_type _Count, _Valty&&... _Val) {
; 2088 :         // Dispatches between the three sized constructions.
; 2089 :         // 1-arg -> value-construction, e.g. vector(5)
; 2090 :         // 2-arg -> fill, e.g. vector(5, "meow")
; 2091 :         // 3-arg -> sized range construction, e.g. vector{"Hello", "Fluffy", "World"}
; 2092 :         auto& _Al       = _Getal();
; 2093 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2094 :         auto& _My_data  = _Mypair._Myval2;
; 2095 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2096 :         if (_Count != 0) {

  000da	33 f6		 xor	 esi, esi
$LN60@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 318  :             _Getctype()->tolower(_Temp.data(), _Temp.data() + _Temp.size());

  000dc	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2739 :         return do_tolower(_First, _Last);

  000df	52		 push	 edx
  000e0	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 316  :             vector<_Elem> _Temp(_First, _Last);

  000e1	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 318  :             _Getctype()->tolower(_Temp.data(), _Temp.data() + _Temp.size());

  000e8	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2739 :         return do_tolower(_First, _Last);

  000eb	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ed	ff 50 0c	 call	 DWORD PTR [eax+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 319  :             _Res = _Getcoll()->transform(_Temp.data(), _Temp.data() + _Temp.size());

  000f0	8b 45 d0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 40   :         return do_transform(_First, _Last);

  000f3	8b 55 cc	 mov	 edx, DWORD PTR __Temp$2$[ebp]
  000f6	2b 55 c8	 sub	 edx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000f9	03 55 c4	 add	 edx, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 319  :             _Res = _Getcoll()->transform(_Temp.data(), _Temp.data() + _Temp.size());

  000fc	8b 08		 mov	 ecx, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 40   :         return do_transform(_First, _Last);

  000fe	52		 push	 edx
  000ff	56		 push	 esi
  00100	8d 55 d8	 lea	 edx, DWORD PTR $T6[ebp]
  00103	8b 01		 mov	 eax, DWORD PTR [ecx]
  00105	52		 push	 edx
  00106	ff 50 10	 call	 DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1202 :         if (this == _STD addressof(_Right)) {

  00109	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  0010c	3b f8		 cmp	 edi, eax
  0010e	74 6a		 je	 SHORT $LN188@transform_

; 434  :         return _Myres > _Small_string_capacity;

  00110	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00113	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00116	76 2b		 jbe	 SHORT $LN94@transform_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00118	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0011a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00121	72 16		 jb	 SHORT $LN105@transform_

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00123	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00126	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00129	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00131	0f 87 c1 00 00
	00		 ja	 $LN151@transform_

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00137	8b c2		 mov	 eax, edx
$LN105@transform_:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00139	51		 push	 ecx
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00140	83 c4 08	 add	 esp, 8
$LN94@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00143	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T6[ebp]

; 3054 :         _My_data._Mysize = 0;

  00147	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0014e	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00153	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0015a	c6 07 00	 mov	 BYTE PTR [edi], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0015d	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00160	c6 45 d8 00	 mov	 BYTE PTR $T6[ebp], 0
  00164	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T6[ebp+16]
  00169	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0
  0016e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0
  00175	89 45 ec	 mov	 DWORD PTR $T6[ebp+20], eax

; 1202 :         if (this == _STD addressof(_Right)) {

  00178	eb 03		 jmp	 SHORT $LN111@transform_
$LN188@transform_:
  0017a	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp+20]
$LN111@transform_:

; 434  :         return _Myres > _Small_string_capacity;

  0017d	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00180	76 2a		 jbe	 SHORT $LN143@transform_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00182	8b 55 d8	 mov	 edx, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00185	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00188	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0018a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00190	72 10		 jb	 SHORT $LN154@transform_

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00192	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00195	83 c1 23	 add	 ecx, 35			; 00000023H
  00198	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0019a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0019d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001a0	77 56		 ja	 SHORT $LN151@transform_
$LN154@transform_:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001a2	51		 push	 ecx
  001a3	52		 push	 edx
  001a4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001a9	83 c4 08	 add	 esp, 8
$LN143@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  001ac	85 f6		 test	 esi, esi
  001ae	74 29		 je	 SHORT $LN164@transform_

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001b0	8b 4d d4	 mov	 ecx, DWORD PTR __Bytes$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b3	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001b5	2b ce		 sub	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001b7	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001bd	72 10		 jb	 SHORT $LN183@transform_

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001bf	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  001c2	83 c1 23	 add	 ecx, 35			; 00000023H
  001c5	2b c6		 sub	 eax, esi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c7	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ca	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001cd	77 2e		 ja	 SHORT $LN193@transform_
$LN183@transform_:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001cf	51		 push	 ecx
  001d0	56		 push	 esi
  001d1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d6	83 c4 08	 add	 esp, 8
$LN164@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 321  :         return _Res;

  001d9	8b c7		 mov	 eax, edi

; 322  :     }

  001db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e5	59		 pop	 ecx
  001e6	5f		 pop	 edi
  001e7	5e		 pop	 esi
  001e8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001eb	33 cd		 xor	 ecx, ebp
  001ed	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f2	8b e5		 mov	 esp, ebp
  001f4	5d		 pop	 ebp
  001f5	c2 0c 00	 ret	 12			; 0000000cH
$LN151@transform_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001f8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN193@transform_:
  001fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN191@transform_:
  00202	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$0:
  00000	8b 45 b4	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@transform_
  0000c	83 65 b4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d a8	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@transform_:
  00018	c3		 ret	 0
__unwindfunclet$??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$1:
  00019	8d 4d b8	 lea	 ecx, DWORD PTR __Temp$3[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z ENDP ; std::_Regex_traits<char>::transform_primary<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$_Cmp_chrange@PBDPBDU?$_Cmp_cs@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_cs@V?$regex_traits@D@std@@@0@@Z
_TEXT	SEGMENT
__Begin1$ = 8						; size = 4
__Res$1$ = 8						; size = 4
__End1$ = 12						; size = 4
__Begin2$ = 16						; size = 4
__End2$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Cmp_chrange@PBDPBDU?$_Cmp_cs@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_cs@V?$regex_traits@D@std@@@0@@Z PROC ; std::_Cmp_chrange<char const *,char const *,std::_Cmp_cs<std::regex_traits<char> > >, COMDAT

; 3304 : _BidIt1 _Cmp_chrange(_BidIt1 _Begin1, _BidIt1 _End1, _BidIt2 _Begin2, _BidIt2 _End2, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3305 :     // compare character ranges
; 3306 :     _BidIt1 _Res = _Begin1;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Begin1$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	53		 push	 ebx

; 3307 :     while (_Begin1 != _End1 && _Begin2 != _End2) {

  00009	8b 5d 14	 mov	 ebx, DWORD PTR __End2$[ebp]
  0000c	56		 push	 esi
  0000d	8b 75 10	 mov	 esi, DWORD PTR __Begin2$[ebp]
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __End1$[ebp]
  00014	89 45 08	 mov	 DWORD PTR __Res$1$[ebp], eax
  00017	3b d7		 cmp	 edx, edi
  00019	74 1a		 je	 SHORT $LN3@Cmp_chrang
  0001b	0f 1f 44 00 00	 npad	 5
$LL2@Cmp_chrang:
  00020	3b f3		 cmp	 esi, ebx
  00022	74 0e		 je	 SHORT $LN13@Cmp_chrang

; 3308 :         if (!_Pred(*_Begin1++, *_Begin2++)) {

  00024	8a 0e		 mov	 cl, BYTE PTR [esi]
  00026	46		 inc	 esi
  00027	8a 02		 mov	 al, BYTE PTR [edx]
  00029	42		 inc	 edx

; 220  :         return _Ex1 == _Ex2;

  0002a	3a c1		 cmp	 al, cl

; 3308 :         if (!_Pred(*_Begin1++, *_Begin2++)) {

  0002c	75 11		 jne	 SHORT $LN9@Cmp_chrang

; 3307 :     while (_Begin1 != _End1 && _Begin2 != _End2) {

  0002e	3b d7		 cmp	 edx, edi
  00030	75 ee		 jne	 SHORT $LL2@Cmp_chrang
$LN13@Cmp_chrang:

; 3310 :         }
; 3311 :     }
; 3312 : 
; 3313 :     return _Begin2 == _End2 ? _Begin1 : _Res;

  00032	8b 45 08	 mov	 eax, DWORD PTR __Res$1$[ebp]
$LN3@Cmp_chrang:
  00035	3b f3		 cmp	 esi, ebx
  00037	5f		 pop	 edi

; 3314 : }

  00038	5e		 pop	 esi
  00039	0f 44 c2	 cmove	 eax, edx
  0003c	5b		 pop	 ebx
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN9@Cmp_chrang:

; 3309 :             return _Res;

  0003f	8b 45 08	 mov	 eax, DWORD PTR __Res$1$[ebp]
  00042	5f		 pop	 edi

; 3314 : }

  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??$_Cmp_chrange@PBDPBDU?$_Cmp_cs@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_cs@V?$regex_traits@D@std@@@0@@Z ENDP ; std::_Cmp_chrange<char const *,char const *,std::_Cmp_cs<std::regex_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$_Cmp_chrange@PBDPBDU?$_Cmp_collate@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_collate@V?$regex_traits@D@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 1
$T2 = -8						; size = 1
__Begin2$1$ = -4					; size = 4
__Begin1$ = 8						; size = 4
__Res$1$ = 8						; size = 4
__End1$ = 12						; size = 4
__Begin2$ = 16						; size = 4
__End2$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$_Cmp_chrange@PBDPBDU?$_Cmp_collate@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_collate@V?$regex_traits@D@std@@@0@@Z PROC ; std::_Cmp_chrange<char const *,char const *,std::_Cmp_collate<std::regex_traits<char> > >, COMDAT

; 3304 : _BidIt1 _Cmp_chrange(_BidIt1 _Begin1, _BidIt1 _End1, _BidIt2 _Begin2, _BidIt2 _End2, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3305 :     // compare character ranges
; 3306 :     _BidIt1 _Res = _Begin1;
; 3307 :     while (_Begin1 != _End1 && _Begin2 != _End2) {

  00006	8b 45 14	 mov	 eax, DWORD PTR __End2$[ebp]
  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Begin2$[ebp]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR __Begin1$[ebp]
  00012	8b d7		 mov	 edx, edi
  00014	89 55 08	 mov	 DWORD PTR __Res$1$[ebp], edx
  00017	3b 7d 0c	 cmp	 edi, DWORD PTR __End1$[ebp]
  0001a	74 42		 je	 SHORT $LN3@Cmp_chrang
  0001c	0f 1f 40 00	 npad	 4
$LL2@Cmp_chrang:
  00020	3b c8		 cmp	 ecx, eax
  00022	74 37		 je	 SHORT $LN13@Cmp_chrang

; 3308 :         if (!_Pred(*_Begin1++, *_Begin2++)) {

  00024	8a 01		 mov	 al, BYTE PTR [ecx]
  00026	41		 inc	 ecx

; 244  :         return _Traits.translate(_Ex1) == _Traits.translate(_Ex2);

  00027	8b 75 18	 mov	 esi, DWORD PTR __Pred$[ebp]

; 3308 :         if (!_Pred(*_Begin1++, *_Begin2++)) {

  0002a	88 45 f8	 mov	 BYTE PTR $T2[ebp], al
  0002d	8a 07		 mov	 al, BYTE PTR [edi]
  0002f	47		 inc	 edi

; 244  :         return _Traits.translate(_Ex1) == _Traits.translate(_Ex2);

  00030	ff 75 f8	 push	 DWORD PTR $T2[ebp]

; 3308 :         if (!_Pred(*_Begin1++, *_Begin2++)) {

  00033	89 4d fc	 mov	 DWORD PTR __Begin2$1$[ebp], ecx

; 244  :         return _Traits.translate(_Ex1) == _Traits.translate(_Ex2);

  00036	8b ce		 mov	 ecx, esi

; 3308 :         if (!_Pred(*_Begin1++, *_Begin2++)) {

  00038	88 45 f4	 mov	 BYTE PTR $T1[ebp], al

; 244  :         return _Traits.translate(_Ex1) == _Traits.translate(_Ex2);

  0003b	e8 00 00 00 00	 call	 ?translate@?$_Regex_traits@D@std@@QBEDD@Z ; std::_Regex_traits<char>::translate
  00040	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00043	8b ce		 mov	 ecx, esi
  00045	8a d8		 mov	 bl, al
  00047	e8 00 00 00 00	 call	 ?translate@?$_Regex_traits@D@std@@QBEDD@Z ; std::_Regex_traits<char>::translate
  0004c	3a c3		 cmp	 al, bl

; 3308 :         if (!_Pred(*_Begin1++, *_Begin2++)) {

  0004e	75 1c		 jne	 SHORT $LN9@Cmp_chrang

; 3305 :     // compare character ranges
; 3306 :     _BidIt1 _Res = _Begin1;
; 3307 :     while (_Begin1 != _End1 && _Begin2 != _End2) {

  00050	8b 4d fc	 mov	 ecx, DWORD PTR __Begin2$1$[ebp]
  00053	8b 45 14	 mov	 eax, DWORD PTR __End2$[ebp]
  00056	3b 7d 0c	 cmp	 edi, DWORD PTR __End1$[ebp]
  00059	75 c5		 jne	 SHORT $LL2@Cmp_chrang
$LN13@Cmp_chrang:

; 3310 :         }
; 3311 :     }
; 3312 : 
; 3313 :     return _Begin2 == _End2 ? _Begin1 : _Res;

  0005b	8b 55 08	 mov	 edx, DWORD PTR __Res$1$[ebp]
$LN3@Cmp_chrang:
  0005e	3b c8		 cmp	 ecx, eax
  00060	0f 44 d7	 cmove	 edx, edi
  00063	5f		 pop	 edi

; 3314 : }

  00064	5e		 pop	 esi
  00065	8b c2		 mov	 eax, edx
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
$LN9@Cmp_chrang:

; 3309 :             return _Res;

  0006c	8b 45 08	 mov	 eax, DWORD PTR __Res$1$[ebp]
  0006f	5f		 pop	 edi

; 3314 : }

  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
??$_Cmp_chrange@PBDPBDU?$_Cmp_collate@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_collate@V?$regex_traits@D@std@@@0@@Z ENDP ; std::_Cmp_chrange<char const *,char const *,std::_Cmp_collate<std::regex_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$_Cmp_chrange@PBDPBDU?$_Cmp_icase@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_icase@V?$regex_traits@D@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 1
$T2 = -8						; size = 1
__Begin2$1$ = -4					; size = 4
__Begin1$ = 8						; size = 4
__Res$1$ = 8						; size = 4
__End1$ = 12						; size = 4
__Begin2$ = 16						; size = 4
__End2$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$_Cmp_chrange@PBDPBDU?$_Cmp_icase@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_icase@V?$regex_traits@D@std@@@0@@Z PROC ; std::_Cmp_chrange<char const *,char const *,std::_Cmp_icase<std::regex_traits<char> > >, COMDAT

; 3304 : _BidIt1 _Cmp_chrange(_BidIt1 _Begin1, _BidIt1 _End1, _BidIt2 _Begin2, _BidIt2 _End2, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3305 :     // compare character ranges
; 3306 :     _BidIt1 _Res = _Begin1;
; 3307 :     while (_Begin1 != _End1 && _Begin2 != _End2) {

  00006	8b 45 14	 mov	 eax, DWORD PTR __End2$[ebp]
  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Begin2$[ebp]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR __Begin1$[ebp]
  00011	8b d6		 mov	 edx, esi
  00013	57		 push	 edi
  00014	89 55 08	 mov	 DWORD PTR __Res$1$[ebp], edx
  00017	3b 75 0c	 cmp	 esi, DWORD PTR __End1$[ebp]
  0001a	74 48		 je	 SHORT $LN3@Cmp_chrang
  0001c	0f 1f 40 00	 npad	 4
$LL2@Cmp_chrang:
  00020	3b c8		 cmp	 ecx, eax
  00022	74 3d		 je	 SHORT $LN21@Cmp_chrang

; 3308 :         if (!_Pred(*_Begin1++, *_Begin2++)) {

  00024	8a 01		 mov	 al, BYTE PTR [ecx]
  00026	41		 inc	 ecx

; 301  :         return _Getctype()->tolower(_Ch);

  00027	8b 7d 18	 mov	 edi, DWORD PTR __Pred$[ebp]

; 3308 :         if (!_Pred(*_Begin1++, *_Begin2++)) {

  0002a	88 45 f8	 mov	 BYTE PTR $T2[ebp], al
  0002d	8a 06		 mov	 al, BYTE PTR [esi]
  0002f	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  00030	ff 75 f8	 push	 DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3308 :         if (!_Pred(*_Begin1++, *_Begin2++)) {

  00033	89 4d fc	 mov	 DWORD PTR __Begin2$1$[ebp], ecx

; 301  :         return _Getctype()->tolower(_Ch);

  00036	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 3308 :         if (!_Pred(*_Begin1++, *_Begin2++)) {

  00039	88 45 f4	 mov	 BYTE PTR $T1[ebp], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00041	ff d0		 call	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 301  :         return _Getctype()->tolower(_Ch);

  00043	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00046	8a d8		 mov	 bl, al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  00048	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00050	ff d0		 call	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 231  :         return _Traits.translate_nocase(_Ex1) == _Traits.translate_nocase(_Ex2);

  00052	3a c3		 cmp	 al, bl

; 3308 :         if (!_Pred(*_Begin1++, *_Begin2++)) {

  00054	75 1c		 jne	 SHORT $LN17@Cmp_chrang

; 3305 :     // compare character ranges
; 3306 :     _BidIt1 _Res = _Begin1;
; 3307 :     while (_Begin1 != _End1 && _Begin2 != _End2) {

  00056	8b 4d fc	 mov	 ecx, DWORD PTR __Begin2$1$[ebp]
  00059	8b 45 14	 mov	 eax, DWORD PTR __End2$[ebp]
  0005c	3b 75 0c	 cmp	 esi, DWORD PTR __End1$[ebp]
  0005f	75 bf		 jne	 SHORT $LL2@Cmp_chrang
$LN21@Cmp_chrang:

; 3310 :         }
; 3311 :     }
; 3312 : 
; 3313 :     return _Begin2 == _End2 ? _Begin1 : _Res;

  00061	8b 55 08	 mov	 edx, DWORD PTR __Res$1$[ebp]
$LN3@Cmp_chrang:
  00064	3b c8		 cmp	 ecx, eax
  00066	5f		 pop	 edi
  00067	0f 44 d6	 cmove	 edx, esi

; 3314 : }

  0006a	5e		 pop	 esi
  0006b	8b c2		 mov	 eax, edx
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
$LN17@Cmp_chrang:

; 3309 :             return _Res;

  00072	8b 45 08	 mov	 eax, DWORD PTR __Res$1$[ebp]
  00075	5f		 pop	 edi

; 3314 : }

  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
??$_Cmp_chrange@PBDPBDU?$_Cmp_icase@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_icase@V?$regex_traits@D@std@@@0@@Z ENDP ; std::_Cmp_chrange<char const *,char const *,std::_Cmp_icase<std::regex_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z
_TEXT	SEGMENT
tv362 = -20						; size = 4
__Ex1$ = -16						; size = 1
__Ex2$ = -12						; size = 1
_this$1$ = -8						; size = 4
__Ix$1$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Icase$ = 16						; size = 1
??$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z PROC ; std::_Regex_traits<char>::lookup_classname<char const *>, COMDAT
; _this$ = ecx

; 334  :     char_class_type lookup_classname(_Iter _First, _Iter _Last, bool _Icase = false) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 335  :         // map [_First, _Last) to character class mask value
; 336  : #define _REGEX_CHAR_CLASS_NAME(n, c) \
; 337  :     { n, L##n, static_cast<unsigned int>(_STD size(n) - 1), c }
; 338  :         static constexpr _Cl_names _Names[] = {
; 339  :             // map class names to numeric constants
; 340  :             _REGEX_CHAR_CLASS_NAME("alnum", _Ch_alnum),
; 341  :             _REGEX_CHAR_CLASS_NAME("alpha", _Ch_alpha),
; 342  :             _REGEX_CHAR_CLASS_NAME("blank", _Ch_blank),
; 343  :             _REGEX_CHAR_CLASS_NAME("cntrl", _Ch_cntrl),
; 344  :             _REGEX_CHAR_CLASS_NAME("d", _Ch_digit),
; 345  :             _REGEX_CHAR_CLASS_NAME("digit", _Ch_digit),
; 346  :             _REGEX_CHAR_CLASS_NAME("graph", _Ch_graph),
; 347  :             _REGEX_CHAR_CLASS_NAME("lower", _Ch_lower),
; 348  :             _REGEX_CHAR_CLASS_NAME("print", _Ch_print),
; 349  :             _REGEX_CHAR_CLASS_NAME("punct", _Ch_punct),
; 350  :             _REGEX_CHAR_CLASS_NAME("space", _Ch_space),
; 351  :             _REGEX_CHAR_CLASS_NAME("s", _Ch_space),
; 352  :             _REGEX_CHAR_CLASS_NAME("upper", _Ch_upper),
; 353  :             _REGEX_CHAR_CLASS_NAME("w", static_cast<ctype_base::mask>(-1)),
; 354  :             _REGEX_CHAR_CLASS_NAME("xdigit", _Ch_xdigit),
; 355  :             {nullptr, nullptr, 0, 0},
; 356  :         };
; 357  : #undef _REGEX_CHAR_CLASS_NAME
; 358  : 
; 359  :         _Adl_verify_range(_First, _Last);
; 360  :         unsigned int _Ix = 0;

  00006	33 d2		 xor	 edx, edx
  00008	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000b	89 55 fc	 mov	 DWORD PTR __Ix$1$[ebp], edx

; 361  :         for (; _Names[_Ix]._Get<_Elem>(); ++_Ix) {

  0000e	39 15 00 00 00
	00		 cmp	 DWORD PTR ?_Names@?1???$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z@4QBU_Cl_names@2@B, edx
  00014	74 6f		 je	 SHORT $LN51@lookup_cla
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00019	53		 push	 ebx
  0001a	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0001d	56		 push	 esi
  0001e	8b f1		 mov	 esi, ecx
  00020	2b f3		 sub	 esi, ebx
  00022	33 c0		 xor	 eax, eax
  00024	89 75 ec	 mov	 DWORD PTR tv362[ebp], esi
  00027	57		 push	 edi
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@lookup_cla:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5580 :         if (_ULast1 - _UFirst1 != _ULast2 - _UFirst2) {

  00030	3b b0 08 00 00
	00		 cmp	 esi, DWORD PTR ?_Names@?1???$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z@4QBU_Cl_names@2@B[eax+8]
  00036	0f 85 7c 00 00
	00		 jne	 $LN46@lookup_cla

; 5525 :     auto _UFirst2      = _STD _Get_unwrapped_n(_First2, _STD _Idl_distance<_InIt1>(_UFirst1, _ULast1));

  0003c	8b b8 00 00 00
	00		 mov	 edi, DWORD PTR ?_Names@?1???$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z@4QBU_Cl_names@2@B[eax]
  00042	8b f3		 mov	 esi, ebx

; 5539 :     for (; _UFirst1 != _ULast1; ++_UFirst1, (void) ++_UFirst2) {

  00044	3b d9		 cmp	 ebx, ecx
  00046	74 3a		 je	 SHORT $LN63@lookup_cla
$LL21@lookup_cla:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 301  :         return _Getctype()->tolower(_Ch);

  00048	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5540 :         if (!_Pred(*_UFirst1, *_UFirst2)) {

  0004b	8a 07		 mov	 al, BYTE PTR [edi]
  0004d	88 45 f4	 mov	 BYTE PTR __Ex2$[ebp], al
  00050	8a 06		 mov	 al, BYTE PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 301  :         return _Getctype()->tolower(_Ch);

  00052	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  00055	ff 75 f4	 push	 DWORD PTR __Ex2$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5540 :         if (!_Pred(*_UFirst1, *_UFirst2)) {

  00058	88 45 f0	 mov	 BYTE PTR __Ex1$[ebp], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  0005b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005d	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00060	ff d0		 call	 eax
  00062	ff 75 f0	 push	 DWORD PTR __Ex1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 301  :         return _Getctype()->tolower(_Ch);

  00065	8a d8		 mov	 bl, al
  00067	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  0006a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  0006d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006f	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00072	ff d2		 call	 edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 231  :         return _Traits.translate_nocase(_Ex1) == _Traits.translate_nocase(_Ex2);

  00074	3a c3		 cmp	 al, bl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5540 :         if (!_Pred(*_UFirst1, *_UFirst2)) {

  00076	75 34		 jne	 SHORT $LN52@lookup_cla

; 5539 :     for (; _UFirst1 != _ULast1; ++_UFirst1, (void) ++_UFirst2) {

  00078	46		 inc	 esi
  00079	47		 inc	 edi
  0007a	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0007d	75 c9		 jne	 SHORT $LL21@lookup_cla
  0007f	8b 55 fc	 mov	 edx, DWORD PTR __Ix$1$[ebp]
$LN63@lookup_cla:
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
$LN51@lookup_cla:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 369  :         if (_Names[_Ix]._Get<_Elem>()) {

  00085	c1 e2 04	 shl	 edx, 4
  00088	33 c0		 xor	 eax, eax
  0008a	39 82 00 00 00
	00		 cmp	 DWORD PTR ?_Names@?1???$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z@4QBU_Cl_names@2@B[edx], eax
  00090	74 07		 je	 SHORT $LN6@lookup_cla

; 370  :             _Mask = _Names[_Ix]._Ctype;

  00092	0f b7 82 0c 00
	00 00		 movzx	 eax, WORD PTR ?_Names@?1???$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z@4QBU_Cl_names@2@B[edx+12]
$LN6@lookup_cla:

; 371  :         }
; 372  : 
; 373  :         if (_Icase && (_Mask & (_Ch_lower | _Ch_upper))) {

  00099	80 7d 10 00	 cmp	 BYTE PTR __Icase$[ebp], 0
  0009d	74 07		 je	 SHORT $LN7@lookup_cla
  0009f	a8 03		 test	 al, 3
  000a1	74 03		 je	 SHORT $LN7@lookup_cla

; 374  :             _Mask |= _Ch_lower | _Ch_upper;

  000a3	83 c8 03	 or	 eax, 3
$LN7@lookup_cla:

; 378  :     }

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 0c 00	 ret	 12			; 0000000cH
$LN52@lookup_cla:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5540 :         if (!_Pred(*_UFirst1, *_UFirst2)) {

  000ac	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  000af	8b 55 fc	 mov	 edx, DWORD PTR __Ix$1$[ebp]
  000b2	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  000b5	8b 75 ec	 mov	 esi, DWORD PTR tv362[ebp]
$LN46@lookup_cla:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 361  :         for (; _Names[_Ix]._Get<_Elem>(); ++_Ix) {

  000b8	42		 inc	 edx
  000b9	8b c2		 mov	 eax, edx
  000bb	89 55 fc	 mov	 DWORD PTR __Ix$1$[ebp], edx
  000be	c1 e0 04	 shl	 eax, 4
  000c1	83 b8 00 00 00
	00 00		 cmp	 DWORD PTR ?_Names@?1???$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z@4QBU_Cl_names@2@B[eax], 0
  000c8	0f 85 62 ff ff
	ff		 jne	 $LL4@lookup_cla
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5539 :     for (; _UFirst1 != _ULast1; ++_UFirst1, (void) ++_UFirst2) {

  000ce	eb b2		 jmp	 SHORT $LN63@lookup_cla
??$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z ENDP ; std::_Regex_traits<char>::lookup_classname<char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Resize@I@?$vector@IV?$allocator@I@std@@@std@@AAEXIABI@Z
_TEXT	SEGMENT
tv575 = -4						; size = 4
__Newsize$ = 8						; size = 4
$T2 = 8							; size = 4
__Val$ = 12						; size = 4
??$_Resize@I@?$vector@IV?$allocator@I@std@@@std@@AAEXIABI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize<unsigned int>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 1575 :         // trim or append elements, provide strong guarantee
; 1576 :         auto& _Al           = _Getal();
; 1577 :         auto& _My_data      = _Mypair._Myval2;
; 1578 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1579 :         pointer& _Mylast    = _My_data._Mylast;
; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1581 :         if (_Newsize < _Oldsize) { // trim

  00006	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0000f	8b da		 mov	 ebx, edx
  00011	8b 07		 mov	 eax, DWORD PTR [edi]
  00013	2b d8		 sub	 ebx, eax
  00015	c1 fb 02	 sar	 ebx, 2
  00018	3b f3		 cmp	 esi, ebx
  0001a	73 0f		 jae	 SHORT $LN2@Resize

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  0001c	8d 04 b0	 lea	 eax, DWORD PTR [eax+esi*4]

; 1610 :     }

  0001f	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
$LN2@Resize:

; 1583 :             _Orphan_range(_Newlast, _Mylast);
; 1584 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1585 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1586 :             _Mylast = _Newlast;
; 1587 :             return;
; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  0002b	0f 86 0e 01 00
	00		 jbe	 $LN3@Resize

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00031	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00034	2b c8		 sub	 ecx, eax
  00036	c1 f9 02	 sar	 ecx, 2

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  00039	3b f1		 cmp	 esi, ecx
  0003b	0f 86 eb 00 00
	00		 jbe	 $LN4@Resize

; 1538 :         if (_Newsize > max_size()) {

  00041	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00047	0f 87 fb 00 00
	00		 ja	 $LN109@Resize

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004d	8b d1		 mov	 edx, ecx
  0004f	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00054	d1 ea		 shr	 edx, 1
  00056	2b c2		 sub	 eax, edx
  00058	3b c8		 cmp	 ecx, eax
  0005a	76 19		 jbe	 SHORT $LN11@Resize

; 1997 :             return _Max; // geometric growth would overflow

  0005c	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00061	c7 45 fc fc ff
	ff ff		 mov	 DWORD PTR tv575[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006e	8b c8		 mov	 ecx, eax
  00070	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  00073	eb 46		 jmp	 SHORT $LN107@Resize
$LN11@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00075	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00078	3b c6		 cmp	 eax, esi
  0007a	73 13		 jae	 SHORT $LN12@Resize

; 2003 :             return _Newsize; // geometric growth would be insufficient

  0007c	8b c6		 mov	 eax, esi
$LN22@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  0007e	c1 e0 02	 shl	 eax, 2
  00081	89 45 fc	 mov	 DWORD PTR tv575[ebp], eax

; 227  :     if (_Bytes == 0) {

  00084	85 c0		 test	 eax, eax
  00086	75 14		 jne	 SHORT $LN26@Resize

; 228  :         return nullptr;

  00088	33 c9		 xor	 ecx, ecx
  0008a	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  0008d	eb 2f		 jmp	 SHORT $LN25@Resize
$LN12@Resize:

; 117  :         if (_Count > _Max_possible) {

  0008f	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00094	0f 87 b3 00 00
	00		 ja	 $LN110@Resize
  0009a	eb e2		 jmp	 SHORT $LN22@Resize
$LN26@Resize:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0009c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a1	72 0d		 jb	 SHORT $LN27@Resize

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a9	8b c8		 mov	 ecx, eax
  000ab	89 4d 08	 mov	 DWORD PTR $T2[ebp], ecx
  000ae	eb 0b		 jmp	 SHORT $LN107@Resize
$LN27@Resize:

; 136  :         return ::operator new(_Bytes);

  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  000b6	8b c8		 mov	 ecx, eax
  000b8	89 45 08	 mov	 DWORD PTR $T2[ebp], eax
$LN107@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1557 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);

  000bb	83 c4 04	 add	 esp, 4
$LN25@Resize:
  000be	57		 push	 edi
  000bf	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  000c2	8b c6		 mov	 eax, esi
  000c4	2b c3		 sub	 eax, ebx
  000c6	50		 push	 eax
  000c7	8d 04 99	 lea	 eax, DWORD PTR [ecx+ebx*4]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ??$_Uninitialized_fill_n@V?$allocator@I@std@@@std@@YAPAIPAIIABIAAV?$allocator@I@0@@Z ; std::_Uninitialized_fill_n<std::allocator<unsigned int> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000d0	8b 5d 08	 mov	 ebx, DWORD PTR $T2[ebp]
  000d3	53		 push	 ebx
  000d4	ff 77 04	 push	 DWORD PTR [edi+4]
  000d7	ff 37		 push	 DWORD PTR [edi]
  000d9	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z ; std::_Copy_memmove<unsigned int *,unsigned int *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000e0	83 c4 1c	 add	 esp, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000e3	85 c0		 test	 eax, eax
  000e5	74 2c		 je	 SHORT $LN53@Resize

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e7	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000ea	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ec	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ef	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f5	72 12		 jb	 SHORT $LN64@Resize

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fa	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fd	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ff	83 c0 fc	 add	 eax, -4			; fffffffcH
  00102	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00105	77 4b		 ja	 SHORT $LN61@Resize

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00107	8b c2		 mov	 eax, edx
$LN64@Resize:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00109	51		 push	 ecx
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00110	83 c4 08	 add	 esp, 8
$LN53@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00113	8d 04 b3	 lea	 eax, DWORD PTR [ebx+esi*4]
  00116	89 1f		 mov	 DWORD PTR [edi], ebx
  00118	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 45 fc	 mov	 eax, DWORD PTR tv575[ebp]
  0011e	03 c3		 add	 eax, ebx
  00120	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00123	5f		 pop	 edi

; 1610 :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN4@Resize:

; 1593 :                 _Resize_reallocate(_Newsize, _Val);
; 1594 :                 return;
; 1595 :             }
; 1596 : 
; 1597 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1598 :             const pointer _Oldlast = _Mylast;
; 1599 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1600 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);

  0012c	57		 push	 edi
  0012d	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00130	2b f3		 sub	 esi, ebx
  00132	56		 push	 esi
  00133	52		 push	 edx
  00134	e8 00 00 00 00	 call	 ??$_Uninitialized_fill_n@V?$allocator@I@std@@@std@@YAPAIPAIIABIAAV?$allocator@I@0@@Z ; std::_Uninitialized_fill_n<std::allocator<unsigned int> >
  00139	83 c4 10	 add	 esp, 16			; 00000010H

; 1610 :     }

  0013c	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN3@Resize:
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 08 00	 ret	 8
$LN109@Resize:

; 1539 :             _Xlength();

  00148	e8 00 00 00 00	 call	 ?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
$LN110@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0014d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN61@Resize:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00152	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN105@Resize:
  00157	cc		 int	 3
??$_Resize@I@?$vector@IV?$allocator@I@std@@@std@@AAEXIABI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$fill_n@V?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@I_N@std@@YA?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@0@V10@IAB_N@Z
_TEXT	SEGMENT
__Last$1 = -16						; size = 8
$T2 = -12						; size = 4
__FirstDestMask$1$ = -8					; size = 4
__FirstSourceMask$1$ = -4				; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Count_raw$ = 20					; size = 4
__Val$1$ = 23						; size = 1
__Val$ = 24						; size = 4
??$fill_n@V?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@I_N@std@@YA?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@0@V10@IAB_N@Z PROC ; std::fill_n<std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >,unsigned int,bool>, COMDAT

; 5342 : _CONSTEXPR20 _OutIt fill_n(_OutIt _Dest, const _Diff _Count_raw, const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5343 :     // copy _Val _Count times through [_Dest, ...)
; 5344 :     _Algorithm_int_t<_Diff> _Count = _Count_raw;
; 5345 :     if (0 < _Count) {

  00003	8b 4d 14	 mov	 ecx, DWORD PTR __Count_raw$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp+4]
  0000c	85 c9		 test	 ecx, ecx
  0000e	0f 84 fd 00 00
	00		 je	 $LN2@fill_n
  00014	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2767 :         _Vb_iterator _Tmp = *this;

  00015	8b 5d 0c	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	89 55 f4	 mov	 DWORD PTR __Last$1[ebp+4], edx

; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  0001d	79 20		 jns	 SHORT $LN11@fill_n
  0001f	8b c1		 mov	 eax, ecx
  00021	f7 d8		 neg	 eax
  00023	3b d0		 cmp	 edx, eax
  00025	73 18		 jae	 SHORT $LN11@fill_n

; 2582 :             this->_Myoff += static_cast<_Size_type>(_Off);

  00027	03 ca		 add	 ecx, edx

; 2583 :             this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;

  00029	8b fb		 mov	 edi, ebx
  0002b	8b c1		 mov	 eax, ecx
  0002d	8b f1		 mov	 esi, ecx
  0002f	f7 d0		 not	 eax
  00031	c1 e8 05	 shr	 eax, 5
  00034	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  0003b	2b f8		 sub	 edi, eax

; 2584 :             this->_Myoff %= _VBITS;
; 2585 :         } else { // add non-negative increment

  0003d	eb 0c		 jmp	 SHORT $LN33@fill_n
$LN11@fill_n:

; 2586 :             this->_Myoff += static_cast<_Size_type>(_Off);

  0003f	03 ca		 add	 ecx, edx
  00041	8b f1		 mov	 esi, ecx
  00043	8b c6		 mov	 eax, esi
  00045	c1 e8 05	 shr	 eax, 5

; 2587 :             this->_Myptr += this->_Myoff / _VBITS;

  00048	8d 3c 83	 lea	 edi, DWORD PTR [ebx+eax*4]
$LN33@fill_n:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5348 :             _STD _Fill_vbool(_Dest, _Last, _Val);

  0004b	8b 45 18	 mov	 eax, DWORD PTR __Val$[ebp]
  0004e	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00051	83 e6 1f	 and	 esi, 31			; 0000001fH
  00054	89 4d f4	 mov	 DWORD PTR $T2[ebp], ecx
  00057	8a 00		 mov	 al, BYTE PTR [eax]
  00059	88 45 17	 mov	 BYTE PTR __Val$1$[ebp], al
  0005c	3b df		 cmp	 ebx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2627 :         return this->_Myptr == _Right._Myptr && this->_Myoff == _Right._Myoff;

  0005e	75 08		 jne	 SHORT $LN23@fill_n
  00060	3b d6		 cmp	 edx, esi
  00062	0f 84 9a 00 00
	00		 je	 $LN18@fill_n
$LN23@fill_n:

; 3648 :     _Vbase* const _VbLast = const_cast<_Vbase*>(_Last._Myptr);

  00068	8b ca		 mov	 ecx, edx
  0006a	b8 ff ff ff ff	 mov	 eax, -1
  0006f	d3 e0		 shl	 eax, cl

; 3649 : 
; 3650 :     const auto _FirstSourceMask = static_cast<_Vbase>(-1) << _First._Myoff;
; 3651 :     const auto _FirstDestMask   = ~_FirstSourceMask;
; 3652 :     const auto _FillVal         = static_cast<_Vbase>(_Val ? -1 : 0);

  00071	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00073	89 45 fc	 mov	 DWORD PTR __FirstSourceMask$1$[ebp], eax
  00076	f7 d0		 not	 eax
  00078	89 45 f8	 mov	 DWORD PTR __FirstDestMask$1$[ebp], eax

; 3653 : 
; 3654 :     if (_VbFirst == _VbLast) {

  0007b	3b df		 cmp	 ebx, edi
  0007d	75 32		 jne	 SHORT $LN17@fill_n

; 3655 :         // We already excluded _First == _Last, so here _Last._Myoff > 0 and the shift is safe
; 3656 :         const auto _LastSourceMask = static_cast<_Vbase>(-1) >> (_VBITS - _Last._Myoff);

  0007f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00084	83 ca ff	 or	 edx, -1
  00087	2b ce		 sub	 ecx, esi
  00089	d3 ea		 shr	 edx, cl

; 3657 :         const auto _LastDestMask   = ~_LastSourceMask;

  0008b	8b ca		 mov	 ecx, edx
  0008d	f7 d1		 not	 ecx

; 3658 :         const auto _SourceMask     = _FirstSourceMask & _LastSourceMask;
; 3659 :         const auto _DestMask       = _FirstDestMask | _LastDestMask;

  0008f	0b c8		 or	 ecx, eax

; 3660 :         *_VbFirst                  = (*_VbFirst & _DestMask) | (_FillVal & _SourceMask);

  00091	33 c0		 xor	 eax, eax
  00093	23 0b		 and	 ecx, DWORD PTR [ebx]
  00095	38 45 17	 cmp	 BYTE PTR __Val$1$[ebp], al
  00098	0f 45 c2	 cmovne	 eax, edx
  0009b	23 45 fc	 and	 eax, DWORD PTR __FirstSourceMask$1$[ebp]
  0009e	0b c8		 or	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5349 :             return _Last;

  000a0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 3660 :         *_VbFirst                  = (*_VbFirst & _DestMask) | (_FillVal & _SourceMask);

  000a3	89 0b		 mov	 DWORD PTR [ebx], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5349 :             return _Last;

  000a5	89 38		 mov	 DWORD PTR [eax], edi
  000a7	5f		 pop	 edi
  000a8	89 70 04	 mov	 DWORD PTR [eax+4], esi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx

; 5377 : }

  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
$LN17@fill_n:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 3664 :     *_VbFirst = (*_VbFirst & _FirstDestMask) | (_FillVal & _FirstSourceMask);

  000b1	8a 55 17	 mov	 dl, BYTE PTR __Val$1$[ebp]
  000b4	33 c0		 xor	 eax, eax
  000b6	84 d2		 test	 dl, dl
  000b8	0f 45 45 fc	 cmovne	 eax, DWORD PTR __FirstSourceMask$1$[ebp]
  000bc	23 4d f8	 and	 ecx, DWORD PTR __FirstDestMask$1$[ebp]
  000bf	0b c1		 or	 eax, ecx

; 3665 :     ++_VbFirst;

  000c1	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  000c4	89 03		 mov	 DWORD PTR [ebx], eax

; 3666 : 
; 3667 : #if _HAS_CXX20
; 3668 :     if (_STD is_constant_evaluated()) {
; 3669 :         for (; _VbFirst != _VbLast; ++_VbFirst) {
; 3670 :             *_VbFirst = _FillVal;
; 3671 :         }
; 3672 :     } else
; 3673 : #endif // _HAS_CXX20
; 3674 :     {
; 3675 :         const auto _VbFirst_ch = reinterpret_cast<const char*>(_VbFirst);
; 3676 :         const auto _VbLast_ch  = reinterpret_cast<const char*>(_VbLast);
; 3677 :         const auto _Count_ch   = static_cast<size_t>(_VbLast_ch - _VbFirst_ch);

  000c6	8b c7		 mov	 eax, edi
  000c8	2b c1		 sub	 eax, ecx

; 3678 :         const auto _ValChar    = static_cast<unsigned char>(_Val ? -1 : 0);

  000ca	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH

; 3679 :         _CSTD memset(_VbFirst, _ValChar, _Count_ch);

  000cf	50		 push	 eax
  000d0	33 c0		 xor	 eax, eax
  000d2	84 d2		 test	 dl, dl
  000d4	0f 45 c3	 cmovne	 eax, ebx
  000d7	50		 push	 eax
  000d8	51		 push	 ecx
  000d9	e8 00 00 00 00	 call	 _memset
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3680 :         _VbFirst = _VbLast;

  000e1	85 f6		 test	 esi, esi

; 3681 :     }
; 3682 : 
; 3683 :     if (_Last._Myoff != 0) {

  000e3	74 1d		 je	 SHORT $LN18@fill_n

; 3684 :         const auto _LastSourceMask = static_cast<_Vbase>(-1) >> (_VBITS - _Last._Myoff);

  000e5	83 ca ff	 or	 edx, -1
  000e8	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000ed	2b 4d f4	 sub	 ecx, DWORD PTR $T2[ebp]

; 3685 :         const auto _LastDestMask   = ~_LastSourceMask;
; 3686 :         *_VbFirst                  = (*_VbFirst & _LastDestMask) | (_FillVal & _LastSourceMask);

  000f0	33 c0		 xor	 eax, eax
  000f2	d3 ea		 shr	 edx, cl
  000f4	38 45 17	 cmp	 BYTE PTR __Val$1$[ebp], al
  000f7	0f 45 c2	 cmovne	 eax, edx
  000fa	f7 d2		 not	 edx
  000fc	23 17		 and	 edx, DWORD PTR [edi]
  000fe	0b c2		 or	 eax, edx
  00100	89 07		 mov	 DWORD PTR [edi], eax
$LN18@fill_n:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5349 :             return _Last;

  00102	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00105	89 38		 mov	 DWORD PTR [eax], edi
  00107	5f		 pop	 edi
  00108	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx

; 5377 : }

  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c3		 ret	 0
$LN2@fill_n:

; 5350 :         } else {
; 5351 :             auto _UDest = _STD _Get_unwrapped_n(_Dest, _Count);
; 5352 : #if _HAS_CXX20
; 5353 :             if (!_STD is_constant_evaluated())
; 5354 : #endif // _HAS_CXX20
; 5355 :             {
; 5356 :                 if constexpr (_Fill_memset_is_safe<decltype(_UDest), _Ty>) {
; 5357 :                     _STD _Fill_memset(_UDest, _Val, static_cast<size_t>(_Count));
; 5358 :                     _STD _Seek_wrapped(_Dest, _UDest + _Count);
; 5359 :                     return _Dest;
; 5360 :                 } else if constexpr (_Fill_zero_memset_is_safe<decltype(_UDest), _Ty>) {
; 5361 :                     if (_STD _Is_all_bits_zero(_Val)) {
; 5362 :                         _STD _Fill_zero_memset(_UDest, static_cast<size_t>(_Count));
; 5363 :                         _STD _Seek_wrapped(_Dest, _UDest + _Count);
; 5364 :                         return _Dest;
; 5365 :                     }
; 5366 :                 }
; 5367 :             }
; 5368 : 
; 5369 :             for (; 0 < _Count; --_Count, (void) ++_UDest) {
; 5370 :                 *_UDest = _Val;
; 5371 :             }
; 5372 : 
; 5373 :             _STD _Seek_wrapped(_Dest, _UDest);
; 5374 :         }
; 5375 :     }
; 5376 :     return _Dest;

  00111	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00114	8b 4d 0c	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00117	89 08		 mov	 DWORD PTR [eax], ecx
  00119	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 5377 : }

  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
??$fill_n@V?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@I_N@std@@YA?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@0@V10@IAB_N@Z ENDP ; std::fill_n<std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >,unsigned int,bool>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??Y?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator+=, COMDAT
; _this$ = ecx

; 2761 :     _CONSTEXPR20 _Vb_iterator& operator+=(const difference_type _Off) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000a	85 c9		 test	 ecx, ecx
  0000c	79 31		 jns	 SHORT $LN10@operator
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	8b c1		 mov	 eax, ecx
  00013	f7 d8		 neg	 eax
  00015	3b f0		 cmp	 esi, eax
  00017	73 26		 jae	 SHORT $LN10@operator

; 2582 :             this->_Myoff += static_cast<_Size_type>(_Off);

  00019	03 f1		 add	 esi, ecx

; 2583 :             this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;

  0001b	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00020	8b ce		 mov	 ecx, esi

; 2762 :         _Mybase::operator+=(_Off);
; 2763 :         return *this;

  00022	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 2583 :             this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;

  00025	f7 d1		 not	 ecx
  00027	c1 e9 05	 shr	 ecx, 5
  0002a	c1 e1 02	 shl	 ecx, 2
  0002d	2b c1		 sub	 eax, ecx

; 2762 :         _Mybase::operator+=(_Off);
; 2763 :         return *this;

  0002f	01 07		 add	 DWORD PTR [edi], eax
  00031	83 e6 1f	 and	 esi, 31			; 0000001fH
  00034	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00037	8b c7		 mov	 eax, edi
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi

; 2764 :     }

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
$LN10@operator:

; 2586 :             this->_Myoff += static_cast<_Size_type>(_Off);

  0003f	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00042	03 f1		 add	 esi, ecx

; 2587 :             this->_Myptr += this->_Myoff / _VBITS;

  00044	8b c6		 mov	 eax, esi

; 2762 :         _Mybase::operator+=(_Off);
; 2763 :         return *this;

  00046	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 2587 :             this->_Myptr += this->_Myoff / _VBITS;

  00049	c1 e8 05	 shr	 eax, 5
  0004c	c1 e0 02	 shl	 eax, 2

; 2762 :         _Mybase::operator+=(_Off);
; 2763 :         return *this;

  0004f	01 07		 add	 DWORD PTR [edi], eax
  00051	83 e6 1f	 and	 esi, 31			; 0000001fH
  00054	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00057	8b c7		 mov	 eax, edi
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi

; 2764 :     }

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
??Y?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -4					; size = 4
__Newsize$ = 8						; size = 4
tv668 = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 1575 :         // trim or append elements, provide strong guarantee
; 1576 :         auto& _Al           = _Getal();
; 1577 :         auto& _My_data      = _Mypair._Myval2;
; 1578 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1579 :         pointer& _Mylast    = _My_data._Mylast;
; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1581 :         if (_Newsize < _Oldsize) { // trim

  00006	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  0000f	8b c3		 mov	 eax, ebx
  00011	8b 17		 mov	 edx, DWORD PTR [edi]
  00013	2b c2		 sub	 eax, edx
  00015	c1 f8 03	 sar	 eax, 3
  00018	89 45 fc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax
  0001b	3b f0		 cmp	 esi, eax
  0001d	73 0f		 jae	 SHORT $LN2@Resize

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  0001f	8d 04 f2	 lea	 eax, DWORD PTR [edx+esi*8]

; 1583 :             _Orphan_range(_Newlast, _Mylast);
; 1584 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1585 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1586 :             _Mylast = _Newlast;

  00022	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00025	5f		 pop	 edi

; 1610 :     }

  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN2@Resize:

; 1587 :             return;
; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  0002e	0f 86 0d 01 00
	00		 jbe	 $LN3@Resize

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00034	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00037	2b ca		 sub	 ecx, edx
  00039	c1 f9 03	 sar	 ecx, 3

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  0003c	3b f1		 cmp	 esi, ecx
  0003e	0f 86 e5 00 00
	00		 jbe	 $LN4@Resize

; 1538 :         if (_Newsize > max_size()) {

  00044	81 fe ff ff ff
	1f		 cmp	 esi, 536870911		; 1fffffffH
  0004a	0f 87 fa 00 00
	00		 ja	 $LN144@Resize

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00050	8b d1		 mov	 edx, ecx
  00052	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  00057	d1 ea		 shr	 edx, 1
  00059	2b c2		 sub	 eax, edx
  0005b	3b c8		 cmp	 ecx, eax
  0005d	76 14		 jbe	 SHORT $LN11@Resize

; 1997 :             return _Max; // geometric growth would overflow

  0005f	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  00064	c7 45 08 f8 ff
	ff ff		 mov	 DWORD PTR tv668[ebp], -8 ; fffffff8H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00071	eb 39		 jmp	 SHORT $LN142@Resize
$LN11@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00073	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00076	3b c6		 cmp	 eax, esi
  00078	73 10		 jae	 SHORT $LN12@Resize

; 2003 :             return _Newsize; // geometric growth would be insufficient

  0007a	8b c6		 mov	 eax, esi
$LN22@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  0007c	c1 e0 03	 shl	 eax, 3
  0007f	89 45 08	 mov	 DWORD PTR tv668[ebp], eax

; 227  :     if (_Bytes == 0) {

  00082	85 c0		 test	 eax, eax
  00084	75 11		 jne	 SHORT $LN26@Resize

; 228  :         return nullptr;

  00086	33 db		 xor	 ebx, ebx
  00088	eb 27		 jmp	 SHORT $LN25@Resize
$LN12@Resize:

; 117  :         if (_Count > _Max_possible) {

  0008a	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0008f	0f 87 ba 00 00
	00		 ja	 $LN145@Resize
  00095	eb e5		 jmp	 SHORT $LN22@Resize
$LN26@Resize:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00097	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0009c	72 08		 jb	 SHORT $LN27@Resize

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a4	eb 06		 jmp	 SHORT $LN142@Resize
$LN27@Resize:

; 136  :         return ::operator new(_Bytes);

  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN142@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000ac	8b d8		 mov	 ebx, eax
  000ae	83 c4 04	 add	 esp, 4
$LN25@Resize:
  000b1	8b 45 fc	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000b4	8b ce		 mov	 ecx, esi
  000b6	8d 14 c3	 lea	 edx, DWORD PTR [ebx+eax*8]
  000b9	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2056 :     for (; 0 < _Count; --_Count) {

  000bb	74 13		 je	 SHORT $LN36@Resize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000bd	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  000c4	50		 push	 eax
  000c5	6a 00		 push	 0
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 _memset
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN36@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000d0	53		 push	 ebx
  000d1	ff 77 04	 push	 DWORD PTR [edi+4]
  000d4	ff 37		 push	 DWORD PTR [edi]
  000d6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@00@Z ; std::_Copy_memmove<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000db	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000dd	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000e0	85 c0		 test	 eax, eax
  000e2	74 2c		 je	 SHORT $LN66@Resize

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e4	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000e7	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e9	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ec	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f2	72 12		 jb	 SHORT $LN77@Resize

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f7	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fa	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fc	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ff	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00102	77 50		 ja	 SHORT $LN74@Resize

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00104	8b c2		 mov	 eax, edx
$LN77@Resize:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00106	51		 push	 ecx
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010d	83 c4 08	 add	 esp, 8
$LN66@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00110	8d 04 f3	 lea	 eax, DWORD PTR [ebx+esi*8]
  00113	89 1f		 mov	 DWORD PTR [edi], ebx
  00115	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00118	8b 45 08	 mov	 eax, DWORD PTR tv668[ebp]
  0011b	03 c3		 add	 eax, ebx
  0011d	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00120	5f		 pop	 edi

; 1610 :     }

  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c2 08 00	 ret	 8
$LN4@Resize:

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00129	2b f0		 sub	 esi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2056 :     for (; 0 < _Count; --_Count) {

  0012b	74 11		 je	 SHORT $LN109@Resize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  0012d	c1 e6 03	 shl	 esi, 3
  00130	56		 push	 esi
  00131	6a 00		 push	 0
  00133	53		 push	 ebx
  00134	e8 00 00 00 00	 call	 _memset
  00139	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013c	03 de		 add	 ebx, esi
$LN109@Resize:
  0013e	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
$LN3@Resize:
  00141	5f		 pop	 edi

; 1610 :     }

  00142	5e		 pop	 esi
  00143	5b		 pop	 ebx
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c2 08 00	 ret	 8
$LN144@Resize:

; 1539 :             _Xlength();

  0014a	e8 00 00 00 00	 call	 ?_Xlength@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@CAXXZ ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Xlength
$LN145@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0014f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN74@Resize:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00154	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN141@Resize:
  00159	cc		 int	 3
??$_Resize@U_Value_init_tag@std@@@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z
_TEXT	SEGMENT
__Eq$GSCopy$1$ = -184					; size = 4
__Ix$1$ = -180						; size = 4
__Traits$GSCopy$1$ = -176				; size = 4
$T2 = -172						; size = 8
$T3 = -168						; size = 4
__Old_capacity$1$ = -168				; size = 4
__Temp$4 = -164						; size = 12
$T5 = -152						; size = 4
__Result$2$ = -152					; size = 4
$T6 = -148						; size = 4
__Count$1$ = -148					; size = 4
$T7 = -144						; size = 4
$T8 = -137						; size = 1
$T9 = -136						; size = 24
$T10 = -112						; size = 24
$T11 = -104						; size = 16
$T12 = -88						; size = 24
__Str0$ = -64						; size = 24
__Str1$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Ch$ = 8						; size = 1
__Eq$ = 12						; size = 4
__Traits$ = 16						; size = 4
??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z PROC ; std::_Lookup_equiv<char,std::regex_traits<char> >, COMDAT

; 3344 : bool _Lookup_equiv(typename _RxTraits::_Uelem _Ch, const _Sequence<_Elem>* _Eq, const _RxTraits& _Traits) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 75 0c	 mov	 esi, DWORD PTR __Eq$[ebp]
  00030	33 c0		 xor	 eax, eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR __Traits$[ebp]
  00035	0f 57 c0	 xorps	 xmm0, xmm0
  00038	89 85 58 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003e	0f 11 45 c0	 movups	 XMMWORD PTR __Str0$[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3344 : bool _Lookup_equiv(typename _RxTraits::_Uelem _Ch, const _Sequence<_Elem>* _Eq, const _RxTraits& _Traits) {

  00042	89 b5 48 ff ff
	ff		 mov	 DWORD PTR __Eq$GSCopy$1$[ebp], esi
  00048	89 8d 50 ff ff
	ff		 mov	 DWORD PTR __Traits$GSCopy$1$[ebp], ecx
  0004e	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  00054	89 45 d0	 mov	 DWORD PTR __Str0$[ebp+16], eax

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00057	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR __Str0$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0005e	88 45 c0	 mov	 BYTE PTR __Str0$[ebp], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3346 :     typename _RxTraits::string_type _Str0;

  00061	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00064	0f 11 45 d8	 movups	 XMMWORD PTR __Str1$[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00068	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Str1$[ebp+20], 15 ; 0000000fH

; 2271 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  0006f	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  00072	88 45 d8	 mov	 BYTE PTR __Str1$[ebp], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3349 :     _Str1 = _Traits.transform_primary(_Str1.begin(), _Str1.end());

  00075	8d 45 d9	 lea	 eax, DWORD PTR __Str1$[ebp+1]
  00078	50		 push	 eax
  00079	8d 45 d8	 lea	 eax, DWORD PTR __Str1$[ebp]
  0007c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00080	50		 push	 eax
  00081	8d 45 90	 lea	 eax, DWORD PTR $T10[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2269 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00084	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR __Str1$[ebp+16], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3349 :     _Str1 = _Traits.transform_primary(_Str1.begin(), _Str1.end());

  0008b	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2272 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  0008c	c6 45 d9 00	 mov	 BYTE PTR __Str1$[ebp+1], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3349 :     _Str1 = _Traits.transform_primary(_Str1.begin(), _Str1.end());

  00090	e8 00 00 00 00	 call	 ??$transform_primary@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z ; std::_Regex_traits<char>::transform_primary<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >
  00095	8b f8		 mov	 edi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1202 :         if (this == _STD addressof(_Right)) {

  00097	8d 45 d8	 lea	 eax, DWORD PTR __Str1$[ebp]
  0009a	3b c7		 cmp	 eax, edi
  0009c	74 68		 je	 SHORT $LN643@Lookup_equ

; 434  :         return _Myres > _Small_string_capacity;

  0009e	8b 4d ec	 mov	 ecx, DWORD PTR __Str1$[ebp+20]
  000a1	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000a4	76 2c		 jbe	 SHORT $LN626@Lookup_equ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a6	8b 55 d8	 mov	 edx, DWORD PTR __Str1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000a9	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000aa	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ac	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b2	72 14		 jb	 SHORT $LN637@Lookup_equ

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000b7	83 c1 23	 add	 ecx, 35			; 00000023H
  000ba	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000bc	83 c0 fc	 add	 eax, -4			; fffffffcH
  000bf	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c2	0f 87 9d 04 00
	00		 ja	 $LN682@Lookup_equ
$LN637@Lookup_equ:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000c8	51		 push	 ecx
  000c9	52		 push	 edx
  000ca	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000cf	83 c4 08	 add	 esp, 8
$LN626@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  000d2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Str1$[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  000d9	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Str1$[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000e0	c6 45 d8 00	 mov	 BYTE PTR __Str1$[ebp], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000e4	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  000e7	0f 11 45 d8	 movups	 XMMWORD PTR __Str1$[ebp], xmm0
  000eb	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  000f0	66 0f d6 45 e8	 movq	 QWORD PTR __Str1$[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  000f5	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  000fc	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00103	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN643@Lookup_equ:

; 434  :         return _Myres > _Small_string_capacity;

  00106	8b 4d a4	 mov	 ecx, DWORD PTR $T10[ebp+20]
  00109	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0010c	76 2c		 jbe	 SHORT $LN674@Lookup_equ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010e	8b 55 90	 mov	 edx, DWORD PTR $T10[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00111	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00112	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00114	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011a	72 14		 jb	 SHORT $LN685@Lookup_equ

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0011c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0011f	83 c1 23	 add	 ecx, 35			; 00000023H
  00122	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00124	83 c0 fc	 add	 eax, -4			; fffffffcH
  00127	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012a	0f 87 35 04 00
	00		 ja	 $LN682@Lookup_equ
$LN685@Lookup_equ:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00130	51		 push	 ecx
  00131	52		 push	 edx
  00132	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00137	83 c4 08	 add	 esp, 8
$LN674@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3350 :     while (_Eq) { // look for sequence of elements that are the right size

  0013a	85 f6		 test	 esi, esi
  0013c	0f 84 78 03 00
	00		 je	 $LN728@Lookup_equ
$LL2@Lookup_equ:

; 3351 :         for (unsigned int _Ix = 0; _Ix < _Eq->_Data._Size(); _Ix += _Eq->_Sz) { // look for _Ch

  00142	33 c9		 xor	 ecx, ecx
  00144	89 8d 4c ff ff
	ff		 mov	 DWORD PTR __Ix$1$[ebp], ecx
  0014a	39 4e 08	 cmp	 DWORD PTR [esi+8], ecx
  0014d	0f 86 56 03 00
	00		 jbe	 $LN747@Lookup_equ
$LL6@Lookup_equ:

; 3352 :             _Str0.assign(_Eq->_Data._Str() + _Ix, _Eq->_Sz);

  00153	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00156	8b 3e		 mov	 edi, DWORD PTR [esi]
  00158	03 c1		 add	 eax, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  0015a	8b 4d d4	 mov	 ecx, DWORD PTR __Str0$[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3352 :             _Str0.assign(_Eq->_Data._Str() + _Ix, _Eq->_Sz);

  0015d	89 bd 6c ff ff
	ff		 mov	 DWORD PTR $T6[ebp], edi
  00163	89 85 68 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  00169	89 8d 58 ff ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], ecx
  0016f	3b f9		 cmp	 edi, ecx
  00171	77 24		 ja	 SHORT $LN15@Lookup_equ

; 434  :         return _Myres > _Small_string_capacity;

  00173	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00176	89 7d d0	 mov	 DWORD PTR __Str0$[ebp+16], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00179	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  0017a	8d 75 c0	 lea	 esi, DWORD PTR __Str0$[ebp]

; 417  :         if (_Large_mode_engaged()) {

  0017d	0f 47 75 c0	 cmova	 esi, DWORD PTR __Str0$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00181	50		 push	 eax
  00182	56		 push	 esi
  00183	e8 00 00 00 00	 call	 _memmove
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00188	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0018c	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1601 :             return *this;

  0018f	8b 7d c0	 mov	 edi, DWORD PTR __Str0$[ebp]
  00192	e9 db 00 00 00	 jmp	 $LN30@Lookup_equ
$LN15@Lookup_equ:

; 2962 :         if (_New_size > max_size()) {

  00197	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  0019d	0f 87 cc 03 00
	00		 ja	 $LN723@Lookup_equ

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  001a3	8b f7		 mov	 esi, edi
  001a5	83 ce 0f	 or	 esi, 15			; 0000000fH
  001a8	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  001ae	76 12		 jbe	 SHORT $LN36@Lookup_equ

; 2944 :             return _Max;

  001b0	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  001b5	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001c0	eb 49		 jmp	 SHORT $LN751@Lookup_equ
$LN36@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  001c2	8b d1		 mov	 edx, ecx
  001c4	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  001c9	d1 ea		 shr	 edx, 1
  001cb	2b c2		 sub	 eax, edx
  001cd	3b c8		 cmp	 ecx, eax
  001cf	76 12		 jbe	 SHORT $LN37@Lookup_equ

; 2948 :             return _Max;

  001d1	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  001d6	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001e1	eb 28		 jmp	 SHORT $LN751@Lookup_equ
$LN37@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  001e3	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  001e6	3b f0		 cmp	 esi, eax
  001e8	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  001eb	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  001ee	85 c0		 test	 eax, eax
  001f0	75 04		 jne	 SHORT $LN50@Lookup_equ

; 228  :         return nullptr;

  001f2	33 ff		 xor	 edi, edi
  001f4	eb 1a		 jmp	 SHORT $LN49@Lookup_equ
$LN50@Lookup_equ:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  001f6	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  001fb	72 08		 jb	 SHORT $LN51@Lookup_equ

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00203	eb 06		 jmp	 SHORT $LN751@Lookup_equ
$LN51@Lookup_equ:

; 136  :         return ::operator new(_Bytes);

  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN751@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  0020b	8b f8		 mov	 edi, eax
  0020d	83 c4 04	 add	 esp, 4
$LN49@Lookup_equ:
  00210	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00216	50		 push	 eax
  00217	ff b5 68 ff ff
	ff		 push	 DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  0021d	89 45 d0	 mov	 DWORD PTR __Str0$[ebp+16], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00220	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  00221	89 75 d4	 mov	 DWORD PTR __Str0$[ebp+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00224	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00229	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0022f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00232	c6 04 07 00	 mov	 BYTE PTR [edi+eax], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  00236	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR __Old_capacity$1$[ebp]
  0023c	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0023f	76 2e		 jbe	 SHORT $LN29@Lookup_equ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00241	8b 55 c0	 mov	 edx, DWORD PTR __Str0$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00244	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00247	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00249	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0024f	72 14		 jb	 SHORT $LN79@Lookup_equ

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00251	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00254	83 c1 23	 add	 ecx, 35			; 00000023H
  00257	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00259	83 c0 fc	 add	 eax, -4			; fffffffcH
  0025c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0025f	0f 87 05 03 00
	00		 ja	 $LN453@Lookup_equ
$LN79@Lookup_equ:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00265	51		 push	 ecx
  00266	52		 push	 edx
  00267	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0026c	83 c4 08	 add	 esp, 8
$LN29@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  0026f	89 7d c0	 mov	 DWORD PTR __Str0$[ebp], edi
$LN30@Lookup_equ:

; 434  :         return _Myres > _Small_string_capacity;

  00272	83 7d d4 0f	 cmp	 DWORD PTR __Str0$[ebp+20], 15 ; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  00276	8d 4d c0	 lea	 ecx, DWORD PTR __Str0$[ebp]

; 2146 :         return iterator(

  00279	8b 75 d0	 mov	 esi, DWORD PTR __Str0$[ebp+16]

; 417  :         if (_Large_mode_engaged()) {

  0027c	0f 47 cf	 cmova	 ecx, edi

; 2146 :         return iterator(

  0027f	03 f1		 add	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00281	83 7d d4 0f	 cmp	 DWORD PTR __Str0$[ebp+20], 15 ; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  00285	8d 4d c0	 lea	 ecx, DWORD PTR __Str0$[ebp]

; 417  :         if (_Large_mode_engaged()) {

  00288	0f 47 cf	 cmova	 ecx, edi
  0028b	89 8d 68 ff ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 313  :         string_type _Res;

  00291	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  00297	0f 57 c0	 xorps	 xmm0, xmm0
  0029a	83 c8 01	 or	 eax, 1

; 3353 :             _Str0 = _Traits.transform_primary(_Str0.begin(), _Str0.end());

  0029d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  002a1	33 ff		 xor	 edi, edi

; 837  :         _My_data._Myres  = _Small_string_capacity;

  002a3	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR $T12[ebp+20], 15 ; 0000000fH
  002aa	89 7d b8	 mov	 DWORD PTR $T12[ebp+16], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 313  :         string_type _Res;

  002ad	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  002b3	89 85 58 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  002b9	0f 11 45 a8	 movups	 XMMWORD PTR $T12[ebp], xmm0

; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  002bd	c6 45 a8 00	 mov	 BYTE PTR $T12[ebp], 0

; 171  :         return _Ptr == _Right._Ptr;

  002c1	3b ce		 cmp	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 315  :         if (_First != _Last) { // non-empty string, transform it

  002c3	0f 84 02 01 00
	00		 je	 $LN745@Lookup_equ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  002c9	33 d2		 xor	 edx, edx
  002cb	89 bd 5c ff ff
	ff		 mov	 DWORD PTR __Temp$4[ebp], edi

; 681  :         auto _ULast  = _STD _Get_unwrapped(_Last);

  002d1	8b c6		 mov	 eax, esi

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  002d3	89 95 60 ff ff
	ff		 mov	 DWORD PTR __Temp$4[ebp+4], edx

; 681  :         auto _ULast  = _STD _Get_unwrapped(_Last);

  002d9	2b c1		 sub	 eax, ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  002db	89 95 64 ff ff
	ff		 mov	 DWORD PTR __Temp$4[ebp+8], edx

; 681  :         auto _ULast  = _STD _Get_unwrapped(_Last);

  002e1	89 85 6c ff ff
	ff		 mov	 DWORD PTR __Count$1$[ebp], eax

; 2096 :         if (_Count != 0) {

  002e7	74 38		 je	 SHORT $LN748@Lookup_equ

; 2097 :             _Buy_nonzero(_Count);

  002e9	50		 push	 eax
  002ea	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR __Temp$4[ebp]
  002f0	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ; std::vector<char,std::allocator<char> >::_Buy_nonzero
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1852 :                 _STD _Copy_memmove(_STD _To_address(_UFirst), _STD _To_address(_ULast), _STD _Unfancy(_Dest));

  002f5	8b bd 5c ff ff
	ff		 mov	 edi, DWORD PTR __Temp$4[ebp]
  002fb	57		 push	 edi
  002fc	56		 push	 esi
  002fd	ff b5 68 ff ff
	ff		 push	 DWORD PTR __Result$2$[ebp]
  00303	e8 00 00 00 00	 call	 ??$_Copy_memmove@PADPAD@std@@YAPADPAD00@Z ; std::_Copy_memmove<char *,char *>

; 1853 :                 _Dest += _ULast - _UFirst;

  00308	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR __Count$1$[ebp]
  0030e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  00311	8b b5 64 ff ff
	ff		 mov	 esi, DWORD PTR __Temp$4[ebp+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1853 :                 _Dest += _ULast - _UFirst;

  00317	03 d7		 add	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  00319	89 95 60 ff ff
	ff		 mov	 DWORD PTR __Temp$4[ebp+4], edx
  0031f	eb 02		 jmp	 SHORT $LN177@Lookup_equ
$LN748@Lookup_equ:

; 2083 :         }
; 2084 :     }
; 2085 : 
; 2086 :     template <class... _Valty>
; 2087 :     _CONSTEXPR20 void _Construct_n(_CRT_GUARDOVERFLOW const size_type _Count, _Valty&&... _Val) {
; 2088 :         // Dispatches between the three sized constructions.
; 2089 :         // 1-arg -> value-construction, e.g. vector(5)
; 2090 :         // 2-arg -> fill, e.g. vector(5, "meow")
; 2091 :         // 3-arg -> sized range construction, e.g. vector{"Hello", "Fluffy", "World"}
; 2092 :         auto& _Al       = _Getal();
; 2093 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2094 :         auto& _My_data  = _Mypair._Myval2;
; 2095 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2096 :         if (_Count != 0) {

  00321	33 f6		 xor	 esi, esi
$LN177@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 318  :             _Getctype()->tolower(_Temp.data(), _Temp.data() + _Temp.size());

  00323	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR __Traits$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2739 :         return do_tolower(_First, _Last);

  00329	52		 push	 edx
  0032a	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 316  :             vector<_Elem> _Temp(_First, _Last);

  0032b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 318  :             _Getctype()->tolower(_Temp.data(), _Temp.data() + _Temp.size());

  0032f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2739 :         return do_tolower(_First, _Last);

  00332	8b 01		 mov	 eax, DWORD PTR [ecx]
  00334	ff 50 0c	 call	 DWORD PTR [eax+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 319  :             _Res = _Getcoll()->transform(_Temp.data(), _Temp.data() + _Temp.size());

  00337	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR __Traits$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 40   :         return do_transform(_First, _Last);

  0033d	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR $T9[ebp]
  00343	ff b5 60 ff ff
	ff		 push	 DWORD PTR __Temp$4[ebp+4]
  00349	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 319  :             _Res = _Getcoll()->transform(_Temp.data(), _Temp.data() + _Temp.size());

  0034a	8b 08		 mov	 ecx, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 40   :         return do_transform(_First, _Last);

  0034c	52		 push	 edx
  0034d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0034f	ff 50 10	 call	 DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00352	0f 10 85 78 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T9[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 40   :         return do_transform(_First, _Last);

  00359	83 8d 70 ff ff
	ff 02		 or	 DWORD PTR $T7[ebp], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 320  :         }

  00360	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00364	0f 11 45 98	 movups	 XMMWORD PTR $T11[ebp], xmm0
  00368	f3 0f 7e 45 88	 movq	 xmm0, QWORD PTR $T9[ebp+16]
  0036d	66 0f d6 85 54
	ff ff ff	 movq	 QWORD PTR $T2[ebp], xmm0
  00375	66 0f d6 45 b8	 movq	 QWORD PTR $T12[ebp+16], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0037a	85 ff		 test	 edi, edi
  0037c	74 48		 je	 SHORT $LN744@Lookup_equ

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0037e	2b f7		 sub	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00380	8b c7		 mov	 eax, edi

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00382	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  00388	72 14		 jb	 SHORT $LN300@Lookup_equ

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0038a	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
  0038d	83 c6 23	 add	 esi, 35			; 00000023H
  00390	2b c7		 sub	 eax, edi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00392	83 c0 fc	 add	 eax, -4			; fffffffcH
  00395	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00398	0f 87 cc 01 00
	00		 ja	 $LN453@Lookup_equ
$LN300@Lookup_equ:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0039e	56		 push	 esi
  0039f	57		 push	 edi
  003a0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003a5	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  003a8	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR __Temp$4[ebp], 0

; 2081 :             _Mylast  = nullptr;

  003b2	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR __Temp$4[ebp+4], 0

; 2082 :             _Myend   = nullptr;

  003bc	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR __Temp$4[ebp+8], 0
$LN744@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1222 :         _Tidy_deallocate();

  003c6	8b 7d b8	 mov	 edi, DWORD PTR $T12[ebp+16]
  003c9	eb 15		 jmp	 SHORT $LN281@Lookup_equ
$LN745@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 315  :         if (_First != _Last) { // non-empty string, transform it

  003cb	f3 0f 7e 45 b8	 movq	 xmm0, QWORD PTR $T12[ebp+16]
  003d0	66 0f d6 85 54
	ff ff ff	 movq	 QWORD PTR $T2[ebp], xmm0
  003d8	0f 10 45 a8	 movups	 xmm0, XMMWORD PTR $T12[ebp]
  003dc	0f 11 45 98	 movups	 XMMWORD PTR $T11[ebp], xmm0
$LN281@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1222 :         _Tidy_deallocate();

  003e0	8d 4d c0	 lea	 ecx, DWORD PTR __Str0$[ebp]
  003e3	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3353 :             _Str0 = _Traits.transform_primary(_Str0.begin(), _Str0.end());

  003e8	83 a5 70 ff ff
	ff fe		 and	 DWORD PTR $T7[ebp], -2	; fffffffeH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  003ef	8d 55 d8	 lea	 edx, DWORD PTR __Str1$[ebp]

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  003f2	0f 10 45 98	 movups	 xmm0, XMMWORD PTR $T11[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  003f6	83 7d ec 0f	 cmp	 DWORD PTR __Str1$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  003fa	8d 45 c0	 lea	 eax, DWORD PTR __Str0$[ebp]

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  003fd	f3 0f 7e 8d 54
	ff ff ff	 movq	 xmm1, QWORD PTR $T2[ebp]

; 426  :         if (_Large_mode_engaged()) {

  00405	0f 47 55 d8	 cmova	 edx, DWORD PTR __Str1$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  00409	83 7d bc 0f	 cmp	 DWORD PTR $T12[ebp+20], 15 ; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0040d	66 0f 7e c1	 movd	 ecx, xmm0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00411	0f 11 45 c0	 movups	 XMMWORD PTR __Str0$[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3353 :             _Str0 = _Traits.transform_primary(_Str0.begin(), _Str0.end());

  00415	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00419	0f 47 c1	 cmova	 eax, ecx

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0041c	66 0f d6 4d d0	 movq	 QWORD PTR __Str0$[ebp+16], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 578  :     if (_Left_size != _Right_size) {

  00421	3b 7d e8	 cmp	 edi, DWORD PTR __Str1$[ebp+16]
  00424	75 66		 jne	 SHORT $LN733@Lookup_equ

; 579  :         return false;
; 580  :     }
; 581  : 
; 582  :     if (_Left_size == 0u) {

  00426	85 ff		 test	 edi, edi
  00428	0f 84 03 01 00
	00		 je	 $LN724@Lookup_equ

; 411  :         return __builtin_memcmp(_First1, _First2, _Count);

  0042e	83 ef 04	 sub	 edi, 4
  00431	72 11		 jb	 SHORT $LN739@Lookup_equ
$LL740@Lookup_equ:
  00433	8b 08		 mov	 ecx, DWORD PTR [eax]
  00435	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  00437	75 10		 jne	 SHORT $LN738@Lookup_equ
  00439	83 c0 04	 add	 eax, 4
  0043c	83 c2 04	 add	 edx, 4
  0043f	83 ef 04	 sub	 edi, 4
  00442	73 ef		 jae	 SHORT $LL740@Lookup_equ
$LN739@Lookup_equ:
  00444	83 ff fc	 cmp	 edi, -4			; fffffffcH
  00447	74 34		 je	 SHORT $LN737@Lookup_equ
$LN738@Lookup_equ:
  00449	8a 08		 mov	 cl, BYTE PTR [eax]
  0044b	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0044d	75 27		 jne	 SHORT $LN741@Lookup_equ
  0044f	83 ff fd	 cmp	 edi, -3			; fffffffdH
  00452	74 29		 je	 SHORT $LN737@Lookup_equ
  00454	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00457	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  0045a	75 1a		 jne	 SHORT $LN741@Lookup_equ
  0045c	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0045f	74 1c		 je	 SHORT $LN737@Lookup_equ
  00461	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00464	3a 4a 02	 cmp	 cl, BYTE PTR [edx+2]
  00467	75 0d		 jne	 SHORT $LN741@Lookup_equ
  00469	83 ff ff	 cmp	 edi, -1
  0046c	74 0f		 je	 SHORT $LN737@Lookup_equ
  0046e	8a 40 03	 mov	 al, BYTE PTR [eax+3]
  00471	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  00474	74 07		 je	 SHORT $LN737@Lookup_equ
$LN741@Lookup_equ:
  00476	1b c0		 sbb	 eax, eax
  00478	83 c8 01	 or	 eax, 1
  0047b	eb 02		 jmp	 SHORT $LN742@Lookup_equ
$LN737@Lookup_equ:
  0047d	33 c0		 xor	 eax, eax
$LN742@Lookup_equ:

; 586  :     return _Traits::compare(_Left, _Right, _Left_size) == 0;

  0047f	85 c0		 test	 eax, eax
  00481	0f 94 c0	 sete	 al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3354 :             if (_Str0 == _Str1) {

  00484	84 c0		 test	 al, al
  00486	0f 85 a5 00 00
	00		 jne	 $LN724@Lookup_equ
$LN733@Lookup_equ:

; 3351 :         for (unsigned int _Ix = 0; _Ix < _Eq->_Data._Size(); _Ix += _Eq->_Sz) { // look for _Ch

  0048c	8b b5 48 ff ff
	ff		 mov	 esi, DWORD PTR __Eq$GSCopy$1$[ebp]
  00492	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR __Ix$1$[ebp]
  00498	03 0e		 add	 ecx, DWORD PTR [esi]
  0049a	89 8d 4c ff ff
	ff		 mov	 DWORD PTR __Ix$1$[ebp], ecx
  004a0	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  004a3	0f 82 aa fc ff
	ff		 jb	 $LL6@Lookup_equ
$LN747@Lookup_equ:

; 3355 :                 return true;
; 3356 :             }
; 3357 :         }
; 3358 :         _Eq = _Eq->_Next;

  004a9	8b 76 10	 mov	 esi, DWORD PTR [esi+16]
  004ac	89 b5 48 ff ff
	ff		 mov	 DWORD PTR __Eq$GSCopy$1$[ebp], esi
  004b2	85 f6		 test	 esi, esi
  004b4	0f 85 88 fc ff
	ff		 jne	 $LL2@Lookup_equ
$LN728@Lookup_equ:

; 3360 :     return false;

  004ba	c6 85 77 ff ff
	ff 00		 mov	 BYTE PTR $T8[ebp], 0
$LN13@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004c1	8b 45 ec	 mov	 eax, DWORD PTR __Str1$[ebp+20]
  004c4	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  004c7	76 2e		 jbe	 SHORT $LN408@Lookup_equ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004c9	8b 55 d8	 mov	 edx, DWORD PTR __Str1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  004cc	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004cf	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  004d1	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004d7	72 14		 jb	 SHORT $LN419@Lookup_equ

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004d9	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004dc	83 c1 23	 add	 ecx, 35			; 00000023H
  004df	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004e1	83 c0 fc	 add	 eax, -4			; fffffffcH
  004e4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004e7	0f 87 7d 00 00
	00		 ja	 $LN453@Lookup_equ
$LN419@Lookup_equ:

; 289  :         ::operator delete(_Ptr, _Bytes);

  004ed	51		 push	 ecx
  004ee	52		 push	 edx
  004ef	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004f4	83 c4 08	 add	 esp, 8
$LN408@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004f7	8b 4d d4	 mov	 ecx, DWORD PTR __Str0$[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  004fa	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Str1$[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00501	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Str1$[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00508	c6 45 d8 00	 mov	 BYTE PTR __Str1$[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  0050c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0050f	76 33		 jbe	 SHORT $LN445@Lookup_equ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00511	8b 55 c0	 mov	 edx, DWORD PTR __Str0$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00514	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00515	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00517	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0051d	72 1b		 jb	 SHORT $LN456@Lookup_equ

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0051f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00522	83 c1 23	 add	 ecx, 35			; 00000023H
  00525	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00527	83 c0 fc	 add	 eax, -4			; fffffffcH
  0052a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0052d	77 3b		 ja	 SHORT $LN453@Lookup_equ
  0052f	eb 09		 jmp	 SHORT $LN456@Lookup_equ
$LN724@Lookup_equ:
  00531	c6 85 77 ff ff
	ff 01		 mov	 BYTE PTR $T8[ebp], 1
  00538	eb 87		 jmp	 SHORT $LN13@Lookup_equ
$LN456@Lookup_equ:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0053a	51		 push	 ecx
  0053b	52		 push	 edx
  0053c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00541	83 c4 08	 add	 esp, 8
$LN445@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3360 :     return false;

  00544	8a 85 77 ff ff
	ff		 mov	 al, BYTE PTR $T8[ebp]

; 3361 : }

  0054a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0054d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00554	59		 pop	 ecx
  00555	5f		 pop	 edi
  00556	5e		 pop	 esi
  00557	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0055a	33 cd		 xor	 ecx, ebp
  0055c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00561	8b e5		 mov	 esp, ebp
  00563	5d		 pop	 ebp
  00564	c3		 ret	 0
$LN682@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00565	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN453@Lookup_equ:
  0056a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN723@Lookup_equ:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  0056f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN750@Lookup_equ:
  00574	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR __Str0$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR __Str1$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z$4:
  00010	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00016	83 e0 01	 and	 eax, 1
  00019	0f 84 0f 00 00
	00		 je	 $LN122@Lookup_equ
  0001f	83 a5 58 ff ff
	ff fe		 and	 DWORD PTR $T3[ebp], -2	; fffffffeH
  00026	8d 4d a8	 lea	 ecx, DWORD PTR $T12[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN122@Lookup_equ:
  0002e	c3		 ret	 0
__unwindfunclet$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z$5:
  0002f	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR __Temp$4[ebp]
  00035	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
  0003a	cc		 int	 3
  0003b	cc		 int	 3
  0003c	cc		 int	 3
  0003d	cc		 int	 3
  0003e	cc		 int	 3
__ehhandler$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z:
  0003f	90		 npad	 1
  00040	90		 npad	 1
  00041	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00045	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00048	8b 8a 48 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-184]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00058	33 c8		 xor	 ecx, eax
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z
  00064	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Lookup_equiv@DV?$regex_traits@D@std@@@std@@YA_NEPBU?$_Sequence@D@0@ABV?$regex_traits@D@0@@Z ENDP ; std::_Lookup_equiv<char,std::regex_traits<char> >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$_Lookup_range@D@std@@YA_NIPBU?$_Buf@D@0@@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
__Bufptr$ = 12						; size = 4
??$_Lookup_range@D@std@@YA_NIPBU?$_Buf@D@0@@Z PROC	; std::_Lookup_range<char>, COMDAT

; 3332 : bool _Lookup_range(unsigned int _Ch, const _Buf<_Elem>* _Bufptr) { // check whether _Ch is in _Buf

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3333 :     using _Uelem = make_unsigned_t<_Elem>;
; 3334 :     for (unsigned int _Ix = 0; _Ix < _Bufptr->_Size(); _Ix += 2) { // check current position

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Bufptr$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b 7a 04	 mov	 edi, DWORD PTR [edx+4]
  0000d	85 ff		 test	 edi, edi
  0000f	74 1e		 je	 SHORT $LN14@Lookup_ran

; 1253 :         return _Chrs[_Idx];

  00011	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00014	8b 75 08	 mov	 esi, DWORD PTR __Ch$[ebp]
$LL4@Lookup_ran:

; 3335 :         if (static_cast<_Uelem>(_Bufptr->_At(_Ix)) <= _Ch && _Ch <= static_cast<_Uelem>(_Bufptr->_At(_Ix + 1))) {

  00017	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  0001b	3b ce		 cmp	 ecx, esi
  0001d	77 09		 ja	 SHORT $LN2@Lookup_ran
  0001f	0f b6 4c 02 01	 movzx	 ecx, BYTE PTR [edx+eax+1]
  00024	3b f1		 cmp	 esi, ecx
  00026	76 0d		 jbe	 SHORT $LN12@Lookup_ran
$LN2@Lookup_ran:

; 3333 :     using _Uelem = make_unsigned_t<_Elem>;
; 3334 :     for (unsigned int _Ix = 0; _Ix < _Bufptr->_Size(); _Ix += 2) { // check current position

  00028	83 c0 02	 add	 eax, 2
  0002b	3b c7		 cmp	 eax, edi
  0002d	72 e8		 jb	 SHORT $LL4@Lookup_ran
$LN14@Lookup_ran:
  0002f	5f		 pop	 edi

; 3337 :         }
; 3338 :     }
; 3339 : 
; 3340 :     return false;

  00030	32 c0		 xor	 al, al

; 3341 : }

  00032	5e		 pop	 esi
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN12@Lookup_ran:
  00035	5f		 pop	 edi

; 3336 :             return true;

  00036	b0 01		 mov	 al, 1

; 3341 : }

  00038	5e		 pop	 esi
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_Lookup_range@D@std@@YA_NIPBU?$_Buf@D@0@@Z ENDP	; std::_Lookup_range<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$_Lookup_coll@PBDD@std@@YAPBDPBD0PBU?$_Sequence@D@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Eq$ = 16						; size = 4
??$_Lookup_coll@PBDD@std@@YAPBDPBD0PBU?$_Sequence@D@0@@Z PROC ; std::_Lookup_coll<char const *,char>, COMDAT

; 3364 : _BidIt _Lookup_coll(_BidIt _First, _BidIt _Last, const _Sequence<_Elem>* _Eq) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3365 :     // look for collation element [_First, _Last) in _Eq
; 3366 :     while (_Eq) { // look for sequence of elements that are the right size

  00004	8b 45 10	 mov	 eax, DWORD PTR __Eq$[ebp]
  00007	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	85 c0		 test	 eax, eax
  0000f	74 4c		 je	 SHORT $LN21@Lookup_col
$LL2@Lookup_col:

; 3367 :         for (unsigned int _Ix = 0; _Ix < _Eq->_Data._Size(); _Ix += _Eq->_Sz) { // look for character range

  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	33 db		 xor	 ebx, ebx
  00016	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  00019	85 c9		 test	 ecx, ecx
  0001b	74 36		 je	 SHORT $LN5@Lookup_col
  0001d	8b 38		 mov	 edi, DWORD PTR [eax]
  0001f	90		 npad	 1
$LL6@Lookup_col:

; 3368 :             _BidIt _Res = _First;

  00020	8b f2		 mov	 esi, edx

; 3369 :             for (size_t _Jx = 0; _Jx < _Eq->_Sz; ++_Jx) { // check current character

  00022	33 d2		 xor	 edx, edx
  00024	85 ff		 test	 edi, edi
  00026	74 1b		 je	 SHORT $LN16@Lookup_col

; 3370 :                 if (*_Res++ != *(_Eq->_Data._Str() + _Ix + _Jx)) {

  00028	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0002b	03 c3		 add	 eax, ebx
  0002d	0f 1f 00	 npad	 3
$LL9@Lookup_col:
  00030	8a 0e		 mov	 cl, BYTE PTR [esi]
  00032	46		 inc	 esi
  00033	3a 08		 cmp	 cl, BYTE PTR [eax]
  00035	75 06		 jne	 SHORT $LN28@Lookup_col

; 3369 :             for (size_t _Jx = 0; _Jx < _Eq->_Sz; ++_Jx) { // check current character

  00037	42		 inc	 edx
  00038	40		 inc	 eax
  00039	3b d7		 cmp	 edx, edi
  0003b	72 f3		 jb	 SHORT $LL9@Lookup_col
$LN28@Lookup_col:
  0003d	8b 45 10	 mov	 eax, DWORD PTR __Eq$[ebp]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
$LN16@Lookup_col:

; 3371 :                     break;
; 3372 :                 }
; 3373 :             }
; 3374 :             if (_Res == _Last) {

  00043	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00046	3b f2		 cmp	 esi, edx
  00048	74 13		 je	 SHORT $LN21@Lookup_col

; 3367 :         for (unsigned int _Ix = 0; _Ix < _Eq->_Data._Size(); _Ix += _Eq->_Sz) { // look for character range

  0004a	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0004d	03 df		 add	 ebx, edi
  0004f	3b d9		 cmp	 ebx, ecx
  00051	72 cd		 jb	 SHORT $LL6@Lookup_col
$LN5@Lookup_col:

; 3375 :                 return _Last;
; 3376 :             }
; 3377 :         }
; 3378 :         _Eq = _Eq->_Next;

  00053	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00056	89 45 10	 mov	 DWORD PTR __Eq$[ebp], eax
  00059	85 c0		 test	 eax, eax
  0005b	75 b4		 jne	 SHORT $LL2@Lookup_col
$LN21@Lookup_col:
  0005d	5f		 pop	 edi

; 3379 :     }
; 3380 :     return _First;
; 3381 : }

  0005e	5e		 pop	 esi
  0005f	8b c2		 mov	 eax, edx
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
??$_Lookup_coll@PBDD@std@@YAPBDPBD0PBU?$_Sequence@D@0@@Z ENDP ; std::_Lookup_coll<char const *,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??_G?$_Node_class@DV?$regex_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$_Node_class@DV?$regex_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::_Node_class<char,std::regex_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1403 :     ~_Node_class() noexcept {

  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi

; 1404 :         _Tidy(_Coll);

  00008	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0000b	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$_Node_class@DV?$regex_traits@D@std@@@std@@6B@

; 1412 :         while (_Head) { // delete the head of the list

  00011	85 ff		 test	 edi, edi
  00013	74 1c		 je	 SHORT $LN16@scalar
$LL15@scalar:

; 1413 :             _Sequence<_Elem>* _Temp = _Head;

  00015	8b f7		 mov	 esi, edi

; 1414 :             _Head                   = _Head->_Next;

  00017	8b 7f 10	 mov	 edi, DWORD PTR [edi+16]

; 1241 :         _CSTD free(_Chrs);

  0001a	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001d	e8 00 00 00 00	 call	 _free
  00022	6a 14		 push	 20			; 00000014H
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1412 :         while (_Head) { // delete the head of the list

  0002d	85 ff		 test	 edi, edi
  0002f	75 e4		 jne	 SHORT $LL15@scalar
$LN16@scalar:

; 1405 :         delete _Small;

  00031	6a 20		 push	 32			; 00000020H
  00033	ff 73 18	 push	 DWORD PTR [ebx+24]
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete

; 1406 :         delete _Large;

  0003b	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]
  0003e	83 c4 08	 add	 esp, 8
  00041	85 f6		 test	 esi, esi
  00043	74 13		 je	 SHORT $LN34@scalar

; 1241 :         _CSTD free(_Chrs);

  00045	ff 76 08	 push	 DWORD PTR [esi+8]
  00048	e8 00 00 00 00	 call	 _free
  0004d	6a 0c		 push	 12			; 0000000cH
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN34@scalar:

; 1407 :         delete _Ranges;

  00058	8b 73 20	 mov	 esi, DWORD PTR [ebx+32]
  0005b	85 f6		 test	 esi, esi
  0005d	74 13		 je	 SHORT $LN41@scalar

; 1241 :         _CSTD free(_Chrs);

  0005f	ff 76 08	 push	 DWORD PTR [esi+8]
  00062	e8 00 00 00 00	 call	 _free
  00067	6a 0c		 push	 12			; 0000000cH
  00069	56		 push	 esi
  0006a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@scalar:

; 1408 :         _Tidy(_Equiv);

  00072	8b 7b 28	 mov	 edi, DWORD PTR [ebx+40]

; 1412 :         while (_Head) { // delete the head of the list

  00075	85 ff		 test	 edi, edi
  00077	74 23		 je	 SHORT $LN49@scalar
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL48@scalar:

; 1413 :             _Sequence<_Elem>* _Temp = _Head;

  00080	8b f7		 mov	 esi, edi

; 1414 :             _Head                   = _Head->_Next;

  00082	8b 7f 10	 mov	 edi, DWORD PTR [edi+16]

; 1241 :         _CSTD free(_Chrs);

  00085	ff 76 0c	 push	 DWORD PTR [esi+12]
  00088	e8 00 00 00 00	 call	 _free
  0008d	6a 14		 push	 20			; 00000014H
  0008f	56		 push	 esi
  00090	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1412 :         while (_Head) { // delete the head of the list

  00098	85 ff		 test	 edi, edi
  0009a	75 e4		 jne	 SHORT $LL48@scalar
$LN49@scalar:
  0009c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 1409 :     }

  000a0	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7_Node_base@std@@6B@
  000a6	74 0b		 je	 SHORT $LN72@scalar
  000a8	6a 2c		 push	 44			; 0000002cH
  000aa	53		 push	 ebx
  000ab	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b0	83 c4 08	 add	 esp, 8
$LN72@scalar:
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	8b c3		 mov	 eax, ebx
  000b7	5b		 pop	 ebx
  000b8	5d		 pop	 ebp
  000b9	c2 04 00	 ret	 4
??_G?$_Node_class@DV?$regex_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::_Node_class<char,std::regex_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$_Compare@PBDPBDV?$regex_traits@D@std@@@std@@YAPBDPBD000ABV?$regex_traits@D@0@W4syntax_option_type@regex_constants@0@@Z
_TEXT	SEGMENT
__Begin1$ = 8						; size = 4
__End1$ = 12						; size = 4
__Begin2$ = 16						; size = 4
__End2$ = 20						; size = 4
__Traits$ = 24						; size = 4
__Sflags$ = 28						; size = 4
$T1 = 28						; size = 1
??$_Compare@PBDPBDV?$regex_traits@D@std@@@std@@YAPBDPBD000ABV?$regex_traits@D@0@W4syntax_option_type@regex_constants@0@@Z PROC ; std::_Compare<char const *,char const *,std::regex_traits<char> >, COMDAT

; 3318 :     regex_constants::syntax_option_type _Sflags) { // compare character ranges

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  00003	8b 45 1c	 mov	 eax, DWORD PTR __Sflags$[ebp]
  00006	a9 00 01 00 00	 test	 eax, 256		; 00000100H

; 3319 :     _BidIt1 _Res = _End1;
; 3320 :     if (_Sflags & regex_constants::icase) {

  0000b	74 19		 je	 SHORT $LN2@Compare

; 3321 :         _Res = _Cmp_chrange(_Begin1, _End1, _Begin2, _End2, _Cmp_icase<_RxTraits>{_Traits});

  0000d	ff 75 18	 push	 DWORD PTR __Traits$[ebp]
  00010	ff 75 14	 push	 DWORD PTR __End2$[ebp]
  00013	ff 75 10	 push	 DWORD PTR __Begin2$[ebp]
  00016	ff 75 0c	 push	 DWORD PTR __End1$[ebp]
  00019	ff 75 08	 push	 DWORD PTR __Begin1$[ebp]
  0001c	e8 00 00 00 00	 call	 ??$_Cmp_chrange@PBDPBDU?$_Cmp_icase@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_icase@V?$regex_traits@D@std@@@0@@Z ; std::_Cmp_chrange<char const *,char const *,std::_Cmp_icase<std::regex_traits<char> > >

; 3326 :     }
; 3327 : 
; 3328 :     return _Res;
; 3329 : }

  00021	83 c4 14	 add	 esp, 20			; 00000014H
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN2@Compare:

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  00026	a9 00 08 00 00	 test	 eax, 2048		; 00000800H

; 3322 :     } else if (_Sflags & regex_constants::collate) {

  0002b	74 19		 je	 SHORT $LN4@Compare

; 3323 :         _Res = _Cmp_chrange(_Begin1, _End1, _Begin2, _End2, _Cmp_collate<_RxTraits>{_Traits});

  0002d	ff 75 18	 push	 DWORD PTR __Traits$[ebp]
  00030	ff 75 14	 push	 DWORD PTR __End2$[ebp]
  00033	ff 75 10	 push	 DWORD PTR __Begin2$[ebp]
  00036	ff 75 0c	 push	 DWORD PTR __End1$[ebp]
  00039	ff 75 08	 push	 DWORD PTR __Begin1$[ebp]
  0003c	e8 00 00 00 00	 call	 ??$_Cmp_chrange@PBDPBDU?$_Cmp_collate@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_collate@V?$regex_traits@D@std@@@0@@Z ; std::_Cmp_chrange<char const *,char const *,std::_Cmp_collate<std::regex_traits<char> > >

; 3326 :     }
; 3327 : 
; 3328 :     return _Res;
; 3329 : }

  00041	83 c4 14	 add	 esp, 20			; 00000014H
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN4@Compare:

; 3324 :     } else {
; 3325 :         _Res = _Cmp_chrange(_Begin1, _End1, _Begin2, _End2, _Cmp_cs<_RxTraits>{});

  00046	c6 45 1c 00	 mov	 BYTE PTR $T1[ebp], 0
  0004a	ff 75 1c	 push	 DWORD PTR $T1[ebp]
  0004d	ff 75 14	 push	 DWORD PTR __End2$[ebp]
  00050	ff 75 10	 push	 DWORD PTR __Begin2$[ebp]
  00053	ff 75 0c	 push	 DWORD PTR __End1$[ebp]
  00056	ff 75 08	 push	 DWORD PTR __Begin1$[ebp]
  00059	e8 00 00 00 00	 call	 ??$_Cmp_chrange@PBDPBDU?$_Cmp_cs@V?$regex_traits@D@std@@@std@@@std@@YAPBDPBD000U?$_Cmp_cs@V?$regex_traits@D@std@@@0@@Z ; std::_Cmp_chrange<char const *,char const *,std::_Cmp_cs<std::regex_traits<char> > >

; 3326 :     }
; 3327 : 
; 3328 :     return _Res;
; 3329 : }

  0005e	83 c4 14	 add	 esp, 20			; 00000014H
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
??$_Compare@PBDPBDV?$regex_traits@D@std@@@std@@YAPBDPBD000ABV?$regex_traits@D@0@W4syntax_option_type@regex_constants@0@@Z ENDP ; std::_Compare<char const *,char const *,std::regex_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$find@PBDW4_Meta_type@std@@@std@@YAPBDPBDQBDABW4_Meta_type@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$find@PBDW4_Meta_type@std@@@std@@YAPBDPBDQBDABW4_Meta_type@0@@Z PROC ; std::find<char const *,enum std::_Meta_type>, COMDAT

; 6185 : _NODISCARD _CONSTEXPR20 _InIt find(_InIt _First, const _InIt _Last, const _Ty& _Val) { // find first matching _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6186 :     _STD _Adl_verify_range(_First, _Last);
; 6187 :     if constexpr (_Is_vb_iterator<_InIt> && is_same_v<_Ty, bool>) {
; 6188 :         return _STD _Find_vbool(_First, _Last, _Val);
; 6189 :     } else {
; 6190 :         _STD _Seek_wrapped(_First, _STD _Find_unchecked(_STD _Get_unwrapped(_First), _STD _Get_unwrapped(_Last), _Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 6175 :     for (; _First != _Last; ++_First) {

  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	3b c2		 cmp	 eax, edx
  0000b	74 13		 je	 SHORT $LN10@find

; 6176 :         if (*_First == _Val) {

  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  00010	56		 push	 esi
  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL6@find:
  00013	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00016	3b ce		 cmp	 ecx, esi
  00018	74 05		 je	 SHORT $LN19@find

; 6175 :     for (; _First != _Last; ++_First) {

  0001a	40		 inc	 eax
  0001b	3b c2		 cmp	 eax, edx
  0001d	75 f4		 jne	 SHORT $LL6@find
$LN19@find:
  0001f	5e		 pop	 esi
$LN10@find:

; 6191 :         return _First;
; 6192 :     }
; 6193 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$find@PBDW4_Meta_type@std@@@std@@YAPBDPBDQBDABW4_Meta_type@0@@Z ENDP ; std::find<char const *,enum std::_Meta_type>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??_G?$_Node_str@D@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$_Node_str@D@std@@UAEPAXI@Z PROC			; std::_Node_str<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1241 :         _CSTD free(_Chrs);

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	ff 76 1c	 push	 DWORD PTR [esi+28]
  00009	e8 00 00 00 00	 call	 _free
  0000e	83 c4 04	 add	 esp, 4
  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@std@@6B@
  00017	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001b	74 0b		 je	 SHORT $LN13@scalar
  0001d	6a 20		 push	 32			; 00000020H
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00025	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??_G?$_Node_str@D@std@@UAEPAXI@Z ENDP			; std::_Node_str<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Insert@?$_Buf@D@std@@QAEXD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?_Insert@?$_Buf@D@std@@QAEXD@Z PROC			; std::_Buf<char>::_Insert, COMDAT
; _this$ = ecx

; 1260 :     void _Insert(_Elem _Ch) { // append _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 1261 :         if (_Sz <= _Nchrs) {

  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	39 06		 cmp	 DWORD PTR [esi], eax
  0000d	77 18		 ja	 SHORT $LN9@Insert

; 1262 :             _Expand(_Nchrs + _Buf_incr);

  0000f	8d 58 10	 lea	 ebx, DWORD PTR [eax+16]

; 1281 :         _Elem* _Tmp = static_cast<_Elem*>(_CSTD realloc(_Chrs, _Get_size_of_n<sizeof(_Elem)>(_Len)));

  00012	53		 push	 ebx
  00013	ff 76 08	 push	 DWORD PTR [esi+8]
  00016	e8 00 00 00 00	 call	 _realloc
  0001b	83 c4 08	 add	 esp, 8

; 1282 :         if (!_Tmp) {

  0001e	85 c0		 test	 eax, eax
  00020	74 1b		 je	 SHORT $LN14@Insert

; 1284 :         }
; 1285 : 
; 1286 :         _Chrs = _Tmp;

  00022	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1287 :         _Sz   = _Len;

  00025	89 1e		 mov	 DWORD PTR [esi], ebx
$LN9@Insert:

; 1263 :         }
; 1264 : 
; 1265 :         _Chrs[_Nchrs++] = _Ch;

  00027	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002d	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 1266 :     }

  00030	5f		 pop	 edi
  00031	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00034	ff 46 04	 inc	 DWORD PTR [esi+4]
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
$LN14@Insert:

; 1283 :             _Xbad_alloc();

  0003d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN12@Insert:
  00042	cc		 int	 3
?_Insert@?$_Buf@D@std@@QAEXD@Z ENDP			; std::_Buf<char>::_Insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -4					; size = 4
__Newsize$ = 8						; size = 4
tv668 = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 1575 :         // trim or append elements, provide strong guarantee
; 1576 :         auto& _Al           = _Getal();
; 1577 :         auto& _My_data      = _Mypair._Myval2;
; 1578 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1579 :         pointer& _Mylast    = _My_data._Mylast;
; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1581 :         if (_Newsize < _Oldsize) { // trim

  00006	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  0000f	8b c3		 mov	 eax, ebx
  00011	8b 17		 mov	 edx, DWORD PTR [edi]
  00013	2b c2		 sub	 eax, edx
  00015	c1 f8 03	 sar	 eax, 3
  00018	89 45 fc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax
  0001b	3b f0		 cmp	 esi, eax
  0001d	73 0f		 jae	 SHORT $LN2@Resize

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  0001f	8d 04 f2	 lea	 eax, DWORD PTR [edx+esi*8]

; 1583 :             _Orphan_range(_Newlast, _Mylast);
; 1584 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1585 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1586 :             _Mylast = _Newlast;

  00022	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00025	5f		 pop	 edi

; 1610 :     }

  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN2@Resize:

; 1587 :             return;
; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  0002e	0f 86 0d 01 00
	00		 jbe	 $LN3@Resize

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00034	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00037	2b ca		 sub	 ecx, edx
  00039	c1 f9 03	 sar	 ecx, 3

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  0003c	3b f1		 cmp	 esi, ecx
  0003e	0f 86 e5 00 00
	00		 jbe	 $LN4@Resize

; 1538 :         if (_Newsize > max_size()) {

  00044	81 fe ff ff ff
	1f		 cmp	 esi, 536870911		; 1fffffffH
  0004a	0f 87 fa 00 00
	00		 ja	 $LN144@Resize

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00050	8b d1		 mov	 edx, ecx
  00052	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  00057	d1 ea		 shr	 edx, 1
  00059	2b c2		 sub	 eax, edx
  0005b	3b c8		 cmp	 ecx, eax
  0005d	76 14		 jbe	 SHORT $LN11@Resize

; 1997 :             return _Max; // geometric growth would overflow

  0005f	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  00064	c7 45 08 f8 ff
	ff ff		 mov	 DWORD PTR tv668[ebp], -8 ; fffffff8H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00071	eb 39		 jmp	 SHORT $LN142@Resize
$LN11@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00073	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00076	3b c6		 cmp	 eax, esi
  00078	73 10		 jae	 SHORT $LN12@Resize

; 2003 :             return _Newsize; // geometric growth would be insufficient

  0007a	8b c6		 mov	 eax, esi
$LN22@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  0007c	c1 e0 03	 shl	 eax, 3
  0007f	89 45 08	 mov	 DWORD PTR tv668[ebp], eax

; 227  :     if (_Bytes == 0) {

  00082	85 c0		 test	 eax, eax
  00084	75 11		 jne	 SHORT $LN26@Resize

; 228  :         return nullptr;

  00086	33 db		 xor	 ebx, ebx
  00088	eb 27		 jmp	 SHORT $LN25@Resize
$LN12@Resize:

; 117  :         if (_Count > _Max_possible) {

  0008a	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0008f	0f 87 ba 00 00
	00		 ja	 $LN145@Resize
  00095	eb e5		 jmp	 SHORT $LN22@Resize
$LN26@Resize:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00097	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0009c	72 08		 jb	 SHORT $LN27@Resize

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a4	eb 06		 jmp	 SHORT $LN142@Resize
$LN27@Resize:

; 136  :         return ::operator new(_Bytes);

  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN142@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000ac	8b d8		 mov	 ebx, eax
  000ae	83 c4 04	 add	 esp, 4
$LN25@Resize:
  000b1	8b 45 fc	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000b4	8b ce		 mov	 ecx, esi
  000b6	8d 14 c3	 lea	 edx, DWORD PTR [ebx+eax*8]
  000b9	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2056 :     for (; 0 < _Count; --_Count) {

  000bb	74 13		 je	 SHORT $LN36@Resize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000bd	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  000c4	50		 push	 eax
  000c5	6a 00		 push	 0
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 _memset
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN36@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000d0	53		 push	 ebx
  000d1	ff 77 04	 push	 DWORD PTR [edi+4]
  000d4	ff 37		 push	 DWORD PTR [edi]
  000d6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAU_Loop_vals_t@std@@PAU12@@std@@YAPAU_Loop_vals_t@0@PAU10@00@Z ; std::_Copy_memmove<std::_Loop_vals_t *,std::_Loop_vals_t *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000db	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000dd	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000e0	85 c0		 test	 eax, eax
  000e2	74 2c		 je	 SHORT $LN66@Resize

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e4	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000e7	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e9	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ec	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f2	72 12		 jb	 SHORT $LN77@Resize

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f7	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fa	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fc	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ff	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00102	77 50		 ja	 SHORT $LN74@Resize

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00104	8b c2		 mov	 eax, edx
$LN77@Resize:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00106	51		 push	 ecx
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010d	83 c4 08	 add	 esp, 8
$LN66@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00110	8d 04 f3	 lea	 eax, DWORD PTR [ebx+esi*8]
  00113	89 1f		 mov	 DWORD PTR [edi], ebx
  00115	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00118	8b 45 08	 mov	 eax, DWORD PTR tv668[ebp]
  0011b	03 c3		 add	 eax, ebx
  0011d	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00120	5f		 pop	 edi

; 1610 :     }

  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c2 08 00	 ret	 8
$LN4@Resize:

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00129	2b f0		 sub	 esi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2056 :     for (; 0 < _Count; --_Count) {

  0012b	74 11		 je	 SHORT $LN109@Resize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  0012d	c1 e6 03	 shl	 esi, 3
  00130	56		 push	 esi
  00131	6a 00		 push	 0
  00133	53		 push	 ebx
  00134	e8 00 00 00 00	 call	 _memset
  00139	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013c	03 de		 add	 ebx, esi
$LN109@Resize:
  0013e	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
$LN3@Resize:
  00141	5f		 pop	 edi

; 1610 :     }

  00142	5e		 pop	 esi
  00143	5b		 pop	 ebx
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c2 08 00	 ret	 8
$LN144@Resize:

; 1539 :             _Xlength();

  0014a	e8 00 00 00 00	 call	 ?_Xlength@?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@CAXXZ ; std::vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >::_Xlength
$LN145@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0014f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN74@Resize:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00154	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN141@Resize:
  00159	cc		 int	 3
??$_Resize@U_Value_init_tag@std@@@?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$_Format_default@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@PBDV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@V10@PBD2W4match_flag_type@regex_constants@0@@Z
_TEXT	SEGMENT
$T1 = -60						; size = 12
$T2 = -48						; size = 12
$T3 = -36						; size = 12
$T4 = -24						; size = 12
__Num$1$ = -8						; size = 4
__Out$2$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Match$ = 12						; size = 4
__Out$ = 16						; size = 4
__First$ = 20						; size = 4
tv846 = 20						; size = 4
tv856 = 20						; size = 4
__Two_digits$1$ = 23					; size = 1
__Last$ = 24						; size = 4
___formal$ = 28						; size = 4
??$_Format_default@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@PBDV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@V10@PBD2W4match_flag_type@regex_constants@0@@Z PROC ; std::_Format_default<char const *,std::allocator<std::sub_match<char const *> >,char const *,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 2065 :     regex_constants::match_flag_type) { // format with ECMAScript rules

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2066 :     while (_First != _Last) { // process one character or escape sequence

  00003	8b 55 18	 mov	 edx, DWORD PTR __Last$[ebp]
  00006	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00009	53		 push	 ebx
  0000a	8b 5d 14	 mov	 ebx, DWORD PTR __First$[ebp]
  0000d	3b da		 cmp	 ebx, edx
  0000f	0f 84 20 02 00
	00		 je	 $LN172@Format_def
  00015	56		 push	 esi
  00016	8b 75 10	 mov	 esi, DWORD PTR __Out$[ebp]
  00019	57		 push	 edi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Format_def:

; 2067 :         if (*_First != '$') {

  00020	8a 03		 mov	 al, BYTE PTR [ebx]
  00022	8b fe		 mov	 edi, esi
  00024	43		 inc	 ebx
  00025	89 7d fc	 mov	 DWORD PTR __Out$2$[ebp], edi
  00028	8a c8		 mov	 cl, al
  0002a	3c 24		 cmp	 al, 36			; 00000024H
  0002c	74 08		 je	 SHORT $LN4@Format_def
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 41   :         container->push_back(_Val);

  0002e	51		 push	 ecx
  0002f	8b ce		 mov	 ecx, esi

; 42   :         return *this;
; 43   :     }

  00031	e9 c9 01 00 00	 jmp	 $LN200@Format_def
$LN4@Format_def:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2069 :         } else if (++_First == _Last) {

  00036	89 5d 14	 mov	 DWORD PTR __First$[ebp], ebx
  00039	3b da		 cmp	 ebx, edx
  0003b	0f 84 df 01 00
	00		 je	 $LN171@Format_def

; 2070 :             *_Out++ = '$'; // preserve $ at end
; 2071 :         } else if (*_First == '$') { // replace $$

  00041	8a 0b		 mov	 cl, BYTE PTR [ebx]
  00043	80 f9 24	 cmp	 cl, 36			; 00000024H
  00046	75 0f		 jne	 SHORT $LN8@Format_def
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 46   :         container->push_back(_STD move(_Val));

  00048	6a 24		 push	 36			; 00000024H
  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2073 :             ++_First;

  00051	43		 inc	 ebx
  00052	e9 ad 01 00 00	 jmp	 $LN177@Format_def
$LN8@Format_def:

; 2074 :         } else if (*_First == '`') { // replace $`

  00057	80 f9 60	 cmp	 cl, 96			; 00000060H
  0005a	75 30		 jne	 SHORT $LN10@Format_def
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4881 :     _STD _Seek_wrapped(_Dest, _STD _Copy_unchecked(_UFirst, _ULast, _STD move(_UDest)));

  0005c	8b 45 0c	 mov	 eax, DWORD PTR __Match$[ebp]
  0005f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  00062	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00065	3b c1		 cmp	 eax, ecx
  00067	74 52		 je	 SHORT $LN59@Format_def
  00069	8b f8		 mov	 edi, eax
  0006b	8b d9		 mov	 ebx, ecx
  0006d	0f 1f 00	 npad	 3
$LL49@Format_def:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 41   :         container->push_back(_Val);

  00070	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00073	8b ce		 mov	 ecx, esi
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  0007b	47		 inc	 edi
  0007c	3b fb		 cmp	 edi, ebx
  0007e	75 f0		 jne	 SHORT $LL49@Format_def
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2076 :             ++_First;

  00080	8b 5d 14	 mov	 ebx, DWORD PTR __First$[ebp]
  00083	8b 7d fc	 mov	 edi, DWORD PTR __Out$2$[ebp]
  00086	43		 inc	 ebx
  00087	e9 78 01 00 00	 jmp	 $LN177@Format_def
$LN10@Format_def:

; 2077 :         } else if (*_First == '\'') { // replace $'

  0008c	80 f9 27	 cmp	 cl, 39			; 00000027H
  0008f	75 30		 jne	 SHORT $LN12@Format_def
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4881 :     _STD _Seek_wrapped(_Dest, _STD _Copy_unchecked(_UFirst, _ULast, _STD move(_UDest)));

  00091	8b 45 0c	 mov	 eax, DWORD PTR __Match$[ebp]
  00094	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  00097	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0009a	3b c1		 cmp	 eax, ecx
  0009c	74 1d		 je	 SHORT $LN59@Format_def
  0009e	8b f8		 mov	 edi, eax
  000a0	8b d9		 mov	 ebx, ecx
$LL60@Format_def:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 41   :         container->push_back(_Val);

  000a2	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  000a5	8b ce		 mov	 ecx, esi
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  000ad	47		 inc	 edi
  000ae	3b fb		 cmp	 edi, ebx
  000b0	75 f0		 jne	 SHORT $LL60@Format_def
  000b2	8b 7d fc	 mov	 edi, DWORD PTR __Out$2$[ebp]
  000b5	8b 5d 14	 mov	 ebx, DWORD PTR __First$[ebp]
  000b8	8b 55 18	 mov	 edx, DWORD PTR __Last$[ebp]
$LN59@Format_def:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2079 :             ++_First;

  000bb	43		 inc	 ebx
  000bc	e9 46 01 00 00	 jmp	 $LN18@Format_def
$LN12@Format_def:

; 2080 :         } else if (*_First == '&') { // replace $&

  000c1	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
  000c4	89 55 14	 mov	 DWORD PTR tv856[ebp], edx
  000c7	80 f9 26	 cmp	 cl, 38			; 00000026H
  000ca	75 60		 jne	 SHORT $LN14@Format_def
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000cc	8b 45 0c	 mov	 eax, DWORD PTR __Match$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2081 :             ++_First;

  000cf	8b da		 mov	 ebx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000d1	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000d4	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  000d7	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000dc	f7 e9		 imul	 ecx
  000de	d1 fa		 sar	 edx, 1
  000e0	8b c2		 mov	 eax, edx
  000e2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e5	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2082 :             if (_Match.size() != 0) {

  000e7	0f 84 17 01 00
	00		 je	 $LN177@Format_def

; 1154 :         return _Matches[_Sub];

  000ed	8b 45 0c	 mov	 eax, DWORD PTR __Match$[ebp]
  000f0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000f3	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  000f7	66 0f d6 45 e8	 movq	 QWORD PTR $T4[ebp], xmm0
  000fc	f3 0f 7e c0	 movq	 xmm0, xmm0
  00100	66 0f d6 45 d0	 movq	 QWORD PTR $T2[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4881 :     _STD _Seek_wrapped(_Dest, _STD _Copy_unchecked(_UFirst, _ULast, _STD move(_UDest)));

  00105	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00108	3b 45 ec	 cmp	 eax, DWORD PTR $T4[ebp+4]

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  0010b	0f 84 f3 00 00
	00		 je	 $LN177@Format_def
  00111	8b f8		 mov	 edi, eax
$LL99@Format_def:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 41   :         container->push_back(_Val);

  00113	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00116	8b ce		 mov	 ecx, esi
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  0011e	47		 inc	 edi
  0011f	3b 7d ec	 cmp	 edi, DWORD PTR $T4[ebp+4]
  00122	75 ef		 jne	 SHORT $LL99@Format_def
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2084 :             }

  00124	8b 7d fc	 mov	 edi, DWORD PTR __Out$2$[ebp]
  00127	e9 d8 00 00 00	 jmp	 $LN177@Format_def
$LN14@Format_def:

; 2085 :         } else if ('0' <= *_First && *_First <= '9') { // replace capture group descriptors $n, $nn

  0012c	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  0012f	3c 09		 cmp	 al, 9
  00131	0f 87 b5 00 00
	00		 ja	 $LN17@Format_def

; 2086 :             auto _Num              = static_cast<unsigned int>(*_First++ - '0');

  00137	0f be c9	 movsx	 ecx, cl
  0013a	8b da		 mov	 ebx, edx
  0013c	83 e9 30	 sub	 ecx, 48			; 00000030H
  0013f	89 4d f8	 mov	 DWORD PTR __Num$1$[ebp], ecx

; 2087 :             const bool _Two_digits = _First != _Last && '0' <= *_First && *_First <= '9';

  00142	3b 5d 18	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00145	74 1f		 je	 SHORT $LN25@Format_def
  00147	8a 13		 mov	 dl, BYTE PTR [ebx]
  00149	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  0014c	3c 09		 cmp	 al, 9
  0014e	77 16		 ja	 SHORT $LN25@Format_def

; 2088 :             if (_Two_digits) { // process second digit
; 2089 :                 _Num *= 10;

  00150	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]

; 2090 :                 _Num += static_cast<unsigned int>(*_First++ - '0');

  00153	0f be c2	 movsx	 eax, dl
  00156	8d 49 e8	 lea	 ecx, DWORD PTR [ecx-24]
  00159	c6 45 17 01	 mov	 BYTE PTR __Two_digits$1$[ebp], 1
  0015d	43		 inc	 ebx
  0015e	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00161	89 4d f8	 mov	 DWORD PTR __Num$1$[ebp], ecx
  00164	eb 04		 jmp	 SHORT $LN19@Format_def
$LN25@Format_def:

; 2087 :             const bool _Two_digits = _First != _Last && '0' <= *_First && *_First <= '9';

  00166	c6 45 17 00	 mov	 BYTE PTR __Two_digits$1$[ebp], 0
$LN19@Format_def:

; 2091 :             }
; 2092 : 
; 2093 :             if (_Num == 0) { // preserve $0, $00

  0016a	85 c9		 test	 ecx, ecx
  0016c	75 1d		 jne	 SHORT $LN20@Format_def
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 46   :         container->push_back(_STD move(_Val));

  0016e	6a 24		 push	 36			; 00000024H
  00170	8b ce		 mov	 ecx, esi
  00172	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
  00177	8b 4d 10	 mov	 ecx, DWORD PTR __Out$[ebp]
  0017a	6a 30		 push	 48			; 00000030H
  0017c	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2096 :                 if (_Two_digits) {

  00181	80 7d 17 00	 cmp	 BYTE PTR __Two_digits$1$[ebp], 0
  00185	74 7d		 je	 SHORT $LN177@Format_def
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 46   :         container->push_back(_STD move(_Val));

  00187	6a 30		 push	 48			; 00000030H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2099 :             } else if (_Num < _Match.size()) {

  00189	eb 71		 jmp	 SHORT $LN201@Format_def
$LN20@Format_def:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0018b	8b 45 0c	 mov	 eax, DWORD PTR __Match$[ebp]
  0018e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00191	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00194	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00199	2b ca		 sub	 ecx, edx
  0019b	89 55 14	 mov	 DWORD PTR tv846[ebp], edx
  0019e	f7 e9		 imul	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2099 :             } else if (_Num < _Match.size()) {

  001a0	8b 4d f8	 mov	 ecx, DWORD PTR __Num$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001a3	d1 fa		 sar	 edx, 1
  001a5	8b c2		 mov	 eax, edx
  001a7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001aa	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2099 :             } else if (_Num < _Match.size()) {

  001ac	3b c8		 cmp	 ecx, eax
  001ae	73 54		 jae	 SHORT $LN177@Format_def
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1929 :         return _My_data._Myfirst[_Pos];

  001b0	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  001b3	8b 4d 14	 mov	 ecx, DWORD PTR tv846[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1154 :         return _Matches[_Sub];

  001b6	f3 0f 7e 04 81	 movq	 xmm0, QWORD PTR [ecx+eax*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1929 :         return _My_data._Myfirst[_Pos];

  001bb	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1154 :         return _Matches[_Sub];

  001be	66 0f d6 45 dc	 movq	 QWORD PTR $T3[ebp], xmm0
  001c3	f3 0f 7e c0	 movq	 xmm0, xmm0
  001c7	66 0f d6 45 c4	 movq	 QWORD PTR $T1[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4881 :     _STD _Seek_wrapped(_Dest, _STD _Copy_unchecked(_UFirst, _ULast, _STD move(_UDest)));

  001cc	8b 45 c4	 mov	 eax, DWORD PTR $T1[ebp]
  001cf	3b 45 e0	 cmp	 eax, DWORD PTR $T3[ebp+4]

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  001d2	74 30		 je	 SHORT $LN177@Format_def
  001d4	8b f8		 mov	 edi, eax
$LL146@Format_def:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 41   :         container->push_back(_Val);

  001d6	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  001d9	8b ce		 mov	 ecx, esi
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  001e1	47		 inc	 edi
  001e2	3b 7d e0	 cmp	 edi, DWORD PTR $T3[ebp+4]
  001e5	75 ef		 jne	 SHORT $LL146@Format_def
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2102 :         } else { // replace $x

  001e7	8b 7d fc	 mov	 edi, DWORD PTR __Out$2$[ebp]
  001ea	eb 18		 jmp	 SHORT $LN177@Format_def
$LN17@Format_def:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 46   :         container->push_back(_STD move(_Val));

  001ec	6a 24		 push	 36			; 00000024H
  001ee	8b ce		 mov	 ecx, esi
  001f0	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back

; 41   :         container->push_back(_Val);

  001f5	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2104 :             *_Out++ = *_First++;

  001f8	8b 5d 14	 mov	 ebx, DWORD PTR tv856[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 41   :         container->push_back(_Val);

  001fb	50		 push	 eax
$LN201@Format_def:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2066 :     while (_First != _Last) { // process one character or escape sequence

  001fc	8b 4d 10	 mov	 ecx, DWORD PTR __Out$[ebp]
$LN200@Format_def:
  001ff	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
$LN177@Format_def:
  00204	8b 55 18	 mov	 edx, DWORD PTR __Last$[ebp]
$LN18@Format_def:
  00207	8b f7		 mov	 esi, edi
  00209	89 75 10	 mov	 DWORD PTR __Out$[ebp], esi
  0020c	3b da		 cmp	 ebx, edx
  0020e	0f 85 0c fe ff
	ff		 jne	 $LL2@Format_def

; 2107 :     return _Out;

  00214	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00217	89 38		 mov	 DWORD PTR [eax], edi
  00219	5f		 pop	 edi
  0021a	5e		 pop	 esi
  0021b	5b		 pop	 ebx

; 2108 : }

  0021c	8b e5		 mov	 esp, ebp
  0021e	5d		 pop	 ebp
  0021f	c3		 ret	 0
$LN171@Format_def:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 46   :         container->push_back(_STD move(_Val));

  00220	6a 24		 push	 36			; 00000024H
  00222	8b ce		 mov	 ecx, esi
  00224	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2107 :     return _Out;

  00229	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0022c	89 38		 mov	 DWORD PTR [eax], edi
  0022e	5f		 pop	 edi
  0022f	5e		 pop	 esi
  00230	5b		 pop	 ebx

; 2108 : }

  00231	8b e5		 mov	 esp, ebp
  00233	5d		 pop	 ebp
  00234	c3		 ret	 0
$LN172@Format_def:

; 2107 :     return _Out;

  00235	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00238	8b 4d 10	 mov	 ecx, DWORD PTR __Out$[ebp]
  0023b	5b		 pop	 ebx
  0023c	89 08		 mov	 DWORD PTR [eax], ecx

; 2108 : }

  0023e	8b e5		 mov	 esp, ebp
  00240	5d		 pop	 ebp
  00241	c3		 ret	 0
??$_Format_default@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@PBDV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@V10@PBD2W4match_flag_type@regex_constants@0@@Z ENDP ; std::_Format_default<char const *,std::allocator<std::sub_match<char const *> >,char const *,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$_Format_sed@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@PBDV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@V10@PBD2W4match_flag_type@regex_constants@0@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 12
$T2 = -36						; size = 12
$T3 = -24						; size = 12
$T4 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Match$ = 12						; size = 4
__Out$ = 16						; size = 4
__First$ = 20						; size = 4
__Last$ = 24						; size = 4
___formal$ = 28						; size = 4
??$_Format_sed@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@PBDV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@V10@PBD2W4match_flag_type@regex_constants@0@@Z PROC ; std::_Format_sed<char const *,std::allocator<std::sub_match<char const *> >,char const *,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 2112 :     regex_constants::match_flag_type) { // format with sed rules

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2113 :     while (_First != _Last) { // process one character or escape sequence

  00003	8b 55 18	 mov	 edx, DWORD PTR __Last$[ebp]
  00006	83 ec 30	 sub	 esp, 48			; 00000030H
  00009	53		 push	 ebx
  0000a	8b 5d 14	 mov	 ebx, DWORD PTR __First$[ebp]
  0000d	3b da		 cmp	 ebx, edx
  0000f	0f 84 05 01 00
	00		 je	 $LN95@Format_sed
  00015	56		 push	 esi
  00016	8b 75 10	 mov	 esi, DWORD PTR __Out$[ebp]
  00019	57		 push	 edi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Format_sed:

; 2114 :         if (*_First == '&') { // replace with full match

  00020	8a 03		 mov	 al, BYTE PTR [ebx]
  00022	43		 inc	 ebx
  00023	8a c8		 mov	 cl, al
  00025	3c 26		 cmp	 al, 38			; 00000026H
  00027	75 55		 jne	 SHORT $LN4@Format_sed
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00029	8b 45 0c	 mov	 eax, DWORD PTR __Match$[ebp]
  0002c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002f	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  00032	2b cf		 sub	 ecx, edi
  00034	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00039	f7 e9		 imul	 ecx
  0003b	d1 fa		 sar	 edx, 1
  0003d	8b c2		 mov	 eax, edx
  0003f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00042	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2116 :             if (_Match.size() != 0) {

  00044	0f 84 b6 00 00
	00		 je	 $LN11@Format_sed

; 1154 :         return _Matches[_Sub];

  0004a	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  0004e	66 0f d6 45 f4	 movq	 QWORD PTR $T4[ebp], xmm0
  00053	f3 0f 7e c0	 movq	 xmm0, xmm0
  00057	66 0f d6 45 dc	 movq	 QWORD PTR $T2[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4881 :     _STD _Seek_wrapped(_Dest, _STD _Copy_unchecked(_UFirst, _ULast, _STD move(_UDest)));

  0005c	8b 7d dc	 mov	 edi, DWORD PTR $T2[ebp]
  0005f	3b 7d f8	 cmp	 edi, DWORD PTR $T4[ebp+4]

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  00062	0f 84 98 00 00
	00		 je	 $LN11@Format_sed
$LL39@Format_sed:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 41   :         container->push_back(_Val);

  00068	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0006b	8b ce		 mov	 ecx, esi
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  00073	47		 inc	 edi
  00074	3b 7d f8	 cmp	 edi, DWORD PTR $T4[ebp+4]
  00077	75 ef		 jne	 SHORT $LL39@Format_sed
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2118 :             }

  00079	e9 82 00 00 00	 jmp	 $LN11@Format_sed
$LN4@Format_sed:

; 2119 :         } else if (*_First != '\\') {

  0007e	3c 5c		 cmp	 al, 92			; 0000005cH
  00080	74 03		 je	 SHORT $LN7@Format_sed
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 41   :         container->push_back(_Val);

  00082	51		 push	 ecx

; 42   :         return *this;
; 43   :     }

  00083	eb 74		 jmp	 SHORT $LN108@Format_sed
$LN7@Format_sed:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2121 :         } else if (++_First != _Last) {

  00085	3b da		 cmp	 ebx, edx
  00087	0f 84 81 00 00
	00		 je	 $LN94@Format_sed

; 2122 :             if ('0' <= *_First && *_First <= '9') { // replace \n, including \0

  0008d	8a 0b		 mov	 cl, BYTE PTR [ebx]
  0008f	43		 inc	 ebx
  00090	8a d1		 mov	 dl, cl
  00092	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00095	3c 09		 cmp	 al, 9
  00097	77 5f		 ja	 SHORT $LN10@Format_sed

; 2123 :                 const auto _Num = static_cast<unsigned int>(*_First++ - '0');

  00099	0f be f9	 movsx	 edi, cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Match$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2123 :                 const auto _Num = static_cast<unsigned int>(*_First++ - '0');

  0009f	83 ef 30	 sub	 edi, 48			; 00000030H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000a2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000a5	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  000a8	2b c8		 sub	 ecx, eax
  000aa	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000af	f7 e9		 imul	 ecx
  000b1	d1 fa		 sar	 edx, 1
  000b3	8b c2		 mov	 eax, edx
  000b5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b8	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2124 :                 if (_Num < _Match.size()) {

  000ba	3b f8		 cmp	 edi, eax
  000bc	73 42		 jae	 SHORT $LN11@Format_sed
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1929 :         return _My_data._Myfirst[_Pos];

  000be	8b 55 0c	 mov	 edx, DWORD PTR __Match$[ebp]
  000c1	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  000c4	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1154 :         return _Matches[_Sub];

  000c7	f3 0f 7e 04 81	 movq	 xmm0, QWORD PTR [ecx+eax*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1929 :         return _My_data._Myfirst[_Pos];

  000cc	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1154 :         return _Matches[_Sub];

  000cf	66 0f d6 45 e8	 movq	 QWORD PTR $T3[ebp], xmm0
  000d4	f3 0f 7e c0	 movq	 xmm0, xmm0
  000d8	66 0f d6 45 d0	 movq	 QWORD PTR $T1[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4881 :     _STD _Seek_wrapped(_Dest, _STD _Copy_unchecked(_UFirst, _ULast, _STD move(_UDest)));

  000dd	8b 7d d0	 mov	 edi, DWORD PTR $T1[ebp]
  000e0	3b 7d ec	 cmp	 edi, DWORD PTR $T3[ebp+4]

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  000e3	74 1b		 je	 SHORT $LN11@Format_sed
$LL73@Format_sed:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 41   :         container->push_back(_Val);

  000e5	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  000e8	8b ce		 mov	 ecx, esi
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  000f0	47		 inc	 edi
  000f1	3b 7d ec	 cmp	 edi, DWORD PTR $T3[ebp+4]
  000f4	75 ef		 jne	 SHORT $LL73@Format_sed
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2127 :             } else {

  000f6	eb 08		 jmp	 SHORT $LN11@Format_sed
$LN10@Format_sed:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 41   :         container->push_back(_Val);

  000f8	52		 push	 edx
$LN108@Format_sed:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2113 :     while (_First != _Last) { // process one character or escape sequence

  000f9	8b ce		 mov	 ecx, esi
  000fb	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
$LN11@Format_sed:
  00100	8b 55 18	 mov	 edx, DWORD PTR __Last$[ebp]
  00103	89 75 10	 mov	 DWORD PTR __Out$[ebp], esi
  00106	3b da		 cmp	 ebx, edx
  00108	0f 85 12 ff ff
	ff		 jne	 $LL2@Format_sed
$LN94@Format_sed:

; 2128 :                 *_Out++ = *_First++; // replace \x, including \\, \&
; 2129 :             }
; 2130 :         }
; 2131 :     }
; 2132 : 
; 2133 :     return _Out;

  0010e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00111	5f		 pop	 edi
  00112	89 30		 mov	 DWORD PTR [eax], esi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx

; 2134 : }

  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c3		 ret	 0
$LN95@Format_sed:

; 2128 :                 *_Out++ = *_First++; // replace \x, including \\, \&
; 2129 :             }
; 2130 :         }
; 2131 :     }
; 2132 : 
; 2133 :     return _Out;

  0011a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0011d	8b 4d 10	 mov	 ecx, DWORD PTR __Out$[ebp]
  00120	5b		 pop	 ebx
  00121	89 08		 mov	 DWORD PTR [eax], ecx

; 2134 : }

  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
??$_Format_sed@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@PBDV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@V10@PBD2W4match_flag_type@regex_constants@0@@Z ENDP ; std::_Format_sed<char const *,std::allocator<std::sub_match<char const *> >,char const *,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$_Match@V?$allocator@V?$sub_match@PBD@std@@@std@@@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE_NPAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@1@_N@Z
_TEXT	SEGMENT
__Matches$ = 8						; size = 4
tv838 = 8						; size = 4
$T1 = 11						; size = 1
__Full_match$ = 12					; size = 1
__Idx$1$ = 12						; size = 4
??$_Match@V?$allocator@V?$sub_match@PBD@std@@@std@@@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE_NPAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@1@_N@Z PROC ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match<std::allocator<std::sub_match<char const *> > >, COMDAT
; _this$ = ecx

; 1593 :     bool _Match(match_results<_BidIt, _Alloc>* _Matches, bool _Full_match) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR __Matches$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 1594 :         // try to match
; 1595 :         if (_Matches) { // clear _Matches before doing work

  0000a	85 f6		 test	 esi, esi
  0000c	74 0d		 je	 SHORT $LN5@Match

; 1596 :             _Matches->_Ready = true;
; 1597 :             _Matches->_Resize(0);

  0000e	6a 00		 push	 0
  00010	8b ce		 mov	 ecx, esi
  00012	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
  00016	e8 00 00 00 00	 call	 ?_Resize@?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@std@@QAEXI@Z ; std::match_results<char const *,std::allocator<std::sub_match<char const *> > >::_Resize
$LN5@Match:

; 1598 :         }
; 1599 : 
; 1600 :         _Begin          = _First;

  0001b	8b 47 54	 mov	 eax, DWORD PTR [edi+84]

; 1601 :         _Tgt_state._Cur = _First;
; 1602 :         _Tgt_state._Grp_valid.resize(_Get_ncap());

  0001e	8b cf		 mov	 ecx, edi
  00020	6a 00		 push	 0
  00022	89 47 4c	 mov	 DWORD PTR [edi+76], eax
  00025	89 07		 mov	 DWORD PTR [edi], eax
  00027	e8 00 00 00 00	 call	 ?_Get_ncap@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABEIXZ ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Get_ncap
  0002c	50		 push	 eax
  0002d	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00030	e8 00 00 00 00	 call	 ?resize@?$vector@_NV?$allocator@_N@std@@@std@@QAEXI_N@Z ; std::vector<bool,std::allocator<bool> >::resize

; 1603 :         _Tgt_state._Grps.resize(_Get_ncap());

  00035	8b cf		 mov	 ecx, edi
  00037	e8 00 00 00 00	 call	 ?_Get_ncap@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABEIXZ ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Get_ncap
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1615 :         _Resize(_Newsize, _Value_init_tag{});

  0003c	8d 4d 0b	 lea	 ecx, DWORD PTR $T1[ebp]
  0003f	51		 push	 ecx
  00040	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1603 :         _Tgt_state._Grps.resize(_Get_ncap());

  00041	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1615 :         _Resize(_Newsize, _Value_init_tag{});

  00044	e8 00 00 00 00	 call	 ??$_Resize@U_Value_init_tag@std@@@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Resize<std::_Value_init_tag>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1611 :         if (!_Match_pat(_Rep)) {

  00049	ff 77 58	 push	 DWORD PTR [edi+88]
  0004c	85 f6		 test	 esi, esi
  0004e	c7 47 78 80 96
	98 00		 mov	 DWORD PTR [edi+120], 10000000 ; 00989680H
  00055	8b cf		 mov	 ecx, edi
  00057	c7 47 7c e8 03
	00 00		 mov	 DWORD PTR [edi+124], 1000 ; 000003e8H
  0005e	0f 95 c0	 setne	 al
  00061	c6 47 64 00	 mov	 BYTE PTR [edi+100], 0
  00065	88 47 65	 mov	 BYTE PTR [edi+101], al
  00068	8a 45 0c	 mov	 al, BYTE PTR __Full_match$[ebp]
  0006b	88 47 74	 mov	 BYTE PTR [edi+116], al
  0006e	e8 00 00 00 00	 call	 ?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat
  00073	84 c0		 test	 al, al
  00075	75 06		 jne	 SHORT $LN6@Match

; 1641 :     }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
$LN6@Match:

; 1612 :             return false;
; 1613 :         }
; 1614 : 
; 1615 :         if (_Matches) { // copy results to _Matches

  0007d	85 f6		 test	 esi, esi
  0007f	0f 84 d4 00 00
	00		 je	 $LN7@Match

; 1616 :             _Matches->_Resize(_Get_ncap());

  00085	8b cf		 mov	 ecx, edi
  00087	e8 00 00 00 00	 call	 ?_Get_ncap@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABEIXZ ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Get_ncap
  0008c	50		 push	 eax
  0008d	8b ce		 mov	 ecx, esi
  0008f	e8 00 00 00 00	 call	 ?_Resize@?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@std@@QAEXI@Z ; std::match_results<char const *,std::allocator<std::sub_match<char const *> > >::_Resize

; 1617 :             for (unsigned int _Idx = 0; _Idx < _Get_ncap(); ++_Idx) { // copy submatch _Idx

  00094	33 c9		 xor	 ecx, ecx
  00096	89 4d 0c	 mov	 DWORD PTR __Idx$1$[ebp], ecx
  00099	8b cf		 mov	 ecx, edi
  0009b	e8 00 00 00 00	 call	 ?_Get_ncap@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABEIXZ ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Get_ncap
  000a0	85 c0		 test	 eax, eax
  000a2	74 7a		 je	 SHORT $LN104@Match

; 1616 :             _Matches->_Resize(_Get_ncap());

  000a4	53		 push	 ebx
  000a5	33 db		 xor	 ebx, ebx
  000a7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@Match:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2487 :         return (*_Getptr() & _Mask()) != 0;

  000b0	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 2509 :         return static_cast<_Vbase>(1) << this->_Myoff;

  000b3	ba 01 00 00 00	 mov	 edx, 1

; 2425 :         _Myptr += _Myoff / _VBITS;

  000b8	8b 4d 0c	 mov	 ecx, DWORD PTR __Idx$1$[ebp]

; 2487 :         return (*_Getptr() & _Mask()) != 0;

  000bb	83 c0 08	 add	 eax, 8

; 2425 :         _Myptr += _Myoff / _VBITS;

  000be	83 e1 1f	 and	 ecx, 31			; 0000001fH

; 2487 :         return (*_Getptr() & _Mask()) != 0;

  000c1	03 c3		 add	 eax, ebx

; 2509 :         return static_cast<_Vbase>(1) << this->_Myoff;

  000c3	d3 e2		 shl	 edx, cl

; 2424 :         _Myoff += _Off;

  000c5	8b 4d 0c	 mov	 ecx, DWORD PTR __Idx$1$[ebp]

; 2487 :         return (*_Getptr() & _Mask()) != 0;

  000c8	89 45 08	 mov	 DWORD PTR tv838[ebp], eax
  000cb	8b 47 24	 mov	 eax, DWORD PTR [edi+36]

; 2424 :         _Myoff += _Off;

  000ce	c1 e9 05	 shr	 ecx, 5

; 2487 :         return (*_Getptr() & _Mask()) != 0;

  000d1	85 14 88	 test	 edx, DWORD PTR [eax+ecx*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1618 :                 if (_Res._Grp_valid[_Idx]) { // copy successful match

  000d4	8b 45 08	 mov	 eax, DWORD PTR tv838[ebp]
  000d7	8b 55 0c	 mov	 edx, DWORD PTR __Idx$1$[ebp]
  000da	74 18		 je	 SHORT $LN8@Match

; 1619 :                     _Matches->_At(_Idx).matched = true;

  000dc	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1620 :                     _Matches->_At(_Idx).first   = _Res._Grps[_Idx]._Begin;

  000df	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	8b 04 d0	 mov	 eax, DWORD PTR [eax+edx*8]
  000e8	89 04 0b	 mov	 DWORD PTR [ebx+ecx], eax

; 1621 :                     _Matches->_At(_Idx).second  = _Res._Grps[_Idx]._End;

  000eb	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  000ee	8b 44 d0 04	 mov	 eax, DWORD PTR [eax+edx*8+4]

; 1622 :                 } else { // copy failed match

  000f2	eb 0f		 jmp	 SHORT $LN110@Match
$LN8@Match:

; 1623 :                     _Matches->_At(_Idx).matched = false;

  000f4	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1624 :                     _Matches->_At(_Idx).first   = _End;

  000f7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000fa	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  000fd	89 04 0b	 mov	 DWORD PTR [ebx+ecx], eax

; 1625 :                     _Matches->_At(_Idx).second  = _End;

  00100	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
$LN110@Match:

; 1617 :             for (unsigned int _Idx = 0; _Idx < _Get_ncap(); ++_Idx) { // copy submatch _Idx

  00103	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00106	42		 inc	 edx
  00107	89 55 0c	 mov	 DWORD PTR __Idx$1$[ebp], edx
  0010a	89 44 0b 04	 mov	 DWORD PTR [ebx+ecx+4], eax
  0010e	8b cf		 mov	 ecx, edi
  00110	83 c3 0c	 add	 ebx, 12			; 0000000cH
  00113	e8 00 00 00 00	 call	 ?_Get_ncap@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABEIXZ ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Get_ncap
  00118	39 45 0c	 cmp	 DWORD PTR __Idx$1$[ebp], eax
  0011b	72 93		 jb	 SHORT $LL4@Match
  0011d	5b		 pop	 ebx
$LN104@Match:

; 1626 :                 }
; 1627 :             }
; 1628 :             _Matches->_Org           = _Begin;

  0011e	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00121	89 06		 mov	 DWORD PTR [esi], eax

; 1629 :             _Matches->_Pfx().first   = _Begin;

  00123	8b 4f 4c	 mov	 ecx, DWORD PTR [edi+76]
  00126	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00129	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1630 :             _Matches->_Pfx().second  = _Matches->_At(0).first;

  0012c	8b 02		 mov	 eax, DWORD PTR [edx]

; 1631 :             _Matches->_Pfx().matched = _Matches->_Pfx().first != _Matches->_Pfx().second;

  0012e	3b c8		 cmp	 ecx, eax
  00130	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00133	0f 95 c0	 setne	 al
  00136	88 46 1c	 mov	 BYTE PTR [esi+28], al

; 1632 : 
; 1633 :             _Matches->_Sfx().first   = _Matches->_At(0).second;

  00139	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0013c	89 4e 20	 mov	 DWORD PTR [esi+32], ecx

; 1634 :             _Matches->_Sfx().second  = _End;

  0013f	8b 47 50	 mov	 eax, DWORD PTR [edi+80]

; 1635 :             _Matches->_Sfx().matched = _Matches->_Sfx().first != _Matches->_Sfx().second;

  00142	3b c8		 cmp	 ecx, eax
  00144	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00147	0f 95 c0	 setne	 al
  0014a	88 46 28	 mov	 BYTE PTR [esi+40], al

; 1636 : 
; 1637 :             _Matches->_Null().first  = _End;

  0014d	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00150	89 46 2c	 mov	 DWORD PTR [esi+44], eax

; 1638 :             _Matches->_Null().second = _End;

  00153	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00156	89 46 30	 mov	 DWORD PTR [esi+48], eax
$LN7@Match:

; 1639 :         }
; 1640 :         return true;

  00159	5f		 pop	 edi
  0015a	b0 01		 mov	 al, 1

; 1641 :     }

  0015c	5e		 pop	 esi
  0015d	5d		 pop	 ebp
  0015e	c2 08 00	 ret	 8
??$_Match@V?$allocator@V?$sub_match@PBD@std@@@std@@@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE_NPAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@1@_N@Z ENDP ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match<std::allocator<std::sub_match<char const *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE@XZ PROC ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::~_Matcher<char const *,char,std::regex_traits<char>,char const *>, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00006	85 c0		 test	 eax, eax
  00008	74 41		 je	 SHORT $LN8@Matcher

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0000d	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00012	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00018	72 12		 jb	 SHORT $LN27@Matcher

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00020	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00022	83 c0 fc	 add	 eax, -4			; fffffffcH
  00025	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00028	77 31		 ja	 SHORT $LN24@Matcher

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002a	8b c2		 mov	 eax, edx
$LN27@Matcher:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00033	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003a	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003d	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 2082 :             _Myend   = nullptr;

  00044	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
$LN8@Matcher:
  0004b	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  0004e	e8 00 00 00 00	 call	 ??1?$_Tgt_state_t@PBD@std@@QAE@XZ
  00053	8b ce		 mov	 ecx, esi
  00055	5e		 pop	 esi
  00056	e9 00 00 00 00	 jmp	 ??1?$_Tgt_state_t@PBD@std@@QAE@XZ
$LN24@Matcher:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@Matcher:
  00060	cc		 int	 3
??1?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE@XZ ENDP ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::~_Matcher<char const *,char,std::regex_traits<char>,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Get_ncap@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABEIXZ
_TEXT	SEGMENT
?_Get_ncap@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABEIXZ PROC ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Get_ncap, COMDAT
; _this$ = ecx

; 3467 :     return static_cast<unsigned int>(_Ncap);

  00000	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]

; 3468 : }

  00003	c3		 ret	 0
?_Get_ncap@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABEIXZ ENDP ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Get_ncap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Is_wbound@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABE_NXZ
_TEXT	SEGMENT
?_Is_wbound@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABE_NXZ PROC ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Is_wbound, COMDAT
; _this$ = ecx

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  00000	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00003	a9 00 01 00 00	 test	 eax, 256		; 00000100H

; 3449 :     if ((_Mflags & regex_constants::match_prev_avail)
; 3450 :         || _Tgt_state._Cur != _Begin) { // if --_Cur is valid, check for preceding word character

  00008	75 25		 jne	 SHORT $LN46@Is_wbound
  0000a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000c	3b 51 4c	 cmp	 edx, DWORD PTR [ecx+76]
  0000f	75 1e		 jne	 SHORT $LN46@Is_wbound

; 3455 :         }
; 3456 :     } else { // --_Cur is not valid
; 3457 :         if (_Tgt_state._Cur == _End) {

  00011	3b 51 50	 cmp	 edx, DWORD PTR [ecx+80]
  00014	75 06		 jne	 SHORT $LN7@Is_wbound

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  00016	a8 0c		 test	 al, 12			; 0000000cH

; 3458 :             return (_Mflags & (regex_constants::match_not_bow | regex_constants::match_not_eow)) == 0;

  00018	0f 94 c0	 sete	 al

; 3461 :         }
; 3462 :     }
; 3463 : }

  0001b	c3		 ret	 0
$LN7@Is_wbound:

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  0001c	a8 04		 test	 al, 4

; 3459 :         } else {
; 3460 :             return (_Mflags & regex_constants::match_not_bow) == 0 && _Is_word(*_Tgt_state._Cur);

  0001e	75 2a		 jne	 SHORT $LN10@Is_wbound

; 544  :     return _Is_word_table[_UCh];

  00020	0f b6 02	 movzx	 eax, BYTE PTR [edx]

; 3459 :         } else {
; 3460 :             return (_Mflags & regex_constants::match_not_bow) == 0 && _Is_word(*_Tgt_state._Cur);

  00023	80 b8 00 00 00
	00 00		 cmp	 BYTE PTR ?_Is_word_table@?1??_Is_word@std@@YA_NE@Z@4QB_NB[eax], 0
  0002a	74 1e		 je	 SHORT $LN10@Is_wbound
  0002c	b0 01		 mov	 al, 1

; 3461 :         }
; 3462 :     }
; 3463 : }

  0002e	c3		 ret	 0
$LN46@Is_wbound:

; 3451 :         if (_Tgt_state._Cur == _End) {

  0002f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00031	3b 51 50	 cmp	 edx, DWORD PTR [ecx+80]
  00034	75 17		 jne	 SHORT $LN5@Is_wbound

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  00036	a8 08		 test	 al, 8

; 3452 :             return (_Mflags & regex_constants::match_not_eow) == 0 && _Is_word(*_Prev_iter(_Tgt_state._Cur));

  00038	75 10		 jne	 SHORT $LN10@Is_wbound

; 544  :     return _Is_word_table[_UCh];

  0003a	0f b6 42 ff	 movzx	 eax, BYTE PTR [edx-1]

; 3452 :             return (_Mflags & regex_constants::match_not_eow) == 0 && _Is_word(*_Prev_iter(_Tgt_state._Cur));

  0003e	80 b8 00 00 00
	00 00		 cmp	 BYTE PTR ?_Is_word_table@?1??_Is_word@std@@YA_NE@Z@4QB_NB[eax], 0
  00045	74 03		 je	 SHORT $LN10@Is_wbound
  00047	b0 01		 mov	 al, 1

; 3461 :         }
; 3462 :     }
; 3463 : }

  00049	c3		 ret	 0
$LN10@Is_wbound:
  0004a	32 c0		 xor	 al, al
  0004c	c3		 ret	 0
$LN5@Is_wbound:

; 544  :     return _Is_word_table[_UCh];

  0004d	0f b6 42 ff	 movzx	 eax, BYTE PTR [edx-1]
  00051	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]

; 3453 :         } else {
; 3454 :             return _Is_word(*_Prev_iter(_Tgt_state._Cur)) != _Is_word(*_Tgt_state._Cur);

  00054	8a 80 00 00 00
	00		 mov	 al, BYTE PTR ?_Is_word_table@?1??_Is_word@std@@YA_NE@Z@4QB_NB[eax]
  0005a	3a 81 00 00 00
	00		 cmp	 al, BYTE PTR ?_Is_word_table@?1??_Is_word@std@@YA_NE@Z@4QB_NB[ecx]
  00060	0f 95 c0	 setne	 al

; 3461 :         }
; 3462 :     }
; 3463 : }

  00063	c3		 ret	 0
?_Is_wbound@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABE_NXZ ENDP ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Is_wbound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Better_match@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NXZ
_TEXT	SEGMENT
?_Better_match@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NXZ PROC ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Better_match, COMDAT
; _this$ = ecx

; 3431 : bool _Matcher<_BidIt, _Elem, _RxTraits, _It>::_Better_match() { // check for better match under UNIX rules

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 3432 :     for (unsigned int _Ix = 0; _Ix < _Get_ncap(); ++_Ix) { // check each capture group

  00005	33 f6		 xor	 esi, esi
  00007	e8 00 00 00 00	 call	 ?_Get_ncap@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABEIXZ ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Get_ncap
  0000c	85 c0		 test	 eax, eax
  0000e	74 52		 je	 SHORT $LN111@Better_mat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 3086 :         return iterator(this->_Myvec.data(), this);

  00010	33 db		 xor	 ebx, ebx
$LL4@Better_mat:

; 2425 :         _Myptr += _Myoff / _VBITS;

  00012	8b ce		 mov	 ecx, esi

; 2509 :         return static_cast<_Vbase>(1) << this->_Myoff;

  00014	ba 01 00 00 00	 mov	 edx, 1

; 2425 :         _Myptr += _Myoff / _VBITS;

  00019	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0001c	8b c6		 mov	 eax, esi

; 2509 :         return static_cast<_Vbase>(1) << this->_Myoff;

  0001e	d3 e2		 shl	 edx, cl

; 2487 :         return (*_Getptr() & _Mask()) != 0;

  00020	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]

; 2424 :         _Myoff += _Off;

  00023	c1 e8 05	 shr	 eax, 5

; 2487 :         return (*_Getptr() & _Mask()) != 0;

  00026	85 14 81	 test	 DWORD PTR [ecx+eax*4], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3433 :         if (_Res._Grp_valid[_Ix] && _Tgt_state._Grp_valid[_Ix]) {

  00029	74 28		 je	 SHORT $LN2@Better_mat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2487 :         return (*_Getptr() & _Mask()) != 0;

  0002b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0002e	85 14 81	 test	 DWORD PTR [ecx+eax*4], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3433 :         if (_Res._Grp_valid[_Ix] && _Tgt_state._Grp_valid[_Ix]) {

  00031	74 20		 je	 SHORT $LN2@Better_mat

; 3434 :             if (_Res._Grps[_Ix]._Begin != _Tgt_state._Grps[_Ix]._Begin) {

  00033	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  00036	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00039	8b 14 0b	 mov	 edx, DWORD PTR [ebx+ecx]
  0003c	8b 0c 03	 mov	 ecx, DWORD PTR [ebx+eax]
  0003f	3b d1		 cmp	 edx, ecx
  00041	75 3f		 jne	 SHORT $LN108@Better_mat

; 3436 :                      < _STD distance(_Begin, _Tgt_state._Grps[_Ix]._Begin);
; 3437 :             }
; 3438 : 
; 3439 :             if (_Res._Grps[_Ix]._End != _Tgt_state._Grps[_Ix]._End) {

  00043	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00046	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00049	8b 44 03 04	 mov	 eax, DWORD PTR [ebx+eax+4]
  0004d	3b 44 13 04	 cmp	 eax, DWORD PTR [ebx+edx+4]
  00051	75 15		 jne	 SHORT $LN109@Better_mat
$LN2@Better_mat:

; 3432 :     for (unsigned int _Ix = 0; _Ix < _Get_ncap(); ++_Ix) { // check each capture group

  00053	8b cf		 mov	 ecx, edi
  00055	46		 inc	 esi
  00056	83 c3 08	 add	 ebx, 8
  00059	e8 00 00 00 00	 call	 ?_Get_ncap@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABEIXZ ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Get_ncap
  0005e	3b f0		 cmp	 esi, eax
  00060	72 b0		 jb	 SHORT $LL4@Better_mat
$LN111@Better_mat:
  00062	5f		 pop	 edi

; 3441 :             }
; 3442 :         }
; 3443 :     }
; 3444 :     return false;
; 3445 : }

  00063	5e		 pop	 esi
  00064	32 c0		 xor	 al, al
  00066	5b		 pop	 ebx
  00067	c3		 ret	 0
$LN109@Better_mat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1692 :         return _Last - _First; // assume the iterator will do debug checking

  00068	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  0006b	8b 54 f2 04	 mov	 edx, DWORD PTR [edx+esi*8+4]
  0006f	2b 57 4c	 sub	 edx, DWORD PTR [edi+76]
  00072	8b 44 f0 04	 mov	 eax, DWORD PTR [eax+esi*8+4]
  00076	2b 47 4c	 sub	 eax, DWORD PTR [edi+76]
  00079	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3440 :                 return _STD distance(_Begin, _Res._Grps[_Ix]._End) < _STD distance(_Begin, _Tgt_state._Grps[_Ix]._End);

  0007a	3b c2		 cmp	 eax, edx

; 3441 :             }
; 3442 :         }
; 3443 :     }
; 3444 :     return false;
; 3445 : }

  0007c	5e		 pop	 esi
  0007d	0f 9c c0	 setl	 al
  00080	5b		 pop	 ebx
  00081	c3		 ret	 0
$LN108@Better_mat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1692 :         return _Last - _First; // assume the iterator will do debug checking

  00082	2b 4f 4c	 sub	 ecx, DWORD PTR [edi+76]
  00085	2b 57 4c	 sub	 edx, DWORD PTR [edi+76]
  00088	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3435 :                 return _STD distance(_Begin, _Res._Grps[_Ix]._Begin)

  00089	3b d1		 cmp	 edx, ecx

; 3441 :             }
; 3442 :         }
; 3443 :     }
; 3444 :     return false;
; 3445 : }

  0008b	5e		 pop	 esi
  0008c	0f 9c c0	 setl	 al
  0008f	5b		 pop	 ebx
  00090	c3		 ret	 0
?_Better_match@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NXZ ENDP ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Better_match
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z
_TEXT	SEGMENT
__St$2 = -36						; size = 20
tv1545 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Nx$ = 8						; size = 4
?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z PROC ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat, COMDAT
; _this$ = ecx

; 3471 : bool _Matcher<_BidIt, _Elem, _RxTraits, _It>::_Match_pat(_Node_base* _Nx) { // check for match

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 3472 :     if (0 < _Max_stack_count && --_Max_stack_count <= 0) {

  0002a	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]
  0002d	85 c0		 test	 eax, eax
  0002f	7e 0c		 jle	 SHORT $LN9@Match_pat
  00031	48		 dec	 eax
  00032	89 47 7c	 mov	 DWORD PTR [edi+124], eax
  00035	85 c0		 test	 eax, eax
  00037	0f 8e 6b 03 00
	00		 jle	 $LN315@Match_pat
$LN9@Match_pat:

; 3474 :     }
; 3475 : 
; 3476 :     if (0 < _Max_complexity_count && --_Max_complexity_count <= 0) {

  0003d	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  00040	85 c0		 test	 eax, eax
  00042	7e 0c		 jle	 SHORT $LN10@Match_pat
  00044	48		 dec	 eax
  00045	89 47 78	 mov	 DWORD PTR [edi+120], eax
  00048	85 c0		 test	 eax, eax
  0004a	0f 8e 5f 03 00
	00		 jle	 $LN316@Match_pat
$LN10@Match_pat:

; 3478 :     }
; 3479 : 
; 3480 :     bool _Failed = false;
; 3481 :     while (_Nx) { // match current node

  00050	8b 5d 08	 mov	 ebx, DWORD PTR __Nx$[ebp]
  00053	c6 45 f0 00	 mov	 BYTE PTR tv1545[ebp], 0
  00057	85 db		 test	 ebx, ebx
  00059	0f 84 a3 01 00
	00		 je	 $LN3@Match_pat
  0005f	be 01 00 00 00	 mov	 esi, 1
$LL2@Match_pat:

; 3482 :         switch (_Nx->_Kind) { // handle current node's type

  00064	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00067	83 f8 15	 cmp	 eax, 21			; 00000015H
  0006a	0f 87 31 03 00
	00		 ja	 $LN58@Match_pat
  00070	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN305@Match_pat[eax*4]
$LN12@Match_pat:

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  00077	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  0007a	89 45 f0	 mov	 DWORD PTR tv1545[ebp], eax
  0007d	a9 00 01 00 00	 test	 eax, 256		; 00000100H

; 3483 :         case _N_nop:
; 3484 :             break;
; 3485 : 
; 3486 :         case _N_bol:
; 3487 :             if ((_Mflags & regex_constants::match_prev_avail)
; 3488 :                 || _Tgt_state._Cur != _Begin) { // if --_Cur is valid, check for preceding newline

  00082	75 17		 jne	 SHORT $LN302@Match_pat
  00084	8b 07		 mov	 eax, DWORD PTR [edi]
  00086	3b 47 4c	 cmp	 eax, DWORD PTR [edi+76]
  00089	75 10		 jne	 SHORT $LN302@Match_pat

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  0008b	8b 45 f0	 mov	 eax, DWORD PTR tv1545[ebp]
  0008e	25 01 ff ff ff	 and	 eax, -255		; ffffff01H
  00093	89 45 f0	 mov	 DWORD PTR tv1545[ebp], eax

; 3490 :             } else {
; 3491 :                 _Failed = (_Mflags & regex_constants::match_not_bol) != 0;

  00096	e9 51 01 00 00	 jmp	 $LN4@Match_pat
$LN302@Match_pat:

; 3489 :                 _Failed = *_Prev_iter(_Tgt_state._Cur) != _Meta_nl;

  0009b	8b 07		 mov	 eax, DWORD PTR [edi]
  0009d	80 78 ff 0a	 cmp	 BYTE PTR [eax-1], 10	; 0000000aH
  000a1	0f 95 c0	 setne	 al
  000a4	89 45 f0	 mov	 DWORD PTR tv1545[ebp], eax

; 3492 :             }
; 3493 : 
; 3494 :             break;

  000a7	e9 40 01 00 00	 jmp	 $LN4@Match_pat
$LN16@Match_pat:

; 3495 : 
; 3496 :         case _N_eol:
; 3497 :             if (_Tgt_state._Cur == _End) {

  000ac	8b 07		 mov	 eax, DWORD PTR [edi]
  000ae	3b 47 50	 cmp	 eax, DWORD PTR [edi+80]
  000b1	75 0f		 jne	 SHORT $LN17@Match_pat

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  000b3	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  000b6	d1 e8		 shr	 eax, 1
  000b8	24 01		 and	 al, 1

; 3498 :                 _Failed = (_Mflags & regex_constants::match_not_eol) != 0;

  000ba	89 45 f0	 mov	 DWORD PTR tv1545[ebp], eax

; 3499 :             } else {

  000bd	e9 2a 01 00 00	 jmp	 $LN4@Match_pat
$LN17@Match_pat:

; 3500 :                 _Failed = *_Tgt_state._Cur != _Meta_nl;

  000c2	80 38 0a	 cmp	 BYTE PTR [eax], 10	; 0000000aH
  000c5	0f 95 c0	 setne	 al
  000c8	89 45 f0	 mov	 DWORD PTR tv1545[ebp], eax

; 3501 :             }
; 3502 : 
; 3503 :             break;

  000cb	e9 1c 01 00 00	 jmp	 $LN4@Match_pat
$LN19@Match_pat:

; 3504 : 
; 3505 :         case _N_wbound:
; 3506 :             _Failed = _Is_wbound() == ((_Nx->_Flags & _Fl_negate) != 0);

  000d0	8b cf		 mov	 ecx, edi
  000d2	e8 00 00 00 00	 call	 ?_Is_wbound@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@ABE_NXZ ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Is_wbound

; 1209 : _BITMASK_OPS(_EMPTY_ARGUMENT, _Node_flags)

  000d7	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000da	83 e1 01	 and	 ecx, 1

; 3504 : 
; 3505 :         case _N_wbound:
; 3506 :             _Failed = _Is_wbound() == ((_Nx->_Flags & _Fl_negate) != 0);

  000dd	3a c1		 cmp	 al, cl
  000df	0f 94 c0	 sete	 al
  000e2	89 45 f0	 mov	 DWORD PTR tv1545[ebp], eax

; 3507 :             break;

  000e5	e9 02 01 00 00	 jmp	 $LN4@Match_pat
$LN20@Match_pat:

; 3508 : 
; 3509 :         case _N_dot:
; 3510 :             if (_Tgt_state._Cur == _End || *_Tgt_state._Cur == _Meta_nl || *_Tgt_state._Cur == _Meta_cr) {

  000ea	8b 07		 mov	 eax, DWORD PTR [edi]
  000ec	3b 47 50	 cmp	 eax, DWORD PTR [edi+80]
  000ef	0f 84 a3 02 00
	00		 je	 $LN301@Match_pat
  000f5	8a 08		 mov	 cl, BYTE PTR [eax]
  000f7	80 f9 0a	 cmp	 cl, 10			; 0000000aH
  000fa	0f 84 98 02 00
	00		 je	 $LN301@Match_pat
  00100	80 f9 0d	 cmp	 cl, 13			; 0000000dH
  00103	0f 84 8f 02 00
	00		 je	 $LN301@Match_pat

; 3511 :                 _Failed = true;
; 3512 :             } else {
; 3513 :                 ++_Tgt_state._Cur;

  00109	40		 inc	 eax
  0010a	89 07		 mov	 DWORD PTR [edi], eax

; 3514 :             }
; 3515 : 
; 3516 :             break;

  0010c	e9 d8 00 00 00	 jmp	 $LN310@Match_pat
$LN24@Match_pat:

; 3517 : 
; 3518 :         case _N_str:
; 3519 :             { // check for string match
; 3520 :                 _Node_str<_Elem>* _Node = static_cast<_Node_str<_Elem>*>(_Nx);
; 3521 :                 _It _Res0;
; 3522 :                 if ((_Res0 = _Compare(_Tgt_state._Cur, _End, _Node->_Data._Str(),
; 3523 :                          _Node->_Data._Str() + _Node->_Data._Size(), _Traits, _Sflags))
; 3524 :                     != _Tgt_state._Cur) {

  00111	ff 77 5c	 push	 DWORD PTR [edi+92]
  00114	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  00117	ff 77 70	 push	 DWORD PTR [edi+112]
  0011a	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  0011d	03 c1		 add	 eax, ecx
  0011f	50		 push	 eax
  00120	51		 push	 ecx
  00121	ff 77 50	 push	 DWORD PTR [edi+80]
  00124	ff 37		 push	 DWORD PTR [edi]
  00126	e8 00 00 00 00	 call	 ??$_Compare@PBDPBDV?$regex_traits@D@std@@@std@@YAPBDPBD000ABV?$regex_traits@D@0@W4syntax_option_type@regex_constants@0@@Z ; std::_Compare<char const *,char const *,std::regex_traits<char> >
  0012b	83 c4 18	 add	 esp, 24			; 00000018H
  0012e	3b 07		 cmp	 eax, DWORD PTR [edi]
  00130	0f 84 62 02 00
	00		 je	 $LN301@Match_pat

; 3525 :                     _Tgt_state._Cur = _Res0;

  00136	89 07		 mov	 DWORD PTR [edi], eax

; 3526 :                 } else {
; 3527 :                     _Failed = true;
; 3528 :                 }
; 3529 : 
; 3530 :                 break;

  00138	e9 ac 00 00 00	 jmp	 $LN310@Match_pat
$LN27@Match_pat:

; 3531 :             }
; 3532 : 
; 3533 :         case _N_class:
; 3534 :             { // check for bracket expression match
; 3535 :                 _Failed = _Tgt_state._Cur == _End || !_Do_class(_Nx);

  0013d	8b 07		 mov	 eax, DWORD PTR [edi]
  0013f	3b 47 50	 cmp	 eax, DWORD PTR [edi+80]
  00142	0f 84 50 02 00
	00		 je	 $LN301@Match_pat
  00148	53		 push	 ebx
  00149	8b cf		 mov	 ecx, edi
  0014b	e8 00 00 00 00	 call	 ?_Do_class@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_class
  00150	84 c0		 test	 al, al
  00152	0f 84 40 02 00
	00		 je	 $LN301@Match_pat
  00158	c6 45 f0 00	 mov	 BYTE PTR tv1545[ebp], 0
  0015c	e9 8f 00 00 00	 jmp	 $LN60@Match_pat
$LN30@Match_pat:

; 3536 :                 break;
; 3537 :             }
; 3538 : 
; 3539 :         case _N_group:
; 3540 :             break;
; 3541 : 
; 3542 :         case _N_end_group:
; 3543 :             break;
; 3544 : 
; 3545 :         case _N_neg_assert:
; 3546 :         case _N_assert:
; 3547 :             { // check assert
; 3548 :                 _It _Ch              = _Tgt_state._Cur;

  00161	8b 37		 mov	 esi, DWORD PTR [edi]

; 3549 :                 bool _Neg            = _Nx->_Kind == _N_neg_assert;
; 3550 :                 _Bt_state_t<_It> _St = _Tgt_state;

  00163	8d 4d dc	 lea	 ecx, DWORD PTR __St$2[ebp]
  00166	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00169	57		 push	 edi
  0016a	0f 94 c3	 sete	 bl
  0016d	e8 00 00 00 00	 call	 ??0?$_Bt_state_t@PBD@std@@QAE@ABV01@@Z

; 3551 :                 if (_Match_pat(static_cast<_Node_assert*>(_Nx)->_Child) == _Neg) {

  00172	8b 45 08	 mov	 eax, DWORD PTR __Nx$[ebp]
  00175	8b cf		 mov	 ecx, edi
  00177	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0017e	ff 70 14	 push	 DWORD PTR [eax+20]
  00181	e8 00 00 00 00	 call	 ?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat
  00186	3a c3		 cmp	 al, bl
  00188	75 17		 jne	 SHORT $LN32@Match_pat

; 3552 :                     // restore initial state and indicate failure
; 3553 :                     _Tgt_state = _St;
; 3554 :                     _Failed    = true;

  0018a	8b 45 dc	 mov	 eax, DWORD PTR __St$2[ebp]
  0018d	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00190	89 07		 mov	 DWORD PTR [edi], eax
  00192	8d 45 e0	 lea	 eax, DWORD PTR __St$2[ebp+4]
  00195	50		 push	 eax
  00196	e8 00 00 00 00	 call	 ??4?$vector@_NV?$allocator@_N@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<bool,std::allocator<bool> >::operator=
  0019b	c6 45 f0 01	 mov	 BYTE PTR tv1545[ebp], 1

; 3555 :                 } else {

  0019f	eb 02		 jmp	 SHORT $LN33@Match_pat
$LN32@Match_pat:

; 3556 :                     _Tgt_state._Cur = _Ch;

  001a1	89 37		 mov	 DWORD PTR [edi], esi
$LN33@Match_pat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  001a3	8b 55 e0	 mov	 edx, DWORD PTR __St$2[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3559 :                 break;

  001a6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  001ad	85 d2		 test	 edx, edx
  001af	74 30		 je	 SHORT $LN306@Match_pat

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001b1	8b 4d e8	 mov	 ecx, DWORD PTR __St$2[ebp+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b4	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001b6	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001bb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001c1	72 14		 jb	 SHORT $LN144@Match_pat

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001c3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001c6	83 c1 23	 add	 ecx, 35			; 00000023H
  001c9	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001cb	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ce	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001d1	0f 87 df 01 00
	00		 ja	 $LN141@Match_pat
$LN144@Match_pat:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001d7	51		 push	 ecx
  001d8	52		 push	 edx
  001d9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001de	83 c4 08	 add	 esp, 8
$LN306@Match_pat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3658 :         if (_Failed) {

  001e1	8b 5d 08	 mov	 ebx, DWORD PTR __Nx$[ebp]
$LN309@Match_pat:
  001e4	be 01 00 00 00	 mov	 esi, 1
$LN310@Match_pat:
  001e9	8b 45 f0	 mov	 eax, DWORD PTR tv1545[ebp]
$LN4@Match_pat:
  001ec	84 c0		 test	 al, al
  001ee	75 12		 jne	 SHORT $LN3@Match_pat
$LN60@Match_pat:

; 3659 :             _Nx = nullptr;
; 3660 :         } else if (_Nx) {

  001f0	85 db		 test	 ebx, ebx
  001f2	74 0e		 je	 SHORT $LN3@Match_pat

; 3661 :             _Nx = _Nx->_Next;

  001f4	8b 5b 0c	 mov	 ebx, DWORD PTR [ebx+12]
  001f7	89 5d 08	 mov	 DWORD PTR __Nx$[ebp], ebx
  001fa	85 db		 test	 ebx, ebx
  001fc	0f 85 62 fe ff
	ff		 jne	 $LL2@Match_pat
$LN3@Match_pat:

; 3662 :         }
; 3663 :     }
; 3664 : 
; 3665 :     if (0 < _Max_stack_count) {

  00202	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]
  00205	85 c0		 test	 eax, eax
  00207	7e 04		 jle	 SHORT $LN63@Match_pat

; 3666 :         ++_Max_stack_count;

  00209	40		 inc	 eax
  0020a	89 47 7c	 mov	 DWORD PTR [edi+124], eax
$LN63@Match_pat:

; 3667 :     }
; 3668 : 
; 3669 :     return !_Failed;

  0020d	80 7d f0 00	 cmp	 BYTE PTR tv1545[ebp], 0
  00211	0f 94 c0	 sete	 al

; 3670 : }

  00214	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00217	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0021e	59		 pop	 ecx
  0021f	5f		 pop	 edi
  00220	5e		 pop	 esi
  00221	5b		 pop	 ebx
  00222	8b e5		 mov	 esp, ebp
  00224	5d		 pop	 ebp
  00225	c2 04 00	 ret	 4
$LN35@Match_pat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00228	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3569 :                 _Tgt_state._Grps[_Node->_Idx]._Begin = _Tgt_state._Cur;

  0022b	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0022e	8b 07		 mov	 eax, DWORD PTR [edi]
  00230	89 04 d1	 mov	 DWORD PTR [ecx+edx*8], eax

; 3571 :                 for (size_t _Idx = _Tgt_state._Grp_valid.size(); _Node->_Idx < _Idx;) {

  00233	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00236	39 73 14	 cmp	 DWORD PTR [ebx+20], esi
  00239	73 a9		 jae	 SHORT $LN309@Match_pat
  0023b	0f 1f 44 00 00	 npad	 5
$LL8@Match_pat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2425 :         _Myptr += _Myoff / _VBITS;

  00240	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3572 :                     _Tgt_state._Grp_valid[--_Idx] = false;

  00243	4e		 dec	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2424 :         _Myoff += _Off;

  00244	8b ce		 mov	 ecx, esi
  00246	c1 e9 05	 shr	 ecx, 5

; 2425 :         _Myptr += _Myoff / _VBITS;

  00249	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  0024c	8b ce		 mov	 ecx, esi

; 2464 :             *const_cast<_Vbase*>(_Getptr()) &= ~_Mask();

  0024e	8b 02		 mov	 eax, DWORD PTR [edx]

; 2425 :         _Myptr += _Myoff / _VBITS;

  00250	83 e1 1f	 and	 ecx, 31			; 0000001fH

; 2464 :             *const_cast<_Vbase*>(_Getptr()) &= ~_Mask();

  00253	0f b3 c8	 btr	 eax, ecx
  00256	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3571 :                 for (size_t _Idx = _Tgt_state._Grp_valid.size(); _Node->_Idx < _Idx;) {

  00258	39 73 14	 cmp	 DWORD PTR [ebx+20], esi
  0025b	72 e3		 jb	 SHORT $LL8@Match_pat

; 3573 :                 }
; 3574 : 
; 3575 :                 break;

  0025d	eb 85		 jmp	 SHORT $LN309@Match_pat
$LN36@Match_pat:

; 3576 :             }
; 3577 : 
; 3578 :         case _N_end_capture:
; 3579 :             { // record successful capture
; 3580 :                 _Node_end_group* _Node = static_cast<_Node_end_group*>(_Nx);
; 3581 :                 _Node_capture* _Node0  = static_cast<_Node_capture*>(_Node->_Back);
; 3582 :                 if (_Cap || _Node0->_Idx != 0) { // update capture data

  0025f	80 7f 65 00	 cmp	 BYTE PTR [edi+101], 0
  00263	8b 73 14	 mov	 esi, DWORD PTR [ebx+20]
  00266	75 0a		 jne	 SHORT $LN296@Match_pat
  00268	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0026c	0f 84 72 ff ff
	ff		 je	 $LN309@Match_pat
$LN296@Match_pat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2424 :         _Myoff += _Off;

  00272	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00275	8b ca		 mov	 ecx, edx

; 2425 :         _Myptr += _Myoff / _VBITS;

  00277	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0027a	83 e2 1f	 and	 edx, 31			; 0000001fH
  0027d	c1 e9 05	 shr	 ecx, 5
  00280	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]

; 2462 :             *const_cast<_Vbase*>(_Getptr()) |= _Mask();

  00283	8b 01		 mov	 eax, DWORD PTR [ecx]
  00285	0f ab d0	 bts	 eax, edx
  00288	89 01		 mov	 DWORD PTR [ecx], eax

; 1919 :         return _My_data._Myfirst[_Pos];

  0028a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3584 :                     _Tgt_state._Grps[_Node0->_Idx]._End = _Tgt_state._Cur;

  0028d	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00290	8b 07		 mov	 eax, DWORD PTR [edi]
  00292	89 44 d1 04	 mov	 DWORD PTR [ecx+edx*8+4], eax

; 3585 :                 }
; 3586 :                 break;

  00296	e9 49 ff ff ff	 jmp	 $LN309@Match_pat
$LN39@Match_pat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2424 :         _Myoff += _Off;

  0029b	8b 73 14	 mov	 esi, DWORD PTR [ebx+20]

; 2509 :         return static_cast<_Vbase>(1) << this->_Myoff;

  0029e	b8 01 00 00 00	 mov	 eax, 1

; 2425 :         _Myptr += _Myoff / _VBITS;

  002a3	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]

; 2487 :         return (*_Getptr() & _Mask()) != 0;

  002a6	8b 57 04	 mov	 edx, DWORD PTR [edi+4]

; 2425 :         _Myptr += _Myoff / _VBITS;

  002a9	83 e1 1f	 and	 ecx, 31			; 0000001fH
  002ac	c1 ee 05	 shr	 esi, 5

; 2509 :         return static_cast<_Vbase>(1) << this->_Myoff;

  002af	d3 e0		 shl	 eax, cl

; 2487 :         return (*_Getptr() & _Mask()) != 0;

  002b1	85 04 b2	 test	 DWORD PTR [edx+esi*4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3592 :                 if (_Tgt_state._Grp_valid[_Node->_Idx]) { // check for match

  002b4	0f 84 2a ff ff
	ff		 je	 $LN309@Match_pat

; 3593 :                     _It _Res0 = _Tgt_state._Cur;
; 3594 :                     _It _Bx   = _Tgt_state._Grps[_Node->_Idx]._Begin;

  002ba	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  002bd	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  002c0	8b 0f		 mov	 ecx, DWORD PTR [edi]
  002c2	8b 34 d0	 mov	 esi, DWORD PTR [eax+edx*8]

; 3595 :                     _It _Ex   = _Tgt_state._Grps[_Node->_Idx]._End;

  002c5	8b 44 d0 04	 mov	 eax, DWORD PTR [eax+edx*8+4]

; 3596 :                     if (_Bx != _Ex // _Bx == _Ex for zero-length match
; 3597 :                         && (_Res0 = _Compare(_Tgt_state._Cur, _End, _Bx, _Ex, _Traits, _Sflags)) == _Tgt_state._Cur) {

  002c9	3b f0		 cmp	 esi, eax
  002cb	74 1e		 je	 SHORT $LN41@Match_pat
  002cd	ff 77 5c	 push	 DWORD PTR [edi+92]
  002d0	ff 77 70	 push	 DWORD PTR [edi+112]
  002d3	50		 push	 eax
  002d4	56		 push	 esi
  002d5	ff 77 50	 push	 DWORD PTR [edi+80]
  002d8	51		 push	 ecx
  002d9	e8 00 00 00 00	 call	 ??$_Compare@PBDPBDV?$regex_traits@D@std@@@std@@YAPBDPBD000ABV?$regex_traits@D@0@W4syntax_option_type@regex_constants@0@@Z ; std::_Compare<char const *,char const *,std::regex_traits<char> >
  002de	8b c8		 mov	 ecx, eax
  002e0	83 c4 18	 add	 esp, 24			; 00000018H
  002e3	3b 0f		 cmp	 ecx, DWORD PTR [edi]
  002e5	0f 84 ad 00 00
	00		 je	 $LN301@Match_pat
$LN41@Match_pat:

; 3598 :                         _Failed = true;
; 3599 :                     } else {
; 3600 :                         _Tgt_state._Cur = _Res0;

  002eb	89 0f		 mov	 DWORD PTR [edi], ecx

; 3601 :                     }
; 3602 :                 }
; 3603 :                 break;

  002ed	e9 f2 fe ff ff	 jmp	 $LN309@Match_pat
$LN43@Match_pat:

; 3604 :             }
; 3605 : 
; 3606 :         case _N_if:
; 3607 :             if (!_Do_if(static_cast<_Node_if*>(_Nx))) {

  002f2	53		 push	 ebx
  002f3	8b cf		 mov	 ecx, edi
  002f5	e8 00 00 00 00	 call	 ?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_if
$LN313@Match_pat:

; 3658 :         if (_Failed) {

  002fa	8b 55 f0	 mov	 edx, DWORD PTR tv1545[ebp]
  002fd	84 c0		 test	 al, al
  002ff	0f b6 ca	 movzx	 ecx, dl
  00302	0f 44 ce	 cmove	 ecx, esi
  00305	88 4d f0	 mov	 BYTE PTR tv1545[ebp], cl
$LN286@Match_pat:
  00308	33 db		 xor	 ebx, ebx
  0030a	e9 da fe ff ff	 jmp	 $LN310@Match_pat
$LN46@Match_pat:

; 1209 : _BITMASK_OPS(_EMPTY_ARGUMENT, _Node_flags)

  0030f	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]

; 3608 :                 _Failed = true;
; 3609 :             }
; 3610 : 
; 3611 :             _Nx = nullptr;
; 3612 :             break;
; 3613 : 
; 3614 :         case _N_endif:
; 3615 :             break;
; 3616 : 
; 3617 :         case _N_rep:
; 3618 :             if (!_Do_rep(static_cast<_Node_rep*>(_Nx), (_Nx->_Flags & _Fl_greedy) != 0, 0)) {

  00312	8b cf		 mov	 ecx, edi

; 1209 : _BITMASK_OPS(_EMPTY_ARGUMENT, _Node_flags)

  00314	d1 e8		 shr	 eax, 1
  00316	24 01		 and	 al, 1

; 3608 :                 _Failed = true;
; 3609 :             }
; 3610 : 
; 3611 :             _Nx = nullptr;
; 3612 :             break;
; 3613 : 
; 3614 :         case _N_endif:
; 3615 :             break;
; 3616 : 
; 3617 :         case _N_rep:
; 3618 :             if (!_Do_rep(static_cast<_Node_rep*>(_Nx), (_Nx->_Flags & _Fl_greedy) != 0, 0)) {

  00318	6a 00		 push	 0
  0031a	0f b6 c0	 movzx	 eax, al
  0031d	50		 push	 eax
  0031e	53		 push	 ebx
  0031f	e8 00 00 00 00	 call	 ?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_rep

; 3619 :                 _Failed = true;
; 3620 :             }
; 3621 : 
; 3622 :             _Nx = nullptr;
; 3623 :             break;

  00324	eb d4		 jmp	 SHORT $LN313@Match_pat
$LN48@Match_pat:

; 3624 : 
; 3625 :         case _N_end_rep:
; 3626 :             {
; 3627 :                 _Node_rep* _Nr      = static_cast<_Node_end_rep*>(_Nx)->_Begin_rep;

  00326	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]

; 3630 :                 if (_Nr->_Simple_loop == 0 && !_Do_rep(_Nr, (_Nr->_Flags & _Fl_greedy) != 0, _Psav->_Loop_idx)) {

  00329	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  0032d	75 d9		 jne	 SHORT $LN286@Match_pat
  0032f	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00332	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3630 :                 if (_Nr->_Simple_loop == 0 && !_Do_rep(_Nr, (_Nr->_Flags & _Fl_greedy) != 0, _Psav->_Loop_idx)) {

  00335	8b 0c c8	 mov	 ecx, DWORD PTR [eax+ecx*8]

; 1209 : _BITMASK_OPS(_EMPTY_ARGUMENT, _Node_flags)

  00338	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0033b	d1 e8		 shr	 eax, 1

; 3630 :                 if (_Nr->_Simple_loop == 0 && !_Do_rep(_Nr, (_Nr->_Flags & _Fl_greedy) != 0, _Psav->_Loop_idx)) {

  0033d	51		 push	 ecx

; 1209 : _BITMASK_OPS(_EMPTY_ARGUMENT, _Node_flags)

  0033e	24 01		 and	 al, 1

; 3630 :                 if (_Nr->_Simple_loop == 0 && !_Do_rep(_Nr, (_Nr->_Flags & _Fl_greedy) != 0, _Psav->_Loop_idx)) {

  00340	8b cf		 mov	 ecx, edi
  00342	50		 push	 eax
  00343	52		 push	 edx
  00344	e8 00 00 00 00	 call	 ?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_rep

; 3631 :                     _Failed = true; // recurse only if loop contains if/do
; 3632 :                 }
; 3633 : 
; 3634 :                 _Nx = nullptr;
; 3635 :                 break;

  00349	eb af		 jmp	 SHORT $LN313@Match_pat
$LN51@Match_pat:

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  0034b	f7 47 60 20 20
	00 00		 test	 DWORD PTR [edi+96], 8224 ; 00002020H

; 3636 :             }
; 3637 : 
; 3638 :         case _N_begin:
; 3639 :             break;
; 3640 : 
; 3641 :         case _N_end:
; 3642 :             if (((_Mflags & (regex_constants::match_not_null | regex_constants::_Match_not_null))
; 3643 :                     && _Begin == _Tgt_state._Cur)
; 3644 :                 || (_Full && _Tgt_state._Cur != _End)) {

  00352	74 07		 je	 SHORT $LN304@Match_pat
  00354	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00357	3b 07		 cmp	 eax, DWORD PTR [edi]
  00359	74 0d		 je	 SHORT $LN54@Match_pat
$LN304@Match_pat:
  0035b	80 7f 74 00	 cmp	 BYTE PTR [edi+116], 0
  0035f	74 12		 je	 SHORT $LN52@Match_pat
  00361	8b 07		 mov	 eax, DWORD PTR [edi]
  00363	3b 47 50	 cmp	 eax, DWORD PTR [edi+80]
  00366	74 0b		 je	 SHORT $LN52@Match_pat
$LN54@Match_pat:

; 3645 :                 _Failed = true;

  00368	c6 45 f0 01	 mov	 BYTE PTR tv1545[ebp], 1

; 3658 :         if (_Failed) {

  0036c	33 db		 xor	 ebx, ebx
  0036e	e9 76 fe ff ff	 jmp	 $LN310@Match_pat
$LN52@Match_pat:

; 3646 :             } else if (!_Matched || _Better_match()) { // record successful match

  00373	80 7f 64 00	 cmp	 BYTE PTR [edi+100], 0
  00377	74 0b		 je	 SHORT $LN57@Match_pat
  00379	8b cf		 mov	 ecx, edi
  0037b	e8 00 00 00 00	 call	 ?_Better_match@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NXZ ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Better_match
  00380	84 c0		 test	 al, al
  00382	74 84		 je	 SHORT $LN286@Match_pat
$LN57@Match_pat:

; 3647 :                 _Res     = _Tgt_state;

  00384	57		 push	 edi
  00385	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00388	e8 00 00 00 00	 call	 ??4?$_Tgt_state_t@PBD@std@@QAEAAV01@ABV01@@Z

; 3648 :                 _Matched = true;

  0038d	c6 47 64 01	 mov	 BYTE PTR [edi+100], 1

; 3658 :         if (_Failed) {

  00391	33 db		 xor	 ebx, ebx
  00393	e9 51 fe ff ff	 jmp	 $LN310@Match_pat
$LN301@Match_pat:

; 3662 :         }
; 3663 :     }
; 3664 : 
; 3665 :     if (0 < _Max_stack_count) {

  00398	c6 45 f0 01	 mov	 BYTE PTR tv1545[ebp], 1
  0039c	e9 61 fe ff ff	 jmp	 $LN3@Match_pat
$LN58@Match_pat:

; 3649 :             }
; 3650 :             _Nx = nullptr;
; 3651 :             break;
; 3652 : 
; 3653 :         case _N_none:
; 3654 :         default:
; 3655 :             _Xregex_error(regex_constants::error_parse);

  003a1	6a 0d		 push	 13			; 0000000dH
  003a3	e8 00 00 00 00	 call	 ?_Xregex_error@std@@YAXW4error_type@regex_constants@1@@Z ; std::_Xregex_error
$LN315@Match_pat:

; 3473 :         _Xregex_error(regex_constants::error_stack);

  003a8	6a 0c		 push	 12			; 0000000cH
  003aa	e8 00 00 00 00	 call	 ?_Xregex_error@std@@YAXW4error_type@regex_constants@1@@Z ; std::_Xregex_error
$LN316@Match_pat:

; 3477 :         _Xregex_error(regex_constants::error_complexity);

  003af	6a 0b		 push	 11			; 0000000bH
  003b1	e8 00 00 00 00	 call	 ?_Xregex_error@std@@YAXW4error_type@regex_constants@1@@Z ; std::_Xregex_error
$LN141@Match_pat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003b6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN312@Match_pat:
  003bb	90		 npad	 1
$LN305@Match_pat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3670 : }

  003bc	00 00 00 00	 DD	 $LN58@Match_pat
  003c0	00 00 00 00	 DD	 $LN310@Match_pat
  003c4	00 00 00 00	 DD	 $LN12@Match_pat
  003c8	00 00 00 00	 DD	 $LN16@Match_pat
  003cc	00 00 00 00	 DD	 $LN19@Match_pat
  003d0	00 00 00 00	 DD	 $LN20@Match_pat
  003d4	00 00 00 00	 DD	 $LN24@Match_pat
  003d8	00 00 00 00	 DD	 $LN27@Match_pat
  003dc	00 00 00 00	 DD	 $LN310@Match_pat
  003e0	00 00 00 00	 DD	 $LN310@Match_pat
  003e4	00 00 00 00	 DD	 $LN30@Match_pat
  003e8	00 00 00 00	 DD	 $LN30@Match_pat
  003ec	00 00 00 00	 DD	 $LN286@Match_pat
  003f0	00 00 00 00	 DD	 $LN35@Match_pat
  003f4	00 00 00 00	 DD	 $LN36@Match_pat
  003f8	00 00 00 00	 DD	 $LN39@Match_pat
  003fc	00 00 00 00	 DD	 $LN43@Match_pat
  00400	00 00 00 00	 DD	 $LN310@Match_pat
  00404	00 00 00 00	 DD	 $LN46@Match_pat
  00408	00 00 00 00	 DD	 $LN48@Match_pat
  0040c	00 00 00 00	 DD	 $LN310@Match_pat
  00410	00 00 00 00	 DD	 $LN51@Match_pat
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __St$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Bt_state_t@PBD@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ENDP ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Do_class@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z
_TEXT	SEGMENT
tv505 = -12						; size = 4
__Res0$1$ = -8						; size = 4
__Ch$ = -4						; size = 1
__Nx$ = 8						; size = 4
?_Do_class@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z PROC ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_class, COMDAT
; _this$ = ecx

; 3384 : bool _Matcher<_BidIt, _Elem, _RxTraits, _It>::_Do_class(_Node_base* _Nx) { // apply bracket expression

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  0000b	f7 46 5c 00 01
	00 00		 test	 DWORD PTR [esi+92], 256	; 00000100H

; 3385 :     bool _Found;
; 3386 :     auto _Ch = static_cast<typename _RxTraits::_Uelem>(*_Tgt_state._Cur);

  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	8a 18		 mov	 bl, BYTE PTR [eax]
  00016	88 5d fc	 mov	 BYTE PTR __Ch$[ebp], bl

; 3387 :     if (_Sflags & regex_constants::icase) {

  00019	74 15		 je	 SHORT $LN50@Do_class

; 301  :         return _Getctype()->tolower(_Ch);

  0001b	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  0001e	ff 75 fc	 push	 DWORD PTR __Ch$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 301  :         return _Getctype()->tolower(_Ch);

  00021	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00029	ff d0		 call	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3388 :         _Ch = static_cast<typename _RxTraits::_Uelem>(_Traits.translate_nocase(static_cast<_Elem>(_Ch)));

  0002b	8a d8		 mov	 bl, al
  0002d	88 5d fc	 mov	 BYTE PTR __Ch$[ebp], bl
$LN50@Do_class:

; 3389 :     }
; 3390 : 
; 3391 :     _It _Res0 = _Tgt_state._Cur;
; 3392 :     ++_Res0;

  00030	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00032	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00035	89 45 f8	 mov	 DWORD PTR __Res0$1$[ebp], eax

; 3393 :     _It _Resx;
; 3394 :     _Node_class<_Elem, _RxTraits>* _Node = static_cast<_Node_class<_Elem, _RxTraits>*>(_Nx);
; 3395 :     if (_Node->_Coll
; 3396 :         && (_Resx = _Lookup_coll(_Tgt_state._Cur, _End, _Node->_Coll))

  00038	8b 45 08	 mov	 eax, DWORD PTR __Nx$[ebp]
  0003b	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0003e	85 d2		 test	 edx, edx
  00040	74 1a		 je	 SHORT $LN3@Do_class
  00042	52		 push	 edx
  00043	ff 76 50	 push	 DWORD PTR [esi+80]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??$_Lookup_coll@PBDD@std@@YAPBDPBD0PBU?$_Sequence@D@0@@Z ; std::_Lookup_coll<char const *,char>
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b 06		 cmp	 eax, DWORD PTR [esi]
  00051	74 06		 je	 SHORT $LN52@Do_class

; 3397 :                != _Tgt_state._Cur) { // check for collation element
; 3398 :         _Res0  = _Resx;

  00053	8b d0		 mov	 edx, eax

; 3399 :         _Found = true;

  00055	b1 01		 mov	 cl, 1

; 3400 :     } else if (_Node->_Ranges

  00057	eb 67		 jmp	 SHORT $LN21@Do_class
$LN52@Do_class:

; 3393 :     _It _Resx;
; 3394 :     _Node_class<_Elem, _RxTraits>* _Node = static_cast<_Node_class<_Elem, _RxTraits>*>(_Nx);
; 3395 :     if (_Node->_Coll
; 3396 :         && (_Resx = _Lookup_coll(_Tgt_state._Cur, _End, _Node->_Coll))

  00059	8b 45 08	 mov	 eax, DWORD PTR __Nx$[ebp]
$LN3@Do_class:

; 3401 :                && (_Lookup_range(static_cast<typename _RxTraits::_Uelem>(

  0005c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0005f	89 4d f4	 mov	 DWORD PTR tv505[ebp], ecx
  00062	85 c9		 test	 ecx, ecx
  00064	74 33		 je	 SHORT $LN5@Do_class

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  00066	f7 46 5c 00 08
	00 00		 test	 DWORD PTR [esi+92], 2048 ; 00000800H

; 3401 :                && (_Lookup_range(static_cast<typename _RxTraits::_Uelem>(

  0006d	74 10		 je	 SHORT $LN18@Do_class
  0006f	ff 75 fc	 push	 DWORD PTR __Ch$[ebp]
  00072	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  00075	e8 00 00 00 00	 call	 ?translate@?$_Regex_traits@D@std@@QBEDD@Z ; std::_Regex_traits<char>::translate
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR tv505[ebp]
  0007d	eb 02		 jmp	 SHORT $LN19@Do_class
$LN18@Do_class:
  0007f	8a c3		 mov	 al, bl
$LN19@Do_class:
  00081	51		 push	 ecx
  00082	0f b6 c0	 movzx	 eax, al
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Lookup_range@D@std@@YA_NIPBU?$_Buf@D@0@@Z ; std::_Lookup_range<char>
  0008b	83 c4 08	 add	 esp, 8
  0008e	84 c0		 test	 al, al
  00090	74 04		 je	 SHORT $LN51@Do_class

; 3402 :                                      _Sflags & regex_constants::collate ? _Traits.translate(static_cast<_Elem>(_Ch))
; 3403 :                                                                         : static_cast<_Elem>(_Ch)),
; 3404 :                    _Node->_Ranges))) {
; 3405 :         _Found = true;

  00092	b1 01		 mov	 cl, 1
  00094	eb 27		 jmp	 SHORT $LN62@Do_class
$LN51@Do_class:

; 3401 :                && (_Lookup_range(static_cast<typename _RxTraits::_Uelem>(

  00096	8b 45 08	 mov	 eax, DWORD PTR __Nx$[ebp]
$LN5@Do_class:

; 3406 :     } else if (_Ch < _Bmp_max) {
; 3407 :         _Found = _Node->_Small && _Node->_Small->_Find(_Ch);

  00099	8b 78 18	 mov	 edi, DWORD PTR [eax+24]
  0009c	0f b6 d3	 movzx	 edx, bl
  0009f	85 ff		 test	 edi, edi
  000a1	74 18		 je	 SHORT $LN20@Do_class

; 1309 :         return (_Chrs[_Wide >> _Bmp_shift] & (1 << (_Wide & _Bmp_mask))) != 0;

  000a3	8b ca		 mov	 ecx, edx
  000a5	b8 01 00 00 00	 mov	 eax, 1
  000aa	83 e1 07	 and	 ecx, 7
  000ad	c1 ea 03	 shr	 edx, 3
  000b0	d3 e0		 shl	 eax, cl
  000b2	84 04 3a	 test	 al, BYTE PTR [edx+edi]

; 3406 :     } else if (_Ch < _Bmp_max) {
; 3407 :         _Found = _Node->_Small && _Node->_Small->_Find(_Ch);

  000b5	74 04		 je	 SHORT $LN20@Do_class
  000b7	b1 01		 mov	 cl, 1
  000b9	eb 02		 jmp	 SHORT $LN62@Do_class
$LN20@Do_class:
  000bb	32 c9		 xor	 cl, cl
$LN62@Do_class:

; 1209 : _BITMASK_OPS(_EMPTY_ARGUMENT, _Node_flags)

  000bd	8b 55 f8	 mov	 edx, DWORD PTR __Res0$1$[ebp]
$LN21@Do_class:
  000c0	8b 45 08	 mov	 eax, DWORD PTR __Nx$[ebp]
  000c3	8a 40 08	 mov	 al, BYTE PTR [eax+8]
  000c6	24 01		 and	 al, 1

; 3408 :     } else if (_Node->_Large
; 3409 :                && _STD find(_Node->_Large->_Str(), _Node->_Large->_Str() + _Node->_Large->_Size(), _Ch)
; 3410 :                       != _Node->_Large->_Str() + _Node->_Large->_Size()) {
; 3411 :         _Found = true;
; 3412 :     } else if (_Node->_Classes != 0 && _Traits.isctype(static_cast<_Elem>(_Ch), _Node->_Classes)) {
; 3413 :         _Found = true;
; 3414 :     } else if (_Node->_Equiv && _Lookup_equiv(_Ch, _Node->_Equiv, _Traits)) {
; 3415 :         _Found = true;
; 3416 :     } else {
; 3417 :         _Found = false;
; 3418 :     }
; 3419 : 
; 3420 :     const bool _Negated = (_Node->_Flags & _Fl_negate) != 0;
; 3421 : 
; 3422 :     if (_Found == _Negated) {

  000c8	3a c8		 cmp	 cl, al
  000ca	75 0b		 jne	 SHORT $LN15@Do_class

; 3427 :     }
; 3428 : }

  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	32 c0		 xor	 al, al
  000d0	5b		 pop	 ebx
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
$LN15@Do_class:
  000d7	5f		 pop	 edi

; 3423 :         return false;
; 3424 :     } else { // record result
; 3425 :         _Tgt_state._Cur = _Res0;

  000d8	89 16		 mov	 DWORD PTR [esi], edx

; 3426 :         return true;

  000da	b0 01		 mov	 al, 1

; 3427 :     }
; 3428 : }

  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 04 00	 ret	 4
?_Do_class@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ENDP ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_class
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z
_TEXT	SEGMENT
__St$ = -60						; size = 32
__Loop_iter_sav$1$ = -28				; size = 4
__Loop_idx_sav$1$ = -24					; size = 4
__Cur_iter$ = -20					; size = 4
__Progress$1$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
__Node$ = 8						; size = 4
__Matched0$1$ = 11					; size = 1
__Greedy$ = 12						; size = 1
__Init_idx$ = 16					; size = 4
?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z PROC ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_rep, COMDAT
; _this$ = ecx

; 3246 : bool _Matcher<_BidIt, _Elem, _RxTraits, _It>::_Do_rep(_Node_rep* _Node, bool _Greedy, int _Init_idx) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 3247 :     // apply repetition
; 3248 :     if (_Node->_Simple_loop == 1) {

  0002a	8b 75 08	 mov	 esi, DWORD PTR __Node$[ebp]
  0002d	83 7e 24 01	 cmp	 DWORD PTR [esi+36], 1
  00031	75 1d		 jne	 SHORT $LN2@Do_rep

; 3249 :         return _Do_rep0(_Node, _Greedy);

  00033	ff 75 0c	 push	 DWORD PTR __Greedy$[ebp]
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 ?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_rep0

; 3301 : }

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Do_rep:

; 3250 :     }
; 3251 : 
; 3252 :     bool _Matched0        = false;
; 3253 :     _Tgt_state_t<_It> _St = _Tgt_state;

  00050	57		 push	 edi
  00051	8d 4d c4	 lea	 ecx, DWORD PTR __St$[ebp]
  00054	c6 45 0b 00	 mov	 BYTE PTR __Matched0$1$[ebp], 0
  00058	e8 00 00 00 00	 call	 ??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  0005d	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00060	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3256 :     _It* _Loop_iter_sav   = static_cast<_It*>(_Psav->_Loop_iter);

  00063	8b 54 c8 04	 mov	 edx, DWORD PTR [eax+ecx*8+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00067	8d 1c c8	 lea	 ebx, DWORD PTR [eax+ecx*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3255 :     int _Loop_idx_sav     = _Psav->_Loop_idx;

  0006a	8b 03		 mov	 eax, DWORD PTR [ebx]

; 3257 :     _It _Cur_iter         = _Tgt_state._Cur;

  0006c	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0006e	89 45 e8	 mov	 DWORD PTR __Loop_idx_sav$1$[ebp], eax

; 3258 : 
; 3259 :     bool _Progress = _Init_idx == 0 || *_Loop_iter_sav != _Cur_iter;

  00071	8b 45 10	 mov	 eax, DWORD PTR __Init_idx$[ebp]
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007b	89 55 e4	 mov	 DWORD PTR __Loop_iter_sav$1$[ebp], edx
  0007e	89 4d ec	 mov	 DWORD PTR __Cur_iter$[ebp], ecx
  00081	85 c0		 test	 eax, eax
  00083	74 08		 je	 SHORT $LN17@Do_rep
  00085	39 0a		 cmp	 DWORD PTR [edx], ecx
  00087	75 04		 jne	 SHORT $LN17@Do_rep
  00089	32 c9		 xor	 cl, cl
  0008b	eb 02		 jmp	 SHORT $LN27@Do_rep
$LN17@Do_rep:
  0008d	b1 01		 mov	 cl, 1
$LN27@Do_rep:

; 3260 : 
; 3261 :     if (0 <= _Node->_Max && _Node->_Max <= _Init_idx) {

  0008f	8b 56 18	 mov	 edx, DWORD PTR [esi+24]
  00092	88 4d f3	 mov	 BYTE PTR __Progress$1$[ebp], cl
  00095	85 d2		 test	 edx, edx
  00097	78 08		 js	 SHORT $LN3@Do_rep
  00099	3b d0		 cmp	 edx, eax
  0009b	0f 8e 81 00 00
	00		 jle	 $LN28@Do_rep
$LN3@Do_rep:

; 3262 :         _Matched0 = _Match_pat(_Node->_End_rep->_Next); // reps done, try tail
; 3263 :     } else if (_Init_idx < _Node->_Min) { // try a required rep

  000a1	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  000a4	7d 06		 jge	 SHORT $LN5@Do_rep

; 3264 :         if (!_Progress) {

  000a6	84 c9		 test	 cl, cl
  000a8	75 2f		 jne	 SHORT $LN7@Do_rep

; 3265 :             _Matched0 = _Match_pat(_Node->_End_rep->_Next); // empty, try tail
; 3266 :         } else { // try another required match

  000aa	eb 76		 jmp	 SHORT $LN28@Do_rep
$LN5@Do_rep:

; 3267 :             _Psav->_Loop_idx  = _Init_idx + 1;
; 3268 :             _Psav->_Loop_iter = _STD addressof(_Cur_iter);
; 3269 :             _Matched0         = _Match_pat(_Node->_Next);
; 3270 :         }
; 3271 :     } else if (!_Greedy) { // not greedy, favor minimum number of reps

  000ac	80 7d 0c 00	 cmp	 BYTE PTR __Greedy$[ebp], 0
  000b0	75 35		 jne	 SHORT $LN9@Do_rep

; 3272 :         _Matched0 = _Match_pat(_Node->_End_rep->_Next);

  000b2	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000b5	8b cf		 mov	 ecx, edi
  000b7	ff 70 0c	 push	 DWORD PTR [eax+12]
  000ba	e8 00 00 00 00	 call	 ?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat
  000bf	88 45 0b	 mov	 BYTE PTR __Matched0$1$[ebp], al

; 3273 :         if (!_Matched0 && _Progress) { // tail failed, try another rep

  000c2	84 c0		 test	 al, al
  000c4	75 7c		 jne	 SHORT $LN15@Do_rep
  000c6	38 45 f3	 cmp	 BYTE PTR __Progress$1$[ebp], al
  000c9	74 6c		 je	 SHORT $LN24@Do_rep

; 3274 :             _Tgt_state        = _St;

  000cb	8d 45 c4	 lea	 eax, DWORD PTR __St$[ebp]
  000ce	8b cf		 mov	 ecx, edi
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ??4?$_Tgt_state_t@PBD@std@@QAEAAV01@ABV01@@Z

; 3275 :             _Psav->_Loop_idx  = _Init_idx + 1;

  000d6	8b 45 10	 mov	 eax, DWORD PTR __Init_idx$[ebp]
$LN7@Do_rep:

; 3290 :             _Matched0         = _Match_pat(_Node->_End_rep->_Next);
; 3291 :         }
; 3292 :     }
; 3293 : 
; 3294 :     if (!_Matched0) {

  000d9	40		 inc	 eax
  000da	89 03		 mov	 DWORD PTR [ebx], eax
  000dc	8d 45 ec	 lea	 eax, DWORD PTR __Cur_iter$[ebp]
  000df	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  000e2	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000e5	eb 41		 jmp	 SHORT $LN8@Do_rep
$LN9@Do_rep:

; 3276 :             _Psav->_Loop_iter = _STD addressof(_Cur_iter);
; 3277 :             _Matched0         = _Match_pat(_Node->_Next);
; 3278 :         }
; 3279 :     } else { // greedy, favor maximum number of reps
; 3280 :         if (_Progress) { // try another rep

  000e7	84 c9		 test	 cl, cl
  000e9	74 1c		 je	 SHORT $LN23@Do_rep

; 3281 :             _Psav->_Loop_idx  = _Init_idx + 1;

  000eb	40		 inc	 eax

; 3282 :             _Psav->_Loop_iter = _STD addressof(_Cur_iter);
; 3283 :             _Matched0         = _Match_pat(_Node->_Next);

  000ec	8b cf		 mov	 ecx, edi
  000ee	89 03		 mov	 DWORD PTR [ebx], eax
  000f0	8d 45 ec	 lea	 eax, DWORD PTR __Cur_iter$[ebp]
  000f3	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  000f6	ff 76 0c	 push	 DWORD PTR [esi+12]
  000f9	e8 00 00 00 00	 call	 ?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat
  000fe	88 45 0b	 mov	 BYTE PTR __Matched0$1$[ebp], al

; 3284 :         }
; 3285 : 
; 3286 :         if ((_Progress || 1 >= _Init_idx) && !_Matched0) { // rep failed, try tail

  00101	84 c0		 test	 al, al
  00103	75 3d		 jne	 SHORT $LN15@Do_rep
  00105	eb 05		 jmp	 SHORT $LN25@Do_rep
$LN23@Do_rep:
  00107	83 f8 01	 cmp	 eax, 1
  0010a	7f 2b		 jg	 SHORT $LN24@Do_rep
$LN25@Do_rep:

; 3287 :             _Psav->_Loop_idx  = _Loop_idx_sav;

  0010c	8b 45 e8	 mov	 eax, DWORD PTR __Loop_idx_sav$1$[ebp]

; 3288 :             _Psav->_Loop_iter = _Loop_iter_sav;
; 3289 :             _Tgt_state        = _St;

  0010f	8b cf		 mov	 ecx, edi
  00111	89 03		 mov	 DWORD PTR [ebx], eax
  00113	8b 45 e4	 mov	 eax, DWORD PTR __Loop_iter_sav$1$[ebp]
  00116	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00119	8d 45 c4	 lea	 eax, DWORD PTR __St$[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ??4?$_Tgt_state_t@PBD@std@@QAEAAV01@ABV01@@Z
$LN28@Do_rep:

; 3290 :             _Matched0         = _Match_pat(_Node->_End_rep->_Next);
; 3291 :         }
; 3292 :     }
; 3293 : 
; 3294 :     if (!_Matched0) {

  00122	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00125	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
$LN8@Do_rep:
  00128	8b cf		 mov	 ecx, edi
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 ?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat
  00130	88 45 0b	 mov	 BYTE PTR __Matched0$1$[ebp], al
  00133	84 c0		 test	 al, al
  00135	75 0b		 jne	 SHORT $LN15@Do_rep
$LN24@Do_rep:

; 3295 :         _Tgt_state = _St;

  00137	8d 45 c4	 lea	 eax, DWORD PTR __St$[ebp]
  0013a	8b cf		 mov	 ecx, edi
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 ??4?$_Tgt_state_t@PBD@std@@QAEAAV01@ABV01@@Z
$LN15@Do_rep:

; 3296 :     }
; 3297 : 
; 3298 :     _Psav->_Loop_idx  = _Loop_idx_sav;

  00142	8b 45 e8	 mov	 eax, DWORD PTR __Loop_idx_sav$1$[ebp]

; 3299 :     _Psav->_Loop_iter = _Loop_iter_sav;
; 3300 :     return _Matched0;

  00145	8d 4d c4	 lea	 ecx, DWORD PTR __St$[ebp]
  00148	89 03		 mov	 DWORD PTR [ebx], eax
  0014a	8b 45 e4	 mov	 eax, DWORD PTR __Loop_iter_sav$1$[ebp]
  0014d	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00150	e8 00 00 00 00	 call	 ??1?$_Tgt_state_t@PBD@std@@QAE@XZ
  00155	8a 45 0b	 mov	 al, BYTE PTR __Matched0$1$[ebp]

; 3301 : }

  00158	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00162	59		 pop	 ecx
  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR __St$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tgt_state_t@PBD@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Do_rep@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_NH@Z ENDP ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_rep
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z
_TEXT	SEGMENT
__St$ = -104						; size = 32
__Final$ = -72						; size = 32
__Back_shift$1$ = -40					; size = 4
__Oldsize$1$ = -40					; size = 4
__Oldsize$1$ = -36					; size = 4
__Ptr_container$1$ = -36				; size = 4
tv1375 = -36						; size = 4
__First$2$ = -36					; size = 4
__Ix$1$ = -32						; size = 4
__Mid$1$ = -28						; size = 4
__First$1$ = -28					; size = 4
__Saved_pos$1$ = -24					; size = 4
__Count$1$ = -20					; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Node$ = 8						; size = 4
__Greedy$ = 12						; size = 1
?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z PROC ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_rep0, COMDAT
; _this$ = ecx

; 3188 :     _Node_rep* _Node, bool _Greedy) { // apply repetition to loop with no nested if/do

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx

; 3189 :     int _Ix               = 0;

  0002a	33 f6		 xor	 esi, esi

; 3190 :     _Tgt_state_t<_It> _St = _Tgt_state;

  0002c	8d 4d 98	 lea	 ecx, DWORD PTR __St$[ebp]
  0002f	53		 push	 ebx
  00030	89 75 e0	 mov	 DWORD PTR __Ix$1$[ebp], esi
  00033	e8 00 00 00 00	 call	 ??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z

; 3191 : 
; 3192 :     for (; _Ix < _Node->_Min; ++_Ix) { // do minimum number of reps

  00038	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]
  0003b	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  0003e	39 70 14	 cmp	 DWORD PTR [eax+20], esi
  00041	7e 28		 jle	 SHORT $LN289@Do_rep0
$LL4@Do_rep0:

; 3193 :         _It _Cur = _Tgt_state._Cur;
; 3194 :         if (!_Match_pat(_Node->_Next)) { // didn't match minimum number of reps, fail

  00043	ff 70 0c	 push	 DWORD PTR [eax+12]
  00046	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00048	8b cb		 mov	 ecx, ebx
  0004a	e8 00 00 00 00	 call	 ?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat
  0004f	84 c0		 test	 al, al
  00051	0f 84 ce 00 00
	00		 je	 $LN262@Do_rep0

; 3196 :             return false;
; 3197 :         } else if (_Cur == _Tgt_state._Cur) {

  00057	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]
  0005a	3b 3b		 cmp	 edi, DWORD PTR [ebx]
  0005c	75 04		 jne	 SHORT $LN2@Do_rep0

; 3198 :             _Ix = _Node->_Min - 1; // skip matches that don't change state

  0005e	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00061	4e		 dec	 esi
$LN2@Do_rep0:

; 3191 : 
; 3192 :     for (; _Ix < _Node->_Min; ++_Ix) { // do minimum number of reps

  00062	46		 inc	 esi
  00063	89 75 e0	 mov	 DWORD PTR __Ix$1$[ebp], esi
  00066	3b 70 14	 cmp	 esi, DWORD PTR [eax+20]
  00069	7c d8		 jl	 SHORT $LL4@Do_rep0
$LN289@Do_rep0:

; 3199 :         }
; 3200 :     }
; 3201 : 
; 3202 :     _Tgt_state_t<_It> _Final = _Tgt_state;

  0006b	53		 push	 ebx
  0006c	8d 4d b8	 lea	 ecx, DWORD PTR __Final$[ebp]
  0006f	e8 00 00 00 00	 call	 ??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z

; 3203 :     bool _Matched0           = false;
; 3204 :     _It _Saved_pos           = _Tgt_state._Cur;
; 3205 : 
; 3206 :     if (_Match_pat(_Node->_End_rep->_Next)) {

  00074	8b 7d 08	 mov	 edi, DWORD PTR __Node$[ebp]
  00077	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00079	89 4d e8	 mov	 DWORD PTR __Saved_pos$1$[ebp], ecx
  0007c	8b cb		 mov	 ecx, ebx
  0007e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00082	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00085	c6 45 f3 00	 mov	 BYTE PTR $T2[ebp], 0
  00089	ff 70 0c	 push	 DWORD PTR [eax+12]
  0008c	e8 00 00 00 00	 call	 ?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat
  00091	84 c0		 test	 al, al
  00093	74 17		 je	 SHORT $LN274@Do_rep0

; 3207 :         if (!_Greedy) {

  00095	80 7d 0c 00	 cmp	 BYTE PTR __Greedy$[ebp], 0
  00099	0f 84 c8 02 00
	00		 je	 $LN265@Do_rep0

; 3208 :             return true; // go with current match
; 3209 :         }
; 3210 : 
; 3211 :         // record an acceptable match and continue
; 3212 :         _Final    = _Tgt_state;

  0009f	53		 push	 ebx
  000a0	8d 4d b8	 lea	 ecx, DWORD PTR __Final$[ebp]
  000a3	e8 00 00 00 00	 call	 ??4?$_Tgt_state_t@PBD@std@@QAEAAV01@ABV01@@Z

; 3213 :         _Matched0 = true;

  000a8	c6 45 f3 01	 mov	 BYTE PTR $T2[ebp], 1
$LN274@Do_rep0:
  000ac	8b 45 e8	 mov	 eax, DWORD PTR __Saved_pos$1$[ebp]
  000af	90		 npad	 1
$LL5@Do_rep0:

; 3214 :     }
; 3215 : 
; 3216 :     while (_Node->_Max == -1 || _Ix++ < _Node->_Max) { // try another rep/tail match

  000b0	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  000b3	83 f9 ff	 cmp	 ecx, -1
  000b6	74 11		 je	 SHORT $LN12@Do_rep0
  000b8	8b c6		 mov	 eax, esi
  000ba	46		 inc	 esi
  000bb	89 75 e0	 mov	 DWORD PTR __Ix$1$[ebp], esi
  000be	3b c1		 cmp	 eax, ecx
  000c0	0f 8d a7 02 00
	00		 jge	 $LN264@Do_rep0
  000c6	8b 45 e8	 mov	 eax, DWORD PTR __Saved_pos$1$[ebp]
$LN12@Do_rep0:

; 3217 :         _Tgt_state._Cur       = _Saved_pos;

  000c9	89 03		 mov	 DWORD PTR [ebx], eax

; 3218 :         _Tgt_state._Grp_valid = _St._Grp_valid;

  000cb	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 3045 :         if (this == _STD addressof(_Right)) {

  000ce	8d 45 9c	 lea	 eax, DWORD PTR __St$[ebp+4]
  000d1	3b f8		 cmp	 edi, eax
  000d3	0f 84 2d 01 00
	00		 je	 $LN23@Do_rep0

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  000d9	8b 75 a0	 mov	 esi, DWORD PTR __St$[ebp+8]
  000dc	8b 45 9c	 mov	 eax, DWORD PTR __St$[ebp+4]
  000df	2b f0		 sub	 esi, eax

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  000e1	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000e3	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  000e6	2b d1		 sub	 edx, ecx

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  000e8	c1 fe 02	 sar	 esi, 2

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  000eb	c1 fa 02	 sar	 edx, 2

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  000ee	89 45 e4	 mov	 DWORD PTR __First$1$[ebp], eax
  000f1	89 75 ec	 mov	 DWORD PTR __Count$1$[ebp], esi

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  000f4	89 4d d8	 mov	 DWORD PTR __Back_shift$1$[ebp], ecx

; 1418 :         if (_Newsize > _Oldcapacity) {

  000f7	3b f2		 cmp	 esi, edx
  000f9	0f 86 ab 00 00
	00		 jbe	 $LN33@Do_rep0

; 1688 :         if (_Newsize > max_size()) {

  000ff	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00105	0f 87 2a 03 00
	00		 ja	 $LN263@Do_rep0

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0010b	8b c2		 mov	 eax, edx
  0010d	d1 e8		 shr	 eax, 1
  0010f	89 45 dc	 mov	 DWORD PTR tv1375[ebp], eax
  00112	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00117	2b 45 dc	 sub	 eax, DWORD PTR tv1375[ebp]
  0011a	3b d0		 cmp	 edx, eax
  0011c	76 1b		 jbe	 SHORT $LN43@Do_rep0

; 1997 :             return _Max; // geometric growth would overflow

  0011e	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
  00123	eb 20		 jmp	 SHORT $LN44@Do_rep0
$LN262@Do_rep0:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3195 :             _Tgt_state = _St;

  00125	8d 45 98	 lea	 eax, DWORD PTR __St$[ebp]
  00128	8b cb		 mov	 ecx, ebx
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 ??4?$_Tgt_state_t@PBD@std@@QAEAAV01@ABV01@@Z
  00130	c6 45 f3 00	 mov	 BYTE PTR $T2[ebp], 0
  00134	e9 dd 02 00 00	 jmp	 $LN230@Do_rep0
$LN43@Do_rep0:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00139	8b 45 dc	 mov	 eax, DWORD PTR tv1375[ebp]
  0013c	03 c2		 add	 eax, edx

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  0013e	3b c6		 cmp	 eax, esi
  00140	0f 42 c6	 cmovb	 eax, esi
  00143	8b f0		 mov	 esi, eax
$LN44@Do_rep0:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00145	85 c9		 test	 ecx, ecx
  00147	74 43		 je	 SHORT $LN40@Do_rep0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00149	c1 e2 02	 shl	 edx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0014c	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00152	72 1a		 jb	 SHORT $LN65@Do_rep0

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00154	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00157	83 c2 23	 add	 edx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0015a	2b c8		 sub	 ecx, eax
  0015c	89 45 dc	 mov	 DWORD PTR __Ptr_container$1$[ebp], eax

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0015f	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00162	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00165	0f 87 d4 02 00
	00		 ja	 $LN246@Do_rep0

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0016b	8b 4d dc	 mov	 ecx, DWORD PTR __Ptr_container$1$[ebp]
$LN65@Do_rep0:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0016e	52		 push	 edx
  0016f	51		 push	 ecx
  00170	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1699 :             _Myfirst = nullptr;

  00175	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0017b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1700 :             _Mylast  = nullptr;

  0017e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1701 :             _Myend   = nullptr;

  00185	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN40@Do_rep0:

; 1702 :         }
; 1703 : 
; 1704 :         _Buy_raw(_Newcapacity);

  0018c	56		 push	 esi
  0018d	8b cf		 mov	 ecx, edi
  0018f	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@IV?$allocator@I@std@@@std@@AAEXI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_raw

; 1421 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);

  00194	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  00196	56		 push	 esi
  00197	ff 75 ec	 push	 DWORD PTR __Count$1$[ebp]
  0019a	ff 75 e4	 push	 DWORD PTR __First$1$[ebp]
  0019d	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAIPAI@std@@YAPAIPAII0@Z ; std::_Copy_memmove_n<unsigned int *,unsigned int *>

; 1894 :             _Dest += _Count;

  001a2	8b 45 ec	 mov	 eax, DWORD PTR __Count$1$[ebp]
  001a5	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1427 :             return;

  001a8	eb 4d		 jmp	 SHORT $LN293@Do_rep0
$LN33@Do_rep0:

; 1428 :         }
; 1429 : 
; 1430 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  001aa	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  001ad	2b c1		 sub	 eax, ecx
  001af	c1 f8 02	 sar	 eax, 2
  001b2	89 45 dc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1431 :         if (_Newsize > _Oldsize) {

  001b5	51		 push	 ecx
  001b6	3b f0		 cmp	 esi, eax
  001b8	76 2e		 jbe	 SHORT $LN34@Do_rep0

; 1432 :             bool _Copied = false;
; 1433 :             if constexpr (_Iter_copy_cat<_Iter, pointer>::_Bitcopy_assignable) {
; 1434 : #if _HAS_CXX20
; 1435 :                 if (!_STD is_constant_evaluated())
; 1436 : #endif // _HAS_CXX20
; 1437 :                 {
; 1438 :                     _Copy_memmove_n(_First, static_cast<size_t>(_Oldsize), _Myfirst);

  001ba	8b 75 e4	 mov	 esi, DWORD PTR __First$1$[ebp]
  001bd	50		 push	 eax
  001be	56		 push	 esi
  001bf	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAIPAI@std@@YAPAIPAII0@Z ; std::_Copy_memmove_n<unsigned int *,unsigned int *>

; 1439 :                     _First += _Oldsize;

  001c4	8b 55 dc	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]

; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  001c7	8b 4d ec	 mov	 ecx, DWORD PTR __Count$1$[ebp]
  001ca	2b ca		 sub	 ecx, edx
  001cc	89 4d ec	 mov	 DWORD PTR __Count$1$[ebp], ecx
  001cf	8d 04 96	 lea	 eax, DWORD PTR [esi+edx*4]
  001d2	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  001d5	56		 push	 esi
  001d6	51		 push	 ecx
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAIPAI@std@@YAPAIPAII0@Z ; std::_Copy_memmove_n<unsigned int *,unsigned int *>

; 1894 :             _Dest += _Count;

  001dd	8b 45 ec	 mov	 eax, DWORD PTR __Count$1$[ebp]
  001e0	83 c4 18	 add	 esp, 24			; 00000018H
  001e3	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1458 :         } else {

  001e6	eb 12		 jmp	 SHORT $LN294@Do_rep0
$LN34@Do_rep0:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4824 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

  001e8	56		 push	 esi
  001e9	ff 75 e4	 push	 DWORD PTR __First$1$[ebp]
  001ec	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAIPAI@std@@YAPAIPAII0@Z ; std::_Copy_memmove_n<unsigned int *,unsigned int *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1459 :             const pointer _Newlast = _Myfirst + _Newsize;

  001f1	8b 45 d8	 mov	 eax, DWORD PTR __Back_shift$1$[ebp]
  001f4	8d 04 b0	 lea	 eax, DWORD PTR [eax+esi*4]
$LN293@Do_rep0:

; 3051 :         this->_Mysize = _Right._Mysize;

  001f7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN294@Do_rep0:
  001fa	89 47 04	 mov	 DWORD PTR [edi+4], eax
  001fd	8b 45 a8	 mov	 eax, DWORD PTR __St$[ebp+16]
  00200	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00203	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$LN23@Do_rep0:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3219 :         if (!_Match_pat(_Node->_Next)) {

  00206	8b 75 08	 mov	 esi, DWORD PTR __Node$[ebp]
  00209	8b cb		 mov	 ecx, ebx
  0020b	ff 76 0c	 push	 DWORD PTR [esi+12]
  0020e	e8 00 00 00 00	 call	 ?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat
  00213	84 c0		 test	 al, al
  00215	0f 84 52 01 00
	00		 je	 $LN264@Do_rep0

; 3220 :             break; // rep match failed, quit loop
; 3221 :         }
; 3222 : 
; 3223 :         _It _Mid = _Tgt_state._Cur;

  0021b	8b 03		 mov	 eax, DWORD PTR [ebx]

; 3224 :         if (_Match_pat(_Node->_End_rep->_Next)) {

  0021d	8b cb		 mov	 ecx, ebx
  0021f	89 45 e4	 mov	 DWORD PTR __Mid$1$[ebp], eax
  00222	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00225	ff 70 0c	 push	 DWORD PTR [eax+12]
  00228	e8 00 00 00 00	 call	 ?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat
  0022d	84 c0		 test	 al, al
  0022f	0f 84 1c 01 00
	00		 je	 $LN14@Do_rep0

; 3225 :             if (!_Greedy) {

  00235	80 7d 0c 00	 cmp	 BYTE PTR __Greedy$[ebp], 0
  00239	0f 84 28 01 00
	00		 je	 $LN265@Do_rep0
  0023f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00241	8d 4d bc	 lea	 ecx, DWORD PTR __Final$[ebp+4]
  00244	57		 push	 edi
  00245	89 45 b8	 mov	 DWORD PTR __Final$[ebp], eax
  00248	e8 00 00 00 00	 call	 ??4?$vector@_NV?$allocator@_N@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<bool,std::allocator<bool> >::operator=
  0024d	8d 7b 14	 lea	 edi, DWORD PTR [ebx+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1509 :         if (this == _STD addressof(_Right)) {

  00250	8d 45 cc	 lea	 eax, DWORD PTR __Final$[ebp+20]
  00253	3b c7		 cmp	 eax, edi
  00255	0f 84 f2 00 00
	00		 je	 $LN113@Do_rep0

; 1510 :             return *this;
; 1511 :         }
; 1512 : 
; 1513 :         auto& _Al       = _Getal();
; 1514 :         auto& _Right_al = _Right._Getal();
; 1515 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1516 :             if (_Al != _Right_al) {
; 1517 :                 _Tidy();
; 1518 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1519 :             }
; 1520 :         }
; 1521 : 
; 1522 :         _Pocca(_Al, _Right_al);
; 1523 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  0025b	8b 07		 mov	 eax, DWORD PTR [edi]
  0025d	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00260	8b 55 d4	 mov	 edx, DWORD PTR __Final$[ebp+28]

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00263	2b f8		 sub	 edi, eax

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00265	8b 4d cc	 mov	 ecx, DWORD PTR __Final$[ebp+20]
  00268	2b d1		 sub	 edx, ecx

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  0026a	c1 ff 03	 sar	 edi, 3

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  0026d	c1 fa 03	 sar	 edx, 3

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00270	89 45 dc	 mov	 DWORD PTR __First$2$[ebp], eax

; 1418 :         if (_Newsize > _Oldcapacity) {

  00273	3b fa		 cmp	 edi, edx
  00275	0f 86 8c 00 00
	00		 jbe	 $LN111@Do_rep0

; 1688 :         if (_Newsize > max_size()) {

  0027b	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  00281	0f 87 b3 01 00
	00		 ja	 $LN266@Do_rep0

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00287	8b f2		 mov	 esi, edx
  00289	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  0028e	d1 ee		 shr	 esi, 1
  00290	2b c6		 sub	 eax, esi
  00292	3b d0		 cmp	 edx, eax
  00294	76 07		 jbe	 SHORT $LN121@Do_rep0

; 1997 :             return _Max; // geometric growth would overflow

  00296	be ff ff ff 1f	 mov	 esi, 536870911		; 1fffffffH
  0029b	eb 07		 jmp	 SHORT $LN122@Do_rep0
$LN121@Do_rep0:

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0029d	03 f2		 add	 esi, edx

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  0029f	3b f7		 cmp	 esi, edi
  002a1	0f 42 f7	 cmovb	 esi, edi
$LN122@Do_rep0:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  002a4	85 c9		 test	 ecx, ecx
  002a6	74 40		 je	 SHORT $LN118@Do_rep0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002a8	c1 e2 03	 shl	 edx, 3
  002ab	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  002ad	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  002b3	72 14		 jb	 SHORT $LN143@Do_rep0

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002b5	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  002b8	83 c2 23	 add	 edx, 35			; 00000023H
  002bb	2b c1		 sub	 eax, ecx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002bd	83 c0 fc	 add	 eax, -4			; fffffffcH
  002c0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002c3	0f 87 76 01 00
	00		 ja	 $LN246@Do_rep0
$LN143@Do_rep0:

; 289  :         ::operator delete(_Ptr, _Bytes);

  002c9	52		 push	 edx
  002ca	51		 push	 ecx
  002cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002d0	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1699 :             _Myfirst = nullptr;

  002d3	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+20], 0

; 1700 :             _Mylast  = nullptr;

  002da	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+24], 0

; 1701 :             _Myend   = nullptr;

  002e1	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+28], 0
$LN118@Do_rep0:

; 1702 :         }
; 1703 : 
; 1704 :         _Buy_raw(_Newcapacity);

  002e8	56		 push	 esi
  002e9	8d 4d cc	 lea	 ecx, DWORD PTR __Final$[ebp+20]
  002ec	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXI@Z ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Buy_raw

; 1421 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);

  002f1	8b 75 cc	 mov	 esi, DWORD PTR __Final$[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  002f4	8b 45 dc	 mov	 eax, DWORD PTR __First$2$[ebp]
  002f7	56		 push	 esi
  002f8	57		 push	 edi
  002f9	50		 push	 eax
  002fa	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>

; 1894 :             _Dest += _Count;

  002ff	8d 04 fe	 lea	 eax, DWORD PTR [esi+edi*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1421 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);

  00302	89 45 d0	 mov	 DWORD PTR __Final$[ebp+24], eax

; 1427 :             return;

  00305	eb 43		 jmp	 SHORT $LN295@Do_rep0
$LN111@Do_rep0:

; 1428 :         }
; 1429 : 
; 1430 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00307	8b 75 d0	 mov	 esi, DWORD PTR __Final$[ebp+24]
  0030a	2b f1		 sub	 esi, ecx
  0030c	c1 fe 03	 sar	 esi, 3
  0030f	89 75 d8	 mov	 DWORD PTR __Oldsize$1$[ebp], esi

; 1431 :         if (_Newsize > _Oldsize) {

  00312	51		 push	 ecx
  00313	3b fe		 cmp	 edi, esi
  00315	76 26		 jbe	 SHORT $LN112@Do_rep0

; 1432 :             bool _Copied = false;
; 1433 :             if constexpr (_Iter_copy_cat<_Iter, pointer>::_Bitcopy_assignable) {
; 1434 : #if _HAS_CXX20
; 1435 :                 if (!_STD is_constant_evaluated())
; 1436 : #endif // _HAS_CXX20
; 1437 :                 {
; 1438 :                     _Copy_memmove_n(_First, static_cast<size_t>(_Oldsize), _Myfirst);

  00317	56		 push	 esi
  00318	50		 push	 eax
  00319	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>

; 1439 :                     _First += _Oldsize;

  0031e	8b 45 dc	 mov	 eax, DWORD PTR __First$2$[ebp]

; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  00321	2b 7d d8	 sub	 edi, DWORD PTR __Oldsize$1$[ebp]
  00324	8d 04 f0	 lea	 eax, DWORD PTR [eax+esi*8]
  00327	8b 75 d0	 mov	 esi, DWORD PTR __Final$[ebp+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  0032a	56		 push	 esi
  0032b	57		 push	 edi
  0032c	50		 push	 eax
  0032d	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>

; 1894 :             _Dest += _Count;

  00332	8d 04 fe	 lea	 eax, DWORD PTR [esi+edi*8]
  00335	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  00338	89 45 d0	 mov	 DWORD PTR __Final$[ebp+24], eax

; 1458 :         } else {

  0033b	eb 10		 jmp	 SHORT $LN113@Do_rep0
$LN112@Do_rep0:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4824 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

  0033d	57		 push	 edi
  0033e	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1459 :             const pointer _Newlast = _Myfirst + _Newsize;

  0033f	8d 34 f9	 lea	 esi, DWORD PTR [ecx+edi*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4824 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

  00342	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1463 :             _Mylast = _Newlast;

  00347	89 75 d0	 mov	 DWORD PTR __Final$[ebp+24], esi
$LN295@Do_rep0:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3231 :             _Matched0 = true;

  0034a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN113@Do_rep0:
  0034d	c6 45 f3 01	 mov	 BYTE PTR $T2[ebp], 1
$LN14@Do_rep0:

; 3232 :         }
; 3233 : 
; 3234 :         if (_Saved_pos == _Mid) {

  00351	8b 45 e4	 mov	 eax, DWORD PTR __Mid$1$[ebp]
  00354	39 45 e8	 cmp	 DWORD PTR __Saved_pos$1$[ebp], eax
  00357	74 14		 je	 SHORT $LN264@Do_rep0

; 3235 :             break; // rep match ate no additional elements, quit loop
; 3236 :         }
; 3237 : 
; 3238 :         _Saved_pos = _Mid;
; 3239 :     }

  00359	8b 75 e0	 mov	 esi, DWORD PTR __Ix$1$[ebp]
  0035c	8b 7d 08	 mov	 edi, DWORD PTR __Node$[ebp]
  0035f	89 45 e8	 mov	 DWORD PTR __Saved_pos$1$[ebp], eax
  00362	e9 49 fd ff ff	 jmp	 $LL5@Do_rep0
$LN265@Do_rep0:
  00367	c6 45 f3 01	 mov	 BYTE PTR $T2[ebp], 1
  0036b	eb 15		 jmp	 SHORT $LN22@Do_rep0
$LN264@Do_rep0:

; 3240 : 
; 3241 :     _Tgt_state = _Matched0 ? _Final : _St;

  0036d	80 7d f3 00	 cmp	 BYTE PTR $T2[ebp], 0
  00371	8d 4d 98	 lea	 ecx, DWORD PTR __St$[ebp]
  00374	8d 45 b8	 lea	 eax, DWORD PTR __Final$[ebp]
  00377	0f 44 c1	 cmove	 eax, ecx
  0037a	8b cb		 mov	 ecx, ebx
  0037c	50		 push	 eax
  0037d	e8 00 00 00 00	 call	 ??4?$_Tgt_state_t@PBD@std@@QAEAAV01@ABV01@@Z
$LN22@Do_rep0:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00382	8b 55 cc	 mov	 edx, DWORD PTR __Final$[ebp+20]
  00385	85 d2		 test	 edx, edx
  00387	74 45		 je	 SHORT $LN186@Do_rep0

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00389	8b 4d d4	 mov	 ecx, DWORD PTR __Final$[ebp+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0038c	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0038e	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00390	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00393	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00399	72 14		 jb	 SHORT $LN205@Do_rep0

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0039b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0039e	83 c1 23	 add	 ecx, 35			; 00000023H
  003a1	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003a3	83 c0 fc	 add	 eax, -4			; fffffffcH
  003a6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003a9	0f 87 90 00 00
	00		 ja	 $LN246@Do_rep0
$LN205@Do_rep0:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003af	51		 push	 ecx
  003b0	52		 push	 edx
  003b1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003b6	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  003b9	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+20], 0

; 2081 :             _Mylast  = nullptr;

  003c0	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+24], 0

; 2082 :             _Myend   = nullptr;

  003c7	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+28], 0
$LN186@Do_rep0:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  003ce	8b 55 bc	 mov	 edx, DWORD PTR __Final$[ebp+4]
  003d1	85 d2		 test	 edx, edx
  003d3	74 41		 je	 SHORT $LN230@Do_rep0

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  003d5	8b 4d c4	 mov	 ecx, DWORD PTR __Final$[ebp+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003d8	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  003da	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003dc	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  003df	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003e5	72 10		 jb	 SHORT $LN249@Do_rep0

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003e7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003ea	83 c1 23	 add	 ecx, 35			; 00000023H
  003ed	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003ef	83 c0 fc	 add	 eax, -4			; fffffffcH
  003f2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003f5	77 48		 ja	 SHORT $LN246@Do_rep0
$LN249@Do_rep0:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003f7	51		 push	 ecx
  003f8	52		 push	 edx
  003f9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003fe	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00401	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+4], 0

; 2081 :             _Mylast  = nullptr;

  00408	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+8], 0

; 2082 :             _Myend   = nullptr;

  0040f	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+12], 0
$LN230@Do_rep0:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3242 :     return _Matched0;

  00416	8d 4d 98	 lea	 ecx, DWORD PTR __St$[ebp]
  00419	e8 00 00 00 00	 call	 ??1?$_Tgt_state_t@PBD@std@@QAE@XZ
  0041e	8a 45 f3	 mov	 al, BYTE PTR $T2[ebp]

; 3243 : }

  00421	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00424	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0042b	59		 pop	 ecx
  0042c	5f		 pop	 edi
  0042d	5e		 pop	 esi
  0042e	5b		 pop	 ebx
  0042f	8b e5		 mov	 esp, ebp
  00431	5d		 pop	 ebp
  00432	c2 08 00	 ret	 8
$LN263@Do_rep0:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1689 :             _Xlength();

  00435	e8 00 00 00 00	 call	 ?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
$LN266@Do_rep0:
  0043a	e8 00 00 00 00	 call	 ?_Xlength@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@CAXXZ ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Xlength
$LN246@Do_rep0:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0043f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN292@Do_rep0:
  00444	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z$0:
  00000	8d 4d 98	 lea	 ecx, DWORD PTR __St$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tgt_state_t@PBD@std@@QAE@XZ
__unwindfunclet$?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z$1:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR __Final$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tgt_state_t@PBD@std@@QAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Do_rep0@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_rep@2@_N@Z ENDP ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_rep0
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z
_TEXT	SEGMENT
__St$ = -100						; size = 32
__Final$ = -68						; size = 32
__Len$1$ = -36						; size = 4
tv2261 = -32						; size = 4
__Oldsize$1$ = -28					; size = 4
__Ptr_container$1$ = -28				; size = 4
__First$1$ = -28					; size = 4
__First$2$ = -28					; size = 4
__First$1$ = -28					; size = 4
tv2262 = -24						; size = 4
__Oldsize$1$ = -24					; size = 4
$T2 = -24						; size = 4
__Oldsize$1$ = -24					; size = 4
__Final_len$1$ = -20					; size = 4
__First$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Node$ = 8						; size = 4
__Node$2$ = 8						; size = 4
__Oldsize$1$ = 8					; size = 4
$T3 = 8							; size = 4
?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z PROC ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_if, COMDAT
; _this$ = ecx

; 3141 : bool _Matcher<_BidIt, _Elem, _RxTraits, _It>::_Do_if(_Node_if* _Node) { // apply if node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 f0	 mov	 DWORD PTR _this$1$[ebp], esi

; 3142 :     _Tgt_state_t<_It> _St = _Tgt_state;

  0002d	56		 push	 esi
  0002e	8d 4d 9c	 lea	 ecx, DWORD PTR __St$[ebp]
  00031	e8 00 00 00 00	 call	 ??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z

; 3143 : 
; 3144 :     // look for the first match
; 3145 :     for (; _Node; _Node = _Node->_Child) { // process one branch of if

  00036	83 7d 08 00	 cmp	 DWORD PTR __Node$[ebp], 0
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	0f 84 85 05 00
	00		 je	 $LN445@Do_if
  00047	8b ce		 mov	 ecx, esi
  00049	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0004c	89 55 e8	 mov	 DWORD PTR tv2262[ebp], edx
  0004f	8d 59 14	 lea	 ebx, DWORD PTR [ecx+20]
$LL4@Do_if:
  00052	8b 45 9c	 mov	 eax, DWORD PTR __St$[ebp]
  00055	89 01		 mov	 DWORD PTR [ecx], eax
  00057	8d 45 a0	 lea	 eax, DWORD PTR __St$[ebp+4]
  0005a	50		 push	 eax
  0005b	8b ca		 mov	 ecx, edx
  0005d	e8 00 00 00 00	 call	 ??4?$vector@_NV?$allocator@_N@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<bool,std::allocator<bool> >::operator=
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1509 :         if (this == _STD addressof(_Right)) {

  00062	8d 45 b0	 lea	 eax, DWORD PTR __St$[ebp+20]
  00065	3b d8		 cmp	 ebx, eax
  00067	0f 84 f3 00 00
	00		 je	 $LN32@Do_if

; 1510 :             return *this;
; 1511 :         }
; 1512 : 
; 1513 :         auto& _Al       = _Getal();
; 1514 :         auto& _Right_al = _Right._Getal();
; 1515 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1516 :             if (_Al != _Right_al) {
; 1517 :                 _Tidy();
; 1518 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1519 :             }
; 1520 :         }
; 1521 : 
; 1522 :         _Pocca(_Al, _Right_al);
; 1523 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  0006d	8b 7d b4	 mov	 edi, DWORD PTR __St$[ebp+24]
  00070	8b 45 b0	 mov	 eax, DWORD PTR __St$[ebp+20]
  00073	2b f8		 sub	 edi, eax

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00075	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00078	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0007a	2b d1		 sub	 edx, ecx

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  0007c	c1 ff 03	 sar	 edi, 3

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  0007f	c1 fa 03	 sar	 edx, 3

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00082	89 45 ec	 mov	 DWORD PTR __First$1$[ebp], eax

; 1418 :         if (_Newsize > _Oldcapacity) {

  00085	3b fa		 cmp	 edi, edx
  00087	0f 86 8d 00 00
	00		 jbe	 $LN30@Do_if

; 1688 :         if (_Newsize > max_size()) {

  0008d	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  00093	0f 87 53 05 00
	00		 ja	 $LN448@Do_if

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00099	8b f2		 mov	 esi, edx
  0009b	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  000a0	d1 ee		 shr	 esi, 1
  000a2	2b c6		 sub	 eax, esi
  000a4	3b d0		 cmp	 edx, eax
  000a6	76 07		 jbe	 SHORT $LN40@Do_if

; 1997 :             return _Max; // geometric growth would overflow

  000a8	be ff ff ff 1f	 mov	 esi, 536870911		; 1fffffffH
  000ad	eb 07		 jmp	 SHORT $LN41@Do_if
$LN40@Do_if:

; 1998 :         }
; 1999 : 
; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000af	03 f2		 add	 esi, edx

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  000b1	3b f7		 cmp	 esi, edi
  000b3	0f 42 f7	 cmovb	 esi, edi
$LN41@Do_if:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  000b6	85 c9		 test	 ecx, ecx
  000b8	74 43		 je	 SHORT $LN446@Do_if
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ba	c1 e2 03	 shl	 edx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000bd	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000c3	72 1a		 jb	 SHORT $LN62@Do_if

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000c5	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  000c8	83 c2 23	 add	 edx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000cb	2b c8		 sub	 ecx, eax
  000cd	89 45 e4	 mov	 DWORD PTR __Ptr_container$1$[ebp], eax

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d0	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  000d3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d6	0f 87 15 05 00
	00		 ja	 $LN401@Do_if

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000dc	8b 4d e4	 mov	 ecx, DWORD PTR __Ptr_container$1$[ebp]
$LN62@Do_if:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000df	52		 push	 edx
  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1699 :             _Myfirst = nullptr;

  000e6	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000ec	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1700 :             _Mylast  = nullptr;

  000ef	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1701 :             _Myend   = nullptr;

  000f6	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN446@Do_if:

; 1702 :         }
; 1703 : 
; 1704 :         _Buy_raw(_Newcapacity);

  000fd	56		 push	 esi
  000fe	8b cb		 mov	 ecx, ebx
  00100	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXI@Z ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Buy_raw

; 1421 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);

  00105	8b 33		 mov	 esi, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  00107	8b 45 ec	 mov	 eax, DWORD PTR __First$1$[ebp]
  0010a	56		 push	 esi
  0010b	57		 push	 edi
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>

; 1894 :             _Dest += _Count;

  00112	8d 04 fe	 lea	 eax, DWORD PTR [esi+edi*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1421 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);

  00115	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1427 :             return;

  00118	eb 43		 jmp	 SHORT $LN453@Do_if
$LN30@Do_if:

; 1428 :         }
; 1429 : 
; 1430 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  0011a	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  0011d	2b f1		 sub	 esi, ecx
  0011f	c1 fe 03	 sar	 esi, 3
  00122	89 75 e4	 mov	 DWORD PTR __Oldsize$1$[ebp], esi

; 1431 :         if (_Newsize > _Oldsize) {

  00125	51		 push	 ecx
  00126	3b fe		 cmp	 edi, esi
  00128	76 26		 jbe	 SHORT $LN31@Do_if

; 1432 :             bool _Copied = false;
; 1433 :             if constexpr (_Iter_copy_cat<_Iter, pointer>::_Bitcopy_assignable) {
; 1434 : #if _HAS_CXX20
; 1435 :                 if (!_STD is_constant_evaluated())
; 1436 : #endif // _HAS_CXX20
; 1437 :                 {
; 1438 :                     _Copy_memmove_n(_First, static_cast<size_t>(_Oldsize), _Myfirst);

  0012a	56		 push	 esi
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>

; 1439 :                     _First += _Oldsize;

  00131	8b 45 ec	 mov	 eax, DWORD PTR __First$1$[ebp]

; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  00134	2b 7d e4	 sub	 edi, DWORD PTR __Oldsize$1$[ebp]
  00137	8d 04 f0	 lea	 eax, DWORD PTR [eax+esi*8]
  0013a	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  0013d	56		 push	 esi
  0013e	57		 push	 edi
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>

; 1894 :             _Dest += _Count;

  00145	8d 04 fe	 lea	 eax, DWORD PTR [esi+edi*8]
  00148	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  0014b	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1458 :         } else {

  0014e	eb 10		 jmp	 SHORT $LN32@Do_if
$LN31@Do_if:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4824 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

  00150	57		 push	 edi
  00151	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1459 :             const pointer _Newlast = _Myfirst + _Newsize;

  00152	8d 34 f9	 lea	 esi, DWORD PTR [ecx+edi*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4824 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

  00155	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1463 :             _Mylast = _Newlast;

  0015a	89 73 04	 mov	 DWORD PTR [ebx+4], esi
$LN453@Do_if:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3147 :         if (_Match_pat(_Node->_Next)) { // try to match this branch

  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN32@Do_if:
  00160	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]
  00163	8b 75 f0	 mov	 esi, DWORD PTR _this$1$[ebp]
  00166	8b ce		 mov	 ecx, esi
  00168	ff 70 0c	 push	 DWORD PTR [eax+12]
  0016b	e8 00 00 00 00	 call	 ?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat
  00170	84 c0		 test	 al, al
  00172	75 1b		 jne	 SHORT $LN9@Do_if

; 3143 : 
; 3144 :     // look for the first match
; 3145 :     for (; _Node; _Node = _Node->_Child) { // process one branch of if

  00174	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]
  00177	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0017a	89 45 08	 mov	 DWORD PTR __Node$[ebp], eax
  0017d	85 c0		 test	 eax, eax
  0017f	0f 84 47 04 00
	00		 je	 $LN445@Do_if
  00185	8b 55 e8	 mov	 edx, DWORD PTR tv2262[ebp]
  00188	8b ce		 mov	 ecx, esi
  0018a	e9 c3 fe ff ff	 jmp	 $LL4@Do_if
$LN9@Do_if:

; 3148 :             break;
; 3149 :         }
; 3150 :     }
; 3151 : 
; 3152 :     // if none of the if branches matched, fail to match
; 3153 :     if (!_Node) {
; 3154 :         return false;
; 3155 :     }
; 3156 : 
; 3157 :     // if we aren't looking for the longest match, that's it
; 3158 :     if (!_Longest) {

  0018f	80 7e 6c 00	 cmp	 BYTE PTR [esi+108], 0
  00193	75 07		 jne	 SHORT $LN10@Do_if

; 3159 :         return true;

  00195	b3 01		 mov	 bl, 1
  00197	e9 32 04 00 00	 jmp	 $LN385@Do_if
$LN10@Do_if:

; 3160 :     }
; 3161 : 
; 3162 :     // see if there is a longer match
; 3163 :     _Tgt_state_t<_It> _Final = _Tgt_state;

  0019c	56		 push	 esi
  0019d	8d 4d bc	 lea	 ecx, DWORD PTR __Final$[ebp]
  001a0	e8 00 00 00 00	 call	 ??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1692 :         return _Last - _First; // assume the iterator will do debug checking

  001a5	8b 55 f0	 mov	 edx, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3166 :         _Node = _Node->_Child;

  001a8	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]
  001ab	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1692 :         return _Last - _First; // assume the iterator will do debug checking

  001af	8b 3a		 mov	 edi, DWORD PTR [edx]
  001b1	2b 7d 9c	 sub	 edi, DWORD PTR __St$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3166 :         _Node = _Node->_Child;

  001b4	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1692 :         return _Last - _First; // assume the iterator will do debug checking

  001b7	89 7d ec	 mov	 DWORD PTR __Final_len$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3166 :         _Node = _Node->_Child;

  001ba	89 45 08	 mov	 DWORD PTR __Node$2$[ebp], eax

; 3167 :         if (!_Node) {

  001bd	85 c0		 test	 eax, eax
  001bf	0f 84 62 02 00
	00		 je	 $LN421@Do_if
  001c5	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  001c8	89 4d e0	 mov	 DWORD PTR tv2261[ebp], ecx
  001cb	8d 5a 14	 lea	 ebx, DWORD PTR [edx+20]
  001ce	66 90		 npad	 2
$LL7@Do_if:
  001d0	8b 45 9c	 mov	 eax, DWORD PTR __St$[ebp]
  001d3	89 02		 mov	 DWORD PTR [edx], eax
  001d5	8d 45 a0	 lea	 eax, DWORD PTR __St$[ebp+4]
  001d8	50		 push	 eax
  001d9	e8 00 00 00 00	 call	 ??4?$vector@_NV?$allocator@_N@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<bool,std::allocator<bool> >::operator=
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1509 :         if (this == _STD addressof(_Right)) {

  001de	8d 45 b0	 lea	 eax, DWORD PTR __St$[ebp+20]
  001e1	3b d8		 cmp	 ebx, eax
  001e3	0f 84 eb 00 00
	00		 je	 $LN112@Do_if

; 1510 :             return *this;
; 1511 :         }
; 1512 : 
; 1513 :         auto& _Al       = _Getal();
; 1514 :         auto& _Right_al = _Right._Getal();
; 1515 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1516 :             if (_Al != _Right_al) {
; 1517 :                 _Tidy();
; 1518 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1519 :             }
; 1520 :         }
; 1521 : 
; 1522 :         _Pocca(_Al, _Right_al);
; 1523 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  001e9	8b 7d b4	 mov	 edi, DWORD PTR __St$[ebp+24]
  001ec	8b 55 b0	 mov	 edx, DWORD PTR __St$[ebp+20]
  001ef	2b fa		 sub	 edi, edx

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  001f1	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  001f4	8b 33		 mov	 esi, DWORD PTR [ebx]
  001f6	2b ce		 sub	 ecx, esi

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  001f8	c1 ff 03	 sar	 edi, 3

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  001fb	c1 f9 03	 sar	 ecx, 3

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  001fe	89 55 e4	 mov	 DWORD PTR __First$1$[ebp], edx

; 1418 :         if (_Newsize > _Oldcapacity) {

  00201	3b f9		 cmp	 edi, ecx
  00203	0f 86 86 00 00
	00		 jbe	 $LN110@Do_if

; 1688 :         if (_Newsize > max_size()) {

  00209	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  0020f	0f 87 d7 03 00
	00		 ja	 $LN448@Do_if

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00215	8b d1		 mov	 edx, ecx
  00217	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  0021c	d1 ea		 shr	 edx, 1
  0021e	2b c2		 sub	 eax, edx
  00220	3b c8		 cmp	 ecx, eax
  00222	76 09		 jbe	 SHORT $LN120@Do_if

; 1997 :             return _Max; // geometric growth would overflow

  00224	c7 45 e8 ff ff
	ff 1f		 mov	 DWORD PTR $T2[ebp], 536870911 ; 1fffffffH
  0022b	eb 0b		 jmp	 SHORT $LN121@Do_if
$LN120@Do_if:

; 1998 :         }
; 1999 : 
; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0022d	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00230	3b c7		 cmp	 eax, edi
  00232	0f 42 c7	 cmovb	 eax, edi
  00235	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
$LN121@Do_if:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00238	85 f6		 test	 esi, esi
  0023a	74 3f		 je	 SHORT $LN447@Do_if
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0023c	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0023f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00245	72 16		 jb	 SHORT $LN142@Do_if

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00247	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0024a	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0024d	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0024f	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00252	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00255	0f 87 96 03 00
	00		 ja	 $LN401@Do_if

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0025b	8b f2		 mov	 esi, edx
$LN142@Do_if:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0025d	51		 push	 ecx
  0025e	56		 push	 esi
  0025f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1699 :             _Myfirst = nullptr;

  00264	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0026a	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1700 :             _Mylast  = nullptr;

  0026d	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1701 :             _Myend   = nullptr;

  00274	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN447@Do_if:

; 1702 :         }
; 1703 : 
; 1704 :         _Buy_raw(_Newcapacity);

  0027b	ff 75 e8	 push	 DWORD PTR $T2[ebp]
  0027e	8b cb		 mov	 ecx, ebx
  00280	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXI@Z ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Buy_raw

; 1421 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);

  00285	8b 33		 mov	 esi, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  00287	8b 45 e4	 mov	 eax, DWORD PTR __First$1$[ebp]
  0028a	56		 push	 esi
  0028b	57		 push	 edi
  0028c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1427 :             return;

  0028d	eb 34		 jmp	 SHORT $LN454@Do_if
$LN110@Do_if:

; 1428 :         }
; 1429 : 
; 1430 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  0028f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00292	2b c6		 sub	 eax, esi
  00294	c1 f8 03	 sar	 eax, 3
  00297	89 45 e8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1431 :         if (_Newsize > _Oldsize) {

  0029a	56		 push	 esi
  0029b	3b f8		 cmp	 edi, eax
  0029d	76 22		 jbe	 SHORT $LN111@Do_if

; 1432 :             bool _Copied = false;
; 1433 :             if constexpr (_Iter_copy_cat<_Iter, pointer>::_Bitcopy_assignable) {
; 1434 : #if _HAS_CXX20
; 1435 :                 if (!_STD is_constant_evaluated())
; 1436 : #endif // _HAS_CXX20
; 1437 :                 {
; 1438 :                     _Copy_memmove_n(_First, static_cast<size_t>(_Oldsize), _Myfirst);

  0029f	50		 push	 eax
  002a0	52		 push	 edx
  002a1	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>

; 1439 :                     _First += _Oldsize;

  002a6	8b 4d e8	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]

; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  002a9	2b f9		 sub	 edi, ecx
  002ab	8b 45 e4	 mov	 eax, DWORD PTR __First$1$[ebp]
  002ae	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  002b1	56		 push	 esi
  002b2	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1439 :                     _First += _Oldsize;

  002b3	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  002b6	50		 push	 eax
  002b7	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
  002bc	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1458 :         } else {

  002bf	eb 0a		 jmp	 SHORT $LN455@Do_if
$LN111@Do_if:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4824 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

  002c1	57		 push	 edi
  002c2	52		 push	 edx
$LN454@Do_if:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3172 :         if (_Match_pat(_Node->_Next)) { // record match if it is longer

  002c3	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
  002c8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN455@Do_if:
  002cb	8d 04 fe	 lea	 eax, DWORD PTR [esi+edi*8]
  002ce	8b 7d ec	 mov	 edi, DWORD PTR __Final_len$1$[ebp]
  002d1	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN112@Do_if:
  002d4	8b 45 08	 mov	 eax, DWORD PTR __Node$2$[ebp]
  002d7	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  002da	ff 70 0c	 push	 DWORD PTR [eax+12]
  002dd	e8 00 00 00 00	 call	 ?_Match_pat@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match_pat
  002e2	8b 55 f0	 mov	 edx, DWORD PTR _this$1$[ebp]
  002e5	84 c0		 test	 al, al
  002e7	0f 84 26 01 00
	00		 je	 $LN5@Do_if
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1692 :         return _Last - _First; // assume the iterator will do debug checking

  002ed	8b 0a		 mov	 ecx, DWORD PTR [edx]
  002ef	8b c1		 mov	 eax, ecx
  002f1	2b 45 9c	 sub	 eax, DWORD PTR __St$[ebp]
  002f4	89 45 dc	 mov	 DWORD PTR __Len$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3174 :             if (_Final_len < _Len) { // memorize longest so far

  002f7	3b f8		 cmp	 edi, eax
  002f9	0f 8d 14 01 00
	00		 jge	 $LN5@Do_if
  002ff	ff 75 e0	 push	 DWORD PTR tv2261[ebp]
  00302	89 4d bc	 mov	 DWORD PTR __Final$[ebp], ecx
  00305	8d 4d c0	 lea	 ecx, DWORD PTR __Final$[ebp+4]
  00308	e8 00 00 00 00	 call	 ??4?$vector@_NV?$allocator@_N@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<bool,std::allocator<bool> >::operator=
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1509 :         if (this == _STD addressof(_Right)) {

  0030d	8d 45 d0	 lea	 eax, DWORD PTR __Final$[ebp+20]
  00310	3b c3		 cmp	 eax, ebx
  00312	0f 84 f2 00 00
	00		 je	 $LN191@Do_if

; 1510 :             return *this;
; 1511 :         }
; 1512 : 
; 1513 :         auto& _Al       = _Getal();
; 1514 :         auto& _Right_al = _Right._Getal();
; 1515 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1516 :             if (_Al != _Right_al) {
; 1517 :                 _Tidy();
; 1518 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1519 :             }
; 1520 :         }
; 1521 : 
; 1522 :         _Pocca(_Al, _Right_al);
; 1523 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00318	8b 03		 mov	 eax, DWORD PTR [ebx]
  0031a	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  0031d	8b 55 d8	 mov	 edx, DWORD PTR __Final$[ebp+28]

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00320	2b f8		 sub	 edi, eax

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00322	8b 4d d0	 mov	 ecx, DWORD PTR __Final$[ebp+20]
  00325	2b d1		 sub	 edx, ecx

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00327	c1 ff 03	 sar	 edi, 3

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  0032a	c1 fa 03	 sar	 edx, 3

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  0032d	89 45 e4	 mov	 DWORD PTR __First$2$[ebp], eax

; 1418 :         if (_Newsize > _Oldcapacity) {

  00330	3b fa		 cmp	 edi, edx
  00332	0f 86 8c 00 00
	00		 jbe	 $LN189@Do_if

; 1688 :         if (_Newsize > max_size()) {

  00338	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  0033e	0f 87 a8 02 00
	00		 ja	 $LN448@Do_if

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00344	8b f2		 mov	 esi, edx
  00346	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  0034b	d1 ee		 shr	 esi, 1
  0034d	2b c6		 sub	 eax, esi
  0034f	3b d0		 cmp	 edx, eax
  00351	76 07		 jbe	 SHORT $LN199@Do_if

; 1997 :             return _Max; // geometric growth would overflow

  00353	be ff ff ff 1f	 mov	 esi, 536870911		; 1fffffffH
  00358	eb 07		 jmp	 SHORT $LN200@Do_if
$LN199@Do_if:

; 1998 :         }
; 1999 : 
; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0035a	03 f2		 add	 esi, edx

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  0035c	3b f7		 cmp	 esi, edi
  0035e	0f 42 f7	 cmovb	 esi, edi
$LN200@Do_if:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00361	85 c9		 test	 ecx, ecx
  00363	74 40		 je	 SHORT $LN196@Do_if
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00365	c1 e2 03	 shl	 edx, 3
  00368	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0036a	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00370	72 14		 jb	 SHORT $LN221@Do_if

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00372	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00375	83 c2 23	 add	 edx, 35			; 00000023H
  00378	2b c1		 sub	 eax, ecx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0037a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0037d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00380	0f 87 6b 02 00
	00		 ja	 $LN401@Do_if
$LN221@Do_if:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00386	52		 push	 edx
  00387	51		 push	 ecx
  00388	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0038d	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1699 :             _Myfirst = nullptr;

  00390	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+20], 0

; 1700 :             _Mylast  = nullptr;

  00397	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+24], 0

; 1701 :             _Myend   = nullptr;

  0039e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+28], 0
$LN196@Do_if:

; 1702 :         }
; 1703 : 
; 1704 :         _Buy_raw(_Newcapacity);

  003a5	56		 push	 esi
  003a6	8d 4d d0	 lea	 ecx, DWORD PTR __Final$[ebp+20]
  003a9	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXI@Z ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Buy_raw

; 1421 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);

  003ae	8b 75 d0	 mov	 esi, DWORD PTR __Final$[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  003b1	8b 45 e4	 mov	 eax, DWORD PTR __First$2$[ebp]
  003b4	56		 push	 esi
  003b5	57		 push	 edi
  003b6	50		 push	 eax
  003b7	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>

; 1894 :             _Dest += _Count;

  003bc	8d 04 fe	 lea	 eax, DWORD PTR [esi+edi*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1421 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);

  003bf	89 45 d4	 mov	 DWORD PTR __Final$[ebp+24], eax

; 1427 :             return;

  003c2	eb 43		 jmp	 SHORT $LN456@Do_if
$LN189@Do_if:

; 1428 :         }
; 1429 : 
; 1430 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  003c4	8b 75 d4	 mov	 esi, DWORD PTR __Final$[ebp+24]
  003c7	2b f1		 sub	 esi, ecx
  003c9	c1 fe 03	 sar	 esi, 3
  003cc	89 75 e8	 mov	 DWORD PTR __Oldsize$1$[ebp], esi

; 1431 :         if (_Newsize > _Oldsize) {

  003cf	51		 push	 ecx
  003d0	3b fe		 cmp	 edi, esi
  003d2	76 26		 jbe	 SHORT $LN190@Do_if

; 1432 :             bool _Copied = false;
; 1433 :             if constexpr (_Iter_copy_cat<_Iter, pointer>::_Bitcopy_assignable) {
; 1434 : #if _HAS_CXX20
; 1435 :                 if (!_STD is_constant_evaluated())
; 1436 : #endif // _HAS_CXX20
; 1437 :                 {
; 1438 :                     _Copy_memmove_n(_First, static_cast<size_t>(_Oldsize), _Myfirst);

  003d4	56		 push	 esi
  003d5	50		 push	 eax
  003d6	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>

; 1439 :                     _First += _Oldsize;

  003db	8b 45 e4	 mov	 eax, DWORD PTR __First$2$[ebp]

; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  003de	2b 7d e8	 sub	 edi, DWORD PTR __Oldsize$1$[ebp]
  003e1	8d 04 f0	 lea	 eax, DWORD PTR [eax+esi*8]
  003e4	8b 75 d4	 mov	 esi, DWORD PTR __Final$[ebp+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  003e7	56		 push	 esi
  003e8	57		 push	 edi
  003e9	50		 push	 eax
  003ea	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>

; 1894 :             _Dest += _Count;

  003ef	8d 04 fe	 lea	 eax, DWORD PTR [esi+edi*8]
  003f2	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  003f5	89 45 d4	 mov	 DWORD PTR __Final$[ebp+24], eax

; 1458 :         } else {

  003f8	eb 10		 jmp	 SHORT $LN191@Do_if
$LN190@Do_if:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4824 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

  003fa	57		 push	 edi
  003fb	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1459 :             const pointer _Newlast = _Myfirst + _Newsize;

  003fc	8d 34 f9	 lea	 esi, DWORD PTR [ecx+edi*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4824 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

  003ff	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1463 :             _Mylast = _Newlast;

  00404	89 75 d4	 mov	 DWORD PTR __Final$[ebp+24], esi
$LN456@Do_if:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3176 :                 _Final_len = _Len;

  00407	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN191@Do_if:
  0040a	8b 7d dc	 mov	 edi, DWORD PTR __Len$1$[ebp]
  0040d	8b 55 f0	 mov	 edx, DWORD PTR _this$1$[ebp]
  00410	89 7d ec	 mov	 DWORD PTR __Final_len$1$[ebp], edi
$LN5@Do_if:

; 3167 :         if (!_Node) {

  00413	8b 45 08	 mov	 eax, DWORD PTR __Node$2$[ebp]
  00416	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  00419	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0041c	89 45 08	 mov	 DWORD PTR __Node$2$[ebp], eax
  0041f	85 c0		 test	 eax, eax
  00421	0f 85 a9 fd ff
	ff		 jne	 $LL7@Do_if
$LN421@Do_if:
  00427	8b 45 bc	 mov	 eax, DWORD PTR __Final$[ebp]
  0042a	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  0042d	89 02		 mov	 DWORD PTR [edx], eax
  0042f	8d 45 c0	 lea	 eax, DWORD PTR __Final$[ebp+4]
  00432	50		 push	 eax
  00433	e8 00 00 00 00	 call	 ??4?$vector@_NV?$allocator@_N@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<bool,std::allocator<bool> >::operator=
  00438	8b 5d f0	 mov	 ebx, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1509 :         if (this == _STD addressof(_Right)) {

  0043b	8d 45 d0	 lea	 eax, DWORD PTR __Final$[ebp+20]
  0043e	83 c3 14	 add	 ebx, 20			; 00000014H
  00441	3b d8		 cmp	 ebx, eax
  00443	0f 84 eb 00 00
	00		 je	 $LN268@Do_if

; 1510 :             return *this;
; 1511 :         }
; 1512 : 
; 1513 :         auto& _Al       = _Getal();
; 1514 :         auto& _Right_al = _Right._Getal();
; 1515 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1516 :             if (_Al != _Right_al) {
; 1517 :                 _Tidy();
; 1518 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1519 :             }
; 1520 :         }
; 1521 : 
; 1522 :         _Pocca(_Al, _Right_al);
; 1523 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00449	8b 7d d4	 mov	 edi, DWORD PTR __Final$[ebp+24]
  0044c	8b 4d d0	 mov	 ecx, DWORD PTR __Final$[ebp+20]
  0044f	2b f9		 sub	 edi, ecx

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00451	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00454	8b 33		 mov	 esi, DWORD PTR [ebx]
  00456	2b c6		 sub	 eax, esi

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00458	c1 ff 03	 sar	 edi, 3

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  0045b	c1 f8 03	 sar	 eax, 3

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  0045e	89 4d e4	 mov	 DWORD PTR __First$1$[ebp], ecx

; 1418 :         if (_Newsize > _Oldcapacity) {

  00461	3b f8		 cmp	 edi, eax
  00463	0f 86 89 00 00
	00		 jbe	 $LN266@Do_if

; 1688 :         if (_Newsize > max_size()) {

  00469	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  0046f	0f 87 77 01 00
	00		 ja	 $LN448@Do_if

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00475	8b c8		 mov	 ecx, eax
  00477	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  0047c	d1 e9		 shr	 ecx, 1
  0047e	2b d1		 sub	 edx, ecx
  00480	3b c2		 cmp	 eax, edx
  00482	76 09		 jbe	 SHORT $LN276@Do_if

; 1997 :             return _Max; // geometric growth would overflow

  00484	c7 45 08 ff ff
	ff 1f		 mov	 DWORD PTR $T3[ebp], 536870911 ; 1fffffffH
  0048b	eb 0a		 jmp	 SHORT $LN277@Do_if
$LN276@Do_if:

; 1998 :         }
; 1999 : 
; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0048d	03 c8		 add	 ecx, eax

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  0048f	3b cf		 cmp	 ecx, edi
  00491	0f 42 cf	 cmovb	 ecx, edi
  00494	89 4d 08	 mov	 DWORD PTR $T3[ebp], ecx
$LN277@Do_if:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00497	85 f6		 test	 esi, esi
  00499	74 43		 je	 SHORT $LN273@Do_if
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0049b	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  004a2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004a8	72 16		 jb	 SHORT $LN298@Do_if

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004aa	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  004ad	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  004b0	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004b2	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  004b5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004b8	0f 87 33 01 00
	00		 ja	 $LN401@Do_if

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  004be	8b f2		 mov	 esi, edx
$LN298@Do_if:

; 289  :         ::operator delete(_Ptr, _Bytes);

  004c0	51		 push	 ecx
  004c1	56		 push	 esi
  004c2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1699 :             _Myfirst = nullptr;

  004c7	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  004cd	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1700 :             _Mylast  = nullptr;

  004d0	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1701 :             _Myend   = nullptr;

  004d7	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN273@Do_if:

; 1702 :         }
; 1703 : 
; 1704 :         _Buy_raw(_Newcapacity);

  004de	ff 75 08	 push	 DWORD PTR $T3[ebp]
  004e1	8b cb		 mov	 ecx, ebx
  004e3	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXI@Z ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Buy_raw

; 1421 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);

  004e8	8b 33		 mov	 esi, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  004ea	8b 45 e4	 mov	 eax, DWORD PTR __First$1$[ebp]
  004ed	56		 push	 esi
  004ee	57		 push	 edi
  004ef	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1427 :             return;

  004f0	eb 34		 jmp	 SHORT $LN457@Do_if
$LN266@Do_if:

; 1428 :         }
; 1429 : 
; 1430 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  004f2	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  004f5	2b c6		 sub	 eax, esi
  004f7	c1 f8 03	 sar	 eax, 3
  004fa	89 45 08	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1431 :         if (_Newsize > _Oldsize) {

  004fd	56		 push	 esi
  004fe	3b f8		 cmp	 edi, eax
  00500	76 22		 jbe	 SHORT $LN267@Do_if

; 1432 :             bool _Copied = false;
; 1433 :             if constexpr (_Iter_copy_cat<_Iter, pointer>::_Bitcopy_assignable) {
; 1434 : #if _HAS_CXX20
; 1435 :                 if (!_STD is_constant_evaluated())
; 1436 : #endif // _HAS_CXX20
; 1437 :                 {
; 1438 :                     _Copy_memmove_n(_First, static_cast<size_t>(_Oldsize), _Myfirst);

  00502	50		 push	 eax
  00503	51		 push	 ecx
  00504	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>

; 1439 :                     _First += _Oldsize;

  00509	8b 4d 08	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]

; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  0050c	2b f9		 sub	 edi, ecx
  0050e	8b 45 e4	 mov	 eax, DWORD PTR __First$1$[ebp]
  00511	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  00514	56		 push	 esi
  00515	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1439 :                     _First += _Oldsize;

  00516	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  00519	50		 push	 eax
  0051a	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
  0051f	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1458 :         } else {

  00522	eb 0a		 jmp	 SHORT $LN458@Do_if
$LN267@Do_if:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4824 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

  00524	57		 push	 edi
  00525	51		 push	 ecx
$LN457@Do_if:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3183 :     return true;

  00526	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
  0052b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN458@Do_if:
  0052e	8d 04 fe	 lea	 eax, DWORD PTR [esi+edi*8]
  00531	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN268@Do_if:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00534	8b 55 d0	 mov	 edx, DWORD PTR __Final$[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3183 :     return true;

  00537	b3 01		 mov	 bl, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00539	85 d2		 test	 edx, edx
  0053b	74 45		 je	 SHORT $LN341@Do_if

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0053d	8b 4d d8	 mov	 ecx, DWORD PTR __Final$[ebp+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00540	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00542	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00544	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00547	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0054d	72 14		 jb	 SHORT $LN360@Do_if

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0054f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00552	83 c1 23	 add	 ecx, 35			; 00000023H
  00555	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00557	83 c0 fc	 add	 eax, -4			; fffffffcH
  0055a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0055d	0f 87 8e 00 00
	00		 ja	 $LN401@Do_if
$LN360@Do_if:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00563	51		 push	 ecx
  00564	52		 push	 edx
  00565	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0056a	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0056d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+20], 0

; 2081 :             _Mylast  = nullptr;

  00574	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+24], 0

; 2082 :             _Myend   = nullptr;

  0057b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+28], 0
$LN341@Do_if:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00582	8b 55 c0	 mov	 edx, DWORD PTR __Final$[ebp+4]
  00585	85 d2		 test	 edx, edx
  00587	74 45		 je	 SHORT $LN385@Do_if

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00589	8b 4d c8	 mov	 ecx, DWORD PTR __Final$[ebp+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0058c	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0058e	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00590	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00593	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00599	72 10		 jb	 SHORT $LN404@Do_if

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0059b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0059e	83 c1 23	 add	 ecx, 35			; 00000023H
  005a1	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005a3	83 c0 fc	 add	 eax, -4			; fffffffcH
  005a6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005a9	77 46		 ja	 SHORT $LN401@Do_if
$LN404@Do_if:

; 289  :         ::operator delete(_Ptr, _Bytes);

  005ab	51		 push	 ecx
  005ac	52		 push	 edx
  005ad	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005b2	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  005b5	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+4], 0

; 2081 :             _Mylast  = nullptr;

  005bc	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+8], 0

; 2082 :             _Myend   = nullptr;

  005c3	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR __Final$[ebp+12], 0
  005ca	eb 02		 jmp	 SHORT $LN385@Do_if
$LN445@Do_if:
  005cc	32 db		 xor	 bl, bl
$LN385@Do_if:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3183 :     return true;

  005ce	8d 4d 9c	 lea	 ecx, DWORD PTR __St$[ebp]
  005d1	e8 00 00 00 00	 call	 ??1?$_Tgt_state_t@PBD@std@@QAE@XZ
  005d6	8a c3		 mov	 al, bl

; 3184 : }

  005d8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  005db	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  005e2	59		 pop	 ecx
  005e3	5f		 pop	 edi
  005e4	5e		 pop	 esi
  005e5	5b		 pop	 ebx
  005e6	8b e5		 mov	 esp, ebp
  005e8	5d		 pop	 ebp
  005e9	c2 04 00	 ret	 4
$LN448@Do_if:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1689 :             _Xlength();

  005ec	e8 00 00 00 00	 call	 ?_Xlength@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@CAXXZ ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Xlength
$LN401@Do_if:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005f1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN452@Do_if:
  005f6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z$0:
  00000	8d 4d 9c	 lea	 ecx, DWORD PTR __St$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tgt_state_t@PBD@std@@QAE@XZ
__unwindfunclet$?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z$1:
  00008	8d 4d bc	 lea	 ecx, DWORD PTR __Final$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tgt_state_t@PBD@std@@QAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Do_if@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@AAE_NPAV_Node_if@2@@Z ENDP ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Do_if
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??4?$_Tgt_state_t@PBD@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
__First$2$ = -4						; size = 4
___that$ = 8						; size = 4
__Oldsize$1$ = 8					; size = 4
$T1 = 8							; size = 4
??4?$_Tgt_state_t@PBD@std@@QAEAAV01@ABV01@@Z PROC	; std::_Tgt_state_t<char const *>::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1509 :         if (this == _STD addressof(_Right)) {

  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
  0000e	89 5d f8	 mov	 DWORD PTR _this$1$[ebp], ebx
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00016	89 03		 mov	 DWORD PTR [ebx], eax
  00018	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??4?$vector@_NV?$allocator@_N@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<bool,std::allocator<bool> >::operator=
  00021	8d 7e 14	 lea	 edi, DWORD PTR [esi+20]
  00024	83 c3 14	 add	 ebx, 20			; 00000014H
  00027	3b df		 cmp	 ebx, edi
  00029	0f 84 f7 00 00
	00		 je	 $LN14@operator

; 1510 :             return *this;
; 1511 :         }
; 1512 : 
; 1513 :         auto& _Al       = _Getal();
; 1514 :         auto& _Right_al = _Right._Getal();
; 1515 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1516 :             if (_Al != _Right_al) {
; 1517 :                 _Tidy();
; 1518 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1519 :             }
; 1520 :         }
; 1521 : 
; 1522 :         _Pocca(_Al, _Right_al);
; 1523 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  0002f	8b 17		 mov	 edx, DWORD PTR [edi]
  00031	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00034	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00037	2b fa		 sub	 edi, edx

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00039	8b 33		 mov	 esi, DWORD PTR [ebx]
  0003b	2b ce		 sub	 ecx, esi

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  0003d	c1 ff 03	 sar	 edi, 3

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00040	c1 f9 03	 sar	 ecx, 3

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00043	89 55 fc	 mov	 DWORD PTR __First$2$[ebp], edx

; 1418 :         if (_Newsize > _Oldcapacity) {

  00046	3b f9		 cmp	 edi, ecx
  00048	0f 86 86 00 00
	00		 jbe	 $LN12@operator

; 1688 :         if (_Newsize > max_size()) {

  0004e	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  00054	0f 87 d8 00 00
	00		 ja	 $LN94@operator

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0005a	8b d1		 mov	 edx, ecx
  0005c	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  00061	d1 ea		 shr	 edx, 1
  00063	2b c2		 sub	 eax, edx
  00065	3b c8		 cmp	 ecx, eax
  00067	76 09		 jbe	 SHORT $LN22@operator

; 1997 :             return _Max; // geometric growth would overflow

  00069	c7 45 08 ff ff
	ff 1f		 mov	 DWORD PTR $T1[ebp], 536870911 ; 1fffffffH
  00070	eb 0b		 jmp	 SHORT $LN23@operator
$LN22@operator:

; 1998 :         }
; 1999 : 
; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00072	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00075	3b c7		 cmp	 eax, edi
  00077	0f 42 c7	 cmovb	 eax, edi
  0007a	89 45 08	 mov	 DWORD PTR $T1[ebp], eax
$LN23@operator:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  0007d	85 f6		 test	 esi, esi
  0007f	74 3f		 je	 SHORT $LN19@operator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00081	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00084	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008a	72 16		 jb	 SHORT $LN44@operator

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0008c	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0008f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00092	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00094	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00097	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0009a	0f 87 97 00 00
	00		 ja	 $LN41@operator

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a0	8b f2		 mov	 esi, edx
$LN44@operator:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000a2	51		 push	 ecx
  000a3	56		 push	 esi
  000a4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1699 :             _Myfirst = nullptr;

  000a9	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000af	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1700 :             _Mylast  = nullptr;

  000b2	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1701 :             _Myend   = nullptr;

  000b9	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN19@operator:

; 1702 :         }
; 1703 : 
; 1704 :         _Buy_raw(_Newcapacity);

  000c0	ff 75 08	 push	 DWORD PTR $T1[ebp]
  000c3	8b cb		 mov	 ecx, ebx
  000c5	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXI@Z ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Buy_raw

; 1421 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);

  000ca	8b 33		 mov	 esi, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  000cc	8b 45 fc	 mov	 eax, DWORD PTR __First$2$[ebp]
  000cf	56		 push	 esi
  000d0	57		 push	 edi
  000d1	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1427 :             return;

  000d2	eb 44		 jmp	 SHORT $LN91@operator
$LN12@operator:

; 1428 :         }
; 1429 : 
; 1430 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  000d4	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000d7	2b c6		 sub	 eax, esi
  000d9	c1 f8 03	 sar	 eax, 3
  000dc	89 45 08	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1431 :         if (_Newsize > _Oldsize) {

  000df	56		 push	 esi
  000e0	3b f8		 cmp	 edi, eax
  000e2	76 32		 jbe	 SHORT $LN13@operator

; 1432 :             bool _Copied = false;
; 1433 :             if constexpr (_Iter_copy_cat<_Iter, pointer>::_Bitcopy_assignable) {
; 1434 : #if _HAS_CXX20
; 1435 :                 if (!_STD is_constant_evaluated())
; 1436 : #endif // _HAS_CXX20
; 1437 :                 {
; 1438 :                     _Copy_memmove_n(_First, static_cast<size_t>(_Oldsize), _Myfirst);

  000e4	50		 push	 eax
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>

; 1439 :                     _First += _Oldsize;

  000eb	8b 4d 08	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]

; 1440 :                     _Copied = true;
; 1441 :                 }
; 1442 :             }
; 1443 : 
; 1444 :             if (!_Copied) {
; 1445 :                 for (auto _Mid = _Myfirst; _Mid != _Mylast; ++_Mid, (void) ++_First) {
; 1446 :                     *_Mid = *_First;
; 1447 :                 }
; 1448 :             }
; 1449 : 
; 1450 :             if constexpr (_Nothrow_construct) {
; 1451 :                 _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  000ee	2b f9		 sub	 edi, ecx
  000f0	8b 45 fc	 mov	 eax, DWORD PTR __First$2$[ebp]
  000f3	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  000f6	56		 push	 esi
  000f7	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1439 :                     _First += _Oldsize;

  000f8	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
  00101	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1459 :             const pointer _Newlast = _Myfirst + _Newsize;

  00104	8d 04 fe	 lea	 eax, DWORD PTR [esi+edi*8]

; 1463 :             _Mylast = _Newlast;

  00107	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0010a	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi
  0010f	5b		 pop	 ebx
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c2 04 00	 ret	 4
$LN13@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4824 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

  00116	57		 push	 edi
  00117	52		 push	 edx
$LN91@operator:
  00118	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@I0@Z ; std::_Copy_memmove_n<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1459 :             const pointer _Newlast = _Myfirst + _Newsize;

  0011d	8d 04 fe	 lea	 eax, DWORD PTR [esi+edi*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4824 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

  00120	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1463 :             _Mylast = _Newlast;

  00123	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN14@operator:
  00126	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  00129	5f		 pop	 edi
  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 04 00	 ret	 4
$LN94@operator:

; 1689 :             _Xlength();

  00132	e8 00 00 00 00	 call	 ?_Xlength@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@CAXXZ ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Xlength
$LN41@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN90@operator:
  0013c	cc		 int	 3
??4?$_Tgt_state_t@PBD@std@@QAEAAV01@ABV01@@Z ENDP	; std::_Tgt_state_t<char const *>::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z PROC		; std::_Tgt_state_t<char const *>::_Tgt_state_t<char const *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002b	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 ??0?$_Bt_state_t@PBD@std@@QAE@ABV01@@Z
  00034	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  0003b	c7 43 18 00 00
	00 00		 mov	 DWORD PTR [ebx+24], 0
  00042	c7 43 1c 00 00
	00 00		 mov	 DWORD PTR [ebx+28], 0

; 733  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00049	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0004c	2b 47 14	 sub	 eax, DWORD PTR [edi+20]
  0004f	c1 f8 03	 sar	 eax, 3
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2096 :         if (_Count != 0) {

  00059	85 c0		 test	 eax, eax
  0005b	74 34		 je	 SHORT $LN38@Tgt_state_

; 2036 :         if (_Newcapacity > max_size()) {

  0005d	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00062	77 46		 ja	 SHORT $LN42@Tgt_state_

; 2038 :         }
; 2039 : 
; 2040 :         _Buy_raw(_Newcapacity);

  00064	50		 push	 eax
  00065	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00068	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXI@Z ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Buy_raw

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  0006d	8b 5b 14	 mov	 ebx, DWORD PTR [ebx+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1839 :     auto _UFirst = _STD _Get_unwrapped(_STD move(_First));

  00070	8b 77 14	 mov	 esi, DWORD PTR [edi+20]

; 1840 :     auto _ULast  = _STD _Get_unwrapped(_STD move(_Last));

  00073	8b 7f 18	 mov	 edi, DWORD PTR [edi+24]

; 1841 : #endif // ^^^ !_HAS_CXX20 ^^^
; 1842 : 
; 1843 :     constexpr bool _Can_memmove = _Sent_copy_cat<decltype(_UFirst), decltype(_ULast), _Ptrval>::_Bitcopy_constructible
; 1844 :                                && _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>::value;
; 1845 : 
; 1846 :     if constexpr (_Can_memmove) {
; 1847 : #if _HAS_CXX20
; 1848 :         if (!_STD is_constant_evaluated())
; 1849 : #endif // _HAS_CXX20
; 1850 :         {
; 1851 :             if constexpr (is_same_v<decltype(_UFirst), decltype(_ULast)>) {
; 1852 :                 _STD _Copy_memmove(_STD _To_address(_UFirst), _STD _To_address(_ULast), _STD _Unfancy(_Dest));

  00076	53		 push	 ebx
  00077	57		 push	 edi
  00078	56		 push	 esi
  00079	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAU_Grp_t@?$_Tgt_state_t@PBD@std@@PAU123@@std@@YAPAU_Grp_t@?$_Tgt_state_t@PBD@0@PAU120@00@Z ; std::_Copy_memmove<std::_Tgt_state_t<char const *>::_Grp_t *,std::_Tgt_state_t<char const *>::_Grp_t *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  0007e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1853 :                 _Dest += _ULast - _UFirst;

  00081	2b fe		 sub	 edi, esi
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	c1 ff 03	 sar	 edi, 3
  00089	8d 04 fb	 lea	 eax, DWORD PTR [ebx+edi*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  0008c	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  0008f	eb 03		 jmp	 SHORT $LN33@Tgt_state_
$LN38@Tgt_state_:

; 2041 :     }
; 2042 : 
; 2043 :     _CONSTEXPR20 void _Change_array(
; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {
; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array
; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));
; 2058 :         }
; 2059 : 
; 2060 :         _Myfirst = _Newvec;
; 2061 :         _Mylast  = _Newvec + _Newsize;
; 2062 :         _Myend   = _Newvec + _Newcapacity;
; 2063 :         _ASAN_VECTOR_CREATE;
; 2064 :     }
; 2065 : 
; 2066 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage
; 2067 :         auto& _Al         = _Getal();
; 2068 :         auto& _My_data    = _Mypair._Myval2;
; 2069 :         pointer& _Myfirst = _My_data._Myfirst;
; 2070 :         pointer& _Mylast  = _My_data._Mylast;
; 2071 :         pointer& _Myend   = _My_data._Myend;
; 2072 : 
; 2073 :         _My_data._Orphan_all();
; 2074 : 
; 2075 :         if (_Myfirst) { // destroy and deallocate old array
; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));
; 2079 : 
; 2080 :             _Myfirst = nullptr;
; 2081 :             _Mylast  = nullptr;
; 2082 :             _Myend   = nullptr;
; 2083 :         }
; 2084 :     }
; 2085 : 
; 2086 :     template <class... _Valty>
; 2087 :     _CONSTEXPR20 void _Construct_n(_CRT_GUARDOVERFLOW const size_type _Count, _Valty&&... _Val) {
; 2088 :         // Dispatches between the three sized constructions.
; 2089 :         // 1-arg -> value-construction, e.g. vector(5)
; 2090 :         // 2-arg -> fill, e.g. vector(5, "meow")
; 2091 :         // 3-arg -> sized range construction, e.g. vector{"Hello", "Fluffy", "World"}
; 2092 :         auto& _Al       = _Getal();
; 2093 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2094 :         auto& _My_data  = _Mypair._Myval2;
; 2095 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2096 :         if (_Count != 0) {

  00091	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
$LN33@Tgt_state_:
  00094	8b c1		 mov	 eax, ecx
  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 04 00	 ret	 4
$LN42@Tgt_state_:

; 2037 :             _Xlength();

  000aa	e8 00 00 00 00	 call	 ?_Xlength@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@CAXXZ ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Xlength
$LN40@Tgt_state_:
  000af	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Bt_state_t@PBD@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tgt_state_t@PBD@std@@QAE@ABV01@@Z ENDP		; std::_Tgt_state_t<char const *>::_Tgt_state_t<char const *>
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Tgt_state_t@PBD@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tgt_state_t@PBD@std@@QAE@XZ PROC			; std::_Tgt_state_t<char const *>::~_Tgt_state_t<char const *>, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	85 c0		 test	 eax, eax
  00008	74 41		 je	 SHORT $LN8@Tgt_state_

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0000d	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00012	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00018	72 12		 jb	 SHORT $LN27@Tgt_state_

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00020	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00022	83 c0 fc	 add	 eax, -4			; fffffffcH
  00025	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00028	77 6b		 ja	 SHORT $LN68@Tgt_state_

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002a	8b c2		 mov	 eax, edx
$LN27@Tgt_state_:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00033	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003a	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003d	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 2082 :             _Myend   = nullptr;

  00044	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN8@Tgt_state_:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0004b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004e	85 c0		 test	 eax, eax
  00050	74 41		 je	 SHORT $LN52@Tgt_state_

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00052	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00055	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00057	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0005a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00060	72 12		 jb	 SHORT $LN71@Tgt_state_

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00062	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00065	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00068	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0006d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00070	77 23		 ja	 SHORT $LN68@Tgt_state_

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00072	8b c2		 mov	 eax, edx
$LN71@Tgt_state_:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00074	51		 push	 ecx
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0007b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00082	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00085	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2082 :             _Myend   = nullptr;

  0008c	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN52@Tgt_state_:
  00093	5e		 pop	 esi
  00094	c3		 ret	 0
$LN68@Tgt_state_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00095	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@Tgt_state_:
  0009a	cc		 int	 3
??1?$_Tgt_state_t@PBD@std@@QAE@XZ ENDP			; std::_Tgt_state_t<char const *>::~_Tgt_state_t<char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@CAXXZ PROC ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@CAXXZ ENDP ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Buy_raw@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXI@Z PROC ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Buy_raw, COMDAT
; _this$ = ecx

; 2009 :     _CONSTEXPR20 void _Buy_raw(size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newcapacity$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2009 :     _CONSTEXPR20 void _Buy_raw(size_type _Newcapacity) {

  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0000a	81 fe ff ff ff
	1f		 cmp	 esi, 536870911		; 1fffffffH
  00010	77 52		 ja	 SHORT $LN25@Buy_raw

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00012	c1 e6 03	 shl	 esi, 3

; 227  :     if (_Bytes == 0) {

  00015	85 f6		 test	 esi, esi
  00017	75 12		 jne	 SHORT $LN12@Buy_raw

; 228  :         return nullptr;

  00019	33 c0		 xor	 eax, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  0001b	89 07		 mov	 DWORD PTR [edi], eax

; 2021 :         _Mylast               = _Newvec;

  0001d	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2022 :         _Myend                = _Newvec + _Newcapacity;

  00020	8b c6		 mov	 eax, esi
  00022	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 2023 :     }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN12@Buy_raw:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0002b	56		 push	 esi
  0002c	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  00032	72 18		 jb	 SHORT $LN13@Buy_raw

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00034	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  00039	89 07		 mov	 DWORD PTR [edi], eax
  0003b	83 c4 04	 add	 esp, 4

; 2021 :         _Mylast               = _Newvec;

  0003e	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2022 :         _Myend                = _Newvec + _Newcapacity;

  00041	03 c6		 add	 eax, esi
  00043	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 2023 :     }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN13@Buy_raw:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  00051	89 07		 mov	 DWORD PTR [edi], eax
  00053	83 c4 04	 add	 esp, 4

; 2021 :         _Mylast               = _Newvec;

  00056	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2022 :         _Myend                = _Newvec + _Newcapacity;

  00059	03 c6		 add	 eax, esi
  0005b	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 2023 :     }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN25@Buy_raw:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00064	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN22@Buy_raw:
  00069	cc		 int	 3
?_Buy_raw@?$vector@U_Grp_t@?$_Tgt_state_t@PBD@std@@V?$allocator@U_Grp_t@?$_Tgt_state_t@PBD@std@@@3@@std@@AAEXI@Z ENDP ; std::vector<std::_Tgt_state_t<char const *>::_Grp_t,std::allocator<std::_Tgt_state_t<char const *>::_Grp_t> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??0?$_Bt_state_t@PBD@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Bt_state_t@PBD@std@@QAE@ABV01@@Z PROC		; std::_Bt_state_t<char const *>::_Bt_state_t<char const *>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00004	53		 push	 ebx
  00005	57		 push	 edi
  00006	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  00009	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 07		 mov	 eax, DWORD PTR [edi]
  00011	89 01		 mov	 DWORD PTR [ecx], eax
  00013	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00019	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00020	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 733  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00027	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0002a	2b 47 04	 sub	 eax, DWORD PTR [edi+4]
  0002d	c1 f8 02	 sar	 eax, 2

; 2096 :         if (_Count != 0) {

  00030	85 c0		 test	 eax, eax
  00032	74 38		 je	 SHORT $LN38@Bt_state_t

; 2036 :         if (_Newcapacity > max_size()) {

  00034	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00039	77 41		 ja	 SHORT $LN49@Bt_state_t
  0003b	56		 push	 esi

; 2038 :         }
; 2039 : 
; 2040 :         _Buy_raw(_Newcapacity);

  0003c	50		 push	 eax
  0003d	8b cb		 mov	 ecx, ebx
  0003f	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@IV?$allocator@I@std@@@std@@AAEXI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_raw

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  00044	8b 1b		 mov	 ebx, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1839 :     auto _UFirst = _STD _Get_unwrapped(_STD move(_First));

  00046	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 1840 :     auto _ULast  = _STD _Get_unwrapped(_STD move(_Last));

  00049	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]

; 1841 : #endif // ^^^ !_HAS_CXX20 ^^^
; 1842 : 
; 1843 :     constexpr bool _Can_memmove = _Sent_copy_cat<decltype(_UFirst), decltype(_ULast), _Ptrval>::_Bitcopy_constructible
; 1844 :                                && _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>::value;
; 1845 : 
; 1846 :     if constexpr (_Can_memmove) {
; 1847 : #if _HAS_CXX20
; 1848 :         if (!_STD is_constant_evaluated())
; 1849 : #endif // _HAS_CXX20
; 1850 :         {
; 1851 :             if constexpr (is_same_v<decltype(_UFirst), decltype(_ULast)>) {
; 1852 :                 _STD _Copy_memmove(_STD _To_address(_UFirst), _STD _To_address(_ULast), _STD _Unfancy(_Dest));

  0004c	53		 push	 ebx
  0004d	57		 push	 edi
  0004e	56		 push	 esi
  0004f	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z ; std::_Copy_memmove<unsigned int *,unsigned int *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1853 :                 _Dest += _ULast - _UFirst;

  00057	2b fe		 sub	 edi, esi
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	c1 ff 02	 sar	 edi, 2
  0005f	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00062	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  00065	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  00068	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0006b	5e		 pop	 esi
$LN38@Bt_state_t:

; 2824 :     _CONSTEXPR20 _Vb_val(const _Vb_val& _Right) : _Myvec(_Right._Myvec), _Mysize(_Right._Mysize) {

  0006c	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0006f	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  00072	8b c1		 mov	 eax, ecx
  00074	5f		 pop	 edi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
$LN49@Bt_state_t:

; 2037 :             _Xlength();

  0007c	e8 00 00 00 00	 call	 ?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
$LN47@Bt_state_t:
  00081	cc		 int	 3
??0?$_Bt_state_t@PBD@std@@QAE@ABV01@@Z ENDP		; std::_Bt_state_t<char const *>::_Bt_state_t<char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Bt_state_t@PBD@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Bt_state_t@PBD@std@@QAE@XZ PROC			; std::_Bt_state_t<char const *>::~_Bt_state_t<char const *>, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 41		 je	 SHORT $LN18@Bt_state_t

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0000d	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00012	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00018	72 12		 jb	 SHORT $LN37@Bt_state_t

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00020	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00022	83 c0 fc	 add	 eax, -4			; fffffffcH
  00025	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00028	77 23		 ja	 SHORT $LN34@Bt_state_t

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002a	8b c2		 mov	 eax, edx
$LN37@Bt_state_t:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00033	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003a	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2082 :             _Myend   = nullptr;

  00044	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN18@Bt_state_t:
  0004b	5e		 pop	 esi
  0004c	c3		 ret	 0
$LN34@Bt_state_t:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@Bt_state_t:
  00052	cc		 int	 3
??1?$_Bt_state_t@PBD@std@@QAE@XZ ENDP			; std::_Bt_state_t<char const *>::~_Bt_state_t<char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Skip@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAEPBDPBD0PAV_Node_base@2@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__First_arg$ = 8					; size = 4
tv727 = 8						; size = 4
tv728 = 8						; size = 4
__Last$ = 12						; size = 4
__Node_arg$ = 16					; size = 4
$T1 = 16						; size = 4
$T2 = 16						; size = 4
__Ch$3 = 16						; size = 1
tv689 = 16						; size = 4
?_Skip@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAEPBDPBD0PAV_Node_base@2@@Z PROC ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Skip, COMDAT
; _this$ = ecx

; 3673 : _BidIt _Matcher<_BidIt, _Elem, _RxTraits, _It>::_Skip(_BidIt _First_arg, _BidIt _Last, _Node_base* _Node_arg) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 3674 :     // skip until possible match
; 3675 :     // assumes --_First_arg is valid
; 3676 :     _Node_base* _Nx = _Node_arg ? _Node_arg : _Rep;

  00007	8b 7d 10	 mov	 edi, DWORD PTR __Node_arg$[ebp]
  0000a	8b d1		 mov	 edx, ecx
  0000c	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  0000f	85 ff		 test	 edi, edi
  00011	75 03		 jne	 SHORT $LN58@Skip
  00013	8b 7a 58	 mov	 edi, DWORD PTR [edx+88]
$LN58@Skip:

; 3677 : 
; 3678 :     while (_First_arg != _Last && _Nx) { // check current node

  00016	8b 75 08	 mov	 esi, DWORD PTR __First_arg$[ebp]
  00019	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0001c	3b f3		 cmp	 esi, ebx
  0001e	74 45		 je	 SHORT $LN3@Skip
$LL2@Skip:
  00020	85 ff		 test	 edi, edi
  00022	74 41		 je	 SHORT $LN3@Skip

; 3679 :         switch (_Nx->_Kind) { // handle current node's type

  00024	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00027	83 f8 15	 cmp	 eax, 21			; 00000015H
  0002a	77 39		 ja	 SHORT $LN3@Skip
  0002c	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN121@Skip[eax]
  00033	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN122@Skip[eax*4]
$LN39@Skip:

; 3677 : 
; 3678 :     while (_First_arg != _Last && _Nx) { // check current node

  0003a	33 ff		 xor	 edi, edi
  0003c	eb e2		 jmp	 SHORT $LL2@Skip
$LN4@Skip:

; 3781 :                 }
; 3782 : 
; 3783 :                 return _Last;
; 3784 :             }
; 3785 : 
; 3786 :         case _N_begin:
; 3787 :             break;
; 3788 : 
; 3789 :         case _N_end:
; 3790 :             _Nx = nullptr;
; 3791 :             break;
; 3792 : 
; 3793 :         case _N_none:
; 3794 :         case _N_wbound:
; 3795 :         case _N_dot:
; 3796 :         case _N_assert:
; 3797 :         case _N_neg_assert:
; 3798 :         case _N_back:
; 3799 :         case _N_endif:
; 3800 :         case _N_rep:
; 3801 :         case _N_end_rep:
; 3802 :         default:
; 3803 :             return _First_arg;
; 3804 :         }
; 3805 :         if (_Nx) {
; 3806 :             _Nx = _Nx->_Next;

  0003e	8b 7f 0c	 mov	 edi, DWORD PTR [edi+12]
  00041	eb dd		 jmp	 SHORT $LL2@Skip
$LN16@Skip:

; 3680 :         case _N_nop:
; 3681 :             break;
; 3682 : 
; 3683 :         case _N_bol:
; 3684 :             { // check for embedded newline
; 3685 :               // return iterator to character just after the newline; for input like "\nabc"
; 3686 :               // matching "^abc", _First_arg could be pointing at 'a', so we need to check
; 3687 :               // --_First_arg for '\n'
; 3688 :                 if (*_Prev_iter(_First_arg) != _Meta_nl) {

  00043	80 7e ff 0a	 cmp	 BYTE PTR [esi-1], 10	; 0000000aH
  00047	74 1c		 je	 SHORT $LN3@Skip

; 3689 :                     _First_arg = _STD find(_First_arg, _Last, _Meta_nl);

  00049	8d 45 10	 lea	 eax, DWORD PTR $T1[ebp]
  0004c	c7 45 10 0a 00
	00 00		 mov	 DWORD PTR $T1[ebp], 10	; 0000000aH
  00053	50		 push	 eax
  00054	53		 push	 ebx
  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 ??$find@PBDW4_Meta_type@std@@@std@@YAPBDPBDQBDABW4_Meta_type@0@@Z ; std::find<char const *,enum std::_Meta_type>
  0005b	8b f0		 mov	 esi, eax
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3690 :                     if (_First_arg != _Last) {

  00060	3b f3		 cmp	 esi, ebx
  00062	74 01		 je	 SHORT $LN3@Skip

; 3691 :                         ++_First_arg;

  00064	46		 inc	 esi
$LN3@Skip:
  00065	5f		 pop	 edi

; 3807 :         }
; 3808 :     }
; 3809 :     return _First_arg;
; 3810 : }

  00066	8b c6		 mov	 eax, esi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 0c 00	 ret	 12			; 0000000cH
$LN19@Skip:

; 3692 :                     }
; 3693 :                 }
; 3694 : 
; 3695 :                 return _First_arg;
; 3696 :             }
; 3697 : 
; 3698 :         case _N_eol:
; 3699 :             return _STD find(_First_arg, _Last, _Meta_nl);

  00070	8d 45 10	 lea	 eax, DWORD PTR $T2[ebp]
  00073	c7 45 10 0a 00
	00 00		 mov	 DWORD PTR $T2[ebp], 10	; 0000000aH
  0007a	50		 push	 eax
  0007b	53		 push	 ebx
  0007c	56		 push	 esi
  0007d	e8 00 00 00 00	 call	 ??$find@PBDW4_Meta_type@std@@@std@@YAPBDPBDQBDABW4_Meta_type@0@@Z ; std::find<char const *,enum std::_Meta_type>
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH
  00085	5f		 pop	 edi

; 3807 :         }
; 3808 :     }
; 3809 :     return _First_arg;
; 3810 : }

  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 0c 00	 ret	 12			; 0000000cH
  0008e	66 90		 npad	 2
$LL8@Skip:

; 3705 :                     _BidIt _Next = _First_arg;
; 3706 :                     if (_Compare(_First_arg, ++_Next, _Node->_Data._Str(), _Node->_Data._Str() + 1, _Traits, _Sflags)
; 3707 :                         != _First_arg) {

  00090	ff 72 5c	 push	 DWORD PTR [edx+92]
  00093	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00096	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00099	ff 72 70	 push	 DWORD PTR [edx+112]
  0009c	89 45 10	 mov	 DWORD PTR tv689[ebp], eax
  0009f	89 75 08	 mov	 DWORD PTR tv727[ebp], esi
  000a2	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000a5	50		 push	 eax
  000a6	51		 push	 ecx
  000a7	ff 75 10	 push	 DWORD PTR tv689[ebp]
  000aa	56		 push	 esi
  000ab	e8 00 00 00 00	 call	 ??$_Compare@PBDPBDV?$regex_traits@D@std@@@std@@YAPBDPBD000ABV?$regex_traits@D@0@W4syntax_option_type@regex_constants@0@@Z ; std::_Compare<char const *,char const *,std::regex_traits<char> >
  000b0	8b c8		 mov	 ecx, eax
  000b2	83 c4 18	 add	 esp, 24			; 00000018H
  000b5	8b 45 10	 mov	 eax, DWORD PTR tv689[ebp]
  000b8	3b ce		 cmp	 ecx, esi
  000ba	75 09		 jne	 SHORT $LN104@Skip

; 3700 : 
; 3701 :         case _N_str:
; 3702 :             { // check for string match
; 3703 :                 _Node_str<_Elem>* _Node = static_cast<_Node_str<_Elem>*>(_Nx);
; 3704 :                 for (; _First_arg != _Last; ++_First_arg) { // look for starting match

  000bc	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  000bf	8b f0		 mov	 esi, eax
  000c1	3b f3		 cmp	 esi, ebx
  000c3	75 cb		 jne	 SHORT $LL8@Skip
$LN104@Skip:

; 3708 :                         break;
; 3709 :                     }
; 3710 :                 }
; 3711 :                 return _First_arg;

  000c5	3b 4d 08	 cmp	 ecx, DWORD PTR tv727[ebp]
  000c8	5f		 pop	 edi
  000c9	0f 45 45 08	 cmovne	 eax, DWORD PTR tv727[ebp]

; 3807 :         }
; 3808 :     }
; 3809 :     return _First_arg;
; 3810 : }

  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 0c 00	 ret	 12			; 0000000cH
  000d5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL11@Skip:

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  000e0	f7 42 5c 00 01
	00 00		 test	 DWORD PTR [edx+92], 256	; 00000100H

; 3717 :                     using _Uelem = typename _RxTraits::_Uelem;
; 3718 :                     bool _Found;
; 3719 :                     auto _Ch                             = static_cast<_Uelem>(*_First_arg);

  000e7	8a 06		 mov	 al, BYTE PTR [esi]
  000e9	88 45 10	 mov	 BYTE PTR __Ch$3[ebp], al

; 3720 :                     _Node_class<_Elem, _RxTraits>* _Node = static_cast<_Node_class<_Elem, _RxTraits>*>(_Nx);
; 3721 :                     _It _Next                            = _First_arg;
; 3722 :                     ++_Next;
; 3723 : 
; 3724 :                     if (_Sflags & regex_constants::icase) {

  000ec	74 13		 je	 SHORT $LN120@Skip

; 301  :         return _Getctype()->tolower(_Ch);

  000ee	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  000f1	ff 75 10	 push	 DWORD PTR __Ch$3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 301  :         return _Getctype()->tolower(_Ch);

  000f4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  000f7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f9	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000fc	ff d0		 call	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3725 :                         _Ch = static_cast<_Uelem>(_Traits.translate_nocase(static_cast<_Elem>(_Ch)));

  000fe	88 45 10	 mov	 BYTE PTR __Ch$3[ebp], al
$LN120@Skip:

; 3726 :                     }
; 3727 : 
; 3728 :                     if (_Node->_Coll && _Lookup_coll(_First_arg, _Next, _Node->_Coll) != _First_arg) {

  00101	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00104	85 c0		 test	 eax, eax
  00106	74 16		 je	 SHORT $LN119@Skip
  00108	50		 push	 eax
  00109	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0010c	50		 push	 eax
  0010d	56		 push	 esi
  0010e	e8 00 00 00 00	 call	 ??$_Lookup_coll@PBDD@std@@YAPBDPBD0PBU?$_Sequence@D@0@@Z ; std::_Lookup_coll<char const *,char>
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH
  00116	3b c6		 cmp	 eax, esi
  00118	74 04		 je	 SHORT $LN119@Skip

; 3729 :                         _Found = true;

  0011a	b1 01		 mov	 cl, 1

; 3730 :                     } else if (_Node->_Ranges

  0011c	eb 64		 jmp	 SHORT $LN62@Skip
$LN119@Skip:

; 3731 :                                && (_Lookup_range(static_cast<_Uelem>(_Sflags & regex_constants::collate

  0011e	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00121	89 45 08	 mov	 DWORD PTR tv728[ebp], eax
  00124	85 c0		 test	 eax, eax
  00126	74 33		 je	 SHORT $LN118@Skip

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  00128	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0012b	f7 41 5c 00 08
	00 00		 test	 DWORD PTR [ecx+92], 2048 ; 00000800H

; 3731 :                                && (_Lookup_range(static_cast<_Uelem>(_Sflags & regex_constants::collate

  00132	74 0d		 je	 SHORT $LN59@Skip
  00134	ff 75 10	 push	 DWORD PTR __Ch$3[ebp]
  00137	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  0013a	e8 00 00 00 00	 call	 ?translate@?$_Regex_traits@D@std@@QBEDD@Z ; std::_Regex_traits<char>::translate
  0013f	eb 03		 jmp	 SHORT $LN60@Skip
$LN59@Skip:
  00141	8a 45 10	 mov	 al, BYTE PTR __Ch$3[ebp]
$LN60@Skip:
  00144	ff 75 08	 push	 DWORD PTR tv728[ebp]
  00147	0f b6 c0	 movzx	 eax, al
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ??$_Lookup_range@D@std@@YA_NIPBU?$_Buf@D@0@@Z ; std::_Lookup_range<char>
  00150	83 c4 08	 add	 esp, 8
  00153	84 c0		 test	 al, al
  00155	74 04		 je	 SHORT $LN118@Skip

; 3732 :                                                                          ? _Traits.translate(static_cast<_Elem>(_Ch))
; 3733 :                                                                          : static_cast<_Elem>(_Ch)),
; 3734 :                                    _Node->_Ranges))) {
; 3735 :                         _Found = true;

  00157	b1 01		 mov	 cl, 1
  00159	eb 27		 jmp	 SHORT $LN62@Skip
$LN118@Skip:

; 3736 :                     } else if (_Ch < _Bmp_max) {
; 3737 :                         _Found = _Node->_Small && _Node->_Small->_Find(_Ch);

  0015b	83 7f 18 00	 cmp	 DWORD PTR [edi+24], 0
  0015f	0f b6 55 10	 movzx	 edx, BYTE PTR __Ch$3[ebp]
  00163	74 1b		 je	 SHORT $LN61@Skip

; 1309 :         return (_Chrs[_Wide >> _Bmp_shift] & (1 << (_Wide & _Bmp_mask))) != 0;

  00165	8b ca		 mov	 ecx, edx
  00167	b8 01 00 00 00	 mov	 eax, 1
  0016c	83 e1 07	 and	 ecx, 7
  0016f	c1 ea 03	 shr	 edx, 3
  00172	d3 e0		 shl	 eax, cl
  00174	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00177	84 04 0a	 test	 al, BYTE PTR [edx+ecx]

; 3736 :                     } else if (_Ch < _Bmp_max) {
; 3737 :                         _Found = _Node->_Small && _Node->_Small->_Find(_Ch);

  0017a	74 04		 je	 SHORT $LN61@Skip
  0017c	b1 01		 mov	 cl, 1
  0017e	eb 02		 jmp	 SHORT $LN62@Skip
$LN61@Skip:
  00180	32 c9		 xor	 cl, cl
$LN62@Skip:

; 1209 : _BITMASK_OPS(_EMPTY_ARGUMENT, _Node_flags)

  00182	8a 47 08	 mov	 al, BYTE PTR [edi+8]
  00185	24 01		 and	 al, 1

; 3738 :                     } else if (_Node->_Large
; 3739 :                                && _STD find(_Node->_Large->_Str(), _Node->_Large->_Str() + _Node->_Large->_Size(), _Ch)
; 3740 :                                       != _Node->_Large->_Str() + _Node->_Large->_Size()) {
; 3741 :                         _Found = true;
; 3742 :                     } else if (_Node->_Classes && _Traits.isctype(static_cast<_Elem>(_Ch), _Node->_Classes)) {
; 3743 :                         _Found = true;
; 3744 :                     } else if (_Node->_Equiv && _Lookup_equiv(_Ch, _Node->_Equiv, _Traits)) {
; 3745 :                         _Found = true;
; 3746 :                     } else {
; 3747 :                         _Found = false;
; 3748 :                     }
; 3749 : 
; 3750 :                     const bool _Negated = (_Node->_Flags & _Fl_negate) != 0;
; 3751 : 
; 3752 :                     if (_Found != _Negated) {

  00187	3a c8		 cmp	 cl, al
  00189	0f 85 d6 fe ff
	ff		 jne	 $LN3@Skip

; 3712 :             }
; 3713 : 
; 3714 :         case _N_class:
; 3715 :             { // check for string match
; 3716 :                 for (; _First_arg != _Last; ++_First_arg) { // look for starting match

  0018f	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00192	46		 inc	 esi
  00193	3b f3		 cmp	 esi, ebx
  00195	0f 85 45 ff ff
	ff		 jne	 $LL11@Skip

; 3807 :         }
; 3808 :     }
; 3809 :     return _First_arg;
; 3810 : }

  0019b	5f		 pop	 edi
  0019c	8b c6		 mov	 eax, esi
  0019e	5e		 pop	 esi
  0019f	5b		 pop	 ebx
  001a0	8b e5		 mov	 esp, ebp
  001a2	5d		 pop	 ebp
  001a3	c2 0c 00	 ret	 12			; 0000000cH
$LL14@Skip:

; 3753 :                         return _First_arg;
; 3754 :                     }
; 3755 :                 }
; 3756 :             }
; 3757 :             return _First_arg;
; 3758 : 
; 3759 :         case _N_group:
; 3760 :             break;
; 3761 : 
; 3762 :         case _N_end_group:
; 3763 :             break;
; 3764 : 
; 3765 :         case _N_end_assert:
; 3766 :             _Nx = nullptr;
; 3767 :             break;
; 3768 : 
; 3769 :         case _N_capture:
; 3770 :             break;
; 3771 : 
; 3772 :         case _N_end_capture:
; 3773 :             break;
; 3774 : 
; 3775 :         case _N_if:
; 3776 :             { // check for soonest string match
; 3777 :                 _Node_if* _Node = static_cast<_Node_if*>(_Nx);
; 3778 : 
; 3779 :                 for (; _First_arg != _Last && _Node; _Node = _Node->_Child) {

  001a6	85 ff		 test	 edi, edi
  001a8	74 18		 je	 SHORT $LN13@Skip

; 3780 :                     _Last = _Skip(_First_arg, _Last, _Node->_Next);

  001aa	ff 77 0c	 push	 DWORD PTR [edi+12]
  001ad	8b ca		 mov	 ecx, edx
  001af	53		 push	 ebx
  001b0	56		 push	 esi
  001b1	e8 00 00 00 00	 call	 ?_Skip@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAEPBDPBD0PAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Skip
  001b6	8b 7f 18	 mov	 edi, DWORD PTR [edi+24]
  001b9	8b d8		 mov	 ebx, eax
  001bb	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  001be	3b f3		 cmp	 esi, ebx
  001c0	75 e4		 jne	 SHORT $LL14@Skip
$LN13@Skip:
  001c2	5f		 pop	 edi

; 3807 :         }
; 3808 :     }
; 3809 :     return _First_arg;
; 3810 : }

  001c3	5e		 pop	 esi
  001c4	8b c3		 mov	 eax, ebx
  001c6	5b		 pop	 ebx
  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c2 0c 00	 ret	 12			; 0000000cH
  001cd	0f 1f 00	 npad	 3
$LN122@Skip:
  001d0	00 00 00 00	 DD	 $LN3@Skip
  001d4	00 00 00 00	 DD	 $LN4@Skip
  001d8	00 00 00 00	 DD	 $LN16@Skip
  001dc	00 00 00 00	 DD	 $LN19@Skip
  001e0	00 00 00 00	 DD	 $LL8@Skip
  001e4	00 00 00 00	 DD	 $LL11@Skip
  001e8	00 00 00 00	 DD	 $LN39@Skip
  001ec	00 00 00 00	 DD	 $LL14@Skip
$LN121@Skip:
  001f0	00		 DB	 0
  001f1	01		 DB	 1
  001f2	02		 DB	 2
  001f3	03		 DB	 3
  001f4	00		 DB	 0
  001f5	00		 DB	 0
  001f6	04		 DB	 4
  001f7	05		 DB	 5
  001f8	01		 DB	 1
  001f9	01		 DB	 1
  001fa	00		 DB	 0
  001fb	00		 DB	 0
  001fc	06		 DB	 6
  001fd	01		 DB	 1
  001fe	01		 DB	 1
  001ff	00		 DB	 0
  00200	07		 DB	 7
  00201	00		 DB	 0
  00202	00		 DB	 0
  00203	00		 DB	 0
  00204	01		 DB	 1
  00205	06		 DB	 6
?_Skip@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAEPBDPBD0PAV_Node_base@2@@Z ENDP ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Skip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z
_TEXT	SEGMENT
__Mx$ = -148						; size = 128
__Begin$1$ = -20					; size = 4
__Found$1$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Matches$ = 16						; size = 4
__Re$ = 20						; size = 4
tv1226 = 20						; size = 4
$T2 = 23						; size = 1
__Flgs$ = 24						; size = 4
__Org$ = 28						; size = 4
??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z PROC ; std::_Regex_search2<char const *,std::allocator<std::sub_match<char const *> >,char,std::regex_traits<char>,char const *>, COMDAT

; 2207 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs, _It _Org) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1986 :         return _Rep == nullptr;

  0002b	8b 45 14	 mov	 eax, DWORD PTR __Re$[ebp]
  0002e	8b 10		 mov	 edx, DWORD PTR [eax]
  00030	85 d2		 test	 edx, edx

; 2208 :     // search for regular expression match in target text
; 2209 :     if (_Re._Empty()) {

  00032	75 14		 jne	 SHORT $LN4@Regex_sear

; 2210 :         return false;

  00034	32 c0		 xor	 al, al

; 2245 : }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN4@Regex_sear:

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  00048	f7 45 18 00 40
	00 00		 test	 DWORD PTR __Flgs$[ebp], 16384 ; 00004000H

; 2211 :     }
; 2212 : 
; 2213 :     bool _Found      = false;
; 2214 :     const _It _Begin = _First;

  0004f	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 2215 :     if ((_Flgs & regex_constants::_Skip_zero_length) && _First != _Last) {

  00052	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  00055	c6 45 f3 00	 mov	 BYTE PTR __Found$1$[ebp], 0
  00059	89 75 ec	 mov	 DWORD PTR __Begin$1$[ebp], esi
  0005c	74 05		 je	 SHORT $LN5@Regex_sear
  0005e	3b f7		 cmp	 esi, edi
  00060	74 01		 je	 SHORT $LN5@Regex_sear

; 2216 :         ++_First;

  00062	46		 inc	 esi
$LN5@Regex_sear:

; 1961 :         return _Rep ? _Rep->_Fl : flag_type{};

  00063	8b 42 14	 mov	 eax, DWORD PTR [edx+20]

; 1924 :         return _Rep ? _Rep->_Marks - 1 : 0;

  00066	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]

; 2219 :     _Matcher<_BidIt, _Elem, _RxTraits, _It> _Mx(

  00069	8b 5d 14	 mov	 ebx, DWORD PTR __Re$[ebp]
  0006c	83 c3 04	 add	 ebx, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0006f	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR __Mx$[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2219 :     _Matcher<_BidIt, _Elem, _RxTraits, _It> _Mx(

  00079	89 5d 14	 mov	 DWORD PTR tv1226[ebp], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0007c	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR __Mx$[ebp+8], 0
  00086	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR __Mx$[ebp+12], 0

; 2810 :     _CONSTEXPR20 _Vb_val(const _Alloc& _Al) noexcept : _Myvec(static_cast<_Alvbase>(_Al)), _Mysize(0) {

  00090	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR __Mx$[ebp+16], 0

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0009a	c7 45 80 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+20], 0
  000a1	c7 45 84 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+24], 0
  000a8	c7 45 88 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+28], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1572 :           _Longest((_Re->_Flags & _Fl_longest) && !(_Mf & regex_constants::match_any)), _Traits(_Tr) {

  000af	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000b6	c7 45 90 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+36], 0
  000bd	c7 45 94 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+40], 0
  000c4	c7 45 98 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+44], 0

; 2810 :     _CONSTEXPR20 _Vb_val(const _Alloc& _Al) noexcept : _Myvec(static_cast<_Alvbase>(_Al)), _Mysize(0) {

  000cb	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+48], 0

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000d2	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+52], 0
  000d9	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+56], 0
  000e0	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+60], 0
  000e7	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+64], 0
  000ee	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+68], 0
  000f5	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+72], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1572 :           _Longest((_Re->_Flags & _Fl_longest) && !(_Mf & regex_constants::match_any)), _Traits(_Tr) {

  000fc	8b 5d 18	 mov	 ebx, DWORD PTR __Flgs$[ebp]
  000ff	89 7d bc	 mov	 DWORD PTR __Mx$[ebp+80], edi
  00102	89 75 c0	 mov	 DWORD PTR __Mx$[ebp+84], esi
  00105	89 55 c4	 mov	 DWORD PTR __Mx$[ebp+88], edx
  00108	89 45 c8	 mov	 DWORD PTR __Mx$[ebp+92], eax
  0010b	89 5d cc	 mov	 DWORD PTR __Mx$[ebp+96], ebx

; 1590 :     }
; 1591 : 
; 1592 :     template <class _Alloc>
; 1593 :     bool _Match(match_results<_BidIt, _Alloc>* _Matches, bool _Full_match) {
; 1594 :         // try to match
; 1595 :         if (_Matches) { // clear _Matches before doing work
; 1596 :             _Matches->_Ready = true;
; 1597 :             _Matches->_Resize(0);
; 1598 :         }
; 1599 : 
; 1600 :         _Begin          = _First;
; 1601 :         _Tgt_state._Cur = _First;
; 1602 :         _Tgt_state._Grp_valid.resize(_Get_ncap());
; 1603 :         _Tgt_state._Grps.resize(_Get_ncap());
; 1604 :         _Cap                  = static_cast<bool>(_Matches);
; 1605 :         _Full                 = _Full_match;
; 1606 :         _Max_complexity_count = _REGEX_MAX_COMPLEXITY_COUNT;
; 1607 :         _Max_stack_count      = _REGEX_MAX_STACK_COUNT;
; 1608 : 
; 1609 :         _Matched = false;
; 1610 : 
; 1611 :         if (!_Match_pat(_Rep)) {
; 1612 :             return false;
; 1613 :         }
; 1614 : 
; 1615 :         if (_Matches) { // copy results to _Matches
; 1616 :             _Matches->_Resize(_Get_ncap());
; 1617 :             for (unsigned int _Idx = 0; _Idx < _Get_ncap(); ++_Idx) { // copy submatch _Idx
; 1618 :                 if (_Res._Grp_valid[_Idx]) { // copy successful match
; 1619 :                     _Matches->_At(_Idx).matched = true;
; 1620 :                     _Matches->_At(_Idx).first   = _Res._Grps[_Idx]._Begin;
; 1621 :                     _Matches->_At(_Idx).second  = _Res._Grps[_Idx]._End;
; 1622 :                 } else { // copy failed match
; 1623 :                     _Matches->_At(_Idx).matched = false;
; 1624 :                     _Matches->_At(_Idx).first   = _End;
; 1625 :                     _Matches->_At(_Idx).second  = _End;
; 1626 :                 }
; 1627 :             }
; 1628 :             _Matches->_Org           = _Begin;
; 1629 :             _Matches->_Pfx().first   = _Begin;
; 1630 :             _Matches->_Pfx().second  = _Matches->_At(0).first;
; 1631 :             _Matches->_Pfx().matched = _Matches->_Pfx().first != _Matches->_Pfx().second;
; 1632 : 
; 1633 :             _Matches->_Sfx().first   = _Matches->_At(0).second;
; 1634 :             _Matches->_Sfx().second  = _End;
; 1635 :             _Matches->_Sfx().matched = _Matches->_Sfx().first != _Matches->_Sfx().second;
; 1636 : 
; 1637 :             _Matches->_Null().first  = _End;
; 1638 :             _Matches->_Null().second = _End;
; 1639 :         }
; 1640 :         return true;
; 1641 :     }
; 1642 : 
; 1643 :     _BidIt _Skip(_BidIt, _BidIt, _Node_base* = nullptr);
; 1644 : 
; 1645 : private:
; 1646 :     _Tgt_state_t<_It> _Tgt_state;
; 1647 :     _Tgt_state_t<_It> _Res;
; 1648 :     vector<_Loop_vals_t> _Loop_vals;
; 1649 : 
; 1650 :     bool _Do_if(_Node_if*);
; 1651 :     bool _Do_rep0(_Node_rep*, bool);
; 1652 :     bool _Do_rep(_Node_rep*, bool, int);
; 1653 :     bool _Do_class(_Node_base*);
; 1654 :     bool _Match_pat(_Node_base*);
; 1655 :     bool _Better_match();
; 1656 :     bool _Is_wbound() const;
; 1657 : 
; 1658 :     unsigned int _Get_ncap() const;
; 1659 : 
; 1660 :     _It _Begin;
; 1661 :     _It _End;
; 1662 :     _It _First;
; 1663 :     _Node_base* _Rep;
; 1664 :     regex_constants::syntax_option_type _Sflags;
; 1665 :     regex_constants::match_flag_type _Mflags;
; 1666 :     bool _Matched = false;

  0010e	c6 45 d0 00	 mov	 BYTE PTR __Mx$[ebp+100], 0
  00112	89 4d d4	 mov	 DWORD PTR __Mx$[ebp+104], ecx

; 1209 : _BITMASK_OPS(_EMPTY_ARGUMENT, _Node_flags)

  00115	f6 42 08 08	 test	 BYTE PTR [edx+8], 8

; 1572 :           _Longest((_Re->_Flags & _Fl_longest) && !(_Mf & regex_constants::match_any)), _Traits(_Tr) {

  00119	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0011d	74 09		 je	 SHORT $LN34@Regex_sear
  0011f	c6 45 d8 01	 mov	 BYTE PTR __Mx$[ebp+108], 1

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  00123	f6 c3 10	 test	 bl, 16			; 00000010H

; 1572 :           _Longest((_Re->_Flags & _Fl_longest) && !(_Mf & regex_constants::match_any)), _Traits(_Tr) {

  00126	74 04		 je	 SHORT $LN35@Regex_sear
$LN34@Regex_sear:
  00128	c6 45 d8 00	 mov	 BYTE PTR __Mx$[ebp+108], 0
$LN35@Regex_sear:
  0012c	8b 45 14	 mov	 eax, DWORD PTR tv1226[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1615 :         _Resize(_Newsize, _Value_init_tag{});

  0012f	8d 4d ac	 lea	 ecx, DWORD PTR __Mx$[ebp+64]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1572 :           _Longest((_Re->_Flags & _Fl_longest) && !(_Mf & regex_constants::match_any)), _Traits(_Tr) {

  00132	89 45 dc	 mov	 DWORD PTR __Mx$[ebp+112], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1615 :         _Resize(_Newsize, _Value_init_tag{});

  00135	8d 45 17	 lea	 eax, DWORD PTR $T2[ebp]
  00138	50		 push	 eax
  00139	ff 72 18	 push	 DWORD PTR [edx+24]
  0013c	e8 00 00 00 00	 call	 ??$_Resize@U_Value_init_tag@std@@@?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >::_Resize<std::_Value_init_tag>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2222 :     if (_Mx._Match(_Matches, false)) {

  00141	8b 5d 10	 mov	 ebx, DWORD PTR __Matches$[ebp]
  00144	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR __Mx$[ebp]
  0014a	6a 00		 push	 0
  0014c	53		 push	 ebx
  0014d	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00154	e8 00 00 00 00	 call	 ??$_Match@V?$allocator@V?$sub_match@PBD@std@@@std@@@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE_NPAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@1@_N@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match<std::allocator<std::sub_match<char const *> > >
  00159	84 c0		 test	 al, al
  0015b	75 7c		 jne	 SHORT $LN359@Regex_sear

; 2223 :         _Found = true;
; 2224 :     } else if (_First != _Last && !(_Flgs & regex_constants::match_continuous)) { // try more on suffixes

  0015d	3b f7		 cmp	 esi, edi
  0015f	0f 84 90 00 00
	00		 je	 $LN11@Regex_sear

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  00165	f6 45 18 40	 test	 BYTE PTR __Flgs$[ebp], 64 ; 00000040H

; 2223 :         _Found = true;
; 2224 :     } else if (_First != _Last && !(_Flgs & regex_constants::match_continuous)) { // try more on suffixes

  00169	0f 85 86 00 00
	00		 jne	 $LN11@Regex_sear

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  0016f	8b 45 cc	 mov	 eax, DWORD PTR __Mx$[ebp+96]

; 2225 :         _Mx._Setf(regex_constants::match_prev_avail);
; 2226 :         _Mx._Clearf(regex_constants::_Match_not_null);
; 2227 :         while ((_First = _Mx._Skip(++_First, _Last)) != _Last) {

  00172	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR __Mx$[ebp]

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  00178	25 ff df ff ff	 and	 eax, -8193		; ffffdfffH
  0017d	0d 00 01 00 00	 or	 eax, 256		; 00000100H

; 2225 :         _Mx._Setf(regex_constants::match_prev_avail);
; 2226 :         _Mx._Clearf(regex_constants::_Match_not_null);
; 2227 :         while ((_First = _Mx._Skip(++_First, _Last)) != _Last) {

  00182	6a 00		 push	 0

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  00184	89 45 cc	 mov	 DWORD PTR __Mx$[ebp+96], eax

; 2225 :         _Mx._Setf(regex_constants::match_prev_avail);
; 2226 :         _Mx._Clearf(regex_constants::_Match_not_null);
; 2227 :         while ((_First = _Mx._Skip(++_First, _Last)) != _Last) {

  00187	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0018a	57		 push	 edi
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 ?_Skip@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAEPBDPBD0PAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Skip
  00191	8b f0		 mov	 esi, eax
  00193	3b f7		 cmp	 esi, edi
  00195	74 2d		 je	 SHORT $LN356@Regex_sear
$LL2@Regex_sear:

; 1589 :         return _Match(_Matches, _Full_match);

  00197	6a 00		 push	 0
  00199	53		 push	 ebx
  0019a	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR __Mx$[ebp]
  001a0	89 75 c0	 mov	 DWORD PTR __Mx$[ebp+84], esi
  001a3	e8 00 00 00 00	 call	 ??$_Match@V?$allocator@V?$sub_match@PBD@std@@@std@@@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE_NPAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@1@_N@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match<std::allocator<std::sub_match<char const *> > >

; 2228 :             if (_Mx._Match(_First, _Matches, false)) { // found match starting at _First

  001a8	84 c0		 test	 al, al
  001aa	75 2d		 jne	 SHORT $LN359@Regex_sear

; 2225 :         _Mx._Setf(regex_constants::match_prev_avail);
; 2226 :         _Mx._Clearf(regex_constants::_Match_not_null);
; 2227 :         while ((_First = _Mx._Skip(++_First, _Last)) != _Last) {

  001ac	6a 00		 push	 0
  001ae	57		 push	 edi
  001af	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  001b2	50		 push	 eax
  001b3	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR __Mx$[ebp]
  001b9	e8 00 00 00 00	 call	 ?_Skip@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAEPBDPBD0PAV_Node_base@2@@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Skip
  001be	8b f0		 mov	 esi, eax
  001c0	3b f7		 cmp	 esi, edi
  001c2	75 d3		 jne	 SHORT $LL2@Regex_sear
$LN356@Regex_sear:

; 1589 :         return _Match(_Matches, _Full_match);

  001c4	6a 00		 push	 0
  001c6	53		 push	 ebx
  001c7	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR __Mx$[ebp]
  001cd	89 7d c0	 mov	 DWORD PTR __Mx$[ebp+84], edi
  001d0	e8 00 00 00 00	 call	 ??$_Match@V?$allocator@V?$sub_match@PBD@std@@@std@@@?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE_NPAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@1@_N@Z ; std::_Matcher<char const *,char,std::regex_traits<char>,char const *>::_Match<std::allocator<std::sub_match<char const *> > >

; 2229 :                 _Found = true;
; 2230 :                 break;
; 2231 :             }
; 2232 :         }
; 2233 : 
; 2234 :         if (!_Found && _Mx._Match(_Last, _Matches, false)) {

  001d5	84 c0		 test	 al, al
  001d7	74 1c		 je	 SHORT $LN11@Regex_sear
$LN359@Regex_sear:

; 2235 :             _Found = true;
; 2236 :         }
; 2237 :     }
; 2238 : 
; 2239 :     if (_Found && _Matches) { // update _Matches

  001d9	c6 45 f3 01	 mov	 BYTE PTR __Found$1$[ebp], 1
  001dd	85 db		 test	 ebx, ebx
  001df	74 14		 je	 SHORT $LN11@Regex_sear

; 2240 :         _Matches->_Org           = _Org;

  001e1	8b 45 1c	 mov	 eax, DWORD PTR __Org$[ebp]
  001e4	89 03		 mov	 DWORD PTR [ebx], eax

; 2241 :         _Matches->_Pfx().first   = _Begin;

  001e6	8b 45 ec	 mov	 eax, DWORD PTR __Begin$1$[ebp]

; 2242 :         _Matches->_Pfx().matched = _Matches->_Pfx().first != _Matches->_Pfx().second;

  001e9	3b 43 18	 cmp	 eax, DWORD PTR [ebx+24]
  001ec	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  001ef	0f 95 c0	 setne	 al
  001f2	88 43 1c	 mov	 BYTE PTR [ebx+28], al
$LN11@Regex_sear:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  001f5	8b 55 ac	 mov	 edx, DWORD PTR __Mx$[ebp+64]
  001f8	85 d2		 test	 edx, edx
  001fa	74 45		 je	 SHORT $LN141@Regex_sear

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001fc	8b 4d b4	 mov	 ecx, DWORD PTR __Mx$[ebp+72]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001ff	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00201	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00203	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00206	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0020c	72 14		 jb	 SHORT $LN160@Regex_sear

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0020e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00211	83 c1 23	 add	 ecx, 35			; 00000023H
  00214	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00216	83 c0 fc	 add	 eax, -4			; fffffffcH
  00219	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0021c	0f 87 4d 01 00
	00		 ja	 $LN315@Regex_sear
$LN160@Regex_sear:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00222	51		 push	 ecx
  00223	52		 push	 edx
  00224	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00229	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0022c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+64], 0

; 2081 :             _Mylast  = nullptr;

  00233	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+68], 0

; 2082 :             _Myend   = nullptr;

  0023a	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+72], 0
$LN141@Regex_sear:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00241	8b 55 a0	 mov	 edx, DWORD PTR __Mx$[ebp+52]
  00244	85 d2		 test	 edx, edx
  00246	74 45		 je	 SHORT $LN175@Regex_sear

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00248	8b 4d a8	 mov	 ecx, DWORD PTR __Mx$[ebp+60]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0024b	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0024d	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0024f	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00252	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00258	72 14		 jb	 SHORT $LN194@Regex_sear

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0025a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0025d	83 c1 23	 add	 ecx, 35			; 00000023H
  00260	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00262	83 c0 fc	 add	 eax, -4			; fffffffcH
  00265	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00268	0f 87 01 01 00
	00		 ja	 $LN315@Regex_sear
$LN194@Regex_sear:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0026e	51		 push	 ecx
  0026f	52		 push	 edx
  00270	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00275	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00278	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+52], 0

; 2081 :             _Mylast  = nullptr;

  0027f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+56], 0

; 2082 :             _Myend   = nullptr;

  00286	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+60], 0
$LN175@Regex_sear:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0028d	8b 55 90	 mov	 edx, DWORD PTR __Mx$[ebp+36]
  00290	85 d2		 test	 edx, edx
  00292	74 45		 je	 SHORT $LN219@Regex_sear

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00294	8b 4d 98	 mov	 ecx, DWORD PTR __Mx$[ebp+44]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00297	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00299	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0029b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0029e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002a4	72 14		 jb	 SHORT $LN238@Regex_sear

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002a6	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002a9	83 c1 23	 add	 ecx, 35			; 00000023H
  002ac	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002ae	83 c0 fc	 add	 eax, -4			; fffffffcH
  002b1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002b4	0f 87 b5 00 00
	00		 ja	 $LN315@Regex_sear
$LN238@Regex_sear:

; 289  :         ::operator delete(_Ptr, _Bytes);

  002ba	51		 push	 ecx
  002bb	52		 push	 edx
  002bc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002c1	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  002c4	c7 45 90 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+36], 0

; 2081 :             _Mylast  = nullptr;

  002cb	c7 45 94 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+40], 0

; 2082 :             _Myend   = nullptr;

  002d2	c7 45 98 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+44], 0
$LN219@Regex_sear:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  002d9	8b 55 80	 mov	 edx, DWORD PTR __Mx$[ebp+20]
  002dc	85 d2		 test	 edx, edx
  002de	74 41		 je	 SHORT $LN255@Regex_sear

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  002e0	8b 4d 88	 mov	 ecx, DWORD PTR __Mx$[ebp+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002e3	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  002e5	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002e7	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  002ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002f0	72 10		 jb	 SHORT $LN274@Regex_sear

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002f5	83 c1 23	 add	 ecx, 35			; 00000023H
  002f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  002fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00300	77 6d		 ja	 SHORT $LN315@Regex_sear
$LN274@Regex_sear:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00302	51		 push	 ecx
  00303	52		 push	 edx
  00304	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00309	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0030c	c7 45 80 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+20], 0

; 2081 :             _Mylast  = nullptr;

  00313	c7 45 84 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+24], 0

; 2082 :             _Myend   = nullptr;

  0031a	c7 45 88 00 00
	00 00		 mov	 DWORD PTR __Mx$[ebp+28], 0
$LN255@Regex_sear:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00321	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR __Mx$[ebp+4]
  00327	85 d2		 test	 edx, edx
  00329	74 2f		 je	 SHORT $LN299@Regex_sear

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0032b	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR __Mx$[ebp+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00331	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00333	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00335	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00338	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0033e	72 10		 jb	 SHORT $LN318@Regex_sear

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00340	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00343	83 c1 23	 add	 ecx, 35			; 00000023H
  00346	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00348	83 c0 fc	 add	 eax, -4			; fffffffcH
  0034b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0034e	77 1f		 ja	 SHORT $LN315@Regex_sear
$LN318@Regex_sear:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00350	51		 push	 ecx
  00351	52		 push	 edx
  00352	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00357	83 c4 08	 add	 esp, 8
$LN299@Regex_sear:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2244 :     return _Found;

  0035a	8a 45 f3	 mov	 al, BYTE PTR __Found$1$[ebp]

; 2245 : }

  0035d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00360	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00367	59		 pop	 ecx
  00368	5f		 pop	 edi
  00369	5e		 pop	 esi
  0036a	5b		 pop	 ebx
  0036b	8b e5		 mov	 esp, ebp
  0036d	5d		 pop	 ebp
  0036e	c3		 ret	 0
$LN315@Regex_sear:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0036f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN358@Regex_sear:
  00374	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z$1:
  00000	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR __Mx$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$_Tgt_state_t@PBD@std@@QAE@XZ
__unwindfunclet$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z$2:
  0000b	8d 4d 8c	 lea	 ecx, DWORD PTR __Mx$[ebp+32]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Tgt_state_t@PBD@std@@QAE@XZ
__unwindfunclet$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z$3:
  00013	8d 4d ac	 lea	 ecx, DWORD PTR __Mx$[ebp+64]
  00016	e9 00 00 00 00	 jmp	 ??1?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@QAE@XZ ; std::vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >::~vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >
__unwindfunclet$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z$0:
  0001b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR __Mx$[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$_Matcher@PBDDV?$regex_traits@D@std@@PBD@std@@QAE@XZ
  00026	cc		 int	 3
  00027	cc		 int	 3
  00028	cc		 int	 3
  00029	cc		 int	 3
  0002a	cc		 int	 3
__ehhandler$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z:
  0002b	90		 npad	 1
  0002c	90		 npad	 1
  0002d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00031	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00034	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z ENDP ; std::_Regex_search2<char const *,std::allocator<std::sub_match<char const *> >,char,std::regex_traits<char>,char const *>
; Function compile flags: /Ogtp
;	COMDAT ??1?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@std@@QAE@XZ PROC ; std::match_results<char const *,std::allocator<std::sub_match<char const *> > >::~match_results<char const *,std::allocator<std::sub_match<char const *> > >, COMDAT
; _this$ = ecx
  00000	83 c1 08	 add	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@QAE@XZ ; std::vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >::~vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >
??1?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@std@@QAE@XZ ENDP ; std::match_results<char const *,std::allocator<std::sub_match<char const *> > >::~match_results<char const *,std::allocator<std::sub_match<char const *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Resize@?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Nx$ = 8						; size = 4
$T1 = 11						; size = 1
?_Resize@?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@std@@QAEXI@Z PROC ; std::match_results<char const *,std::allocator<std::sub_match<char const *> > >::_Resize, COMDAT
; _this$ = ecx

; 1133 :     void _Resize(unsigned int _Nx) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1581 :         if (_Newsize < _Oldsize) { // trim

  00005	8b 75 08	 mov	 esi, DWORD PTR __Nx$[ebp]
  00008	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1133 :     void _Resize(unsigned int _Nx) {

  0000d	57		 push	 edi

; 1134 :         _Matches.resize(_Nx);

  0000e	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00011	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00014	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00016	f7 e9		 imul	 ecx
  00018	d1 fa		 sar	 edx, 1
  0001a	8b da		 mov	 ebx, edx
  0001c	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0001f	03 da		 add	 ebx, edx

; 1581 :         if (_Newsize < _Oldsize) { // trim

  00021	3b f3		 cmp	 esi, ebx
  00023	73 12		 jae	 SHORT $LN6@Resize

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  00025	8b 17		 mov	 edx, DWORD PTR [edi]
  00027	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0002a	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1135 :     }

  0002d	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN6@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1590 :         if (_Newsize > _Oldsize) { // append

  00037	76 3e		 jbe	 SHORT $LN7@Resize

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00039	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0003c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00041	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00043	f7 e9		 imul	 ecx
  00045	d1 fa		 sar	 edx, 1
  00047	8b c2		 mov	 eax, edx
  00049	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004c	03 c2		 add	 eax, edx

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  0004e	3b f0		 cmp	 esi, eax
  00050	76 13		 jbe	 SHORT $LN8@Resize

; 1593 :                 _Resize_reallocate(_Newsize, _Val);

  00052	8d 45 0b	 lea	 eax, DWORD PTR $T1[ebp]
  00055	8b cf		 mov	 ecx, edi
  00057	50		 push	 eax
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >::_Resize_reallocate<std::_Value_init_tag>
  0005e	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1135 :     }

  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
$LN8@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00065	57		 push	 edi
  00066	2b f3		 sub	 esi, ebx
  00068	56		 push	 esi
  00069	ff 77 04	 push	 DWORD PTR [edi+4]
  0006c	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@V?$sub_match@PBD@std@@@std@@@std@@YAPAV?$sub_match@PBD@0@PAV10@IAAV?$allocator@V?$sub_match@PBD@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<std::sub_match<char const *> > >
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1135 :     }

  00074	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN7@Resize:
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?_Resize@?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@std@@QAEXI@Z ENDP ; std::match_results<char const *,std::allocator<std::sub_match<char const *> > >::_Resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@CAXXZ PROC ; std::vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >::~vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN5@vector:
  0005d	5f		 pop	 edi

; 820  :     }

  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00065	cc		 int	 3
??1?$vector@V?$sub_match@PBD@std@@V?$allocator@V?$sub_match@PBD@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >::~vector<std::sub_match<char const *>,std::allocator<std::sub_match<char const *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$_Builder@PBDDV?$regex_traits@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tidy_guard@V?$_Builder@PBDDV?$regex_traits@D@std@@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::_Builder<char const *,char,std::regex_traits<char> > >::~_Tidy_guard<std::_Builder<char const *,char,std::regex_traits<char> > >, COMDAT
; _this$ = ecx

; 87   :         if (_Target) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	0f 85 00 00 00
	00		 jne	 ?_Tidy@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Tidy

; 88   :             _Target->_Tidy();
; 89   :         }
; 90   :     }

  0000a	c3		 ret	 0
??1?$_Tidy_guard@V?$_Builder@PBDDV?$regex_traits@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::_Builder<char const *,char,std::regex_traits<char> > >::~_Tidy_guard<std::_Builder<char const *,char,std::regex_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$_Regex_replace1@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PBDV?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@PBD1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z
_TEXT	SEGMENT
__Matches$ = -84					; size = 56
$T2 = -28						; size = 4
$T3 = -24						; size = 4
tv706 = -20						; size = 4
$T4 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Result$ = 12						; size = 4
__First$ = 16						; size = 4
__Flags$1$ = 16						; size = 4
__Last$ = 20						; size = 4
__Re$ = 24						; size = 4
__Fmt$ = 28						; size = 4
__Flgs$ = 32						; size = 4
??$_Regex_replace1@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PBDV?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@PBD1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z PROC ; std::_Regex_replace1<std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,char const *,std::regex_traits<char>,char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2309 :     const basic_string<_Elem, _Traits, _Alloc>& _Fmt, regex_constants::match_flag_type _Flgs) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Regex_replace1@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PBDV?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@PBD1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	0f 57 c0	 xorps	 xmm0, xmm0

; 1157 :     _BidIt _Org = _BidIt();

  0002b	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR __Matches$[ebp], 0

; 1158 :     bool _Ready = false;

  00032	c6 45 b0 00	 mov	 BYTE PTR __Matches$[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00036	0f 11 45 b4	 movups	 XMMWORD PTR __Matches$[ebp+8], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 256  :         : first(), second() {}

  0003a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR __Matches$[ebp+24], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 571  :     bool matched = false;

  00041	c6 45 c8 00	 mov	 BYTE PTR __Matches$[ebp+28], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 256  :         : first(), second() {}

  00045	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR __Matches$[ebp+32], 0
  0004c	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Matches$[ebp+36], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 571  :     bool matched = false;

  00053	c6 45 d4 00	 mov	 BYTE PTR __Matches$[ebp+40], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 256  :         : first(), second() {}

  00057	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Matches$[ebp+44], 0
  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR __Matches$[ebp+48], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 571  :     bool matched = false;

  00065	c6 45 e0 00	 mov	 BYTE PTR __Matches$[ebp+52], 0

; 2310 :     // search and replace
; 2311 :     match_results<_BidIt> _Matches;
; 2312 :     _BidIt _Pos                             = _First;

  00069	8b 7d 10	 mov	 edi, DWORD PTR __First$[ebp]

; 2313 :     regex_constants::match_flag_type _Flags = _Flgs;
; 2314 :     regex_constants::match_flag_type _Not_null{};
; 2315 : 
; 2316 :     while (
; 2317 :         _Regex_search2(_Pos, _Last, _STD addressof(_Matches), _Re, _Flags | _Not_null, _Pos)) { // replace at each match

  0006c	8d 45 ac	 lea	 eax, DWORD PTR __Matches$[ebp]
  0006f	8b 75 20	 mov	 esi, DWORD PTR __Flgs$[ebp]
  00072	8b de		 mov	 ebx, esi
  00074	57		 push	 edi
  00075	56		 push	 esi
  00076	ff 75 18	 push	 DWORD PTR __Re$[ebp]
  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00080	50		 push	 eax
  00081	ff 75 14	 push	 DWORD PTR __Last$[ebp]
  00084	89 5d 10	 mov	 DWORD PTR __Flags$1$[ebp], ebx
  00087	57		 push	 edi
  00088	e8 00 00 00 00	 call	 ??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z ; std::_Regex_search2<char const *,std::allocator<std::sub_match<char const *> >,char,std::regex_traits<char>,char const *>
  0008d	83 c4 18	 add	 esp, 24			; 00000018H
  00090	84 c0		 test	 al, al
  00092	0f 84 f2 00 00
	00		 je	 $LN192@Regex_repl
  00098	8b c6		 mov	 eax, esi
  0009a	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  0009f	89 45 ec	 mov	 DWORD PTR tv706[ebp], eax
$LL2@Regex_repl:

; 2318 :         if (!(_Flgs & regex_constants::format_no_copy)) {

  000a2	8b 75 0c	 mov	 esi, DWORD PTR __Result$[ebp]
  000a5	85 c0		 test	 eax, eax
  000a7	75 1d		 jne	 SHORT $LN88@Regex_repl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4881 :     _STD _Seek_wrapped(_Dest, _STD _Copy_unchecked(_UFirst, _ULast, _STD move(_UDest)));

  000a9	8b 5d c4	 mov	 ebx, DWORD PTR __Matches$[ebp+24]

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  000ac	8b 7d c0	 mov	 edi, DWORD PTR __Matches$[ebp+20]
  000af	3b fb		 cmp	 edi, ebx
  000b1	74 10		 je	 SHORT $LN194@Regex_repl
$LL89@Regex_repl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 41   :         container->push_back(_Val);

  000b3	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  000b6	8b ce		 mov	 ecx, esi
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  000be	47		 inc	 edi
  000bf	3b fb		 cmp	 edi, ebx
  000c1	75 f0		 jne	 SHORT $LL89@Regex_repl
$LN194@Regex_repl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000c3	8b 5d 10	 mov	 ebx, DWORD PTR __Flags$1$[ebp]
$LN88@Regex_repl:
  000c6	8b 4d 1c	 mov	 ecx, DWORD PTR __Fmt$[ebp]
  000c9	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  000cd	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000d0	76 06		 jbe	 SHORT $LN189@Regex_repl

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000d2	03 01		 add	 eax, DWORD PTR [ecx]
  000d4	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000d6	eb 02		 jmp	 SHORT $LN33@Regex_repl
$LN189@Regex_repl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2322 :         _Result = _Matches._Format1(_Result, _Fmt.data(), _Fmt.data() + _Fmt.size(), _Flags);

  000d8	03 c1		 add	 eax, ecx
$LN33@Regex_repl:

; 1084 :         return _Flags & regex_constants::format_sed ? _Format_sed(*this, _Out, _Fmt_begin, _Fmt_end, _Flags)

  000da	53		 push	 ebx
  000db	50		 push	 eax
  000dc	8d 45 ac	 lea	 eax, DWORD PTR __Matches$[ebp]
  000df	51		 push	 ecx
  000e0	56		 push	 esi
  000e1	50		 push	 eax

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  000e2	f7 c3 00 04 00
	00		 test	 ebx, 1024		; 00000400H

; 1084 :         return _Flags & regex_constants::format_sed ? _Format_sed(*this, _Out, _Fmt_begin, _Fmt_end, _Flags)

  000e8	74 0b		 je	 SHORT $LN41@Regex_repl
  000ea	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 ??$_Format_sed@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@PBDV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@V10@PBD2W4match_flag_type@regex_constants@0@@Z ; std::_Format_sed<char const *,std::allocator<std::sub_match<char const *> >,char const *,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  000f3	eb 09		 jmp	 SHORT $LN197@Regex_repl
$LN41@Regex_repl:
  000f5	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ??$_Format_default@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@PBDV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@V10@PBD2W4match_flag_type@regex_constants@0@@Z ; std::_Format_default<char const *,std::allocator<std::sub_match<char const *> >,char const *,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
$LN197@Regex_repl:

; 2322 :         _Result = _Matches._Format1(_Result, _Fmt.data(), _Fmt.data() + _Fmt.size(), _Flags);

  000fe	8b 30		 mov	 esi, DWORD PTR [eax]
  00100	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00103	8b 4d b8	 mov	 ecx, DWORD PTR __Matches$[ebp+12]
  00106	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0010b	8b 5d b4	 mov	 ebx, DWORD PTR __Matches$[ebp+8]
  0010e	2b cb		 sub	 ecx, ebx
  00110	f7 e9		 imul	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1046 :         return _Matches.size() <= _Sub ? _Null_elem : _Matches[_Sub];

  00112	8d 45 d8	 lea	 eax, DWORD PTR __Matches$[ebp+44]

; 2322 :         _Result = _Matches._Format1(_Result, _Fmt.data(), _Fmt.data() + _Fmt.size(), _Flags);

  00115	89 75 0c	 mov	 DWORD PTR __Result$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00118	d1 fa		 sar	 edx, 1
  0011a	8b ca		 mov	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2322 :         _Result = _Matches._Format1(_Result, _Fmt.data(), _Fmt.data() + _Fmt.size(), _Flags);

  0011c	89 75 f0	 mov	 DWORD PTR $T4[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0011f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00122	03 ca		 add	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2325 :         if (_Pos == _Last || (_Flgs & regex_constants::format_first_only)) {

  00124	8b 55 14	 mov	 edx, DWORD PTR __Last$[ebp]

; 1046 :         return _Matches.size() <= _Sub ? _Null_elem : _Matches[_Sub];

  00127	0f 45 c3	 cmovne	 eax, ebx

; 2323 : 
; 2324 :         _Pos = _Matches[0].second;

  0012a	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 2325 :         if (_Pos == _Last || (_Flgs & regex_constants::format_first_only)) {

  0012d	3b fa		 cmp	 edi, edx
  0012f	74 65		 je	 SHORT $LN179@Regex_repl

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  00131	f7 45 20 00 10
	00 00		 test	 DWORD PTR __Flgs$[ebp], 4096 ; 00001000H

; 2325 :         if (_Pos == _Last || (_Flgs & regex_constants::format_first_only)) {

  00138	75 5c		 jne	 SHORT $LN179@Regex_repl

; 1046 :         return _Matches.size() <= _Sub ? _Null_elem : _Matches[_Sub];

  0013a	85 c9		 test	 ecx, ecx
  0013c	75 07		 jne	 SHORT $LN62@Regex_repl
  0013e	8d 5d d8	 lea	 ebx, DWORD PTR __Matches$[ebp+44]
  00141	8b c3		 mov	 eax, ebx
  00143	eb 02		 jmp	 SHORT $LN74@Regex_repl
$LN62@Regex_repl:
  00145	8b c3		 mov	 eax, ebx
$LN74@Regex_repl:

; 2326 :             break;
; 2327 :         }
; 2328 : 
; 2329 :         if (_Matches[0].first == _Matches[0].second) {

  00147	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00149	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014c	8b 5d 10	 mov	 ebx, DWORD PTR __Flags$1$[ebp]
  0014f	3b ca		 cmp	 ecx, edx
  00151	74 09		 je	 SHORT $LN94@Regex_repl

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  00153	81 cb 00 01 00
	00		 or	 ebx, 256		; 00000100H
  00159	89 5d 10	 mov	 DWORD PTR __Flags$1$[ebp], ebx
$LN94@Regex_repl:

; 2313 :     regex_constants::match_flag_type _Flags = _Flgs;
; 2314 :     regex_constants::match_flag_type _Not_null{};
; 2315 : 
; 2316 :     while (
; 2317 :         _Regex_search2(_Pos, _Last, _STD addressof(_Matches), _Re, _Flags | _Not_null, _Pos)) { // replace at each match

  0015c	33 f6		 xor	 esi, esi
  0015e	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H
  00163	3b ca		 cmp	 ecx, edx
  00165	57		 push	 edi
  00166	0f 45 c6	 cmovne	 eax, esi

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  00169	0b c3		 or	 eax, ebx

; 2313 :     regex_constants::match_flag_type _Flags = _Flgs;
; 2314 :     regex_constants::match_flag_type _Not_null{};
; 2315 : 
; 2316 :     while (
; 2317 :         _Regex_search2(_Pos, _Last, _STD addressof(_Matches), _Re, _Flags | _Not_null, _Pos)) { // replace at each match

  0016b	50		 push	 eax
  0016c	ff 75 18	 push	 DWORD PTR __Re$[ebp]
  0016f	8d 45 ac	 lea	 eax, DWORD PTR __Matches$[ebp]
  00172	50		 push	 eax
  00173	ff 75 14	 push	 DWORD PTR __Last$[ebp]
  00176	57		 push	 edi
  00177	e8 00 00 00 00	 call	 ??$_Regex_search2@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@DV?$regex_traits@D@2@PBD@std@@YA_NPBD0PAV?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@0@ABV?$basic_regex@DV?$regex_traits@D@std@@@0@W4match_flag_type@regex_constants@0@0@Z ; std::_Regex_search2<char const *,std::allocator<std::sub_match<char const *> >,char,std::regex_traits<char>,char const *>
  0017c	83 c4 18	 add	 esp, 24			; 00000018H
  0017f	84 c0		 test	 al, al
  00181	8b 45 ec	 mov	 eax, DWORD PTR tv706[ebp]
  00184	0f 85 18 ff ff
	ff		 jne	 $LL2@Regex_repl
$LN192@Regex_repl:
  0018a	8b 75 0c	 mov	 esi, DWORD PTR __Result$[ebp]
  0018d	8b 5d b4	 mov	 ebx, DWORD PTR __Matches$[ebp+8]
  00190	8b 55 14	 mov	 edx, DWORD PTR __Last$[ebp]
  00193	89 75 f0	 mov	 DWORD PTR $T4[ebp], esi
$LN179@Regex_repl:

; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)

  00196	f7 45 20 00 08
	00 00		 test	 DWORD PTR __Flgs$[ebp], 2048 ; 00000800H

; 2336 :     return _Flgs & regex_constants::format_no_copy ? _Result : _STD _Copy_unchecked(_Pos, _Last, _Result);

  0019d	75 25		 jne	 SHORT $LN11@Regex_repl
  0019f	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]
  001a2	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  001a5	3b fa		 cmp	 edi, edx
  001a7	74 1b		 je	 SHORT $LN11@Regex_repl
  001a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL172@Regex_repl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 41   :         container->push_back(_Val);

  001b0	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  001b3	8b ce		 mov	 ecx, esi
  001b5	50		 push	 eax
  001b6	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  001bb	47		 inc	 edi
  001bc	3b 7d 14	 cmp	 edi, DWORD PTR __Last$[ebp]
  001bf	75 ef		 jne	 SHORT $LL172@Regex_repl
  001c1	8b 5d b4	 mov	 ebx, DWORD PTR __Matches$[ebp+8]
$LN11@Regex_repl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2336 :     return _Flgs & regex_constants::format_no_copy ? _Result : _STD _Copy_unchecked(_Pos, _Last, _Result);

  001c4	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  001c7	8b 4d f0	 mov	 ecx, DWORD PTR $T4[ebp]
  001ca	89 0e		 mov	 DWORD PTR [esi], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  001cc	85 db		 test	 ebx, ebx
  001ce	74 3f		 je	 SHORT $LN143@Regex_repl

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001d0	8b 4d bc	 mov	 ecx, DWORD PTR __Matches$[ebp+16]
  001d3	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001d8	2b cb		 sub	 ecx, ebx
  001da	f7 e9		 imul	 ecx
  001dc	d1 fa		 sar	 edx, 1
  001de	8b c2		 mov	 eax, edx
  001e0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001e3	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001e5	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  001e8	8b c3		 mov	 eax, ebx
  001ea	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001ed	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001f3	72 10		 jb	 SHORT $LN162@Regex_repl

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001f5	8b 58 fc	 mov	 ebx, DWORD PTR [eax-4]
  001f8	83 c1 23	 add	 ecx, 35			; 00000023H
  001fb	2b c3		 sub	 eax, ebx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001fd	83 c0 fc	 add	 eax, -4			; fffffffcH
  00200	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00203	77 1e		 ja	 SHORT $LN199@Regex_repl
$LN162@Regex_repl:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00205	51		 push	 ecx
  00206	53		 push	 ebx
  00207	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0020c	83 c4 08	 add	 esp, 8
$LN143@Regex_repl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2336 :     return _Flgs & regex_constants::format_no_copy ? _Result : _STD _Copy_unchecked(_Pos, _Last, _Result);

  0020f	8b c6		 mov	 eax, esi

; 2337 : }

  00211	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00214	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0021b	59		 pop	 ecx
  0021c	5f		 pop	 edi
  0021d	5e		 pop	 esi
  0021e	5b		 pop	 ebx
  0021f	8b e5		 mov	 esp, ebp
  00221	5d		 pop	 ebp
  00222	c3		 ret	 0
$LN199@Regex_repl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00223	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN196@Regex_repl:
  00228	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Regex_replace1@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PBDV?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@PBD1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR __Matches$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$match_results@PBDV?$allocator@V?$sub_match@PBD@std@@@std@@@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Regex_replace1@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PBDV?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@PBD1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Regex_replace1@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PBDV?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@PBD1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Regex_replace1@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PBDV?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@PBD1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z ENDP ; std::_Regex_replace1<std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,char const *,std::regex_traits<char>,char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
;	COMDAT ??$_Hash_array_representation@D@std@@YAIQBDI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Hash_array_representation@D@std@@YAIQBDI@Z PROC	; std::_Hash_array_representation<char>, COMDAT

; 2322 :     const _Kty* const _First, const size_t _Count) noexcept { // bitwise hashes the representation of an array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2291 :     for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]

; 2323 :     static_assert(is_trivial_v<_Kty>, "Only trivial types can be directly hashed.");
; 2324 :     return _Fnv1a_append_bytes(

  00007	33 c9		 xor	 ecx, ecx
  00009	ba c5 9d 1c 81	 mov	 edx, -2128831035	; 811c9dc5H
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]

; 2291 :     for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {

  00012	85 f6		 test	 esi, esi
  00014	74 11		 je	 SHORT $LN16@Hash_array
$LL12@Hash_array:

; 2292 :         _Val ^= static_cast<size_t>(_First[_Idx]);

  00016	0f b6 04 0f	 movzx	 eax, BYTE PTR [edi+ecx]
  0001a	41		 inc	 ecx
  0001b	33 c2		 xor	 eax, edx

; 2293 :         _Val *= _FNV_prime;

  0001d	69 d0 93 01 00
	01		 imul	 edx, eax, 16777619
  00023	3b ce		 cmp	 ecx, esi
  00025	72 ef		 jb	 SHORT $LL12@Hash_array
$LN16@Hash_array:
  00027	5f		 pop	 edi

; 2325 :         _FNV_offset_basis, reinterpret_cast<const unsigned char*>(_First), _Count * sizeof(_Kty));
; 2326 : }

  00028	8b c2		 mov	 eax, edx
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Hash_array_representation@D@std@@YAIQBDI@Z ENDP	; std::_Hash_array_representation<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
;	COMDAT ??_G?$collate@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$collate@D@std@@MAEPAXI@Z PROC			; std::collate<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   :     __CLR_OR_THIS_CALL ~collate() noexcept override {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 69   :         _CSTD free(_Coll._LocaleName);

  00006	ff 76 0c	 push	 DWORD PTR [esi+12]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$collate@D@std@@6B@
  0000f	e8 00 00 00 00	 call	 _free
  00014	83 c4 04	 add	 esp, 4

; 70   :     }

  00017	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0001d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00021	74 0b		 je	 SHORT $LN10@scalar
  00023	6a 10		 push	 16			; 00000010H
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
??_G?$collate@D@std@@MAEPAXI@Z ENDP			; std::collate<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
;	COMDAT ?do_hash@?$collate@D@std@@MBEJPBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_hash@?$collate@D@std@@MBEJPBD0@Z PROC		; std::collate<char>::do_hash, COMDAT
; _this$ = ecx

; 108  :     _NODISCARD virtual long __CLR_OR_THIS_CALL do_hash(const _Elem* _First, const _Elem* _Last) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 109  :         // compute hash code for [_First, _Last)
; 110  :         _Adl_verify_range(_First, _Last);
; 111  :         return static_cast<long>(_Hash_array_representation(_First, static_cast<size_t>(_Last - _First)));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ??$_Hash_array_representation@D@std@@YAIQBDI@Z ; std::_Hash_array_representation<char>
  00012	83 c4 08	 add	 esp, 8

; 112  :     }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?do_hash@?$collate@D@std@@MBEJPBD0@Z ENDP		; std::collate<char>::do_hash
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
;	COMDAT ?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z PROC ; std::collate<char>::do_transform, COMDAT
; _this$ = ecx

; 91   :     _NODISCARD virtual string_type __CLR_OR_THIS_CALL do_transform(const _Elem* _First, const _Elem* _Last) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b d1		 mov	 edx, ecx
  00027	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002e	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00031	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00034	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00037	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0003e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 836  :         _My_data._Mysize = 0;

  00045	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0004c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00053	c6 06 00	 mov	 BYTE PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 105  :         return _Str;

  00056	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00059	b9 00 00 00 00	 mov	 ecx, 0
  0005e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00065	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  0006c	2b 45 0c	 sub	 eax, DWORD PTR __First$[ebp]
  0006f	74 57		 je	 SHORT $LN80@do_transfo
  00071	8d 7a 08	 lea	 edi, DWORD PTR [edx+8]
  00074	33 d2		 xor	 edx, edx
$LL4@do_transfo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2361 :         if (_New_size <= _Old_size) {

  00076	8b ce		 mov	 ecx, esi
  00078	3b c2		 cmp	 eax, edx
  0007a	77 11		 ja	 SHORT $LN30@do_transfo

; 3040 :         _Mypair._Myval2._Mysize = _New_size;

  0007c	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 434  :         return _Myres > _Small_string_capacity;

  0007f	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00083	76 02		 jbe	 SHORT $LN89@do_transfo

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00085	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN89@do_transfo:

; 3041 :         _Traits::assign(_Mypair._Myval2._Myptr()[_New_size], _Elem());

  00087	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2363 :         } else {

  0008b	eb 0a		 jmp	 SHORT $LN31@do_transfo
$LN30@do_transfo:

; 2364 :             append(_New_size - _Old_size, _Ch);

  0008d	6a 00		 push	 0
  0008f	2b c2		 sub	 eax, edx
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN31@do_transfo:

; 434  :         return _Myres > _Small_string_capacity;

  00097	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0009b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0009e	76 06		 jbe	 SHORT $LN87@do_transfo

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  000a0	03 06		 add	 eax, DWORD PTR [esi]
  000a2	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000a4	eb 04		 jmp	 SHORT $LN88@do_transfo
$LN87@do_transfo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 100  :             if ((_Count = _LStrxfrm(&_Str[0], &_Str[0] + _Str.size(), _First, _Last, &_Coll)) <= _Str.size()) {

  000a6	03 c6		 add	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  000a8	8b ce		 mov	 ecx, esi
$LN88@do_transfo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 431  :     return _Strxfrm(_First1, _Last1, _First2, _Last2, _Vector);

  000aa	57		 push	 edi
  000ab	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  000ae	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  000b1	50		 push	 eax
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 __Strxfrm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 100  :             if ((_Count = _LStrxfrm(&_Str[0], &_Str[0] + _Str.size(), _First, _Last, &_Coll)) <= _Str.size()) {

  000b8	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 431  :     return _Strxfrm(_First1, _Last1, _First2, _Last2, _Vector);

  000bb	83 c4 14	 add	 esp, 20			; 00000014H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 100  :             if ((_Count = _LStrxfrm(&_Str[0], &_Str[0] + _Str.size(), _First, _Last, &_Coll)) <= _Str.size()) {

  000be	3b c1		 cmp	 eax, ecx
  000c0	76 0a		 jbe	 SHORT $LN94@do_transfo

; 92   :         // transform [_First, _Last) to key string
; 93   :         _Adl_verify_range(_First, _Last);
; 94   :         size_t _Count;
; 95   :         string_type _Str;
; 96   : 
; 97   :         for (_Count = static_cast<size_t>(_Last - _First); 0 < _Count;) {

  000c2	8b d1		 mov	 edx, ecx
  000c4	85 c0		 test	 eax, eax
  000c6	75 ae		 jne	 SHORT $LL4@do_transfo
$LN80@do_transfo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2361 :         if (_New_size <= _Old_size) {

  000c8	3b c1		 cmp	 eax, ecx
  000ca	77 13		 ja	 SHORT $LN66@do_transfo
$LN94@do_transfo:

; 3040 :         _Mypair._Myval2._Mysize = _New_size;

  000cc	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  000cf	8b ce		 mov	 ecx, esi

; 434  :         return _Myres > _Small_string_capacity;

  000d1	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  000d5	76 02		 jbe	 SHORT $LN73@do_transfo

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  000d7	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN73@do_transfo:

; 3041 :         _Traits::assign(_Mypair._Myval2._Myptr()[_New_size], _Elem());

  000d9	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2363 :         } else {

  000dd	eb 0c		 jmp	 SHORT $LN95@do_transfo
$LN66@do_transfo:

; 2364 :             append(_New_size - _Old_size, _Ch);

  000df	2b c1		 sub	 eax, ecx
  000e1	8b ce		 mov	 ecx, esi
  000e3	6a 00		 push	 0
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN95@do_transfo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 106  :     }

  000eb	8b c6		 mov	 eax, esi
  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f7	59		 pop	 ecx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN8@do_transfo
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@do_transfo:
  00018	c3		 ret	 0
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
__ehhandler$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z:
  0001e	90		 npad	 1
  0001f	90		 npad	 1
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_transform@?$collate@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD0@Z ENDP ; std::collate<char>::do_transform
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
;	COMDAT ?do_compare@?$collate@D@std@@MBEHPBD000@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
?do_compare@?$collate@D@std@@MBEHPBD000@Z PROC		; std::collate<char>::do_compare, COMDAT
; _this$ = ecx

; 83   :         const _Elem* _First1, const _Elem* _Last1, const _Elem* _First2, const _Elem* _Last2) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         int _Ans = _LStrcoll(_First1, _Last1, _First2, _Last2, &_Coll);

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 406  :     return _Strcoll(_First1, _Last1, _First2, _Last2, _Vector);

  00006	50		 push	 eax
  00007	ff 75 14	 push	 DWORD PTR __Last2$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __First2$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last1$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First1$[ebp]
  00013	e8 00 00 00 00	 call	 __Strcoll
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 87   :         int _Ans = _LStrcoll(_First1, _Last1, _First2, _Last2, &_Coll);

  00018	8b c8		 mov	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 406  :     return _Strcoll(_First1, _Last1, _First2, _Last2, _Vector);

  0001a	83 c4 14	 add	 esp, 20			; 00000014H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 88   :         return _Ans < 0 ? -1 : _Ans == 0 ? 0 : +1;

  0001d	85 c9		 test	 ecx, ecx
  0001f	79 07		 jns	 SHORT $LN3@do_compare
  00021	83 c8 ff	 or	 eax, -1

; 89   :     }

  00024	5d		 pop	 ebp
  00025	c2 10 00	 ret	 16			; 00000010H
$LN3@do_compare:

; 88   :         return _Ans < 0 ? -1 : _Ans == 0 ? 0 : +1;

  00028	33 c0		 xor	 eax, eax
  0002a	85 c9		 test	 ecx, ecx
  0002c	0f 95 c0	 setne	 al

; 89   :     }

  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
?do_compare@?$collate@D@std@@MBEHPBD000@Z ENDP		; std::collate<char>::do_compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
;	COMDAT ??1?$collate@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$collate@D@std@@MAE@XZ PROC				; std::collate<char>::~collate<char>, COMDAT
; _this$ = ecx

; 68   :     __CLR_OR_THIS_CALL ~collate() noexcept override {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 69   :         _CSTD free(_Coll._LocaleName);

  00003	ff 76 0c	 push	 DWORD PTR [esi+12]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$collate@D@std@@6B@
  0000c	e8 00 00 00 00	 call	 _free
  00011	83 c4 04	 add	 esp, 4

; 70   :     }

  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$collate@D@std@@MAE@XZ ENDP				; std::collate<char>::~collate<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
;	COMDAT ?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -160						; size = 52
$T3 = -108						; size = 4
$T4 = -104						; size = 4
__Ppf$GSCopy$1$ = -100					; size = 4
__Ploc$GSCopy$1$ = -96					; size = 4
tv881 = -96						; size = 4
$T5 = -92						; size = 4
$T6 = -92						; size = 4
$T7 = -88						; size = 24
$T8 = -64						; size = 24
$T9 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::collate<char>::_Getcat, COMDAT

; 59   :     static size_t _Getcat(const locale::facet** _Ppf = nullptr, const locale* _Ploc = nullptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00030	8b 7d 08	 mov	 edi, DWORD PTR __Ppf$[ebp]
  00033	89 45 a0	 mov	 DWORD PTR __Ploc$GSCopy$1$[ebp], eax
  00036	33 c0		 xor	 eax, eax
  00038	89 7d 9c	 mov	 DWORD PTR __Ppf$GSCopy$1$[ebp], edi
  0003b	89 45 a4	 mov	 DWORD PTR $T5[ebp], eax
  0003e	89 45 98	 mov	 DWORD PTR $T4[ebp], eax

; 60   :         if (_Ppf && !*_Ppf) {

  00041	85 ff		 test	 edi, edi
  00043	0f 84 e5 01 00
	00		 je	 $LN217@Getcat
  00049	39 07		 cmp	 DWORD PTR [edi], eax
  0004b	0f 85 dd 01 00
	00		 jne	 $LN217@Getcat

; 61   :             *_Ppf = new collate<_Elem>(_Locinfo(_Ploc->name().c_str()));

  00051	6a 10		 push	 16			; 00000010H
  00053	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00058	8b f0		 mov	 esi, eax
  0005a	83 c4 04	 add	 esp, 4
  0005d	89 75 94	 mov	 DWORD PTR $T3[ebp], esi
  00060	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00067	85 f6		 test	 esi, esi
  00069	0f 84 6c 01 00
	00		 je	 $LN4@Getcat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 367  :         return _Ptr ? _Ptr->_Name.c_str() : string{};

  0006f	8b 45 a0	 mov	 eax, DWORD PTR __Ploc$GSCopy$1$[ebp]
  00072	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00075	85 c0		 test	 eax, eax
  00077	74 4b		 je	 SHORT $LN15@Getcat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 190  :         return _Myptr ? _Myptr : &_Nul;

  00079	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0007c	85 d2		 test	 edx, edx
  0007e	75 03		 jne	 SHORT $LN28@Getcat
  00080	8d 50 1c	 lea	 edx, DWORD PTR [eax+28]
$LN28@Getcat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00083	8b ca		 mov	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00085	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0
  0008c	0f 57 c0	 xorps	 xmm0, xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0008f	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00096	0f 11 45 c0	 movups	 XMMWORD PTR $T8[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0009a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0009d	89 45 a0	 mov	 DWORD PTR tv881[ebp], eax
$LL234@Getcat:
  000a0	8a 01		 mov	 al, BYTE PTR [ecx]
  000a2	41		 inc	 ecx
  000a3	84 c0		 test	 al, al
  000a5	75 f9		 jne	 SHORT $LL234@Getcat
  000a7	2b 4d a0	 sub	 ecx, DWORD PTR tv881[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000aa	51		 push	 ecx
  000ab	52		 push	 edx
  000ac	8d 4d c0	 lea	 ecx, DWORD PTR $T8[ebp]
  000af	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 367  :         return _Ptr ? _Ptr->_Name.c_str() : string{};

  000b4	8d 4d c0	 lea	 ecx, DWORD PTR $T8[ebp]
  000b7	b8 04 00 00 00	 mov	 eax, 4
  000bc	8d 55 d0	 lea	 edx, DWORD PTR $T8[ebp+16]
  000bf	8d 7d d4	 lea	 edi, DWORD PTR $T8[ebp+20]
  000c2	eb 27		 jmp	 SHORT $LN237@Getcat
$LN15@Getcat:
  000c4	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  000c7	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000ce	0f 11 45 d8	 movups	 XMMWORD PTR $T9[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  000d2	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T9[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 367  :         return _Ptr ? _Ptr->_Name.c_str() : string{};

  000d9	8d 4d d8	 lea	 ecx, DWORD PTR $T9[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000dc	c6 45 d8 00	 mov	 BYTE PTR $T9[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 367  :         return _Ptr ? _Ptr->_Name.c_str() : string{};

  000e0	8d 55 e8	 lea	 edx, DWORD PTR $T9[ebp+16]
  000e3	b8 08 00 00 00	 mov	 eax, 8
  000e8	8d 7d ec	 lea	 edi, DWORD PTR $T9[ebp+20]
$LN237@Getcat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000eb	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000ee	89 7d a4	 mov	 DWORD PTR $T6[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 367  :         return _Ptr ? _Ptr->_Name.c_str() : string{};

  000f1	83 c8 10	 or	 eax, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000f4	8b 7d 9c	 mov	 edi, DWORD PTR __Ppf$GSCopy$1$[ebp]
  000f7	0f 11 45 a8	 movups	 XMMWORD PTR $T7[ebp], xmm0
  000fb	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00100	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00106	8b 55 a4	 mov	 edx, DWORD PTR $T6[ebp]
  00109	66 0f d6 45 b8	 movq	 QWORD PTR $T7[ebp+16], xmm0

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  0010e	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00111	c7 02 0f 00 00
	00		 mov	 DWORD PTR [edx], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 367  :         return _Ptr ? _Ptr->_Name.c_str() : string{};

  00117	a8 08		 test	 al, 8
  00119	74 3d		 je	 SHORT $LN117@Getcat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0011b	8b 4d ec	 mov	 ecx, DWORD PTR $T9[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 367  :         return _Ptr ? _Ptr->_Name.c_str() : string{};

  0011e	83 e0 f7	 and	 eax, -9			; fffffff7H
  00121	89 45 a4	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00124	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00127	76 2f		 jbe	 SHORT $LN117@Getcat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00129	8b 55 d8	 mov	 edx, DWORD PTR $T9[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0012c	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012d	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0012f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00135	72 14		 jb	 SHORT $LN128@Getcat

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00137	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0013a	83 c1 23	 add	 ecx, 35			; 00000023H
  0013d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0013f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00142	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00145	0f 87 03 01 00
	00		 ja	 $LN225@Getcat
$LN128@Getcat:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0014b	51		 push	 ecx
  0014c	52		 push	 edx
  0014d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00152	8b 45 a4	 mov	 eax, DWORD PTR $T5[ebp]
  00155	83 c4 08	 add	 esp, 8
$LN117@Getcat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 367  :         return _Ptr ? _Ptr->_Name.c_str() : string{};

  00158	a8 04		 test	 al, 4
  0015a	74 3d		 je	 SHORT $LN155@Getcat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0015c	8b 4d d4	 mov	 ecx, DWORD PTR $T8[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 367  :         return _Ptr ? _Ptr->_Name.c_str() : string{};

  0015f	83 e0 fb	 and	 eax, -5			; fffffffbH
  00162	89 45 a4	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00165	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00168	76 2f		 jbe	 SHORT $LN155@Getcat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0016a	8b 55 c0	 mov	 edx, DWORD PTR $T8[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0016d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0016e	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00170	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00176	72 14		 jb	 SHORT $LN166@Getcat

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00178	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0017b	83 c1 23	 add	 ecx, 35			; 00000023H
  0017e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00180	83 c0 fc	 add	 eax, -4			; fffffffcH
  00183	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00186	0f 87 c2 00 00
	00		 ja	 $LN225@Getcat
$LN166@Getcat:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0018c	51		 push	 ecx
  0018d	52		 push	 edx
  0018e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00193	8b 45 a4	 mov	 eax, DWORD PTR $T5[ebp]
  00196	83 c4 08	 add	 esp, 8
$LN155@Getcat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 61   :             *_Ppf = new collate<_Elem>(_Locinfo(_Ploc->name().c_str()));

  00199	83 c8 01	 or	 eax, 1
  0019c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001a0	83 7d bc 0f	 cmp	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 61   :             *_Ppf = new collate<_Elem>(_Locinfo(_Ploc->name().c_str()));

  001a4	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  001aa	89 45 a4	 mov	 DWORD PTR $T5[ebp], eax
  001ad	89 45 98	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  001b0	8d 45 a8	 lea	 eax, DWORD PTR $T7[ebp]

; 426  :         if (_Large_mode_engaged()) {

  001b3	0f 47 45 a8	 cmova	 eax, DWORD PTR $T7[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 61   :             *_Ppf = new collate<_Elem>(_Locinfo(_Ploc->name().c_str()));

  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  001bd	83 4d a4 02	 or	 DWORD PTR $T5[ebp], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 141  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  001c1	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 55   :     collate(const _Locinfo& _Lobj, size_t _Refs = 0) : locale::facet(_Refs) {

  001c8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$collate@D@std@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 273  :         return ::_Getcoll();

  001ce	e8 00 00 00 00	 call	 __Getcoll
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 79   :         _Coll = _Lobj._Getcoll();

  001d3	89 46 08	 mov	 DWORD PTR [esi+8], eax
  001d6	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 61   :             *_Ppf = new collate<_Elem>(_Locinfo(_Ploc->name().c_str()));

  001d9	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  001db	33 f6		 xor	 esi, esi
$LN5@Getcat:
  001dd	8b 45 a4	 mov	 eax, DWORD PTR $T5[ebp]
  001e0	89 37		 mov	 DWORD PTR [edi], esi
  001e2	a8 02		 test	 al, 2
  001e4	74 14		 je	 SHORT $LN11@Getcat
  001e6	83 e0 fd	 and	 eax, -3			; fffffffdH
  001e9	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  001ef	89 45 a4	 mov	 DWORD PTR $T5[ebp], eax
  001f2	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
  001f7	8b 45 a4	 mov	 eax, DWORD PTR $T5[ebp]
$LN11@Getcat:
  001fa	a8 01		 test	 al, 1
  001fc	74 30		 je	 SHORT $LN217@Getcat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001fe	8b 4d bc	 mov	 ecx, DWORD PTR $T7[ebp+20]
  00201	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00204	76 28		 jbe	 SHORT $LN217@Getcat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00206	8b 55 a8	 mov	 edx, DWORD PTR $T7[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00209	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0020a	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0020c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00212	72 10		 jb	 SHORT $LN228@Getcat

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00214	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00217	83 c1 23	 add	 ecx, 35			; 00000023H
  0021a	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0021c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0021f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00222	77 2a		 ja	 SHORT $LN225@Getcat
$LN228@Getcat:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00224	51		 push	 ecx
  00225	52		 push	 edx
  00226	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0022b	83 c4 08	 add	 esp, 8
$LN217@Getcat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 64   :         return _X_COLLATE;

  0022e	b8 01 00 00 00	 mov	 eax, 1

; 65   :     }

  00233	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00236	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0023d	59		 pop	 ecx
  0023e	5f		 pop	 edi
  0023f	5e		 pop	 esi
  00240	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00243	33 cd		 xor	 ecx, ebp
  00245	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024a	8b e5		 mov	 esp, ebp
  0024c	5d		 pop	 ebp
  0024d	c3		 ret	 0
$LN225@Getcat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0024e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN236@Getcat:
  00253	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 10		 push	 16			; 00000010H
  00002	8b 45 94	 mov	 eax, DWORD PTR $T3[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000f	8b 45 98	 mov	 eax, DWORD PTR $T4[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	0f 84 0c 00 00
	00		 je	 $LN8@Getcat
  0001b	83 65 98 fe	 and	 DWORD PTR $T4[ebp], -2	; fffffffeH
  0001f	8d 4d a8	 lea	 ecx, DWORD PTR $T7[ebp]
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@Getcat:
  00027	c3		 ret	 0
  00028	cc		 int	 3
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
__ehhandler$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0002d	90		 npad	 1
  0002e	90		 npad	 1
  0002f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00033	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00036	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00046	33 c8		 xor	 ecx, eax
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00052	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::collate<char>::_Getcat
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@XZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::~_Parser<char const *,char,std::regex_traits<char> >, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	85 c0		 test	 eax, eax
  00008	74 41		 je	 SHORT $LN18@Parser

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0000d	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00012	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00018	72 12		 jb	 SHORT $LN37@Parser

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00020	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00022	83 c0 fc	 add	 eax, -4			; fffffffcH
  00025	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00028	77 23		 ja	 SHORT $LN34@Parser

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002a	8b c2		 mov	 eax, edx
$LN37@Parser:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00033	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003a	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003d	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 2082 :             _Myend   = nullptr;

  00044	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN18@Parser:
  0004b	5e		 pop	 esi
  0004c	c3		 ret	 0
$LN34@Parser:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@Parser:
  00052	cc		 int	 3
??1?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@XZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::~_Parser<char const *,char,std::regex_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Get_tmax@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABEIXZ
_TEXT	SEGMENT
?_Get_tmax@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABEIXZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Get_tmax, COMDAT
; _this$ = ecx

; 2970 :     return static_cast<unsigned int>(_Tmax);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 2971 : }

  00003	c3		 ret	 0
?_Get_tmax@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABEIXZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Get_tmax
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Get_bmax@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABEIXZ
_TEXT	SEGMENT
?_Get_bmax@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABEIXZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Get_bmax, COMDAT
; _this$ = ecx

; 2965 :     return static_cast<unsigned int>(_Bmax);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 2966 : }

  00003	c3		 ret	 0
?_Get_bmax@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABEIXZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Get_bmax
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Char_to_elts@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXPBD0HPAPAU?$_Sequence@D@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Diff$ = 16						; size = 4
__Cur$ = 20						; size = 4
?_Char_to_elts@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXPBD0HPAPAU?$_Sequence@D@2@@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Char_to_elts, COMDAT
; _this$ = ecx

; 2949 :     _Sequence<_Elem>** _Cur) { // add collation element to element sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2950 :     while (*_Cur && static_cast<unsigned int>(_Diff) < (*_Cur)->_Sz) {

  00005	8b 75 14	 mov	 esi, DWORD PTR __Cur$[ebp]
  00008	57		 push	 edi
  00009	8b 7d 10	 mov	 edi, DWORD PTR __Diff$[ebp]
  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	85 c0		 test	 eax, eax
  00010	74 0f		 je	 SHORT $LN21@Char_to_el
$LL2@Char_to_el:
  00012	3b 38		 cmp	 edi, DWORD PTR [eax]
  00014	73 0b		 jae	 SHORT $LN21@Char_to_el

; 2951 :         _Cur = &(*_Cur)->_Next;

  00016	8b 36		 mov	 esi, DWORD PTR [esi]
  00018	83 c6 10	 add	 esi, 16			; 00000010H
  0001b	8b 06		 mov	 eax, DWORD PTR [esi]
  0001d	85 c0		 test	 eax, eax
  0001f	75 f1		 jne	 SHORT $LL2@Char_to_el
$LN21@Char_to_el:

; 2952 :     }
; 2953 : 
; 2954 :     if (!(*_Cur) || static_cast<unsigned int>(_Diff) != (*_Cur)->_Sz) {

  00021	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00023	85 db		 test	 ebx, ebx
  00025	74 04		 je	 SHORT $LN5@Char_to_el
  00027	3b 3b		 cmp	 edi, DWORD PTR [ebx]
  00029	74 2e		 je	 SHORT $LN4@Char_to_el
$LN5@Char_to_el:

; 2955 :         // add new sequence holding elements of the same length
; 2956 :         _Sequence<_Elem>* _Node = *_Cur;
; 2957 :         *_Cur                   = new _Sequence<_Elem>(static_cast<unsigned int>(_Diff));

  0002b	6a 14		 push	 20			; 00000014H
  0002d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00032	83 c4 04	 add	 esp, 4
  00035	85 c0		 test	 eax, eax
  00037	74 19		 je	 SHORT $LN7@Char_to_el

; 1318 :     explicit _Sequence(unsigned int _Len) noexcept : _Sz(_Len) {}

  00039	89 38		 mov	 DWORD PTR [eax], edi

; 1290 :     unsigned int _Sz    = 0;

  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1291 :     unsigned int _Nchrs = 0;

  00042	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1292 :     _Elem* _Chrs        = nullptr;

  00049	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 2955 :         // add new sequence holding elements of the same length
; 2956 :         _Sequence<_Elem>* _Node = *_Cur;
; 2957 :         *_Cur                   = new _Sequence<_Elem>(static_cast<unsigned int>(_Diff));

  00050	eb 02		 jmp	 SHORT $LN8@Char_to_el
$LN7@Char_to_el:
  00052	33 c0		 xor	 eax, eax
$LN8@Char_to_el:
  00054	89 06		 mov	 DWORD PTR [esi], eax

; 2958 :         (*_Cur)->_Next          = _Node;

  00056	89 58 10	 mov	 DWORD PTR [eax+16], ebx
$LN4@Char_to_el:

; 2959 :     }
; 2960 :     (*_Cur)->_Data._Insert(_First, _Last);

  00059	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0005c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00061	83 c1 04	 add	 ecx, 4
  00064	e8 00 00 00 00	 call	 ??$_Insert@PBD@?$_Buf@D@std@@QAEXPBD0@Z ; std::_Buf<char>::_Insert<char const *>
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx

; 2961 : }

  0006c	5d		 pop	 ebp
  0006d	c2 10 00	 ret	 16			; 00000010H
?_Char_to_elts@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXPBD0HPAPAU?$_Sequence@D@2@@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Char_to_elts
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_elts@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXPAV?$_Node_class@DV?$regex_traits@D@std@@@2@F_N@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Node$ = 8						; size = 4
__Cl$ = 12						; size = 2
__Negate$ = 16						; size = 1
?_Add_elts@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXPAV?$_Node_class@DV?$regex_traits@D@std@@@2@F_N@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_elts, COMDAT
; _this$ = ecx

; 2923 :     _Node_class<_Elem, _RxTraits>* _Node, _Regex_traits_base::char_class_type _Cl, bool _Negate) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 2924 :     // add characters in named class to set
; 2925 :     for (unsigned int _Ch = 0; _Ch < _Bmp_max; ++_Ch) { // add elements or their inverse

  00006	8b 75 08	 mov	 esi, DWORD PTR __Node$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	66 8b 7d 0c	 mov	 di, WORD PTR __Cl$[ebp]
  00010	33 db		 xor	 ebx, ebx
  00012	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  00015	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Add_elts:

; 2926 :         bool _Matches = _Traits.isctype(static_cast<_Elem>(_Ch), _Cl);

  00020	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 325  :         if (_Fx != static_cast<char_class_type>(-1)) {

  00023	66 83 ff ff	 cmp	 di, -1
  00027	74 12		 je	 SHORT $LN11@Add_elts
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2700 :         return (_Ctype._Table[static_cast<unsigned char>(_Ch)] & _Maskval) != 0;

  00029	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002c	0f b6 cb	 movzx	 ecx, bl
  0002f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00032	66 85 3c 48	 test	 WORD PTR [eax+ecx*2], di
  00036	0f 95 c0	 setne	 al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 326  :             return _Getctype()->is(_Fx, _Ch);

  00039	eb 1a		 jmp	 SHORT $LN15@Add_elts
$LN11@Add_elts:

; 328  :             return _Ch == '_' // assumes L'_' == '_'

  0003b	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  0003e	74 13		 je	 SHORT $LN31@Add_elts
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2700 :         return (_Ctype._Table[static_cast<unsigned char>(_Ch)] & _Maskval) != 0;

  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	0f b6 cb	 movzx	 ecx, bl
  00046	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00049	66 85 14 48	 test	 WORD PTR [eax+ecx*2], dx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 328  :             return _Ch == '_' // assumes L'_' == '_'

  0004d	75 04		 jne	 SHORT $LN31@Add_elts
  0004f	32 c0		 xor	 al, al
  00051	eb 02		 jmp	 SHORT $LN15@Add_elts
$LN31@Add_elts:
  00053	b0 01		 mov	 al, 1
$LN15@Add_elts:

; 2927 :         if (_Matches != _Negate) { // add contents of named class to accelerator table

  00055	3a 45 10	 cmp	 al, BYTE PTR __Negate$[ebp]
  00058	74 3f		 je	 SHORT $LN2@Add_elts

; 2928 :             if (!_Node->_Small) {

  0005a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005d	85 c0		 test	 eax, eax
  0005f	75 1f		 jne	 SHORT $LN6@Add_elts

; 2929 :                 _Node->_Small = new _Bitmap;

  00061	6a 20		 push	 32			; 00000020H
  00063	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00068	83 c4 04	 add	 esp, 4
  0006b	85 c0		 test	 eax, eax
  0006d	74 0c		 je	 SHORT $LN8@Add_elts
  0006f	0f 57 c0	 xorps	 xmm0, xmm0

; 1313 :     unsigned char _Chrs[_Bmp_size]{};

  00072	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00075	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0

; 2929 :                 _Node->_Small = new _Bitmap;

  00079	eb 02		 jmp	 SHORT $LN9@Add_elts
$LN8@Add_elts:
  0007b	33 c0		 xor	 eax, eax
$LN9@Add_elts:
  0007d	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN6@Add_elts:

; 1302 :         _Chrs[_Wide >> _Bmp_shift] |= (1 << (_Wide & _Bmp_mask));

  00080	8b d3		 mov	 edx, ebx
  00082	c1 ea 03	 shr	 edx, 3
  00085	03 d0		 add	 edx, eax
  00087	8b c3		 mov	 eax, ebx
  00089	83 e0 07	 and	 eax, 7
  0008c	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  0008f	0f ab c1	 bts	 ecx, eax
  00092	88 0a		 mov	 BYTE PTR [edx], cl
  00094	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
$LN2@Add_elts:

; 2924 :     // add characters in named class to set
; 2925 :     for (unsigned int _Ch = 0; _Ch < _Bmp_max; ++_Ch) { // add elements or their inverse

  00099	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0009c	43		 inc	 ebx
  0009d	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  000a3	0f 82 77 ff ff
	ff		 jb	 $LL4@Add_elts
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx

; 2930 :             }
; 2931 : 
; 2932 :             _Node->_Small->_Mark(_Ch);
; 2933 :         }
; 2934 :     }
; 2935 : }

  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 0c 00	 ret	 12			; 0000000cH
?_Add_elts@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXPAV?$_Node_class@DV?$regex_traits@D@std@@@2@F_N@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_elts
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_char_to_array@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?_Add_char_to_array@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXD@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_array, COMDAT
; _this$ = ecx

; 2862 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Add_char_to_array(_Elem _Ch) { // append character to character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  00006	f7 46 08 00 01
	00 00		 test	 DWORD PTR [esi+8], 256	; 00000100H

; 2863 :     if (_Flags & regex_constants::icase) {

  0000d	74 13		 je	 SHORT $LN2@Add_char_t

; 301  :         return _Getctype()->tolower(_Ch);

  0000f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  00012	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 301  :         return _Getctype()->tolower(_Ch);

  00015	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0001d	ff d0		 call	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2864 :         _Ch = _Traits.translate_nocase(_Ch);

  0001f	88 45 08	 mov	 BYTE PTR __Ch$[ebp], al
$LN2@Add_char_t:

; 2865 :     }
; 2866 : 
; 2867 :     _Node_class<_Elem, _RxTraits>* _Node = static_cast<_Node_class<_Elem, _RxTraits>*>(_Current);

  00022	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2868 :     if (!_Node->_Large) {

  00025	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00028	85 c0		 test	 eax, eax
  0002a	75 33		 jne	 SHORT $LN3@Add_char_t

; 2869 :         _Node->_Large = new _Buf<_Elem>;

  0002c	6a 0c		 push	 12			; 0000000cH
  0002e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00033	83 c4 04	 add	 esp, 4
  00036	85 c0		 test	 eax, eax
  00038	74 20		 je	 SHORT $LN5@Add_char_t

; 1290 :     unsigned int _Sz    = 0;

  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1291 :     unsigned int _Nchrs = 0;

  00040	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1292 :     _Elem* _Chrs        = nullptr;

  00047	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 2869 :         _Node->_Large = new _Buf<_Elem>;

  0004e	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 2870 :     }
; 2871 : 
; 2872 :     _Node->_Large->_Insert(_Ch);

  00051	5e		 pop	 esi
  00052	8b c8		 mov	 ecx, eax

; 2873 : }

  00054	5d		 pop	 ebp

; 2870 :     }
; 2871 : 
; 2872 :     _Node->_Large->_Insert(_Ch);

  00055	e9 00 00 00 00	 jmp	 ?_Insert@?$_Buf@D@std@@QAEXD@Z ; std::_Buf<char>::_Insert
$LN5@Add_char_t:

; 2869 :         _Node->_Large = new _Buf<_Elem>;

  0005a	33 c0		 xor	 eax, eax
  0005c	89 46 1c	 mov	 DWORD PTR [esi+28], eax
$LN3@Add_char_t:

; 2870 :     }
; 2871 : 
; 2872 :     _Node->_Large->_Insert(_Ch);

  0005f	5e		 pop	 esi
  00060	8b c8		 mov	 ecx, eax

; 2873 : }

  00062	5d		 pop	 ebp

; 2870 :     }
; 2871 : 
; 2872 :     _Node->_Large->_Insert(_Ch);

  00063	e9 00 00 00 00	 jmp	 ?_Insert@?$_Buf@D@std@@QAEXD@Z ; std::_Buf<char>::_Insert
?_Add_char_to_array@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXD@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_char_to_bitmap@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?_Add_char_to_bitmap@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXD@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_bitmap, COMDAT
; _this$ = ecx

; 2847 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Add_char_to_bitmap(_Elem _Ch) { // add character to accelerator table

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  00007	f7 46 08 00 01
	00 00		 test	 DWORD PTR [esi+8], 256	; 00000100H

; 2848 :     if (_Flags & regex_constants::icase) {

  0000e	74 14		 je	 SHORT $LN20@Add_char_t

; 301  :         return _Getctype()->tolower(_Ch);

  00010	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  00013	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 301  :         return _Getctype()->tolower(_Ch);

  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  00019	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001b	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0001e	ff d0		 call	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2849 :         _Ch = _Traits.translate_nocase(_Ch);

  00020	8a d8		 mov	 bl, al
  00022	eb 03		 jmp	 SHORT $LN2@Add_char_t
$LN20@Add_char_t:

; 2848 :     if (_Flags & regex_constants::icase) {

  00024	8a 5d 08	 mov	 bl, BYTE PTR __Ch$[ebp]
$LN2@Add_char_t:

; 2850 :     }
; 2851 : 
; 2852 :     _Node_class<_Elem, _RxTraits>* _Node = static_cast<_Node_class<_Elem, _RxTraits>*>(_Current);

  00027	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 2853 : 
; 2854 :     if (!_Node->_Small) {

  0002a	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0002d	85 c9		 test	 ecx, ecx
  0002f	75 21		 jne	 SHORT $LN3@Add_char_t

; 2855 :         _Node->_Small = new _Bitmap;

  00031	6a 20		 push	 32			; 00000020H
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00038	8b c8		 mov	 ecx, eax
  0003a	83 c4 04	 add	 esp, 4
  0003d	85 c9		 test	 ecx, ecx
  0003f	74 0c		 je	 SHORT $LN5@Add_char_t
  00041	0f 57 c0	 xorps	 xmm0, xmm0

; 1313 :     unsigned char _Chrs[_Bmp_size]{};

  00044	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00047	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0

; 2855 :         _Node->_Small = new _Bitmap;

  0004b	eb 02		 jmp	 SHORT $LN6@Add_char_t
$LN5@Add_char_t:
  0004d	33 c9		 xor	 ecx, ecx
$LN6@Add_char_t:
  0004f	89 4e 18	 mov	 DWORD PTR [esi+24], ecx
$LN3@Add_char_t:

; 1301 :         unsigned int _Wide = _Ch;

  00052	0f b6 d3	 movzx	 edx, bl

; 1302 :         _Chrs[_Wide >> _Bmp_shift] |= (1 << (_Wide & _Bmp_mask));

  00055	8b c2		 mov	 eax, edx
  00057	83 e2 07	 and	 edx, 7
  0005a	c1 e8 03	 shr	 eax, 3
  0005d	03 c8		 add	 ecx, eax
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00064	0f ab d0	 bts	 eax, edx
  00067	88 01		 mov	 BYTE PTR [ecx], al

; 2856 :     }
; 2857 : 
; 2858 :     _Node->_Small->_Mark(static_cast<typename _RxTraits::_Uelem>(_Ch));
; 2859 : }

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?_Add_char_to_bitmap@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXD@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_bitmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABE_NPAV_Node_base@2@@Z
_TEXT	SEGMENT
__Nx$ = 8						; size = 4
?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABE_NPAV_Node_base@2@@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Beg_expr, COMDAT
; _this$ = ecx

; 2759 : bool _Builder<_FwdIt, _Elem, _RxTraits>::_Beg_expr(_Node_base* _Nx) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2760 :     // test for beginning of expression or subexpression
; 2761 :     return _Nx->_Kind == _N_begin || _Nx->_Kind == _N_group || _Nx->_Kind == _N_capture;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Nx$[ebp]
  00006	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00009	83 f8 14	 cmp	 eax, 20			; 00000014H
  0000c	74 10		 je	 SHORT $LN3@Beg_expr
  0000e	83 f8 08	 cmp	 eax, 8
  00011	74 0b		 je	 SHORT $LN3@Beg_expr
  00013	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00016	74 06		 je	 SHORT $LN3@Beg_expr
  00018	32 c0		 xor	 al, al

; 2762 : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
$LN3@Beg_expr:

; 2760 :     // test for beginning of expression or subexpression
; 2761 :     return _Nx->_Kind == _N_begin || _Nx->_Kind == _N_group || _Nx->_Kind == _N_capture;

  0001e	b0 01		 mov	 al, 1

; 2762 : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABE_NPAV_Node_base@2@@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Beg_expr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_str_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Add_str_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_str_node, COMDAT
; _this$ = ecx

; 2821 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Add_str_node() { // add string node

  00000	56		 push	 esi

; 2822 :     _Link_node(new _Node_str<_Elem>);

  00001	6a 20		 push	 32			; 00000020H
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 41		 je	 SHORT $LN3@Add_str_no
  00011	50		 push	 eax
  00012	8b ce		 mov	 ecx, esi

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  00014	c7 40 04 06 00
	00 00		 mov	 DWORD PTR [eax+4], 6
  0001b	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  00022	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  00029	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1393 :     explicit _Node_str(_Node_flags _Fl = _Fl_none) noexcept : _Node_base(_N_str, _Fl) {}

  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$_Node_str@D@std@@6B@

; 1290 :     unsigned int _Sz    = 0;

  00036	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1291 :     unsigned int _Nchrs = 0;

  0003d	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 1292 :     _Elem* _Chrs        = nullptr;

  00044	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 2822 :     _Link_node(new _Node_str<_Elem>);

  0004b	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
  00050	5e		 pop	 esi

; 2823 : }

  00051	c3		 ret	 0
$LN3@Add_str_no:

; 2822 :     _Link_node(new _Node_str<_Elem>);

  00052	33 c0		 xor	 eax, eax
  00054	8b ce		 mov	 ecx, esi
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
  0005c	5e		 pop	 esi

; 2823 : }

  0005d	c3		 ret	 0
?_Add_str_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_str_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_New_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@W4_Node_type@2@@Z
_TEXT	SEGMENT
__Kind$ = 8						; size = 4
?_New_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@W4_Node_type@2@@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_New_node, COMDAT
; _this$ = ecx

; 2791 : _Node_base* _Builder<_FwdIt, _Elem, _RxTraits>::_New_node(_Node_type _Kind) { // allocate and link simple node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2792 :     return _Link_node(new _Node_base(_Kind));

  00004	6a 14		 push	 20			; 00000014H
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	74 2e		 je	 SHORT $LN3@New_node

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  00014	8b 4d 08	 mov	 ecx, DWORD PTR __Kind$[ebp]
  00017	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 2792 :     return _Link_node(new _Node_base(_Kind));

  0001a	8b ce		 mov	 ecx, esi
  0001c	50		 push	 eax

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_base@std@@6B@
  00023	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  0002a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  00031	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 2792 :     return _Link_node(new _Node_base(_Kind));

  00038	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
  0003d	5e		 pop	 esi

; 2793 : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN3@New_node:

; 2792 :     return _Link_node(new _Node_base(_Kind));

  00042	33 c0		 xor	 eax, eax
  00044	8b ce		 mov	 ecx, esi
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
  0004c	5e		 pop	 esi

; 2793 : }

  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?_New_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@W4_Node_type@2@@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_New_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Insert_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@CAXPAV_Node_base@2@0@Z
_TEXT	SEGMENT
__Insert_before$ = 8					; size = 4
__To_insert$ = 12					; size = 4
?_Insert_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@CAXPAV_Node_base@2@0@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Insert_node, COMDAT

; 2782 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Insert_node(_Node_base* _Insert_before, _Node_base* _To_insert) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2783 :     // insert _To_insert into the graph before the node _Insert_before
; 2784 :     _Insert_before->_Prev->_Next = _To_insert;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Insert_before$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __To_insert$[ebp]
  00009	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0000c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 2785 :     _To_insert->_Prev            = _Insert_before->_Prev;

  0000f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00012	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 2786 :     _Insert_before->_Prev        = _To_insert;

  00015	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 2787 :     _To_insert->_Next            = _Insert_before;

  00018	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 2788 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?_Insert_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@CAXPAV_Node_base@2@0@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z
_TEXT	SEGMENT
__Nx$ = 8						; size = 4
?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node, COMDAT
; _this$ = ecx

; 2770 : _Node_base* _Builder<_FwdIt, _Elem, _RxTraits>::_Link_node(_Node_base* _Nx) { // insert _Nx at current location

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2771 :     _Nx->_Prev = _Current;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Nx$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 2772 :     if (_Current->_Next) { // set back pointer

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $LN2@Link_node

; 2773 :         _Nx->_Next             = _Current->_Next;

  00019	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 2774 :         _Current->_Next->_Prev = _Nx;

  0001c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001f	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00022	89 51 10	 mov	 DWORD PTR [ecx+16], edx
$LN2@Link_node:

; 2775 :     }
; 2776 :     _Current->_Next = _Nx;

  00025	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 2777 :     _Current        = _Nx;
; 2778 :     return _Nx;

  00028	8b c2		 mov	 eax, edx
  0002a	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  0002d	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00030	5e		 pop	 esi

; 2779 : }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_End_pattern@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ
_TEXT	SEGMENT
?_End_pattern@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_pattern, COMDAT
; _this$ = ecx

; 3129 : _Root_node* _Builder<_FwdIt, _Elem, _RxTraits>::_End_pattern() { // wrap up

  00000	56		 push	 esi

; 3130 :     _New_node(_N_end);

  00001	6a 15		 push	 21			; 00000015H
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@W4_Node_type@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_New_node

; 3131 :     return _Root;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	5e		 pop	 esi

; 3132 : }

  0000d	c3		 ret	 0
?_End_pattern@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_pattern
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Mark_final@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Mark_final@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Mark_final, COMDAT
; _this$ = ecx

; 2750 :     _Current->_Flags |= _Fl_final;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1209 : _BITMASK_OPS(_EMPTY_ARGUMENT, _Node_flags)

  00003	83 48 08 04	 or	 DWORD PTR [eax+8], 4

; 2751 : }

  00007	c3		 ret	 0
?_Mark_final@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Mark_final
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Negate@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Negate@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Negate, COMDAT
; _this$ = ecx

; 2745 :     _Current->_Flags ^= _Fl_negate;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1209 : _BITMASK_OPS(_EMPTY_ARGUMENT, _Node_flags)

  00003	83 70 08 01	 xor	 DWORD PTR [eax+8], 1

; 2746 : }

  00007	c3		 ret	 0
?_Negate@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Negate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_rep@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXHH_N@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
__Pos$1$ = -4						; size = 4
__Min$ = 8						; size = 4
__Gbegin$1$ = 8						; size = 4
__Max$ = 12						; size = 4
__Greedy$ = 16						; size = 1
?_Add_rep@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXHH_N@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_rep, COMDAT
; _this$ = ecx

; 3082 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Add_rep(int _Min, int _Max, bool _Greedy) { // add repeat node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	89 75 f8	 mov	 DWORD PTR _this$1$[ebp], esi

; 3083 :     if (_Current->_Kind == _N_str
; 3084 :         && static_cast<_Node_str<_Elem>*>(_Current)->_Data._Size() != 1) { // move final character to new string node

  0000e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00011	83 78 04 06	 cmp	 DWORD PTR [eax+4], 6
  00015	75 1b		 jne	 SHORT $LN2@Add_rep
  00017	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001a	83 f9 01	 cmp	 ecx, 1
  0001d	74 13		 je	 SHORT $LN2@Add_rep

; 1269 :         return _Chrs[--_Nchrs];

  0001f	49		 dec	 ecx
  00020	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3085 :         _Node_str<_Elem>* _Node = static_cast<_Node_str<_Elem>*>(_Current);
; 3086 :         _Add_char(_Node->_Data._Del());

  00023	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00026	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  0002a	8b ce		 mov	 ecx, esi
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?_Add_char@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char
$LN2@Add_rep:

; 3087 :     }
; 3088 : 
; 3089 :     _Node_base* _Pos = _Current;

  00032	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00035	89 45 fc	 mov	 DWORD PTR __Pos$1$[ebp], eax

; 3090 :     if (_Pos->_Kind == _N_end_group || _Pos->_Kind == _N_end_capture) {

  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003b	83 f9 09	 cmp	 ecx, 9
  0003e	74 05		 je	 SHORT $LN4@Add_rep
  00040	83 f9 0e	 cmp	 ecx, 14			; 0000000eH
  00043	75 06		 jne	 SHORT $LN3@Add_rep
$LN4@Add_rep:

; 3091 :         _Pos = static_cast<_Node_end_group*>(_Pos)->_Back;

  00045	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00048	89 45 fc	 mov	 DWORD PTR __Pos$1$[ebp], eax
$LN3@Add_rep:

; 3092 :     }
; 3093 : 
; 3094 :     if (_Min == 0 && _Max == 1) { // rewrite zero-or-one quantifiers as alternations to make the

  0004b	83 7d 08 00	 cmp	 DWORD PTR __Min$[ebp], 0
  0004f	0f 85 82 01 00
	00		 jne	 $LN5@Add_rep
  00055	83 7d 0c 01	 cmp	 DWORD PTR __Max$[ebp], 1
  00059	0f 85 78 01 00
	00		 jne	 $LN5@Add_rep

; 3095 :                                   // "simple loop" optimization more likely to engage
; 3096 :         _Node_endif* _End       = new _Node_endif;

  0005f	6a 14		 push	 20			; 00000014H
  00061	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00066	8b f0		 mov	 esi, eax
  00068	83 c4 04	 add	 esp, 4
  0006b	85 f6		 test	 esi, esi
  0006d	74 24		 je	 SHORT $LN9@Add_rep

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  0006f	c7 46 04 11 00
	00 00		 mov	 DWORD PTR [esi+4], 17	; 00000011H
  00076	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  0007d	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  00084	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1429 :     _Node_endif() noexcept : _Node_base(_N_endif, _Fl_none) {}

  0008b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_endif@std@@6B@

; 3095 :                                   // "simple loop" optimization more likely to engage
; 3096 :         _Node_endif* _End       = new _Node_endif;

  00091	eb 02		 jmp	 SHORT $LN10@Add_rep
$LN9@Add_rep:
  00093	33 f6		 xor	 esi, esi
$LN10@Add_rep:

; 3097 :         _Node_if* _If_expr      = new _Node_if(_End);

  00095	6a 1c		 push	 28			; 0000001cH
  00097	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009c	8b f8		 mov	 edi, eax
  0009e	83 c4 04	 add	 esp, 4
  000a1	85 ff		 test	 edi, edi
  000a3	74 2e		 je	 SHORT $LN11@Add_rep

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  000a5	c7 47 04 10 00
	00 00		 mov	 DWORD PTR [edi+4], 16	; 00000010H
  000ac	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  000b3	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  000ba	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 1435 :         : _Node_base(_N_if, _Fl_none), _Endif(static_cast<_Node_endif*>(_End)) {}

  000c1	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_Node_if@std@@6B@
  000c7	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 1436 : 
; 1437 :     ~_Node_if() noexcept {
; 1438 :         _Node_if* _Cur = _Child;
; 1439 :         while (_Cur) { // destroy branch
; 1440 :             _Node_if* _Tmp = _Cur;
; 1441 :             _Cur           = _Cur->_Child;
; 1442 :             _Tmp->_Child   = nullptr;
; 1443 :             _Destroy_node(_Tmp, _Endif);
; 1444 :         }
; 1445 :     }
; 1446 : 
; 1447 :     _Node_endif* _Endif;
; 1448 :     _Node_if* _Child = nullptr;

  000ca	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 3097 :         _Node_if* _If_expr      = new _Node_if(_End);

  000d1	eb 02		 jmp	 SHORT $LN12@Add_rep
$LN11@Add_rep:
  000d3	33 ff		 xor	 edi, edi
$LN12@Add_rep:

; 3098 :         _Node_if* _If_empty_str = new _Node_if(_End);

  000d5	6a 1c		 push	 28			; 0000001cH
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000dc	8b d8		 mov	 ebx, eax
  000de	83 c4 04	 add	 esp, 4
  000e1	85 db		 test	 ebx, ebx
  000e3	74 2e		 je	 SHORT $LN13@Add_rep

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  000e5	c7 43 04 10 00
	00 00		 mov	 DWORD PTR [ebx+4], 16	; 00000010H
  000ec	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  000f3	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  000fa	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 1435 :         : _Node_base(_N_if, _Fl_none), _Endif(static_cast<_Node_endif*>(_End)) {}

  00101	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7_Node_if@std@@6B@
  00107	89 73 14	 mov	 DWORD PTR [ebx+20], esi

; 1436 : 
; 1437 :     ~_Node_if() noexcept {
; 1438 :         _Node_if* _Cur = _Child;
; 1439 :         while (_Cur) { // destroy branch
; 1440 :             _Node_if* _Tmp = _Cur;
; 1441 :             _Cur           = _Cur->_Child;
; 1442 :             _Tmp->_Child   = nullptr;
; 1443 :             _Destroy_node(_Tmp, _Endif);
; 1444 :         }
; 1445 :     }
; 1446 : 
; 1447 :     _Node_endif* _Endif;
; 1448 :     _Node_if* _Child = nullptr;

  0010a	c7 43 18 00 00
	00 00		 mov	 DWORD PTR [ebx+24], 0

; 3098 :         _Node_if* _If_empty_str = new _Node_if(_End);

  00111	eb 02		 jmp	 SHORT $LN14@Add_rep
$LN13@Add_rep:
  00113	33 db		 xor	 ebx, ebx
$LN14@Add_rep:

; 3099 :         _Node_base* _Gbegin     = new _Node_base(_N_group);

  00115	6a 14		 push	 20			; 00000014H
  00117	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0011c	83 c4 04	 add	 esp, 4
  0011f	89 45 08	 mov	 DWORD PTR __Gbegin$1$[ebp], eax
  00122	85 c0		 test	 eax, eax
  00124	74 24		 je	 SHORT $LN15@Add_rep

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  00126	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_base@std@@6B@
  0012c	c7 40 04 08 00
	00 00		 mov	 DWORD PTR [eax+4], 8
  00133	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  0013a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  00141	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3099 :         _Node_base* _Gbegin     = new _Node_base(_N_group);

  00148	eb 07		 jmp	 SHORT $LN16@Add_rep
$LN15@Add_rep:
  0014a	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Gbegin$1$[ebp], 0
$LN16@Add_rep:

; 3100 :         _Node_end_group* _Gend  = new _Node_end_group(_N_end_group, _Fl_none, _Gbegin);

  00151	6a 18		 push	 24			; 00000018H
  00153	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00158	8b c8		 mov	 ecx, eax
  0015a	83 c4 04	 add	 esp, 4
  0015d	8b 45 08	 mov	 eax, DWORD PTR __Gbegin$1$[ebp]
  00160	85 c9		 test	 ecx, ecx
  00162	74 19		 je	 SHORT $LN17@Add_rep

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  00164	c7 41 04 09 00
	00 00		 mov	 DWORD PTR [ecx+4], 9
  0016b	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 1360 :     _Node_end_group(_Node_type _Ty, _Node_flags _Fl, _Node_base* _Bx) noexcept : _Node_base(_Ty, _Fl), _Back(_Bx) {}

  00172	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Node_end_group@std@@6B@
  00178	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 3100 :         _Node_end_group* _Gend  = new _Node_end_group(_N_end_group, _Fl_none, _Gbegin);

  0017b	eb 02		 jmp	 SHORT $LN18@Add_rep
$LN17@Add_rep:
  0017d	33 c9		 xor	 ecx, ecx
$LN18@Add_rep:

; 3101 : 
; 3102 :         _If_empty_str->_Next = _Gbegin;

  0017f	89 43 0c	 mov	 DWORD PTR [ebx+12], eax

; 3103 :         _Gbegin->_Prev       = _If_empty_str;
; 3104 : 
; 3105 :         _Gbegin->_Next = _Gend;

  00182	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00185	89 58 10	 mov	 DWORD PTR [eax+16], ebx

; 3106 :         _Gend->_Prev   = _Gbegin;

  00188	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 3107 : 
; 3108 :         _Gend->_Next = _End;

  0018b	89 71 0c	 mov	 DWORD PTR [ecx+12], esi

; 3109 : 
; 3110 :         _If_expr->_Child = _If_empty_str;
; 3111 : 
; 3112 :         _Link_node(_End);

  0018e	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00191	56		 push	 esi
  00192	89 5f 18	 mov	 DWORD PTR [edi+24], ebx
  00195	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node

; 3113 :         _Insert_node(_Pos, _If_expr);

  0019a	57		 push	 edi
  0019b	ff 75 fc	 push	 DWORD PTR __Pos$1$[ebp]
  0019e	e8 00 00 00 00	 call	 ?_Insert_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@CAXPAV_Node_base@2@0@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Insert_node
  001a3	83 c4 08	 add	 esp, 8

; 3114 : 
; 3115 :         if (!_Greedy) {

  001a6	80 7d 10 00	 cmp	 BYTE PTR __Greedy$[ebp], 0
  001aa	0f 85 da 00 00
	00		 jne	 $LN6@Add_rep

; 3116 :             swap(_If_expr->_Next->_Prev, _If_empty_str->_Next->_Prev); // intentional ADL

  001b0	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
  001b3	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  001b6	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  001b9	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  001bc	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 141  :     _Right   = _STD move(_Tmp);

  001bf	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 139  :     _Ty _Tmp = _STD move(_Left);

  001c2	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 140  :     _Left    = _STD move(_Right);

  001c5	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  001c8	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  001cb	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3126 : }

  001cc	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  001cd	89 4b 0c	 mov	 DWORD PTR [ebx+12], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3126 : }

  001d0	5b		 pop	 ebx
  001d1	8b e5		 mov	 esp, ebp
  001d3	5d		 pop	 ebp
  001d4	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Add_rep:

; 3117 :             swap(_If_expr->_Next, _If_empty_str->_Next); // intentional ADL
; 3118 :         }
; 3119 :     } else {
; 3120 :         _Node_end_rep* _Node0 = new _Node_end_rep();

  001d7	6a 18		 push	 24			; 00000018H
  001d9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001de	8b f8		 mov	 edi, eax
  001e0	83 c4 04	 add	 esp, 4
  001e3	85 ff		 test	 edi, edi
  001e5	74 2b		 je	 SHORT $LN19@Add_rep

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  001e7	c7 47 04 13 00
	00 00		 mov	 DWORD PTR [edi+4], 19	; 00000013H
  001ee	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  001f5	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  001fc	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 1455 :     _Node_end_rep() noexcept : _Node_base(_N_end_rep) {}

  00203	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_Node_end_rep@std@@6B@

; 1456 : 
; 1457 :     _Node_rep* _Begin_rep = nullptr;

  00209	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 3117 :             swap(_If_expr->_Next, _If_empty_str->_Next); // intentional ADL
; 3118 :         }
; 3119 :     } else {
; 3120 :         _Node_end_rep* _Node0 = new _Node_end_rep();

  00210	eb 02		 jmp	 SHORT $LN20@Add_rep
$LN19@Add_rep:
  00212	33 ff		 xor	 edi, edi
$LN20@Add_rep:

; 3121 :         _Node_rep* _Nx        = new _Node_rep(_Greedy, _Min, _Max, _Node0, _Root->_Loops++);

  00214	6a 28		 push	 40			; 00000028H
  00216	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0021b	8b d8		 mov	 ebx, eax
  0021d	83 c4 04	 add	 esp, 4
  00220	85 db		 test	 ebx, ebx
  00222	74 4d		 je	 SHORT $LN21@Add_rep
  00224	8b 16		 mov	 edx, DWORD PTR [esi]

; 1470 :         : _Node_base(_N_rep, _Greedy ? _Fl_greedy : _Fl_none), _Min(_Min_), _Max(_Max_), _End_rep(_End),

  00226	0f b6 45 10	 movzx	 eax, BYTE PTR __Greedy$[ebp]
  0022a	03 c0		 add	 eax, eax

; 3121 :         _Node_rep* _Nx        = new _Node_rep(_Greedy, _Min, _Max, _Node0, _Root->_Loops++);

  0022c	8b 72 18	 mov	 esi, DWORD PTR [edx+24]
  0022f	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00232	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  00235	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 1470 :         : _Node_base(_N_rep, _Greedy ? _Fl_greedy : _Fl_none), _Min(_Min_), _Max(_Max_), _End_rep(_End),

  00238	8b 45 08	 mov	 eax, DWORD PTR __Min$[ebp]
  0023b	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  0023e	8b 45 0c	 mov	 eax, DWORD PTR __Max$[ebp]

; 1471 :           _Loop_number(_Number) {}

  00241	89 73 20	 mov	 DWORD PTR [ebx+32], esi

; 3121 :         _Node_rep* _Nx        = new _Node_rep(_Greedy, _Min, _Max, _Node0, _Root->_Loops++);

  00244	8b 75 f8	 mov	 esi, DWORD PTR _this$1$[ebp]

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  00247	c7 43 04 12 00
	00 00		 mov	 DWORD PTR [ebx+4], 18	; 00000012H

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  0024e	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  00255	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 1471 :           _Loop_number(_Number) {}

  0025c	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7_Node_rep@std@@6B@
  00262	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  00265	89 7b 1c	 mov	 DWORD PTR [ebx+28], edi

; 1472 : 
; 1473 :     const int _Min;
; 1474 :     const int _Max;
; 1475 :     _Node_end_rep* _End_rep;
; 1476 :     unsigned int _Loop_number;
; 1477 :     int _Simple_loop = -1; // -1 undetermined, 0 contains if/do, 1 simple

  00268	c7 43 24 ff ff
	ff ff		 mov	 DWORD PTR [ebx+36], -1

; 3121 :         _Node_rep* _Nx        = new _Node_rep(_Greedy, _Min, _Max, _Node0, _Root->_Loops++);

  0026f	eb 02		 jmp	 SHORT $LN22@Add_rep
$LN21@Add_rep:
  00271	33 db		 xor	 ebx, ebx
$LN22@Add_rep:

; 3122 :         _Node0->_Begin_rep    = _Nx;
; 3123 :         _Link_node(_Node0);

  00273	57		 push	 edi
  00274	8b ce		 mov	 ecx, esi
  00276	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
  00279	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node

; 3124 :         _Insert_node(_Pos, _Nx);

  0027e	53		 push	 ebx
  0027f	ff 75 fc	 push	 DWORD PTR __Pos$1$[ebp]
  00282	e8 00 00 00 00	 call	 ?_Insert_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@CAXPAV_Node_base@2@0@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Insert_node
  00287	83 c4 08	 add	 esp, 8
$LN6@Add_rep:

; 3126 : }

  0028a	5f		 pop	 edi
  0028b	5e		 pop	 esi
  0028c	5b		 pop	 ebx
  0028d	8b e5		 mov	 esp, ebp
  0028f	5d		 pop	 ebp
  00290	c2 0c 00	 ret	 12			; 0000000cH
?_Add_rep@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXHH_N@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_rep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Else_if@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@0@Z
_TEXT	SEGMENT
__Start$ = 8						; size = 4
__End$ = 12						; size = 4
?_Else_if@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@0@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Else_if, COMDAT
; _this$ = ecx

; 3064 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Else_if(_Node_base* _Start, _Node_base* _End) { // add else node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3065 :     _Node_if* _Parent  = static_cast<_Node_if*>(_Start->_Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Start$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3066 :     _Node_base* _First = _End->_Next;

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __End$[ebp]
  0000c	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  0000f	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]

; 3067 :     _End->_Next        = nullptr;

  00012	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 3068 :     _Node_base* _Last  = _Current;

  00019	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 3069 :     _Current           = _End;

  0001c	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 3070 :     _End->_Next        = nullptr;

  0001f	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 3071 :     _Last->_Next       = _End;

  00026	89 78 0c	 mov	 DWORD PTR [eax+12], edi

; 3072 :     while (_Parent->_Child) {

  00029	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0002c	85 c0		 test	 eax, eax
  0002e	74 09		 je	 SHORT $LN3@Else_if
$LL2@Else_if:

; 3073 :         _Parent = _Parent->_Child;

  00030	8b f0		 mov	 esi, eax
  00032	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00035	85 c0		 test	 eax, eax
  00037	75 f7		 jne	 SHORT $LL2@Else_if
$LN3@Else_if:

; 3074 :     }
; 3075 : 
; 3076 :     _Parent->_Child        = new _Node_if(_End);

  00039	6a 1c		 push	 28			; 0000001cH
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	85 c0		 test	 eax, eax
  00045	74 38		 je	 SHORT $LN5@Else_if

; 1435 :         : _Node_base(_N_if, _Fl_none), _Endif(static_cast<_Node_endif*>(_End)) {}

  00047	89 78 14	 mov	 DWORD PTR [eax+20], edi

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  0004a	c7 40 04 10 00
	00 00		 mov	 DWORD PTR [eax+4], 16	; 00000010H
  00051	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;
; 1332 :     _Node_base* _Prev = nullptr;

  00058	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1435 :         : _Node_base(_N_if, _Fl_none), _Endif(static_cast<_Node_endif*>(_End)) {}

  0005f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_if@std@@6B@

; 1436 : 
; 1437 :     ~_Node_if() noexcept {
; 1438 :         _Node_if* _Cur = _Child;
; 1439 :         while (_Cur) { // destroy branch
; 1440 :             _Node_if* _Tmp = _Cur;
; 1441 :             _Cur           = _Cur->_Child;
; 1442 :             _Tmp->_Child   = nullptr;
; 1443 :             _Destroy_node(_Tmp, _Endif);
; 1444 :         }
; 1445 :     }
; 1446 : 
; 1447 :     _Node_endif* _Endif;
; 1448 :     _Node_if* _Child = nullptr;

  00065	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 3074 :     }
; 3075 : 
; 3076 :     _Parent->_Child        = new _Node_if(_End);

  0006c	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 3077 :     _Parent->_Child->_Next = _First;

  0006f	89 58 0c	 mov	 DWORD PTR [eax+12], ebx

; 3078 :     _First->_Prev          = _Parent->_Child;

  00072	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  0007a	5b		 pop	 ebx

; 3079 : }

  0007b	5d		 pop	 ebp
  0007c	c2 08 00	 ret	 8
$LN5@Else_if:

; 3074 :     }
; 3075 : 
; 3076 :     _Parent->_Child        = new _Node_if(_End);

  0007f	33 c0		 xor	 eax, eax
  00081	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 3078 :     _First->_Prev          = _Parent->_Child;

  00084	5f		 pop	 edi
  00085	89 58 0c	 mov	 DWORD PTR [eax+12], ebx
  00088	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0008b	5e		 pop	 esi
  0008c	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  0008f	5b		 pop	 ebx

; 3079 : }

  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
?_Else_if@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@0@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Else_if
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Begin_if@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@PAV32@@Z
_TEXT	SEGMENT
__Start$ = 8						; size = 4
?_Begin_if@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@PAV32@@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_if, COMDAT
; _this$ = ecx

; 3051 : _Node_base* _Builder<_FwdIt, _Elem, _RxTraits>::_Begin_if(_Node_base* _Start) { // add if node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 3052 :     // append endif node
; 3053 :     _Node_base* _Res = new _Node_endif;

  00005	6a 14		 push	 20			; 00000014H
  00007	8b f9		 mov	 edi, ecx
  00009	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000e	8b f0		 mov	 esi, eax
  00010	83 c4 04	 add	 esp, 4
  00013	85 f6		 test	 esi, esi
  00015	74 24		 je	 SHORT $LN3@Begin_if

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  00017	c7 46 04 11 00
	00 00		 mov	 DWORD PTR [esi+4], 17	; 00000011H
  0001e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  00025	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  0002c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1429 :     _Node_endif() noexcept : _Node_base(_N_endif, _Fl_none) {}

  00033	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_endif@std@@6B@

; 3052 :     // append endif node
; 3053 :     _Node_base* _Res = new _Node_endif;

  00039	eb 02		 jmp	 SHORT $LN4@Begin_if
$LN3@Begin_if:
  0003b	33 f6		 xor	 esi, esi
$LN4@Begin_if:

; 3054 :     _Link_node(_Res);

  0003d	56		 push	 esi
  0003e	8b cf		 mov	 ecx, edi
  00040	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node

; 3055 : 
; 3056 :     // insert if_node
; 3057 :     _Node_if* _Node1 = new _Node_if(_Res);

  00045	6a 1c		 push	 28			; 0000001cH
  00047	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004c	83 c4 04	 add	 esp, 4
  0004f	85 c0		 test	 eax, eax
  00051	74 2e		 je	 SHORT $LN5@Begin_if

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  00053	c7 40 04 10 00
	00 00		 mov	 DWORD PTR [eax+4], 16	; 00000010H
  0005a	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  00061	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  00068	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1435 :         : _Node_base(_N_if, _Fl_none), _Endif(static_cast<_Node_endif*>(_End)) {}

  0006f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_if@std@@6B@
  00075	89 70 14	 mov	 DWORD PTR [eax+20], esi

; 1436 : 
; 1437 :     ~_Node_if() noexcept {
; 1438 :         _Node_if* _Cur = _Child;
; 1439 :         while (_Cur) { // destroy branch
; 1440 :             _Node_if* _Tmp = _Cur;
; 1441 :             _Cur           = _Cur->_Child;
; 1442 :             _Tmp->_Child   = nullptr;
; 1443 :             _Destroy_node(_Tmp, _Endif);
; 1444 :         }
; 1445 :     }
; 1446 : 
; 1447 :     _Node_endif* _Endif;
; 1448 :     _Node_if* _Child = nullptr;

  00078	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 3055 : 
; 3056 :     // insert if_node
; 3057 :     _Node_if* _Node1 = new _Node_if(_Res);

  0007f	eb 02		 jmp	 SHORT $LN6@Begin_if
$LN5@Begin_if:
  00081	33 c0		 xor	 eax, eax
$LN6@Begin_if:

; 3058 :     _Node_base* _Pos = _Start->_Next;
; 3059 :     _Insert_node(_Pos, _Node1);

  00083	8b 4d 08	 mov	 ecx, DWORD PTR __Start$[ebp]
  00086	50		 push	 eax
  00087	ff 71 0c	 push	 DWORD PTR [ecx+12]
  0008a	e8 00 00 00 00	 call	 ?_Insert_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@CAXPAV_Node_base@2@0@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Insert_node
  0008f	83 c4 08	 add	 esp, 8

; 3060 :     return _Res;

  00092	8b c6		 mov	 eax, esi
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi

; 3061 : }

  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?_Begin_if@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@PAV32@@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_if
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_backreference@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Idx$ = 8						; size = 4
?_Add_backreference@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXI@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_backreference, COMDAT
; _this$ = ecx

; 3046 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Add_backreference(unsigned int _Idx) { // add back reference node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3047 :     _Link_node(new _Node_back(_Idx));

  00004	6a 18		 push	 24			; 00000018H
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	74 35		 je	 SHORT $LN3@Add_backre

; 1385 :     explicit _Node_back(unsigned int _Ix) noexcept : _Node_base(_N_back, _Fl_none), _Idx(_Ix) {}

  00014	8b 4d 08	 mov	 ecx, DWORD PTR __Idx$[ebp]
  00017	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3047 :     _Link_node(new _Node_back(_Idx));

  0001a	8b ce		 mov	 ecx, esi
  0001c	50		 push	 eax

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  0001d	c7 40 04 0f 00
	00 00		 mov	 DWORD PTR [eax+4], 15	; 0000000fH
  00024	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  0002b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  00032	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1385 :     explicit _Node_back(unsigned int _Ix) noexcept : _Node_base(_N_back, _Fl_none), _Idx(_Ix) {}

  00039	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_back@std@@6B@

; 3047 :     _Link_node(new _Node_back(_Idx));

  0003f	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
  00044	5e		 pop	 esi

; 3048 : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN3@Add_backre:

; 3047 :     _Link_node(new _Node_back(_Idx));

  00049	33 c0		 xor	 eax, eax
  0004b	8b ce		 mov	 ecx, esi
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
  00053	5e		 pop	 esi

; 3048 : }

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Add_backreference@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXI@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_backreference
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Begin_capture_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@I@Z
_TEXT	SEGMENT
__Idx$ = 8						; size = 4
?_Begin_capture_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@I@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_capture_group, COMDAT
; _this$ = ecx

; 3041 : _Node_base* _Builder<_FwdIt, _Elem, _RxTraits>::_Begin_capture_group(unsigned int _Idx) { // add capture group node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3042 :     return _Link_node(new _Node_capture(_Idx));

  00004	6a 18		 push	 24			; 00000018H
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	74 35		 je	 SHORT $LN3@Begin_capt

; 1378 :     explicit _Node_capture(unsigned int _Ix) noexcept : _Node_base(_N_capture, _Fl_none), _Idx(_Ix) {}

  00014	8b 4d 08	 mov	 ecx, DWORD PTR __Idx$[ebp]
  00017	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3042 :     return _Link_node(new _Node_capture(_Idx));

  0001a	8b ce		 mov	 ecx, esi
  0001c	50		 push	 eax

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  0001d	c7 40 04 0d 00
	00 00		 mov	 DWORD PTR [eax+4], 13	; 0000000dH
  00024	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  0002b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  00032	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1378 :     explicit _Node_capture(unsigned int _Ix) noexcept : _Node_base(_N_capture, _Fl_none), _Idx(_Ix) {}

  00039	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_capture@std@@6B@

; 3042 :     return _Link_node(new _Node_capture(_Idx));

  0003f	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
  00044	5e		 pop	 esi

; 3043 : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN3@Begin_capt:

; 3042 :     return _Link_node(new _Node_capture(_Idx));

  00049	33 c0		 xor	 eax, eax
  0004b	8b ce		 mov	 ecx, esi
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
  00053	5e		 pop	 esi

; 3043 : }

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Begin_capture_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@I@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_capture_group
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_End_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z
_TEXT	SEGMENT
__Nx$ = 8						; size = 4
?_End_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_assert_group, COMDAT
; _this$ = ecx

; 3035 : void _Builder<_FwdIt, _Elem, _RxTraits>::_End_assert_group(_Node_base* _Nx) { // add end of assert node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3036 :     _End_group(_Nx);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Nx$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?_End_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_group

; 3037 :     _Current = _Nx;

  00010	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00013	5f		 pop	 edi
  00014	5e		 pop	 esi

; 3038 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_End_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_assert_group
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\memory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\memory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\memory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@_N@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Neg$ = 8						; size = 1
__Node1_unique$ = 8					; size = 4
?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@_N@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_assert_group, COMDAT
; _this$ = ecx

; 3023 : _Node_base* _Builder<_FwdIt, _Elem, _RxTraits>::_Begin_assert_group(const bool _Neg) { // add assert node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx

; 3024 :     auto _Node1_unique   = _STD make_unique<_Node_assert>(_Neg ? _N_neg_assert : _N_assert);

  00028	0f b6 7d 08	 movzx	 edi, BYTE PTR __Neg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\memory

; 3594 :     return unique_ptr<_Ty>(new _Ty(_STD forward<_Types>(_Args)...));

  0002c	6a 18		 push	 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3024 :     auto _Node1_unique   = _STD make_unique<_Node_assert>(_Neg ? _N_neg_assert : _N_assert);

  0002e	83 c7 0a	 add	 edi, 10			; 0000000aH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\memory

; 3594 :     return unique_ptr<_Ty>(new _Ty(_STD forward<_Types>(_Args)...));

  00031	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00036	8b f0		 mov	 esi, eax
  00038	83 c4 04	 add	 esp, 4
  0003b	85 f6		 test	 esi, esi
  0003d	74 27		 je	 SHORT $LN8@Begin_asse
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  0003f	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  00049	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  00050	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1367 :     explicit _Node_assert(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Node_base(_Ty, _Fl) {}

  00057	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_assert@std@@6B@

; 1368 : 
; 1369 :     ~_Node_assert() noexcept {
; 1370 :         _Destroy_node(_Child);
; 1371 :     }
; 1372 : 
; 1373 :     _Node_base* _Child = nullptr;

  0005d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\memory

; 3594 :     return unique_ptr<_Ty>(new _Ty(_STD forward<_Types>(_Args)...));

  00064	eb 02		 jmp	 SHORT $LN9@Begin_asse
$LN8@Begin_asse:
  00066	33 f6		 xor	 esi, esi
$LN9@Begin_asse:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1527 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00068	89 75 08	 mov	 DWORD PTR __Node1_unique$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 3025 :     _Node_base* _Node2   = new _Node_base(_N_nop);

  0006b	6a 14		 push	 20			; 00000014H
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00074	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00079	8b f8		 mov	 edi, eax
  0007b	83 c4 04	 add	 esp, 4
  0007e	85 ff		 test	 edi, edi
  00080	74 24		 je	 SHORT $LN3@Begin_asse

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  00082	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_Node_base@std@@6B@
  00088	c7 47 04 01 00
	00 00		 mov	 DWORD PTR [edi+4], 1
  0008f	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  00096	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  0009d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3025 :     _Node_base* _Node2   = new _Node_base(_N_nop);

  000a4	eb 02		 jmp	 SHORT $LN4@Begin_asse
$LN3@Begin_asse:
  000a6	33 ff		 xor	 edi, edi
$LN4@Begin_asse:

; 3026 :     _Node_assert* _Node1 = _Node1_unique.release();
; 3027 :     _Link_node(_Node1);

  000a8	56		 push	 esi
  000a9	8b cb		 mov	 ecx, ebx
  000ab	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node

; 3028 :     _Node1->_Child = _Node2;

  000b0	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 3029 :     _Node2->_Prev  = _Node1;
; 3030 :     _Current       = _Node2;
; 3031 :     return _Node1;

  000b3	8b c6		 mov	 eax, esi
  000b5	89 77 10	 mov	 DWORD PTR [edi+16], esi
  000b8	89 7b 04	 mov	 DWORD PTR [ebx+4], edi

; 3032 : }

  000bb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000be	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c5	59		 pop	 ecx
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@_N@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR __Node1_unique$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Node_assert@std@@U?$default_delete@V_Node_assert@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Node_assert,std::default_delete<std::_Node_assert> >::~unique_ptr<std::_Node_assert,std::default_delete<std::_Node_assert> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@_N@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@_N@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@_N@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_assert_group
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_End_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z
_TEXT	SEGMENT
__Back$ = 8						; size = 4
?_End_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_group, COMDAT
; _this$ = ecx

; 3009 : void _Builder<_FwdIt, _Elem, _RxTraits>::_End_group(_Node_base* _Back) { // add end of group node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 3010 :     _Node_type _Elt;
; 3011 :     if (_Back->_Kind == _N_group) {

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Back$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000e	83 f8 08	 cmp	 eax, 8
  00011	75 05		 jne	 SHORT $LN2@End_group

; 3012 :         _Elt = _N_end_group;

  00013	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00016	eb 14		 jmp	 SHORT $LN5@End_group
$LN2@End_group:

; 3013 :     } else if (_Back->_Kind == _N_assert || _Back->_Kind == _N_neg_assert) {

  00018	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0001b	74 0a		 je	 SHORT $LN6@End_group

; 3015 :     } else {
; 3016 :         _Elt = _N_end_capture;

  0001d	be 0e 00 00 00	 mov	 esi, 14			; 0000000eH
  00022	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00025	75 05		 jne	 SHORT $LN5@End_group
$LN6@End_group:

; 3014 :         _Elt = _N_end_assert;

  00027	be 0c 00 00 00	 mov	 esi, 12			; 0000000cH
$LN5@End_group:

; 3017 :     }
; 3018 : 
; 3019 :     _Link_node(new _Node_end_group(_Elt, _Fl_none, _Back));

  0002c	6a 18		 push	 24			; 00000018H
  0002e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00033	83 c4 04	 add	 esp, 4
  00036	85 c0		 test	 eax, eax
  00038	74 30		 je	 SHORT $LN8@End_group
  0003a	50		 push	 eax
  0003b	8b cb		 mov	 ecx, ebx

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  0003d	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00040	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  00047	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  0004e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1360 :     _Node_end_group(_Node_type _Ty, _Node_flags _Fl, _Node_base* _Bx) noexcept : _Node_base(_Ty, _Fl), _Back(_Bx) {}

  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Node_end_group@std@@6B@
  0005b	89 78 14	 mov	 DWORD PTR [eax+20], edi

; 3017 :     }
; 3018 : 
; 3019 :     _Link_node(new _Node_end_group(_Elt, _Fl_none, _Back));

  0005e	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx

; 3020 : }

  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
$LN8@End_group:

; 3017 :     }
; 3018 : 
; 3019 :     _Link_node(new _Node_end_group(_Elt, _Fl_none, _Back));

  0006a	33 c0		 xor	 eax, eax
  0006c	8b cb		 mov	 ecx, ebx
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx

; 3020 : }

  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
?_End_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_group
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Begin_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@XZ
_TEXT	SEGMENT
?_Begin_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@XZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_group, COMDAT
; _this$ = ecx

; 3005 :     return _New_node(_N_group);

  00000	6a 08		 push	 8
  00002	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@W4_Node_type@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_New_node

; 3006 : }

  00007	c3		 ret	 0
?_Begin_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@XZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_group
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_coll@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Diff$ = 16						; size = 4
?_Add_coll@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_coll, COMDAT
; _this$ = ecx

; 2996 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Add_coll(_FwdIt _First, _FwdIt _Last, _Difft _Diff) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2997 :     // add collation element to bracket expression
; 2998 :     _Node_class<_Elem, _RxTraits>* _Node = static_cast<_Node_class<_Elem, _RxTraits>*>(_Current);
; 2999 :     _Sequence<_Elem>** _Cur              = _STD addressof(_Node->_Coll);

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	83 c0 14	 add	 eax, 20			; 00000014H

; 3000 :     _Char_to_elts(_First, _Last, _Diff, _Cur);

  00009	50		 push	 eax
  0000a	ff 75 10	 push	 DWORD PTR __Diff$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Char_to_elts@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXPBD0HPAPAU?$_Sequence@D@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Char_to_elts

; 3001 : }

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
?_Add_coll@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_coll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -76					; size = 4
__Ch$1$ = -72						; size = 4
__Ex$2 = -66						; size = 1
$T3 = -65						; size = 1
$T4 = -64						; size = 24
__Str$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Diff$ = 16						; size = 4
?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_equiv, COMDAT
; _this$ = ecx

; 2974 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Add_equiv(_FwdIt _First, _FwdIt _Last, _Difft _Diff) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 b4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  0002f	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]

; 2975 :     // add elements of equivalence class to bracket expression
; 2976 :     _Node_class<_Elem, _RxTraits>* _Node = static_cast<_Node_class<_Elem, _RxTraits>*>(_Current);
; 2977 :     typename _RxTraits::string_type _Str = _Traits.transform_primary(_First, _Last);

  00035	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00038	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0003b	50		 push	 eax
  0003c	52		 push	 edx
  0003d	8d 45 d8	 lea	 eax, DWORD PTR __Str$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??$transform_primary@PBD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBD0@Z ; std::_Regex_traits<char>::transform_primary<char const *>

; 2978 :     for (unsigned int _Ch = 0; _Ch < _Bmp_max; ++_Ch) { // add elements

  00046	33 c0		 xor	 eax, eax
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	89 45 b8	 mov	 DWORD PTR __Ch$1$[ebp], eax
$LL4@Add_equiv:

; 2981 :             == _Str) { // insert equivalent character into bitmap

  00052	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00055	88 45 be	 mov	 BYTE PTR __Ex$2[ebp], al
  00058	8d 45 bf	 lea	 eax, DWORD PTR __Ex$2[ebp+1]
  0005b	50		 push	 eax
  0005c	8d 45 be	 lea	 eax, DWORD PTR __Ex$2[ebp]
  0005f	50		 push	 eax
  00060	8d 45 c0	 lea	 eax, DWORD PTR $T4[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??$transform_primary@PAD@?$_Regex_traits@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAD0@Z ; std::_Regex_traits<char>::transform_primary<char *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00069	83 7d ec 0f	 cmp	 DWORD PTR __Str$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  0006d	8d 75 d8	 lea	 esi, DWORD PTR __Str$[ebp]

; 426  :         if (_Large_mode_engaged()) {

  00070	0f 47 75 d8	 cmova	 esi, DWORD PTR __Str$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  00074	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 2812 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00078	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  0007b	76 02		 jbe	 SHORT $LN27@Add_equiv

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
$LN27@Add_equiv:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 578  :     if (_Left_size != _Right_size) {

  0007f	3b 55 e8	 cmp	 edx, DWORD PTR __Str$[ebp+16]
  00082	74 06		 je	 SHORT $LN34@Add_equiv

; 579  :         return false;

  00084	c6 45 bf 00	 mov	 BYTE PTR $T3[ebp], 0
  00088	eb 68		 jmp	 SHORT $LN33@Add_equiv
$LN34@Add_equiv:

; 580  :     }
; 581  : 
; 582  :     if (_Left_size == 0u) {

  0008a	85 d2		 test	 edx, edx
  0008c	75 06		 jne	 SHORT $LN35@Add_equiv

; 583  :         return true;

  0008e	c6 45 bf 01	 mov	 BYTE PTR $T3[ebp], 1
  00092	eb 5e		 jmp	 SHORT $LN33@Add_equiv
$LN35@Add_equiv:

; 411  :         return __builtin_memcmp(_First1, _First2, _Count);

  00094	83 ea 04	 sub	 edx, 4
  00097	72 18		 jb	 SHORT $LN129@Add_equiv
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL130@Add_equiv:
  000a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a2	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  000a4	75 10		 jne	 SHORT $LN128@Add_equiv
  000a6	83 c0 04	 add	 eax, 4
  000a9	83 c6 04	 add	 esi, 4
  000ac	83 ea 04	 sub	 edx, 4
  000af	73 ef		 jae	 SHORT $LL130@Add_equiv
$LN129@Add_equiv:
  000b1	83 fa fc	 cmp	 edx, -4			; fffffffcH
  000b4	74 34		 je	 SHORT $LN127@Add_equiv
$LN128@Add_equiv:
  000b6	8a 08		 mov	 cl, BYTE PTR [eax]
  000b8	3a 0e		 cmp	 cl, BYTE PTR [esi]
  000ba	75 27		 jne	 SHORT $LN131@Add_equiv
  000bc	83 fa fd	 cmp	 edx, -3			; fffffffdH
  000bf	74 29		 je	 SHORT $LN127@Add_equiv
  000c1	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000c4	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  000c7	75 1a		 jne	 SHORT $LN131@Add_equiv
  000c9	83 fa fe	 cmp	 edx, -2			; fffffffeH
  000cc	74 1c		 je	 SHORT $LN127@Add_equiv
  000ce	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  000d1	3a 4e 02	 cmp	 cl, BYTE PTR [esi+2]
  000d4	75 0d		 jne	 SHORT $LN131@Add_equiv
  000d6	83 fa ff	 cmp	 edx, -1
  000d9	74 0f		 je	 SHORT $LN127@Add_equiv
  000db	8a 40 03	 mov	 al, BYTE PTR [eax+3]
  000de	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  000e1	74 07		 je	 SHORT $LN127@Add_equiv
$LN131@Add_equiv:
  000e3	1b c0		 sbb	 eax, eax
  000e5	83 c8 01	 or	 eax, 1
  000e8	eb 02		 jmp	 SHORT $LN132@Add_equiv
$LN127@Add_equiv:
  000ea	33 c0		 xor	 eax, eax
$LN132@Add_equiv:

; 586  :     return _Traits::compare(_Left, _Right, _Left_size) == 0;

  000ec	85 c0		 test	 eax, eax
  000ee	0f 94 45 bf	 sete	 BYTE PTR $T3[ebp]
$LN33@Add_equiv:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000f2	8b 4d d4	 mov	 ecx, DWORD PTR $T4[ebp+20]
  000f5	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000f8	76 2c		 jbe	 SHORT $LN61@Add_equiv
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fa	8b 55 c0	 mov	 edx, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000fd	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fe	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00100	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00106	72 14		 jb	 SHORT $LN72@Add_equiv

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00108	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0010b	83 c1 23	 add	 ecx, 35			; 00000023H
  0010e	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00110	83 c0 fc	 add	 eax, -4			; fffffffcH
  00113	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00116	0f 87 b1 00 00
	00		 ja	 $LN69@Add_equiv
$LN72@Add_equiv:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0011c	51		 push	 ecx
  0011d	52		 push	 edx
  0011e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00123	83 c4 08	 add	 esp, 8
$LN61@Add_equiv:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2981 :             == _Str) { // insert equivalent character into bitmap

  00126	80 7d bf 00	 cmp	 BYTE PTR $T3[ebp], 0
  0012a	74 3e		 je	 SHORT $LN2@Add_equiv

; 2982 :             if (!_Node->_Small) {

  0012c	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0012f	85 c9		 test	 ecx, ecx
  00131	75 21		 jne	 SHORT $LN6@Add_equiv

; 2983 :                 _Node->_Small = new _Bitmap;

  00133	6a 20		 push	 32			; 00000020H
  00135	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0013a	8b c8		 mov	 ecx, eax
  0013c	83 c4 04	 add	 esp, 4
  0013f	85 c9		 test	 ecx, ecx
  00141	74 0c		 je	 SHORT $LN9@Add_equiv
  00143	0f 57 c0	 xorps	 xmm0, xmm0

; 1313 :     unsigned char _Chrs[_Bmp_size]{};

  00146	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00149	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0

; 2983 :                 _Node->_Small = new _Bitmap;

  0014d	eb 02		 jmp	 SHORT $LN10@Add_equiv
$LN9@Add_equiv:
  0014f	33 c9		 xor	 ecx, ecx
$LN10@Add_equiv:
  00151	89 4f 18	 mov	 DWORD PTR [edi+24], ecx
$LN6@Add_equiv:

; 1302 :         _Chrs[_Wide >> _Bmp_shift] |= (1 << (_Wide & _Bmp_mask));

  00154	8b 55 b8	 mov	 edx, DWORD PTR __Ch$1$[ebp]
  00157	8b 45 b8	 mov	 eax, DWORD PTR __Ch$1$[ebp]
  0015a	c1 ea 03	 shr	 edx, 3
  0015d	83 e0 07	 and	 eax, 7
  00160	03 d1		 add	 edx, ecx
  00162	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00165	0f ab c1	 bts	 ecx, eax
  00168	88 0a		 mov	 BYTE PTR [edx], cl
$LN2@Add_equiv:

; 2978 :     for (unsigned int _Ch = 0; _Ch < _Bmp_max; ++_Ch) { // add elements

  0016a	8b 45 b8	 mov	 eax, DWORD PTR __Ch$1$[ebp]
  0016d	40		 inc	 eax
  0016e	89 45 b8	 mov	 DWORD PTR __Ch$1$[ebp], eax
  00171	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00176	73 08		 jae	 SHORT $LN124@Add_equiv
  00178	8b 75 b4	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0017b	e9 d2 fe ff ff	 jmp	 $LL4@Add_equiv
$LN124@Add_equiv:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00180	8b 4d ec	 mov	 ecx, DWORD PTR __Str$[ebp+20]
  00183	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00186	76 28		 jbe	 SHORT $LN105@Add_equiv
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00188	8b 55 d8	 mov	 edx, DWORD PTR __Str$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0018b	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018c	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0018e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00194	72 10		 jb	 SHORT $LN116@Add_equiv

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00196	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00199	83 c1 23	 add	 ecx, 35			; 00000023H
  0019c	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0019e	83 c0 fc	 add	 eax, -4			; fffffffcH
  001a1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001a4	77 27		 ja	 SHORT $LN69@Add_equiv
$LN116@Add_equiv:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001a6	51		 push	 ecx
  001a7	52		 push	 edx
  001a8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001ad	83 c4 08	 add	 esp, 8
$LN105@Add_equiv:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2993 : }

  001b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ba	59		 pop	 ecx
  001bb	5f		 pop	 edi
  001bc	5e		 pop	 esi
  001bd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c0	33 cd		 xor	 ecx, ebp
  001c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c2 0c 00	 ret	 12			; 0000000cH
$LN69@Add_equiv:
  001cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN134@Add_equiv:
  001d2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_equiv
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXF_N@Z
_TEXT	SEGMENT
__Cl$ = 8						; size = 2
__Negate$ = 12						; size = 1
?_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXF_N@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_named_class, COMDAT
; _this$ = ecx

; 2939 :     bool _Negate) { // add contents of named class to bracket expression

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2940 :     _Node_class<_Elem, _RxTraits>* _Node = static_cast<_Node_class<_Elem, _RxTraits>*>(_Current);
; 2941 :     _Add_elts(_Node, _Cl, _Negate);

  00003	ff 75 0c	 push	 DWORD PTR __Negate$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Cl$[ebp]
  00009	ff 71 04	 push	 DWORD PTR [ecx+4]
  0000c	e8 00 00 00 00	 call	 ?_Add_elts@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXPAV?$_Node_class@DV?$regex_traits@D@std@@@2@F_N@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_elts

; 2942 :     if (_Bmp_max < static_cast<unsigned int>(_STD _Max_limit<_Elem>())) {
; 2943 :         _Node->_Classes = static_cast<_Regex_traits_base::char_class_type>(_Node->_Classes | _Cl);
; 2944 :     }
; 2945 : }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
?_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXF_N@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_named_class
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_range@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXDD@Z
_TEXT	SEGMENT
__Arg0$ = 8						; size = 1
__Node$1$ = 8						; size = 4
__Arg1$ = 12						; size = 1
?_Add_range@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXDD@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_range, COMDAT
; _this$ = ecx

; 2885 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Add_range(_Elem _Arg0, _Elem _Arg1) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  00008	f7 43 08 00 01
	00 00		 test	 DWORD PTR [ebx+8], 256	; 00000100H

; 2886 :     // add character range to set
; 2887 :     unsigned int _Ex0;
; 2888 :     unsigned int _Ex1;
; 2889 :     if (_Flags & regex_constants::icase) { // change to lowercase range

  0000f	74 28		 je	 SHORT $LN8@Add_range

; 301  :         return _Getctype()->tolower(_Ch);

  00011	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  00014	ff 75 08	 push	 DWORD PTR __Arg0$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 301  :         return _Getctype()->tolower(_Ch);

  00017	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0001f	ff d0		 call	 eax
  00021	ff 75 0c	 push	 DWORD PTR __Arg1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2890 :         _Ex0 = static_cast<unsigned int>(_Traits.translate_nocase(_Arg0));

  00024	0f be f0	 movsx	 esi, al

; 301  :         return _Getctype()->tolower(_Ch);

  00027	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  0002a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  0002d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00032	ff d0		 call	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2891 :         _Ex1 = static_cast<unsigned int>(_Traits.translate_nocase(_Arg1));

  00034	0f be f8	 movsx	 edi, al

; 2892 :     } else {

  00037	eb 08		 jmp	 SHORT $LN9@Add_range
$LN8@Add_range:

; 2893 :         _Ex0 = static_cast<typename _RxTraits::_Uelem>(_Arg0);

  00039	0f b6 75 08	 movzx	 esi, BYTE PTR __Arg0$[ebp]

; 2894 :         _Ex1 = static_cast<typename _RxTraits::_Uelem>(_Arg1);

  0003d	0f b6 7d 0c	 movzx	 edi, BYTE PTR __Arg1$[ebp]
$LN9@Add_range:

; 2895 :     }
; 2896 : 
; 2897 :     _Node_class<_Elem, _RxTraits>* _Node = static_cast<_Node_class<_Elem, _RxTraits>*>(_Current);

  00041	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00044	89 45 08	 mov	 DWORD PTR __Node$1$[ebp], eax

; 2898 :     for (; _Ex0 <= _Ex1 && _Ex1 < _Get_bmax(); ++_Ex0) { // set a bit

  00047	3b f7		 cmp	 esi, edi
  00049	0f 87 c9 00 00
	00		 ja	 $LN13@Add_range
  0004f	90		 npad	 1
$LL4@Add_range:
  00050	8b cb		 mov	 ecx, ebx
  00052	e8 00 00 00 00	 call	 ?_Get_bmax@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABEIXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Get_bmax
  00057	3b f8		 cmp	 edi, eax
  00059	73 4e		 jae	 SHORT $LN3@Add_range

; 2899 :         if (!_Node->_Small) {

  0005b	8b 45 08	 mov	 eax, DWORD PTR __Node$1$[ebp]
  0005e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00061	85 c9		 test	 ecx, ecx
  00063	75 24		 jne	 SHORT $LN10@Add_range

; 2900 :             _Node->_Small = new _Bitmap;

  00065	6a 20		 push	 32			; 00000020H
  00067	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006c	8b c8		 mov	 ecx, eax
  0006e	83 c4 04	 add	 esp, 4
  00071	85 c9		 test	 ecx, ecx
  00073	74 0c		 je	 SHORT $LN16@Add_range
  00075	0f 57 c0	 xorps	 xmm0, xmm0

; 1313 :     unsigned char _Chrs[_Bmp_size]{};

  00078	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0007b	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0

; 2900 :             _Node->_Small = new _Bitmap;

  0007f	eb 02		 jmp	 SHORT $LN17@Add_range
$LN16@Add_range:
  00081	33 c9		 xor	 ecx, ecx
$LN17@Add_range:
  00083	8b 45 08	 mov	 eax, DWORD PTR __Node$1$[ebp]
  00086	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN10@Add_range:

; 1302 :         _Chrs[_Wide >> _Bmp_shift] |= (1 << (_Wide & _Bmp_mask));

  00089	8b d6		 mov	 edx, esi
  0008b	8b c6		 mov	 eax, esi
  0008d	c1 ea 03	 shr	 edx, 3
  00090	83 e0 07	 and	 eax, 7
  00093	03 d1		 add	 edx, ecx

; 2898 :     for (; _Ex0 <= _Ex1 && _Ex1 < _Get_bmax(); ++_Ex0) { // set a bit

  00095	46		 inc	 esi

; 1302 :         _Chrs[_Wide >> _Bmp_shift] |= (1 << (_Wide & _Bmp_mask));

  00096	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00099	0f ab c1	 bts	 ecx, eax
  0009c	88 0a		 mov	 BYTE PTR [edx], cl

; 2898 :     for (; _Ex0 <= _Ex1 && _Ex1 < _Get_bmax(); ++_Ex0) { // set a bit

  0009e	3b f7		 cmp	 esi, edi
  000a0	76 ae		 jbe	 SHORT $LL4@Add_range

; 2917 :         }
; 2918 :     }
; 2919 : }

  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	5d		 pop	 ebp
  000a6	c2 08 00	 ret	 8
$LN3@Add_range:

; 2901 :         }
; 2902 : 
; 2903 :         _Node->_Small->_Mark(_Ex0);
; 2904 :     }
; 2905 :     if (_Ex1 >= _Ex0) {

  000a9	3b fe		 cmp	 edi, esi
  000ab	72 6b		 jb	 SHORT $LN13@Add_range

; 2906 :         if (_Ex1 - _Ex0 < _Get_tmax()) {

  000ad	8b cb		 mov	 ecx, ebx
  000af	e8 00 00 00 00	 call	 ?_Get_tmax@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABEIXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Get_tmax
  000b4	8b cf		 mov	 ecx, edi
  000b6	2b ce		 sub	 ecx, esi
  000b8	3b c8		 cmp	 ecx, eax
  000ba	73 18		 jae	 SHORT $LN12@Add_range
  000bc	0f 1f 40 00	 npad	 4
$LL7@Add_range:

; 2907 :             for (; _Ex0 <= _Ex1; ++_Ex0) {
; 2908 :                 _Add_char_to_array(static_cast<_Elem>(_Ex0));

  000c0	56		 push	 esi
  000c1	8b cb		 mov	 ecx, ebx
  000c3	e8 00 00 00 00	 call	 ?_Add_char_to_array@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_array
  000c8	46		 inc	 esi
  000c9	3b f7		 cmp	 esi, edi
  000cb	76 f3		 jbe	 SHORT $LL7@Add_range

; 2917 :         }
; 2918 :     }
; 2919 : }

  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
$LN12@Add_range:

; 2909 :             }
; 2910 :         } else { // store remaining range as pair
; 2911 :             if (!_Node->_Ranges) {

  000d4	8b 5d 08	 mov	 ebx, DWORD PTR __Node$1$[ebp]
  000d7	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
  000da	85 c0		 test	 eax, eax
  000dc	75 29		 jne	 SHORT $LN14@Add_range

; 2912 :                 _Node->_Ranges = new _Buf<_Elem>;

  000de	6a 0c		 push	 12			; 0000000cH
  000e0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000e5	83 c4 04	 add	 esp, 4
  000e8	85 c0		 test	 eax, eax
  000ea	74 16		 je	 SHORT $LN18@Add_range

; 1290 :     unsigned int _Sz    = 0;

  000ec	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1291 :     unsigned int _Nchrs = 0;

  000f2	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1292 :     _Elem* _Chrs        = nullptr;

  000f9	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 2912 :                 _Node->_Ranges = new _Buf<_Elem>;

  00100	eb 02		 jmp	 SHORT $LN19@Add_range
$LN18@Add_range:
  00102	33 c0		 xor	 eax, eax
$LN19@Add_range:
  00104	89 43 20	 mov	 DWORD PTR [ebx+32], eax
$LN14@Add_range:

; 2913 :             }
; 2914 : 
; 2915 :             _Node->_Ranges->_Insert(static_cast<_Elem>(_Ex0));

  00107	56		 push	 esi
  00108	8b c8		 mov	 ecx, eax
  0010a	e8 00 00 00 00	 call	 ?_Insert@?$_Buf@D@std@@QAEXD@Z ; std::_Buf<char>::_Insert

; 2916 :             _Node->_Ranges->_Insert(static_cast<_Elem>(_Ex1));

  0010f	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  00112	57		 push	 edi
  00113	e8 00 00 00 00	 call	 ?_Insert@?$_Buf@D@std@@QAEXD@Z ; std::_Buf<char>::_Insert
$LN13@Add_range:

; 2917 :         }
; 2918 :     }
; 2919 : }

  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	5d		 pop	 ebp
  0011c	c2 08 00	 ret	 8
?_Add_range@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXDD@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_class, COMDAT
; _this$ = ecx

; 2876 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Add_char_to_class(_Elem _Ch) { // add character to bracket expression

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2879 :     } else {
; 2880 :         _Add_char_to_array(_Ch);
; 2881 :     }
; 2882 : }

  00003	5d		 pop	 ebp

; 2877 :     if (static_cast<typename _RxTraits::_Uelem>(_Ch) < _Bmp_max) {
; 2878 :         _Add_char_to_bitmap(_Ch);

  00004	e9 00 00 00 00	 jmp	 ?_Add_char_to_bitmap@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_bitmap
?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_class
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Add_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_class, COMDAT
; _this$ = ecx

; 2842 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Add_class() { // add bracket expression node

  00000	56		 push	 esi

; 2843 :     _Link_node(new _Node_class<_Elem, _RxTraits>);

  00001	6a 2c		 push	 44			; 0000002cH
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
  0000d	85 c0		 test	 eax, eax
  0000f	74 51		 je	 SHORT $LN3@Add_class

; 1423 :     typename _RxTraits::char_class_type _Classes{};

  00011	33 c9		 xor	 ecx, ecx

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  00013	c7 40 04 07 00
	00 00		 mov	 DWORD PTR [eax+4], 7

; 1423 :     typename _RxTraits::char_class_type _Classes{};

  0001a	66 89 48 24	 mov	 WORD PTR [eax+36], cx

; 1424 :     _Sequence<_Elem>* _Equiv = nullptr;

  0001e	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 2843 :     _Link_node(new _Node_class<_Elem, _RxTraits>);

  00021	8b ce		 mov	 ecx, esi
  00023	50		 push	 eax

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  00024	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  0002b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  00032	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1401 :     explicit _Node_class(_Node_type _Ty = _N_class, _Node_flags _Fl = _Fl_none) noexcept : _Node_base(_Ty, _Fl) {}

  00039	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$_Node_class@DV?$regex_traits@D@std@@@std@@6B@

; 1402 : 
; 1403 :     ~_Node_class() noexcept {
; 1404 :         _Tidy(_Coll);
; 1405 :         delete _Small;
; 1406 :         delete _Large;
; 1407 :         delete _Ranges;
; 1408 :         _Tidy(_Equiv);
; 1409 :     }
; 1410 : 
; 1411 :     void _Tidy(_Sequence<_Elem>* _Head) noexcept { // clean up a list of sequences
; 1412 :         while (_Head) { // delete the head of the list
; 1413 :             _Sequence<_Elem>* _Temp = _Head;
; 1414 :             _Head                   = _Head->_Next;
; 1415 :             delete _Temp;
; 1416 :         }
; 1417 :     }
; 1418 : 
; 1419 :     _Sequence<_Elem>* _Coll = nullptr;

  0003f	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1420 :     _Bitmap* _Small         = nullptr;

  00046	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 1421 :     _Buf<_Elem>* _Large     = nullptr;

  0004d	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 1422 :     _Buf<_Elem>* _Ranges    = nullptr;

  00054	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 2843 :     _Link_node(new _Node_class<_Elem, _RxTraits>);

  0005b	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
  00060	5e		 pop	 esi

; 2844 : }

  00061	c3		 ret	 0
$LN3@Add_class:

; 2843 :     _Link_node(new _Node_class<_Elem, _RxTraits>);

  00062	33 c0		 xor	 eax, eax
  00064	8b ce		 mov	 ecx, esi
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?_Link_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Link_node
  0006c	5e		 pop	 esi

; 2844 : }

  0006d	c3		 ret	 0
?_Add_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_class
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_char@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
__Len$1$ = 8						; size = 4
?_Add_char@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char, COMDAT
; _this$ = ecx

; 2826 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Add_char(_Elem _Ch) { // append character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 2827 :     if (_Current->_Kind != _N_str || (_Current->_Flags & _Fl_final)) {

  00008	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000b	83 78 04 06	 cmp	 DWORD PTR [eax+4], 6
  0000f	75 06		 jne	 SHORT $LN3@Add_char

; 1209 : _BITMASK_OPS(_EMPTY_ARGUMENT, _Node_flags)

  00011	f6 40 08 04	 test	 BYTE PTR [eax+8], 4

; 2827 :     if (_Current->_Kind != _N_str || (_Current->_Flags & _Fl_final)) {

  00015	74 05		 je	 SHORT $LN2@Add_char
$LN3@Add_char:

; 2828 :         _Add_str_node();

  00017	e8 00 00 00 00	 call	 ?_Add_str_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_str_node
$LN2@Add_char:

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  0001c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001f	a9 00 01 00 00	 test	 eax, 256		; 00000100H

; 2829 :     }
; 2830 : 
; 2831 :     if (_Flags & regex_constants::icase) {

  00024	74 14		 je	 SHORT $LN4@Add_char

; 301  :         return _Getctype()->tolower(_Ch);

  00026	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  00029	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 301  :         return _Getctype()->tolower(_Ch);

  0002c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2734 :         return do_tolower(_Ch);

  0002f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00031	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00034	ff d0		 call	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2832 :         _Ch = _Traits.translate_nocase(_Ch);

  00036	8a d8		 mov	 bl, al
  00038	eb 19		 jmp	 SHORT $LN6@Add_char
$LN4@Add_char:

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  0003a	a9 00 08 00 00	 test	 eax, 2048		; 00000800H

; 2833 :     } else if (_Flags & regex_constants::collate) {

  0003f	74 0f		 je	 SHORT $LN31@Add_char

; 2834 :         _Ch = _Traits.translate(_Ch);

  00041	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00044	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00047	e8 00 00 00 00	 call	 ?translate@?$_Regex_traits@D@std@@QBEDD@Z ; std::_Regex_traits<char>::translate
  0004c	8a d8		 mov	 bl, al
  0004e	eb 03		 jmp	 SHORT $LN6@Add_char
$LN31@Add_char:

; 2833 :     } else if (_Flags & regex_constants::collate) {

  00050	8a 5d 08	 mov	 bl, BYTE PTR __Ch$[ebp]
$LN6@Add_char:

; 2835 :     }
; 2836 : 
; 2837 :     _Node_str<_Elem>* _Node = static_cast<_Node_str<_Elem>*>(_Current);
; 2838 :     _Node->_Data._Insert(_Ch);

  00053	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 1261 :         if (_Sz <= _Nchrs) {

  00056	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00059	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  0005c	77 1f		 ja	 SHORT $LN30@Add_char

; 1262 :             _Expand(_Nchrs + _Buf_incr);

  0005e	83 c0 10	 add	 eax, 16			; 00000010H

; 1281 :         _Elem* _Tmp = static_cast<_Elem*>(_CSTD realloc(_Chrs, _Get_size_of_n<sizeof(_Elem)>(_Len)));

  00061	50		 push	 eax
  00062	ff 76 1c	 push	 DWORD PTR [esi+28]

; 1262 :             _Expand(_Nchrs + _Buf_incr);

  00065	89 45 08	 mov	 DWORD PTR __Len$1$[ebp], eax

; 1281 :         _Elem* _Tmp = static_cast<_Elem*>(_CSTD realloc(_Chrs, _Get_size_of_n<sizeof(_Elem)>(_Len)));

  00068	e8 00 00 00 00	 call	 _realloc
  0006d	83 c4 08	 add	 esp, 8

; 1282 :         if (!_Tmp) {

  00070	85 c0		 test	 eax, eax
  00072	74 1c		 je	 SHORT $LN39@Add_char

; 1284 :         }
; 1285 : 
; 1286 :         _Chrs = _Tmp;

  00074	89 46 1c	 mov	 DWORD PTR [esi+28], eax

; 1287 :         _Sz   = _Len;

  00077	8b 45 08	 mov	 eax, DWORD PTR __Len$1$[ebp]
  0007a	89 46 14	 mov	 DWORD PTR [esi+20], eax
$LN30@Add_char:

; 1265 :         _Chrs[_Nchrs++] = _Ch;

  0007d	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00080	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 2839 : }

  00083	5f		 pop	 edi

; 1265 :         _Chrs[_Nchrs++] = _Ch;

  00084	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  00087	ff 46 18	 inc	 DWORD PTR [esi+24]

; 2839 : }

  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN39@Add_char:

; 1283 :             _Xbad_alloc();

  00090	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN37@Add_char:
  00095	cc		 int	 3
?_Add_char@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_dot@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Add_dot@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_dot, COMDAT
; _this$ = ecx

; 2817 :     _New_node(_N_dot);

  00000	6a 05		 push	 5
  00002	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@W4_Node_type@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_New_node

; 2818 : }

  00007	c3		 ret	 0
?_Add_dot@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_dot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_wbound@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Add_wbound@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_wbound, COMDAT
; _this$ = ecx

; 2812 :     _New_node(_N_wbound);

  00000	6a 04		 push	 4
  00002	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@W4_Node_type@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_New_node

; 2813 : }

  00007	c3		 ret	 0
?_Add_wbound@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_wbound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_eol@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Add_eol@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_eol, COMDAT
; _this$ = ecx

; 2807 :     _New_node(_N_eol);

  00000	6a 03		 push	 3
  00002	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@W4_Node_type@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_New_node

; 2808 : }

  00007	c3		 ret	 0
?_Add_eol@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_eol
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Add_bol@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Add_bol@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_bol, COMDAT
; _this$ = ecx

; 2802 :     _New_node(_N_bol);

  00000	6a 02		 push	 2
  00002	e8 00 00 00 00	 call	 ?_New_node@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@AAEPAV_Node_base@2@W4_Node_type@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_New_node

; 2803 : }

  00007	c3		 ret	 0
?_Add_bol@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_bol
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Getmark@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QBEPAV_Node_base@2@XZ
_TEXT	SEGMENT
?_Getmark@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QBEPAV_Node_base@2@XZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Getmark, COMDAT
; _this$ = ecx

; 2755 :     return _Current;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2756 : }

  00003	c3		 ret	 0
?_Getmark@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QBEPAV_Node_base@2@XZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Getmark
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Tidy@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Tidy, COMDAT
; _this$ = ecx

; 3135 : void _Builder<_FwdIt, _Elem, _RxTraits>::_Tidy() noexcept { // free memory

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 3136 :     _Destroy_node(_Root);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]

; 1338 :     while (_Nx != _Ne && _Nx) { // destroy node

  00006	85 f6		 test	 esi, esi
  00008	74 1d		 je	 SHORT $LN14@Tidy
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL5@Tidy:

; 1339 :         _Node_base* _Tmp = _Nx;

  00010	8b ce		 mov	 ecx, esi

; 1340 :         _Nx              = _Nx->_Next;

  00012	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00015	8b 30		 mov	 esi, DWORD PTR [eax]

; 1341 :         _Tmp->_Next      = nullptr;

  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1342 :         delete _Tmp;

  0001d	6a 01		 push	 1
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	ff 10		 call	 DWORD PTR [eax]
  00023	85 f6		 test	 esi, esi
  00025	75 e9		 jne	 SHORT $LL5@Tidy
$LN14@Tidy:

; 3137 :     _Root = nullptr;
; 3138 : }

  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	c3		 ret	 0
?_Tidy@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Setlong@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Setlong@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Setlong, COMDAT
; _this$ = ecx

; 2740 :     _Root->_Flags |= _Fl_longest;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1209 : _BITMASK_OPS(_EMPTY_ARGUMENT, _Node_flags)

  00002	83 48 08 08	 or	 DWORD PTR [eax+8], 8

; 2741 : }

  00006	c3		 ret	 0
?_Setlong@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Setlong
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QBE_NXZ PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Beg_expr, COMDAT
; _this$ = ecx

; 2765 : bool _Builder<_FwdIt, _Elem, _RxTraits>::_Beg_expr() const { // test for beginning of expression or subexpression

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2766 :     return _Beg_expr(_Current) || (_Current->_Kind == _N_bol && _Beg_expr(_Current->_Prev));

  00004	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABE_NPAV_Node_base@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Beg_expr
  0000d	84 c0		 test	 al, al
  0000f	75 19		 jne	 SHORT $LN4@Beg_expr
  00011	83 7e 04 02	 cmp	 DWORD PTR [esi+4], 2
  00015	75 0e		 jne	 SHORT $LN3@Beg_expr
  00017	ff 76 10	 push	 DWORD PTR [esi+16]
  0001a	8b cf		 mov	 ecx, edi
  0001c	e8 00 00 00 00	 call	 ?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@ABE_NPAV_Node_base@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Beg_expr
  00021	84 c0		 test	 al, al
  00023	75 05		 jne	 SHORT $LN4@Beg_expr
$LN3@Beg_expr:
  00025	5f		 pop	 edi
  00026	32 c0		 xor	 al, al

; 2767 : }

  00028	5e		 pop	 esi
  00029	c3		 ret	 0
$LN4@Beg_expr:
  0002a	5f		 pop	 edi

; 2766 :     return _Beg_expr(_Current) || (_Current->_Kind == _N_bol && _Beg_expr(_Current->_Prev));

  0002b	b0 01		 mov	 al, 1

; 2767 : }

  0002d	5e		 pop	 esi
  0002e	c3		 ret	 0
?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QBE_NXZ ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Beg_expr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??0?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@W4syntax_option_type@regex_constants@1@@Z
_TEXT	SEGMENT
__Tr$ = 8						; size = 4
__Fx$ = 12						; size = 4
??0?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@W4syntax_option_type@regex_constants@1@@Z PROC ; std::_Builder<char const *,char,std::regex_traits<char> >::_Builder<char const *,char,std::regex_traits<char> >, COMDAT
; _this$ = ecx

; 2736 :       _Tmax(static_cast<int>(_Fx & regex_constants::collate ? 0U : _ARRAY_THRESHOLD)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1356 : };
; 1357 : 
; 1358 : class _Node_end_group : public _Node_base { // node that marks end of a group
; 1359 : public:
; 1360 :     _Node_end_group(_Node_type _Ty, _Node_flags _Fl, _Node_base* _Bx) noexcept : _Node_base(_Ty, _Fl), _Back(_Bx) {}
; 1361 : 
; 1362 :     _Node_base* _Back;
; 1363 : };
; 1364 : 
; 1365 : class _Node_assert : public _Node_base { // node that holds an ECMAScript assertion
; 1366 : public:
; 1367 :     explicit _Node_assert(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Node_base(_Ty, _Fl) {}
; 1368 : 
; 1369 :     ~_Node_assert() noexcept {
; 1370 :         _Destroy_node(_Child);
; 1371 :     }
; 1372 : 
; 1373 :     _Node_base* _Child = nullptr;
; 1374 : };
; 1375 : 
; 1376 : class _Node_capture : public _Node_base { // node that marks beginning of a capture group
; 1377 : public:
; 1378 :     explicit _Node_capture(unsigned int _Ix) noexcept : _Node_base(_N_capture, _Fl_none), _Idx(_Ix) {}
; 1379 : 
; 1380 :     unsigned int _Idx;
; 1381 : };
; 1382 : 
; 1383 : class _Node_back : public _Node_base { // node that holds a back reference
; 1384 : public:
; 1385 :     explicit _Node_back(unsigned int _Ix) noexcept : _Node_base(_N_back, _Fl_none), _Idx(_Ix) {}
; 1386 : 
; 1387 :     unsigned int _Idx;
; 1388 : };
; 1389 : 
; 1390 : template <class _Elem>
; 1391 : class _Node_str : public _Node_base { // node that holds text
; 1392 : public:
; 1393 :     explicit _Node_str(_Node_flags _Fl = _Fl_none) noexcept : _Node_base(_N_str, _Fl) {}
; 1394 : 
; 1395 :     _Buf<_Elem> _Data;
; 1396 : };
; 1397 : 
; 1398 : template <class _Elem, class _RxTraits>
; 1399 : class _Node_class : public _Node_base { // node that holds a character class (POSIX bracket expression)
; 1400 : public:
; 1401 :     explicit _Node_class(_Node_type _Ty = _N_class, _Node_flags _Fl = _Fl_none) noexcept : _Node_base(_Ty, _Fl) {}
; 1402 : 
; 1403 :     ~_Node_class() noexcept {
; 1404 :         _Tidy(_Coll);
; 1405 :         delete _Small;
; 1406 :         delete _Large;
; 1407 :         delete _Ranges;
; 1408 :         _Tidy(_Equiv);
; 1409 :     }
; 1410 : 
; 1411 :     void _Tidy(_Sequence<_Elem>* _Head) noexcept { // clean up a list of sequences
; 1412 :         while (_Head) { // delete the head of the list
; 1413 :             _Sequence<_Elem>* _Temp = _Head;
; 1414 :             _Head                   = _Head->_Next;
; 1415 :             delete _Temp;
; 1416 :         }
; 1417 :     }
; 1418 : 
; 1419 :     _Sequence<_Elem>* _Coll = nullptr;
; 1420 :     _Bitmap* _Small         = nullptr;
; 1421 :     _Buf<_Elem>* _Large     = nullptr;
; 1422 :     _Buf<_Elem>* _Ranges    = nullptr;
; 1423 :     typename _RxTraits::char_class_type _Classes{};
; 1424 :     _Sequence<_Elem>* _Equiv = nullptr;
; 1425 : };
; 1426 : 
; 1427 : class _Node_endif : public _Node_base { // node that marks the end of an alternative
; 1428 : public:
; 1429 :     _Node_endif() noexcept : _Node_base(_N_endif, _Fl_none) {}
; 1430 : };
; 1431 : 
; 1432 : class _Node_if : public _Node_base { // node that marks the beginning of an alternative
; 1433 : public:
; 1434 :     explicit _Node_if(_Node_base* _End) noexcept
; 1435 :         : _Node_base(_N_if, _Fl_none), _Endif(static_cast<_Node_endif*>(_End)) {}
; 1436 : 
; 1437 :     ~_Node_if() noexcept {
; 1438 :         _Node_if* _Cur = _Child;
; 1439 :         while (_Cur) { // destroy branch
; 1440 :             _Node_if* _Tmp = _Cur;
; 1441 :             _Cur           = _Cur->_Child;
; 1442 :             _Tmp->_Child   = nullptr;
; 1443 :             _Destroy_node(_Tmp, _Endif);
; 1444 :         }
; 1445 :     }
; 1446 : 
; 1447 :     _Node_endif* _Endif;
; 1448 :     _Node_if* _Child = nullptr;
; 1449 : };
; 1450 : 
; 1451 : class _Node_rep;
; 1452 : 
; 1453 : class _Node_end_rep : public _Node_base { // node that marks the end of a repetition
; 1454 : public:
; 1455 :     _Node_end_rep() noexcept : _Node_base(_N_end_rep) {}
; 1456 : 
; 1457 :     _Node_rep* _Begin_rep = nullptr;
; 1458 : 
; 1459 :     _Node_end_rep& operator=(const _Node_end_rep&) = delete;
; 1460 : };
; 1461 : 
; 1462 : struct _Loop_vals_t { // storage for loop administration
; 1463 :     int _Loop_idx;
; 1464 :     void* _Loop_iter;
; 1465 : };
; 1466 : 
; 1467 : class _Node_rep : public _Node_base { // node that marks the beginning of a repetition
; 1468 : public:
; 1469 :     _Node_rep(bool _Greedy, int _Min_, int _Max_, _Node_end_rep* _End, unsigned int _Number) noexcept
; 1470 :         : _Node_base(_N_rep, _Greedy ? _Fl_greedy : _Fl_none), _Min(_Min_), _Max(_Max_), _End_rep(_End),
; 1471 :           _Loop_number(_Number) {}
; 1472 : 
; 1473 :     const int _Min;
; 1474 :     const int _Max;
; 1475 :     _Node_end_rep* _End_rep;
; 1476 :     unsigned int _Loop_number;
; 1477 :     int _Simple_loop = -1; // -1 undetermined, 0 contains if/do, 1 simple
; 1478 : 
; 1479 :     _Node_rep& operator=(const _Node_rep&) = delete;
; 1480 : };
; 1481 : 
; 1482 : template <class _FwdIt, class _Elem, class _RxTraits>
; 1483 : class _Builder { // provides operations used by _Parser to build the nfa
; 1484 : public:
; 1485 :     using _Difft = typename iterator_traits<_FwdIt>::difference_type;
; 1486 : 
; 1487 :     _Builder(const _RxTraits& _Tr, regex_constants::syntax_option_type);
; 1488 :     bool _Beg_expr() const;
; 1489 :     void _Setlong();
; 1490 :     // _Discard_pattern is an ABI zombie name
; 1491 :     void _Tidy() noexcept;
; 1492 :     _Node_base* _Getmark() const;
; 1493 : 
; 1494 :     void _Add_nop();
; 1495 :     void _Add_bol();
; 1496 :     void _Add_eol();
; 1497 :     void _Add_wbound();
; 1498 :     void _Add_dot();
; 1499 :     void _Add_char(_Elem _Ch);
; 1500 :     void _Add_class();
; 1501 :     void _Add_char_to_class(_Elem _Ch);
; 1502 :     void _Add_range(_Elem _Ex0, _Elem _Ex1);
; 1503 :     void _Add_named_class(_Regex_traits_base::char_class_type, bool = false);
; 1504 :     void _Add_equiv(_FwdIt, _FwdIt, _Difft);
; 1505 :     void _Add_coll(_FwdIt, _FwdIt, _Difft);
; 1506 :     _Node_base* _Begin_group();
; 1507 :     void _End_group(_Node_base* _Back);
; 1508 :     _Node_base* _Begin_assert_group(bool);
; 1509 :     void _End_assert_group(_Node_base*);
; 1510 :     _Node_base* _Begin_capture_group(unsigned int _Idx);
; 1511 :     void _Add_backreference(unsigned int _Idx);
; 1512 :     _Node_base* _Begin_if(_Node_base* _Start);
; 1513 :     void _Else_if(_Node_base*, _Node_base*);
; 1514 :     void _Add_rep(int _Min, int _Max, bool _Greedy);
; 1515 :     void _Negate();
; 1516 :     void _Mark_final();
; 1517 :     _Root_node* _End_pattern();
; 1518 : 
; 1519 : private:
; 1520 :     _Node_base* _Link_node(_Node_base*);
; 1521 :     static void _Insert_node(_Node_base*, _Node_base*);
; 1522 :     _Node_base* _New_node(_Node_type _Kind);
; 1523 :     void _Add_str_node();
; 1524 :     bool _Beg_expr(_Node_base*) const;
; 1525 :     void _Add_char_to_bitmap(_Elem _Ch);
; 1526 :     void _Add_char_to_array(_Elem _Ch);
; 1527 :     void _Add_elts(_Node_class<_Elem, _RxTraits>*, _Regex_traits_base::char_class_type, bool);
; 1528 :     void _Char_to_elts(_FwdIt, _FwdIt, _Difft, _Sequence<_Elem>**);
; 1529 : 
; 1530 :     _Root_node* _Root;
; 1531 :     _Node_base* _Current;
; 1532 :     regex_constants::syntax_option_type _Flags;
; 1533 :     const _RxTraits& _Traits;
; 1534 :     const int _Bmax; // Do not use; use _Get_bmax instead.
; 1535 :     const int _Tmax; // Do not use; use _Get_tmax instead.
; 1536 : 
; 1537 :     unsigned int _Get_bmax() const;
; 1538 :     unsigned int _Get_tmax() const;
; 1539 : 
; 1540 : public:
; 1541 :     _Builder& operator=(const _Builder&) = delete;
; 1542 : };
; 1543 : 
; 1544 : template <class _BidIt>
; 1545 : class _Bt_state_t { // holds the state needed for backtracking
; 1546 : public:
; 1547 :     _BidIt _Cur;
; 1548 :     vector<bool> _Grp_valid;
; 1549 : };
; 1550 : 
; 1551 : template <class _BidIt>
; 1552 : class _Tgt_state_t : public _Bt_state_t<_BidIt> { // holds the current state of the match
; 1553 : public:
; 1554 :     struct _Grp_t { // stores a pair of iterators
; 1555 :         _BidIt _Begin;
; 1556 :         _BidIt _End;
; 1557 :     };
; 1558 : 
; 1559 :     vector<_Grp_t> _Grps;
; 1560 : 
; 1561 :     void operator=(const _Bt_state_t<_BidIt>& _Other) {
; 1562 :         static_cast<_Bt_state_t<_BidIt>&>(*this) = _Other;
; 1563 :     }
; 1564 : };
; 1565 : 
; 1566 : template <class _BidIt, class _Elem, class _RxTraits, class _It>
; 1567 : class _Matcher { // provides ways to match a regular expression to a text sequence
; 1568 : public:
; 1569 :     _Matcher(_It _Pfirst, _It _Plast, const _RxTraits& _Tr, _Root_node* _Re, unsigned int _Nx,
; 1570 :         regex_constants::syntax_option_type _Sf, regex_constants::match_flag_type _Mf)
; 1571 :         : _End(_Plast), _First(_Pfirst), _Rep(_Re), _Sflags(_Sf), _Mflags(_Mf), _Ncap(static_cast<int>(_Nx)),
; 1572 :           _Longest((_Re->_Flags & _Fl_longest) && !(_Mf & regex_constants::match_any)), _Traits(_Tr) {
; 1573 :         _Loop_vals.resize(_Re->_Loops);
; 1574 :         _Adl_verify_range(_Pfirst, _Plast);
; 1575 :     }
; 1576 : 
; 1577 :     void _Setf(regex_constants::match_flag_type _Mf) { // set specified flags
; 1578 :         _Mflags |= _Mf;
; 1579 :     }
; 1580 : 
; 1581 :     void _Clearf(regex_constants::match_flag_type _Mf) { // clear specified flags
; 1582 :         _Mflags &= ~_Mf;
; 1583 :     }
; 1584 : 
; 1585 :     template <class _Alloc>
; 1586 :     bool _Match(_It _Pfirst, match_results<_BidIt, _Alloc>* _Matches, bool _Full_match) {
; 1587 :         // try to match
; 1588 :         _First = _Pfirst;
; 1589 :         return _Match(_Matches, _Full_match);
; 1590 :     }
; 1591 : 
; 1592 :     template <class _Alloc>
; 1593 :     bool _Match(match_results<_BidIt, _Alloc>* _Matches, bool _Full_match) {
; 1594 :         // try to match
; 1595 :         if (_Matches) { // clear _Matches before doing work
; 1596 :             _Matches->_Ready = true;
; 1597 :             _Matches->_Resize(0);
; 1598 :         }
; 1599 : 
; 1600 :         _Begin          = _First;
; 1601 :         _Tgt_state._Cur = _First;
; 1602 :         _Tgt_state._Grp_valid.resize(_Get_ncap());
; 1603 :         _Tgt_state._Grps.resize(_Get_ncap());
; 1604 :         _Cap                  = static_cast<bool>(_Matches);
; 1605 :         _Full                 = _Full_match;
; 1606 :         _Max_complexity_count = _REGEX_MAX_COMPLEXITY_COUNT;
; 1607 :         _Max_stack_count      = _REGEX_MAX_STACK_COUNT;
; 1608 : 
; 1609 :         _Matched = false;
; 1610 : 
; 1611 :         if (!_Match_pat(_Rep)) {
; 1612 :             return false;
; 1613 :         }
; 1614 : 
; 1615 :         if (_Matches) { // copy results to _Matches
; 1616 :             _Matches->_Resize(_Get_ncap());
; 1617 :             for (unsigned int _Idx = 0; _Idx < _Get_ncap(); ++_Idx) { // copy submatch _Idx
; 1618 :                 if (_Res._Grp_valid[_Idx]) { // copy successful match
; 1619 :                     _Matches->_At(_Idx).matched = true;
; 1620 :                     _Matches->_At(_Idx).first   = _Res._Grps[_Idx]._Begin;
; 1621 :                     _Matches->_At(_Idx).second  = _Res._Grps[_Idx]._End;
; 1622 :                 } else { // copy failed match
; 1623 :                     _Matches->_At(_Idx).matched = false;
; 1624 :                     _Matches->_At(_Idx).first   = _End;
; 1625 :                     _Matches->_At(_Idx).second  = _End;
; 1626 :                 }
; 1627 :             }
; 1628 :             _Matches->_Org           = _Begin;
; 1629 :             _Matches->_Pfx().first   = _Begin;
; 1630 :             _Matches->_Pfx().second  = _Matches->_At(0).first;
; 1631 :             _Matches->_Pfx().matched = _Matches->_Pfx().first != _Matches->_Pfx().second;
; 1632 : 
; 1633 :             _Matches->_Sfx().first   = _Matches->_At(0).second;
; 1634 :             _Matches->_Sfx().second  = _End;
; 1635 :             _Matches->_Sfx().matched = _Matches->_Sfx().first != _Matches->_Sfx().second;
; 1636 : 
; 1637 :             _Matches->_Null().first  = _End;
; 1638 :             _Matches->_Null().second = _End;
; 1639 :         }
; 1640 :         return true;
; 1641 :     }
; 1642 : 
; 1643 :     _BidIt _Skip(_BidIt, _BidIt, _Node_base* = nullptr);
; 1644 : 
; 1645 : private:
; 1646 :     _Tgt_state_t<_It> _Tgt_state;
; 1647 :     _Tgt_state_t<_It> _Res;
; 1648 :     vector<_Loop_vals_t> _Loop_vals;
; 1649 : 
; 1650 :     bool _Do_if(_Node_if*);
; 1651 :     bool _Do_rep0(_Node_rep*, bool);
; 1652 :     bool _Do_rep(_Node_rep*, bool, int);
; 1653 :     bool _Do_class(_Node_base*);
; 1654 :     bool _Match_pat(_Node_base*);
; 1655 :     bool _Better_match();
; 1656 :     bool _Is_wbound() const;
; 1657 : 
; 1658 :     unsigned int _Get_ncap() const;
; 1659 : 
; 1660 :     _It _Begin;
; 1661 :     _It _End;
; 1662 :     _It _First;
; 1663 :     _Node_base* _Rep;
; 1664 :     regex_constants::syntax_option_type _Sflags;
; 1665 :     regex_constants::match_flag_type _Mflags;
; 1666 :     bool _Matched = false;
; 1667 :     bool _Cap;
; 1668 :     int _Ncap; // Do not use. Use _Get_ncap instead.
; 1669 :     bool _Longest;
; 1670 :     const _RxTraits& _Traits;
; 1671 :     bool _Full;
; 1672 :     long _Max_complexity_count;
; 1673 :     long _Max_stack_count;
; 1674 : 
; 1675 : public:
; 1676 :     _Matcher& operator=(const _Matcher&) = delete;
; 1677 : };
; 1678 : 
; 1679 : enum _Prs_ret { // indicate class element type
; 1680 :     _Prs_none,
; 1681 :     _Prs_chr,
; 1682 :     _Prs_set
; 1683 : };
; 1684 : 
; 1685 : template <class _FwdIt, class _Elem, class _RxTraits>
; 1686 : class _Parser { // parse a regular expression
; 1687 : public:
; 1688 :     using char_class_type = typename _RxTraits::char_class_type;
; 1689 : 
; 1690 :     _Parser(const _RxTraits& _Tr, _FwdIt _Pfirst, _FwdIt _Plast, regex_constants::syntax_option_type _Fx);
; 1691 :     _Root_node* _Compile();
; 1692 : 
; 1693 :     unsigned int _Mark_count() const noexcept {
; 1694 :         return _Grp_idx + 1;
; 1695 :     }
; 1696 : 
; 1697 : private:
; 1698 :     // lexing
; 1699 :     void _Error(regex_constants::error_type);
; 1700 : 
; 1701 :     bool _Is_esc() const;
; 1702 :     void _Trans();
; 1703 :     void _Next();
; 1704 :     void _Expect(_Meta_type, regex_constants::error_type);
; 1705 : 
; 1706 :     // parsing
; 1707 :     int _Do_digits(int _Base, int _Count, regex_constants::error_type _Error_type);
; 1708 :     bool _DecimalDigits(regex_constants::error_type _Error_type);
; 1709 :     void _HexDigits(int);
; 1710 :     bool _OctalDigits();
; 1711 :     void _Do_ex_class(_Meta_type);
; 1712 :     bool _CharacterClassEscape(bool);
; 1713 :     _Prs_ret _ClassEscape(bool);
; 1714 :     _Prs_ret _ClassAtom();
; 1715 :     void _ClassRanges();
; 1716 :     void _CharacterClass();
; 1717 :     bool _IdentityEscape();
; 1718 :     bool _IsIdentityEscape() const;
; 1719 :     bool _Do_ffn(_Elem);
; 1720 :     bool _Do_ffnx(_Elem);
; 1721 :     bool _CharacterEscape();
; 1722 :     void _AtomEscape();
; 1723 :     void _Do_capture_group();
; 1724 :     void _Do_noncapture_group();
; 1725 :     void _Do_assert_group(bool);
; 1726 :     bool _Wrapped_disjunction();
; 1727 :     void _Quantifier();
; 1728 :     bool _Alternative();
; 1729 :     void _Disjunction();
; 1730 : 
; 1731 :     _FwdIt _Pat;
; 1732 :     _FwdIt _Begin;
; 1733 :     _FwdIt _End;
; 1734 :     unsigned int _Grp_idx = 0;
; 1735 :     int _Disj_count       = 0;
; 1736 :     vector<bool> _Finished_grps;
; 1737 :     _Builder<_FwdIt, _Elem, _RxTraits> _Nfa;
; 1738 :     const _RxTraits& _Traits;
; 1739 :     regex_constants::syntax_option_type _Flags;
; 1740 :     int _Val;
; 1741 :     _Elem _Char;
; 1742 :     _Meta_type _Mchar;
; 1743 :     unsigned int _L_flags;
; 1744 : };
; 1745 : 
; 1746 : enum _Lang_flags { // describe language properties
; 1747 :     _L_ext_rep    = 0x00000001, // + and ? repetitions
; 1748 :     _L_alt_pipe   = 0x00000002, // uses '|' for alternation
; 1749 :     _L_alt_nl     = 0x00000004, // uses '\n' for alternation (grep, egrep)
; 1750 :     _L_nex_grp    = 0x00000008, // has non-escaped capture groups
; 1751 :     _L_nex_rep    = 0x00000010, // has non-escaped repeats
; 1752 :     _L_nc_grp     = 0x00000020, // has non-capture groups (?:xxx)
; 1753 :     _L_asrt_gen   = 0x00000040, // has generalized assertions (?=xxx), (?!xxx)
; 1754 :     _L_asrt_wrd   = 0x00000080, // has word boundary assertions (\b, \B)
; 1755 :     _L_bckr       = 0x00000100, // has backreferences (ERE doesn't)
; 1756 :     _L_lim_bckr   = 0x00000200, // has limited backreferences (BRE \1-\9)
; 1757 :     _L_ngr_rep    = 0x00000400, // has non-greedy repeats
; 1758 :     _L_esc_uni    = 0x00000800, // has Unicode escape sequences
; 1759 :     _L_esc_hex    = 0x00001000, // has hexadecimal escape sequences
; 1760 :     _L_esc_oct    = 0x00002000, // has octal escape sequences
; 1761 :     _L_esc_bsl    = 0x00004000, // has escape backslash in character classes
; 1762 :     _L_esc_ffnx   = 0x00008000, // has extra file escapes (\a and \b)
; 1763 :     _L_esc_ffn    = 0x00010000, // has limited file escapes (\[fnrtv])
; 1764 :     _L_esc_wsd    = 0x00020000, // has w, s, and d character set escapes
; 1765 :     _L_esc_ctrl   = 0x00040000, // has control escape
; 1766 :     _L_no_nl      = 0x00080000, // no newline in pattern or matching text
; 1767 :     _L_bzr_chr    = 0x00100000, // \0 is a valid character constant
; 1768 :     _L_grp_esc    = 0x00200000, // \ is special character in group
; 1769 :     _L_ident_ECMA = 0x00400000, // ECMA identity escape (not identifierpart)
; 1770 :     _L_ident_ERE  = 0x00800000, // ERE identity escape (.[\*^$, plus {+?}()
; 1771 :     _L_ident_awk  = 0x01000000, // awk identity escape ( ERE plus "/)
; 1772 :     _L_anch_rstr  = 0x02000000, // anchor restricted to beginning/end
; 1773 :     _L_star_beg   = 0x04000000, // star okay at beginning of RE/expr (BRE)
; 1774 :     _L_empty_grp  = 0x08000000, // empty group allowed (ERE prohibits "()")
; 1775 :     _L_paren_bal  = 0x10000000, // ')'/'}'/']' special only after '('/'{'/']'
; 1776 :     _L_brk_rstr   = 0x20000000, // ']' not special when first character in set
; 1777 :     _L_mtch_long  = 0x40000000, // find longest match (ERE, BRE)
; 1778 : };
; 1779 : 
; 1780 : class _Regex_base : public _Container_base { // base class for basic_regex to construct and destroy proxy
; 1781 : public:
; 1782 : #if 0 < _ITERATOR_DEBUG_LEVEL
; 1783 :     _Regex_base() { // construct proxy
; 1784 :         this->_Myproxy = new _Container_proxy;
; 1785 :         this->_Myproxy->_Mycont = this;
; 1786 :     }
; 1787 : 
; 1788 :     ~_Regex_base() noexcept {
; 1789 :         this->_Orphan_all();
; 1790 :         delete this->_Myproxy;
; 1791 :         this->_Myproxy = nullptr;
; 1792 :     }
; 1793 : #endif // 0 < _ITERATOR_DEBUG_LEVEL
; 1794 : };
; 1795 : 
; 1796 : _EXPORT_STD template <class _Elem, class _RxTraits = regex_traits<_Elem>>
; 1797 : class basic_regex : public _Regex_base { // regular expression
; 1798 : public:
; 1799 :     using value_type  = _Elem;
; 1800 :     using traits_type = _RxTraits;
; 1801 :     using locale_type = typename _RxTraits::locale_type;
; 1802 :     using string_type = typename _RxTraits::string_type;
; 1803 :     using flag_type   = regex_constants::syntax_option_type;
; 1804 : 
; 1805 :     static constexpr flag_type icase      = regex_constants::icase;
; 1806 :     static constexpr flag_type nosubs     = regex_constants::nosubs;
; 1807 :     static constexpr flag_type optimize   = regex_constants::optimize;
; 1808 :     static constexpr flag_type collate    = regex_constants::collate;
; 1809 :     static constexpr flag_type ECMAScript = regex_constants::ECMAScript;
; 1810 :     static constexpr flag_type basic      = regex_constants::basic;
; 1811 :     static constexpr flag_type extended   = regex_constants::extended;
; 1812 :     static constexpr flag_type awk        = regex_constants::awk;
; 1813 :     static constexpr flag_type grep       = regex_constants::grep;
; 1814 :     static constexpr flag_type egrep      = regex_constants::egrep;
; 1815 : 
; 1816 :     basic_regex() = default; // construct empty object
; 1817 : 
; 1818 :     explicit basic_regex(_In_z_ const _Elem* _Ptr, flag_type _Flags = regex_constants::ECMAScript) {
; 1819 :         _Reset(_Ptr, _Ptr + _RxTraits::length(_Ptr), _Flags);
; 1820 :     }
; 1821 : 
; 1822 :     basic_regex(_In_reads_(_Count) const _Elem* _Ptr, size_t _Count, flag_type _Flags = regex_constants::ECMAScript) {
; 1823 :         if (_Ptr) {
; 1824 :             _Reset(_Ptr, _Ptr + _Count, _Flags);
; 1825 :             return;
; 1826 :         }
; 1827 : 
; 1828 :         _Xregex_error(regex_constants::error_parse);
; 1829 :     }
; 1830 : 
; 1831 :     template <class _STtraits, class _STalloc>
; 1832 :     explicit basic_regex(
; 1833 :         const basic_string<_Elem, _STtraits, _STalloc>& _Str, flag_type _Flags = regex_constants::ECMAScript) {
; 1834 :         _Reset(_Str.data(), _Str.data() + static_cast<ptrdiff_t>(_Str.size()), _Flags);
; 1835 :     }
; 1836 : 
; 1837 :     template <class _InIt>
; 1838 :     basic_regex(_InIt _First, _InIt _Last, flag_type _Flags) {
; 1839 :         _Adl_verify_range(_First, _Last);
; 1840 :         _Reset(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Flags);
; 1841 :     }
; 1842 : 
; 1843 :     template <class _InIt>
; 1844 :     basic_regex(_InIt _First, _InIt _Last) {
; 1845 :         _Adl_verify_range(_First, _Last);
; 1846 :         _Reset(_Get_unwrapped(_First), _Get_unwrapped(_Last), regex_constants::ECMAScript);
; 1847 :     }
; 1848 : 
; 1849 :     basic_regex(const basic_regex& _Right)
; 1850 : #if _ENHANCED_REGEX_VISUALIZER
; 1851 :         : _Traits(_Right._Traits), _Visualization(_Right._Visualization)
; 1852 : #else
; 1853 :         : _Traits(_Right._Traits)
; 1854 : #endif
; 1855 :     { // construct copy of _Right
; 1856 :         _Reset(_Right._Rep);
; 1857 :     }
; 1858 : 
; 1859 :     basic_regex(initializer_list<_Elem> _Ilist, flag_type _Flags = regex_constants::ECMAScript) {
; 1860 :         _Reset(_Ilist.begin(), _Ilist.end(), _Flags);
; 1861 :     }
; 1862 : 
; 1863 :     basic_regex& operator=(initializer_list<_Elem> _Ilist) { // replace with regular expression in initializer_list
; 1864 :         return assign(_Ilist);
; 1865 :     }
; 1866 : 
; 1867 :     basic_regex& assign(initializer_list<_Elem> _Ilist, flag_type _Flags = regex_constants::ECMAScript) {
; 1868 :         // replace with regular expression in initializer_list
; 1869 :         _Reset(_Ilist.begin(), _Ilist.end(), _Flags);
; 1870 :         return *this;
; 1871 :     }
; 1872 : 
; 1873 :     basic_regex(basic_regex&& _Right) noexcept {
; 1874 :         _Assign_rv(_STD move(_Right));
; 1875 :     }
; 1876 : 
; 1877 :     basic_regex& operator=(basic_regex&& _Right) noexcept {
; 1878 :         _Assign_rv(_STD move(_Right));
; 1879 :         return *this;
; 1880 :     }
; 1881 : 
; 1882 :     void _Assign_rv(basic_regex&& _Right) {
; 1883 :         if (this != _STD addressof(_Right)) { // clear this and steal from _Right
; 1884 :             _Tidy();
; 1885 : 
; 1886 : #if _ENHANCED_REGEX_VISUALIZER
; 1887 :             _Visualization = _STD move(_Right._Visualization);
; 1888 : #endif // _ENHANCED_REGEX_VISUALIZER
; 1889 : 
; 1890 :             _Rep        = _Right._Rep;
; 1891 :             _Right._Rep = nullptr;
; 1892 :         }
; 1893 :     }
; 1894 : 
; 1895 :     basic_regex& assign(basic_regex&& _Right) noexcept {
; 1896 :         _Assign_rv(_STD move(_Right));
; 1897 :         return *this;
; 1898 :     }
; 1899 : 
; 1900 :     ~basic_regex() noexcept {
; 1901 :         _Tidy();
; 1902 :     }
; 1903 : 
; 1904 :     basic_regex& operator=(const basic_regex& _Right) {
; 1905 :         return assign(_Right);
; 1906 :     }
; 1907 : 
; 1908 :     basic_regex& operator=(_In_z_ const _Elem* _Ptr) {
; 1909 :         _Reset(_Ptr, _Ptr + _RxTraits::length(_Ptr), ECMAScript);
; 1910 :         return *this;
; 1911 :     }
; 1912 : 
; 1913 :     template <class _STtraits, class _STalloc>
; 1914 :     basic_regex& operator=(const basic_string<_Elem, _STtraits, _STalloc>& _Str) {
; 1915 :         _Reset(_Str.data(), _Str.data() + static_cast<ptrdiff_t>(_Str.size()), ECMAScript);
; 1916 :         return *this;
; 1917 :     }
; 1918 : 
; 1919 :     unsigned int _Loop_count() const noexcept {
; 1920 :         return _Rep ? _Rep->_Loops : 0;
; 1921 :     }
; 1922 : 
; 1923 :     _NODISCARD unsigned int mark_count() const noexcept /* strengthened */ {
; 1924 :         return _Rep ? _Rep->_Marks - 1 : 0;
; 1925 :     }
; 1926 : 
; 1927 :     basic_regex& assign(const basic_regex& _Right) {
; 1928 : #if _ENHANCED_REGEX_VISUALIZER
; 1929 :         _Visualization = _Right._Visualization;
; 1930 : #endif // _ENHANCED_REGEX_VISUALIZER
; 1931 : 
; 1932 :         _Reset(_Right._Rep);
; 1933 :         return *this;
; 1934 :     }
; 1935 : 
; 1936 :     basic_regex& assign(_In_z_ const _Elem* _Ptr, flag_type _Flags = regex_constants::ECMAScript) {
; 1937 :         return assign(_Ptr, _RxTraits::length(_Ptr), _Flags);
; 1938 :     }
; 1939 : 
; 1940 :     basic_regex& assign(
; 1941 :         _In_reads_(_Count) const _Elem* _Ptr, size_t _Count, flag_type _Flags = regex_constants::ECMAScript) {
; 1942 :         _Reset(_Ptr, _Ptr + _Count, _Flags);
; 1943 :         return *this;
; 1944 :     }
; 1945 : 
; 1946 :     template <class _STtraits, class _STalloc>
; 1947 :     basic_regex& assign(
; 1948 :         const basic_string<_Elem, _STtraits, _STalloc>& _Str, flag_type _Flags = regex_constants::ECMAScript) {
; 1949 :         _Reset(_Str.data(), _Str.data() + static_cast<ptrdiff_t>(_Str.size()), _Flags);
; 1950 :         return *this;
; 1951 :     }
; 1952 : 
; 1953 :     template <class _InIt>
; 1954 :     basic_regex& assign(_InIt _First, _InIt _Last, flag_type _Flags = regex_constants::ECMAScript) {
; 1955 :         _Adl_verify_range(_First, _Last);
; 1956 :         _Reset(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Flags);
; 1957 :         return *this;
; 1958 :     }
; 1959 : 
; 1960 :     _NODISCARD flag_type flags() const noexcept /* strengthened */ {
; 1961 :         return _Rep ? _Rep->_Fl : flag_type{};
; 1962 :     }
; 1963 : 
; 1964 :     locale_type imbue(locale_type _Loc) { // clear regular expression and set locale to argument
; 1965 :         _Tidy();
; 1966 :         return _Traits.imbue(_Loc);
; 1967 :     }
; 1968 : 
; 1969 :     locale_type getloc() const {
; 1970 :         return _Traits.getloc();
; 1971 :     }
; 1972 : 
; 1973 :     void swap(basic_regex& _Right) noexcept /* strengthened */ {
; 1974 :         _STD swap(_Rep, _Right._Rep);
; 1975 : 
; 1976 : #if _ENHANCED_REGEX_VISUALIZER
; 1977 :         _Visualization.swap(_Right._Visualization);
; 1978 : #endif // _ENHANCED_REGEX_VISUALIZER
; 1979 :     }
; 1980 : 
; 1981 :     _Root_node* _Get() const noexcept {
; 1982 :         return _Rep;
; 1983 :     }
; 1984 : 
; 1985 :     bool _Empty() const noexcept {
; 1986 :         return _Rep == nullptr;
; 1987 :     }
; 1988 : 
; 1989 :     const _RxTraits& _Get_traits() const noexcept {
; 1990 :         return _Traits;
; 1991 :     }
; 1992 : 
; 1993 : private:
; 1994 :     _Root_node* _Rep = nullptr;
; 1995 :     _RxTraits _Traits;
; 1996 : 
; 1997 : #if _ENHANCED_REGEX_VISUALIZER
; 1998 :     basic_string<_Elem> _Visualization;
; 1999 : #endif // _ENHANCED_REGEX_VISUALIZER
; 2000 : 
; 2001 :     void _Tidy() noexcept { // free all storage
; 2002 :         if (_Rep && _MT_DECR(reinterpret_cast<_Atomic_counter_t&>(_Rep->_Refs)) == 0) {
; 2003 :             _Destroy_node(_Rep);
; 2004 :         }
; 2005 : 
; 2006 :         _Rep = nullptr;
; 2007 :     }
; 2008 : 
; 2009 :     template <class _InIt>
; 2010 :     void _Reset(_InIt _First, _InIt _Last, flag_type _Flags) {
; 2011 :         // build regular expression from iterator range
; 2012 :         if constexpr (_Is_ranges_fwd_iter_v<_InIt>) {
; 2013 : #if _ENHANCED_REGEX_VISUALIZER
; 2014 :             _Visualization.assign(_First, _Last);
; 2015 : #endif // _ENHANCED_REGEX_VISUALIZER
; 2016 : 
; 2017 :             _Parser<_InIt, _Elem, _RxTraits> _Prs(_Traits, _First, _Last, _Flags);
; 2018 :             _Root_node* _Rx = _Prs._Compile();
; 2019 :             _Reset(_Rx);
; 2020 :         } else {
; 2021 :             static_assert(_Is_ranges_input_iter_v<_InIt>, "Iterators must be at least input iterators");
; 2022 : 
; 2023 :             basic_string<_Iter_value_t<_InIt>> _Str(_First, _Last);
; 2024 : 
; 2025 :             _Reset(_Str.data(), _Str.data() + static_cast<ptrdiff_t>(_Str.size()), _Flags);
; 2026 :         }
; 2027 :     }
; 2028 : 
; 2029 :     void _Reset(_Root_node* _Rx) { // build regular expression holding root node _Rx
; 2030 :         if (_Rx) {
; 2031 :             _MT_INCR(reinterpret_cast<_Atomic_counter_t&>(_Rx->_Refs));
; 2032 :         }
; 2033 : 
; 2034 :         _Tidy();
; 2035 :         _Rep = _Rx;
; 2036 :     }
; 2037 : };
; 2038 : 
; 2039 : #if _HAS_CXX17
; 2040 : template <class _FwdIt>
; 2041 : basic_regex(_FwdIt, _FwdIt, regex_constants::syntax_option_type = regex_constants::ECMAScript)
; 2042 :     -> basic_regex<typename iterator_traits<_FwdIt>::value_type>;
; 2043 : #endif // _HAS_CXX17
; 2044 : 
; 2045 : _EXPORT_STD template <class _Elem, class _RxTraits>
; 2046 : void swap(basic_regex<_Elem, _RxTraits>& _Left, basic_regex<_Elem, _RxTraits>& _Right) noexcept /* strengthened */ {
; 2047 :     _Left.swap(_Right);
; 2048 : }
; 2049 : 
; 2050 : _EXPORT_STD template <class _BidIt, class _Alloc>
; 2051 : void swap(match_results<_BidIt, _Alloc>& _Left, match_results<_BidIt, _Alloc>& _Right)
; 2052 :     noexcept(noexcept(_Left.swap(_Right))) /* strengthened */ {
; 2053 :     _Left.swap(_Right);
; 2054 : }
; 2055 : 
; 2056 : _EXPORT_STD using regex   = basic_regex<char>;
; 2057 : _EXPORT_STD using wregex  = basic_regex<wchar_t>;
; 2058 : _EXPORT_STD using cmatch  = match_results<const char*>;
; 2059 : _EXPORT_STD using wcmatch = match_results<const wchar_t*>;
; 2060 : _EXPORT_STD using smatch  = match_results<string::const_iterator>;
; 2061 : _EXPORT_STD using wsmatch = match_results<wstring::const_iterator>;
; 2062 : 
; 2063 : template <class _BidIt, class _Alloc, class _InIt, class _OutIt>
; 2064 : _OutIt _Format_default(const match_results<_BidIt, _Alloc>& _Match, _OutIt _Out, _InIt _First, _InIt _Last,
; 2065 :     regex_constants::match_flag_type) { // format with ECMAScript rules
; 2066 :     while (_First != _Last) { // process one character or escape sequence
; 2067 :         if (*_First != '$') {
; 2068 :             *_Out++ = *_First++;
; 2069 :         } else if (++_First == _Last) {
; 2070 :             *_Out++ = '$'; // preserve $ at end
; 2071 :         } else if (*_First == '$') { // replace $$
; 2072 :             *_Out++ = '$';
; 2073 :             ++_First;
; 2074 :         } else if (*_First == '`') { // replace $`
; 2075 :             _Out = _STD copy(_Match.prefix().first, _Match.prefix().second, _Out);
; 2076 :             ++_First;
; 2077 :         } else if (*_First == '\'') { // replace $'
; 2078 :             _Out = _STD copy(_Match.suffix().first, _Match.suffix().second, _Out);
; 2079 :             ++_First;
; 2080 :         } else if (*_First == '&') { // replace $&
; 2081 :             ++_First;
; 2082 :             if (_Match.size() != 0) {
; 2083 :                 _Out = _STD copy(_Match._At(0).first, _Match._At(0).second, _Out);
; 2084 :             }
; 2085 :         } else if ('0' <= *_First && *_First <= '9') { // replace capture group descriptors $n, $nn
; 2086 :             auto _Num              = static_cast<unsigned int>(*_First++ - '0');
; 2087 :             const bool _Two_digits = _First != _Last && '0' <= *_First && *_First <= '9';
; 2088 :             if (_Two_digits) { // process second digit
; 2089 :                 _Num *= 10;
; 2090 :                 _Num += static_cast<unsigned int>(*_First++ - '0');
; 2091 :             }
; 2092 : 
; 2093 :             if (_Num == 0) { // preserve $0, $00
; 2094 :                 *_Out++ = '$';
; 2095 :                 *_Out++ = '0';
; 2096 :                 if (_Two_digits) {
; 2097 :                     *_Out++ = '0';
; 2098 :                 }
; 2099 :             } else if (_Num < _Match.size()) {
; 2100 :                 _Out = _STD copy(_Match._At(_Num).first, _Match._At(_Num).second, _Out);
; 2101 :             }
; 2102 :         } else { // replace $x
; 2103 :             *_Out++ = '$';
; 2104 :             *_Out++ = *_First++;
; 2105 :         }
; 2106 :     }
; 2107 :     return _Out;
; 2108 : }
; 2109 : 
; 2110 : template <class _BidIt, class _Alloc, class _InIt, class _OutIt>
; 2111 : _OutIt _Format_sed(const match_results<_BidIt, _Alloc>& _Match, _OutIt _Out, _InIt _First, _InIt _Last,
; 2112 :     regex_constants::match_flag_type) { // format with sed rules
; 2113 :     while (_First != _Last) { // process one character or escape sequence
; 2114 :         if (*_First == '&') { // replace with full match
; 2115 :             ++_First;
; 2116 :             if (_Match.size() != 0) {
; 2117 :                 _Out = _STD copy(_Match._At(0).first, _Match._At(0).second, _Out);
; 2118 :             }
; 2119 :         } else if (*_First != '\\') {
; 2120 :             *_Out++ = *_First++;
; 2121 :         } else if (++_First != _Last) {
; 2122 :             if ('0' <= *_First && *_First <= '9') { // replace \n, including \0
; 2123 :                 const auto _Num = static_cast<unsigned int>(*_First++ - '0');
; 2124 :                 if (_Num < _Match.size()) {
; 2125 :                     _Out = _STD copy(_Match._At(_Num).first, _Match._At(_Num).second, _Out);
; 2126 :                 }
; 2127 :             } else {
; 2128 :                 *_Out++ = *_First++; // replace \x, including \\, \&
; 2129 :             }
; 2130 :         }
; 2131 :     }
; 2132 : 
; 2133 :     return _Out;
; 2134 : }
; 2135 : 
; 2136 : template <class _BidIt, class _Alloc, class _Elem, class _RxTraits, class _It>
; 2137 : bool _Regex_match1(_It _First, _It _Last, match_results<_BidIt, _Alloc>* _Matches,
; 2138 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs,
; 2139 :     bool _Full) { // try to match regular expression to target text
; 2140 :     if (_Re._Empty()) {
; 2141 :         return false;
; 2142 :     }
; 2143 : 
; 2144 :     _Matcher<_BidIt, _Elem, _RxTraits, _It> _Mx(
; 2145 :         _First, _Last, _Re._Get_traits(), _Re._Get(), _Re.mark_count() + 1, _Re.flags(), _Flgs);
; 2146 :     return _Mx._Match(_Matches, _Full);
; 2147 : }
; 2148 : 
; 2149 : _EXPORT_STD template <class _BidIt, class _Alloc, class _Elem, class _RxTraits>
; 2150 : bool regex_match(_BidIt _First, _BidIt _Last, match_results<_BidIt, _Alloc>& _Matches,
; 2151 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2152 :     // try to match regular expression to target text
; 2153 :     _Adl_verify_range(_First, _Last);
; 2154 :     return _Regex_match1(_First, _Last, _STD addressof(_Matches), _Re, _Flgs, true);
; 2155 : }
; 2156 : 
; 2157 : _EXPORT_STD template <class _BidIt, class _Elem, class _RxTraits>
; 2158 : _NODISCARD bool regex_match(_BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2159 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2160 :     // try to match regular expression to target text
; 2161 :     _Adl_verify_range(_First, _Last);
; 2162 :     return _Regex_match1(_Get_unwrapped(_First), _Get_unwrapped(_Last),
; 2163 :         static_cast<match_results<_Unwrapped_t<const _BidIt&>>*>(nullptr), _Re, _Flgs | regex_constants::match_any,
; 2164 :         true);
; 2165 : }
; 2166 : 
; 2167 : _EXPORT_STD template <class _Elem, class _RxTraits>
; 2168 : _NODISCARD bool regex_match(_In_z_ const _Elem* _Str, const basic_regex<_Elem, _RxTraits>& _Re,
; 2169 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2170 :     // try to match regular expression to target text
; 2171 :     const _Elem* _Last = _Str + char_traits<_Elem>::length(_Str);
; 2172 :     return _Regex_match1(
; 2173 :         _Str, _Last, static_cast<match_results<const _Elem*>*>(nullptr), _Re, _Flgs | regex_constants::match_any, true);
; 2174 : }
; 2175 : 
; 2176 : _EXPORT_STD template <class _Elem, class _Alloc, class _RxTraits>
; 2177 : bool regex_match(_In_z_ const _Elem* _Str, match_results<const _Elem*, _Alloc>& _Matches,
; 2178 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2179 :     // try to match regular expression to target text
; 2180 :     const _Elem* _Last = _Str + char_traits<_Elem>::length(_Str);
; 2181 :     return _Regex_match1(_Str, _Last, _STD addressof(_Matches), _Re, _Flgs, true);
; 2182 : }
; 2183 : 
; 2184 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Alloc, class _Elem, class _RxTraits>
; 2185 : bool regex_match(const basic_string<_Elem, _StTraits, _StAlloc>& _Str,
; 2186 :     match_results<typename basic_string<_Elem, _StTraits, _StAlloc>::const_iterator, _Alloc>& _Matches,
; 2187 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2188 :     // try to match regular expression to target text
; 2189 :     return _Regex_match1(_Str.begin(), _Str.end(), _STD addressof(_Matches), _Re, _Flgs, true);
; 2190 : }
; 2191 : 
; 2192 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Alloc, class _Elem, class _RxTraits>
; 2193 : bool regex_match(const basic_string<_Elem, _StTraits, _StAlloc>&&,
; 2194 :     match_results<typename basic_string<_Elem, _StTraits, _StAlloc>::const_iterator, _Alloc>&,
; 2195 :     const basic_regex<_Elem, _RxTraits>&, regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2196 : 
; 2197 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Elem, class _RxTraits>
; 2198 : _NODISCARD bool regex_match(const basic_string<_Elem, _StTraits, _StAlloc>& _Str,
; 2199 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2200 :     // try to match regular expression to target text
; 2201 :     return _Regex_match1(_Str.data(), _Str.data() + _Str.size(), static_cast<match_results<const _Elem*>*>(nullptr),
; 2202 :         _Re, _Flgs | regex_constants::match_any, true);
; 2203 : }
; 2204 : 
; 2205 : template <class _BidIt, class _Alloc, class _Elem, class _RxTraits, class _It>
; 2206 : bool _Regex_search2(_It _First, _It _Last, match_results<_BidIt, _Alloc>* _Matches,
; 2207 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs, _It _Org) {
; 2208 :     // search for regular expression match in target text
; 2209 :     if (_Re._Empty()) {
; 2210 :         return false;
; 2211 :     }
; 2212 : 
; 2213 :     bool _Found      = false;
; 2214 :     const _It _Begin = _First;
; 2215 :     if ((_Flgs & regex_constants::_Skip_zero_length) && _First != _Last) {
; 2216 :         ++_First;
; 2217 :     }
; 2218 : 
; 2219 :     _Matcher<_BidIt, _Elem, _RxTraits, _It> _Mx(
; 2220 :         _First, _Last, _Re._Get_traits(), _Re._Get(), _Re.mark_count() + 1, _Re.flags(), _Flgs);
; 2221 : 
; 2222 :     if (_Mx._Match(_Matches, false)) {
; 2223 :         _Found = true;
; 2224 :     } else if (_First != _Last && !(_Flgs & regex_constants::match_continuous)) { // try more on suffixes
; 2225 :         _Mx._Setf(regex_constants::match_prev_avail);
; 2226 :         _Mx._Clearf(regex_constants::_Match_not_null);
; 2227 :         while ((_First = _Mx._Skip(++_First, _Last)) != _Last) {
; 2228 :             if (_Mx._Match(_First, _Matches, false)) { // found match starting at _First
; 2229 :                 _Found = true;
; 2230 :                 break;
; 2231 :             }
; 2232 :         }
; 2233 : 
; 2234 :         if (!_Found && _Mx._Match(_Last, _Matches, false)) {
; 2235 :             _Found = true;
; 2236 :         }
; 2237 :     }
; 2238 : 
; 2239 :     if (_Found && _Matches) { // update _Matches
; 2240 :         _Matches->_Org           = _Org;
; 2241 :         _Matches->_Pfx().first   = _Begin;
; 2242 :         _Matches->_Pfx().matched = _Matches->_Pfx().first != _Matches->_Pfx().second;
; 2243 :     }
; 2244 :     return _Found;
; 2245 : }
; 2246 : 
; 2247 : _EXPORT_STD template <class _BidIt, class _Alloc, class _Elem, class _RxTraits>
; 2248 : bool regex_search(_BidIt _First, _BidIt _Last, match_results<_BidIt, _Alloc>& _Matches,
; 2249 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2250 :     // search for regular expression match in target text
; 2251 :     _Adl_verify_range(_First, _Last);
; 2252 :     return _Regex_search2(_First, _Last, _STD addressof(_Matches), _Re, _Flgs, _First);
; 2253 : }
; 2254 : 
; 2255 : _EXPORT_STD template <class _BidIt, class _Elem, class _RxTraits>
; 2256 : _NODISCARD bool regex_search(_BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2257 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2258 :     // search for regular expression match in target text
; 2259 :     _Adl_verify_range(_First, _Last);
; 2260 :     return _Regex_search2(_Get_unwrapped(_First), _Get_unwrapped(_Last),
; 2261 :         static_cast<match_results<_Unwrapped_t<const _BidIt&>>*>(nullptr), _Re, _Flgs | regex_constants::match_any,
; 2262 :         _Get_unwrapped(_First));
; 2263 : }
; 2264 : 
; 2265 : _EXPORT_STD template <class _Elem, class _RxTraits>
; 2266 : _NODISCARD bool regex_search(_In_z_ const _Elem* _Str, const basic_regex<_Elem, _RxTraits>& _Re,
; 2267 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2268 :     // search for regular expression match in target text
; 2269 :     const _Elem* _Last = _Str + char_traits<_Elem>::length(_Str);
; 2270 :     return _Regex_search2(
; 2271 :         _Str, _Last, static_cast<match_results<const _Elem*>*>(nullptr), _Re, _Flgs | regex_constants::match_any, _Str);
; 2272 : }
; 2273 : 
; 2274 : _EXPORT_STD template <class _Elem, class _Alloc, class _RxTraits>
; 2275 : bool regex_search(_In_z_ const _Elem* _Str, match_results<const _Elem*, _Alloc>& _Matches,
; 2276 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2277 :     // search for regular expression match in target text
; 2278 :     const _Elem* _Last = _Str + char_traits<_Elem>::length(_Str);
; 2279 :     return _Regex_search2(_Str, _Last, _STD addressof(_Matches), _Re, _Flgs, _Str);
; 2280 : }
; 2281 : 
; 2282 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Alloc, class _Elem, class _RxTraits>
; 2283 : bool regex_search(const basic_string<_Elem, _StTraits, _StAlloc>& _Str,
; 2284 :     match_results<typename basic_string<_Elem, _StTraits, _StAlloc>::const_iterator, _Alloc>& _Matches,
; 2285 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2286 :     // search for regular expression match in target text
; 2287 :     return _Regex_search2(_Str.begin(), _Str.end(), _STD addressof(_Matches), _Re, _Flgs, _Str.begin());
; 2288 : }
; 2289 : 
; 2290 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Alloc, class _Elem, class _RxTraits>
; 2291 : bool regex_search(const basic_string<_Elem, _StTraits, _StAlloc>&&,
; 2292 :     match_results<typename basic_string<_Elem, _StTraits, _StAlloc>::const_iterator, _Alloc>&,
; 2293 :     const basic_regex<_Elem, _RxTraits>&, regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2294 : 
; 2295 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Elem, class _RxTraits>
; 2296 : _NODISCARD bool regex_search(const basic_string<_Elem, _StTraits, _StAlloc>& _Str,
; 2297 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2298 :     // search for regular expression match in target text
; 2299 :     using _Iter = typename basic_string<_Elem, _StTraits, _StAlloc>::const_pointer;
; 2300 : 
; 2301 :     _Iter _First = _Str.c_str();
; 2302 :     _Iter _Last  = _First + _Str.size();
; 2303 :     return _Regex_search2(
; 2304 :         _First, _Last, static_cast<match_results<_Iter>*>(nullptr), _Re, _Flgs | regex_constants::match_any, _First);
; 2305 : }
; 2306 : 
; 2307 : template <class _OutIt, class _BidIt, class _RxTraits, class _Elem, class _Traits, class _Alloc>
; 2308 : _OutIt _Regex_replace1(_OutIt _Result, _BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2309 :     const basic_string<_Elem, _Traits, _Alloc>& _Fmt, regex_constants::match_flag_type _Flgs) {
; 2310 :     // search and replace
; 2311 :     match_results<_BidIt> _Matches;
; 2312 :     _BidIt _Pos                             = _First;
; 2313 :     regex_constants::match_flag_type _Flags = _Flgs;
; 2314 :     regex_constants::match_flag_type _Not_null{};
; 2315 : 
; 2316 :     while (
; 2317 :         _Regex_search2(_Pos, _Last, _STD addressof(_Matches), _Re, _Flags | _Not_null, _Pos)) { // replace at each match
; 2318 :         if (!(_Flgs & regex_constants::format_no_copy)) {
; 2319 :             _Result = _STD copy(_Matches.prefix().first, _Matches.prefix().second, _Result);
; 2320 :         }
; 2321 : 
; 2322 :         _Result = _Matches._Format1(_Result, _Fmt.data(), _Fmt.data() + _Fmt.size(), _Flags);
; 2323 : 
; 2324 :         _Pos = _Matches[0].second;
; 2325 :         if (_Pos == _Last || (_Flgs & regex_constants::format_first_only)) {
; 2326 :             break;
; 2327 :         }
; 2328 : 
; 2329 :         if (_Matches[0].first == _Matches[0].second) {
; 2330 :             _Not_null = regex_constants::_Match_not_null;
; 2331 :         } else { // non-null match, recognize earlier text
; 2332 :             _Not_null = regex_constants::match_flag_type{};
; 2333 :             _Flags |= regex_constants::match_prev_avail;
; 2334 :         }
; 2335 :     }
; 2336 :     return _Flgs & regex_constants::format_no_copy ? _Result : _STD _Copy_unchecked(_Pos, _Last, _Result);
; 2337 : }
; 2338 : 
; 2339 : _EXPORT_STD template <class _OutIt, class _BidIt, class _RxTraits, class _Elem, class _Traits, class _Alloc>
; 2340 : _OutIt regex_replace(_OutIt _Result, _BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2341 :     const basic_string<_Elem, _Traits, _Alloc>& _Fmt,
; 2342 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2343 :     // search and replace, iterator result, string format
; 2344 :     _Adl_verify_range(_First, _Last);
; 2345 :     _Seek_wrapped(_Result, _Regex_replace1(_Get_unwrapped_unverified(_Result), _Get_unwrapped(_First),
; 2346 :                                _Get_unwrapped(_Last), _Re, _Fmt, _Flgs));
; 2347 :     return _Result;
; 2348 : }
; 2349 : 
; 2350 : _EXPORT_STD template <class _OutIt, class _BidIt, class _RxTraits, class _Elem>
; 2351 : _OutIt regex_replace(_OutIt _Result, _BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2352 :     const _Elem* _Ptr, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2353 :     // search and replace, iterator result, NTBS format
; 2354 :     const basic_string<_Elem> _Fmt(_Ptr);
; 2355 :     return _STD regex_replace(_Result, _First, _Last, _Re, _Fmt, _Flgs);
; 2356 : }
; 2357 : 
; 2358 : _EXPORT_STD template <class _RxTraits, class _Elem, class _Traits1, class _Alloc1, class _Traits2, class _Alloc2>
; 2359 : _NODISCARD basic_string<_Elem, _Traits1, _Alloc1> regex_replace(const basic_string<_Elem, _Traits1, _Alloc1>& _Str,
; 2360 :     const basic_regex<_Elem, _RxTraits>& _Re, const basic_string<_Elem, _Traits2, _Alloc2>& _Fmt,
; 2361 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2362 :     // search and replace, string result, string target, string format
; 2363 :     basic_string<_Elem, _Traits1, _Alloc1> _Res;
; 2364 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);
; 2365 :     return _Res;
; 2366 : }
; 2367 : 
; 2368 : _EXPORT_STD template <class _RxTraits, class _Elem, class _Traits1, class _Alloc1>
; 2369 : _NODISCARD basic_string<_Elem, _Traits1, _Alloc1> regex_replace(const basic_string<_Elem, _Traits1, _Alloc1>& _Str,
; 2370 :     const basic_regex<_Elem, _RxTraits>& _Re, const _Elem* _Ptr,
; 2371 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2372 :     // search and replace, string result, string target, NTBS format
; 2373 :     basic_string<_Elem, _Traits1, _Alloc1> _Res;
; 2374 :     const basic_string<_Elem> _Fmt(_Ptr);
; 2375 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);
; 2376 :     return _Res;
; 2377 : }
; 2378 : 
; 2379 : _EXPORT_STD template <class _RxTraits, class _Elem, class _Traits2, class _Alloc2>
; 2380 : _NODISCARD basic_string<_Elem> regex_replace(const _Elem* _Pstr, const basic_regex<_Elem, _RxTraits>& _Re,
; 2381 :     const basic_string<_Elem, _Traits2, _Alloc2>& _Fmt,
; 2382 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2383 :     // search and replace, string result, NTBS target, string format
; 2384 :     basic_string<_Elem> _Res;
; 2385 :     const basic_string<_Elem> _Str(_Pstr);
; 2386 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);
; 2387 :     return _Res;
; 2388 : }
; 2389 : 
; 2390 : _EXPORT_STD template <class _RxTraits, class _Elem>
; 2391 : _NODISCARD basic_string<_Elem> regex_replace(const _Elem* _Pstr, const basic_regex<_Elem, _RxTraits>& _Re,
; 2392 :     const _Elem* _Ptr, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2393 :     // search and replace, string result, NTBS target, NTBS format
; 2394 :     basic_string<_Elem> _Res;
; 2395 :     const basic_string<_Elem> _Str(_Pstr);
; 2396 :     const basic_string<_Elem> _Fmt(_Ptr);
; 2397 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);
; 2398 :     return _Res;
; 2399 : }
; 2400 : 
; 2401 : _EXPORT_STD template <class _BidIt, class _Elem = _Iter_value_t<_BidIt>, class _RxTraits = regex_traits<_Elem>>
; 2402 : class regex_iterator : public _Iterator_base {
; 2403 : public:
; 2404 :     using regex_type        = basic_regex<_Elem, _RxTraits>;
; 2405 :     using value_type        = match_results<_BidIt>;
; 2406 :     using difference_type   = ptrdiff_t;
; 2407 :     using pointer           = const value_type*;
; 2408 :     using reference         = const value_type&;
; 2409 :     using iterator_category = forward_iterator_tag;
; 2410 : #if _HAS_CXX20
; 2411 :     using iterator_concept = input_iterator_tag;
; 2412 : #endif // _HAS_CXX20
; 2413 : 
; 2414 :     regex_iterator() = default; // construct end of sequence iterator
; 2415 : 
; 2416 :     regex_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re,
; 2417 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2418 :         : _Begin(_First), _End(_Last), _MyRe(_STD addressof(_Re)), _Flags(_Fl) {
; 2419 :         _Adl_verify_range(_Begin, _End);
; 2420 :         if (!_Regex_search2(_Begin, _End, _STD addressof(_MyVal), *_MyRe, _Flags, _Begin)) {
; 2421 :             _MyRe = nullptr;
; 2422 :         } else {
; 2423 :             this->_Adopt(_MyRe);
; 2424 :         }
; 2425 :     }
; 2426 : 
; 2427 :     regex_iterator(
; 2428 :         _BidIt, _BidIt, const regex_type&&, regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2429 : 
; 2430 :     _NODISCARD bool operator==(const regex_iterator& _Right) const {
; 2431 :         if (_MyRe != _Right._MyRe) {
; 2432 :             return false;
; 2433 :         } else if (!_MyRe) {
; 2434 :             return true;
; 2435 :         }
; 2436 : 
; 2437 :         return _Begin == _Right._Begin && _End == _Right._End && _Flags == _Right._Flags
; 2438 :             && _MyVal._At(0) == _Right._MyVal._At(0);
; 2439 :     }
; 2440 : 
; 2441 : #if !_HAS_CXX20
; 2442 :     _NODISCARD bool operator!=(const regex_iterator& _Right) const {
; 2443 :         return !(*this == _Right);
; 2444 :     }
; 2445 : #endif // !_HAS_CXX20
; 2446 : 
; 2447 : #if _HAS_CXX20
; 2448 :     _NODISCARD bool operator==(default_sentinel_t) const noexcept /* strengthened */ {
; 2449 :         return !_MyRe;
; 2450 :     }
; 2451 : #endif // _HAS_CXX20
; 2452 : 
; 2453 :     _NODISCARD const value_type& operator*() const noexcept /* strengthened */ {
; 2454 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2455 :         _STL_VERIFY(_MyRe, "regex_iterator not dereferenceable");
; 2456 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2457 : 
; 2458 :         return _MyVal;
; 2459 :     }
; 2460 : 
; 2461 :     _NODISCARD const value_type* operator->() const noexcept /* strengthened */ {
; 2462 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2463 :         _STL_VERIFY(_MyRe, "regex_iterator not dereferenceable");
; 2464 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2465 : 
; 2466 :         return _STD addressof(_MyVal);
; 2467 :     }
; 2468 : 
; 2469 :     regex_iterator& operator++() {
; 2470 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2471 :         _STL_VERIFY(_MyRe, "regex_iterator not incrementable");
; 2472 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2473 : 
; 2474 :         _BidIt _Start = _MyVal._At(0).second;
; 2475 : 
; 2476 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2477 :         _STL_VERIFY(this->_Getcont(), "regex_iterator orphaned");
; 2478 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2479 : 
; 2480 :         bool _Skip_empty_match = false;
; 2481 :         if (_MyVal._At(0).first == _MyVal._At(0).second) { // handle zero-length match
; 2482 :             if (_Start == _End) { // store end-of-sequence iterator
; 2483 :                 _MyRe = nullptr;
; 2484 : 
; 2485 : #if _ITERATOR_DEBUG_LEVEL == 2
; 2486 :                 this->_Adopt(nullptr);
; 2487 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 2488 : 
; 2489 :                 return *this;
; 2490 :             }
; 2491 : 
; 2492 :             // _Adl_verify_range(_Start, _End) checked in constructor
; 2493 :             if (_Regex_search2(_Start, _End, _STD addressof(_MyVal), *_MyRe,
; 2494 :                     _Flags | regex_constants::match_not_null | regex_constants::match_continuous, _Begin)) {
; 2495 :                 return *this;
; 2496 :             }
; 2497 : 
; 2498 :             _Skip_empty_match = true;
; 2499 :         }
; 2500 :         _Flags = _Flags | regex_constants::match_prev_avail;
; 2501 : 
; 2502 :         auto _Tmp_flags = _Flags;
; 2503 :         if (_Skip_empty_match) {
; 2504 :             _Tmp_flags |= regex_constants::_Skip_zero_length;
; 2505 :         }
; 2506 : 
; 2507 :         // _Adl_verify_range(_Start, _End) checked in constructor
; 2508 :         if (!_Regex_search2(_Start, _End, _STD addressof(_MyVal), *_MyRe, _Tmp_flags, _Begin)) {
; 2509 :             // mark at end of sequence
; 2510 :             _MyRe = nullptr;
; 2511 :         }
; 2512 : 
; 2513 :         return *this;
; 2514 :     }
; 2515 : 
; 2516 :     regex_iterator operator++(int) {
; 2517 :         regex_iterator _Tmp = *this;
; 2518 :         ++*this;
; 2519 :         return _Tmp;
; 2520 :     }
; 2521 : 
; 2522 :     bool _Atend() const noexcept { // test for end iterator
; 2523 :         return !_MyRe;
; 2524 :     }
; 2525 : 
; 2526 : private:
; 2527 :     _BidIt _Begin{}; // input sequence
; 2528 :     _BidIt _End{}; // input sequence
; 2529 :     const regex_type* _MyRe = nullptr; // pointer to basic_regex object
; 2530 :     regex_constants::match_flag_type _Flags{};
; 2531 :     match_results<_BidIt> _MyVal; // lookahead value (if _MyRe not null)
; 2532 : };
; 2533 : 
; 2534 : _EXPORT_STD using cregex_iterator  = regex_iterator<const char*>;
; 2535 : _EXPORT_STD using wcregex_iterator = regex_iterator<const wchar_t*>;
; 2536 : _EXPORT_STD using sregex_iterator  = regex_iterator<string::const_iterator>;
; 2537 : _EXPORT_STD using wsregex_iterator = regex_iterator<wstring::const_iterator>;
; 2538 : 
; 2539 : _EXPORT_STD template <class _BidIt, class _Elem = _Iter_value_t<_BidIt>, class _RxTraits = regex_traits<_Elem>>
; 2540 : class regex_token_iterator {
; 2541 : public:
; 2542 :     using _Position         = regex_iterator<_BidIt, _Elem, _RxTraits>;
; 2543 :     using regex_type        = basic_regex<_Elem, _RxTraits>;
; 2544 :     using value_type        = sub_match<_BidIt>;
; 2545 :     using difference_type   = ptrdiff_t;
; 2546 :     using pointer           = const value_type*;
; 2547 :     using reference         = const value_type&;
; 2548 :     using iterator_category = forward_iterator_tag;
; 2549 : #if _HAS_CXX20
; 2550 :     using iterator_concept = input_iterator_tag;
; 2551 : #endif // _HAS_CXX20
; 2552 : 
; 2553 :     regex_token_iterator() = default; // construct end of sequence iterator
; 2554 : 
; 2555 :     regex_token_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re, int _Sub = 0,
; 2556 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2557 :         : _Pos(_First, _Last, _Re, _Fl), _Cur(0), _Subs(&_Sub, &_Sub + 1) {
; 2558 :         _Init(_First, _Last);
; 2559 :     }
; 2560 : 
; 2561 :     regex_token_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re, const vector<int>& _Subx,
; 2562 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2563 :         : _Pos(_First, _Last, _Re, _Fl), _Cur(0), _Subs(_Subx.begin(), _Subx.end()) {
; 2564 :         if (_Subs.empty()) {
; 2565 :             _Res = nullptr; // treat empty vector as end of sequence
; 2566 :         } else {
; 2567 :             _Init(_First, _Last);
; 2568 :         }
; 2569 :     }
; 2570 : 
; 2571 :     template <size_t _Nx>
; 2572 :     regex_token_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re, const int (&_Subx)[_Nx],
; 2573 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2574 :         : _Pos(_First, _Last, _Re, _Fl), _Cur(0), _Subs(_Subx, _Subx + _Nx) {
; 2575 :         _Init(_First, _Last);
; 2576 :     }
; 2577 : 
; 2578 :     regex_token_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re, initializer_list<int> _Ilist,
; 2579 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2580 :         : _Pos(_First, _Last, _Re, _Fl), _Cur(0), _Subs(_Ilist.begin(), _Ilist.end()) {
; 2581 :         _Init(_First, _Last);
; 2582 :     }
; 2583 : 
; 2584 :     regex_token_iterator(_BidIt, _BidIt, const regex_type&&, int = 0,
; 2585 :         regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2586 : 
; 2587 :     regex_token_iterator(_BidIt, _BidIt, const regex_type&&, const vector<int>&,
; 2588 :         regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2589 : 
; 2590 :     template <size_t _Nx>
; 2591 :     regex_token_iterator(_BidIt, _BidIt, const regex_type&&, const int (&)[_Nx],
; 2592 :         regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2593 : 
; 2594 :     regex_token_iterator(_BidIt, _BidIt, const regex_type&&, initializer_list<int>,
; 2595 :         regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2596 : 
; 2597 :     regex_token_iterator(const regex_token_iterator& _Right)
; 2598 :         : _Pos(_Right._Pos), _Suffix(_Right._Suffix), _Cur(_Right._Cur), _Subs(_Right._Subs) {
; 2599 :         // construct copy of _Right
; 2600 :         if (!_Right._Res) {
; 2601 :             _Res = nullptr;
; 2602 :         } else if (_Right._Res == _STD addressof(_Right._Suffix)) {
; 2603 :             _Res = _STD addressof(_Suffix);
; 2604 :         } else {
; 2605 :             _Res = _Current();
; 2606 :         }
; 2607 :     }
; 2608 : 
; 2609 :     regex_token_iterator& operator=(const regex_token_iterator& _Right) {
; 2610 :         if (this != _STD addressof(_Right)) { // copy from _Right
; 2611 :             _Pos    = _Right._Pos;
; 2612 :             _Cur    = _Right._Cur;
; 2613 :             _Suffix = _Right._Suffix;
; 2614 :             _Subs   = _Right._Subs;
; 2615 :             if (!_Right._Res) {
; 2616 :                 _Res = nullptr;
; 2617 :             } else if (_Right._Res == _STD addressof(_Right._Suffix)) {
; 2618 :                 _Res = _STD addressof(_Suffix);
; 2619 :             } else {
; 2620 :                 _Res = _Current();
; 2621 :             }
; 2622 :         }
; 2623 :         return *this;
; 2624 :     }
; 2625 : 
; 2626 :     _NODISCARD bool operator==(const regex_token_iterator& _Right) const {
; 2627 :         if (!_Res || !_Right._Res) {
; 2628 :             return _Res == _Right._Res;
; 2629 :         }
; 2630 : 
; 2631 :         return *_Res == *_Right._Res && _Pos == _Right._Pos && _Subs == _Right._Subs;
; 2632 :     }
; 2633 : 
; 2634 : #if !_HAS_CXX20
; 2635 :     _NODISCARD bool operator!=(const regex_token_iterator& _Right) const {
; 2636 :         return !(*this == _Right);
; 2637 :     }
; 2638 : #endif // !_HAS_CXX20
; 2639 : 
; 2640 : #if _HAS_CXX20
; 2641 :     _NODISCARD bool operator==(default_sentinel_t) const noexcept /* strengthened */ {
; 2642 :         return !_Res;
; 2643 :     }
; 2644 : #endif // _HAS_CXX20
; 2645 : 
; 2646 :     _NODISCARD const value_type& operator*() const noexcept /* strengthened */ {
; 2647 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2648 :         _STL_VERIFY(_Res, "regex_token_iterator not dereferenceable");
; 2649 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2650 : 
; 2651 :         _Analysis_assume_(_Res);
; 2652 :         return *_Res;
; 2653 :     }
; 2654 : 
; 2655 :     _NODISCARD const value_type* operator->() const noexcept /* strengthened */ {
; 2656 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2657 :         _STL_VERIFY(_Res, "regex_token_iterator not dereferenceable");
; 2658 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2659 : 
; 2660 :         return _Res;
; 2661 :     }
; 2662 : 
; 2663 :     regex_token_iterator& operator++() {
; 2664 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2665 :         _STL_VERIFY(_Res, "regex_token_iterator not incrementable");
; 2666 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2667 : 
; 2668 :         if (_Res == _STD addressof(_Suffix)) {
; 2669 :             _Res = nullptr;
; 2670 :         } else if (++_Cur < _Subs.size()) {
; 2671 :             _Res = _Current();
; 2672 :         } else { // advance to next full match
; 2673 :             _Cur = 0;
; 2674 :             _Position _Prev(_Pos);
; 2675 :             ++_Pos;
; 2676 :             if (!_Pos._Atend()) {
; 2677 :                 _Res = _Current();
; 2678 :             } else if (_Has_suffix() && _Prev->suffix().length() != 0) { // mark suffix
; 2679 :                 _Suffix.matched = true;
; 2680 :                 _Suffix.first   = _Prev->suffix().first;
; 2681 :                 _Suffix.second  = _Prev->suffix().second;
; 2682 :                 _Res            = _STD addressof(_Suffix);
; 2683 :             } else {
; 2684 :                 _Res = nullptr;
; 2685 :             }
; 2686 :         }
; 2687 : 
; 2688 :         return *this;
; 2689 :     }
; 2690 : 
; 2691 :     regex_token_iterator operator++(int) {
; 2692 :         regex_token_iterator _Tmp = *this;
; 2693 :         ++*this;
; 2694 :         return _Tmp;
; 2695 :     }
; 2696 : 
; 2697 : private:
; 2698 :     _Position _Pos;
; 2699 :     const value_type* _Res = nullptr;
; 2700 :     value_type _Suffix;
; 2701 :     size_t _Cur = 0;
; 2702 :     vector<int> _Subs;
; 2703 : 
; 2704 :     bool _Has_suffix() const { // check for suffix specifier
; 2705 :         return _STD find(_Subs.begin(), _Subs.end(), -1) != _Subs.end();
; 2706 :     }
; 2707 : 
; 2708 :     void _Init(_BidIt _First, _BidIt _Last) { // initialize
; 2709 :         _Adl_verify_range(_First, _Last);
; 2710 :         if (!_Pos._Atend()) {
; 2711 :             _Res = _Current();
; 2712 :         } else if (_Has_suffix()) { // mark suffix (no match)
; 2713 :             _Suffix.matched = true;
; 2714 :             _Suffix.first   = _First;
; 2715 :             _Suffix.second  = _Last;
; 2716 :             _Res            = _STD addressof(_Suffix);
; 2717 :         } else {
; 2718 :             _Res = nullptr;
; 2719 :         }
; 2720 :     }
; 2721 : 
; 2722 :     const value_type* _Current() const noexcept {
; 2723 :         return &(_Subs[_Cur] == -1 ? _Pos->prefix() : (*_Pos)[static_cast<size_t>(_Subs[_Cur])]);
; 2724 :     }
; 2725 : };
; 2726 : 
; 2727 : _EXPORT_STD using cregex_token_iterator  = regex_token_iterator<const char*>;
; 2728 : _EXPORT_STD using wcregex_token_iterator = regex_token_iterator<const wchar_t*>;
; 2729 : _EXPORT_STD using sregex_token_iterator  = regex_token_iterator<string::const_iterator>;
; 2730 : _EXPORT_STD using wsregex_token_iterator = regex_token_iterator<wstring::const_iterator>;
; 2731 : 
; 2732 : template <class _FwdIt, class _Elem, class _RxTraits>
; 2733 : _Builder<_FwdIt, _Elem, _RxTraits>::_Builder(const _RxTraits& _Tr, regex_constants::syntax_option_type _Fx)
; 2734 :     : _Root(new _Root_node), _Current(_Root), _Flags(_Fx), _Traits(_Tr),

  00004	6a 24		 push	 36			; 00000024H
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	74 40		 je	 SHORT $LN3@Builder

; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}

  00014	c7 40 04 14 00
	00 00		 mov	 DWORD PTR [eax+4], 20	; 00000014H
  0001b	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;

  00022	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 1332 :     _Node_base* _Prev = nullptr;

  00029	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1348 :     _Root_node() noexcept : _Node_base(_N_begin) {

  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Root_node@std@@6B@

; 1349 :         static_assert(sizeof(_Refs) == sizeof(_Atomic_counter_t), "invalid _Refs size");
; 1350 :     }
; 1351 : 
; 1352 :     regex_constants::syntax_option_type _Fl{};

  00036	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1353 :     unsigned int _Loops = 0;

  0003d	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 1354 :     unsigned int _Marks = 0;

  00044	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 1355 :     unsigned int _Refs  = 0;

  0004b	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 1356 : };
; 1357 : 
; 1358 : class _Node_end_group : public _Node_base { // node that marks end of a group
; 1359 : public:
; 1360 :     _Node_end_group(_Node_type _Ty, _Node_flags _Fl, _Node_base* _Bx) noexcept : _Node_base(_Ty, _Fl), _Back(_Bx) {}
; 1361 : 
; 1362 :     _Node_base* _Back;
; 1363 : };
; 1364 : 
; 1365 : class _Node_assert : public _Node_base { // node that holds an ECMAScript assertion
; 1366 : public:
; 1367 :     explicit _Node_assert(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Node_base(_Ty, _Fl) {}
; 1368 : 
; 1369 :     ~_Node_assert() noexcept {
; 1370 :         _Destroy_node(_Child);
; 1371 :     }
; 1372 : 
; 1373 :     _Node_base* _Child = nullptr;
; 1374 : };
; 1375 : 
; 1376 : class _Node_capture : public _Node_base { // node that marks beginning of a capture group
; 1377 : public:
; 1378 :     explicit _Node_capture(unsigned int _Ix) noexcept : _Node_base(_N_capture, _Fl_none), _Idx(_Ix) {}
; 1379 : 
; 1380 :     unsigned int _Idx;
; 1381 : };
; 1382 : 
; 1383 : class _Node_back : public _Node_base { // node that holds a back reference
; 1384 : public:
; 1385 :     explicit _Node_back(unsigned int _Ix) noexcept : _Node_base(_N_back, _Fl_none), _Idx(_Ix) {}
; 1386 : 
; 1387 :     unsigned int _Idx;
; 1388 : };
; 1389 : 
; 1390 : template <class _Elem>
; 1391 : class _Node_str : public _Node_base { // node that holds text
; 1392 : public:
; 1393 :     explicit _Node_str(_Node_flags _Fl = _Fl_none) noexcept : _Node_base(_N_str, _Fl) {}
; 1394 : 
; 1395 :     _Buf<_Elem> _Data;
; 1396 : };
; 1397 : 
; 1398 : template <class _Elem, class _RxTraits>
; 1399 : class _Node_class : public _Node_base { // node that holds a character class (POSIX bracket expression)
; 1400 : public:
; 1401 :     explicit _Node_class(_Node_type _Ty = _N_class, _Node_flags _Fl = _Fl_none) noexcept : _Node_base(_Ty, _Fl) {}
; 1402 : 
; 1403 :     ~_Node_class() noexcept {
; 1404 :         _Tidy(_Coll);
; 1405 :         delete _Small;
; 1406 :         delete _Large;
; 1407 :         delete _Ranges;
; 1408 :         _Tidy(_Equiv);
; 1409 :     }
; 1410 : 
; 1411 :     void _Tidy(_Sequence<_Elem>* _Head) noexcept { // clean up a list of sequences
; 1412 :         while (_Head) { // delete the head of the list
; 1413 :             _Sequence<_Elem>* _Temp = _Head;
; 1414 :             _Head                   = _Head->_Next;
; 1415 :             delete _Temp;
; 1416 :         }
; 1417 :     }
; 1418 : 
; 1419 :     _Sequence<_Elem>* _Coll = nullptr;
; 1420 :     _Bitmap* _Small         = nullptr;
; 1421 :     _Buf<_Elem>* _Large     = nullptr;
; 1422 :     _Buf<_Elem>* _Ranges    = nullptr;
; 1423 :     typename _RxTraits::char_class_type _Classes{};
; 1424 :     _Sequence<_Elem>* _Equiv = nullptr;
; 1425 : };
; 1426 : 
; 1427 : class _Node_endif : public _Node_base { // node that marks the end of an alternative
; 1428 : public:
; 1429 :     _Node_endif() noexcept : _Node_base(_N_endif, _Fl_none) {}
; 1430 : };
; 1431 : 
; 1432 : class _Node_if : public _Node_base { // node that marks the beginning of an alternative
; 1433 : public:
; 1434 :     explicit _Node_if(_Node_base* _End) noexcept
; 1435 :         : _Node_base(_N_if, _Fl_none), _Endif(static_cast<_Node_endif*>(_End)) {}
; 1436 : 
; 1437 :     ~_Node_if() noexcept {
; 1438 :         _Node_if* _Cur = _Child;
; 1439 :         while (_Cur) { // destroy branch
; 1440 :             _Node_if* _Tmp = _Cur;
; 1441 :             _Cur           = _Cur->_Child;
; 1442 :             _Tmp->_Child   = nullptr;
; 1443 :             _Destroy_node(_Tmp, _Endif);
; 1444 :         }
; 1445 :     }
; 1446 : 
; 1447 :     _Node_endif* _Endif;
; 1448 :     _Node_if* _Child = nullptr;
; 1449 : };
; 1450 : 
; 1451 : class _Node_rep;
; 1452 : 
; 1453 : class _Node_end_rep : public _Node_base { // node that marks the end of a repetition
; 1454 : public:
; 1455 :     _Node_end_rep() noexcept : _Node_base(_N_end_rep) {}
; 1456 : 
; 1457 :     _Node_rep* _Begin_rep = nullptr;
; 1458 : 
; 1459 :     _Node_end_rep& operator=(const _Node_end_rep&) = delete;
; 1460 : };
; 1461 : 
; 1462 : struct _Loop_vals_t { // storage for loop administration
; 1463 :     int _Loop_idx;
; 1464 :     void* _Loop_iter;
; 1465 : };
; 1466 : 
; 1467 : class _Node_rep : public _Node_base { // node that marks the beginning of a repetition
; 1468 : public:
; 1469 :     _Node_rep(bool _Greedy, int _Min_, int _Max_, _Node_end_rep* _End, unsigned int _Number) noexcept
; 1470 :         : _Node_base(_N_rep, _Greedy ? _Fl_greedy : _Fl_none), _Min(_Min_), _Max(_Max_), _End_rep(_End),
; 1471 :           _Loop_number(_Number) {}
; 1472 : 
; 1473 :     const int _Min;
; 1474 :     const int _Max;
; 1475 :     _Node_end_rep* _End_rep;
; 1476 :     unsigned int _Loop_number;
; 1477 :     int _Simple_loop = -1; // -1 undetermined, 0 contains if/do, 1 simple
; 1478 : 
; 1479 :     _Node_rep& operator=(const _Node_rep&) = delete;
; 1480 : };
; 1481 : 
; 1482 : template <class _FwdIt, class _Elem, class _RxTraits>
; 1483 : class _Builder { // provides operations used by _Parser to build the nfa
; 1484 : public:
; 1485 :     using _Difft = typename iterator_traits<_FwdIt>::difference_type;
; 1486 : 
; 1487 :     _Builder(const _RxTraits& _Tr, regex_constants::syntax_option_type);
; 1488 :     bool _Beg_expr() const;
; 1489 :     void _Setlong();
; 1490 :     // _Discard_pattern is an ABI zombie name
; 1491 :     void _Tidy() noexcept;
; 1492 :     _Node_base* _Getmark() const;
; 1493 : 
; 1494 :     void _Add_nop();
; 1495 :     void _Add_bol();
; 1496 :     void _Add_eol();
; 1497 :     void _Add_wbound();
; 1498 :     void _Add_dot();
; 1499 :     void _Add_char(_Elem _Ch);
; 1500 :     void _Add_class();
; 1501 :     void _Add_char_to_class(_Elem _Ch);
; 1502 :     void _Add_range(_Elem _Ex0, _Elem _Ex1);
; 1503 :     void _Add_named_class(_Regex_traits_base::char_class_type, bool = false);
; 1504 :     void _Add_equiv(_FwdIt, _FwdIt, _Difft);
; 1505 :     void _Add_coll(_FwdIt, _FwdIt, _Difft);
; 1506 :     _Node_base* _Begin_group();
; 1507 :     void _End_group(_Node_base* _Back);
; 1508 :     _Node_base* _Begin_assert_group(bool);
; 1509 :     void _End_assert_group(_Node_base*);
; 1510 :     _Node_base* _Begin_capture_group(unsigned int _Idx);
; 1511 :     void _Add_backreference(unsigned int _Idx);
; 1512 :     _Node_base* _Begin_if(_Node_base* _Start);
; 1513 :     void _Else_if(_Node_base*, _Node_base*);
; 1514 :     void _Add_rep(int _Min, int _Max, bool _Greedy);
; 1515 :     void _Negate();
; 1516 :     void _Mark_final();
; 1517 :     _Root_node* _End_pattern();
; 1518 : 
; 1519 : private:
; 1520 :     _Node_base* _Link_node(_Node_base*);
; 1521 :     static void _Insert_node(_Node_base*, _Node_base*);
; 1522 :     _Node_base* _New_node(_Node_type _Kind);
; 1523 :     void _Add_str_node();
; 1524 :     bool _Beg_expr(_Node_base*) const;
; 1525 :     void _Add_char_to_bitmap(_Elem _Ch);
; 1526 :     void _Add_char_to_array(_Elem _Ch);
; 1527 :     void _Add_elts(_Node_class<_Elem, _RxTraits>*, _Regex_traits_base::char_class_type, bool);
; 1528 :     void _Char_to_elts(_FwdIt, _FwdIt, _Difft, _Sequence<_Elem>**);
; 1529 : 
; 1530 :     _Root_node* _Root;
; 1531 :     _Node_base* _Current;
; 1532 :     regex_constants::syntax_option_type _Flags;
; 1533 :     const _RxTraits& _Traits;
; 1534 :     const int _Bmax; // Do not use; use _Get_bmax instead.
; 1535 :     const int _Tmax; // Do not use; use _Get_tmax instead.
; 1536 : 
; 1537 :     unsigned int _Get_bmax() const;
; 1538 :     unsigned int _Get_tmax() const;
; 1539 : 
; 1540 : public:
; 1541 :     _Builder& operator=(const _Builder&) = delete;
; 1542 : };
; 1543 : 
; 1544 : template <class _BidIt>
; 1545 : class _Bt_state_t { // holds the state needed for backtracking
; 1546 : public:
; 1547 :     _BidIt _Cur;
; 1548 :     vector<bool> _Grp_valid;
; 1549 : };
; 1550 : 
; 1551 : template <class _BidIt>
; 1552 : class _Tgt_state_t : public _Bt_state_t<_BidIt> { // holds the current state of the match
; 1553 : public:
; 1554 :     struct _Grp_t { // stores a pair of iterators
; 1555 :         _BidIt _Begin;
; 1556 :         _BidIt _End;
; 1557 :     };
; 1558 : 
; 1559 :     vector<_Grp_t> _Grps;
; 1560 : 
; 1561 :     void operator=(const _Bt_state_t<_BidIt>& _Other) {
; 1562 :         static_cast<_Bt_state_t<_BidIt>&>(*this) = _Other;
; 1563 :     }
; 1564 : };
; 1565 : 
; 1566 : template <class _BidIt, class _Elem, class _RxTraits, class _It>
; 1567 : class _Matcher { // provides ways to match a regular expression to a text sequence
; 1568 : public:
; 1569 :     _Matcher(_It _Pfirst, _It _Plast, const _RxTraits& _Tr, _Root_node* _Re, unsigned int _Nx,
; 1570 :         regex_constants::syntax_option_type _Sf, regex_constants::match_flag_type _Mf)
; 1571 :         : _End(_Plast), _First(_Pfirst), _Rep(_Re), _Sflags(_Sf), _Mflags(_Mf), _Ncap(static_cast<int>(_Nx)),
; 1572 :           _Longest((_Re->_Flags & _Fl_longest) && !(_Mf & regex_constants::match_any)), _Traits(_Tr) {
; 1573 :         _Loop_vals.resize(_Re->_Loops);
; 1574 :         _Adl_verify_range(_Pfirst, _Plast);
; 1575 :     }
; 1576 : 
; 1577 :     void _Setf(regex_constants::match_flag_type _Mf) { // set specified flags
; 1578 :         _Mflags |= _Mf;
; 1579 :     }
; 1580 : 
; 1581 :     void _Clearf(regex_constants::match_flag_type _Mf) { // clear specified flags
; 1582 :         _Mflags &= ~_Mf;
; 1583 :     }
; 1584 : 
; 1585 :     template <class _Alloc>
; 1586 :     bool _Match(_It _Pfirst, match_results<_BidIt, _Alloc>* _Matches, bool _Full_match) {
; 1587 :         // try to match
; 1588 :         _First = _Pfirst;
; 1589 :         return _Match(_Matches, _Full_match);
; 1590 :     }
; 1591 : 
; 1592 :     template <class _Alloc>
; 1593 :     bool _Match(match_results<_BidIt, _Alloc>* _Matches, bool _Full_match) {
; 1594 :         // try to match
; 1595 :         if (_Matches) { // clear _Matches before doing work
; 1596 :             _Matches->_Ready = true;
; 1597 :             _Matches->_Resize(0);
; 1598 :         }
; 1599 : 
; 1600 :         _Begin          = _First;
; 1601 :         _Tgt_state._Cur = _First;
; 1602 :         _Tgt_state._Grp_valid.resize(_Get_ncap());
; 1603 :         _Tgt_state._Grps.resize(_Get_ncap());
; 1604 :         _Cap                  = static_cast<bool>(_Matches);
; 1605 :         _Full                 = _Full_match;
; 1606 :         _Max_complexity_count = _REGEX_MAX_COMPLEXITY_COUNT;
; 1607 :         _Max_stack_count      = _REGEX_MAX_STACK_COUNT;
; 1608 : 
; 1609 :         _Matched = false;
; 1610 : 
; 1611 :         if (!_Match_pat(_Rep)) {
; 1612 :             return false;
; 1613 :         }
; 1614 : 
; 1615 :         if (_Matches) { // copy results to _Matches
; 1616 :             _Matches->_Resize(_Get_ncap());
; 1617 :             for (unsigned int _Idx = 0; _Idx < _Get_ncap(); ++_Idx) { // copy submatch _Idx
; 1618 :                 if (_Res._Grp_valid[_Idx]) { // copy successful match
; 1619 :                     _Matches->_At(_Idx).matched = true;
; 1620 :                     _Matches->_At(_Idx).first   = _Res._Grps[_Idx]._Begin;
; 1621 :                     _Matches->_At(_Idx).second  = _Res._Grps[_Idx]._End;
; 1622 :                 } else { // copy failed match
; 1623 :                     _Matches->_At(_Idx).matched = false;
; 1624 :                     _Matches->_At(_Idx).first   = _End;
; 1625 :                     _Matches->_At(_Idx).second  = _End;
; 1626 :                 }
; 1627 :             }
; 1628 :             _Matches->_Org           = _Begin;
; 1629 :             _Matches->_Pfx().first   = _Begin;
; 1630 :             _Matches->_Pfx().second  = _Matches->_At(0).first;
; 1631 :             _Matches->_Pfx().matched = _Matches->_Pfx().first != _Matches->_Pfx().second;
; 1632 : 
; 1633 :             _Matches->_Sfx().first   = _Matches->_At(0).second;
; 1634 :             _Matches->_Sfx().second  = _End;
; 1635 :             _Matches->_Sfx().matched = _Matches->_Sfx().first != _Matches->_Sfx().second;
; 1636 : 
; 1637 :             _Matches->_Null().first  = _End;
; 1638 :             _Matches->_Null().second = _End;
; 1639 :         }
; 1640 :         return true;
; 1641 :     }
; 1642 : 
; 1643 :     _BidIt _Skip(_BidIt, _BidIt, _Node_base* = nullptr);
; 1644 : 
; 1645 : private:
; 1646 :     _Tgt_state_t<_It> _Tgt_state;
; 1647 :     _Tgt_state_t<_It> _Res;
; 1648 :     vector<_Loop_vals_t> _Loop_vals;
; 1649 : 
; 1650 :     bool _Do_if(_Node_if*);
; 1651 :     bool _Do_rep0(_Node_rep*, bool);
; 1652 :     bool _Do_rep(_Node_rep*, bool, int);
; 1653 :     bool _Do_class(_Node_base*);
; 1654 :     bool _Match_pat(_Node_base*);
; 1655 :     bool _Better_match();
; 1656 :     bool _Is_wbound() const;
; 1657 : 
; 1658 :     unsigned int _Get_ncap() const;
; 1659 : 
; 1660 :     _It _Begin;
; 1661 :     _It _End;
; 1662 :     _It _First;
; 1663 :     _Node_base* _Rep;
; 1664 :     regex_constants::syntax_option_type _Sflags;
; 1665 :     regex_constants::match_flag_type _Mflags;
; 1666 :     bool _Matched = false;
; 1667 :     bool _Cap;
; 1668 :     int _Ncap; // Do not use. Use _Get_ncap instead.
; 1669 :     bool _Longest;
; 1670 :     const _RxTraits& _Traits;
; 1671 :     bool _Full;
; 1672 :     long _Max_complexity_count;
; 1673 :     long _Max_stack_count;
; 1674 : 
; 1675 : public:
; 1676 :     _Matcher& operator=(const _Matcher&) = delete;
; 1677 : };
; 1678 : 
; 1679 : enum _Prs_ret { // indicate class element type
; 1680 :     _Prs_none,
; 1681 :     _Prs_chr,
; 1682 :     _Prs_set
; 1683 : };
; 1684 : 
; 1685 : template <class _FwdIt, class _Elem, class _RxTraits>
; 1686 : class _Parser { // parse a regular expression
; 1687 : public:
; 1688 :     using char_class_type = typename _RxTraits::char_class_type;
; 1689 : 
; 1690 :     _Parser(const _RxTraits& _Tr, _FwdIt _Pfirst, _FwdIt _Plast, regex_constants::syntax_option_type _Fx);
; 1691 :     _Root_node* _Compile();
; 1692 : 
; 1693 :     unsigned int _Mark_count() const noexcept {
; 1694 :         return _Grp_idx + 1;
; 1695 :     }
; 1696 : 
; 1697 : private:
; 1698 :     // lexing
; 1699 :     void _Error(regex_constants::error_type);
; 1700 : 
; 1701 :     bool _Is_esc() const;
; 1702 :     void _Trans();
; 1703 :     void _Next();
; 1704 :     void _Expect(_Meta_type, regex_constants::error_type);
; 1705 : 
; 1706 :     // parsing
; 1707 :     int _Do_digits(int _Base, int _Count, regex_constants::error_type _Error_type);
; 1708 :     bool _DecimalDigits(regex_constants::error_type _Error_type);
; 1709 :     void _HexDigits(int);
; 1710 :     bool _OctalDigits();
; 1711 :     void _Do_ex_class(_Meta_type);
; 1712 :     bool _CharacterClassEscape(bool);
; 1713 :     _Prs_ret _ClassEscape(bool);
; 1714 :     _Prs_ret _ClassAtom();
; 1715 :     void _ClassRanges();
; 1716 :     void _CharacterClass();
; 1717 :     bool _IdentityEscape();
; 1718 :     bool _IsIdentityEscape() const;
; 1719 :     bool _Do_ffn(_Elem);
; 1720 :     bool _Do_ffnx(_Elem);
; 1721 :     bool _CharacterEscape();
; 1722 :     void _AtomEscape();
; 1723 :     void _Do_capture_group();
; 1724 :     void _Do_noncapture_group();
; 1725 :     void _Do_assert_group(bool);
; 1726 :     bool _Wrapped_disjunction();
; 1727 :     void _Quantifier();
; 1728 :     bool _Alternative();
; 1729 :     void _Disjunction();
; 1730 : 
; 1731 :     _FwdIt _Pat;
; 1732 :     _FwdIt _Begin;
; 1733 :     _FwdIt _End;
; 1734 :     unsigned int _Grp_idx = 0;
; 1735 :     int _Disj_count       = 0;
; 1736 :     vector<bool> _Finished_grps;
; 1737 :     _Builder<_FwdIt, _Elem, _RxTraits> _Nfa;
; 1738 :     const _RxTraits& _Traits;
; 1739 :     regex_constants::syntax_option_type _Flags;
; 1740 :     int _Val;
; 1741 :     _Elem _Char;
; 1742 :     _Meta_type _Mchar;
; 1743 :     unsigned int _L_flags;
; 1744 : };
; 1745 : 
; 1746 : enum _Lang_flags { // describe language properties
; 1747 :     _L_ext_rep    = 0x00000001, // + and ? repetitions
; 1748 :     _L_alt_pipe   = 0x00000002, // uses '|' for alternation
; 1749 :     _L_alt_nl     = 0x00000004, // uses '\n' for alternation (grep, egrep)
; 1750 :     _L_nex_grp    = 0x00000008, // has non-escaped capture groups
; 1751 :     _L_nex_rep    = 0x00000010, // has non-escaped repeats
; 1752 :     _L_nc_grp     = 0x00000020, // has non-capture groups (?:xxx)
; 1753 :     _L_asrt_gen   = 0x00000040, // has generalized assertions (?=xxx), (?!xxx)
; 1754 :     _L_asrt_wrd   = 0x00000080, // has word boundary assertions (\b, \B)
; 1755 :     _L_bckr       = 0x00000100, // has backreferences (ERE doesn't)
; 1756 :     _L_lim_bckr   = 0x00000200, // has limited backreferences (BRE \1-\9)
; 1757 :     _L_ngr_rep    = 0x00000400, // has non-greedy repeats
; 1758 :     _L_esc_uni    = 0x00000800, // has Unicode escape sequences
; 1759 :     _L_esc_hex    = 0x00001000, // has hexadecimal escape sequences
; 1760 :     _L_esc_oct    = 0x00002000, // has octal escape sequences
; 1761 :     _L_esc_bsl    = 0x00004000, // has escape backslash in character classes
; 1762 :     _L_esc_ffnx   = 0x00008000, // has extra file escapes (\a and \b)
; 1763 :     _L_esc_ffn    = 0x00010000, // has limited file escapes (\[fnrtv])
; 1764 :     _L_esc_wsd    = 0x00020000, // has w, s, and d character set escapes
; 1765 :     _L_esc_ctrl   = 0x00040000, // has control escape
; 1766 :     _L_no_nl      = 0x00080000, // no newline in pattern or matching text
; 1767 :     _L_bzr_chr    = 0x00100000, // \0 is a valid character constant
; 1768 :     _L_grp_esc    = 0x00200000, // \ is special character in group
; 1769 :     _L_ident_ECMA = 0x00400000, // ECMA identity escape (not identifierpart)
; 1770 :     _L_ident_ERE  = 0x00800000, // ERE identity escape (.[\*^$, plus {+?}()
; 1771 :     _L_ident_awk  = 0x01000000, // awk identity escape ( ERE plus "/)
; 1772 :     _L_anch_rstr  = 0x02000000, // anchor restricted to beginning/end
; 1773 :     _L_star_beg   = 0x04000000, // star okay at beginning of RE/expr (BRE)
; 1774 :     _L_empty_grp  = 0x08000000, // empty group allowed (ERE prohibits "()")
; 1775 :     _L_paren_bal  = 0x10000000, // ')'/'}'/']' special only after '('/'{'/']'
; 1776 :     _L_brk_rstr   = 0x20000000, // ']' not special when first character in set
; 1777 :     _L_mtch_long  = 0x40000000, // find longest match (ERE, BRE)
; 1778 : };
; 1779 : 
; 1780 : class _Regex_base : public _Container_base { // base class for basic_regex to construct and destroy proxy
; 1781 : public:
; 1782 : #if 0 < _ITERATOR_DEBUG_LEVEL
; 1783 :     _Regex_base() { // construct proxy
; 1784 :         this->_Myproxy = new _Container_proxy;
; 1785 :         this->_Myproxy->_Mycont = this;
; 1786 :     }
; 1787 : 
; 1788 :     ~_Regex_base() noexcept {
; 1789 :         this->_Orphan_all();
; 1790 :         delete this->_Myproxy;
; 1791 :         this->_Myproxy = nullptr;
; 1792 :     }
; 1793 : #endif // 0 < _ITERATOR_DEBUG_LEVEL
; 1794 : };
; 1795 : 
; 1796 : _EXPORT_STD template <class _Elem, class _RxTraits = regex_traits<_Elem>>
; 1797 : class basic_regex : public _Regex_base { // regular expression
; 1798 : public:
; 1799 :     using value_type  = _Elem;
; 1800 :     using traits_type = _RxTraits;
; 1801 :     using locale_type = typename _RxTraits::locale_type;
; 1802 :     using string_type = typename _RxTraits::string_type;
; 1803 :     using flag_type   = regex_constants::syntax_option_type;
; 1804 : 
; 1805 :     static constexpr flag_type icase      = regex_constants::icase;
; 1806 :     static constexpr flag_type nosubs     = regex_constants::nosubs;
; 1807 :     static constexpr flag_type optimize   = regex_constants::optimize;
; 1808 :     static constexpr flag_type collate    = regex_constants::collate;
; 1809 :     static constexpr flag_type ECMAScript = regex_constants::ECMAScript;
; 1810 :     static constexpr flag_type basic      = regex_constants::basic;
; 1811 :     static constexpr flag_type extended   = regex_constants::extended;
; 1812 :     static constexpr flag_type awk        = regex_constants::awk;
; 1813 :     static constexpr flag_type grep       = regex_constants::grep;
; 1814 :     static constexpr flag_type egrep      = regex_constants::egrep;
; 1815 : 
; 1816 :     basic_regex() = default; // construct empty object
; 1817 : 
; 1818 :     explicit basic_regex(_In_z_ const _Elem* _Ptr, flag_type _Flags = regex_constants::ECMAScript) {
; 1819 :         _Reset(_Ptr, _Ptr + _RxTraits::length(_Ptr), _Flags);
; 1820 :     }
; 1821 : 
; 1822 :     basic_regex(_In_reads_(_Count) const _Elem* _Ptr, size_t _Count, flag_type _Flags = regex_constants::ECMAScript) {
; 1823 :         if (_Ptr) {
; 1824 :             _Reset(_Ptr, _Ptr + _Count, _Flags);
; 1825 :             return;
; 1826 :         }
; 1827 : 
; 1828 :         _Xregex_error(regex_constants::error_parse);
; 1829 :     }
; 1830 : 
; 1831 :     template <class _STtraits, class _STalloc>
; 1832 :     explicit basic_regex(
; 1833 :         const basic_string<_Elem, _STtraits, _STalloc>& _Str, flag_type _Flags = regex_constants::ECMAScript) {
; 1834 :         _Reset(_Str.data(), _Str.data() + static_cast<ptrdiff_t>(_Str.size()), _Flags);
; 1835 :     }
; 1836 : 
; 1837 :     template <class _InIt>
; 1838 :     basic_regex(_InIt _First, _InIt _Last, flag_type _Flags) {
; 1839 :         _Adl_verify_range(_First, _Last);
; 1840 :         _Reset(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Flags);
; 1841 :     }
; 1842 : 
; 1843 :     template <class _InIt>
; 1844 :     basic_regex(_InIt _First, _InIt _Last) {
; 1845 :         _Adl_verify_range(_First, _Last);
; 1846 :         _Reset(_Get_unwrapped(_First), _Get_unwrapped(_Last), regex_constants::ECMAScript);
; 1847 :     }
; 1848 : 
; 1849 :     basic_regex(const basic_regex& _Right)
; 1850 : #if _ENHANCED_REGEX_VISUALIZER
; 1851 :         : _Traits(_Right._Traits), _Visualization(_Right._Visualization)
; 1852 : #else
; 1853 :         : _Traits(_Right._Traits)
; 1854 : #endif
; 1855 :     { // construct copy of _Right
; 1856 :         _Reset(_Right._Rep);
; 1857 :     }
; 1858 : 
; 1859 :     basic_regex(initializer_list<_Elem> _Ilist, flag_type _Flags = regex_constants::ECMAScript) {
; 1860 :         _Reset(_Ilist.begin(), _Ilist.end(), _Flags);
; 1861 :     }
; 1862 : 
; 1863 :     basic_regex& operator=(initializer_list<_Elem> _Ilist) { // replace with regular expression in initializer_list
; 1864 :         return assign(_Ilist);
; 1865 :     }
; 1866 : 
; 1867 :     basic_regex& assign(initializer_list<_Elem> _Ilist, flag_type _Flags = regex_constants::ECMAScript) {
; 1868 :         // replace with regular expression in initializer_list
; 1869 :         _Reset(_Ilist.begin(), _Ilist.end(), _Flags);
; 1870 :         return *this;
; 1871 :     }
; 1872 : 
; 1873 :     basic_regex(basic_regex&& _Right) noexcept {
; 1874 :         _Assign_rv(_STD move(_Right));
; 1875 :     }
; 1876 : 
; 1877 :     basic_regex& operator=(basic_regex&& _Right) noexcept {
; 1878 :         _Assign_rv(_STD move(_Right));
; 1879 :         return *this;
; 1880 :     }
; 1881 : 
; 1882 :     void _Assign_rv(basic_regex&& _Right) {
; 1883 :         if (this != _STD addressof(_Right)) { // clear this and steal from _Right
; 1884 :             _Tidy();
; 1885 : 
; 1886 : #if _ENHANCED_REGEX_VISUALIZER
; 1887 :             _Visualization = _STD move(_Right._Visualization);
; 1888 : #endif // _ENHANCED_REGEX_VISUALIZER
; 1889 : 
; 1890 :             _Rep        = _Right._Rep;
; 1891 :             _Right._Rep = nullptr;
; 1892 :         }
; 1893 :     }
; 1894 : 
; 1895 :     basic_regex& assign(basic_regex&& _Right) noexcept {
; 1896 :         _Assign_rv(_STD move(_Right));
; 1897 :         return *this;
; 1898 :     }
; 1899 : 
; 1900 :     ~basic_regex() noexcept {
; 1901 :         _Tidy();
; 1902 :     }
; 1903 : 
; 1904 :     basic_regex& operator=(const basic_regex& _Right) {
; 1905 :         return assign(_Right);
; 1906 :     }
; 1907 : 
; 1908 :     basic_regex& operator=(_In_z_ const _Elem* _Ptr) {
; 1909 :         _Reset(_Ptr, _Ptr + _RxTraits::length(_Ptr), ECMAScript);
; 1910 :         return *this;
; 1911 :     }
; 1912 : 
; 1913 :     template <class _STtraits, class _STalloc>
; 1914 :     basic_regex& operator=(const basic_string<_Elem, _STtraits, _STalloc>& _Str) {
; 1915 :         _Reset(_Str.data(), _Str.data() + static_cast<ptrdiff_t>(_Str.size()), ECMAScript);
; 1916 :         return *this;
; 1917 :     }
; 1918 : 
; 1919 :     unsigned int _Loop_count() const noexcept {
; 1920 :         return _Rep ? _Rep->_Loops : 0;
; 1921 :     }
; 1922 : 
; 1923 :     _NODISCARD unsigned int mark_count() const noexcept /* strengthened */ {
; 1924 :         return _Rep ? _Rep->_Marks - 1 : 0;
; 1925 :     }
; 1926 : 
; 1927 :     basic_regex& assign(const basic_regex& _Right) {
; 1928 : #if _ENHANCED_REGEX_VISUALIZER
; 1929 :         _Visualization = _Right._Visualization;
; 1930 : #endif // _ENHANCED_REGEX_VISUALIZER
; 1931 : 
; 1932 :         _Reset(_Right._Rep);
; 1933 :         return *this;
; 1934 :     }
; 1935 : 
; 1936 :     basic_regex& assign(_In_z_ const _Elem* _Ptr, flag_type _Flags = regex_constants::ECMAScript) {
; 1937 :         return assign(_Ptr, _RxTraits::length(_Ptr), _Flags);
; 1938 :     }
; 1939 : 
; 1940 :     basic_regex& assign(
; 1941 :         _In_reads_(_Count) const _Elem* _Ptr, size_t _Count, flag_type _Flags = regex_constants::ECMAScript) {
; 1942 :         _Reset(_Ptr, _Ptr + _Count, _Flags);
; 1943 :         return *this;
; 1944 :     }
; 1945 : 
; 1946 :     template <class _STtraits, class _STalloc>
; 1947 :     basic_regex& assign(
; 1948 :         const basic_string<_Elem, _STtraits, _STalloc>& _Str, flag_type _Flags = regex_constants::ECMAScript) {
; 1949 :         _Reset(_Str.data(), _Str.data() + static_cast<ptrdiff_t>(_Str.size()), _Flags);
; 1950 :         return *this;
; 1951 :     }
; 1952 : 
; 1953 :     template <class _InIt>
; 1954 :     basic_regex& assign(_InIt _First, _InIt _Last, flag_type _Flags = regex_constants::ECMAScript) {
; 1955 :         _Adl_verify_range(_First, _Last);
; 1956 :         _Reset(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Flags);
; 1957 :         return *this;
; 1958 :     }
; 1959 : 
; 1960 :     _NODISCARD flag_type flags() const noexcept /* strengthened */ {
; 1961 :         return _Rep ? _Rep->_Fl : flag_type{};
; 1962 :     }
; 1963 : 
; 1964 :     locale_type imbue(locale_type _Loc) { // clear regular expression and set locale to argument
; 1965 :         _Tidy();
; 1966 :         return _Traits.imbue(_Loc);
; 1967 :     }
; 1968 : 
; 1969 :     locale_type getloc() const {
; 1970 :         return _Traits.getloc();
; 1971 :     }
; 1972 : 
; 1973 :     void swap(basic_regex& _Right) noexcept /* strengthened */ {
; 1974 :         _STD swap(_Rep, _Right._Rep);
; 1975 : 
; 1976 : #if _ENHANCED_REGEX_VISUALIZER
; 1977 :         _Visualization.swap(_Right._Visualization);
; 1978 : #endif // _ENHANCED_REGEX_VISUALIZER
; 1979 :     }
; 1980 : 
; 1981 :     _Root_node* _Get() const noexcept {
; 1982 :         return _Rep;
; 1983 :     }
; 1984 : 
; 1985 :     bool _Empty() const noexcept {
; 1986 :         return _Rep == nullptr;
; 1987 :     }
; 1988 : 
; 1989 :     const _RxTraits& _Get_traits() const noexcept {
; 1990 :         return _Traits;
; 1991 :     }
; 1992 : 
; 1993 : private:
; 1994 :     _Root_node* _Rep = nullptr;
; 1995 :     _RxTraits _Traits;
; 1996 : 
; 1997 : #if _ENHANCED_REGEX_VISUALIZER
; 1998 :     basic_string<_Elem> _Visualization;
; 1999 : #endif // _ENHANCED_REGEX_VISUALIZER
; 2000 : 
; 2001 :     void _Tidy() noexcept { // free all storage
; 2002 :         if (_Rep && _MT_DECR(reinterpret_cast<_Atomic_counter_t&>(_Rep->_Refs)) == 0) {
; 2003 :             _Destroy_node(_Rep);
; 2004 :         }
; 2005 : 
; 2006 :         _Rep = nullptr;
; 2007 :     }
; 2008 : 
; 2009 :     template <class _InIt>
; 2010 :     void _Reset(_InIt _First, _InIt _Last, flag_type _Flags) {
; 2011 :         // build regular expression from iterator range
; 2012 :         if constexpr (_Is_ranges_fwd_iter_v<_InIt>) {
; 2013 : #if _ENHANCED_REGEX_VISUALIZER
; 2014 :             _Visualization.assign(_First, _Last);
; 2015 : #endif // _ENHANCED_REGEX_VISUALIZER
; 2016 : 
; 2017 :             _Parser<_InIt, _Elem, _RxTraits> _Prs(_Traits, _First, _Last, _Flags);
; 2018 :             _Root_node* _Rx = _Prs._Compile();
; 2019 :             _Reset(_Rx);
; 2020 :         } else {
; 2021 :             static_assert(_Is_ranges_input_iter_v<_InIt>, "Iterators must be at least input iterators");
; 2022 : 
; 2023 :             basic_string<_Iter_value_t<_InIt>> _Str(_First, _Last);
; 2024 : 
; 2025 :             _Reset(_Str.data(), _Str.data() + static_cast<ptrdiff_t>(_Str.size()), _Flags);
; 2026 :         }
; 2027 :     }
; 2028 : 
; 2029 :     void _Reset(_Root_node* _Rx) { // build regular expression holding root node _Rx
; 2030 :         if (_Rx) {
; 2031 :             _MT_INCR(reinterpret_cast<_Atomic_counter_t&>(_Rx->_Refs));
; 2032 :         }
; 2033 : 
; 2034 :         _Tidy();
; 2035 :         _Rep = _Rx;
; 2036 :     }
; 2037 : };
; 2038 : 
; 2039 : #if _HAS_CXX17
; 2040 : template <class _FwdIt>
; 2041 : basic_regex(_FwdIt, _FwdIt, regex_constants::syntax_option_type = regex_constants::ECMAScript)
; 2042 :     -> basic_regex<typename iterator_traits<_FwdIt>::value_type>;
; 2043 : #endif // _HAS_CXX17
; 2044 : 
; 2045 : _EXPORT_STD template <class _Elem, class _RxTraits>
; 2046 : void swap(basic_regex<_Elem, _RxTraits>& _Left, basic_regex<_Elem, _RxTraits>& _Right) noexcept /* strengthened */ {
; 2047 :     _Left.swap(_Right);
; 2048 : }
; 2049 : 
; 2050 : _EXPORT_STD template <class _BidIt, class _Alloc>
; 2051 : void swap(match_results<_BidIt, _Alloc>& _Left, match_results<_BidIt, _Alloc>& _Right)
; 2052 :     noexcept(noexcept(_Left.swap(_Right))) /* strengthened */ {
; 2053 :     _Left.swap(_Right);
; 2054 : }
; 2055 : 
; 2056 : _EXPORT_STD using regex   = basic_regex<char>;
; 2057 : _EXPORT_STD using wregex  = basic_regex<wchar_t>;
; 2058 : _EXPORT_STD using cmatch  = match_results<const char*>;
; 2059 : _EXPORT_STD using wcmatch = match_results<const wchar_t*>;
; 2060 : _EXPORT_STD using smatch  = match_results<string::const_iterator>;
; 2061 : _EXPORT_STD using wsmatch = match_results<wstring::const_iterator>;
; 2062 : 
; 2063 : template <class _BidIt, class _Alloc, class _InIt, class _OutIt>
; 2064 : _OutIt _Format_default(const match_results<_BidIt, _Alloc>& _Match, _OutIt _Out, _InIt _First, _InIt _Last,
; 2065 :     regex_constants::match_flag_type) { // format with ECMAScript rules
; 2066 :     while (_First != _Last) { // process one character or escape sequence
; 2067 :         if (*_First != '$') {
; 2068 :             *_Out++ = *_First++;
; 2069 :         } else if (++_First == _Last) {
; 2070 :             *_Out++ = '$'; // preserve $ at end
; 2071 :         } else if (*_First == '$') { // replace $$
; 2072 :             *_Out++ = '$';
; 2073 :             ++_First;
; 2074 :         } else if (*_First == '`') { // replace $`
; 2075 :             _Out = _STD copy(_Match.prefix().first, _Match.prefix().second, _Out);
; 2076 :             ++_First;
; 2077 :         } else if (*_First == '\'') { // replace $'
; 2078 :             _Out = _STD copy(_Match.suffix().first, _Match.suffix().second, _Out);
; 2079 :             ++_First;
; 2080 :         } else if (*_First == '&') { // replace $&
; 2081 :             ++_First;
; 2082 :             if (_Match.size() != 0) {
; 2083 :                 _Out = _STD copy(_Match._At(0).first, _Match._At(0).second, _Out);
; 2084 :             }
; 2085 :         } else if ('0' <= *_First && *_First <= '9') { // replace capture group descriptors $n, $nn
; 2086 :             auto _Num              = static_cast<unsigned int>(*_First++ - '0');
; 2087 :             const bool _Two_digits = _First != _Last && '0' <= *_First && *_First <= '9';
; 2088 :             if (_Two_digits) { // process second digit
; 2089 :                 _Num *= 10;
; 2090 :                 _Num += static_cast<unsigned int>(*_First++ - '0');
; 2091 :             }
; 2092 : 
; 2093 :             if (_Num == 0) { // preserve $0, $00
; 2094 :                 *_Out++ = '$';
; 2095 :                 *_Out++ = '0';
; 2096 :                 if (_Two_digits) {
; 2097 :                     *_Out++ = '0';
; 2098 :                 }
; 2099 :             } else if (_Num < _Match.size()) {
; 2100 :                 _Out = _STD copy(_Match._At(_Num).first, _Match._At(_Num).second, _Out);
; 2101 :             }
; 2102 :         } else { // replace $x
; 2103 :             *_Out++ = '$';
; 2104 :             *_Out++ = *_First++;
; 2105 :         }
; 2106 :     }
; 2107 :     return _Out;
; 2108 : }
; 2109 : 
; 2110 : template <class _BidIt, class _Alloc, class _InIt, class _OutIt>
; 2111 : _OutIt _Format_sed(const match_results<_BidIt, _Alloc>& _Match, _OutIt _Out, _InIt _First, _InIt _Last,
; 2112 :     regex_constants::match_flag_type) { // format with sed rules
; 2113 :     while (_First != _Last) { // process one character or escape sequence
; 2114 :         if (*_First == '&') { // replace with full match
; 2115 :             ++_First;
; 2116 :             if (_Match.size() != 0) {
; 2117 :                 _Out = _STD copy(_Match._At(0).first, _Match._At(0).second, _Out);
; 2118 :             }
; 2119 :         } else if (*_First != '\\') {
; 2120 :             *_Out++ = *_First++;
; 2121 :         } else if (++_First != _Last) {
; 2122 :             if ('0' <= *_First && *_First <= '9') { // replace \n, including \0
; 2123 :                 const auto _Num = static_cast<unsigned int>(*_First++ - '0');
; 2124 :                 if (_Num < _Match.size()) {
; 2125 :                     _Out = _STD copy(_Match._At(_Num).first, _Match._At(_Num).second, _Out);
; 2126 :                 }
; 2127 :             } else {
; 2128 :                 *_Out++ = *_First++; // replace \x, including \\, \&
; 2129 :             }
; 2130 :         }
; 2131 :     }
; 2132 : 
; 2133 :     return _Out;
; 2134 : }
; 2135 : 
; 2136 : template <class _BidIt, class _Alloc, class _Elem, class _RxTraits, class _It>
; 2137 : bool _Regex_match1(_It _First, _It _Last, match_results<_BidIt, _Alloc>* _Matches,
; 2138 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs,
; 2139 :     bool _Full) { // try to match regular expression to target text
; 2140 :     if (_Re._Empty()) {
; 2141 :         return false;
; 2142 :     }
; 2143 : 
; 2144 :     _Matcher<_BidIt, _Elem, _RxTraits, _It> _Mx(
; 2145 :         _First, _Last, _Re._Get_traits(), _Re._Get(), _Re.mark_count() + 1, _Re.flags(), _Flgs);
; 2146 :     return _Mx._Match(_Matches, _Full);
; 2147 : }
; 2148 : 
; 2149 : _EXPORT_STD template <class _BidIt, class _Alloc, class _Elem, class _RxTraits>
; 2150 : bool regex_match(_BidIt _First, _BidIt _Last, match_results<_BidIt, _Alloc>& _Matches,
; 2151 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2152 :     // try to match regular expression to target text
; 2153 :     _Adl_verify_range(_First, _Last);
; 2154 :     return _Regex_match1(_First, _Last, _STD addressof(_Matches), _Re, _Flgs, true);
; 2155 : }
; 2156 : 
; 2157 : _EXPORT_STD template <class _BidIt, class _Elem, class _RxTraits>
; 2158 : _NODISCARD bool regex_match(_BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2159 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2160 :     // try to match regular expression to target text
; 2161 :     _Adl_verify_range(_First, _Last);
; 2162 :     return _Regex_match1(_Get_unwrapped(_First), _Get_unwrapped(_Last),
; 2163 :         static_cast<match_results<_Unwrapped_t<const _BidIt&>>*>(nullptr), _Re, _Flgs | regex_constants::match_any,
; 2164 :         true);
; 2165 : }
; 2166 : 
; 2167 : _EXPORT_STD template <class _Elem, class _RxTraits>
; 2168 : _NODISCARD bool regex_match(_In_z_ const _Elem* _Str, const basic_regex<_Elem, _RxTraits>& _Re,
; 2169 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2170 :     // try to match regular expression to target text
; 2171 :     const _Elem* _Last = _Str + char_traits<_Elem>::length(_Str);
; 2172 :     return _Regex_match1(
; 2173 :         _Str, _Last, static_cast<match_results<const _Elem*>*>(nullptr), _Re, _Flgs | regex_constants::match_any, true);
; 2174 : }
; 2175 : 
; 2176 : _EXPORT_STD template <class _Elem, class _Alloc, class _RxTraits>
; 2177 : bool regex_match(_In_z_ const _Elem* _Str, match_results<const _Elem*, _Alloc>& _Matches,
; 2178 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2179 :     // try to match regular expression to target text
; 2180 :     const _Elem* _Last = _Str + char_traits<_Elem>::length(_Str);
; 2181 :     return _Regex_match1(_Str, _Last, _STD addressof(_Matches), _Re, _Flgs, true);
; 2182 : }
; 2183 : 
; 2184 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Alloc, class _Elem, class _RxTraits>
; 2185 : bool regex_match(const basic_string<_Elem, _StTraits, _StAlloc>& _Str,
; 2186 :     match_results<typename basic_string<_Elem, _StTraits, _StAlloc>::const_iterator, _Alloc>& _Matches,
; 2187 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2188 :     // try to match regular expression to target text
; 2189 :     return _Regex_match1(_Str.begin(), _Str.end(), _STD addressof(_Matches), _Re, _Flgs, true);
; 2190 : }
; 2191 : 
; 2192 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Alloc, class _Elem, class _RxTraits>
; 2193 : bool regex_match(const basic_string<_Elem, _StTraits, _StAlloc>&&,
; 2194 :     match_results<typename basic_string<_Elem, _StTraits, _StAlloc>::const_iterator, _Alloc>&,
; 2195 :     const basic_regex<_Elem, _RxTraits>&, regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2196 : 
; 2197 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Elem, class _RxTraits>
; 2198 : _NODISCARD bool regex_match(const basic_string<_Elem, _StTraits, _StAlloc>& _Str,
; 2199 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2200 :     // try to match regular expression to target text
; 2201 :     return _Regex_match1(_Str.data(), _Str.data() + _Str.size(), static_cast<match_results<const _Elem*>*>(nullptr),
; 2202 :         _Re, _Flgs | regex_constants::match_any, true);
; 2203 : }
; 2204 : 
; 2205 : template <class _BidIt, class _Alloc, class _Elem, class _RxTraits, class _It>
; 2206 : bool _Regex_search2(_It _First, _It _Last, match_results<_BidIt, _Alloc>* _Matches,
; 2207 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs, _It _Org) {
; 2208 :     // search for regular expression match in target text
; 2209 :     if (_Re._Empty()) {
; 2210 :         return false;
; 2211 :     }
; 2212 : 
; 2213 :     bool _Found      = false;
; 2214 :     const _It _Begin = _First;
; 2215 :     if ((_Flgs & regex_constants::_Skip_zero_length) && _First != _Last) {
; 2216 :         ++_First;
; 2217 :     }
; 2218 : 
; 2219 :     _Matcher<_BidIt, _Elem, _RxTraits, _It> _Mx(
; 2220 :         _First, _Last, _Re._Get_traits(), _Re._Get(), _Re.mark_count() + 1, _Re.flags(), _Flgs);
; 2221 : 
; 2222 :     if (_Mx._Match(_Matches, false)) {
; 2223 :         _Found = true;
; 2224 :     } else if (_First != _Last && !(_Flgs & regex_constants::match_continuous)) { // try more on suffixes
; 2225 :         _Mx._Setf(regex_constants::match_prev_avail);
; 2226 :         _Mx._Clearf(regex_constants::_Match_not_null);
; 2227 :         while ((_First = _Mx._Skip(++_First, _Last)) != _Last) {
; 2228 :             if (_Mx._Match(_First, _Matches, false)) { // found match starting at _First
; 2229 :                 _Found = true;
; 2230 :                 break;
; 2231 :             }
; 2232 :         }
; 2233 : 
; 2234 :         if (!_Found && _Mx._Match(_Last, _Matches, false)) {
; 2235 :             _Found = true;
; 2236 :         }
; 2237 :     }
; 2238 : 
; 2239 :     if (_Found && _Matches) { // update _Matches
; 2240 :         _Matches->_Org           = _Org;
; 2241 :         _Matches->_Pfx().first   = _Begin;
; 2242 :         _Matches->_Pfx().matched = _Matches->_Pfx().first != _Matches->_Pfx().second;
; 2243 :     }
; 2244 :     return _Found;
; 2245 : }
; 2246 : 
; 2247 : _EXPORT_STD template <class _BidIt, class _Alloc, class _Elem, class _RxTraits>
; 2248 : bool regex_search(_BidIt _First, _BidIt _Last, match_results<_BidIt, _Alloc>& _Matches,
; 2249 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2250 :     // search for regular expression match in target text
; 2251 :     _Adl_verify_range(_First, _Last);
; 2252 :     return _Regex_search2(_First, _Last, _STD addressof(_Matches), _Re, _Flgs, _First);
; 2253 : }
; 2254 : 
; 2255 : _EXPORT_STD template <class _BidIt, class _Elem, class _RxTraits>
; 2256 : _NODISCARD bool regex_search(_BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2257 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2258 :     // search for regular expression match in target text
; 2259 :     _Adl_verify_range(_First, _Last);
; 2260 :     return _Regex_search2(_Get_unwrapped(_First), _Get_unwrapped(_Last),
; 2261 :         static_cast<match_results<_Unwrapped_t<const _BidIt&>>*>(nullptr), _Re, _Flgs | regex_constants::match_any,
; 2262 :         _Get_unwrapped(_First));
; 2263 : }
; 2264 : 
; 2265 : _EXPORT_STD template <class _Elem, class _RxTraits>
; 2266 : _NODISCARD bool regex_search(_In_z_ const _Elem* _Str, const basic_regex<_Elem, _RxTraits>& _Re,
; 2267 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2268 :     // search for regular expression match in target text
; 2269 :     const _Elem* _Last = _Str + char_traits<_Elem>::length(_Str);
; 2270 :     return _Regex_search2(
; 2271 :         _Str, _Last, static_cast<match_results<const _Elem*>*>(nullptr), _Re, _Flgs | regex_constants::match_any, _Str);
; 2272 : }
; 2273 : 
; 2274 : _EXPORT_STD template <class _Elem, class _Alloc, class _RxTraits>
; 2275 : bool regex_search(_In_z_ const _Elem* _Str, match_results<const _Elem*, _Alloc>& _Matches,
; 2276 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2277 :     // search for regular expression match in target text
; 2278 :     const _Elem* _Last = _Str + char_traits<_Elem>::length(_Str);
; 2279 :     return _Regex_search2(_Str, _Last, _STD addressof(_Matches), _Re, _Flgs, _Str);
; 2280 : }
; 2281 : 
; 2282 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Alloc, class _Elem, class _RxTraits>
; 2283 : bool regex_search(const basic_string<_Elem, _StTraits, _StAlloc>& _Str,
; 2284 :     match_results<typename basic_string<_Elem, _StTraits, _StAlloc>::const_iterator, _Alloc>& _Matches,
; 2285 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2286 :     // search for regular expression match in target text
; 2287 :     return _Regex_search2(_Str.begin(), _Str.end(), _STD addressof(_Matches), _Re, _Flgs, _Str.begin());
; 2288 : }
; 2289 : 
; 2290 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Alloc, class _Elem, class _RxTraits>
; 2291 : bool regex_search(const basic_string<_Elem, _StTraits, _StAlloc>&&,
; 2292 :     match_results<typename basic_string<_Elem, _StTraits, _StAlloc>::const_iterator, _Alloc>&,
; 2293 :     const basic_regex<_Elem, _RxTraits>&, regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2294 : 
; 2295 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Elem, class _RxTraits>
; 2296 : _NODISCARD bool regex_search(const basic_string<_Elem, _StTraits, _StAlloc>& _Str,
; 2297 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2298 :     // search for regular expression match in target text
; 2299 :     using _Iter = typename basic_string<_Elem, _StTraits, _StAlloc>::const_pointer;
; 2300 : 
; 2301 :     _Iter _First = _Str.c_str();
; 2302 :     _Iter _Last  = _First + _Str.size();
; 2303 :     return _Regex_search2(
; 2304 :         _First, _Last, static_cast<match_results<_Iter>*>(nullptr), _Re, _Flgs | regex_constants::match_any, _First);
; 2305 : }
; 2306 : 
; 2307 : template <class _OutIt, class _BidIt, class _RxTraits, class _Elem, class _Traits, class _Alloc>
; 2308 : _OutIt _Regex_replace1(_OutIt _Result, _BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2309 :     const basic_string<_Elem, _Traits, _Alloc>& _Fmt, regex_constants::match_flag_type _Flgs) {
; 2310 :     // search and replace
; 2311 :     match_results<_BidIt> _Matches;
; 2312 :     _BidIt _Pos                             = _First;
; 2313 :     regex_constants::match_flag_type _Flags = _Flgs;
; 2314 :     regex_constants::match_flag_type _Not_null{};
; 2315 : 
; 2316 :     while (
; 2317 :         _Regex_search2(_Pos, _Last, _STD addressof(_Matches), _Re, _Flags | _Not_null, _Pos)) { // replace at each match
; 2318 :         if (!(_Flgs & regex_constants::format_no_copy)) {
; 2319 :             _Result = _STD copy(_Matches.prefix().first, _Matches.prefix().second, _Result);
; 2320 :         }
; 2321 : 
; 2322 :         _Result = _Matches._Format1(_Result, _Fmt.data(), _Fmt.data() + _Fmt.size(), _Flags);
; 2323 : 
; 2324 :         _Pos = _Matches[0].second;
; 2325 :         if (_Pos == _Last || (_Flgs & regex_constants::format_first_only)) {
; 2326 :             break;
; 2327 :         }
; 2328 : 
; 2329 :         if (_Matches[0].first == _Matches[0].second) {
; 2330 :             _Not_null = regex_constants::_Match_not_null;
; 2331 :         } else { // non-null match, recognize earlier text
; 2332 :             _Not_null = regex_constants::match_flag_type{};
; 2333 :             _Flags |= regex_constants::match_prev_avail;
; 2334 :         }
; 2335 :     }
; 2336 :     return _Flgs & regex_constants::format_no_copy ? _Result : _STD _Copy_unchecked(_Pos, _Last, _Result);
; 2337 : }
; 2338 : 
; 2339 : _EXPORT_STD template <class _OutIt, class _BidIt, class _RxTraits, class _Elem, class _Traits, class _Alloc>
; 2340 : _OutIt regex_replace(_OutIt _Result, _BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2341 :     const basic_string<_Elem, _Traits, _Alloc>& _Fmt,
; 2342 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2343 :     // search and replace, iterator result, string format
; 2344 :     _Adl_verify_range(_First, _Last);
; 2345 :     _Seek_wrapped(_Result, _Regex_replace1(_Get_unwrapped_unverified(_Result), _Get_unwrapped(_First),
; 2346 :                                _Get_unwrapped(_Last), _Re, _Fmt, _Flgs));
; 2347 :     return _Result;
; 2348 : }
; 2349 : 
; 2350 : _EXPORT_STD template <class _OutIt, class _BidIt, class _RxTraits, class _Elem>
; 2351 : _OutIt regex_replace(_OutIt _Result, _BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2352 :     const _Elem* _Ptr, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2353 :     // search and replace, iterator result, NTBS format
; 2354 :     const basic_string<_Elem> _Fmt(_Ptr);
; 2355 :     return _STD regex_replace(_Result, _First, _Last, _Re, _Fmt, _Flgs);
; 2356 : }
; 2357 : 
; 2358 : _EXPORT_STD template <class _RxTraits, class _Elem, class _Traits1, class _Alloc1, class _Traits2, class _Alloc2>
; 2359 : _NODISCARD basic_string<_Elem, _Traits1, _Alloc1> regex_replace(const basic_string<_Elem, _Traits1, _Alloc1>& _Str,
; 2360 :     const basic_regex<_Elem, _RxTraits>& _Re, const basic_string<_Elem, _Traits2, _Alloc2>& _Fmt,
; 2361 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2362 :     // search and replace, string result, string target, string format
; 2363 :     basic_string<_Elem, _Traits1, _Alloc1> _Res;
; 2364 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);
; 2365 :     return _Res;
; 2366 : }
; 2367 : 
; 2368 : _EXPORT_STD template <class _RxTraits, class _Elem, class _Traits1, class _Alloc1>
; 2369 : _NODISCARD basic_string<_Elem, _Traits1, _Alloc1> regex_replace(const basic_string<_Elem, _Traits1, _Alloc1>& _Str,
; 2370 :     const basic_regex<_Elem, _RxTraits>& _Re, const _Elem* _Ptr,
; 2371 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2372 :     // search and replace, string result, string target, NTBS format
; 2373 :     basic_string<_Elem, _Traits1, _Alloc1> _Res;
; 2374 :     const basic_string<_Elem> _Fmt(_Ptr);
; 2375 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);
; 2376 :     return _Res;
; 2377 : }
; 2378 : 
; 2379 : _EXPORT_STD template <class _RxTraits, class _Elem, class _Traits2, class _Alloc2>
; 2380 : _NODISCARD basic_string<_Elem> regex_replace(const _Elem* _Pstr, const basic_regex<_Elem, _RxTraits>& _Re,
; 2381 :     const basic_string<_Elem, _Traits2, _Alloc2>& _Fmt,
; 2382 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2383 :     // search and replace, string result, NTBS target, string format
; 2384 :     basic_string<_Elem> _Res;
; 2385 :     const basic_string<_Elem> _Str(_Pstr);
; 2386 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);
; 2387 :     return _Res;
; 2388 : }
; 2389 : 
; 2390 : _EXPORT_STD template <class _RxTraits, class _Elem>
; 2391 : _NODISCARD basic_string<_Elem> regex_replace(const _Elem* _Pstr, const basic_regex<_Elem, _RxTraits>& _Re,
; 2392 :     const _Elem* _Ptr, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2393 :     // search and replace, string result, NTBS target, NTBS format
; 2394 :     basic_string<_Elem> _Res;
; 2395 :     const basic_string<_Elem> _Str(_Pstr);
; 2396 :     const basic_string<_Elem> _Fmt(_Ptr);
; 2397 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);
; 2398 :     return _Res;
; 2399 : }
; 2400 : 
; 2401 : _EXPORT_STD template <class _BidIt, class _Elem = _Iter_value_t<_BidIt>, class _RxTraits = regex_traits<_Elem>>
; 2402 : class regex_iterator : public _Iterator_base {
; 2403 : public:
; 2404 :     using regex_type        = basic_regex<_Elem, _RxTraits>;
; 2405 :     using value_type        = match_results<_BidIt>;
; 2406 :     using difference_type   = ptrdiff_t;
; 2407 :     using pointer           = const value_type*;
; 2408 :     using reference         = const value_type&;
; 2409 :     using iterator_category = forward_iterator_tag;
; 2410 : #if _HAS_CXX20
; 2411 :     using iterator_concept = input_iterator_tag;
; 2412 : #endif // _HAS_CXX20
; 2413 : 
; 2414 :     regex_iterator() = default; // construct end of sequence iterator
; 2415 : 
; 2416 :     regex_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re,
; 2417 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2418 :         : _Begin(_First), _End(_Last), _MyRe(_STD addressof(_Re)), _Flags(_Fl) {
; 2419 :         _Adl_verify_range(_Begin, _End);
; 2420 :         if (!_Regex_search2(_Begin, _End, _STD addressof(_MyVal), *_MyRe, _Flags, _Begin)) {
; 2421 :             _MyRe = nullptr;
; 2422 :         } else {
; 2423 :             this->_Adopt(_MyRe);
; 2424 :         }
; 2425 :     }
; 2426 : 
; 2427 :     regex_iterator(
; 2428 :         _BidIt, _BidIt, const regex_type&&, regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2429 : 
; 2430 :     _NODISCARD bool operator==(const regex_iterator& _Right) const {
; 2431 :         if (_MyRe != _Right._MyRe) {
; 2432 :             return false;
; 2433 :         } else if (!_MyRe) {
; 2434 :             return true;
; 2435 :         }
; 2436 : 
; 2437 :         return _Begin == _Right._Begin && _End == _Right._End && _Flags == _Right._Flags
; 2438 :             && _MyVal._At(0) == _Right._MyVal._At(0);
; 2439 :     }
; 2440 : 
; 2441 : #if !_HAS_CXX20
; 2442 :     _NODISCARD bool operator!=(const regex_iterator& _Right) const {
; 2443 :         return !(*this == _Right);
; 2444 :     }
; 2445 : #endif // !_HAS_CXX20
; 2446 : 
; 2447 : #if _HAS_CXX20
; 2448 :     _NODISCARD bool operator==(default_sentinel_t) const noexcept /* strengthened */ {
; 2449 :         return !_MyRe;
; 2450 :     }
; 2451 : #endif // _HAS_CXX20
; 2452 : 
; 2453 :     _NODISCARD const value_type& operator*() const noexcept /* strengthened */ {
; 2454 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2455 :         _STL_VERIFY(_MyRe, "regex_iterator not dereferenceable");
; 2456 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2457 : 
; 2458 :         return _MyVal;
; 2459 :     }
; 2460 : 
; 2461 :     _NODISCARD const value_type* operator->() const noexcept /* strengthened */ {
; 2462 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2463 :         _STL_VERIFY(_MyRe, "regex_iterator not dereferenceable");
; 2464 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2465 : 
; 2466 :         return _STD addressof(_MyVal);
; 2467 :     }
; 2468 : 
; 2469 :     regex_iterator& operator++() {
; 2470 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2471 :         _STL_VERIFY(_MyRe, "regex_iterator not incrementable");
; 2472 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2473 : 
; 2474 :         _BidIt _Start = _MyVal._At(0).second;
; 2475 : 
; 2476 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2477 :         _STL_VERIFY(this->_Getcont(), "regex_iterator orphaned");
; 2478 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2479 : 
; 2480 :         bool _Skip_empty_match = false;
; 2481 :         if (_MyVal._At(0).first == _MyVal._At(0).second) { // handle zero-length match
; 2482 :             if (_Start == _End) { // store end-of-sequence iterator
; 2483 :                 _MyRe = nullptr;
; 2484 : 
; 2485 : #if _ITERATOR_DEBUG_LEVEL == 2
; 2486 :                 this->_Adopt(nullptr);
; 2487 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 2488 : 
; 2489 :                 return *this;
; 2490 :             }
; 2491 : 
; 2492 :             // _Adl_verify_range(_Start, _End) checked in constructor
; 2493 :             if (_Regex_search2(_Start, _End, _STD addressof(_MyVal), *_MyRe,
; 2494 :                     _Flags | regex_constants::match_not_null | regex_constants::match_continuous, _Begin)) {
; 2495 :                 return *this;
; 2496 :             }
; 2497 : 
; 2498 :             _Skip_empty_match = true;
; 2499 :         }
; 2500 :         _Flags = _Flags | regex_constants::match_prev_avail;
; 2501 : 
; 2502 :         auto _Tmp_flags = _Flags;
; 2503 :         if (_Skip_empty_match) {
; 2504 :             _Tmp_flags |= regex_constants::_Skip_zero_length;
; 2505 :         }
; 2506 : 
; 2507 :         // _Adl_verify_range(_Start, _End) checked in constructor
; 2508 :         if (!_Regex_search2(_Start, _End, _STD addressof(_MyVal), *_MyRe, _Tmp_flags, _Begin)) {
; 2509 :             // mark at end of sequence
; 2510 :             _MyRe = nullptr;
; 2511 :         }
; 2512 : 
; 2513 :         return *this;
; 2514 :     }
; 2515 : 
; 2516 :     regex_iterator operator++(int) {
; 2517 :         regex_iterator _Tmp = *this;
; 2518 :         ++*this;
; 2519 :         return _Tmp;
; 2520 :     }
; 2521 : 
; 2522 :     bool _Atend() const noexcept { // test for end iterator
; 2523 :         return !_MyRe;
; 2524 :     }
; 2525 : 
; 2526 : private:
; 2527 :     _BidIt _Begin{}; // input sequence
; 2528 :     _BidIt _End{}; // input sequence
; 2529 :     const regex_type* _MyRe = nullptr; // pointer to basic_regex object
; 2530 :     regex_constants::match_flag_type _Flags{};
; 2531 :     match_results<_BidIt> _MyVal; // lookahead value (if _MyRe not null)
; 2532 : };
; 2533 : 
; 2534 : _EXPORT_STD using cregex_iterator  = regex_iterator<const char*>;
; 2535 : _EXPORT_STD using wcregex_iterator = regex_iterator<const wchar_t*>;
; 2536 : _EXPORT_STD using sregex_iterator  = regex_iterator<string::const_iterator>;
; 2537 : _EXPORT_STD using wsregex_iterator = regex_iterator<wstring::const_iterator>;
; 2538 : 
; 2539 : _EXPORT_STD template <class _BidIt, class _Elem = _Iter_value_t<_BidIt>, class _RxTraits = regex_traits<_Elem>>
; 2540 : class regex_token_iterator {
; 2541 : public:
; 2542 :     using _Position         = regex_iterator<_BidIt, _Elem, _RxTraits>;
; 2543 :     using regex_type        = basic_regex<_Elem, _RxTraits>;
; 2544 :     using value_type        = sub_match<_BidIt>;
; 2545 :     using difference_type   = ptrdiff_t;
; 2546 :     using pointer           = const value_type*;
; 2547 :     using reference         = const value_type&;
; 2548 :     using iterator_category = forward_iterator_tag;
; 2549 : #if _HAS_CXX20
; 2550 :     using iterator_concept = input_iterator_tag;
; 2551 : #endif // _HAS_CXX20
; 2552 : 
; 2553 :     regex_token_iterator() = default; // construct end of sequence iterator
; 2554 : 
; 2555 :     regex_token_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re, int _Sub = 0,
; 2556 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2557 :         : _Pos(_First, _Last, _Re, _Fl), _Cur(0), _Subs(&_Sub, &_Sub + 1) {
; 2558 :         _Init(_First, _Last);
; 2559 :     }
; 2560 : 
; 2561 :     regex_token_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re, const vector<int>& _Subx,
; 2562 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2563 :         : _Pos(_First, _Last, _Re, _Fl), _Cur(0), _Subs(_Subx.begin(), _Subx.end()) {
; 2564 :         if (_Subs.empty()) {
; 2565 :             _Res = nullptr; // treat empty vector as end of sequence
; 2566 :         } else {
; 2567 :             _Init(_First, _Last);
; 2568 :         }
; 2569 :     }
; 2570 : 
; 2571 :     template <size_t _Nx>
; 2572 :     regex_token_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re, const int (&_Subx)[_Nx],
; 2573 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2574 :         : _Pos(_First, _Last, _Re, _Fl), _Cur(0), _Subs(_Subx, _Subx + _Nx) {
; 2575 :         _Init(_First, _Last);
; 2576 :     }
; 2577 : 
; 2578 :     regex_token_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re, initializer_list<int> _Ilist,
; 2579 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2580 :         : _Pos(_First, _Last, _Re, _Fl), _Cur(0), _Subs(_Ilist.begin(), _Ilist.end()) {
; 2581 :         _Init(_First, _Last);
; 2582 :     }
; 2583 : 
; 2584 :     regex_token_iterator(_BidIt, _BidIt, const regex_type&&, int = 0,
; 2585 :         regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2586 : 
; 2587 :     regex_token_iterator(_BidIt, _BidIt, const regex_type&&, const vector<int>&,
; 2588 :         regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2589 : 
; 2590 :     template <size_t _Nx>
; 2591 :     regex_token_iterator(_BidIt, _BidIt, const regex_type&&, const int (&)[_Nx],
; 2592 :         regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2593 : 
; 2594 :     regex_token_iterator(_BidIt, _BidIt, const regex_type&&, initializer_list<int>,
; 2595 :         regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2596 : 
; 2597 :     regex_token_iterator(const regex_token_iterator& _Right)
; 2598 :         : _Pos(_Right._Pos), _Suffix(_Right._Suffix), _Cur(_Right._Cur), _Subs(_Right._Subs) {
; 2599 :         // construct copy of _Right
; 2600 :         if (!_Right._Res) {
; 2601 :             _Res = nullptr;
; 2602 :         } else if (_Right._Res == _STD addressof(_Right._Suffix)) {
; 2603 :             _Res = _STD addressof(_Suffix);
; 2604 :         } else {
; 2605 :             _Res = _Current();
; 2606 :         }
; 2607 :     }
; 2608 : 
; 2609 :     regex_token_iterator& operator=(const regex_token_iterator& _Right) {
; 2610 :         if (this != _STD addressof(_Right)) { // copy from _Right
; 2611 :             _Pos    = _Right._Pos;
; 2612 :             _Cur    = _Right._Cur;
; 2613 :             _Suffix = _Right._Suffix;
; 2614 :             _Subs   = _Right._Subs;
; 2615 :             if (!_Right._Res) {
; 2616 :                 _Res = nullptr;
; 2617 :             } else if (_Right._Res == _STD addressof(_Right._Suffix)) {
; 2618 :                 _Res = _STD addressof(_Suffix);
; 2619 :             } else {
; 2620 :                 _Res = _Current();
; 2621 :             }
; 2622 :         }
; 2623 :         return *this;
; 2624 :     }
; 2625 : 
; 2626 :     _NODISCARD bool operator==(const regex_token_iterator& _Right) const {
; 2627 :         if (!_Res || !_Right._Res) {
; 2628 :             return _Res == _Right._Res;
; 2629 :         }
; 2630 : 
; 2631 :         return *_Res == *_Right._Res && _Pos == _Right._Pos && _Subs == _Right._Subs;
; 2632 :     }
; 2633 : 
; 2634 : #if !_HAS_CXX20
; 2635 :     _NODISCARD bool operator!=(const regex_token_iterator& _Right) const {
; 2636 :         return !(*this == _Right);
; 2637 :     }
; 2638 : #endif // !_HAS_CXX20
; 2639 : 
; 2640 : #if _HAS_CXX20
; 2641 :     _NODISCARD bool operator==(default_sentinel_t) const noexcept /* strengthened */ {
; 2642 :         return !_Res;
; 2643 :     }
; 2644 : #endif // _HAS_CXX20
; 2645 : 
; 2646 :     _NODISCARD const value_type& operator*() const noexcept /* strengthened */ {
; 2647 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2648 :         _STL_VERIFY(_Res, "regex_token_iterator not dereferenceable");
; 2649 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2650 : 
; 2651 :         _Analysis_assume_(_Res);
; 2652 :         return *_Res;
; 2653 :     }
; 2654 : 
; 2655 :     _NODISCARD const value_type* operator->() const noexcept /* strengthened */ {
; 2656 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2657 :         _STL_VERIFY(_Res, "regex_token_iterator not dereferenceable");
; 2658 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2659 : 
; 2660 :         return _Res;
; 2661 :     }
; 2662 : 
; 2663 :     regex_token_iterator& operator++() {
; 2664 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2665 :         _STL_VERIFY(_Res, "regex_token_iterator not incrementable");
; 2666 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2667 : 
; 2668 :         if (_Res == _STD addressof(_Suffix)) {
; 2669 :             _Res = nullptr;
; 2670 :         } else if (++_Cur < _Subs.size()) {
; 2671 :             _Res = _Current();
; 2672 :         } else { // advance to next full match
; 2673 :             _Cur = 0;
; 2674 :             _Position _Prev(_Pos);
; 2675 :             ++_Pos;
; 2676 :             if (!_Pos._Atend()) {
; 2677 :                 _Res = _Current();
; 2678 :             } else if (_Has_suffix() && _Prev->suffix().length() != 0) { // mark suffix
; 2679 :                 _Suffix.matched = true;
; 2680 :                 _Suffix.first   = _Prev->suffix().first;
; 2681 :                 _Suffix.second  = _Prev->suffix().second;
; 2682 :                 _Res            = _STD addressof(_Suffix);
; 2683 :             } else {
; 2684 :                 _Res = nullptr;
; 2685 :             }
; 2686 :         }
; 2687 : 
; 2688 :         return *this;
; 2689 :     }
; 2690 : 
; 2691 :     regex_token_iterator operator++(int) {
; 2692 :         regex_token_iterator _Tmp = *this;
; 2693 :         ++*this;
; 2694 :         return _Tmp;
; 2695 :     }
; 2696 : 
; 2697 : private:
; 2698 :     _Position _Pos;
; 2699 :     const value_type* _Res = nullptr;
; 2700 :     value_type _Suffix;
; 2701 :     size_t _Cur = 0;
; 2702 :     vector<int> _Subs;
; 2703 : 
; 2704 :     bool _Has_suffix() const { // check for suffix specifier
; 2705 :         return _STD find(_Subs.begin(), _Subs.end(), -1) != _Subs.end();
; 2706 :     }
; 2707 : 
; 2708 :     void _Init(_BidIt _First, _BidIt _Last) { // initialize
; 2709 :         _Adl_verify_range(_First, _Last);
; 2710 :         if (!_Pos._Atend()) {
; 2711 :             _Res = _Current();
; 2712 :         } else if (_Has_suffix()) { // mark suffix (no match)
; 2713 :             _Suffix.matched = true;
; 2714 :             _Suffix.first   = _First;
; 2715 :             _Suffix.second  = _Last;
; 2716 :             _Res            = _STD addressof(_Suffix);
; 2717 :         } else {
; 2718 :             _Res = nullptr;
; 2719 :         }
; 2720 :     }
; 2721 : 
; 2722 :     const value_type* _Current() const noexcept {
; 2723 :         return &(_Subs[_Cur] == -1 ? _Pos->prefix() : (*_Pos)[static_cast<size_t>(_Subs[_Cur])]);
; 2724 :     }
; 2725 : };
; 2726 : 
; 2727 : _EXPORT_STD using cregex_token_iterator  = regex_token_iterator<const char*>;
; 2728 : _EXPORT_STD using wcregex_token_iterator = regex_token_iterator<const wchar_t*>;
; 2729 : _EXPORT_STD using sregex_token_iterator  = regex_token_iterator<string::const_iterator>;
; 2730 : _EXPORT_STD using wsregex_token_iterator = regex_token_iterator<wstring::const_iterator>;
; 2731 : 
; 2732 : template <class _FwdIt, class _Elem, class _RxTraits>
; 2733 : _Builder<_FwdIt, _Elem, _RxTraits>::_Builder(const _RxTraits& _Tr, regex_constants::syntax_option_type _Fx)
; 2734 :     : _Root(new _Root_node), _Current(_Root), _Flags(_Fx), _Traits(_Tr),

  00052	eb 02		 jmp	 SHORT $LN4@Builder
$LN3@Builder:
  00054	33 c0		 xor	 eax, eax
$LN4@Builder:
  00056	8b 4d 0c	 mov	 ecx, DWORD PTR __Fx$[ebp]
  00059	89 06		 mov	 DWORD PTR [esi], eax
  0005b	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0005e	8b 45 08	 mov	 eax, DWORD PTR __Tr$[ebp]
  00061	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  00064	8b c1		 mov	 eax, ecx

; 1356 : };
; 1357 : 
; 1358 : class _Node_end_group : public _Node_base { // node that marks end of a group
; 1359 : public:
; 1360 :     _Node_end_group(_Node_type _Ty, _Node_flags _Fl, _Node_base* _Bx) noexcept : _Node_base(_Ty, _Fl), _Back(_Bx) {}
; 1361 : 
; 1362 :     _Node_base* _Back;
; 1363 : };
; 1364 : 
; 1365 : class _Node_assert : public _Node_base { // node that holds an ECMAScript assertion
; 1366 : public:
; 1367 :     explicit _Node_assert(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Node_base(_Ty, _Fl) {}
; 1368 : 
; 1369 :     ~_Node_assert() noexcept {
; 1370 :         _Destroy_node(_Child);
; 1371 :     }
; 1372 : 
; 1373 :     _Node_base* _Child = nullptr;
; 1374 : };
; 1375 : 
; 1376 : class _Node_capture : public _Node_base { // node that marks beginning of a capture group
; 1377 : public:
; 1378 :     explicit _Node_capture(unsigned int _Ix) noexcept : _Node_base(_N_capture, _Fl_none), _Idx(_Ix) {}
; 1379 : 
; 1380 :     unsigned int _Idx;
; 1381 : };
; 1382 : 
; 1383 : class _Node_back : public _Node_base { // node that holds a back reference
; 1384 : public:
; 1385 :     explicit _Node_back(unsigned int _Ix) noexcept : _Node_base(_N_back, _Fl_none), _Idx(_Ix) {}
; 1386 : 
; 1387 :     unsigned int _Idx;
; 1388 : };
; 1389 : 
; 1390 : template <class _Elem>
; 1391 : class _Node_str : public _Node_base { // node that holds text
; 1392 : public:
; 1393 :     explicit _Node_str(_Node_flags _Fl = _Fl_none) noexcept : _Node_base(_N_str, _Fl) {}
; 1394 : 
; 1395 :     _Buf<_Elem> _Data;
; 1396 : };
; 1397 : 
; 1398 : template <class _Elem, class _RxTraits>
; 1399 : class _Node_class : public _Node_base { // node that holds a character class (POSIX bracket expression)
; 1400 : public:
; 1401 :     explicit _Node_class(_Node_type _Ty = _N_class, _Node_flags _Fl = _Fl_none) noexcept : _Node_base(_Ty, _Fl) {}
; 1402 : 
; 1403 :     ~_Node_class() noexcept {
; 1404 :         _Tidy(_Coll);
; 1405 :         delete _Small;
; 1406 :         delete _Large;
; 1407 :         delete _Ranges;
; 1408 :         _Tidy(_Equiv);
; 1409 :     }
; 1410 : 
; 1411 :     void _Tidy(_Sequence<_Elem>* _Head) noexcept { // clean up a list of sequences
; 1412 :         while (_Head) { // delete the head of the list
; 1413 :             _Sequence<_Elem>* _Temp = _Head;
; 1414 :             _Head                   = _Head->_Next;
; 1415 :             delete _Temp;
; 1416 :         }
; 1417 :     }
; 1418 : 
; 1419 :     _Sequence<_Elem>* _Coll = nullptr;
; 1420 :     _Bitmap* _Small         = nullptr;
; 1421 :     _Buf<_Elem>* _Large     = nullptr;
; 1422 :     _Buf<_Elem>* _Ranges    = nullptr;
; 1423 :     typename _RxTraits::char_class_type _Classes{};
; 1424 :     _Sequence<_Elem>* _Equiv = nullptr;
; 1425 : };
; 1426 : 
; 1427 : class _Node_endif : public _Node_base { // node that marks the end of an alternative
; 1428 : public:
; 1429 :     _Node_endif() noexcept : _Node_base(_N_endif, _Fl_none) {}
; 1430 : };
; 1431 : 
; 1432 : class _Node_if : public _Node_base { // node that marks the beginning of an alternative
; 1433 : public:
; 1434 :     explicit _Node_if(_Node_base* _End) noexcept
; 1435 :         : _Node_base(_N_if, _Fl_none), _Endif(static_cast<_Node_endif*>(_End)) {}
; 1436 : 
; 1437 :     ~_Node_if() noexcept {
; 1438 :         _Node_if* _Cur = _Child;
; 1439 :         while (_Cur) { // destroy branch
; 1440 :             _Node_if* _Tmp = _Cur;
; 1441 :             _Cur           = _Cur->_Child;
; 1442 :             _Tmp->_Child   = nullptr;
; 1443 :             _Destroy_node(_Tmp, _Endif);
; 1444 :         }
; 1445 :     }
; 1446 : 
; 1447 :     _Node_endif* _Endif;
; 1448 :     _Node_if* _Child = nullptr;
; 1449 : };
; 1450 : 
; 1451 : class _Node_rep;
; 1452 : 
; 1453 : class _Node_end_rep : public _Node_base { // node that marks the end of a repetition
; 1454 : public:
; 1455 :     _Node_end_rep() noexcept : _Node_base(_N_end_rep) {}
; 1456 : 
; 1457 :     _Node_rep* _Begin_rep = nullptr;
; 1458 : 
; 1459 :     _Node_end_rep& operator=(const _Node_end_rep&) = delete;
; 1460 : };
; 1461 : 
; 1462 : struct _Loop_vals_t { // storage for loop administration
; 1463 :     int _Loop_idx;
; 1464 :     void* _Loop_iter;
; 1465 : };
; 1466 : 
; 1467 : class _Node_rep : public _Node_base { // node that marks the beginning of a repetition
; 1468 : public:
; 1469 :     _Node_rep(bool _Greedy, int _Min_, int _Max_, _Node_end_rep* _End, unsigned int _Number) noexcept
; 1470 :         : _Node_base(_N_rep, _Greedy ? _Fl_greedy : _Fl_none), _Min(_Min_), _Max(_Max_), _End_rep(_End),
; 1471 :           _Loop_number(_Number) {}
; 1472 : 
; 1473 :     const int _Min;
; 1474 :     const int _Max;
; 1475 :     _Node_end_rep* _End_rep;
; 1476 :     unsigned int _Loop_number;
; 1477 :     int _Simple_loop = -1; // -1 undetermined, 0 contains if/do, 1 simple
; 1478 : 
; 1479 :     _Node_rep& operator=(const _Node_rep&) = delete;
; 1480 : };
; 1481 : 
; 1482 : template <class _FwdIt, class _Elem, class _RxTraits>
; 1483 : class _Builder { // provides operations used by _Parser to build the nfa
; 1484 : public:
; 1485 :     using _Difft = typename iterator_traits<_FwdIt>::difference_type;
; 1486 : 
; 1487 :     _Builder(const _RxTraits& _Tr, regex_constants::syntax_option_type);
; 1488 :     bool _Beg_expr() const;
; 1489 :     void _Setlong();
; 1490 :     // _Discard_pattern is an ABI zombie name
; 1491 :     void _Tidy() noexcept;
; 1492 :     _Node_base* _Getmark() const;
; 1493 : 
; 1494 :     void _Add_nop();
; 1495 :     void _Add_bol();
; 1496 :     void _Add_eol();
; 1497 :     void _Add_wbound();
; 1498 :     void _Add_dot();
; 1499 :     void _Add_char(_Elem _Ch);
; 1500 :     void _Add_class();
; 1501 :     void _Add_char_to_class(_Elem _Ch);
; 1502 :     void _Add_range(_Elem _Ex0, _Elem _Ex1);
; 1503 :     void _Add_named_class(_Regex_traits_base::char_class_type, bool = false);
; 1504 :     void _Add_equiv(_FwdIt, _FwdIt, _Difft);
; 1505 :     void _Add_coll(_FwdIt, _FwdIt, _Difft);
; 1506 :     _Node_base* _Begin_group();
; 1507 :     void _End_group(_Node_base* _Back);
; 1508 :     _Node_base* _Begin_assert_group(bool);
; 1509 :     void _End_assert_group(_Node_base*);
; 1510 :     _Node_base* _Begin_capture_group(unsigned int _Idx);
; 1511 :     void _Add_backreference(unsigned int _Idx);
; 1512 :     _Node_base* _Begin_if(_Node_base* _Start);
; 1513 :     void _Else_if(_Node_base*, _Node_base*);
; 1514 :     void _Add_rep(int _Min, int _Max, bool _Greedy);
; 1515 :     void _Negate();
; 1516 :     void _Mark_final();
; 1517 :     _Root_node* _End_pattern();
; 1518 : 
; 1519 : private:
; 1520 :     _Node_base* _Link_node(_Node_base*);
; 1521 :     static void _Insert_node(_Node_base*, _Node_base*);
; 1522 :     _Node_base* _New_node(_Node_type _Kind);
; 1523 :     void _Add_str_node();
; 1524 :     bool _Beg_expr(_Node_base*) const;
; 1525 :     void _Add_char_to_bitmap(_Elem _Ch);
; 1526 :     void _Add_char_to_array(_Elem _Ch);
; 1527 :     void _Add_elts(_Node_class<_Elem, _RxTraits>*, _Regex_traits_base::char_class_type, bool);
; 1528 :     void _Char_to_elts(_FwdIt, _FwdIt, _Difft, _Sequence<_Elem>**);
; 1529 : 
; 1530 :     _Root_node* _Root;
; 1531 :     _Node_base* _Current;
; 1532 :     regex_constants::syntax_option_type _Flags;
; 1533 :     const _RxTraits& _Traits;
; 1534 :     const int _Bmax; // Do not use; use _Get_bmax instead.
; 1535 :     const int _Tmax; // Do not use; use _Get_tmax instead.
; 1536 : 
; 1537 :     unsigned int _Get_bmax() const;
; 1538 :     unsigned int _Get_tmax() const;
; 1539 : 
; 1540 : public:
; 1541 :     _Builder& operator=(const _Builder&) = delete;
; 1542 : };
; 1543 : 
; 1544 : template <class _BidIt>
; 1545 : class _Bt_state_t { // holds the state needed for backtracking
; 1546 : public:
; 1547 :     _BidIt _Cur;
; 1548 :     vector<bool> _Grp_valid;
; 1549 : };
; 1550 : 
; 1551 : template <class _BidIt>
; 1552 : class _Tgt_state_t : public _Bt_state_t<_BidIt> { // holds the current state of the match
; 1553 : public:
; 1554 :     struct _Grp_t { // stores a pair of iterators
; 1555 :         _BidIt _Begin;
; 1556 :         _BidIt _End;
; 1557 :     };
; 1558 : 
; 1559 :     vector<_Grp_t> _Grps;
; 1560 : 
; 1561 :     void operator=(const _Bt_state_t<_BidIt>& _Other) {
; 1562 :         static_cast<_Bt_state_t<_BidIt>&>(*this) = _Other;
; 1563 :     }
; 1564 : };
; 1565 : 
; 1566 : template <class _BidIt, class _Elem, class _RxTraits, class _It>
; 1567 : class _Matcher { // provides ways to match a regular expression to a text sequence
; 1568 : public:
; 1569 :     _Matcher(_It _Pfirst, _It _Plast, const _RxTraits& _Tr, _Root_node* _Re, unsigned int _Nx,
; 1570 :         regex_constants::syntax_option_type _Sf, regex_constants::match_flag_type _Mf)
; 1571 :         : _End(_Plast), _First(_Pfirst), _Rep(_Re), _Sflags(_Sf), _Mflags(_Mf), _Ncap(static_cast<int>(_Nx)),
; 1572 :           _Longest((_Re->_Flags & _Fl_longest) && !(_Mf & regex_constants::match_any)), _Traits(_Tr) {
; 1573 :         _Loop_vals.resize(_Re->_Loops);
; 1574 :         _Adl_verify_range(_Pfirst, _Plast);
; 1575 :     }
; 1576 : 
; 1577 :     void _Setf(regex_constants::match_flag_type _Mf) { // set specified flags
; 1578 :         _Mflags |= _Mf;
; 1579 :     }
; 1580 : 
; 1581 :     void _Clearf(regex_constants::match_flag_type _Mf) { // clear specified flags
; 1582 :         _Mflags &= ~_Mf;
; 1583 :     }
; 1584 : 
; 1585 :     template <class _Alloc>
; 1586 :     bool _Match(_It _Pfirst, match_results<_BidIt, _Alloc>* _Matches, bool _Full_match) {
; 1587 :         // try to match
; 1588 :         _First = _Pfirst;
; 1589 :         return _Match(_Matches, _Full_match);
; 1590 :     }
; 1591 : 
; 1592 :     template <class _Alloc>
; 1593 :     bool _Match(match_results<_BidIt, _Alloc>* _Matches, bool _Full_match) {
; 1594 :         // try to match
; 1595 :         if (_Matches) { // clear _Matches before doing work
; 1596 :             _Matches->_Ready = true;
; 1597 :             _Matches->_Resize(0);
; 1598 :         }
; 1599 : 
; 1600 :         _Begin          = _First;
; 1601 :         _Tgt_state._Cur = _First;
; 1602 :         _Tgt_state._Grp_valid.resize(_Get_ncap());
; 1603 :         _Tgt_state._Grps.resize(_Get_ncap());
; 1604 :         _Cap                  = static_cast<bool>(_Matches);
; 1605 :         _Full                 = _Full_match;
; 1606 :         _Max_complexity_count = _REGEX_MAX_COMPLEXITY_COUNT;
; 1607 :         _Max_stack_count      = _REGEX_MAX_STACK_COUNT;
; 1608 : 
; 1609 :         _Matched = false;
; 1610 : 
; 1611 :         if (!_Match_pat(_Rep)) {
; 1612 :             return false;
; 1613 :         }
; 1614 : 
; 1615 :         if (_Matches) { // copy results to _Matches
; 1616 :             _Matches->_Resize(_Get_ncap());
; 1617 :             for (unsigned int _Idx = 0; _Idx < _Get_ncap(); ++_Idx) { // copy submatch _Idx
; 1618 :                 if (_Res._Grp_valid[_Idx]) { // copy successful match
; 1619 :                     _Matches->_At(_Idx).matched = true;
; 1620 :                     _Matches->_At(_Idx).first   = _Res._Grps[_Idx]._Begin;
; 1621 :                     _Matches->_At(_Idx).second  = _Res._Grps[_Idx]._End;
; 1622 :                 } else { // copy failed match
; 1623 :                     _Matches->_At(_Idx).matched = false;
; 1624 :                     _Matches->_At(_Idx).first   = _End;
; 1625 :                     _Matches->_At(_Idx).second  = _End;
; 1626 :                 }
; 1627 :             }
; 1628 :             _Matches->_Org           = _Begin;
; 1629 :             _Matches->_Pfx().first   = _Begin;
; 1630 :             _Matches->_Pfx().second  = _Matches->_At(0).first;
; 1631 :             _Matches->_Pfx().matched = _Matches->_Pfx().first != _Matches->_Pfx().second;
; 1632 : 
; 1633 :             _Matches->_Sfx().first   = _Matches->_At(0).second;
; 1634 :             _Matches->_Sfx().second  = _End;
; 1635 :             _Matches->_Sfx().matched = _Matches->_Sfx().first != _Matches->_Sfx().second;
; 1636 : 
; 1637 :             _Matches->_Null().first  = _End;
; 1638 :             _Matches->_Null().second = _End;
; 1639 :         }
; 1640 :         return true;
; 1641 :     }
; 1642 : 
; 1643 :     _BidIt _Skip(_BidIt, _BidIt, _Node_base* = nullptr);
; 1644 : 
; 1645 : private:
; 1646 :     _Tgt_state_t<_It> _Tgt_state;
; 1647 :     _Tgt_state_t<_It> _Res;
; 1648 :     vector<_Loop_vals_t> _Loop_vals;
; 1649 : 
; 1650 :     bool _Do_if(_Node_if*);
; 1651 :     bool _Do_rep0(_Node_rep*, bool);
; 1652 :     bool _Do_rep(_Node_rep*, bool, int);
; 1653 :     bool _Do_class(_Node_base*);
; 1654 :     bool _Match_pat(_Node_base*);
; 1655 :     bool _Better_match();
; 1656 :     bool _Is_wbound() const;
; 1657 : 
; 1658 :     unsigned int _Get_ncap() const;
; 1659 : 
; 1660 :     _It _Begin;
; 1661 :     _It _End;
; 1662 :     _It _First;
; 1663 :     _Node_base* _Rep;
; 1664 :     regex_constants::syntax_option_type _Sflags;
; 1665 :     regex_constants::match_flag_type _Mflags;
; 1666 :     bool _Matched = false;
; 1667 :     bool _Cap;
; 1668 :     int _Ncap; // Do not use. Use _Get_ncap instead.
; 1669 :     bool _Longest;
; 1670 :     const _RxTraits& _Traits;
; 1671 :     bool _Full;
; 1672 :     long _Max_complexity_count;
; 1673 :     long _Max_stack_count;
; 1674 : 
; 1675 : public:
; 1676 :     _Matcher& operator=(const _Matcher&) = delete;
; 1677 : };
; 1678 : 
; 1679 : enum _Prs_ret { // indicate class element type
; 1680 :     _Prs_none,
; 1681 :     _Prs_chr,
; 1682 :     _Prs_set
; 1683 : };
; 1684 : 
; 1685 : template <class _FwdIt, class _Elem, class _RxTraits>
; 1686 : class _Parser { // parse a regular expression
; 1687 : public:
; 1688 :     using char_class_type = typename _RxTraits::char_class_type;
; 1689 : 
; 1690 :     _Parser(const _RxTraits& _Tr, _FwdIt _Pfirst, _FwdIt _Plast, regex_constants::syntax_option_type _Fx);
; 1691 :     _Root_node* _Compile();
; 1692 : 
; 1693 :     unsigned int _Mark_count() const noexcept {
; 1694 :         return _Grp_idx + 1;
; 1695 :     }
; 1696 : 
; 1697 : private:
; 1698 :     // lexing
; 1699 :     void _Error(regex_constants::error_type);
; 1700 : 
; 1701 :     bool _Is_esc() const;
; 1702 :     void _Trans();
; 1703 :     void _Next();
; 1704 :     void _Expect(_Meta_type, regex_constants::error_type);
; 1705 : 
; 1706 :     // parsing
; 1707 :     int _Do_digits(int _Base, int _Count, regex_constants::error_type _Error_type);
; 1708 :     bool _DecimalDigits(regex_constants::error_type _Error_type);
; 1709 :     void _HexDigits(int);
; 1710 :     bool _OctalDigits();
; 1711 :     void _Do_ex_class(_Meta_type);
; 1712 :     bool _CharacterClassEscape(bool);
; 1713 :     _Prs_ret _ClassEscape(bool);
; 1714 :     _Prs_ret _ClassAtom();
; 1715 :     void _ClassRanges();
; 1716 :     void _CharacterClass();
; 1717 :     bool _IdentityEscape();
; 1718 :     bool _IsIdentityEscape() const;
; 1719 :     bool _Do_ffn(_Elem);
; 1720 :     bool _Do_ffnx(_Elem);
; 1721 :     bool _CharacterEscape();
; 1722 :     void _AtomEscape();
; 1723 :     void _Do_capture_group();
; 1724 :     void _Do_noncapture_group();
; 1725 :     void _Do_assert_group(bool);
; 1726 :     bool _Wrapped_disjunction();
; 1727 :     void _Quantifier();
; 1728 :     bool _Alternative();
; 1729 :     void _Disjunction();
; 1730 : 
; 1731 :     _FwdIt _Pat;
; 1732 :     _FwdIt _Begin;
; 1733 :     _FwdIt _End;
; 1734 :     unsigned int _Grp_idx = 0;
; 1735 :     int _Disj_count       = 0;
; 1736 :     vector<bool> _Finished_grps;
; 1737 :     _Builder<_FwdIt, _Elem, _RxTraits> _Nfa;
; 1738 :     const _RxTraits& _Traits;
; 1739 :     regex_constants::syntax_option_type _Flags;
; 1740 :     int _Val;
; 1741 :     _Elem _Char;
; 1742 :     _Meta_type _Mchar;
; 1743 :     unsigned int _L_flags;
; 1744 : };
; 1745 : 
; 1746 : enum _Lang_flags { // describe language properties
; 1747 :     _L_ext_rep    = 0x00000001, // + and ? repetitions
; 1748 :     _L_alt_pipe   = 0x00000002, // uses '|' for alternation
; 1749 :     _L_alt_nl     = 0x00000004, // uses '\n' for alternation (grep, egrep)
; 1750 :     _L_nex_grp    = 0x00000008, // has non-escaped capture groups
; 1751 :     _L_nex_rep    = 0x00000010, // has non-escaped repeats
; 1752 :     _L_nc_grp     = 0x00000020, // has non-capture groups (?:xxx)
; 1753 :     _L_asrt_gen   = 0x00000040, // has generalized assertions (?=xxx), (?!xxx)
; 1754 :     _L_asrt_wrd   = 0x00000080, // has word boundary assertions (\b, \B)
; 1755 :     _L_bckr       = 0x00000100, // has backreferences (ERE doesn't)
; 1756 :     _L_lim_bckr   = 0x00000200, // has limited backreferences (BRE \1-\9)
; 1757 :     _L_ngr_rep    = 0x00000400, // has non-greedy repeats
; 1758 :     _L_esc_uni    = 0x00000800, // has Unicode escape sequences
; 1759 :     _L_esc_hex    = 0x00001000, // has hexadecimal escape sequences
; 1760 :     _L_esc_oct    = 0x00002000, // has octal escape sequences
; 1761 :     _L_esc_bsl    = 0x00004000, // has escape backslash in character classes
; 1762 :     _L_esc_ffnx   = 0x00008000, // has extra file escapes (\a and \b)
; 1763 :     _L_esc_ffn    = 0x00010000, // has limited file escapes (\[fnrtv])
; 1764 :     _L_esc_wsd    = 0x00020000, // has w, s, and d character set escapes
; 1765 :     _L_esc_ctrl   = 0x00040000, // has control escape
; 1766 :     _L_no_nl      = 0x00080000, // no newline in pattern or matching text
; 1767 :     _L_bzr_chr    = 0x00100000, // \0 is a valid character constant
; 1768 :     _L_grp_esc    = 0x00200000, // \ is special character in group
; 1769 :     _L_ident_ECMA = 0x00400000, // ECMA identity escape (not identifierpart)
; 1770 :     _L_ident_ERE  = 0x00800000, // ERE identity escape (.[\*^$, plus {+?}()
; 1771 :     _L_ident_awk  = 0x01000000, // awk identity escape ( ERE plus "/)
; 1772 :     _L_anch_rstr  = 0x02000000, // anchor restricted to beginning/end
; 1773 :     _L_star_beg   = 0x04000000, // star okay at beginning of RE/expr (BRE)
; 1774 :     _L_empty_grp  = 0x08000000, // empty group allowed (ERE prohibits "()")
; 1775 :     _L_paren_bal  = 0x10000000, // ')'/'}'/']' special only after '('/'{'/']'
; 1776 :     _L_brk_rstr   = 0x20000000, // ']' not special when first character in set
; 1777 :     _L_mtch_long  = 0x40000000, // find longest match (ERE, BRE)
; 1778 : };
; 1779 : 
; 1780 : class _Regex_base : public _Container_base { // base class for basic_regex to construct and destroy proxy
; 1781 : public:
; 1782 : #if 0 < _ITERATOR_DEBUG_LEVEL
; 1783 :     _Regex_base() { // construct proxy
; 1784 :         this->_Myproxy = new _Container_proxy;
; 1785 :         this->_Myproxy->_Mycont = this;
; 1786 :     }
; 1787 : 
; 1788 :     ~_Regex_base() noexcept {
; 1789 :         this->_Orphan_all();
; 1790 :         delete this->_Myproxy;
; 1791 :         this->_Myproxy = nullptr;
; 1792 :     }
; 1793 : #endif // 0 < _ITERATOR_DEBUG_LEVEL
; 1794 : };
; 1795 : 
; 1796 : _EXPORT_STD template <class _Elem, class _RxTraits = regex_traits<_Elem>>
; 1797 : class basic_regex : public _Regex_base { // regular expression
; 1798 : public:
; 1799 :     using value_type  = _Elem;
; 1800 :     using traits_type = _RxTraits;
; 1801 :     using locale_type = typename _RxTraits::locale_type;
; 1802 :     using string_type = typename _RxTraits::string_type;
; 1803 :     using flag_type   = regex_constants::syntax_option_type;
; 1804 : 
; 1805 :     static constexpr flag_type icase      = regex_constants::icase;
; 1806 :     static constexpr flag_type nosubs     = regex_constants::nosubs;
; 1807 :     static constexpr flag_type optimize   = regex_constants::optimize;
; 1808 :     static constexpr flag_type collate    = regex_constants::collate;
; 1809 :     static constexpr flag_type ECMAScript = regex_constants::ECMAScript;
; 1810 :     static constexpr flag_type basic      = regex_constants::basic;
; 1811 :     static constexpr flag_type extended   = regex_constants::extended;
; 1812 :     static constexpr flag_type awk        = regex_constants::awk;
; 1813 :     static constexpr flag_type grep       = regex_constants::grep;
; 1814 :     static constexpr flag_type egrep      = regex_constants::egrep;
; 1815 : 
; 1816 :     basic_regex() = default; // construct empty object
; 1817 : 
; 1818 :     explicit basic_regex(_In_z_ const _Elem* _Ptr, flag_type _Flags = regex_constants::ECMAScript) {
; 1819 :         _Reset(_Ptr, _Ptr + _RxTraits::length(_Ptr), _Flags);
; 1820 :     }
; 1821 : 
; 1822 :     basic_regex(_In_reads_(_Count) const _Elem* _Ptr, size_t _Count, flag_type _Flags = regex_constants::ECMAScript) {
; 1823 :         if (_Ptr) {
; 1824 :             _Reset(_Ptr, _Ptr + _Count, _Flags);
; 1825 :             return;
; 1826 :         }
; 1827 : 
; 1828 :         _Xregex_error(regex_constants::error_parse);
; 1829 :     }
; 1830 : 
; 1831 :     template <class _STtraits, class _STalloc>
; 1832 :     explicit basic_regex(
; 1833 :         const basic_string<_Elem, _STtraits, _STalloc>& _Str, flag_type _Flags = regex_constants::ECMAScript) {
; 1834 :         _Reset(_Str.data(), _Str.data() + static_cast<ptrdiff_t>(_Str.size()), _Flags);
; 1835 :     }
; 1836 : 
; 1837 :     template <class _InIt>
; 1838 :     basic_regex(_InIt _First, _InIt _Last, flag_type _Flags) {
; 1839 :         _Adl_verify_range(_First, _Last);
; 1840 :         _Reset(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Flags);
; 1841 :     }
; 1842 : 
; 1843 :     template <class _InIt>
; 1844 :     basic_regex(_InIt _First, _InIt _Last) {
; 1845 :         _Adl_verify_range(_First, _Last);
; 1846 :         _Reset(_Get_unwrapped(_First), _Get_unwrapped(_Last), regex_constants::ECMAScript);
; 1847 :     }
; 1848 : 
; 1849 :     basic_regex(const basic_regex& _Right)
; 1850 : #if _ENHANCED_REGEX_VISUALIZER
; 1851 :         : _Traits(_Right._Traits), _Visualization(_Right._Visualization)
; 1852 : #else
; 1853 :         : _Traits(_Right._Traits)
; 1854 : #endif
; 1855 :     { // construct copy of _Right
; 1856 :         _Reset(_Right._Rep);
; 1857 :     }
; 1858 : 
; 1859 :     basic_regex(initializer_list<_Elem> _Ilist, flag_type _Flags = regex_constants::ECMAScript) {
; 1860 :         _Reset(_Ilist.begin(), _Ilist.end(), _Flags);
; 1861 :     }
; 1862 : 
; 1863 :     basic_regex& operator=(initializer_list<_Elem> _Ilist) { // replace with regular expression in initializer_list
; 1864 :         return assign(_Ilist);
; 1865 :     }
; 1866 : 
; 1867 :     basic_regex& assign(initializer_list<_Elem> _Ilist, flag_type _Flags = regex_constants::ECMAScript) {
; 1868 :         // replace with regular expression in initializer_list
; 1869 :         _Reset(_Ilist.begin(), _Ilist.end(), _Flags);
; 1870 :         return *this;
; 1871 :     }
; 1872 : 
; 1873 :     basic_regex(basic_regex&& _Right) noexcept {
; 1874 :         _Assign_rv(_STD move(_Right));
; 1875 :     }
; 1876 : 
; 1877 :     basic_regex& operator=(basic_regex&& _Right) noexcept {
; 1878 :         _Assign_rv(_STD move(_Right));
; 1879 :         return *this;
; 1880 :     }
; 1881 : 
; 1882 :     void _Assign_rv(basic_regex&& _Right) {
; 1883 :         if (this != _STD addressof(_Right)) { // clear this and steal from _Right
; 1884 :             _Tidy();
; 1885 : 
; 1886 : #if _ENHANCED_REGEX_VISUALIZER
; 1887 :             _Visualization = _STD move(_Right._Visualization);
; 1888 : #endif // _ENHANCED_REGEX_VISUALIZER
; 1889 : 
; 1890 :             _Rep        = _Right._Rep;
; 1891 :             _Right._Rep = nullptr;
; 1892 :         }
; 1893 :     }
; 1894 : 
; 1895 :     basic_regex& assign(basic_regex&& _Right) noexcept {
; 1896 :         _Assign_rv(_STD move(_Right));
; 1897 :         return *this;
; 1898 :     }
; 1899 : 
; 1900 :     ~basic_regex() noexcept {
; 1901 :         _Tidy();
; 1902 :     }
; 1903 : 
; 1904 :     basic_regex& operator=(const basic_regex& _Right) {
; 1905 :         return assign(_Right);
; 1906 :     }
; 1907 : 
; 1908 :     basic_regex& operator=(_In_z_ const _Elem* _Ptr) {
; 1909 :         _Reset(_Ptr, _Ptr + _RxTraits::length(_Ptr), ECMAScript);
; 1910 :         return *this;
; 1911 :     }
; 1912 : 
; 1913 :     template <class _STtraits, class _STalloc>
; 1914 :     basic_regex& operator=(const basic_string<_Elem, _STtraits, _STalloc>& _Str) {
; 1915 :         _Reset(_Str.data(), _Str.data() + static_cast<ptrdiff_t>(_Str.size()), ECMAScript);
; 1916 :         return *this;
; 1917 :     }
; 1918 : 
; 1919 :     unsigned int _Loop_count() const noexcept {
; 1920 :         return _Rep ? _Rep->_Loops : 0;
; 1921 :     }
; 1922 : 
; 1923 :     _NODISCARD unsigned int mark_count() const noexcept /* strengthened */ {
; 1924 :         return _Rep ? _Rep->_Marks - 1 : 0;
; 1925 :     }
; 1926 : 
; 1927 :     basic_regex& assign(const basic_regex& _Right) {
; 1928 : #if _ENHANCED_REGEX_VISUALIZER
; 1929 :         _Visualization = _Right._Visualization;
; 1930 : #endif // _ENHANCED_REGEX_VISUALIZER
; 1931 : 
; 1932 :         _Reset(_Right._Rep);
; 1933 :         return *this;
; 1934 :     }
; 1935 : 
; 1936 :     basic_regex& assign(_In_z_ const _Elem* _Ptr, flag_type _Flags = regex_constants::ECMAScript) {
; 1937 :         return assign(_Ptr, _RxTraits::length(_Ptr), _Flags);
; 1938 :     }
; 1939 : 
; 1940 :     basic_regex& assign(
; 1941 :         _In_reads_(_Count) const _Elem* _Ptr, size_t _Count, flag_type _Flags = regex_constants::ECMAScript) {
; 1942 :         _Reset(_Ptr, _Ptr + _Count, _Flags);
; 1943 :         return *this;
; 1944 :     }
; 1945 : 
; 1946 :     template <class _STtraits, class _STalloc>
; 1947 :     basic_regex& assign(
; 1948 :         const basic_string<_Elem, _STtraits, _STalloc>& _Str, flag_type _Flags = regex_constants::ECMAScript) {
; 1949 :         _Reset(_Str.data(), _Str.data() + static_cast<ptrdiff_t>(_Str.size()), _Flags);
; 1950 :         return *this;
; 1951 :     }
; 1952 : 
; 1953 :     template <class _InIt>
; 1954 :     basic_regex& assign(_InIt _First, _InIt _Last, flag_type _Flags = regex_constants::ECMAScript) {
; 1955 :         _Adl_verify_range(_First, _Last);
; 1956 :         _Reset(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Flags);
; 1957 :         return *this;
; 1958 :     }
; 1959 : 
; 1960 :     _NODISCARD flag_type flags() const noexcept /* strengthened */ {
; 1961 :         return _Rep ? _Rep->_Fl : flag_type{};
; 1962 :     }
; 1963 : 
; 1964 :     locale_type imbue(locale_type _Loc) { // clear regular expression and set locale to argument
; 1965 :         _Tidy();
; 1966 :         return _Traits.imbue(_Loc);
; 1967 :     }
; 1968 : 
; 1969 :     locale_type getloc() const {
; 1970 :         return _Traits.getloc();
; 1971 :     }
; 1972 : 
; 1973 :     void swap(basic_regex& _Right) noexcept /* strengthened */ {
; 1974 :         _STD swap(_Rep, _Right._Rep);
; 1975 : 
; 1976 : #if _ENHANCED_REGEX_VISUALIZER
; 1977 :         _Visualization.swap(_Right._Visualization);
; 1978 : #endif // _ENHANCED_REGEX_VISUALIZER
; 1979 :     }
; 1980 : 
; 1981 :     _Root_node* _Get() const noexcept {
; 1982 :         return _Rep;
; 1983 :     }
; 1984 : 
; 1985 :     bool _Empty() const noexcept {
; 1986 :         return _Rep == nullptr;
; 1987 :     }
; 1988 : 
; 1989 :     const _RxTraits& _Get_traits() const noexcept {
; 1990 :         return _Traits;
; 1991 :     }
; 1992 : 
; 1993 : private:
; 1994 :     _Root_node* _Rep = nullptr;
; 1995 :     _RxTraits _Traits;
; 1996 : 
; 1997 : #if _ENHANCED_REGEX_VISUALIZER
; 1998 :     basic_string<_Elem> _Visualization;
; 1999 : #endif // _ENHANCED_REGEX_VISUALIZER
; 2000 : 
; 2001 :     void _Tidy() noexcept { // free all storage
; 2002 :         if (_Rep && _MT_DECR(reinterpret_cast<_Atomic_counter_t&>(_Rep->_Refs)) == 0) {
; 2003 :             _Destroy_node(_Rep);
; 2004 :         }
; 2005 : 
; 2006 :         _Rep = nullptr;
; 2007 :     }
; 2008 : 
; 2009 :     template <class _InIt>
; 2010 :     void _Reset(_InIt _First, _InIt _Last, flag_type _Flags) {
; 2011 :         // build regular expression from iterator range
; 2012 :         if constexpr (_Is_ranges_fwd_iter_v<_InIt>) {
; 2013 : #if _ENHANCED_REGEX_VISUALIZER
; 2014 :             _Visualization.assign(_First, _Last);
; 2015 : #endif // _ENHANCED_REGEX_VISUALIZER
; 2016 : 
; 2017 :             _Parser<_InIt, _Elem, _RxTraits> _Prs(_Traits, _First, _Last, _Flags);
; 2018 :             _Root_node* _Rx = _Prs._Compile();
; 2019 :             _Reset(_Rx);
; 2020 :         } else {
; 2021 :             static_assert(_Is_ranges_input_iter_v<_InIt>, "Iterators must be at least input iterators");
; 2022 : 
; 2023 :             basic_string<_Iter_value_t<_InIt>> _Str(_First, _Last);
; 2024 : 
; 2025 :             _Reset(_Str.data(), _Str.data() + static_cast<ptrdiff_t>(_Str.size()), _Flags);
; 2026 :         }
; 2027 :     }
; 2028 : 
; 2029 :     void _Reset(_Root_node* _Rx) { // build regular expression holding root node _Rx
; 2030 :         if (_Rx) {
; 2031 :             _MT_INCR(reinterpret_cast<_Atomic_counter_t&>(_Rx->_Refs));
; 2032 :         }
; 2033 : 
; 2034 :         _Tidy();
; 2035 :         _Rep = _Rx;
; 2036 :     }
; 2037 : };
; 2038 : 
; 2039 : #if _HAS_CXX17
; 2040 : template <class _FwdIt>
; 2041 : basic_regex(_FwdIt, _FwdIt, regex_constants::syntax_option_type = regex_constants::ECMAScript)
; 2042 :     -> basic_regex<typename iterator_traits<_FwdIt>::value_type>;
; 2043 : #endif // _HAS_CXX17
; 2044 : 
; 2045 : _EXPORT_STD template <class _Elem, class _RxTraits>
; 2046 : void swap(basic_regex<_Elem, _RxTraits>& _Left, basic_regex<_Elem, _RxTraits>& _Right) noexcept /* strengthened */ {
; 2047 :     _Left.swap(_Right);
; 2048 : }
; 2049 : 
; 2050 : _EXPORT_STD template <class _BidIt, class _Alloc>
; 2051 : void swap(match_results<_BidIt, _Alloc>& _Left, match_results<_BidIt, _Alloc>& _Right)
; 2052 :     noexcept(noexcept(_Left.swap(_Right))) /* strengthened */ {
; 2053 :     _Left.swap(_Right);
; 2054 : }
; 2055 : 
; 2056 : _EXPORT_STD using regex   = basic_regex<char>;
; 2057 : _EXPORT_STD using wregex  = basic_regex<wchar_t>;
; 2058 : _EXPORT_STD using cmatch  = match_results<const char*>;
; 2059 : _EXPORT_STD using wcmatch = match_results<const wchar_t*>;
; 2060 : _EXPORT_STD using smatch  = match_results<string::const_iterator>;
; 2061 : _EXPORT_STD using wsmatch = match_results<wstring::const_iterator>;
; 2062 : 
; 2063 : template <class _BidIt, class _Alloc, class _InIt, class _OutIt>
; 2064 : _OutIt _Format_default(const match_results<_BidIt, _Alloc>& _Match, _OutIt _Out, _InIt _First, _InIt _Last,
; 2065 :     regex_constants::match_flag_type) { // format with ECMAScript rules
; 2066 :     while (_First != _Last) { // process one character or escape sequence
; 2067 :         if (*_First != '$') {
; 2068 :             *_Out++ = *_First++;
; 2069 :         } else if (++_First == _Last) {
; 2070 :             *_Out++ = '$'; // preserve $ at end
; 2071 :         } else if (*_First == '$') { // replace $$
; 2072 :             *_Out++ = '$';
; 2073 :             ++_First;
; 2074 :         } else if (*_First == '`') { // replace $`
; 2075 :             _Out = _STD copy(_Match.prefix().first, _Match.prefix().second, _Out);
; 2076 :             ++_First;
; 2077 :         } else if (*_First == '\'') { // replace $'
; 2078 :             _Out = _STD copy(_Match.suffix().first, _Match.suffix().second, _Out);
; 2079 :             ++_First;
; 2080 :         } else if (*_First == '&') { // replace $&
; 2081 :             ++_First;
; 2082 :             if (_Match.size() != 0) {
; 2083 :                 _Out = _STD copy(_Match._At(0).first, _Match._At(0).second, _Out);
; 2084 :             }
; 2085 :         } else if ('0' <= *_First && *_First <= '9') { // replace capture group descriptors $n, $nn
; 2086 :             auto _Num              = static_cast<unsigned int>(*_First++ - '0');
; 2087 :             const bool _Two_digits = _First != _Last && '0' <= *_First && *_First <= '9';
; 2088 :             if (_Two_digits) { // process second digit
; 2089 :                 _Num *= 10;
; 2090 :                 _Num += static_cast<unsigned int>(*_First++ - '0');
; 2091 :             }
; 2092 : 
; 2093 :             if (_Num == 0) { // preserve $0, $00
; 2094 :                 *_Out++ = '$';
; 2095 :                 *_Out++ = '0';
; 2096 :                 if (_Two_digits) {
; 2097 :                     *_Out++ = '0';
; 2098 :                 }
; 2099 :             } else if (_Num < _Match.size()) {
; 2100 :                 _Out = _STD copy(_Match._At(_Num).first, _Match._At(_Num).second, _Out);
; 2101 :             }
; 2102 :         } else { // replace $x
; 2103 :             *_Out++ = '$';
; 2104 :             *_Out++ = *_First++;
; 2105 :         }
; 2106 :     }
; 2107 :     return _Out;
; 2108 : }
; 2109 : 
; 2110 : template <class _BidIt, class _Alloc, class _InIt, class _OutIt>
; 2111 : _OutIt _Format_sed(const match_results<_BidIt, _Alloc>& _Match, _OutIt _Out, _InIt _First, _InIt _Last,
; 2112 :     regex_constants::match_flag_type) { // format with sed rules
; 2113 :     while (_First != _Last) { // process one character or escape sequence
; 2114 :         if (*_First == '&') { // replace with full match
; 2115 :             ++_First;
; 2116 :             if (_Match.size() != 0) {
; 2117 :                 _Out = _STD copy(_Match._At(0).first, _Match._At(0).second, _Out);
; 2118 :             }
; 2119 :         } else if (*_First != '\\') {
; 2120 :             *_Out++ = *_First++;
; 2121 :         } else if (++_First != _Last) {
; 2122 :             if ('0' <= *_First && *_First <= '9') { // replace \n, including \0
; 2123 :                 const auto _Num = static_cast<unsigned int>(*_First++ - '0');
; 2124 :                 if (_Num < _Match.size()) {
; 2125 :                     _Out = _STD copy(_Match._At(_Num).first, _Match._At(_Num).second, _Out);
; 2126 :                 }
; 2127 :             } else {
; 2128 :                 *_Out++ = *_First++; // replace \x, including \\, \&
; 2129 :             }
; 2130 :         }
; 2131 :     }
; 2132 : 
; 2133 :     return _Out;
; 2134 : }
; 2135 : 
; 2136 : template <class _BidIt, class _Alloc, class _Elem, class _RxTraits, class _It>
; 2137 : bool _Regex_match1(_It _First, _It _Last, match_results<_BidIt, _Alloc>* _Matches,
; 2138 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs,
; 2139 :     bool _Full) { // try to match regular expression to target text
; 2140 :     if (_Re._Empty()) {
; 2141 :         return false;
; 2142 :     }
; 2143 : 
; 2144 :     _Matcher<_BidIt, _Elem, _RxTraits, _It> _Mx(
; 2145 :         _First, _Last, _Re._Get_traits(), _Re._Get(), _Re.mark_count() + 1, _Re.flags(), _Flgs);
; 2146 :     return _Mx._Match(_Matches, _Full);
; 2147 : }
; 2148 : 
; 2149 : _EXPORT_STD template <class _BidIt, class _Alloc, class _Elem, class _RxTraits>
; 2150 : bool regex_match(_BidIt _First, _BidIt _Last, match_results<_BidIt, _Alloc>& _Matches,
; 2151 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2152 :     // try to match regular expression to target text
; 2153 :     _Adl_verify_range(_First, _Last);
; 2154 :     return _Regex_match1(_First, _Last, _STD addressof(_Matches), _Re, _Flgs, true);
; 2155 : }
; 2156 : 
; 2157 : _EXPORT_STD template <class _BidIt, class _Elem, class _RxTraits>
; 2158 : _NODISCARD bool regex_match(_BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2159 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2160 :     // try to match regular expression to target text
; 2161 :     _Adl_verify_range(_First, _Last);
; 2162 :     return _Regex_match1(_Get_unwrapped(_First), _Get_unwrapped(_Last),
; 2163 :         static_cast<match_results<_Unwrapped_t<const _BidIt&>>*>(nullptr), _Re, _Flgs | regex_constants::match_any,
; 2164 :         true);
; 2165 : }
; 2166 : 
; 2167 : _EXPORT_STD template <class _Elem, class _RxTraits>
; 2168 : _NODISCARD bool regex_match(_In_z_ const _Elem* _Str, const basic_regex<_Elem, _RxTraits>& _Re,
; 2169 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2170 :     // try to match regular expression to target text
; 2171 :     const _Elem* _Last = _Str + char_traits<_Elem>::length(_Str);
; 2172 :     return _Regex_match1(
; 2173 :         _Str, _Last, static_cast<match_results<const _Elem*>*>(nullptr), _Re, _Flgs | regex_constants::match_any, true);
; 2174 : }
; 2175 : 
; 2176 : _EXPORT_STD template <class _Elem, class _Alloc, class _RxTraits>
; 2177 : bool regex_match(_In_z_ const _Elem* _Str, match_results<const _Elem*, _Alloc>& _Matches,
; 2178 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2179 :     // try to match regular expression to target text
; 2180 :     const _Elem* _Last = _Str + char_traits<_Elem>::length(_Str);
; 2181 :     return _Regex_match1(_Str, _Last, _STD addressof(_Matches), _Re, _Flgs, true);
; 2182 : }
; 2183 : 
; 2184 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Alloc, class _Elem, class _RxTraits>
; 2185 : bool regex_match(const basic_string<_Elem, _StTraits, _StAlloc>& _Str,
; 2186 :     match_results<typename basic_string<_Elem, _StTraits, _StAlloc>::const_iterator, _Alloc>& _Matches,
; 2187 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2188 :     // try to match regular expression to target text
; 2189 :     return _Regex_match1(_Str.begin(), _Str.end(), _STD addressof(_Matches), _Re, _Flgs, true);
; 2190 : }
; 2191 : 
; 2192 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Alloc, class _Elem, class _RxTraits>
; 2193 : bool regex_match(const basic_string<_Elem, _StTraits, _StAlloc>&&,
; 2194 :     match_results<typename basic_string<_Elem, _StTraits, _StAlloc>::const_iterator, _Alloc>&,
; 2195 :     const basic_regex<_Elem, _RxTraits>&, regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2196 : 
; 2197 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Elem, class _RxTraits>
; 2198 : _NODISCARD bool regex_match(const basic_string<_Elem, _StTraits, _StAlloc>& _Str,
; 2199 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2200 :     // try to match regular expression to target text
; 2201 :     return _Regex_match1(_Str.data(), _Str.data() + _Str.size(), static_cast<match_results<const _Elem*>*>(nullptr),
; 2202 :         _Re, _Flgs | regex_constants::match_any, true);
; 2203 : }
; 2204 : 
; 2205 : template <class _BidIt, class _Alloc, class _Elem, class _RxTraits, class _It>
; 2206 : bool _Regex_search2(_It _First, _It _Last, match_results<_BidIt, _Alloc>* _Matches,
; 2207 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs, _It _Org) {
; 2208 :     // search for regular expression match in target text
; 2209 :     if (_Re._Empty()) {
; 2210 :         return false;
; 2211 :     }
; 2212 : 
; 2213 :     bool _Found      = false;
; 2214 :     const _It _Begin = _First;
; 2215 :     if ((_Flgs & regex_constants::_Skip_zero_length) && _First != _Last) {
; 2216 :         ++_First;
; 2217 :     }
; 2218 : 
; 2219 :     _Matcher<_BidIt, _Elem, _RxTraits, _It> _Mx(
; 2220 :         _First, _Last, _Re._Get_traits(), _Re._Get(), _Re.mark_count() + 1, _Re.flags(), _Flgs);
; 2221 : 
; 2222 :     if (_Mx._Match(_Matches, false)) {
; 2223 :         _Found = true;
; 2224 :     } else if (_First != _Last && !(_Flgs & regex_constants::match_continuous)) { // try more on suffixes
; 2225 :         _Mx._Setf(regex_constants::match_prev_avail);
; 2226 :         _Mx._Clearf(regex_constants::_Match_not_null);
; 2227 :         while ((_First = _Mx._Skip(++_First, _Last)) != _Last) {
; 2228 :             if (_Mx._Match(_First, _Matches, false)) { // found match starting at _First
; 2229 :                 _Found = true;
; 2230 :                 break;
; 2231 :             }
; 2232 :         }
; 2233 : 
; 2234 :         if (!_Found && _Mx._Match(_Last, _Matches, false)) {
; 2235 :             _Found = true;
; 2236 :         }
; 2237 :     }
; 2238 : 
; 2239 :     if (_Found && _Matches) { // update _Matches
; 2240 :         _Matches->_Org           = _Org;
; 2241 :         _Matches->_Pfx().first   = _Begin;
; 2242 :         _Matches->_Pfx().matched = _Matches->_Pfx().first != _Matches->_Pfx().second;
; 2243 :     }
; 2244 :     return _Found;
; 2245 : }
; 2246 : 
; 2247 : _EXPORT_STD template <class _BidIt, class _Alloc, class _Elem, class _RxTraits>
; 2248 : bool regex_search(_BidIt _First, _BidIt _Last, match_results<_BidIt, _Alloc>& _Matches,
; 2249 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2250 :     // search for regular expression match in target text
; 2251 :     _Adl_verify_range(_First, _Last);
; 2252 :     return _Regex_search2(_First, _Last, _STD addressof(_Matches), _Re, _Flgs, _First);
; 2253 : }
; 2254 : 
; 2255 : _EXPORT_STD template <class _BidIt, class _Elem, class _RxTraits>
; 2256 : _NODISCARD bool regex_search(_BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2257 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2258 :     // search for regular expression match in target text
; 2259 :     _Adl_verify_range(_First, _Last);
; 2260 :     return _Regex_search2(_Get_unwrapped(_First), _Get_unwrapped(_Last),
; 2261 :         static_cast<match_results<_Unwrapped_t<const _BidIt&>>*>(nullptr), _Re, _Flgs | regex_constants::match_any,
; 2262 :         _Get_unwrapped(_First));
; 2263 : }
; 2264 : 
; 2265 : _EXPORT_STD template <class _Elem, class _RxTraits>
; 2266 : _NODISCARD bool regex_search(_In_z_ const _Elem* _Str, const basic_regex<_Elem, _RxTraits>& _Re,
; 2267 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2268 :     // search for regular expression match in target text
; 2269 :     const _Elem* _Last = _Str + char_traits<_Elem>::length(_Str);
; 2270 :     return _Regex_search2(
; 2271 :         _Str, _Last, static_cast<match_results<const _Elem*>*>(nullptr), _Re, _Flgs | regex_constants::match_any, _Str);
; 2272 : }
; 2273 : 
; 2274 : _EXPORT_STD template <class _Elem, class _Alloc, class _RxTraits>
; 2275 : bool regex_search(_In_z_ const _Elem* _Str, match_results<const _Elem*, _Alloc>& _Matches,
; 2276 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2277 :     // search for regular expression match in target text
; 2278 :     const _Elem* _Last = _Str + char_traits<_Elem>::length(_Str);
; 2279 :     return _Regex_search2(_Str, _Last, _STD addressof(_Matches), _Re, _Flgs, _Str);
; 2280 : }
; 2281 : 
; 2282 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Alloc, class _Elem, class _RxTraits>
; 2283 : bool regex_search(const basic_string<_Elem, _StTraits, _StAlloc>& _Str,
; 2284 :     match_results<typename basic_string<_Elem, _StTraits, _StAlloc>::const_iterator, _Alloc>& _Matches,
; 2285 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2286 :     // search for regular expression match in target text
; 2287 :     return _Regex_search2(_Str.begin(), _Str.end(), _STD addressof(_Matches), _Re, _Flgs, _Str.begin());
; 2288 : }
; 2289 : 
; 2290 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Alloc, class _Elem, class _RxTraits>
; 2291 : bool regex_search(const basic_string<_Elem, _StTraits, _StAlloc>&&,
; 2292 :     match_results<typename basic_string<_Elem, _StTraits, _StAlloc>::const_iterator, _Alloc>&,
; 2293 :     const basic_regex<_Elem, _RxTraits>&, regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2294 : 
; 2295 : _EXPORT_STD template <class _StTraits, class _StAlloc, class _Elem, class _RxTraits>
; 2296 : _NODISCARD bool regex_search(const basic_string<_Elem, _StTraits, _StAlloc>& _Str,
; 2297 :     const basic_regex<_Elem, _RxTraits>& _Re, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2298 :     // search for regular expression match in target text
; 2299 :     using _Iter = typename basic_string<_Elem, _StTraits, _StAlloc>::const_pointer;
; 2300 : 
; 2301 :     _Iter _First = _Str.c_str();
; 2302 :     _Iter _Last  = _First + _Str.size();
; 2303 :     return _Regex_search2(
; 2304 :         _First, _Last, static_cast<match_results<_Iter>*>(nullptr), _Re, _Flgs | regex_constants::match_any, _First);
; 2305 : }
; 2306 : 
; 2307 : template <class _OutIt, class _BidIt, class _RxTraits, class _Elem, class _Traits, class _Alloc>
; 2308 : _OutIt _Regex_replace1(_OutIt _Result, _BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2309 :     const basic_string<_Elem, _Traits, _Alloc>& _Fmt, regex_constants::match_flag_type _Flgs) {
; 2310 :     // search and replace
; 2311 :     match_results<_BidIt> _Matches;
; 2312 :     _BidIt _Pos                             = _First;
; 2313 :     regex_constants::match_flag_type _Flags = _Flgs;
; 2314 :     regex_constants::match_flag_type _Not_null{};
; 2315 : 
; 2316 :     while (
; 2317 :         _Regex_search2(_Pos, _Last, _STD addressof(_Matches), _Re, _Flags | _Not_null, _Pos)) { // replace at each match
; 2318 :         if (!(_Flgs & regex_constants::format_no_copy)) {
; 2319 :             _Result = _STD copy(_Matches.prefix().first, _Matches.prefix().second, _Result);
; 2320 :         }
; 2321 : 
; 2322 :         _Result = _Matches._Format1(_Result, _Fmt.data(), _Fmt.data() + _Fmt.size(), _Flags);
; 2323 : 
; 2324 :         _Pos = _Matches[0].second;
; 2325 :         if (_Pos == _Last || (_Flgs & regex_constants::format_first_only)) {
; 2326 :             break;
; 2327 :         }
; 2328 : 
; 2329 :         if (_Matches[0].first == _Matches[0].second) {
; 2330 :             _Not_null = regex_constants::_Match_not_null;
; 2331 :         } else { // non-null match, recognize earlier text
; 2332 :             _Not_null = regex_constants::match_flag_type{};
; 2333 :             _Flags |= regex_constants::match_prev_avail;
; 2334 :         }
; 2335 :     }
; 2336 :     return _Flgs & regex_constants::format_no_copy ? _Result : _STD _Copy_unchecked(_Pos, _Last, _Result);
; 2337 : }
; 2338 : 
; 2339 : _EXPORT_STD template <class _OutIt, class _BidIt, class _RxTraits, class _Elem, class _Traits, class _Alloc>
; 2340 : _OutIt regex_replace(_OutIt _Result, _BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2341 :     const basic_string<_Elem, _Traits, _Alloc>& _Fmt,
; 2342 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2343 :     // search and replace, iterator result, string format
; 2344 :     _Adl_verify_range(_First, _Last);
; 2345 :     _Seek_wrapped(_Result, _Regex_replace1(_Get_unwrapped_unverified(_Result), _Get_unwrapped(_First),
; 2346 :                                _Get_unwrapped(_Last), _Re, _Fmt, _Flgs));
; 2347 :     return _Result;
; 2348 : }
; 2349 : 
; 2350 : _EXPORT_STD template <class _OutIt, class _BidIt, class _RxTraits, class _Elem>
; 2351 : _OutIt regex_replace(_OutIt _Result, _BidIt _First, _BidIt _Last, const basic_regex<_Elem, _RxTraits>& _Re,
; 2352 :     const _Elem* _Ptr, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2353 :     // search and replace, iterator result, NTBS format
; 2354 :     const basic_string<_Elem> _Fmt(_Ptr);
; 2355 :     return _STD regex_replace(_Result, _First, _Last, _Re, _Fmt, _Flgs);
; 2356 : }
; 2357 : 
; 2358 : _EXPORT_STD template <class _RxTraits, class _Elem, class _Traits1, class _Alloc1, class _Traits2, class _Alloc2>
; 2359 : _NODISCARD basic_string<_Elem, _Traits1, _Alloc1> regex_replace(const basic_string<_Elem, _Traits1, _Alloc1>& _Str,
; 2360 :     const basic_regex<_Elem, _RxTraits>& _Re, const basic_string<_Elem, _Traits2, _Alloc2>& _Fmt,
; 2361 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2362 :     // search and replace, string result, string target, string format
; 2363 :     basic_string<_Elem, _Traits1, _Alloc1> _Res;
; 2364 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);
; 2365 :     return _Res;
; 2366 : }
; 2367 : 
; 2368 : _EXPORT_STD template <class _RxTraits, class _Elem, class _Traits1, class _Alloc1>
; 2369 : _NODISCARD basic_string<_Elem, _Traits1, _Alloc1> regex_replace(const basic_string<_Elem, _Traits1, _Alloc1>& _Str,
; 2370 :     const basic_regex<_Elem, _RxTraits>& _Re, const _Elem* _Ptr,
; 2371 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2372 :     // search and replace, string result, string target, NTBS format
; 2373 :     basic_string<_Elem, _Traits1, _Alloc1> _Res;
; 2374 :     const basic_string<_Elem> _Fmt(_Ptr);
; 2375 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);
; 2376 :     return _Res;
; 2377 : }
; 2378 : 
; 2379 : _EXPORT_STD template <class _RxTraits, class _Elem, class _Traits2, class _Alloc2>
; 2380 : _NODISCARD basic_string<_Elem> regex_replace(const _Elem* _Pstr, const basic_regex<_Elem, _RxTraits>& _Re,
; 2381 :     const basic_string<_Elem, _Traits2, _Alloc2>& _Fmt,
; 2382 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2383 :     // search and replace, string result, NTBS target, string format
; 2384 :     basic_string<_Elem> _Res;
; 2385 :     const basic_string<_Elem> _Str(_Pstr);
; 2386 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);
; 2387 :     return _Res;
; 2388 : }
; 2389 : 
; 2390 : _EXPORT_STD template <class _RxTraits, class _Elem>
; 2391 : _NODISCARD basic_string<_Elem> regex_replace(const _Elem* _Pstr, const basic_regex<_Elem, _RxTraits>& _Re,
; 2392 :     const _Elem* _Ptr, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {
; 2393 :     // search and replace, string result, NTBS target, NTBS format
; 2394 :     basic_string<_Elem> _Res;
; 2395 :     const basic_string<_Elem> _Str(_Pstr);
; 2396 :     const basic_string<_Elem> _Fmt(_Ptr);
; 2397 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);
; 2398 :     return _Res;
; 2399 : }
; 2400 : 
; 2401 : _EXPORT_STD template <class _BidIt, class _Elem = _Iter_value_t<_BidIt>, class _RxTraits = regex_traits<_Elem>>
; 2402 : class regex_iterator : public _Iterator_base {
; 2403 : public:
; 2404 :     using regex_type        = basic_regex<_Elem, _RxTraits>;
; 2405 :     using value_type        = match_results<_BidIt>;
; 2406 :     using difference_type   = ptrdiff_t;
; 2407 :     using pointer           = const value_type*;
; 2408 :     using reference         = const value_type&;
; 2409 :     using iterator_category = forward_iterator_tag;
; 2410 : #if _HAS_CXX20
; 2411 :     using iterator_concept = input_iterator_tag;
; 2412 : #endif // _HAS_CXX20
; 2413 : 
; 2414 :     regex_iterator() = default; // construct end of sequence iterator
; 2415 : 
; 2416 :     regex_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re,
; 2417 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2418 :         : _Begin(_First), _End(_Last), _MyRe(_STD addressof(_Re)), _Flags(_Fl) {
; 2419 :         _Adl_verify_range(_Begin, _End);
; 2420 :         if (!_Regex_search2(_Begin, _End, _STD addressof(_MyVal), *_MyRe, _Flags, _Begin)) {
; 2421 :             _MyRe = nullptr;
; 2422 :         } else {
; 2423 :             this->_Adopt(_MyRe);
; 2424 :         }
; 2425 :     }
; 2426 : 
; 2427 :     regex_iterator(
; 2428 :         _BidIt, _BidIt, const regex_type&&, regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2429 : 
; 2430 :     _NODISCARD bool operator==(const regex_iterator& _Right) const {
; 2431 :         if (_MyRe != _Right._MyRe) {
; 2432 :             return false;
; 2433 :         } else if (!_MyRe) {
; 2434 :             return true;
; 2435 :         }
; 2436 : 
; 2437 :         return _Begin == _Right._Begin && _End == _Right._End && _Flags == _Right._Flags
; 2438 :             && _MyVal._At(0) == _Right._MyVal._At(0);
; 2439 :     }
; 2440 : 
; 2441 : #if !_HAS_CXX20
; 2442 :     _NODISCARD bool operator!=(const regex_iterator& _Right) const {
; 2443 :         return !(*this == _Right);
; 2444 :     }
; 2445 : #endif // !_HAS_CXX20
; 2446 : 
; 2447 : #if _HAS_CXX20
; 2448 :     _NODISCARD bool operator==(default_sentinel_t) const noexcept /* strengthened */ {
; 2449 :         return !_MyRe;
; 2450 :     }
; 2451 : #endif // _HAS_CXX20
; 2452 : 
; 2453 :     _NODISCARD const value_type& operator*() const noexcept /* strengthened */ {
; 2454 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2455 :         _STL_VERIFY(_MyRe, "regex_iterator not dereferenceable");
; 2456 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2457 : 
; 2458 :         return _MyVal;
; 2459 :     }
; 2460 : 
; 2461 :     _NODISCARD const value_type* operator->() const noexcept /* strengthened */ {
; 2462 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2463 :         _STL_VERIFY(_MyRe, "regex_iterator not dereferenceable");
; 2464 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2465 : 
; 2466 :         return _STD addressof(_MyVal);
; 2467 :     }
; 2468 : 
; 2469 :     regex_iterator& operator++() {
; 2470 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2471 :         _STL_VERIFY(_MyRe, "regex_iterator not incrementable");
; 2472 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2473 : 
; 2474 :         _BidIt _Start = _MyVal._At(0).second;
; 2475 : 
; 2476 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2477 :         _STL_VERIFY(this->_Getcont(), "regex_iterator orphaned");
; 2478 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2479 : 
; 2480 :         bool _Skip_empty_match = false;
; 2481 :         if (_MyVal._At(0).first == _MyVal._At(0).second) { // handle zero-length match
; 2482 :             if (_Start == _End) { // store end-of-sequence iterator
; 2483 :                 _MyRe = nullptr;
; 2484 : 
; 2485 : #if _ITERATOR_DEBUG_LEVEL == 2
; 2486 :                 this->_Adopt(nullptr);
; 2487 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 2488 : 
; 2489 :                 return *this;
; 2490 :             }
; 2491 : 
; 2492 :             // _Adl_verify_range(_Start, _End) checked in constructor
; 2493 :             if (_Regex_search2(_Start, _End, _STD addressof(_MyVal), *_MyRe,
; 2494 :                     _Flags | regex_constants::match_not_null | regex_constants::match_continuous, _Begin)) {
; 2495 :                 return *this;
; 2496 :             }
; 2497 : 
; 2498 :             _Skip_empty_match = true;
; 2499 :         }
; 2500 :         _Flags = _Flags | regex_constants::match_prev_avail;
; 2501 : 
; 2502 :         auto _Tmp_flags = _Flags;
; 2503 :         if (_Skip_empty_match) {
; 2504 :             _Tmp_flags |= regex_constants::_Skip_zero_length;
; 2505 :         }
; 2506 : 
; 2507 :         // _Adl_verify_range(_Start, _End) checked in constructor
; 2508 :         if (!_Regex_search2(_Start, _End, _STD addressof(_MyVal), *_MyRe, _Tmp_flags, _Begin)) {
; 2509 :             // mark at end of sequence
; 2510 :             _MyRe = nullptr;
; 2511 :         }
; 2512 : 
; 2513 :         return *this;
; 2514 :     }
; 2515 : 
; 2516 :     regex_iterator operator++(int) {
; 2517 :         regex_iterator _Tmp = *this;
; 2518 :         ++*this;
; 2519 :         return _Tmp;
; 2520 :     }
; 2521 : 
; 2522 :     bool _Atend() const noexcept { // test for end iterator
; 2523 :         return !_MyRe;
; 2524 :     }
; 2525 : 
; 2526 : private:
; 2527 :     _BidIt _Begin{}; // input sequence
; 2528 :     _BidIt _End{}; // input sequence
; 2529 :     const regex_type* _MyRe = nullptr; // pointer to basic_regex object
; 2530 :     regex_constants::match_flag_type _Flags{};
; 2531 :     match_results<_BidIt> _MyVal; // lookahead value (if _MyRe not null)
; 2532 : };
; 2533 : 
; 2534 : _EXPORT_STD using cregex_iterator  = regex_iterator<const char*>;
; 2535 : _EXPORT_STD using wcregex_iterator = regex_iterator<const wchar_t*>;
; 2536 : _EXPORT_STD using sregex_iterator  = regex_iterator<string::const_iterator>;
; 2537 : _EXPORT_STD using wsregex_iterator = regex_iterator<wstring::const_iterator>;
; 2538 : 
; 2539 : _EXPORT_STD template <class _BidIt, class _Elem = _Iter_value_t<_BidIt>, class _RxTraits = regex_traits<_Elem>>
; 2540 : class regex_token_iterator {
; 2541 : public:
; 2542 :     using _Position         = regex_iterator<_BidIt, _Elem, _RxTraits>;
; 2543 :     using regex_type        = basic_regex<_Elem, _RxTraits>;
; 2544 :     using value_type        = sub_match<_BidIt>;
; 2545 :     using difference_type   = ptrdiff_t;
; 2546 :     using pointer           = const value_type*;
; 2547 :     using reference         = const value_type&;
; 2548 :     using iterator_category = forward_iterator_tag;
; 2549 : #if _HAS_CXX20
; 2550 :     using iterator_concept = input_iterator_tag;
; 2551 : #endif // _HAS_CXX20
; 2552 : 
; 2553 :     regex_token_iterator() = default; // construct end of sequence iterator
; 2554 : 
; 2555 :     regex_token_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re, int _Sub = 0,
; 2556 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2557 :         : _Pos(_First, _Last, _Re, _Fl), _Cur(0), _Subs(&_Sub, &_Sub + 1) {
; 2558 :         _Init(_First, _Last);
; 2559 :     }
; 2560 : 
; 2561 :     regex_token_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re, const vector<int>& _Subx,
; 2562 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2563 :         : _Pos(_First, _Last, _Re, _Fl), _Cur(0), _Subs(_Subx.begin(), _Subx.end()) {
; 2564 :         if (_Subs.empty()) {
; 2565 :             _Res = nullptr; // treat empty vector as end of sequence
; 2566 :         } else {
; 2567 :             _Init(_First, _Last);
; 2568 :         }
; 2569 :     }
; 2570 : 
; 2571 :     template <size_t _Nx>
; 2572 :     regex_token_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re, const int (&_Subx)[_Nx],
; 2573 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2574 :         : _Pos(_First, _Last, _Re, _Fl), _Cur(0), _Subs(_Subx, _Subx + _Nx) {
; 2575 :         _Init(_First, _Last);
; 2576 :     }
; 2577 : 
; 2578 :     regex_token_iterator(_BidIt _First, _BidIt _Last, const regex_type& _Re, initializer_list<int> _Ilist,
; 2579 :         regex_constants::match_flag_type _Fl = regex_constants::match_default)
; 2580 :         : _Pos(_First, _Last, _Re, _Fl), _Cur(0), _Subs(_Ilist.begin(), _Ilist.end()) {
; 2581 :         _Init(_First, _Last);
; 2582 :     }
; 2583 : 
; 2584 :     regex_token_iterator(_BidIt, _BidIt, const regex_type&&, int = 0,
; 2585 :         regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2586 : 
; 2587 :     regex_token_iterator(_BidIt, _BidIt, const regex_type&&, const vector<int>&,
; 2588 :         regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2589 : 
; 2590 :     template <size_t _Nx>
; 2591 :     regex_token_iterator(_BidIt, _BidIt, const regex_type&&, const int (&)[_Nx],
; 2592 :         regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2593 : 
; 2594 :     regex_token_iterator(_BidIt, _BidIt, const regex_type&&, initializer_list<int>,
; 2595 :         regex_constants::match_flag_type = regex_constants::match_default) = delete;
; 2596 : 
; 2597 :     regex_token_iterator(const regex_token_iterator& _Right)
; 2598 :         : _Pos(_Right._Pos), _Suffix(_Right._Suffix), _Cur(_Right._Cur), _Subs(_Right._Subs) {
; 2599 :         // construct copy of _Right
; 2600 :         if (!_Right._Res) {
; 2601 :             _Res = nullptr;
; 2602 :         } else if (_Right._Res == _STD addressof(_Right._Suffix)) {
; 2603 :             _Res = _STD addressof(_Suffix);
; 2604 :         } else {
; 2605 :             _Res = _Current();
; 2606 :         }
; 2607 :     }
; 2608 : 
; 2609 :     regex_token_iterator& operator=(const regex_token_iterator& _Right) {
; 2610 :         if (this != _STD addressof(_Right)) { // copy from _Right
; 2611 :             _Pos    = _Right._Pos;
; 2612 :             _Cur    = _Right._Cur;
; 2613 :             _Suffix = _Right._Suffix;
; 2614 :             _Subs   = _Right._Subs;
; 2615 :             if (!_Right._Res) {
; 2616 :                 _Res = nullptr;
; 2617 :             } else if (_Right._Res == _STD addressof(_Right._Suffix)) {
; 2618 :                 _Res = _STD addressof(_Suffix);
; 2619 :             } else {
; 2620 :                 _Res = _Current();
; 2621 :             }
; 2622 :         }
; 2623 :         return *this;
; 2624 :     }
; 2625 : 
; 2626 :     _NODISCARD bool operator==(const regex_token_iterator& _Right) const {
; 2627 :         if (!_Res || !_Right._Res) {
; 2628 :             return _Res == _Right._Res;
; 2629 :         }
; 2630 : 
; 2631 :         return *_Res == *_Right._Res && _Pos == _Right._Pos && _Subs == _Right._Subs;
; 2632 :     }
; 2633 : 
; 2634 : #if !_HAS_CXX20
; 2635 :     _NODISCARD bool operator!=(const regex_token_iterator& _Right) const {
; 2636 :         return !(*this == _Right);
; 2637 :     }
; 2638 : #endif // !_HAS_CXX20
; 2639 : 
; 2640 : #if _HAS_CXX20
; 2641 :     _NODISCARD bool operator==(default_sentinel_t) const noexcept /* strengthened */ {
; 2642 :         return !_Res;
; 2643 :     }
; 2644 : #endif // _HAS_CXX20
; 2645 : 
; 2646 :     _NODISCARD const value_type& operator*() const noexcept /* strengthened */ {
; 2647 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2648 :         _STL_VERIFY(_Res, "regex_token_iterator not dereferenceable");
; 2649 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2650 : 
; 2651 :         _Analysis_assume_(_Res);
; 2652 :         return *_Res;
; 2653 :     }
; 2654 : 
; 2655 :     _NODISCARD const value_type* operator->() const noexcept /* strengthened */ {
; 2656 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2657 :         _STL_VERIFY(_Res, "regex_token_iterator not dereferenceable");
; 2658 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2659 : 
; 2660 :         return _Res;
; 2661 :     }
; 2662 : 
; 2663 :     regex_token_iterator& operator++() {
; 2664 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2665 :         _STL_VERIFY(_Res, "regex_token_iterator not incrementable");
; 2666 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2667 : 
; 2668 :         if (_Res == _STD addressof(_Suffix)) {
; 2669 :             _Res = nullptr;
; 2670 :         } else if (++_Cur < _Subs.size()) {
; 2671 :             _Res = _Current();
; 2672 :         } else { // advance to next full match
; 2673 :             _Cur = 0;
; 2674 :             _Position _Prev(_Pos);
; 2675 :             ++_Pos;
; 2676 :             if (!_Pos._Atend()) {
; 2677 :                 _Res = _Current();
; 2678 :             } else if (_Has_suffix() && _Prev->suffix().length() != 0) { // mark suffix
; 2679 :                 _Suffix.matched = true;
; 2680 :                 _Suffix.first   = _Prev->suffix().first;
; 2681 :                 _Suffix.second  = _Prev->suffix().second;
; 2682 :                 _Res            = _STD addressof(_Suffix);
; 2683 :             } else {
; 2684 :                 _Res = nullptr;
; 2685 :             }
; 2686 :         }
; 2687 : 
; 2688 :         return *this;
; 2689 :     }
; 2690 : 
; 2691 :     regex_token_iterator operator++(int) {
; 2692 :         regex_token_iterator _Tmp = *this;
; 2693 :         ++*this;
; 2694 :         return _Tmp;
; 2695 :     }
; 2696 : 
; 2697 : private:
; 2698 :     _Position _Pos;
; 2699 :     const value_type* _Res = nullptr;
; 2700 :     value_type _Suffix;
; 2701 :     size_t _Cur = 0;
; 2702 :     vector<int> _Subs;
; 2703 : 
; 2704 :     bool _Has_suffix() const { // check for suffix specifier
; 2705 :         return _STD find(_Subs.begin(), _Subs.end(), -1) != _Subs.end();
; 2706 :     }
; 2707 : 
; 2708 :     void _Init(_BidIt _First, _BidIt _Last) { // initialize
; 2709 :         _Adl_verify_range(_First, _Last);
; 2710 :         if (!_Pos._Atend()) {
; 2711 :             _Res = _Current();
; 2712 :         } else if (_Has_suffix()) { // mark suffix (no match)
; 2713 :             _Suffix.matched = true;
; 2714 :             _Suffix.first   = _First;
; 2715 :             _Suffix.second  = _Last;
; 2716 :             _Res            = _STD addressof(_Suffix);
; 2717 :         } else {
; 2718 :             _Res = nullptr;
; 2719 :         }
; 2720 :     }
; 2721 : 
; 2722 :     const value_type* _Current() const noexcept {
; 2723 :         return &(_Subs[_Cur] == -1 ? _Pos->prefix() : (*_Pos)[static_cast<size_t>(_Subs[_Cur])]);
; 2724 :     }
; 2725 : };
; 2726 : 
; 2727 : _EXPORT_STD using cregex_token_iterator  = regex_token_iterator<const char*>;
; 2728 : _EXPORT_STD using wcregex_token_iterator = regex_token_iterator<const wchar_t*>;
; 2729 : _EXPORT_STD using sregex_token_iterator  = regex_token_iterator<string::const_iterator>;
; 2730 : _EXPORT_STD using wsregex_token_iterator = regex_token_iterator<wstring::const_iterator>;
; 2731 : 
; 2732 : template <class _FwdIt, class _Elem, class _RxTraits>
; 2733 : _Builder<_FwdIt, _Elem, _RxTraits>::_Builder(const _RxTraits& _Tr, regex_constants::syntax_option_type _Fx)
; 2734 :     : _Root(new _Root_node), _Current(_Root), _Flags(_Fx), _Traits(_Tr),

  00066	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  00069	c1 e8 03	 shr	 eax, 3
  0006c	c1 e9 09	 shr	 ecx, 9
  0006f	f7 d0		 not	 eax
  00071	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00076	f7 d1		 not	 ecx

; 2735 :       _Bmax(static_cast<int>(_Fx & regex_constants::collate ? 0U : _Bmp_max)),

  00078	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  0007b	83 e1 04	 and	 ecx, 4

; 2736 :       _Tmax(static_cast<int>(_Fx & regex_constants::collate ? 0U : _ARRAY_THRESHOLD)) {}

  0007e	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00081	8b c6		 mov	 eax, esi
  00083	5e		 pop	 esi
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??0?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@W4syntax_option_type@regex_constants@1@@Z ENDP ; std::_Builder<char const *,char,std::regex_traits<char> >::_Builder<char const *,char,std::regex_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Pos2$1$ = -8						; size = 4
__Pos1$1$ = -4						; size = 4
?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Disjunction, COMDAT
; _this$ = ecx

; 4458 : void _Parser<_FwdIt, _Elem, _RxTraits>::_Disjunction() { // check for valid disjunction

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 4459 :     _Node_base* _Pos1 = _Nfa._Getmark();

  0000b	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  0000e	e8 00 00 00 00	 call	 ?_Getmark@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QBEPAV_Node_base@2@XZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Getmark

; 4460 :     if (!_Alternative()) {

  00013	8b cb		 mov	 ecx, ebx
  00015	89 45 fc	 mov	 DWORD PTR __Pos1$1$[ebp], eax
  00018	e8 00 00 00 00	 call	 ?_Alternative@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Alternative
  0001d	84 c0		 test	 al, al
  0001f	75 17		 jne	 SHORT $LN12@Disjunctio

; 4461 :         if (_Mchar != _Meta_bar) {

  00021	83 7b 4c 7c	 cmp	 DWORD PTR [ebx+76], 124	; 0000007cH
  00025	75 60		 jne	 SHORT $LN3@Disjunctio

; 4462 :             return; // zero-length alternative not followed by '|'
; 4463 :         }
; 4464 : 
; 4465 :         // zero-length leading alternative
; 4466 :         _Node_base* _Pos3 = _Nfa._Begin_group();

  00027	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  0002a	e8 00 00 00 00	 call	 ?_Begin_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@XZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_group

; 4467 :         _Nfa._End_group(_Pos3);

  0002f	50		 push	 eax
  00030	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  00033	e8 00 00 00 00	 call	 ?_End_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_group
$LN12@Disjunctio:

; 4468 :     }
; 4469 : 
; 4470 :     _Node_base* _Pos2 = _Nfa._Begin_if(_Pos1);

  00038	ff 75 fc	 push	 DWORD PTR __Pos1$1$[ebp]
  0003b	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  0003e	e8 00 00 00 00	 call	 ?_Begin_if@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@PAV32@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_if

; 4471 :     while (_Mchar == _Meta_bar) { // append terms as long as we keep finding | characters

  00043	83 7b 4c 7c	 cmp	 DWORD PTR [ebx+76], 124	; 0000007cH
  00047	89 45 f8	 mov	 DWORD PTR __Pos2$1$[ebp], eax
  0004a	75 3b		 jne	 SHORT $LN3@Disjunctio
  0004c	0f 1f 40 00	 npad	 4
$LL2@Disjunctio:

; 4472 :         _Next();

  00050	8b cb		 mov	 ecx, ebx
  00052	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4473 :         if (!_Alternative()) { // zero-length trailing alternative

  00057	8b cb		 mov	 ecx, ebx
  00059	e8 00 00 00 00	 call	 ?_Alternative@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Alternative
  0005e	84 c0		 test	 al, al
  00060	75 11		 jne	 SHORT $LN6@Disjunctio

; 4474 :             _Node_base* _Pos3 = _Nfa._Begin_group();

  00062	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  00065	e8 00 00 00 00	 call	 ?_Begin_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@XZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_group

; 4475 :             _Nfa._End_group(_Pos3);

  0006a	50		 push	 eax
  0006b	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  0006e	e8 00 00 00 00	 call	 ?_End_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_group
$LN6@Disjunctio:

; 4476 :         }
; 4477 : 
; 4478 :         _Nfa._Else_if(_Pos1, _Pos2);

  00073	ff 75 f8	 push	 DWORD PTR __Pos2$1$[ebp]
  00076	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  00079	ff 75 fc	 push	 DWORD PTR __Pos1$1$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Else_if@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@0@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Else_if
  00081	83 7b 4c 7c	 cmp	 DWORD PTR [ebx+76], 124	; 0000007cH
  00085	74 c9		 je	 SHORT $LL2@Disjunctio
$LN3@Disjunctio:
  00087	5f		 pop	 edi

; 4479 :     }
; 4480 : }

  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Disjunction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Alternative@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ
_TEXT	SEGMENT
?_Alternative@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Alternative, COMDAT
; _this$ = ecx

; 4397 : bool _Parser<_FwdIt, _Elem, _RxTraits>::_Alternative() { // check for valid alternative

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4398 :     bool _Found = false;

  00003	32 c9		 xor	 cl, cl

; 4399 :     for (;;) { // concatenate valid elements
; 4400 :         bool _Quant = true;
; 4401 :         if (_Mchar == _Meta_eos || _Mchar == _Meta_bar || (_Mchar == _Meta_rpar && _Disj_count != 0)) {

  00005	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00008	83 f8 ff	 cmp	 eax, -1
  0000b	0f 84 72 01 00
	00		 je	 $LN7@Alternativ
  00011	83 f8 7c	 cmp	 eax, 124		; 0000007cH
  00014	0f 84 69 01 00
	00		 je	 $LN7@Alternativ
  0001a	53		 push	 ebx
  0001b	57		 push	 edi
  0001c	0f 1f 40 00	 npad	 4
$LL4@Alternativ:
  00020	83 f8 29	 cmp	 eax, 41			; 00000029H
  00023	75 1c		 jne	 SHORT $LN44@Alternativ
  00025	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00029	0f 85 52 01 00
	00		 jne	 $LN76@Alternativ

; 4403 :         } else if (_Mchar == _Meta_rpar && !(_L_flags & _L_paren_bal)) {

  0002f	f7 46 50 00 00
	00 10		 test	 DWORD PTR [esi+80], 268435456 ; 10000000H
  00036	0f 84 54 01 00
	00		 je	 $LN37@Alternativ
  0003c	e9 12 01 00 00	 jmp	 $LN31@Alternativ
$LN44@Alternativ:

; 4405 :         } else if (_Mchar == _Meta_dot) { // add dot node

  00041	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00044	75 0d		 jne	 SHORT $LN10@Alternativ

; 4406 :             _Nfa._Add_dot();

  00046	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00049	e8 00 00 00 00	 call	 ?_Add_dot@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_dot

; 4407 :             _Next();

  0004e	e9 0d 01 00 00	 jmp	 $LN79@Alternativ
$LN10@Alternativ:

; 4408 :         } else if (_Mchar == _Meta_esc) { // check for valid escape sequence

  00053	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00056	75 54		 jne	 SHORT $LN12@Alternativ

; 4409 :             _Next();

  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4410 :             if ((_L_flags & _L_asrt_wrd) && _Char == _Esc_word) { // add word assert

  0005f	f6 46 50 80	 test	 BYTE PTR [esi+80], 128	; 00000080H
  00063	74 3b		 je	 SHORT $LN16@Alternativ
  00065	8a 46 48	 mov	 al, BYTE PTR [esi+72]
  00068	3c 62		 cmp	 al, 98			; 00000062H
  0006a	75 14		 jne	 SHORT $LN45@Alternativ

; 4411 :                 _Nfa._Add_wbound();

  0006c	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  0006f	e8 00 00 00 00	 call	 ?_Add_wbound@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_wbound

; 4412 :                 _Next();

  00074	8b ce		 mov	 ecx, esi
  00076	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4413 :                 _Quant = false;

  0007b	e9 ee 00 00 00	 jmp	 $LN33@Alternativ
$LN45@Alternativ:

; 4414 :             } else if ((_L_flags & _L_asrt_wrd) && _Char == _Esc_not_word) { // add not-word assert

  00080	3c 42		 cmp	 al, 66			; 00000042H
  00082	75 1c		 jne	 SHORT $LN16@Alternativ

; 4415 :                 _Nfa._Add_wbound();

  00084	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00087	e8 00 00 00 00	 call	 ?_Add_wbound@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_wbound

; 4416 :                 _Nfa._Negate();

  0008c	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  0008f	e8 00 00 00 00	 call	 ?_Negate@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Negate

; 4417 :                 _Next();

  00094	8b ce		 mov	 ecx, esi
  00096	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4418 :                 _Quant = false;
; 4419 :             } else {

  0009b	e9 ce 00 00 00	 jmp	 $LN33@Alternativ
$LN16@Alternativ:

; 4420 :                 _AtomEscape();

  000a0	8b ce		 mov	 ecx, esi
  000a2	e8 00 00 00 00	 call	 ?_AtomEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_AtomEscape

; 4421 :             }

  000a7	e9 bb 00 00 00	 jmp	 $LN54@Alternativ
$LN12@Alternativ:

; 4422 :         } else if (_Mchar == _Meta_lsq) { // add bracket expression

  000ac	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  000af	75 1e		 jne	 SHORT $LN18@Alternativ

; 4423 :             _Next();

  000b1	8b ce		 mov	 ecx, esi
  000b3	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4424 :             _CharacterClass();

  000b8	8b ce		 mov	 ecx, esi
  000ba	e8 00 00 00 00	 call	 ?_CharacterClass@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterClass

; 4425 :             _Expect(_Meta_rsq, regex_constants::error_brack);

  000bf	6a 04		 push	 4
  000c1	6a 5d		 push	 93			; 0000005dH
  000c3	8b ce		 mov	 ecx, esi
  000c5	e8 00 00 00 00	 call	 ?_Expect@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4_Meta_type@2@W4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Expect
  000ca	e9 98 00 00 00	 jmp	 $LN54@Alternativ
$LN18@Alternativ:

; 4426 :         } else if (_Mchar == _Meta_lpar) { // check for valid group

  000cf	83 f8 28	 cmp	 eax, 40			; 00000028H
  000d2	75 21		 jne	 SHORT $LN20@Alternativ

; 4427 :             _Next();

  000d4	8b ce		 mov	 ecx, esi
  000d6	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4428 :             _Quant = _Wrapped_disjunction();

  000db	8b ce		 mov	 ecx, esi
  000dd	e8 00 00 00 00	 call	 ?_Wrapped_disjunction@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Wrapped_disjunction

; 4429 :             _Expect(_Meta_rpar, regex_constants::error_paren);

  000e2	6a 05		 push	 5
  000e4	6a 29		 push	 41			; 00000029H
  000e6	8b ce		 mov	 ecx, esi
  000e8	8a d8		 mov	 bl, al
  000ea	e8 00 00 00 00	 call	 ?_Expect@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4_Meta_type@2@W4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Expect

; 4446 :             _Next();
; 4447 :         }
; 4448 : 
; 4449 :         if (_Quant) {

  000ef	84 db		 test	 bl, bl
  000f1	74 7b		 je	 SHORT $LN33@Alternativ
  000f3	eb 72		 jmp	 SHORT $LN54@Alternativ
$LN20@Alternativ:

; 4430 :         } else if (_Mchar == _Meta_caret) { // add bol node

  000f5	83 f8 5e	 cmp	 eax, 94			; 0000005eH
  000f8	75 11		 jne	 SHORT $LN22@Alternativ

; 4431 :             _Nfa._Add_bol();

  000fa	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  000fd	e8 00 00 00 00	 call	 ?_Add_bol@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_bol

; 4432 :             _Next();

  00102	8b ce		 mov	 ecx, esi
  00104	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4433 :             _Quant = false;

  00109	eb 63		 jmp	 SHORT $LN33@Alternativ
$LN22@Alternativ:

; 4434 :         } else if (_Mchar == _Meta_dlr) { // add eol node

  0010b	83 f8 24	 cmp	 eax, 36			; 00000024H
  0010e	75 11		 jne	 SHORT $LN24@Alternativ

; 4435 :             _Nfa._Add_eol();

  00110	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00113	e8 00 00 00 00	 call	 ?_Add_eol@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_eol

; 4436 :             _Next();

  00118	8b ce		 mov	 ecx, esi
  0011a	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4437 :             _Quant = false;

  0011f	eb 4d		 jmp	 SHORT $LN33@Alternativ
$LN24@Alternativ:

; 4438 :         } else if (_Mchar == _Meta_star || _Mchar == _Meta_plus || _Mchar == _Meta_query || _Mchar == _Meta_lbr) {

  00121	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  00124	74 61		 je	 SHORT $LN38@Alternativ
  00126	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00129	74 5c		 je	 SHORT $LN38@Alternativ
  0012b	83 f8 3f	 cmp	 eax, 63			; 0000003fH
  0012e	74 57		 je	 SHORT $LN38@Alternativ
  00130	83 f8 7b	 cmp	 eax, 123		; 0000007bH
  00133	74 52		 je	 SHORT $LN38@Alternativ

; 4440 :         } else if (_Mchar == _Meta_rbr && !(_L_flags & _L_paren_bal)) {

  00135	83 f8 7d	 cmp	 eax, 125		; 0000007dH
  00138	75 0b		 jne	 SHORT $LN46@Alternativ
  0013a	f7 46 50 00 00
	00 10		 test	 DWORD PTR [esi+80], 268435456 ; 10000000H
  00141	74 56		 je	 SHORT $LN39@Alternativ
  00143	eb 0e		 jmp	 SHORT $LN31@Alternativ
$LN46@Alternativ:

; 4442 :         } else if (_Mchar == _Meta_rsq && !(_L_flags & _L_paren_bal)) {

  00145	83 f8 5d	 cmp	 eax, 93			; 0000005dH
  00148	75 09		 jne	 SHORT $LN31@Alternativ
  0014a	f7 46 50 00 00
	00 10		 test	 DWORD PTR [esi+80], 268435456 ; 10000000H
  00151	74 4f		 je	 SHORT $LN40@Alternativ
$LN31@Alternativ:

; 4444 :         } else { // add character
; 4445 :             _Nfa._Add_char(_Char);

  00153	0f b6 46 48	 movzx	 eax, BYTE PTR [esi+72]
  00157	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 ?_Add_char@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char
$LN79@Alternativ:

; 4450 :             _Quantifier();

  00160	8b ce		 mov	 ecx, esi
  00162	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next
$LN54@Alternativ:
  00167	8b ce		 mov	 ecx, esi
  00169	e8 00 00 00 00	 call	 ?_Quantifier@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Quantifier
$LN33@Alternativ:

; 4451 :         }
; 4452 : 
; 4453 :         _Found = true;

  0016e	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00171	b1 01		 mov	 cl, 1
  00173	83 f8 ff	 cmp	 eax, -1
  00176	74 09		 je	 SHORT $LN76@Alternativ

; 4399 :     for (;;) { // concatenate valid elements
; 4400 :         bool _Quant = true;
; 4401 :         if (_Mchar == _Meta_eos || _Mchar == _Meta_bar || (_Mchar == _Meta_rpar && _Disj_count != 0)) {

  00178	83 f8 7c	 cmp	 eax, 124		; 0000007cH
  0017b	0f 85 9f fe ff
	ff		 jne	 $LL4@Alternativ
$LN76@Alternativ:
  00181	5f		 pop	 edi
  00182	5b		 pop	 ebx
$LN7@Alternativ:

; 4402 :             return _Found;

  00183	8a c1		 mov	 al, cl
  00185	5e		 pop	 esi

; 4454 :     }
; 4455 : }

  00186	c3		 ret	 0
$LN38@Alternativ:

; 4439 :             _Error(regex_constants::error_badrepeat);

  00187	6a 0a		 push	 10			; 0000000aH
  00189	8b ce		 mov	 ecx, esi
  0018b	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN37@Alternativ:

; 4404 :             _Error(regex_constants::error_paren);

  00190	6a 05		 push	 5
  00192	8b ce		 mov	 ecx, esi
  00194	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN39@Alternativ:

; 4441 :             _Error(regex_constants::error_brace);

  00199	6a 06		 push	 6
  0019b	8b ce		 mov	 ecx, esi
  0019d	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN40@Alternativ:

; 4443 :             _Error(regex_constants::error_brack);

  001a2	6a 04		 push	 4
  001a4	8b ce		 mov	 ecx, esi
  001a6	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN78@Alternativ:
  001ab	cc		 int	 3
?_Alternative@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Alternative
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Quantifier@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Greedy$ = -4						; size = 1
?_Quantifier@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Quantifier, COMDAT
; _this$ = ecx

; 4350 : void _Parser<_FwdIt, _Elem, _RxTraits>::_Quantifier() { // check for quantifier following atom

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 4351 :     int _Min = 0;

  00008	33 db		 xor	 ebx, ebx
  0000a	57		 push	 edi

; 4352 :     int _Max = -1;

  0000b	83 cf ff	 or	 edi, -1

; 4353 :     if (_Mchar != _Meta_star) {

  0000e	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00011	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  00014	74 08		 je	 SHORT $LN8@Quantifier

; 4354 :         if (_Mchar == _Meta_plus) {

  00016	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00019	75 48		 jne	 SHORT $LN3@Quantifier

; 4355 :             _Min = 1;

  0001b	8d 5f 02	 lea	 ebx, DWORD PTR [edi+2]
$LN8@Quantifier:

; 4380 :             }
; 4381 :         } else {
; 4382 :             return;
; 4383 :         }
; 4384 :     }
; 4385 : 
; 4386 :     _Nfa._Mark_final();

  0001e	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00021	e8 00 00 00 00	 call	 ?_Mark_final@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Mark_final

; 4387 :     _Next();

  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4388 :     const bool _Greedy = !(_L_flags & _L_ngr_rep) || _Mchar != _Meta_query;

  0002d	f7 46 50 00 04
	00 00		 test	 DWORD PTR [esi+80], 1024 ; 00000400H
  00034	0f 84 8c 00 00
	00		 je	 $LN18@Quantifier
  0003a	83 7e 4c 3f	 cmp	 DWORD PTR [esi+76], 63	; 0000003fH
  0003e	0f 85 82 00 00
	00		 jne	 $LN18@Quantifier

; 4389 :     if (!_Greedy) { // add non-greedy repeat node
; 4390 :         _Next();

  00044	8b ce		 mov	 ecx, esi
  00046	c6 45 fc 00	 mov	 BYTE PTR __Greedy$[ebp], 0
  0004a	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4391 :     }
; 4392 : 
; 4393 :     _Nfa._Add_rep(_Min, _Max, _Greedy);

  0004f	ff 75 fc	 push	 DWORD PTR __Greedy$[ebp]
  00052	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00055	57		 push	 edi
  00056	53		 push	 ebx
  00057	e8 00 00 00 00	 call	 ?_Add_rep@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXHH_N@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_rep
  0005c	5f		 pop	 edi

; 4394 : }

  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
$LN3@Quantifier:

; 4356 :         } else if (_Mchar == _Meta_query) {

  00063	83 f8 3f	 cmp	 eax, 63			; 0000003fH
  00066	75 05		 jne	 SHORT $LN5@Quantifier

; 4357 :             _Max = 1;

  00068	8d 78 c2	 lea	 edi, DWORD PTR [eax-62]
  0006b	eb b1		 jmp	 SHORT $LN8@Quantifier
$LN5@Quantifier:

; 4358 :         } else if (_Mchar == _Meta_lbr) { // check for valid bracketed value

  0006d	83 f8 7b	 cmp	 eax, 123		; 0000007bH
  00070	75 65		 jne	 SHORT $LN1@Quantifier

; 4359 :             _Next();

  00072	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4360 :             if (!_DecimalDigits(regex_constants::error_badbrace)) {

  00077	6a 07		 push	 7
  00079	8b ce		 mov	 ecx, esi
  0007b	e8 00 00 00 00	 call	 ?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_DecimalDigits
  00080	84 c0		 test	 al, al
  00082	74 5a		 je	 SHORT $LN15@Quantifier

; 4361 :                 _Error(regex_constants::error_badbrace);
; 4362 :             }
; 4363 : 
; 4364 :             _Min = _Val;
; 4365 :             if (_Mchar != _Meta_comma) {

  00084	83 7e 4c 2c	 cmp	 DWORD PTR [esi+76], 44	; 0000002cH
  00088	8b 5e 44	 mov	 ebx, DWORD PTR [esi+68]
  0008b	74 04		 je	 SHORT $LN10@Quantifier

; 4366 :                 _Max = _Min;

  0008d	8b fb		 mov	 edi, ebx

; 4367 :             } else { // check for decimal constant following comma

  0008f	eb 1d		 jmp	 SHORT $LN12@Quantifier
$LN10@Quantifier:

; 4368 :                 _Next();

  00091	8b ce		 mov	 ecx, esi
  00093	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4369 :                 if (_Mchar != _Meta_rbr) {

  00098	83 7e 4c 7d	 cmp	 DWORD PTR [esi+76], 125	; 0000007dH
  0009c	74 16		 je	 SHORT $LN37@Quantifier

; 4370 :                     if (!_DecimalDigits(regex_constants::error_badbrace)) {

  0009e	6a 07		 push	 7
  000a0	8b ce		 mov	 ecx, esi
  000a2	e8 00 00 00 00	 call	 ?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_DecimalDigits
  000a7	84 c0		 test	 al, al
  000a9	74 33		 je	 SHORT $LN15@Quantifier

; 4371 :                         _Error(regex_constants::error_badbrace);
; 4372 :                     }
; 4373 : 
; 4374 :                     _Max = _Val;

  000ab	8b 7e 44	 mov	 edi, DWORD PTR [esi+68]
$LN12@Quantifier:

; 4375 :                 }
; 4376 :             }
; 4377 : 
; 4378 :             if (_Mchar != _Meta_rbr || (_Max != -1 && _Max < _Min)) {

  000ae	83 7e 4c 7d	 cmp	 DWORD PTR [esi+76], 125	; 0000007dH
  000b2	75 2a		 jne	 SHORT $LN15@Quantifier
$LN37@Quantifier:
  000b4	83 ff ff	 cmp	 edi, -1
  000b7	0f 84 61 ff ff
	ff		 je	 $LN8@Quantifier
  000bd	3b fb		 cmp	 edi, ebx
  000bf	7c 1d		 jl	 SHORT $LN15@Quantifier
  000c1	e9 58 ff ff ff	 jmp	 $LN8@Quantifier
$LN18@Quantifier:

; 4388 :     const bool _Greedy = !(_L_flags & _L_ngr_rep) || _Mchar != _Meta_query;

  000c6	c6 45 fc 01	 mov	 BYTE PTR __Greedy$[ebp], 1

; 4391 :     }
; 4392 : 
; 4393 :     _Nfa._Add_rep(_Min, _Max, _Greedy);

  000ca	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  000cd	ff 75 fc	 push	 DWORD PTR __Greedy$[ebp]
  000d0	57		 push	 edi
  000d1	53		 push	 ebx
  000d2	e8 00 00 00 00	 call	 ?_Add_rep@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXHH_N@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_rep
$LN1@Quantifier:

; 4394 : }

  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
$LN15@Quantifier:

; 4379 :                 _Error(regex_constants::error_badbrace);

  000de	6a 07		 push	 7
  000e0	8b ce		 mov	 ecx, esi
  000e2	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN35@Quantifier:
  000e7	cc		 int	 3
?_Quantifier@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Quantifier
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Wrapped_disjunction@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ
_TEXT	SEGMENT
?_Wrapped_disjunction@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Wrapped_disjunction, COMDAT
; _this$ = ecx

; 4169 : bool _Parser<_FwdIt, _Elem, _RxTraits>::_Wrapped_disjunction() { // add disjunction inside group

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 4170 :     ++_Disj_count;

  00004	ff 46 10	 inc	 DWORD PTR [esi+16]

; 4171 :     if (!(_L_flags & _L_empty_grp) && _Mchar == _Meta_rpar) {

  00007	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  0000a	a9 00 00 00 08	 test	 eax, 134217728		; 08000000H
  0000f	75 06		 jne	 SHORT $LN19@Wrapped_di
  00011	83 7e 4c 29	 cmp	 DWORD PTR [esi+76], 41	; 00000029H
  00015	74 71		 je	 SHORT $LN31@Wrapped_di
$LN19@Wrapped_di:

; 4173 :     } else if ((_L_flags & _L_nc_grp) && _Mchar == _Meta_query) { // check for valid ECMAScript (?x ... ) group

  00017	a8 20		 test	 al, 32			; 00000020H
  00019	74 48		 je	 SHORT $LN4@Wrapped_di
  0001b	83 7e 4c 3f	 cmp	 DWORD PTR [esi+76], 63	; 0000003fH
  0001f	75 42		 jne	 SHORT $LN4@Wrapped_di

; 4174 :         _Next();

  00021	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4175 :         _Meta_type _Ch = _Mchar;

  00026	8b 7e 4c	 mov	 edi, DWORD PTR [esi+76]

; 4176 :         _Next();

  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4177 :         if (_Ch == _Meta_colon) {

  00030	83 ff 3a	 cmp	 edi, 58			; 0000003aH
  00033	74 37		 je	 SHORT $LN20@Wrapped_di

; 4178 :             _Do_noncapture_group();
; 4179 :         } else if (_Ch == _Meta_exc) { // process assert group, negating

  00035	8b ce		 mov	 ecx, esi
  00037	83 ff 21	 cmp	 edi, 33			; 00000021H
  0003a	75 0f		 jne	 SHORT $LN8@Wrapped_di

; 4180 :             _Do_assert_group(true);

  0003c	6a 01		 push	 1
  0003e	e8 00 00 00 00	 call	 ?_Do_assert_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEX_N@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_assert_group

; 4181 :             --_Disj_count;

  00043	ff 4e 10	 dec	 DWORD PTR [esi+16]

; 4182 :             return false;

  00046	32 c0		 xor	 al, al
  00048	5f		 pop	 edi

; 4198 : }

  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
$LN8@Wrapped_di:

; 4183 :         } else if (_Ch == _Meta_equal) { // process assert group

  0004b	83 ff 3d	 cmp	 edi, 61			; 0000003dH
  0004e	75 3f		 jne	 SHORT $LN10@Wrapped_di

; 4184 :             _Do_assert_group(false);

  00050	6a 00		 push	 0
  00052	e8 00 00 00 00	 call	 ?_Do_assert_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEX_N@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_assert_group

; 4185 :             --_Disj_count;

  00057	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0005a	48		 dec	 eax
  0005b	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 4186 :             return false;

  0005e	32 c0		 xor	 al, al
  00060	5f		 pop	 edi

; 4198 : }

  00061	5e		 pop	 esi
  00062	c3		 ret	 0
$LN4@Wrapped_di:

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  00063	f7 46 40 00 02
	00 00		 test	 DWORD PTR [esi+64], 512	; 00000200H

; 4189 :         }
; 4190 :     } else if (_Flags & regex_constants::nosubs) {

  0006a	74 0f		 je	 SHORT $LN12@Wrapped_di
$LN20@Wrapped_di:

; 4191 :         _Do_noncapture_group();

  0006c	8b ce		 mov	 ecx, esi
  0006e	e8 00 00 00 00	 call	 ?_Do_noncapture_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_noncapture_group

; 4194 :     }
; 4195 : 
; 4196 :     --_Disj_count;

  00073	ff 4e 10	 dec	 DWORD PTR [esi+16]

; 4197 :     return true;

  00076	b0 01		 mov	 al, 1
  00078	5f		 pop	 edi

; 4198 : }

  00079	5e		 pop	 esi
  0007a	c3		 ret	 0
$LN12@Wrapped_di:

; 4192 :     } else {
; 4193 :         _Do_capture_group();

  0007b	e8 00 00 00 00	 call	 ?_Do_capture_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_capture_group

; 4194 :     }
; 4195 : 
; 4196 :     --_Disj_count;

  00080	ff 4e 10	 dec	 DWORD PTR [esi+16]

; 4197 :     return true;

  00083	b0 01		 mov	 al, 1
  00085	5f		 pop	 edi

; 4198 : }

  00086	5e		 pop	 esi
  00087	c3		 ret	 0
$LN31@Wrapped_di:

; 4172 :         _Error(regex_constants::error_paren);

  00088	6a 05		 push	 5
  0008a	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN10@Wrapped_di:

; 4187 :         } else {
; 4188 :             _Error(regex_constants::error_syntax);

  0008f	6a 0e		 push	 14			; 0000000eH
  00091	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN29@Wrapped_di:
  00096	cc		 int	 3
?_Wrapped_disjunction@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Wrapped_disjunction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Do_assert_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEX_N@Z
_TEXT	SEGMENT
__Neg$ = 8						; size = 1
?_Do_assert_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEX_N@Z PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_assert_group, COMDAT
; _this$ = ecx

; 4162 : void _Parser<_FwdIt, _Elem, _RxTraits>::_Do_assert_group(bool _Neg) { // add assert group

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 4163 :     _Node_base* _Pos1 = _Nfa._Begin_assert_group(_Neg);

  00006	ff 75 08	 push	 DWORD PTR __Neg$[ebp]
  00009	8b f9		 mov	 edi, ecx
  0000b	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  0000e	e8 00 00 00 00	 call	 ?_Begin_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@_N@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_assert_group

; 4164 :     _Disjunction();

  00013	8b cf		 mov	 ecx, edi
  00015	8b f0		 mov	 esi, eax
  00017	e8 00 00 00 00	 call	 ?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Disjunction

; 4165 :     _Nfa._End_assert_group(_Pos1);

  0001c	56		 push	 esi
  0001d	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  00020	e8 00 00 00 00	 call	 ?_End_assert_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_assert_group
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 4166 : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?_Do_assert_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEX_N@Z ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_assert_group
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Do_noncapture_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Do_noncapture_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_noncapture_group, COMDAT
; _this$ = ecx

; 4155 : void _Parser<_FwdIt, _Elem, _RxTraits>::_Do_noncapture_group() { // add non-capture group

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 4156 :     _Node_base* _Pos1 = _Nfa._Begin_group();

  00005	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  00008	e8 00 00 00 00	 call	 ?_Begin_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@XZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_group

; 4157 :     _Disjunction();

  0000d	8b cf		 mov	 ecx, edi
  0000f	8b f0		 mov	 esi, eax
  00011	e8 00 00 00 00	 call	 ?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Disjunction

; 4158 :     _Nfa._End_group(_Pos1);

  00016	56		 push	 esi
  00017	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  0001a	e8 00 00 00 00	 call	 ?_End_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_group
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx

; 4159 : }

  00022	c3		 ret	 0
?_Do_noncapture_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_noncapture_group
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Do_capture_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Do_capture_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_capture_group, COMDAT
; _this$ = ecx

; 4140 : void _Parser<_FwdIt, _Elem, _RxTraits>::_Do_capture_group() { // add capture group

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 4141 :     ++_Grp_idx;

  00003	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00006	40		 inc	 eax
  00007	89 43 0c	 mov	 DWORD PTR [ebx+12], eax

; 4142 : 
; 4143 :     if (_Grp_idx >= 1000) { // hardcoded limit

  0000a	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0000f	73 48		 jae	 SHORT $LN45@Do_capture

; 4145 :     }
; 4146 : 
; 4147 :     _Node_base* _Pos1 = _Nfa._Begin_capture_group(_Grp_idx);

  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	50		 push	 eax
  00014	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  00017	e8 00 00 00 00	 call	 ?_Begin_capture_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@I@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_capture_group

; 4148 :     _Disjunction();

  0001c	8b cb		 mov	 ecx, ebx
  0001e	8b f8		 mov	 edi, eax
  00020	e8 00 00 00 00	 call	 ?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Disjunction

; 4149 :     _Nfa._End_group(_Pos1);

  00025	57		 push	 edi
  00026	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  00029	e8 00 00 00 00	 call	 ?_End_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_group

; 4150 :     _Finished_grps.resize(_Grp_idx + 1);

  0002e	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00031	41		 inc	 ecx
  00032	6a 00		 push	 0
  00034	51		 push	 ecx
  00035	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  00038	e8 00 00 00 00	 call	 ?resize@?$vector@_NV?$allocator@_N@std@@@std@@QAEXI_N@Z ; std::vector<bool,std::allocator<bool> >::resize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2424 :         _Myoff += _Off;

  0003d	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00040	8b ca		 mov	 ecx, edx

; 2425 :         _Myptr += _Myoff / _VBITS;

  00042	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00045	83 e2 1f	 and	 edx, 31			; 0000001fH
  00048	c1 e9 05	 shr	 ecx, 5

; 2462 :             *const_cast<_Vbase*>(_Getptr()) |= _Mask();

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 2425 :         _Myptr += _Myoff / _VBITS;

  0004d	8d 0c 88	 lea	 ecx, DWORD PTR [eax+ecx*4]

; 2462 :             *const_cast<_Vbase*>(_Getptr()) |= _Mask();

  00050	8b 01		 mov	 eax, DWORD PTR [ecx]
  00052	0f ab d0	 bts	 eax, edx
  00055	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 4152 : }

  00057	5b		 pop	 ebx
  00058	c3		 ret	 0
$LN45@Do_capture:

; 4144 :         _Xregex_error(regex_constants::error_stack);

  00059	6a 0c		 push	 12			; 0000000cH
  0005b	e8 00 00 00 00	 call	 ?_Xregex_error@std@@YAXW4error_type@regex_constants@1@@Z ; std::_Xregex_error
$LN43@Do_capture:
  00060	cc		 int	 3
?_Do_capture_group@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_capture_group
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_AtomEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_AtomEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_AtomEscape, COMDAT
; _this$ = ecx

; 4327 : void _Parser<_FwdIt, _Elem, _RxTraits>::_AtomEscape() { // check for valid atom escape

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 4328 :     if ((_L_flags & _L_bckr) && _DecimalDigits(regex_constants::error_backref)) { // check for valid back reference

  00003	f7 47 50 00 01
	00 00		 test	 DWORD PTR [edi+80], 256	; 00000100H
  0000a	74 66		 je	 SHORT $LN51@AtomEscape
  0000c	6a 03		 push	 3
  0000e	e8 00 00 00 00	 call	 ?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_DecimalDigits
  00013	84 c0		 test	 al, al
  00015	74 5b		 je	 SHORT $LN51@AtomEscape

; 4329 :         if (_Val == 0) { // handle \0

  00017	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  0001a	53		 push	 ebx
  0001b	8b 5f 44	 mov	 ebx, DWORD PTR [edi+68]
  0001e	85 db		 test	 ebx, ebx
  00020	75 13		 jne	 SHORT $LN4@AtomEscape

; 4330 :             if (!(_L_flags & _L_bzr_chr)) {

  00022	a9 00 00 10 00	 test	 eax, 1048576		; 00100000H
  00027	74 79		 je	 SHORT $LN15@AtomEscape

; 4331 :                 _Error(regex_constants::error_escape);
; 4332 :             } else {
; 4333 :                 _Nfa._Add_char(static_cast<_Elem>(_Val));

  00029	53		 push	 ebx
  0002a	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  0002d	e8 00 00 00 00	 call	 ?_Add_char@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char
  00032	5b		 pop	 ebx
$LN14@AtomEscape:
  00033	5f		 pop	 edi

; 4346 :     }
; 4347 : }

  00034	c3		 ret	 0
$LN4@AtomEscape:

; 4337 :                    || !_Finished_grps[static_cast<size_t>(_Val)]) {

  00035	a9 00 02 00 00	 test	 eax, 512		; 00000200H
  0003a	74 05		 je	 SHORT $LN11@AtomEscape
  0003c	83 fb 09	 cmp	 ebx, 9
  0003f	77 6a		 ja	 SHORT $LN10@AtomEscape
$LN11@AtomEscape:
  00041	39 5f 0c	 cmp	 DWORD PTR [edi+12], ebx
  00044	72 65		 jb	 SHORT $LN10@AtomEscape
  00046	39 5f 20	 cmp	 DWORD PTR [edi+32], ebx
  00049	76 60		 jbe	 SHORT $LN10@AtomEscape
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2487 :         return (*_Getptr() & _Mask()) != 0;

  0004b	8b 57 14	 mov	 edx, DWORD PTR [edi+20]

; 2425 :         _Myptr += _Myoff / _VBITS;

  0004e	8b cb		 mov	 ecx, ebx
  00050	56		 push	 esi

; 2424 :         _Myoff += _Off;

  00051	8b f3		 mov	 esi, ebx

; 2425 :         _Myptr += _Myoff / _VBITS;

  00053	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00056	c1 ee 05	 shr	 esi, 5

; 2509 :         return static_cast<_Vbase>(1) << this->_Myoff;

  00059	b8 01 00 00 00	 mov	 eax, 1
  0005e	d3 e0		 shl	 eax, cl

; 2487 :         return (*_Getptr() & _Mask()) != 0;

  00060	85 04 b2	 test	 DWORD PTR [edx+esi*4], eax
  00063	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 4337 :                    || !_Finished_grps[static_cast<size_t>(_Val)]) {

  00064	74 45		 je	 SHORT $LN10@AtomEscape

; 4339 :         } else {
; 4340 :             _Nfa._Add_backreference(static_cast<size_t>(_Val));

  00066	53		 push	 ebx
  00067	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  0006a	e8 00 00 00 00	 call	 ?_Add_backreference@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXI@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_backreference
  0006f	5b		 pop	 ebx
  00070	5f		 pop	 edi

; 4346 :     }
; 4347 : }

  00071	c3		 ret	 0
$LN51@AtomEscape:

; 4341 :         }
; 4342 :     } else if (_CharacterEscape()) {

  00072	8b cf		 mov	 ecx, edi
  00074	e8 00 00 00 00	 call	 ?_CharacterEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterEscape
  00079	84 c0		 test	 al, al
  0007b	74 0f		 je	 SHORT $LN12@AtomEscape

; 4343 :         _Nfa._Add_char(static_cast<_Elem>(_Val));

  0007d	0f b6 47 44	 movzx	 eax, BYTE PTR [edi+68]
  00081	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ?_Add_char@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char
  0008a	5f		 pop	 edi

; 4346 :     }
; 4347 : }

  0008b	c3		 ret	 0
$LN12@AtomEscape:

; 4344 :     } else if (!(_L_flags & _L_esc_wsd) || !_CharacterClassEscape(true)) {

  0008c	f7 47 50 00 00
	02 00		 test	 DWORD PTR [edi+80], 131072 ; 00020000H
  00093	74 0d		 je	 SHORT $LN15@AtomEscape
  00095	6a 01		 push	 1
  00097	8b cf		 mov	 ecx, edi
  00099	e8 00 00 00 00	 call	 ?_CharacterClassEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_N_N@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterClassEscape
  0009e	84 c0		 test	 al, al
  000a0	75 91		 jne	 SHORT $LN14@AtomEscape
$LN15@AtomEscape:

; 4345 :         _Error(regex_constants::error_escape);

  000a2	6a 02		 push	 2
  000a4	8b cf		 mov	 ecx, edi
  000a6	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN10@AtomEscape:

; 4338 :             _Error(regex_constants::error_backref);

  000ab	6a 03		 push	 3
  000ad	8b cf		 mov	 ecx, edi
  000af	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN64@AtomEscape:
  000b4	cc		 int	 3
?_AtomEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_AtomEscape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_CharacterEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ
_TEXT	SEGMENT
?_CharacterEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterEscape, COMDAT
; _this$ = ecx

; 4289 : bool _Parser<_FwdIt, _Elem, _RxTraits>::_CharacterEscape() { // check for valid character escape

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 4290 :     if (_Mchar == _Meta_eos) {

  00005	83 7e 4c ff	 cmp	 DWORD PTR [esi+76], -1
  00009	0f 84 11 01 00
	00		 je	 $LN36@CharacterE

; 4291 :         _Error(regex_constants::error_escape);
; 4292 :     }
; 4293 : 
; 4294 :     if ((_L_flags & _L_esc_ffn && _Do_ffn(_Char)) || (_L_flags & _L_esc_ffnx && _Do_ffnx(_Char))) {

  0000f	f7 46 50 00 00
	01 00		 test	 DWORD PTR [esi+80], 65536 ; 00010000H
  00016	74 0e		 je	 SHORT $LN33@CharacterE
  00018	0f b6 46 48	 movzx	 eax, BYTE PTR [esi+72]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?_Do_ffn@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_ND@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ffn
  00022	84 c0		 test	 al, al
  00024	75 1c		 jne	 SHORT $LN5@CharacterE
$LN33@CharacterE:
  00026	f7 46 50 00 80
	00 00		 test	 DWORD PTR [esi+80], 32768 ; 00008000H
  0002d	8d 46 50	 lea	 eax, DWORD PTR [esi+80]
  00030	74 1f		 je	 SHORT $LN29@CharacterE
  00032	0f b6 46 48	 movzx	 eax, BYTE PTR [esi+72]
  00036	8b ce		 mov	 ecx, esi
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?_Do_ffnx@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_ND@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ffnx
  0003e	84 c0		 test	 al, al
  00040	74 0c		 je	 SHORT $LN34@CharacterE
$LN5@CharacterE:

; 4295 :         _Next();

  00042	8b ce		 mov	 ecx, esi
  00044	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next
  00049	e9 b2 00 00 00	 jmp	 $LN16@CharacterE
$LN34@CharacterE:

; 4291 :         _Error(regex_constants::error_escape);
; 4292 :     }
; 4293 : 
; 4294 :     if ((_L_flags & _L_esc_ffn && _Do_ffn(_Char)) || (_L_flags & _L_esc_ffnx && _Do_ffnx(_Char))) {

  0004e	8d 46 50	 lea	 eax, DWORD PTR [esi+80]
$LN29@CharacterE:

; 4296 :     } else if (_Char == _Esc_ctrl && (_L_flags & _L_esc_ctrl)) { // handle control escape sequence

  00051	8a 4e 48	 mov	 cl, BYTE PTR [esi+72]
  00054	80 f9 63	 cmp	 cl, 99			; 00000063H
  00057	75 50		 jne	 SHORT $LN30@CharacterE
  00059	f7 46 50 00 00
	04 00		 test	 DWORD PTR [esi+80], 262144 ; 00040000H
  00060	0f 84 81 00 00
	00		 je	 $LN35@CharacterE

; 4297 :         _Next();

  00066	8b ce		 mov	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4298 :         if (!_Traits.isctype(_Char, _RxTraits::_Ch_alpha)) {

  0006d	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2700 :         return (_Ctype._Table[static_cast<unsigned char>(_Ch)] & _Maskval) != 0;

  00070	bf 03 01 00 00	 mov	 edi, 259		; 00000103H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 4298 :         if (!_Traits.isctype(_Char, _RxTraits::_Ch_alpha)) {

  00075	8a 56 48	 mov	 dl, BYTE PTR [esi+72]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2700 :         return (_Ctype._Table[static_cast<unsigned char>(_Ch)] & _Maskval) != 0;

  00078	0f b6 ca	 movzx	 ecx, dl
  0007b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00081	66 85 3c 48	 test	 WORD PTR [eax+ecx*2], di
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 4298 :         if (!_Traits.isctype(_Char, _RxTraits::_Ch_alpha)) {

  00085	0f 84 95 00 00
	00		 je	 $LN36@CharacterE

; 4299 :             _Error(regex_constants::error_escape);
; 4300 :         }
; 4301 : 
; 4302 :         _Val = static_cast<char>(_Char % 32);

  0008b	0f be c2	 movsx	 eax, dl
  0008e	25 1f 00 00 80	 and	 eax, -2147483617	; 8000001fH
  00093	79 05		 jns	 SHORT $LN54@CharacterE
  00095	48		 dec	 eax
  00096	83 c8 e0	 or	 eax, -32		; ffffffe0H
  00099	40		 inc	 eax
$LN54@CharacterE:
  0009a	0f be c0	 movsx	 eax, al

; 4303 :         _Next();

  0009d	8b ce		 mov	 ecx, esi
  0009f	89 46 44	 mov	 DWORD PTR [esi+68], eax
  000a2	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next
  000a7	eb 57		 jmp	 SHORT $LN16@CharacterE
$LN30@CharacterE:

; 4304 :     } else if (_Char == _Esc_hex && (_L_flags & _L_esc_hex)) { // handle hexadecimal escape sequence

  000a9	80 f9 78	 cmp	 cl, 120			; 00000078H
  000ac	75 1a		 jne	 SHORT $LN31@CharacterE
  000ae	f7 00 00 10 00
	00		 test	 DWORD PTR [eax], 4096	; 00001000H
  000b4	74 31		 je	 SHORT $LN35@CharacterE

; 4305 :         _Next();

  000b6	8b ce		 mov	 ecx, esi
  000b8	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4306 :         _HexDigits(2);

  000bd	6a 02		 push	 2
  000bf	8b ce		 mov	 ecx, esi
  000c1	e8 00 00 00 00	 call	 ?_HexDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXH@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_HexDigits
  000c6	eb 38		 jmp	 SHORT $LN16@CharacterE
$LN31@CharacterE:

; 4307 :     } else if (_Char == _Esc_uni && (_L_flags & _L_esc_uni)) { // handle Unicode escape sequence

  000c8	80 f9 75	 cmp	 cl, 117			; 00000075H
  000cb	75 1a		 jne	 SHORT $LN35@CharacterE
  000cd	f7 00 00 08 00
	00		 test	 DWORD PTR [eax], 2048	; 00000800H
  000d3	74 12		 je	 SHORT $LN35@CharacterE

; 4308 :         _Next();

  000d5	8b ce		 mov	 ecx, esi
  000d7	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4309 :         _HexDigits(4);

  000dc	6a 04		 push	 4
  000de	8b ce		 mov	 ecx, esi
  000e0	e8 00 00 00 00	 call	 ?_HexDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXH@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_HexDigits
  000e5	eb 19		 jmp	 SHORT $LN16@CharacterE
$LN35@CharacterE:

; 4310 :     } else if ((_L_flags & _L_esc_oct) && _OctalDigits()) { // handle octal escape sequence

  000e7	f7 00 00 20 00
	00		 test	 DWORD PTR [eax], 8192	; 00002000H
  000ed	74 27		 je	 SHORT $LN14@CharacterE
  000ef	8b ce		 mov	 ecx, esi
  000f1	e8 00 00 00 00	 call	 ?_OctalDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_OctalDigits
  000f6	84 c0		 test	 al, al
  000f8	74 1c		 je	 SHORT $LN14@CharacterE

; 4311 :         if (_Val == 0) {

  000fa	83 7e 44 00	 cmp	 DWORD PTR [esi+68], 0
  000fe	74 20		 je	 SHORT $LN36@CharacterE
$LN16@CharacterE:

; 4316 :     }
; 4317 : 
; 4318 :     if (_STD _Max_limit<typename _RxTraits::_Uelem>() < static_cast<unsigned int>(_Val)) {

  00100	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00103	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00108	77 16		 ja	 SHORT $LN36@CharacterE

; 4320 :     }
; 4321 : 
; 4322 :     _Val = static_cast<_Elem>(_Val);

  0010a	0f be c0	 movsx	 eax, al
  0010d	5f		 pop	 edi
  0010e	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 4323 :     return true;

  00111	b0 01		 mov	 al, 1

; 4324 : }

  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	c3		 ret	 0
$LN14@CharacterE:
  00116	5f		 pop	 edi

; 4312 :             _Error(regex_constants::error_escape);
; 4313 :         }
; 4314 :     } else {
; 4315 :         return _IdentityEscape();

  00117	8b ce		 mov	 ecx, esi

; 4324 : }

  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	e9 00 00 00 00	 jmp	 ?_IdentityEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_IdentityEscape
$LN36@CharacterE:

; 4319 :         _Error(regex_constants::error_escape);

  00120	6a 02		 push	 2
  00122	8b ce		 mov	 ecx, esi
  00124	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN55@CharacterE:
  00129	cc		 int	 3
?_CharacterEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterEscape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Do_ffnx@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_ND@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?_Do_ffnx@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_ND@Z PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ffnx, COMDAT
; _this$ = ecx

; 4276 : bool _Parser<_FwdIt, _Elem, _RxTraits>::_Do_ffnx(_Elem _Ch) { // check for the remaining file format escape characters

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4277 :     if (_Ch == _Esc_ctrl_a) {

  00003	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  00006	3c 61		 cmp	 al, 97			; 00000061H
  00008	75 0e		 jne	 SHORT $LN2@Do_ffnx

; 4278 :         _Val = '\a';

  0000a	b8 07 00 00 00	 mov	 eax, 7

; 4283 :     }
; 4284 : 
; 4285 :     return true;

  0000f	89 41 44	 mov	 DWORD PTR [ecx+68], eax
  00012	b0 01		 mov	 al, 1

; 4286 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN2@Do_ffnx:

; 4279 :     } else if (_Ch == _Esc_ctrl_b) {

  00018	3c 62		 cmp	 al, 98			; 00000062H
  0001a	75 0e		 jne	 SHORT $LN4@Do_ffnx

; 4280 :         _Val = '\b';

  0001c	b8 08 00 00 00	 mov	 eax, 8

; 4283 :     }
; 4284 : 
; 4285 :     return true;

  00021	89 41 44	 mov	 DWORD PTR [ecx+68], eax
  00024	b0 01		 mov	 al, 1

; 4286 : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN4@Do_ffnx:

; 4281 :     } else {
; 4282 :         return false;

  0002a	32 c0		 xor	 al, al

; 4286 : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?_Do_ffnx@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_ND@Z ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ffnx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Do_ffn@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_ND@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?_Do_ffn@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_ND@Z PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ffn, COMDAT
; _this$ = ecx

; 4257 : bool _Parser<_FwdIt, _Elem, _RxTraits>::_Do_ffn(_Elem _Ch) { // check for limited file format escape characters

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4258 :     if (_Ch == _Esc_ctrl_f) {

  00003	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  00006	3c 66		 cmp	 al, 102			; 00000066H
  00008	75 0d		 jne	 SHORT $LN2@Do_ffn

; 4259 :         _Val = '\f';

  0000a	c7 41 44 0c 00
	00 00		 mov	 DWORD PTR [ecx+68], 12	; 0000000cH

; 4270 :     }
; 4271 : 
; 4272 :     return true;

  00011	b0 01		 mov	 al, 1

; 4273 : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
$LN2@Do_ffn:

; 4260 :     } else if (_Ch == _Esc_ctrl_n) {

  00017	3c 6e		 cmp	 al, 110			; 0000006eH
  00019	75 0d		 jne	 SHORT $LN4@Do_ffn

; 4261 :         _Val = '\n';

  0001b	c7 41 44 0a 00
	00 00		 mov	 DWORD PTR [ecx+68], 10	; 0000000aH

; 4270 :     }
; 4271 : 
; 4272 :     return true;

  00022	b0 01		 mov	 al, 1

; 4273 : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN4@Do_ffn:

; 4262 :     } else if (_Ch == _Esc_ctrl_r) {

  00028	3c 72		 cmp	 al, 114			; 00000072H
  0002a	75 0d		 jne	 SHORT $LN6@Do_ffn

; 4263 :         _Val = '\r';

  0002c	c7 41 44 0d 00
	00 00		 mov	 DWORD PTR [ecx+68], 13	; 0000000dH

; 4270 :     }
; 4271 : 
; 4272 :     return true;

  00033	b0 01		 mov	 al, 1

; 4273 : }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
$LN6@Do_ffn:

; 4264 :     } else if (_Ch == _Esc_ctrl_t) {

  00039	3c 74		 cmp	 al, 116			; 00000074H
  0003b	75 0d		 jne	 SHORT $LN8@Do_ffn

; 4265 :         _Val = '\t';

  0003d	c7 41 44 09 00
	00 00		 mov	 DWORD PTR [ecx+68], 9

; 4270 :     }
; 4271 : 
; 4272 :     return true;

  00044	b0 01		 mov	 al, 1

; 4273 : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN8@Do_ffn:

; 4266 :     } else if (_Ch == _Esc_ctrl_v) {

  0004a	3c 76		 cmp	 al, 118			; 00000076H
  0004c	75 0d		 jne	 SHORT $LN10@Do_ffn

; 4267 :         _Val = '\v';

  0004e	c7 41 44 0b 00
	00 00		 mov	 DWORD PTR [ecx+68], 11	; 0000000bH

; 4270 :     }
; 4271 : 
; 4272 :     return true;

  00055	b0 01		 mov	 al, 1

; 4273 : }

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN10@Do_ffn:

; 4268 :     } else {
; 4269 :         return false;

  0005b	32 c0		 xor	 al, al

; 4273 : }

  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?_Do_ffn@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_ND@Z ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ffn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_IsIdentityEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
?_IsIdentityEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@ABE_NXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_IsIdentityEscape, COMDAT
; _this$ = ecx

; 4202 :     if (_L_flags & _L_ident_ECMA) {

  00000	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00003	0f be 41 48	 movsx	 eax, BYTE PTR [ecx+72]
  00007	f7 c2 00 00 40
	00		 test	 edx, 4194304		; 00400000H
  0000d	74 16		 je	 SHORT $LN6@IsIdentity

; 4203 :         // ECMAScript identity escape characters
; 4204 :         switch (_Char) {

  0000f	83 c0 bc	 add	 eax, -68		; ffffffbcH
  00012	83 f8 33	 cmp	 eax, 51			; 00000033H
  00015	77 24		 ja	 SHORT $LN15@IsIdentity
  00017	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN32@IsIdentity[eax]
  0001e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN33@IsIdentity[eax*4]
$LN6@IsIdentity:

; 4205 :         case 'c': // ASCII control character
; 4206 :         case 'd': // digit
; 4207 :         case 'D':
; 4208 :         case 's': // whitespace
; 4209 :         case 'S':
; 4210 :         case 'w': // word character
; 4211 :         case 'W':
; 4212 :             return false;
; 4213 :         default:
; 4214 :             return true;
; 4215 :         }
; 4216 :     }
; 4217 : 
; 4218 :     switch (_Char) {

  00025	83 c0 de	 add	 eax, -34		; ffffffdeH
  00028	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0002b	77 23		 ja	 SHORT $LN30@IsIdentity
  0002d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@IsIdentity[eax]
  00034	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@IsIdentity[eax*4]
$LN15@IsIdentity:

; 4219 :     case _Meta_dot:
; 4220 :     case _Meta_lsq:
; 4221 :     case _Meta_esc:
; 4222 :     case _Meta_star:
; 4223 :     case _Meta_bar:
; 4224 :     case _Meta_caret:
; 4225 :     case _Meta_dlr:
; 4226 :         // BRE, ERE, awk identity escape characters
; 4227 :         return true;

  0003b	b0 01		 mov	 al, 1

; 4242 :     }
; 4243 : }

  0003d	c3		 ret	 0
$LN22@IsIdentity:

; 4228 :     case _Meta_lpar:
; 4229 :     case _Meta_rpar:
; 4230 :     case _Meta_plus:
; 4231 :     case _Meta_query:
; 4232 :     case _Meta_lbr:
; 4233 :     case _Meta_rbr:
; 4234 :         // additional ERE identity escape characters
; 4235 :         return (_L_flags & _L_ident_ERE) != 0;

  0003e	c1 ea 17	 shr	 edx, 23			; 00000017H
  00041	80 e2 01	 and	 dl, 1
  00044	8a c2		 mov	 al, dl

; 4242 :     }
; 4243 : }

  00046	c3		 ret	 0
$LN28@IsIdentity:

; 4236 :     case '"':
; 4237 :     case '/':
; 4238 :         // additional awk identity escape characters
; 4239 :         return (_L_flags & _L_ident_awk) != 0;

  00047	c1 ea 18	 shr	 edx, 24			; 00000018H
  0004a	80 e2 01	 and	 dl, 1
  0004d	8a c2		 mov	 al, dl

; 4242 :     }
; 4243 : }

  0004f	c3		 ret	 0
$LN30@IsIdentity:

; 4240 :     default:
; 4241 :         return false;

  00050	32 c0		 xor	 al, al

; 4242 :     }
; 4243 : }

  00052	c3		 ret	 0
  00053	90		 npad	 1
$LN33@IsIdentity:
  00054	00 00 00 00	 DD	 $LN30@IsIdentity
  00058	00 00 00 00	 DD	 $LN15@IsIdentity
$LN32@IsIdentity:
  0005c	00		 DB	 0
  0005d	01		 DB	 1
  0005e	01		 DB	 1
  0005f	01		 DB	 1
  00060	01		 DB	 1
  00061	01		 DB	 1
  00062	01		 DB	 1
  00063	01		 DB	 1
  00064	01		 DB	 1
  00065	01		 DB	 1
  00066	01		 DB	 1
  00067	01		 DB	 1
  00068	01		 DB	 1
  00069	01		 DB	 1
  0006a	01		 DB	 1
  0006b	00		 DB	 0
  0006c	01		 DB	 1
  0006d	01		 DB	 1
  0006e	01		 DB	 1
  0006f	00		 DB	 0
  00070	01		 DB	 1
  00071	01		 DB	 1
  00072	01		 DB	 1
  00073	01		 DB	 1
  00074	01		 DB	 1
  00075	01		 DB	 1
  00076	01		 DB	 1
  00077	01		 DB	 1
  00078	01		 DB	 1
  00079	01		 DB	 1
  0007a	01		 DB	 1
  0007b	00		 DB	 0
  0007c	00		 DB	 0
  0007d	01		 DB	 1
  0007e	01		 DB	 1
  0007f	01		 DB	 1
  00080	01		 DB	 1
  00081	01		 DB	 1
  00082	01		 DB	 1
  00083	01		 DB	 1
  00084	01		 DB	 1
  00085	01		 DB	 1
  00086	01		 DB	 1
  00087	01		 DB	 1
  00088	01		 DB	 1
  00089	01		 DB	 1
  0008a	01		 DB	 1
  0008b	00		 DB	 0
  0008c	01		 DB	 1
  0008d	01		 DB	 1
  0008e	01		 DB	 1
  0008f	00		 DB	 0
$LN35@IsIdentity:
  00090	00 00 00 00	 DD	 $LN28@IsIdentity
  00094	00 00 00 00	 DD	 $LN15@IsIdentity
  00098	00 00 00 00	 DD	 $LN22@IsIdentity
  0009c	00 00 00 00	 DD	 $LN30@IsIdentity
$LN34@IsIdentity:
  000a0	00		 DB	 0
  000a1	03		 DB	 3
  000a2	01		 DB	 1
  000a3	03		 DB	 3
  000a4	03		 DB	 3
  000a5	03		 DB	 3
  000a6	02		 DB	 2
  000a7	02		 DB	 2
  000a8	01		 DB	 1
  000a9	02		 DB	 2
  000aa	03		 DB	 3
  000ab	03		 DB	 3
  000ac	01		 DB	 1
  000ad	00		 DB	 0
  000ae	03		 DB	 3
  000af	03		 DB	 3
  000b0	03		 DB	 3
  000b1	03		 DB	 3
  000b2	03		 DB	 3
  000b3	03		 DB	 3
  000b4	03		 DB	 3
  000b5	03		 DB	 3
  000b6	03		 DB	 3
  000b7	03		 DB	 3
  000b8	03		 DB	 3
  000b9	03		 DB	 3
  000ba	03		 DB	 3
  000bb	03		 DB	 3
  000bc	03		 DB	 3
  000bd	02		 DB	 2
  000be	03		 DB	 3
  000bf	03		 DB	 3
  000c0	03		 DB	 3
  000c1	03		 DB	 3
  000c2	03		 DB	 3
  000c3	03		 DB	 3
  000c4	03		 DB	 3
  000c5	03		 DB	 3
  000c6	03		 DB	 3
  000c7	03		 DB	 3
  000c8	03		 DB	 3
  000c9	03		 DB	 3
  000ca	03		 DB	 3
  000cb	03		 DB	 3
  000cc	03		 DB	 3
  000cd	03		 DB	 3
  000ce	03		 DB	 3
  000cf	03		 DB	 3
  000d0	03		 DB	 3
  000d1	03		 DB	 3
  000d2	03		 DB	 3
  000d3	03		 DB	 3
  000d4	03		 DB	 3
  000d5	03		 DB	 3
  000d6	03		 DB	 3
  000d7	03		 DB	 3
  000d8	03		 DB	 3
  000d9	01		 DB	 1
  000da	01		 DB	 1
  000db	03		 DB	 3
  000dc	01		 DB	 1
  000dd	03		 DB	 3
  000de	03		 DB	 3
  000df	03		 DB	 3
  000e0	03		 DB	 3
  000e1	03		 DB	 3
  000e2	03		 DB	 3
  000e3	03		 DB	 3
  000e4	03		 DB	 3
  000e5	03		 DB	 3
  000e6	03		 DB	 3
  000e7	03		 DB	 3
  000e8	03		 DB	 3
  000e9	03		 DB	 3
  000ea	03		 DB	 3
  000eb	03		 DB	 3
  000ec	03		 DB	 3
  000ed	03		 DB	 3
  000ee	03		 DB	 3
  000ef	03		 DB	 3
  000f0	03		 DB	 3
  000f1	03		 DB	 3
  000f2	03		 DB	 3
  000f3	03		 DB	 3
  000f4	03		 DB	 3
  000f5	03		 DB	 3
  000f6	03		 DB	 3
  000f7	03		 DB	 3
  000f8	03		 DB	 3
  000f9	02		 DB	 2
  000fa	01		 DB	 1
  000fb	02		 DB	 2
?_IsIdentityEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@ABE_NXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_IsIdentityEscape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_IdentityEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ
_TEXT	SEGMENT
?_IdentityEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_IdentityEscape, COMDAT
; _this$ = ecx

; 4246 : bool _Parser<_FwdIt, _Elem, _RxTraits>::_IdentityEscape() { // check whether an escape is valid, and process it if so

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4247 :     if (_IsIdentityEscape()) {

  00003	e8 00 00 00 00	 call	 ?_IsIdentityEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@ABE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_IsIdentityEscape
  00008	84 c0		 test	 al, al
  0000a	74 12		 je	 SHORT $LN2@IdentityEs

; 4248 :         _Val = _Char;

  0000c	0f be 46 48	 movsx	 eax, BYTE PTR [esi+72]

; 4249 :         _Next();

  00010	8b ce		 mov	 ecx, esi
  00012	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00015	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4250 :         return true;

  0001a	b0 01		 mov	 al, 1
  0001c	5e		 pop	 esi

; 4253 :     }
; 4254 : }

  0001d	c3		 ret	 0
$LN2@IdentityEs:

; 4251 :     } else {
; 4252 :         return false;

  0001e	32 c0		 xor	 al, al
  00020	5e		 pop	 esi

; 4253 :     }
; 4254 : }

  00021	c3		 ret	 0
?_IdentityEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_IdentityEscape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_CharacterClass@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_CharacterClass@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterClass, COMDAT
; _this$ = ecx

; 4125 : void _Parser<_FwdIt, _Elem, _RxTraits>::_CharacterClass() { // add bracket expression

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 4126 :     _Nfa._Add_class();

  00004	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00007	e8 00 00 00 00	 call	 ?_Add_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_class

; 4127 :     if (_Mchar == _Meta_caret) { // negate bracket expression

  0000c	83 7e 4c 5e	 cmp	 DWORD PTR [esi+76], 94	; 0000005eH
  00010	75 0f		 jne	 SHORT $LN2@CharacterC

; 4128 :         _Nfa._Negate();

  00012	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00015	e8 00 00 00 00	 call	 ?_Negate@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Negate

; 4129 :         _Next();

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next
$LN2@CharacterC:

; 4130 :     }
; 4131 : 
; 4132 :     if ((_L_flags & _L_brk_rstr) && _Mchar == _Meta_rsq) { // insert initial ] when not special

  00021	f7 46 50 00 00
	00 20		 test	 DWORD PTR [esi+80], 536870912 ; 20000000H
  00028	74 17		 je	 SHORT $LN3@CharacterC
  0002a	83 7e 4c 5d	 cmp	 DWORD PTR [esi+76], 93	; 0000005dH
  0002e	75 11		 jne	 SHORT $LN3@CharacterC

; 4133 :         _Nfa._Add_char_to_class(_Meta_rsq);

  00030	6a 5d		 push	 93			; 0000005dH
  00032	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00035	e8 00 00 00 00	 call	 ?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_class

; 4134 :         _Next();

  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next
$LN3@CharacterC:

; 4135 :     }
; 4136 :     _ClassRanges();

  00041	5f		 pop	 edi
  00042	8b ce		 mov	 ecx, esi
  00044	5e		 pop	 esi
  00045	e9 00 00 00 00	 jmp	 ?_ClassRanges@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassRanges
?_CharacterClass@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterClass
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_ClassRanges@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Chr1$1 = -4						; size = 1
?_ClassRanges@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassRanges, COMDAT
; _this$ = ecx

; 4081 : void _Parser<_FwdIt, _Elem, _RxTraits>::_ClassRanges() { // check for valid class ranges

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 4082 :     _Prs_ret _Ret;
; 4083 : 
; 4084 :     for (;;) { // process characters through end of bracket expression
; 4085 :         if ((_Ret = _ClassAtom()) == _Prs_none) {

  00007	e8 00 00 00 00	 call	 ?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE?AW4_Prs_ret@2@XZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassAtom
  0000c	85 c0		 test	 eax, eax
  0000e	0f 84 c0 00 00
	00		 je	 $LN20@ClassRange
  00014	53		 push	 ebx
$LL4@ClassRange:

; 4086 :             return;
; 4087 :         }
; 4088 : 
; 4089 :         if (_Ret != _Prs_set) {

  00015	83 f8 02	 cmp	 eax, 2
  00018	0f 84 87 00 00
	00		 je	 $LN2@ClassRange

; 4090 :             if (_Val == 0 && !(_L_flags & _L_bzr_chr)) {

  0001e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00021	8a c8		 mov	 cl, al
  00023	85 c0		 test	 eax, eax
  00025	75 0d		 jne	 SHORT $LN7@ClassRange
  00027	f7 46 50 00 00
	10 00		 test	 DWORD PTR [esi+80], 1048576 ; 00100000H
  0002e	0f 84 a5 00 00
	00		 je	 $LN21@ClassRange
$LN7@ClassRange:

; 4092 :             }
; 4093 : 
; 4094 :             if (_Mchar == _Meta_dash) { // check for valid range

  00034	83 7e 4c 2d	 cmp	 DWORD PTR [esi+76], 45	; 0000002dH
  00038	75 62		 jne	 SHORT $LN8@ClassRange

; 4095 :                 _Next();

  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4096 :                 _Elem _Chr1 = static_cast<_Elem>(_Val);

  00041	8a 5e 44	 mov	 bl, BYTE PTR [esi+68]

; 4097 :                 if ((_Ret = _ClassAtom()) == _Prs_none) { // treat - as ordinary character

  00044	8b ce		 mov	 ecx, esi
  00046	88 5d fc	 mov	 BYTE PTR __Chr1$1[ebp], bl
  00049	e8 00 00 00 00	 call	 ?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE?AW4_Prs_ret@2@XZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassAtom
  0004e	85 c0		 test	 eax, eax
  00050	74 68		 je	 SHORT $LN22@ClassRange

; 4100 :                     return;
; 4101 :                 }
; 4102 : 
; 4103 :                 if (_Ret == _Prs_set) {

  00052	83 f8 02	 cmp	 eax, 2
  00055	0f 84 87 00 00
	00		 je	 $LN23@ClassRange

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  0005b	f7 46 40 00 08
	00 00		 test	 DWORD PTR [esi+64], 2048 ; 00000800H

; 4105 :                 }
; 4106 : 
; 4107 :                 if (_Flags & regex_constants::collate) { // translate ends of range

  00062	74 23		 je	 SHORT $LN12@ClassRange

; 4108 :                     _Val  = _Traits.translate(static_cast<_Elem>(_Val));

  00064	0f b6 46 44	 movzx	 eax, BYTE PTR [esi+68]
  00068	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?translate@?$_Regex_traits@D@std@@QBEDD@Z ; std::_Regex_traits<char>::translate

; 4109 :                     _Chr1 = _Traits.translate(_Chr1);

  00071	ff 75 fc	 push	 DWORD PTR __Chr1$1[ebp]
  00074	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00077	0f be c0	 movsx	 eax, al
  0007a	89 46 44	 mov	 DWORD PTR [esi+68], eax
  0007d	e8 00 00 00 00	 call	 ?translate@?$_Regex_traits@D@std@@QBEDD@Z ; std::_Regex_traits<char>::translate
  00082	8a d8		 mov	 bl, al
  00084	88 5d fc	 mov	 BYTE PTR __Chr1$1[ebp], bl
$LN12@ClassRange:

; 4110 :                 }
; 4111 : 
; 4112 :                 if (static_cast<typename _RxTraits::_Uelem>(_Val) < static_cast<typename _RxTraits::_Uelem>(_Chr1)) {

  00087	8a 46 44	 mov	 al, BYTE PTR [esi+68]
  0008a	3a c3		 cmp	 al, bl
  0008c	72 54		 jb	 SHORT $LN23@ClassRange

; 4113 :                     _Error(regex_constants::error_range);
; 4114 :                 }
; 4115 : 
; 4116 :                 _Nfa._Add_range(_Chr1, static_cast<_Elem>(_Val));

  0008e	50		 push	 eax
  0008f	ff 75 fc	 push	 DWORD PTR __Chr1$1[ebp]
  00092	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00095	e8 00 00 00 00	 call	 ?_Add_range@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXDD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_range

; 4117 :             } else {

  0009a	eb 09		 jmp	 SHORT $LN2@ClassRange
$LN8@ClassRange:

; 4118 :                 _Nfa._Add_char_to_class(static_cast<_Elem>(_Val));

  0009c	51		 push	 ecx
  0009d	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  000a0	e8 00 00 00 00	 call	 ?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_class
$LN2@ClassRange:

; 4082 :     _Prs_ret _Ret;
; 4083 : 
; 4084 :     for (;;) { // process characters through end of bracket expression
; 4085 :         if ((_Ret = _ClassAtom()) == _Prs_none) {

  000a5	8b ce		 mov	 ecx, esi
  000a7	e8 00 00 00 00	 call	 ?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE?AW4_Prs_ret@2@XZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassAtom
  000ac	85 c0		 test	 eax, eax
  000ae	0f 85 61 ff ff
	ff		 jne	 $LL4@ClassRange
  000b4	5b		 pop	 ebx
  000b5	5e		 pop	 esi

; 4119 :             }
; 4120 :         }
; 4121 :     }
; 4122 : }

  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
$LN22@ClassRange:

; 4098 :                     _Nfa._Add_char_to_class(static_cast<_Elem>(_Val));

  000ba	0f b6 46 44	 movzx	 eax, BYTE PTR [esi+68]
  000be	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  000c1	57		 push	 edi
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_class

; 4099 :                     _Nfa._Add_char_to_class(_Meta_dash);

  000c8	6a 2d		 push	 45			; 0000002dH
  000ca	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  000cd	e8 00 00 00 00	 call	 ?_Add_char_to_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXD@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_char_to_class
  000d2	5f		 pop	 edi
  000d3	5b		 pop	 ebx
$LN20@ClassRange:
  000d4	5e		 pop	 esi

; 4119 :             }
; 4120 :         }
; 4121 :     }
; 4122 : }

  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
$LN21@ClassRange:

; 4091 :                 _Error(regex_constants::error_escape);

  000d9	6a 02		 push	 2
  000db	8b ce		 mov	 ecx, esi
  000dd	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN23@ClassRange:

; 4104 :                     _Error(regex_constants::error_range); // set follows dash

  000e2	6a 08		 push	 8
  000e4	8b ce		 mov	 ecx, esi
  000e6	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN37@ClassRange:
  000eb	cc		 int	 3
?_ClassRanges@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassRanges
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE?AW4_Prs_ret@2@XZ
_TEXT	SEGMENT
?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE?AW4_Prs_ret@2@XZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassAtom, COMDAT
; _this$ = ecx

; 4048 : _Prs_ret _Parser<_FwdIt, _Elem, _RxTraits>::_ClassAtom() { // check for class atom

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4049 :     if (_Mchar == _Meta_esc) { // check for valid escape sequence

  00003	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00006	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00009	75 66		 jne	 SHORT $LN2@ClassAtom

; 4050 :         _Next();

  0000b	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4051 :         if (_L_flags & _L_grp_esc) {

  00010	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00013	a9 00 00 20 00	 test	 eax, 2097152		; 00200000H
  00018	74 0b		 je	 SHORT $LN4@ClassAtom

; 4052 :             return _ClassEscape(false);

  0001a	6a 00		 push	 0
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?_ClassEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE?AW4_Prs_ret@2@_N@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassEscape
  00023	5e		 pop	 esi

; 4077 :     }
; 4078 : }

  00024	c3		 ret	 0
$LN4@ClassAtom:

; 4053 :         } else if ((_L_flags & _L_esc_ffn && _Do_ffn(_Char))
; 4054 :                    || (_L_flags & _L_esc_ffnx && _Do_ffnx(_Char))) { // advance to next character

  00025	a9 00 00 01 00	 test	 eax, 65536		; 00010000H
  0002a	74 10		 je	 SHORT $LN18@ClassAtom
  0002c	0f b6 46 48	 movzx	 eax, BYTE PTR [esi+72]
  00030	8b ce		 mov	 ecx, esi
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Do_ffn@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_ND@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ffn
  00038	84 c0		 test	 al, al
  0003a	75 19		 jne	 SHORT $LN7@ClassAtom
$LN18@ClassAtom:
  0003c	f7 46 50 00 80
	00 00		 test	 DWORD PTR [esi+80], 32768 ; 00008000H
  00043	74 1e		 je	 SHORT $LN6@ClassAtom
  00045	0f b6 46 48	 movzx	 eax, BYTE PTR [esi+72]
  00049	8b ce		 mov	 ecx, esi
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?_Do_ffnx@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_ND@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ffnx
  00051	84 c0		 test	 al, al
  00053	74 0e		 je	 SHORT $LN6@ClassAtom
$LN7@ClassAtom:

; 4055 :             _Next();

  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4056 :             return _Prs_chr;

  0005c	b8 01 00 00 00	 mov	 eax, 1
  00061	5e		 pop	 esi

; 4077 :     }
; 4078 : }

  00062	c3		 ret	 0
$LN6@ClassAtom:

; 4057 :         }
; 4058 :         _Val = _Meta_esc;

  00063	c7 46 44 5c 00
	00 00		 mov	 DWORD PTR [esi+68], 92	; 0000005cH

; 4059 :         return _Prs_chr;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	5e		 pop	 esi

; 4077 :     }
; 4078 : }

  00070	c3		 ret	 0
$LN2@ClassAtom:

; 4060 :     } else if (_Mchar == _Meta_lsq) { // check for valid delimited expression

  00071	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00074	75 3e		 jne	 SHORT $LN9@ClassAtom

; 4061 :         _Next();

  00076	57		 push	 edi
  00077	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4062 :         if (_Mchar == _Meta_colon || _Mchar == _Meta_equal || _Mchar == _Meta_dot) { // handle delimited expression

  0007c	8b 7e 4c	 mov	 edi, DWORD PTR [esi+76]
  0007f	83 ff 3a	 cmp	 edi, 58			; 0000003aH
  00082	74 19		 je	 SHORT $LN13@ClassAtom
  00084	83 ff 3d	 cmp	 edi, 61			; 0000003dH
  00087	74 14		 je	 SHORT $LN13@ClassAtom
  00089	83 ff 2e	 cmp	 edi, 46			; 0000002eH
  0008c	74 0f		 je	 SHORT $LN13@ClassAtom

; 4067 :         } else { // handle ordinary [
; 4068 :             _Val = _Meta_lsq;

  0008e	5f		 pop	 edi
  0008f	c7 46 44 5b 00
	00 00		 mov	 DWORD PTR [esi+68], 91	; 0000005bH

; 4069 :             return _Prs_chr;

  00096	b8 01 00 00 00	 mov	 eax, 1
  0009b	5e		 pop	 esi

; 4077 :     }
; 4078 : }

  0009c	c3		 ret	 0
$LN13@ClassAtom:

; 4063 :             _Meta_type _St = _Mchar;
; 4064 :             _Next();

  0009d	8b ce		 mov	 ecx, esi
  0009f	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4065 :             _Do_ex_class(_St);

  000a4	57		 push	 edi
  000a5	8b ce		 mov	 ecx, esi
  000a7	e8 00 00 00 00	 call	 ?_Do_ex_class@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4_Meta_type@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ex_class
  000ac	5f		 pop	 edi

; 4066 :             return _Prs_set;

  000ad	b8 02 00 00 00	 mov	 eax, 2
  000b2	5e		 pop	 esi

; 4077 :     }
; 4078 : }

  000b3	c3		 ret	 0
$LN9@ClassAtom:

; 4070 :         }
; 4071 :     } else if (_Mchar == _Meta_rsq || _Mchar == _Meta_eos) {

  000b4	83 f8 5d	 cmp	 eax, 93			; 0000005dH
  000b7	74 18		 je	 SHORT $LN16@ClassAtom
  000b9	83 f8 ff	 cmp	 eax, -1
  000bc	74 13		 je	 SHORT $LN16@ClassAtom

; 4073 :     } else { // handle ordinary character
; 4074 :         _Val = _Char;

  000be	0f be 46 48	 movsx	 eax, BYTE PTR [esi+72]
  000c2	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 4075 :         _Next();

  000c5	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4076 :         return _Prs_chr;

  000ca	b8 01 00 00 00	 mov	 eax, 1
  000cf	5e		 pop	 esi

; 4077 :     }
; 4078 : }

  000d0	c3		 ret	 0
$LN16@ClassAtom:

; 4072 :         return _Prs_none;

  000d1	33 c0		 xor	 eax, eax
  000d3	5e		 pop	 esi

; 4077 :     }
; 4078 : }

  000d4	c3		 ret	 0
?_ClassAtom@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE?AW4_Prs_ret@2@XZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassAtom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_ClassEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE?AW4_Prs_ret@2@_N@Z
_TEXT	SEGMENT
__Addit$ = 8						; size = 1
?_ClassEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE?AW4_Prs_ret@2@_N@Z PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassEscape, COMDAT
; _this$ = ecx

; 4030 : _Prs_ret _Parser<_FwdIt, _Elem, _RxTraits>::_ClassEscape(bool _Addit) { // check for class escape

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 4031 :     if ((_L_flags & _L_esc_bsl) && _Char == _Esc_bsl) { // handle escape backslash if allowed

  00006	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00009	a9 00 40 00 00	 test	 eax, 16384		; 00004000H
  0000e	74 1c		 je	 SHORT $LN2@ClassEscap
  00010	80 7e 48 5c	 cmp	 BYTE PTR [esi+72], 92	; 0000005cH
  00014	75 16		 jne	 SHORT $LN2@ClassEscap

; 4032 :         _Val = _Esc_bsl;

  00016	c7 46 44 5c 00
	00 00		 mov	 DWORD PTR [esi+68], 92	; 0000005cH

; 4033 :         _Next();

  0001d	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next
$LN7@ClassEscap:

; 4045 : }

  00022	b8 01 00 00 00	 mov	 eax, 1
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN2@ClassEscap:

; 4034 :         return _Prs_chr;
; 4035 :     } else if ((_L_flags & _L_esc_wsd) && _CharacterClassEscape(_Addit)) {

  0002c	a9 00 00 02 00	 test	 eax, 131072		; 00020000H
  00031	74 16		 je	 SHORT $LN4@ClassEscap
  00033	ff 75 08	 push	 DWORD PTR __Addit$[ebp]
  00036	e8 00 00 00 00	 call	 ?_CharacterClassEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_N_N@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterClassEscape
  0003b	84 c0		 test	 al, al
  0003d	74 0a		 je	 SHORT $LN4@ClassEscap

; 4036 :         return _Prs_set;

  0003f	b8 02 00 00 00	 mov	 eax, 2
  00044	5e		 pop	 esi

; 4045 : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN4@ClassEscap:

; 4037 :     } else if (_DecimalDigits(regex_constants::error_escape)) { // check for invalid value

  00049	6a 02		 push	 2
  0004b	8b ce		 mov	 ecx, esi
  0004d	e8 00 00 00 00	 call	 ?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_DecimalDigits
  00052	84 c0		 test	 al, al
  00054	74 08		 je	 SHORT $LN6@ClassEscap

; 4038 :         if (_Val != 0) {

  00056	83 7e 44 00	 cmp	 DWORD PTR [esi+68], 0
  0005a	75 11		 jne	 SHORT $LN17@ClassEscap
  0005c	eb c4		 jmp	 SHORT $LN7@ClassEscap
$LN6@ClassEscap:

; 4040 :         }
; 4041 : 
; 4042 :         return _Prs_chr;
; 4043 :     }
; 4044 :     return _CharacterEscape() ? _Prs_chr : _Prs_none;

  0005e	8b ce		 mov	 ecx, esi
  00060	e8 00 00 00 00	 call	 ?_CharacterEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterEscape
  00065	0f b6 c0	 movzx	 eax, al
  00068	5e		 pop	 esi

; 4045 : }

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
$LN17@ClassEscap:

; 4039 :             _Error(regex_constants::error_escape);

  0006d	6a 02		 push	 2
  0006f	8b ce		 mov	 ecx, esi
  00071	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN15@ClassEscap:
  00076	cc		 int	 3
?_ClassEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE?AW4_Prs_ret@2@_N@Z ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_ClassEscape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_CharacterClassEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_N_N@Z
_TEXT	SEGMENT
__Addit$ = 8						; size = 1
$T1 = 8							; size = 1
?_CharacterClassEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_N_N@Z PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterClassEscape, COMDAT
; _this$ = ecx

; 4013 : bool _Parser<_FwdIt, _Elem, _RxTraits>::_CharacterClassEscape(bool _Addit) { // check for character class escape

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 4014 :     typename _RxTraits::char_class_type _Cls;
; 4015 :     _FwdIt _Ch0 = _Pat;

  00007	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 4016 :     if (_Ch0 == _End || (_Cls = _Traits.lookup_classname(_Pat, ++_Ch0, (_Flags & regex_constants::icase) != 0)) == 0) {

  00009	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0000c	74 5e		 je	 SHORT $LN3@CharacterC

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  0000e	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00011	c1 e8 08	 shr	 eax, 8
  00014	24 01		 and	 al, 1

; 4016 :     if (_Ch0 == _End || (_Cls = _Traits.lookup_classname(_Pat, ++_Ch0, (_Flags & regex_constants::icase) != 0)) == 0) {

  00016	50		 push	 eax
  00017	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  0001f	e8 00 00 00 00	 call	 ??$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z ; std::_Regex_traits<char>::lookup_classname<char const *>
  00024	0f b7 d8	 movzx	 ebx, ax
  00027	66 85 db	 test	 bx, bx
  0002a	74 40		 je	 SHORT $LN3@CharacterC

; 4018 :     }
; 4019 : 
; 4020 :     if (_Addit) {

  0002c	80 7d 08 00	 cmp	 BYTE PTR __Addit$[ebp], 0
  00030	57		 push	 edi
  00031	74 08		 je	 SHORT $LN19@CharacterC

; 4021 :         _Nfa._Add_class();

  00033	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00036	e8 00 00 00 00	 call	 ?_Add_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_class
$LN19@CharacterC:

; 4022 :     }
; 4023 : 
; 4024 :     _Nfa._Add_named_class(_Cls, _Traits.isctype(_Char, _RxTraits::_Ch_upper));

  0003b	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0003e	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2700 :         return (_Ctype._Table[static_cast<unsigned char>(_Ch)] & _Maskval) != 0;

  00041	0f b6 56 48	 movzx	 edx, BYTE PTR [esi+72]
  00045	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00048	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0004b	8a 04 50	 mov	 al, BYTE PTR [eax+edx*2]
  0004e	24 01		 and	 al, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 326  :             return _Getctype()->is(_Fx, _Ch);

  00050	88 45 08	 mov	 BYTE PTR $T1[ebp], al

; 4022 :     }
; 4023 : 
; 4024 :     _Nfa._Add_named_class(_Cls, _Traits.isctype(_Char, _RxTraits::_Ch_upper));

  00053	ff 75 08	 push	 DWORD PTR $T1[ebp]
  00056	53		 push	 ebx
  00057	e8 00 00 00 00	 call	 ?_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXF_N@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_named_class

; 4025 :     _Next();

  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4026 :     return true;

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	b0 01		 mov	 al, 1

; 4027 : }

  00067	5b		 pop	 ebx
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
$LN3@CharacterC:
  0006c	5e		 pop	 esi

; 4017 :         return false;

  0006d	32 c0		 xor	 al, al

; 4027 : }

  0006f	5b		 pop	 ebx
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?_CharacterClassEscape@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_N_N@Z ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_CharacterClassEscape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Do_ex_class@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4_Meta_type@2@@Z
_TEXT	SEGMENT
__Diff$1$ = -4						; size = 4
__End_arg$ = 8						; size = 4
__Beg$1$ = 8						; size = 4
?_Do_ex_class@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4_Meta_type@2@@Z PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ex_class, COMDAT
; _this$ = ecx

; 3972 :     _Meta_type _End_arg) { // handle delimited expressions within bracket expression

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 3973 :     regex_constants::error_type _Errtype = (_End_arg == _Meta_colon   ? regex_constants::error_ctype

  00007	8b 7d 08	 mov	 edi, DWORD PTR __End_arg$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	83 ff 3a	 cmp	 edi, 58			; 0000003aH
  0000f	75 05		 jne	 SHORT $LN19@Do_ex_clas
  00011	8d 5f c7	 lea	 ebx, DWORD PTR [edi-57]
  00014	eb 16		 jmp	 SHORT $LN18@Do_ex_clas
$LN19@Do_ex_clas:
  00016	83 ff 3d	 cmp	 edi, 61			; 0000003dH
  00019	75 04		 jne	 SHORT $LN17@Do_ex_clas
  0001b	33 db		 xor	 ebx, ebx
  0001d	eb 0d		 jmp	 SHORT $LN18@Do_ex_clas
$LN17@Do_ex_clas:
  0001f	33 c0		 xor	 eax, eax
  00021	bb 0e 00 00 00	 mov	 ebx, 14			; 0000000eH
  00026	83 ff 2e	 cmp	 edi, 46			; 0000002eH
  00029	0f 44 d8	 cmove	 ebx, eax
$LN18@Do_ex_clas:

; 3974 :                                             : _End_arg == _Meta_equal ? regex_constants::error_collate
; 3975 :                                             : _End_arg == _Meta_dot   ? regex_constants::error_collate
; 3976 :                                                                       : regex_constants::error_syntax);
; 3977 :     _FwdIt _Beg                          = _Pat;
; 3978 :     _Iter_diff_t<_FwdIt> _Diff           = 0;
; 3979 : 
; 3980 :     while (_Mchar != _Meta_colon && _Mchar != _Meta_equal && _Mchar != _Meta_dot && _Mchar != _Meta_eos) {

  0002c	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  0002f	33 d2		 xor	 edx, edx
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	89 45 08	 mov	 DWORD PTR __Beg$1$[ebp], eax
  00036	89 55 fc	 mov	 DWORD PTR __Diff$1$[ebp], edx
  00039	83 f9 3a	 cmp	 ecx, 58			; 0000003aH
  0003c	74 2b		 je	 SHORT $LN30@Do_ex_clas
  0003e	8b c1		 mov	 eax, ecx
$LL2@Do_ex_clas:
  00040	8b c8		 mov	 ecx, eax
  00042	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  00045	74 22		 je	 SHORT $LN30@Do_ex_clas
  00047	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0004a	74 1d		 je	 SHORT $LN30@Do_ex_clas
  0004c	83 f8 ff	 cmp	 eax, -1
  0004f	74 18		 je	 SHORT $LN30@Do_ex_clas

; 3981 :         // advance to end delimiter
; 3982 :         _Next();

  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 3983 :         ++_Diff;

  00058	8b 55 fc	 mov	 edx, DWORD PTR __Diff$1$[ebp]
  0005b	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  0005e	42		 inc	 edx
  0005f	89 55 fc	 mov	 DWORD PTR __Diff$1$[ebp], edx
  00062	8b c1		 mov	 eax, ecx
  00064	83 f9 3a	 cmp	 ecx, 58			; 0000003aH
  00067	75 d7		 jne	 SHORT $LL2@Do_ex_clas
$LN30@Do_ex_clas:

; 3984 :     }
; 3985 :     if (_Mchar != _End_arg) {

  00069	3b cf		 cmp	 ecx, edi
  0006b	75 7f		 jne	 SHORT $LN45@Do_ex_clas

; 3987 :     } else if (_End_arg == _Meta_colon) { // handle named character class

  0006d	83 ff 3a	 cmp	 edi, 58			; 0000003aH
  00070	75 2c		 jne	 SHORT $LN6@Do_ex_clas

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  00072	8b 46 40	 mov	 eax, DWORD PTR [esi+64]

; 3988 :         typename _RxTraits::char_class_type _Cls =

  00075	8b 4d 08	 mov	 ecx, DWORD PTR __Beg$1$[ebp]

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  00078	c1 e8 08	 shr	 eax, 8
  0007b	24 01		 and	 al, 1

; 3988 :         typename _RxTraits::char_class_type _Cls =

  0007d	50		 push	 eax
  0007e	ff 36		 push	 DWORD PTR [esi]
  00080	51		 push	 ecx
  00081	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00084	e8 00 00 00 00	 call	 ??$lookup_classname@PBD@?$_Regex_traits@D@std@@QBEFPBD0_N@Z ; std::_Regex_traits<char>::lookup_classname<char const *>
  00089	0f b7 c0	 movzx	 eax, ax

; 3989 :             _Traits.lookup_classname(_Beg, _Pat, (_Flags & regex_constants::icase) != 0);
; 3990 :         if (!_Cls) {

  0008c	66 85 c0	 test	 ax, ax
  0008f	74 63		 je	 SHORT $LN46@Do_ex_clas

; 3992 :         }
; 3993 : 
; 3994 :         _Nfa._Add_named_class(_Cls);

  00091	6a 00		 push	 0
  00093	50		 push	 eax
  00094	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00097	e8 00 00 00 00	 call	 ?_Add_named_class@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXF_N@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_named_class
  0009c	eb 34		 jmp	 SHORT $LN15@Do_ex_clas
$LN6@Do_ex_clas:

; 3995 :     } else if (_End_arg == _Meta_equal) { // process =

  0009e	83 ff 3d	 cmp	 edi, 61			; 0000003dH
  000a1	75 16		 jne	 SHORT $LN9@Do_ex_clas

; 3996 :         if (_Beg == _Pat) {

  000a3	8b 06		 mov	 eax, DWORD PTR [esi]
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR __Beg$1$[ebp]
  000a8	3b c8		 cmp	 ecx, eax
  000aa	74 51		 je	 SHORT $LN28@Do_ex_clas

; 3997 :             _Error(regex_constants::error_collate);
; 3998 :         } else {
; 3999 :             _Nfa._Add_equiv(_Beg, _Pat, _Diff);

  000ac	52		 push	 edx
  000ad	50		 push	 eax
  000ae	51		 push	 ecx
  000af	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  000b2	e8 00 00 00 00	 call	 ?_Add_equiv@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_equiv

; 4000 :         }

  000b7	eb 19		 jmp	 SHORT $LN15@Do_ex_clas
$LN9@Do_ex_clas:

; 4001 :     } else if (_End_arg == _Meta_dot) { // process .

  000b9	83 ff 2e	 cmp	 edi, 46			; 0000002eH
  000bc	75 14		 jne	 SHORT $LN15@Do_ex_clas

; 4002 :         if (_Beg == _Pat) {

  000be	8b 06		 mov	 eax, DWORD PTR [esi]
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR __Beg$1$[ebp]
  000c3	3b c8		 cmp	 ecx, eax
  000c5	74 36		 je	 SHORT $LN28@Do_ex_clas

; 4004 :         } else {
; 4005 :             _Nfa._Add_coll(_Beg, _Pat, _Diff);

  000c7	52		 push	 edx
  000c8	50		 push	 eax
  000c9	51		 push	 ecx
  000ca	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  000cd	e8 00 00 00 00	 call	 ?_Add_coll@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPBD0H@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Add_coll
$LN15@Do_ex_clas:

; 4006 :         }
; 4007 :     }
; 4008 :     _Next();

  000d2	8b ce		 mov	 ecx, esi
  000d4	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 4009 :     _Expect(_Meta_rsq, _Errtype);

  000d9	53		 push	 ebx
  000da	6a 5d		 push	 93			; 0000005dH
  000dc	8b ce		 mov	 ecx, esi
  000de	e8 00 00 00 00	 call	 ?_Expect@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4_Meta_type@2@W4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Expect

; 4010 : }

  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 04 00	 ret	 4
$LN45@Do_ex_clas:

; 3986 :         _Error(_Errtype);

  000ec	53		 push	 ebx
  000ed	8b ce		 mov	 ecx, esi
  000ef	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN46@Do_ex_clas:

; 3991 :             _Error(regex_constants::error_ctype);

  000f4	6a 01		 push	 1
  000f6	8b ce		 mov	 ecx, esi
  000f8	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN28@Do_ex_clas:

; 4003 :             _Error(regex_constants::error_collate);

  000fd	6a 00		 push	 0
  000ff	8b ce		 mov	 ecx, esi
  00101	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN43@Do_ex_clas:
  00106	cc		 int	 3
?_Do_ex_class@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4_Meta_type@2@@Z ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_ex_class
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_OctalDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ
_TEXT	SEGMENT
?_OctalDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_OctalDigits, COMDAT
; _this$ = ecx

; 3967 :     return _Do_digits(8, 3, regex_constants::error_escape) != 3;

  00000	6a 02		 push	 2
  00002	6a 03		 push	 3
  00004	6a 08		 push	 8
  00006	e8 00 00 00 00	 call	 ?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEHHHW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_digits
  0000b	83 f8 03	 cmp	 eax, 3
  0000e	0f 95 c0	 setne	 al

; 3968 : }

  00011	c3		 ret	 0
?_OctalDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_OctalDigits
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_HexDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXH@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_HexDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXH@Z PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_HexDigits, COMDAT
; _this$ = ecx

; 3959 : void _Parser<_FwdIt, _Elem, _RxTraits>::_HexDigits(int _Count) { // check for _Count hex digits

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3960 :     if (_Do_digits(16, _Count, regex_constants::error_escape) != 0) {

  00004	6a 02		 push	 2
  00006	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	6a 10		 push	 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEHHHW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_digits
  00012	85 c0		 test	 eax, eax
  00014	75 05		 jne	 SHORT $LN7@HexDigits
  00016	5e		 pop	 esi

; 3962 :     }
; 3963 : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN7@HexDigits:

; 3961 :         _Error(regex_constants::error_escape);

  0001b	6a 02		 push	 2
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN5@HexDigits:
  00024	cc		 int	 3
?_HexDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXH@Z ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_HexDigits
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NW4error_type@regex_constants@2@@Z
_TEXT	SEGMENT
__Error_type$ = 8					; size = 4
?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NW4error_type@regex_constants@2@@Z PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_DecimalDigits, COMDAT
; _this$ = ecx

; 3954 :     regex_constants::error_type _Error_type) { // check for decimal value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3955 :     return _Do_digits(10, INT_MAX, _Error_type) != INT_MAX;

  00003	ff 75 08	 push	 DWORD PTR __Error_type$[ebp]
  00006	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  0000b	6a 0a		 push	 10			; 0000000aH
  0000d	e8 00 00 00 00	 call	 ?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEHHHW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_digits
  00012	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00017	0f 95 c0	 setne	 al

; 3956 : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_DecimalDigits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAE_NW4error_type@regex_constants@2@@Z ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_DecimalDigits
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEHHHW4error_type@regex_constants@2@@Z
_TEXT	SEGMENT
__Base$ = 8						; size = 4
__Count$ = 12						; size = 4
__Error_type$ = 16					; size = 4
?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEHHHW4error_type@regex_constants@2@@Z PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_digits, COMDAT
; _this$ = ecx

; 3937 :     int _Base, int _Count, regex_constants::error_type _Error_type) { // translate digits to numeric value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3938 :     int _Chv;
; 3939 :     _Val = 0;
; 3940 :     while (_Count != 0 && (_Chv = _Traits.value(_Char, _Base)) != -1) { // append next digit

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	c7 47 44 00 00
	00 00		 mov	 DWORD PTR [edi+68], 0
  00010	85 d2		 test	 edx, edx
  00012	74 7f		 je	 SHORT $LN3@Do_digits
  00014	53		 push	 ebx
  00015	8b 5d 08	 mov	 ebx, DWORD PTR __Base$[ebp]
  00018	56		 push	 esi
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@Do_digits:
  00020	8a 4f 48	 mov	 cl, BYTE PTR [edi+72]

; 419  :         if ((_Base != 8 && '0' <= _Ch && _Ch <= '9') || (_Base == 8 && '0' <= _Ch && _Ch <= '7')) {

  00023	83 fb 08	 cmp	 ebx, 8
  00026	74 2d		 je	 SHORT $LN19@Do_digits
  00028	80 f9 30	 cmp	 cl, 48			; 00000030H
  0002b	7c 05		 jl	 SHORT $LN7@Do_digits
  0002d	80 f9 39	 cmp	 cl, 57			; 00000039H
  00030	7e 2a		 jle	 SHORT $LN8@Do_digits
$LN7@Do_digits:

; 421  :         }
; 422  : 
; 423  :         if (_Base != 16) {

  00032	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00035	75 5a		 jne	 SHORT $LN32@Do_digits

; 424  :             return -1;
; 425  :         }
; 426  : 
; 427  :         if ('a' <= _Ch && _Ch <= 'f') {

  00037	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  0003a	3c 05		 cmp	 al, 5
  0003c	77 08		 ja	 SHORT $LN11@Do_digits

; 428  :             return _Ch - 'a' + 10;

  0003e	0f be c9	 movsx	 ecx, cl
  00041	83 e9 57	 sub	 ecx, 87			; 00000057H
  00044	eb 1c		 jmp	 SHORT $LN6@Do_digits
$LN11@Do_digits:

; 429  :         }
; 430  : 
; 431  :         if ('A' <= _Ch && _Ch <= 'F') {

  00046	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  00049	3c 05		 cmp	 al, 5
  0004b	77 44		 ja	 SHORT $LN32@Do_digits

; 432  :             return _Ch - 'A' + 10;

  0004d	0f be c9	 movsx	 ecx, cl
  00050	83 e9 37	 sub	 ecx, 55			; 00000037H
  00053	eb 0d		 jmp	 SHORT $LN6@Do_digits
$LN19@Do_digits:

; 419  :         if ((_Base != 8 && '0' <= _Ch && _Ch <= '9') || (_Base == 8 && '0' <= _Ch && _Ch <= '7')) {

  00055	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00058	3c 07		 cmp	 al, 7
  0005a	77 35		 ja	 SHORT $LN32@Do_digits
$LN8@Do_digits:

; 420  :             return _Ch - '0';

  0005c	0f be c9	 movsx	 ecx, cl
  0005f	83 e9 30	 sub	 ecx, 48			; 00000030H
$LN6@Do_digits:

; 3938 :     int _Chv;
; 3939 :     _Val = 0;
; 3940 :     while (_Count != 0 && (_Chv = _Traits.value(_Char, _Base)) != -1) { // append next digit

  00062	83 f9 ff	 cmp	 ecx, -1
  00065	74 2a		 je	 SHORT $LN32@Do_digits

; 3941 :         if (_Val > (INT_MAX - _Chv) / _Base) {

  00067	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0006c	8b 77 44	 mov	 esi, DWORD PTR [edi+68]
  0006f	2b c1		 sub	 eax, ecx
  00071	99		 cdq
  00072	f7 fb		 idiv	 ebx
  00074	3b f0		 cmp	 esi, eax
  00076	7f 22		 jg	 SHORT $LN15@Do_digits

; 3943 :         }
; 3944 :         --_Count;

  00078	ff 4d 0c	 dec	 DWORD PTR __Count$[ebp]

; 3945 :         _Val *= _Base;

  0007b	0f af f3	 imul	 esi, ebx

; 3946 :         _Val += _Chv;

  0007e	03 f1		 add	 esi, ecx

; 3947 :         _Next();

  00080	8b cf		 mov	 ecx, edi
  00082	89 77 44	 mov	 DWORD PTR [edi+68], esi
  00085	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next
  0008a	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  0008d	85 d2		 test	 edx, edx
  0008f	75 8f		 jne	 SHORT $LL2@Do_digits
$LN32@Do_digits:
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
$LN3@Do_digits:

; 3948 :     }
; 3949 :     return _Count;

  00093	8b c2		 mov	 eax, edx
  00095	5f		 pop	 edi

; 3950 : }

  00096	5d		 pop	 ebp
  00097	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Do_digits:

; 3942 :             _Error(_Error_type);

  0009a	ff 75 10	 push	 DWORD PTR __Error_type$[ebp]
  0009d	8b cf		 mov	 ecx, edi
  0009f	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN33@Do_digits:
  000a4	cc		 int	 3
?_Do_digits@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEHHHW4error_type@regex_constants@2@@Z ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Do_digits
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Expect@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4_Meta_type@2@W4error_type@regex_constants@2@@Z
_TEXT	SEGMENT
__St$ = 8						; size = 4
__Code$ = 12						; size = 4
?_Expect@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4_Meta_type@2@W4error_type@regex_constants@2@@Z PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Expect, COMDAT
; _this$ = ecx

; 3926 : void _Parser<_FwdIt, _Elem, _RxTraits>::_Expect(_Meta_type _St, regex_constants::error_type _Code) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3927 :     // check whether current meta-character is _St
; 3928 :     if (_Mchar != _St) {

  00003	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00006	3b 45 08	 cmp	 eax, DWORD PTR __St$[ebp]
  00009	75 09		 jne	 SHORT $LN6@Expect

; 3930 :     }
; 3931 : 
; 3932 :     _Next();

  0000b	e8 00 00 00 00	 call	 ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next

; 3933 : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
$LN6@Expect:

; 3929 :         _Error(_Code);

  00014	ff 75 0c	 push	 DWORD PTR __Code$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN4@Expect:
  0001c	cc		 int	 3
?_Expect@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4_Meta_type@2@W4error_type@regex_constants@2@@Z ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Expect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next, COMDAT
; _this$ = ecx

; 3914 : void _Parser<_FwdIt, _Elem, _RxTraits>::_Next() { // advance to next input character

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 3915 :     if (_Pat != _End) { // advance

  00004	8b 3e		 mov	 edi, DWORD PTR [esi]
  00006	3b 7e 08	 cmp	 edi, DWORD PTR [esi+8]
  00009	74 1a		 je	 SHORT $LN2@Next

; 3916 :         if (*_Pat == _Meta_esc && _Is_esc()) {

  0000b	80 3f 5c	 cmp	 BYTE PTR [edi], 92	; 0000005cH
  0000e	53		 push	 ebx
  0000f	8b df		 mov	 ebx, edi
  00011	75 0c		 jne	 SHORT $LN3@Next
  00013	e8 00 00 00 00	 call	 ?_Is_esc@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@ABE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Is_esc
  00018	84 c0		 test	 al, al
  0001a	74 03		 je	 SHORT $LN3@Next

; 3917 :             ++_Pat;

  0001c	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
$LN3@Next:

; 3918 :         }
; 3919 : 
; 3920 :         ++_Pat;

  0001f	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00022	89 06		 mov	 DWORD PTR [esi], eax
  00024	5b		 pop	 ebx
$LN2@Next:

; 3921 :     }
; 3922 :     _Trans();

  00025	5f		 pop	 edi
  00026	8b ce		 mov	 ecx, esi
  00028	5e		 pop	 esi
  00029	e9 00 00 00 00	 jmp	 ?_Trans@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Trans
?_Next@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Next
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Trans@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Trans@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Trans, COMDAT
; _this$ = ecx

; 3826 : void _Parser<_FwdIt, _Elem, _RxTraits>::_Trans() { // map character to meta-character

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 3827 :     static constexpr char _Meta_map[] = {_Meta_lpar, _Meta_rpar, _Meta_dlr, _Meta_caret, _Meta_dot, _Meta_star,
; 3828 :         _Meta_plus, _Meta_query, _Meta_lsq, _Meta_rsq, _Meta_bar, _Meta_esc, _Meta_dash, _Meta_lbr, _Meta_rbr,
; 3829 :         _Meta_comma, _Meta_colon, _Meta_equal, _Meta_exc, _Meta_nl, _Meta_cr, _Meta_bsp, 0}; // array of meta chars
; 3830 : 
; 3831 :     if (_Pat == _End) {

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00008	75 0b		 jne	 SHORT $LN4@Trans

; 3832 :         _Mchar = _Meta_eos;
; 3833 :         _Char  = static_cast<_Elem>(_Meta_eos);

  0000a	83 c8 ff	 or	 eax, -1
  0000d	c6 46 48 ff	 mov	 BYTE PTR [esi+72], -1
  00011	0a c8		 or	 cl, al

; 3834 :     } else { // map current character

  00013	eb 24		 jmp	 SHORT $LN30@Trans
$LN4@Trans:

; 3835 :         _Char  = *_Pat;

  00015	8a 00		 mov	 al, BYTE PTR [eax]
  00017	88 46 48	 mov	 BYTE PTR [esi+72], al

; 3836 :         _Mchar = _CSTD strchr(_Meta_map, _Char) ? static_cast<_Meta_type>(_Char) : _Meta_chr;

  0001a	0f be c0	 movsx	 eax, al
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ?_Meta_map@?1??_Trans@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ@4QBDB ; `std::_Parser<char const *,char,std::regex_traits<char> >::_Trans'::`2'::_Meta_map
  00023	e8 00 00 00 00	 call	 _strchr
  00028	8a 4e 48	 mov	 cl, BYTE PTR [esi+72]
  0002b	83 c4 08	 add	 esp, 8
  0002e	85 c0		 test	 eax, eax
  00030	74 05		 je	 SHORT $LN29@Trans
  00032	0f be c1	 movsx	 eax, cl
  00035	eb 02		 jmp	 SHORT $LN30@Trans
$LN29@Trans:
  00037	33 c0		 xor	 eax, eax
$LN30@Trans:

; 3837 :     }
; 3838 :     switch (_Char) { // handle special cases

  00039	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  0003c	0f be c1	 movsx	 eax, cl
  0003f	83 c0 f6	 add	 eax, -10		; fffffff6H
  00042	83 f8 73	 cmp	 eax, 115		; 00000073H
  00045	0f 87 b7 00 00
	00		 ja	 $LN26@Trans
  0004b	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN31@Trans[eax]
  00052	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN32@Trans[eax*4]
$LN6@Trans:

; 3839 :     case _Meta_esc:
; 3840 :         if (_Is_esc()) { // replace escape sequence

  00059	8b ce		 mov	 ecx, esi
  0005b	e8 00 00 00 00	 call	 ?_Is_esc@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@ABE_NXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Is_esc
  00060	84 c0		 test	 al, al
  00062	0f 84 9a 00 00
	00		 je	 $LN26@Trans

; 3841 :             _FwdIt _Ch0 = _Pat;
; 3842 :             _Mchar      = static_cast<_Meta_type>(_Char = *++_Ch0);

  00068	8b 06		 mov	 eax, DWORD PTR [esi]
  0006a	8a 40 01	 mov	 al, BYTE PTR [eax+1]
  0006d	88 46 48	 mov	 BYTE PTR [esi+72], al
  00070	0f be c0	 movsx	 eax, al
  00073	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00076	5e		 pop	 esi

; 3903 :             _Mchar = _Meta_chr;
; 3904 :         }
; 3905 : 
; 3906 :         break;
; 3907 : 
; 3908 :     default:
; 3909 :         break;
; 3910 :     }
; 3911 : }

  00077	c3		 ret	 0
$LN8@Trans:

; 3843 :         }
; 3844 :         break;
; 3845 : 
; 3846 :     case _Meta_nl:
; 3847 :         if ((_L_flags & _L_alt_nl) && _Disj_count == 0) {

  00078	f6 46 50 04	 test	 BYTE PTR [esi+80], 4
  0007c	0f 84 80 00 00
	00		 je	 $LN26@Trans
  00082	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00086	75 7a		 jne	 SHORT $LN26@Trans

; 3848 :             _Mchar = _Meta_bar;

  00088	c7 46 4c 7c 00
	00 00		 mov	 DWORD PTR [esi+76], 124	; 0000007cH
  0008f	5e		 pop	 esi

; 3903 :             _Mchar = _Meta_chr;
; 3904 :         }
; 3905 : 
; 3906 :         break;
; 3907 : 
; 3908 :     default:
; 3909 :         break;
; 3910 :     }
; 3911 : }

  00090	c3		 ret	 0
$LN10@Trans:

; 3849 :         }
; 3850 : 
; 3851 :         break;
; 3852 : 
; 3853 :     case _Meta_lpar:
; 3854 :     case _Meta_rpar:
; 3855 :         if (!(_L_flags & _L_nex_grp)) {

  00091	f6 46 50 08	 test	 BYTE PTR [esi+80], 8

; 3856 :             _Mchar = _Meta_chr;
; 3857 :         }
; 3858 : 
; 3859 :         break;

  00095	eb 62		 jmp	 SHORT $LN50@Trans
$LN13@Trans:

; 3860 : 
; 3861 :     case _Meta_lbr:
; 3862 :     case _Meta_rbr:
; 3863 :         if (!(_L_flags & _L_nex_rep)) {

  00097	f6 46 50 10	 test	 BYTE PTR [esi+80], 16	; 00000010H

; 3864 :             _Mchar = _Meta_chr;
; 3865 :         }
; 3866 : 
; 3867 :         break;

  0009b	eb 5c		 jmp	 SHORT $LN50@Trans
$LN16@Trans:

; 3868 : 
; 3869 :     case _Meta_star:
; 3870 :         if ((_L_flags & _L_star_beg) && _Nfa._Beg_expr()) {

  0009d	f7 46 50 00 00
	00 04		 test	 DWORD PTR [esi+80], 67108864 ; 04000000H
  000a4	74 5c		 je	 SHORT $LN26@Trans
  000a6	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  000a9	e8 00 00 00 00	 call	 ?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QBE_NXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Beg_expr
  000ae	84 c0		 test	 al, al
  000b0	74 50		 je	 SHORT $LN26@Trans

; 3903 :             _Mchar = _Meta_chr;
; 3904 :         }
; 3905 : 
; 3906 :         break;
; 3907 : 
; 3908 :     default:
; 3909 :         break;
; 3910 :     }
; 3911 : }

  000b2	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  000b9	5e		 pop	 esi
  000ba	c3		 ret	 0
$LN18@Trans:

; 3871 :             _Mchar = _Meta_chr;
; 3872 :         }
; 3873 : 
; 3874 :         break;
; 3875 : 
; 3876 :     case _Meta_caret:
; 3877 :         if ((_L_flags & _L_anch_rstr) && !_Nfa._Beg_expr()) {

  000bb	f7 46 50 00 00
	00 02		 test	 DWORD PTR [esi+80], 33554432 ; 02000000H
  000c2	74 3e		 je	 SHORT $LN26@Trans
  000c4	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  000c7	e8 00 00 00 00	 call	 ?_Beg_expr@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QBE_NXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Beg_expr
  000cc	84 c0		 test	 al, al

; 3878 :             _Mchar = _Meta_chr;
; 3879 :         }
; 3880 : 
; 3881 :         break;

  000ce	eb 29		 jmp	 SHORT $LN50@Trans
$LN20@Trans:

; 3882 : 
; 3883 :     case _Meta_dlr:
; 3884 :         { // check if $ is special
; 3885 :             _FwdIt _Ch0 = _Pat;
; 3886 :             if ((_L_flags & _L_anch_rstr) && ++_Ch0 != _End && *_Ch0 != _Meta_nl) {

  000d0	f7 46 50 00 00
	00 02		 test	 DWORD PTR [esi+80], 33554432 ; 02000000H
  000d7	74 29		 je	 SHORT $LN26@Trans
  000d9	8b 06		 mov	 eax, DWORD PTR [esi]
  000db	40		 inc	 eax
  000dc	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  000df	74 21		 je	 SHORT $LN26@Trans
  000e1	80 38 0a	 cmp	 BYTE PTR [eax], 10	; 0000000aH
  000e4	74 1c		 je	 SHORT $LN26@Trans

; 3903 :             _Mchar = _Meta_chr;
; 3904 :         }
; 3905 : 
; 3906 :         break;
; 3907 : 
; 3908 :     default:
; 3909 :         break;
; 3910 :     }
; 3911 : }

  000e6	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  000ed	5e		 pop	 esi
  000ee	c3		 ret	 0
$LN22@Trans:

; 3887 :                 _Mchar = _Meta_chr;
; 3888 :             }
; 3889 : 
; 3890 :             break;
; 3891 :         }
; 3892 : 
; 3893 :     case _Meta_plus:
; 3894 :     case _Meta_query:
; 3895 :         if (!(_L_flags & _L_ext_rep)) {

  000ef	f6 46 50 01	 test	 BYTE PTR [esi+80], 1

; 3896 :             _Mchar = _Meta_chr;
; 3897 :         }
; 3898 : 
; 3899 :         break;

  000f3	eb 04		 jmp	 SHORT $LN50@Trans
$LN25@Trans:

; 3900 : 
; 3901 :     case _Meta_bar:
; 3902 :         if (!(_L_flags & _L_alt_pipe)) {

  000f5	f6 46 50 02	 test	 BYTE PTR [esi+80], 2
$LN50@Trans:

; 3903 :             _Mchar = _Meta_chr;
; 3904 :         }
; 3905 : 
; 3906 :         break;
; 3907 : 
; 3908 :     default:
; 3909 :         break;
; 3910 :     }
; 3911 : }

  000f9	75 07		 jne	 SHORT $LN26@Trans
  000fb	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
$LN26@Trans:
  00102	5e		 pop	 esi
  00103	c3		 ret	 0
$LN32@Trans:
  00104	00 00 00 00	 DD	 $LN8@Trans
  00108	00 00 00 00	 DD	 $LN20@Trans
  0010c	00 00 00 00	 DD	 $LN10@Trans
  00110	00 00 00 00	 DD	 $LN16@Trans
  00114	00 00 00 00	 DD	 $LN22@Trans
  00118	00 00 00 00	 DD	 $LN6@Trans
  0011c	00 00 00 00	 DD	 $LN18@Trans
  00120	00 00 00 00	 DD	 $LN13@Trans
  00124	00 00 00 00	 DD	 $LN25@Trans
  00128	00 00 00 00	 DD	 $LN26@Trans
$LN31@Trans:
  0012c	00		 DB	 0
  0012d	09		 DB	 9
  0012e	09		 DB	 9
  0012f	09		 DB	 9
  00130	09		 DB	 9
  00131	09		 DB	 9
  00132	09		 DB	 9
  00133	09		 DB	 9
  00134	09		 DB	 9
  00135	09		 DB	 9
  00136	09		 DB	 9
  00137	09		 DB	 9
  00138	09		 DB	 9
  00139	09		 DB	 9
  0013a	09		 DB	 9
  0013b	09		 DB	 9
  0013c	09		 DB	 9
  0013d	09		 DB	 9
  0013e	09		 DB	 9
  0013f	09		 DB	 9
  00140	09		 DB	 9
  00141	09		 DB	 9
  00142	09		 DB	 9
  00143	09		 DB	 9
  00144	09		 DB	 9
  00145	09		 DB	 9
  00146	01		 DB	 1
  00147	09		 DB	 9
  00148	09		 DB	 9
  00149	09		 DB	 9
  0014a	02		 DB	 2
  0014b	02		 DB	 2
  0014c	03		 DB	 3
  0014d	04		 DB	 4
  0014e	09		 DB	 9
  0014f	09		 DB	 9
  00150	09		 DB	 9
  00151	09		 DB	 9
  00152	09		 DB	 9
  00153	09		 DB	 9
  00154	09		 DB	 9
  00155	09		 DB	 9
  00156	09		 DB	 9
  00157	09		 DB	 9
  00158	09		 DB	 9
  00159	09		 DB	 9
  0015a	09		 DB	 9
  0015b	09		 DB	 9
  0015c	09		 DB	 9
  0015d	09		 DB	 9
  0015e	09		 DB	 9
  0015f	09		 DB	 9
  00160	09		 DB	 9
  00161	04		 DB	 4
  00162	09		 DB	 9
  00163	09		 DB	 9
  00164	09		 DB	 9
  00165	09		 DB	 9
  00166	09		 DB	 9
  00167	09		 DB	 9
  00168	09		 DB	 9
  00169	09		 DB	 9
  0016a	09		 DB	 9
  0016b	09		 DB	 9
  0016c	09		 DB	 9
  0016d	09		 DB	 9
  0016e	09		 DB	 9
  0016f	09		 DB	 9
  00170	09		 DB	 9
  00171	09		 DB	 9
  00172	09		 DB	 9
  00173	09		 DB	 9
  00174	09		 DB	 9
  00175	09		 DB	 9
  00176	09		 DB	 9
  00177	09		 DB	 9
  00178	09		 DB	 9
  00179	09		 DB	 9
  0017a	09		 DB	 9
  0017b	09		 DB	 9
  0017c	09		 DB	 9
  0017d	09		 DB	 9
  0017e	05		 DB	 5
  0017f	09		 DB	 9
  00180	06		 DB	 6
  00181	09		 DB	 9
  00182	09		 DB	 9
  00183	09		 DB	 9
  00184	09		 DB	 9
  00185	09		 DB	 9
  00186	09		 DB	 9
  00187	09		 DB	 9
  00188	09		 DB	 9
  00189	09		 DB	 9
  0018a	09		 DB	 9
  0018b	09		 DB	 9
  0018c	09		 DB	 9
  0018d	09		 DB	 9
  0018e	09		 DB	 9
  0018f	09		 DB	 9
  00190	09		 DB	 9
  00191	09		 DB	 9
  00192	09		 DB	 9
  00193	09		 DB	 9
  00194	09		 DB	 9
  00195	09		 DB	 9
  00196	09		 DB	 9
  00197	09		 DB	 9
  00198	09		 DB	 9
  00199	09		 DB	 9
  0019a	09		 DB	 9
  0019b	09		 DB	 9
  0019c	09		 DB	 9
  0019d	07		 DB	 7
  0019e	08		 DB	 8
  0019f	07		 DB	 7
?_Trans@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Trans
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Is_esc@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
?_Is_esc@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@ABE_NXZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Is_esc, COMDAT
; _this$ = ecx

; 3819 :     _FwdIt _Ch0 = _Pat;
; 3820 :     return ++_Ch0 != _End

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	40		 inc	 eax
  00003	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00006	74 26		 je	 SHORT $LN7@Is_esc
  00008	8b 49 50	 mov	 ecx, DWORD PTR [ecx+80]
  0000b	f6 c1 08	 test	 cl, 8
  0000e	75 0c		 jne	 SHORT $LN10@Is_esc
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	80 fa 28	 cmp	 dl, 40			; 00000028H
  00015	74 14		 je	 SHORT $LN3@Is_esc
  00017	80 fa 29	 cmp	 dl, 41			; 00000029H
  0001a	74 0f		 je	 SHORT $LN3@Is_esc
$LN10@Is_esc:
  0001c	f6 c1 10	 test	 cl, 16			; 00000010H
  0001f	75 0d		 jne	 SHORT $LN7@Is_esc
  00021	8a 00		 mov	 al, BYTE PTR [eax]
  00023	3c 7b		 cmp	 al, 123			; 0000007bH
  00025	74 04		 je	 SHORT $LN3@Is_esc
  00027	3c 7d		 cmp	 al, 125			; 0000007dH
  00029	75 03		 jne	 SHORT $LN7@Is_esc
$LN3@Is_esc:
  0002b	b0 01		 mov	 al, 1

; 3821 :         && ((!(_L_flags & _L_nex_grp) && (*_Ch0 == _Meta_lpar || *_Ch0 == _Meta_rpar))
; 3822 :             || (!(_L_flags & _L_nex_rep) && (*_Ch0 == _Meta_lbr || *_Ch0 == _Meta_rbr)));
; 3823 : }

  0002d	c3		 ret	 0
$LN7@Is_esc:

; 3819 :     _FwdIt _Ch0 = _Pat;
; 3820 :     return ++_Ch0 != _End

  0002e	32 c0		 xor	 al, al

; 3821 :         && ((!(_L_flags & _L_nex_grp) && (*_Ch0 == _Meta_lpar || *_Ch0 == _Meta_rpar))
; 3822 :             || (!(_L_flags & _L_nex_rep) && (*_Ch0 == _Meta_lbr || *_Ch0 == _Meta_rbr)));
; 3823 : }

  00030	c3		 ret	 0
?_Is_esc@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@ABE_NXZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Is_esc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z
_TEXT	SEGMENT
__Code$ = 8						; size = 4
?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error, COMDAT
; _this$ = ecx

; 3813 : void _Parser<_FwdIt, _Elem, _RxTraits>::_Error(regex_constants::error_type _Code) { // handle error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3814 :     _Xregex_error(_Code);

  00003	ff 75 08	 push	 DWORD PTR __Code$[ebp]
  00006	e8 00 00 00 00	 call	 ?_Xregex_error@std@@YAXW4error_type@regex_constants@1@@Z ; std::_Xregex_error
$LN3@Error:
  0000b	cc		 int	 3
?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Compile@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ
_TEXT	SEGMENT
__Guard$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Compile@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Compile, COMDAT
; _this$ = ecx

; 4547 : _Root_node* _Parser<_FwdIt, _Elem, _RxTraits>::_Compile() { // compile regular expression

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Compile@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx

; 4548 :     _Root_node* _Res = nullptr;
; 4549 :     _Tidy_guard<decltype(_Nfa)> _Guard{_STD addressof(_Nfa)};

  00028	8d 77 24	 lea	 esi, DWORD PTR [edi+36]
  0002b	89 75 f0	 mov	 DWORD PTR __Guard$[ebp], esi

; 4550 :     _Node_base* _Pos1 = _Nfa._Begin_capture_group(0);

  0002e	6a 00		 push	 0
  00030	8b ce		 mov	 ecx, esi
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	e8 00 00 00 00	 call	 ?_Begin_capture_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Node_base@2@I@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Begin_capture_group

; 4551 :     _Disjunction();

  0003e	8b cf		 mov	 ecx, edi
  00040	8b d8		 mov	 ebx, eax
  00042	e8 00 00 00 00	 call	 ?_Disjunction@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Disjunction

; 4552 :     if (_Pat != _End) {

  00047	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00049	3b 4f 08	 cmp	 ecx, DWORD PTR [edi+8]
  0004c	75 3f		 jne	 SHORT $LN15@Compile

; 4554 :     }
; 4555 : 
; 4556 :     _Nfa._End_group(_Pos1);

  0004e	53		 push	 ebx
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?_End_group@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXPAV_Node_base@2@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_group

; 4557 :     _Res         = _Nfa._End_pattern();

  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?_End_pattern@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_End_pattern

; 4558 :     _Res->_Fl    = _Flags;

  0005d	8b 4f 40	 mov	 ecx, DWORD PTR [edi+64]
  00060	8b f0		 mov	 esi, eax

; 4560 :     _Calculate_loop_simplicity(_Res, nullptr, nullptr);

  00062	6a 00		 push	 0
  00064	6a 00		 push	 0
  00066	56		 push	 esi
  00067	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 1694 :         return _Grp_idx + 1;

  0006a	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0006d	41		 inc	 ecx

; 4559 :     _Res->_Marks = _Mark_count();

  0006e	89 4e 1c	 mov	 DWORD PTR [esi+28], ecx

; 4560 :     _Calculate_loop_simplicity(_Res, nullptr, nullptr);

  00071	e8 00 00 00 00	 call	 ?_Calculate_loop_simplicity@std@@YAXPAV_Node_base@1@0PAV_Node_rep@1@@Z ; std::_Calculate_loop_simplicity
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4561 :     _Guard._Target = nullptr;
; 4562 :     return _Res;

  00079	8b c6		 mov	 eax, esi

; 4563 : }

  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
$LN15@Compile:

; 4553 :         _Error(regex_constants::error_syntax);

  0008d	6a 0e		 push	 14			; 0000000eH
  0008f	8b cf		 mov	 ecx, edi
  00091	e8 00 00 00 00	 call	 ?_Error@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXW4error_type@regex_constants@2@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Error
$LN13@Compile:
  00096	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Compile@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ$0:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR __Guard$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$_Builder@PBDDV?$regex_traits@D@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::_Builder<char const *,char,std::regex_traits<char> > >::~_Tidy_guard<std::_Builder<char const *,char,std::regex_traits<char> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?_Compile@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Compile@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Compile@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Compile
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??0?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@PBD1W4syntax_option_type@regex_constants@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Tr$ = 8						; size = 4
__Pfirst$ = 12						; size = 4
__Plast$ = 16						; size = 4
__Fx$ = 20						; size = 4
??0?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@PBD1W4syntax_option_type@regex_constants@1@@Z PROC ; std::_Parser<char const *,char,std::regex_traits<char> >::_Parser<char const *,char,std::regex_traits<char> >, COMDAT
; _this$ = ecx

; 4568 :     : _Pat(_Pfirst), _Begin(_Pfirst), _End(_Plast), _Nfa(_Tr, _Fx), _Traits(_Tr), _Flags(_Fx) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@PBD1W4syntax_option_type@regex_constants@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  0002e	89 07		 mov	 DWORD PTR [edi], eax
  00030	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00033	8b 45 10	 mov	 eax, DWORD PTR __Plast$[ebp]
  00036	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 117  : 
; 118  :     _EXPORT_STD enum match_flag_type : int { // specify matching and formatting rules
; 119  :         match_default     = 0x0000,
; 120  :         match_not_bol     = 0x0001,
; 121  :         match_not_eol     = 0x0002,
; 122  :         match_not_bow     = 0x0004,
; 123  :         match_not_eow     = 0x0008,
; 124  :         match_any         = 0x0010,
; 125  :         match_not_null    = 0x0020,
; 126  :         match_continuous  = 0x0040,
; 127  :         match_prev_avail  = 0x0100,
; 128  :         format_default    = 0x0000,
; 129  :         format_sed        = 0x0400,
; 130  :         format_no_copy    = 0x0800,
; 131  :         format_first_only = 0x1000,
; 132  :         _Match_not_null   = 0x2000,
; 133  :         _Skip_zero_length = 0x4000,
; 134  :     };
; 135  : 
; 136  :     _BITMASK_OPS(_EXPORT_STD, match_flag_type)
; 137  : 
; 138  :     _EXPORT_STD enum error_type { // identify error
; 139  :         error_collate,
; 140  :         error_ctype,
; 141  :         error_escape,
; 142  :         error_backref,
; 143  :         error_brack,
; 144  :         error_paren,
; 145  :         error_brace,
; 146  :         error_badbrace,
; 147  :         error_range,
; 148  :         error_space,
; 149  :         error_badrepeat,
; 150  :         error_complexity,
; 151  :         error_stack,
; 152  :         error_parse,
; 153  :         error_syntax
; 154  :     };
; 155  : } // namespace regex_constants
; 156  : 
; 157  : extern "C++" [[noreturn]] _CRTIMP2_PURE void __CLRCALL_PURE_OR_CDECL _Xregex_error(regex_constants::error_type _Code);
; 158  : 
; 159  : _EXPORT_STD template <class _Elem>
; 160  : class regex_traits;
; 161  : 
; 162  : struct _Cl_names { // structure to associate class name with mask value
; 163  :     const char* _Narrow;
; 164  :     const wchar_t* _Wide;
; 165  :     unsigned int _Len;
; 166  :     ctype_base::mask _Ctype;
; 167  : 
; 168  :     template <class _Elem>
; 169  :     _NODISCARD const _Elem* _Get() const noexcept {
; 170  :         if constexpr (is_same_v<_Elem, char>) {
; 171  :             return _Narrow;
; 172  :         } else {
; 173  :             return _Wide;
; 174  :         }
; 175  :     }
; 176  : };
; 177  : 
; 178  : template <class _CharT>
; 179  : struct _Std_char_traits_eq {
; 180  :     _STATIC_CALL_OPERATOR bool operator()(_CharT _Left, _CharT _Right) _CONST_CALL_OPERATOR noexcept {
; 181  :         return char_traits<_CharT>::eq(_Left, _Right);
; 182  :     }
; 183  : };
; 184  : 
; 185  : template <class _CharT>
; 186  : struct _Std_char_traits_lt {
; 187  :     _STATIC_CALL_OPERATOR bool operator()(_CharT _Left, _CharT _Right) _CONST_CALL_OPERATOR noexcept {
; 188  :         return char_traits<_CharT>::lt(_Left, _Right);
; 189  :     }
; 190  : };
; 191  : 
; 192  : // signed char and other unsigned integral types are supported as an extension.
; 193  : template <class _Ty>
; 194  : constexpr bool _Is_predefined_char_like_type = _Is_character<_Ty>::value || is_unsigned_v<_Ty>;
; 195  : 
; 196  : // library-provided char_traits::eq behaves like equal_to<_Elem>
; 197  : template <class _Elem>
; 198  : constexpr bool _Can_memcmp_elements_with_pred<_Elem, _Elem, _Std_char_traits_eq<_Elem>> =
; 199  :     _Is_predefined_char_like_type<_Elem> && _Can_memcmp_elements<_Elem, _Elem>;
; 200  : 
; 201  : template <class _Elem, bool = _Is_predefined_char_like_type<_Elem>>
; 202  : struct _Lex_compare_memcmp_classify_pred_for_std_char_traits_lt {
; 203  :     using _UElem = make_unsigned_t<_Elem>;
; 204  :     using _Pred  = conditional_t<_Lex_compare_memcmp_classify_elements<_UElem, _UElem>, less<int>, void>;
; 205  : };
; 206  : template <class _Elem>
; 207  : struct _Lex_compare_memcmp_classify_pred_for_std_char_traits_lt<_Elem, false> {
; 208  :     using _Pred = void;
; 209  : };
; 210  : 
; 211  : // library-provided char_traits::lt behaves like less<make_unsigned_t<_Elem>>
; 212  : template <class _Elem>
; 213  : struct _Lex_compare_memcmp_classify_pred<_Elem, _Elem, _Std_char_traits_lt<_Elem>>
; 214  :     : _Lex_compare_memcmp_classify_pred_for_std_char_traits_lt<_Elem> {};
; 215  : 
; 216  : template <class _RxTraits>
; 217  : struct _Cmp_cs { // functor to compare two character values for equality
; 218  :     using _Elem = typename _RxTraits::char_type;
; 219  :     _STATIC_CALL_OPERATOR bool operator()(_Elem _Ex1, _Elem _Ex2) _CONST_CALL_OPERATOR {
; 220  :         return _Ex1 == _Ex2;
; 221  :     }
; 222  : };
; 223  : 
; 224  : template <class _RxTraits>
; 225  : struct _Cmp_icase { // functor to compare for case-insensitive equality
; 226  :     using _Elem = typename _RxTraits::char_type;
; 227  : 
; 228  :     explicit _Cmp_icase(const _RxTraits& _Tr) noexcept : _Traits(_Tr) {}
; 229  : 
; 230  :     bool operator()(_Elem _Ex1, _Elem _Ex2) const {
; 231  :         return _Traits.translate_nocase(_Ex1) == _Traits.translate_nocase(_Ex2);
; 232  :     }
; 233  : 
; 234  :     const _RxTraits& _Traits;
; 235  : };
; 236  : 
; 237  : template <class _RxTraits>
; 238  : struct _Cmp_collate { // functor to compare for locale-specific equality
; 239  :     using _Elem = typename _RxTraits::char_type;
; 240  : 
; 241  :     explicit _Cmp_collate(const _RxTraits& _Tr) noexcept : _Traits(_Tr) {}
; 242  : 
; 243  :     bool operator()(_Elem _Ex1, _Elem _Ex2) const {
; 244  :         return _Traits.translate(_Ex1) == _Traits.translate(_Ex2);
; 245  :     }
; 246  : 
; 247  :     const _RxTraits& _Traits;
; 248  : };
; 249  : 
; 250  : struct _Regex_traits_base { // base of all regular expression traits
; 251  :     enum _Char_class_type {
; 252  :         _Ch_alnum  = ctype_base::alnum,
; 253  :         _Ch_alpha  = ctype_base::alpha,
; 254  :         _Ch_cntrl  = ctype_base::cntrl,
; 255  :         _Ch_digit  = ctype_base::digit,
; 256  :         _Ch_graph  = ctype_base::graph,
; 257  :         _Ch_lower  = ctype_base::lower,
; 258  :         _Ch_print  = ctype_base::print,
; 259  :         _Ch_punct  = ctype_base::punct,
; 260  :         _Ch_space  = ctype_base::space,
; 261  :         _Ch_upper  = ctype_base::upper,
; 262  :         _Ch_xdigit = ctype_base::xdigit,
; 263  :         _Ch_blank  = ctype_base::blank
; 264  :     };
; 265  :     using char_class_type = ctype_base::mask;
; 266  : };
; 267  : 
; 268  : template <class _Elem>
; 269  : class _Regex_traits : public _Regex_traits_base { // base class for regular expression traits
; 270  : public:
; 271  :     using _Uelem      = make_unsigned_t<_Elem>;
; 272  :     using char_type   = _Elem;
; 273  :     using size_type   = size_t;
; 274  :     using string_type = basic_string<_Elem>;
; 275  :     using locale_type = locale;
; 276  : 
; 277  :     static size_type length(const _Elem* _Str) {
; 278  :         return char_traits<_Elem>::length(_Str);
; 279  :     }
; 280  : 
; 281  :     _Regex_traits() {
; 282  :         _Cache_locale();
; 283  :     }
; 284  : 
; 285  :     _Regex_traits(const _Regex_traits& _Right) : _Loc(_Right._Loc) {
; 286  :         _Cache_locale();
; 287  :     }
; 288  : 
; 289  :     _Regex_traits& operator=(const _Regex_traits& _Right) {
; 290  :         _Loc = _Right._Loc;
; 291  :         _Cache_locale();
; 292  :         return *this;
; 293  :     }
; 294  : 
; 295  :     _Elem translate(_Elem _Ch) const { // provide locale-sensitive mapping
; 296  :         string_type _Res = _Getcoll()->transform(_STD addressof(_Ch), _STD addressof(_Ch) + 1);
; 297  :         return _Res.size() == 1 ? _Res[0] : _Ch;
; 298  :     }
; 299  : 
; 300  :     _Elem translate_nocase(_Elem _Ch) const { // provide case-insensitive mapping
; 301  :         return _Getctype()->tolower(_Ch);
; 302  :     }
; 303  : 
; 304  :     template <class _FwdIt>
; 305  :     string_type transform(_FwdIt _First, _FwdIt _Last) const { // apply locale-specific transformation
; 306  :         const string_type _Str(_First, _Last);
; 307  :         return _Getcoll()->transform(_Str.data(), _Str.data() + _Str.size());
; 308  :     }
; 309  : 
; 310  :     template <class _FwdIt>
; 311  :     string_type transform_primary(_FwdIt _First, _FwdIt _Last) const {
; 312  :         // apply locale-specific case-insensitive transformation
; 313  :         string_type _Res;
; 314  : 
; 315  :         if (_First != _Last) { // non-empty string, transform it
; 316  :             vector<_Elem> _Temp(_First, _Last);
; 317  : 
; 318  :             _Getctype()->tolower(_Temp.data(), _Temp.data() + _Temp.size());
; 319  :             _Res = _Getcoll()->transform(_Temp.data(), _Temp.data() + _Temp.size());
; 320  :         }
; 321  :         return _Res;
; 322  :     }
; 323  : 
; 324  :     bool isctype(_Elem _Ch, char_class_type _Fx) const {
; 325  :         if (_Fx != static_cast<char_class_type>(-1)) {
; 326  :             return _Getctype()->is(_Fx, _Ch);
; 327  :         } else {
; 328  :             return _Ch == '_' // assumes L'_' == '_'
; 329  :                 || _Getctype()->is(_Ch_alnum, _Ch);
; 330  :         }
; 331  :     }
; 332  : 
; 333  :     template <class _Iter>
; 334  :     char_class_type lookup_classname(_Iter _First, _Iter _Last, bool _Icase = false) const {
; 335  :         // map [_First, _Last) to character class mask value
; 336  : #define _REGEX_CHAR_CLASS_NAME(n, c) \
; 337  :     { n, L##n, static_cast<unsigned int>(_STD size(n) - 1), c }
; 338  :         static constexpr _Cl_names _Names[] = {
; 339  :             // map class names to numeric constants
; 340  :             _REGEX_CHAR_CLASS_NAME("alnum", _Ch_alnum),
; 341  :             _REGEX_CHAR_CLASS_NAME("alpha", _Ch_alpha),
; 342  :             _REGEX_CHAR_CLASS_NAME("blank", _Ch_blank),
; 343  :             _REGEX_CHAR_CLASS_NAME("cntrl", _Ch_cntrl),
; 344  :             _REGEX_CHAR_CLASS_NAME("d", _Ch_digit),
; 345  :             _REGEX_CHAR_CLASS_NAME("digit", _Ch_digit),
; 346  :             _REGEX_CHAR_CLASS_NAME("graph", _Ch_graph),
; 347  :             _REGEX_CHAR_CLASS_NAME("lower", _Ch_lower),
; 348  :             _REGEX_CHAR_CLASS_NAME("print", _Ch_print),
; 349  :             _REGEX_CHAR_CLASS_NAME("punct", _Ch_punct),
; 350  :             _REGEX_CHAR_CLASS_NAME("space", _Ch_space),
; 351  :             _REGEX_CHAR_CLASS_NAME("s", _Ch_space),
; 352  :             _REGEX_CHAR_CLASS_NAME("upper", _Ch_upper),
; 353  :             _REGEX_CHAR_CLASS_NAME("w", static_cast<ctype_base::mask>(-1)),
; 354  :             _REGEX_CHAR_CLASS_NAME("xdigit", _Ch_xdigit),
; 355  :             {nullptr, nullptr, 0, 0},
; 356  :         };
; 357  : #undef _REGEX_CHAR_CLASS_NAME
; 358  : 
; 359  :         _Adl_verify_range(_First, _Last);
; 360  :         unsigned int _Ix = 0;
; 361  :         for (; _Names[_Ix]._Get<_Elem>(); ++_Ix) {
; 362  :             if (_STD equal(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Names[_Ix]._Get<_Elem>(),
; 363  :                     _Names[_Ix]._Get<_Elem>() + _Names[_Ix]._Len, _Cmp_icase<_Regex_traits<_Elem>>{*this})) {
; 364  :                 break;
; 365  :             }
; 366  :         }
; 367  : 
; 368  :         char_class_type _Mask{};
; 369  :         if (_Names[_Ix]._Get<_Elem>()) {
; 370  :             _Mask = _Names[_Ix]._Ctype;
; 371  :         }
; 372  : 
; 373  :         if (_Icase && (_Mask & (_Ch_lower | _Ch_upper))) {
; 374  :             _Mask |= _Ch_lower | _Ch_upper;
; 375  :         }
; 376  : 
; 377  :         return _Mask;
; 378  :     }
; 379  : 
; 380  :     template <class _FwdIt>
; 381  :     string_type lookup_collatename(_FwdIt _First, _FwdIt _Last) const { // map [_First, _Last) to collation element
; 382  :         return string_type{_First, _Last};
; 383  :     }
; 384  : 
; 385  :     locale_type imbue(locale_type _Lx) { // store locale object
; 386  :         locale_type _Tmp = _Loc;
; 387  :         _Loc             = _Lx;
; 388  :         _Cache_locale();
; 389  :         return _Tmp;
; 390  :     }
; 391  : 
; 392  :     locale_type getloc() const noexcept /* strengthened */ {
; 393  :         return _Loc;
; 394  :     }
; 395  : 
; 396  :     const collate<_Elem>* _Getcoll() const noexcept { // get collate facet pointer
; 397  :         return _Pcoll;
; 398  :     }
; 399  : 
; 400  :     const ctype<_Elem>* _Getctype() const noexcept { // get ctype facet pointer
; 401  :         return _Pctype;
; 402  :     }
; 403  : 
; 404  : private:
; 405  :     void _Cache_locale() { // populate _Pcoll and _Pctype with _Loc locale
; 406  :         _Pcoll  = _STD addressof(_STD use_facet<collate<_Elem>>(_Loc));
; 407  :         _Pctype = _STD addressof(_STD use_facet<ctype<_Elem>>(_Loc));
; 408  :     }
; 409  : 
; 410  :     const collate<_Elem>* _Pcoll;
; 411  :     const ctype<_Elem>* _Pctype;
; 412  :     locale_type _Loc;
; 413  : };
; 414  : 
; 415  : template <>
; 416  : class regex_traits<char> : public _Regex_traits<char> {
; 417  : public:
; 418  :     int value(char _Ch, int _Base) const { // map character value to numeric value
; 419  :         if ((_Base != 8 && '0' <= _Ch && _Ch <= '9') || (_Base == 8 && '0' <= _Ch && _Ch <= '7')) {
; 420  :             return _Ch - '0';
; 421  :         }
; 422  : 
; 423  :         if (_Base != 16) {
; 424  :             return -1;
; 425  :         }
; 426  : 
; 427  :         if ('a' <= _Ch && _Ch <= 'f') {
; 428  :             return _Ch - 'a' + 10;
; 429  :         }
; 430  : 
; 431  :         if ('A' <= _Ch && _Ch <= 'F') {
; 432  :             return _Ch - 'A' + 10;
; 433  :         }
; 434  : 
; 435  :         return -1;
; 436  :     }
; 437  : };
; 438  : 
; 439  : template <>
; 440  : class regex_traits<wchar_t> : public _Regex_traits<wchar_t> {
; 441  : public:
; 442  :     int value(wchar_t _Ch, int _Base) const { // map character value to numeric value
; 443  :         if ((_Base != 8 && L'0' <= _Ch && _Ch <= L'9') || (_Base == 8 && L'0' <= _Ch && _Ch <= L'7')) {
; 444  :             return _Ch - L'0';
; 445  :         }
; 446  : 
; 447  :         if (_Base != 16) {
; 448  :             return -1;
; 449  :         }
; 450  : 
; 451  :         if (L'a' <= _Ch && _Ch <= L'f') {
; 452  :             return _Ch - L'a' + 10;
; 453  :         }
; 454  : 
; 455  :         if (L'A' <= _Ch && _Ch <= L'F') {
; 456  :             return _Ch - L'A' + 10;
; 457  :         }
; 458  : 
; 459  :         return -1;
; 460  :     }
; 461  : };
; 462  : 
; 463  : _EXPORT_STD class regex_error : public runtime_error { // type of all regular expression exceptions
; 464  : public:
; 465  :     explicit regex_error(regex_constants::error_type _Ex) : runtime_error(_Stringify(_Ex)), _Err(_Ex) {}
; 466  : 
; 467  :     _NODISCARD regex_constants::error_type code() const {
; 468  :         return _Err;
; 469  :     }
; 470  : 
; 471  : private:
; 472  :     static const char* _Stringify(regex_constants::error_type _Ex) { // map error code to string
; 473  :         switch (_Ex) { // select known error_type message
; 474  :         case regex_constants::error_collate:
; 475  :             return "regex_error(error_collate): The expression "
; 476  :                    "contained an invalid collating element name.";
; 477  :         case regex_constants::error_ctype:
; 478  :             return "regex_error(error_ctype): The expression "
; 479  :                    "contained an invalid character class name.";
; 480  :         case regex_constants::error_escape:
; 481  :             return "regex_error(error_escape): The expression "
; 482  :                    "contained an invalid escaped character, "
; 483  :                    "or a trailing escape.";
; 484  :         case regex_constants::error_backref:
; 485  :             return "regex_error(error_backref): The expression "
; 486  :                    "contained an invalid back reference.";
; 487  :         case regex_constants::error_brack:
; 488  :             return "regex_error(error_brack): The expression "
; 489  :                    "contained mismatched [ and ].";
; 490  :         case regex_constants::error_paren:
; 491  :             return "regex_error(error_paren): The expression "
; 492  :                    "contained mismatched ( and ).";
; 493  :         case regex_constants::error_brace:
; 494  :             return "regex_error(error_brace): The expression "
; 495  :                    "contained mismatched { and }.";
; 496  :         case regex_constants::error_badbrace:
; 497  :             return "regex_error(error_badbrace): The expression "
; 498  :                    "contained an invalid range in a {} expression.";
; 499  :         case regex_constants::error_range:
; 500  :             return "regex_error(error_range): The expression "
; 501  :                    "contained an invalid character range, "
; 502  :                    "such as [b-a] in most encodings.";
; 503  :         case regex_constants::error_space:
; 504  :             return "regex_error(error_space): There was insufficient "
; 505  :                    "memory to convert the expression into "
; 506  :                    "a finite state machine.";
; 507  :         case regex_constants::error_badrepeat:
; 508  :             return "regex_error(error_badrepeat): One of *?+{ "
; 509  :                    "was not preceded by a valid regular expression.";
; 510  :         case regex_constants::error_complexity:
; 511  :             return "regex_error(error_complexity): The complexity of "
; 512  :                    "an attempted match against a regular expression "
; 513  :                    "exceeded a pre-set level.";
; 514  :         case regex_constants::error_stack:
; 515  :             return "regex_error(error_stack): There was insufficient "
; 516  :                    "memory to determine whether the regular expression "
; 517  :                    "could match the specified character sequence.";
; 518  :         case regex_constants::error_parse:
; 519  :             return "regex_error(error_parse)";
; 520  :         case regex_constants::error_syntax:
; 521  :             return "regex_error(error_syntax)";
; 522  :         default:
; 523  :             return "regex_error";
; 524  :         }
; 525  :     }
; 526  : 
; 527  :     regex_constants::error_type _Err;
; 528  : };
; 529  : 
; 530  : inline bool _Is_word(unsigned char _UCh) {
; 531  :     // special casing char to avoid branches for std::regex in this path
; 532  :     static constexpr bool _Is_word_table[_STD _Max_limit<unsigned char>() + 1] = {
; 533  :         //        X0 X1 X2 X3 X4 X5 X6 X7 X8 X9 XA XB XC XD XE XF
; 534  :         /* 0X */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
; 535  :         /* 1X */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
; 536  :         /* 2X */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
; 537  :         /* 3X */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 0-9
; 538  :         /* 4X */ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // A-Z
; 539  :         /* 5X */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 5F == _
; 540  :         /* 6X */ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // a-z
; 541  :         /* 7X */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
; 542  :         // non-ASCII values initialized to 0
; 543  :     };
; 544  :     return _Is_word_table[_UCh];
; 545  : }
; 546  : 
; 547  : inline bool _Is_word(char _Ch) {
; 548  :     return _Is_word(static_cast<unsigned char>(_Ch));
; 549  : }
; 550  : 
; 551  : template <class _Elem>
; 552  : bool _Is_word(_Elem _Ch) {
; 553  :     // assumes 'x' == L'x' for the ASCII range
; 554  :     using _UElem = make_unsigned_t<_Elem>;
; 555  : 
; 556  :     const auto _UCh = static_cast<_UElem>(_Ch);
; 557  :     return _UCh <= static_cast<_UElem>('z') && _Is_word(static_cast<unsigned char>(_UCh));
; 558  : }
; 559  : 
; 560  : _EXPORT_STD template <class _BidIt>
; 561  : class sub_match : public pair<_BidIt, _BidIt> { // class to hold contents of a capture group
; 562  : public:
; 563  :     using _Mybase         = pair<_BidIt, _BidIt>;
; 564  :     using value_type      = typename iterator_traits<_BidIt>::value_type;
; 565  :     using difference_type = typename iterator_traits<_BidIt>::difference_type;
; 566  :     using iterator        = _BidIt;
; 567  :     using string_type     = basic_string<value_type>;
; 568  : 
; 569  :     constexpr sub_match() = default;
; 570  : 
; 571  :     bool matched = false;
; 572  : 
; 573  :     _NODISCARD difference_type length() const {
; 574  :         const _Mybase _Range(_Effective_range());
; 575  :         return _STD distance(_Range.first, _Range.second);
; 576  :     }
; 577  : 
; 578  :     operator string_type() const { // convert matched text to string
; 579  :         return str();
; 580  :     }
; 581  : 
; 582  :     _NODISCARD string_type str() const { // convert matched text to string
; 583  :         const _Mybase _Range(_Effective_range());
; 584  :         return string_type{_Range.first, _Range.second};
; 585  :     }
; 586  : 
; 587  :     _NODISCARD int compare(const sub_match& _Right) const { // compare *this to _Right
; 588  :         const _Mybase _LRange(_Effective_range());
; 589  :         const _Mybase _RRange(_Right._Effective_range());
; 590  :         return _Iter_compare(_LRange.first, _LRange.second, _RRange.first, _RRange.second);
; 591  :     }
; 592  : 
; 593  :     _NODISCARD int compare(const string_type& _Right) const { // compare *this to _Right
; 594  :         return _Compare(_Right.data(), _Right.size());
; 595  :     }
; 596  : 
; 597  :     _NODISCARD int compare(_In_z_ const value_type* _Ptr) const { // compare *this to array pointed to by _Ptr
; 598  :         return _Compare(_Ptr, char_traits<value_type>::length(_Ptr));
; 599  :     }
; 600  : 
; 601  :     void swap(sub_match& _Other) noexcept(_Is_nothrow_swappable<_BidIt>::value) {
; 602  :         _Mybase::swap(_Other);
; 603  :         _STD swap(matched, _Other.matched);
; 604  :     }
; 605  : 
; 606  :     template <class _FwdIt2>
; 607  :     static int _Iter_compare(_BidIt _First1, _BidIt _Last1, _FwdIt2 _First2, _FwdIt2 _Last2) {
; 608  :         // compare two iterator ranges:
; 609  :         // if [_First1, _Last1) is lexicographically less than [_First2, _Last2), a negative value
; 610  :         // if [_First2, _Last2) is lexicographically less than [_First1, _Last1), a positive value
; 611  :         // otherwise, zero
; 612  :         static_assert(is_same_v<_Iter_value_t<_FwdIt2>, value_type>, "bad _FwdIt2 to _Iter_compare");
; 613  : 
; 614  :         _Adl_verify_range(_First1, _Last1);
; 615  :         _Adl_verify_range(_First2, _Last2);
; 616  : 
; 617  :         auto _UFirst1 = _Get_unwrapped(_First1);
; 618  :         auto _ULast1  = _Get_unwrapped(_Last1);
; 619  :         auto _UFirst2 = _Get_unwrapped(_First2);
; 620  :         auto _ULast2  = _Get_unwrapped(_Last2);
; 621  : 
; 622  :         if constexpr (is_pointer_v<decltype(_UFirst1)> && is_pointer_v<decltype(_UFirst2)>) {
; 623  :             return _Traits_compare<char_traits<value_type>>(
; 624  :                 _UFirst1, static_cast<size_t>(_ULast1 - _UFirst1), _UFirst2, static_cast<size_t>(_ULast2 - _UFirst2));
; 625  :         } else {
; 626  :             const auto _Cmp = _STD mismatch(_UFirst1, _ULast1, _UFirst2, _ULast2, _Std_char_traits_eq<value_type>{});
; 627  : 
; 628  :             if (_Cmp.first == _ULast1) {
; 629  :                 if (_Cmp.second == _ULast2) {
; 630  :                     return 0;
; 631  :                 } else {
; 632  :                     return -1;
; 633  :                 }
; 634  :             }
; 635  : 
; 636  :             if (_Cmp.second == _ULast2) {
; 637  :                 return 1;
; 638  :             }
; 639  : 
; 640  :             if (char_traits<value_type>::lt(*_Cmp.first, *_Cmp.second)) {
; 641  :                 return -1;
; 642  :             } else {
; 643  :                 return 1;
; 644  :             }
; 645  :         }
; 646  :     }
; 647  : 
; 648  :     int _Compare(const value_type* const _Ptr, const size_t _Count) const {
; 649  :         // compare *this to array [_Ptr, _Ptr + _Count)
; 650  :         const _Mybase _Range(_Effective_range());
; 651  :         return _Iter_compare(_Range.first, _Range.second, _Ptr, _Ptr + _Count);
; 652  :     }
; 653  : 
; 654  :     bool _Match_equal(const sub_match& _Right) const { // check *this to _Right for equality
; 655  :         const _Mybase _LRange(_Effective_range());
; 656  :         const _Mybase _RRange(_Right._Effective_range());
; 657  :         return _STD equal(
; 658  :             _LRange.first, _LRange.second, _RRange.first, _RRange.second, _Std_char_traits_eq<value_type>{});
; 659  :     }
; 660  : 
; 661  :     bool _Match_equal(const value_type* const _Ptr, const size_t _Count) const {
; 662  :         // check *this to array [_Ptr, _Ptr + _Count) for equality
; 663  :         const _Mybase _Range(_Effective_range());
; 664  :         return _STD equal(_Range.first, _Range.second, _Ptr, _Ptr + _Count, _Std_char_traits_eq<value_type>{});
; 665  :     }
; 666  : 
; 667  :     bool _Match_equal(const value_type* const _Ptr) const { // check *this to C-string _Ptr for equality
; 668  :         return _Match_equal(_Ptr, char_traits<value_type>::length(_Ptr));
; 669  :     }
; 670  : 
; 671  :     bool _Less(const sub_match& _Right) const { // check whether *this is less than _Right
; 672  :         const _Mybase _LRange(_Effective_range());
; 673  :         const _Mybase _RRange(_Right._Effective_range());
; 674  :         return _STD lexicographical_compare(
; 675  :             _LRange.first, _LRange.second, _RRange.first, _RRange.second, _Std_char_traits_lt<value_type>{});
; 676  :     }
; 677  : 
; 678  :     bool _Less(const value_type* const _Ptr, const size_t _Count) const {
; 679  :         // check whether *this is less than [_Ptr, _Ptr + _Count)
; 680  :         const _Mybase _Range(_Effective_range());
; 681  :         return _STD lexicographical_compare(
; 682  :             _Range.first, _Range.second, _Ptr, _Ptr + _Count, _Std_char_traits_lt<value_type>{});
; 683  :     }
; 684  : 
; 685  :     bool _Less(const value_type* const _Ptr) const { // check whether *this is less than C-string _Ptr
; 686  :         return _Less(_Ptr, char_traits<value_type>::length(_Ptr));
; 687  :     }
; 688  : 
; 689  :     bool _Greater(const value_type* const _Ptr, const size_t _Count) const {
; 690  :         // check whether *this is greater than [_Ptr, _Ptr + _Count)
; 691  :         const _Mybase _Range(_Effective_range());
; 692  :         return _STD lexicographical_compare(
; 693  :             _Ptr, _Ptr + _Count, _Range.first, _Range.second, _Std_char_traits_lt<value_type>{});
; 694  :     }
; 695  : 
; 696  :     bool _Greater(const value_type* const _Ptr) const { // check whether *this is greater than C-string _Ptr
; 697  :         return _Greater(_Ptr, char_traits<value_type>::length(_Ptr));
; 698  :     }
; 699  : 
; 700  :     _Mybase _Effective_range() const { // if matched, returns *this; otherwise returns an empty range
; 701  :         if (matched) {
; 702  :             return *this;
; 703  :         } else {
; 704  :             return _Mybase{};
; 705  :         }
; 706  :     }
; 707  : };
; 708  : 
; 709  : _EXPORT_STD using csub_match  = sub_match<const char*>;
; 710  : _EXPORT_STD using wcsub_match = sub_match<const wchar_t*>;
; 711  : _EXPORT_STD using ssub_match  = sub_match<string::const_iterator>;
; 712  : _EXPORT_STD using wssub_match = sub_match<wstring::const_iterator>;
; 713  : 
; 714  : _EXPORT_STD template <class _BidIt>
; 715  : _NODISCARD bool operator==(const sub_match<_BidIt>& _Left, const sub_match<_BidIt>& _Right) {
; 716  :     return _Left._Match_equal(_Right);
; 717  : }
; 718  : 
; 719  : #if _HAS_CXX20
; 720  : _EXPORT_STD template <class _BidIt>
; 721  : _NODISCARD auto operator<=>(const sub_match<_BidIt>& _Left, const sub_match<_BidIt>& _Right) {
; 722  :     using _Comparison_category = _Get_comparison_category_t<char_traits<_Iter_value_t<_BidIt>>>;
; 723  :     return static_cast<_Comparison_category>(_Left.compare(_Right) <=> 0);
; 724  : }
; 725  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 726  : template <class _BidIt>
; 727  : _NODISCARD bool operator!=(const sub_match<_BidIt>& _Left, const sub_match<_BidIt>& _Right) {
; 728  :     return !(_Left == _Right);
; 729  : }
; 730  : 
; 731  : template <class _BidIt>
; 732  : _NODISCARD bool operator<(const sub_match<_BidIt>& _Left, const sub_match<_BidIt>& _Right) {
; 733  :     return _Left._Less(_Right);
; 734  : }
; 735  : 
; 736  : template <class _BidIt>
; 737  : _NODISCARD bool operator>(const sub_match<_BidIt>& _Left, const sub_match<_BidIt>& _Right) {
; 738  :     return _Right < _Left;
; 739  : }
; 740  : 
; 741  : template <class _BidIt>
; 742  : _NODISCARD bool operator<=(const sub_match<_BidIt>& _Left, const sub_match<_BidIt>& _Right) {
; 743  :     return !(_Right < _Left);
; 744  : }
; 745  : 
; 746  : template <class _BidIt>
; 747  : _NODISCARD bool operator>=(const sub_match<_BidIt>& _Left, const sub_match<_BidIt>& _Right) {
; 748  :     return !(_Left < _Right);
; 749  : }
; 750  : #endif // ^^^ !_HAS_CXX20 ^^^
; 751  : 
; 752  : _EXPORT_STD template <class _BidIt>
; 753  : _NODISCARD bool operator==(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>* _Right) {
; 754  :     return _Left._Match_equal(_Right);
; 755  : }
; 756  : 
; 757  : #if _HAS_CXX20
; 758  : _EXPORT_STD template <class _BidIt>
; 759  : _NODISCARD auto operator<=>(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>* _Right) {
; 760  :     using _Comparison_category = _Get_comparison_category_t<char_traits<_Iter_value_t<_BidIt>>>;
; 761  :     return static_cast<_Comparison_category>(_Left.compare(_Right) <=> 0);
; 762  : }
; 763  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 764  : template <class _BidIt>
; 765  : _NODISCARD bool operator==(const _Iter_value_t<_BidIt>* _Left, const sub_match<_BidIt>& _Right) {
; 766  :     return _Right._Match_equal(_Left);
; 767  : }
; 768  : 
; 769  : template <class _BidIt>
; 770  : _NODISCARD bool operator!=(const _Iter_value_t<_BidIt>* _Left, const sub_match<_BidIt>& _Right) {
; 771  :     return !(_Left == _Right);
; 772  : }
; 773  : 
; 774  : template <class _BidIt>
; 775  : _NODISCARD bool operator<(const _Iter_value_t<_BidIt>* _Left, const sub_match<_BidIt>& _Right) {
; 776  :     return _Right._Greater(_Left);
; 777  : }
; 778  : 
; 779  : template <class _BidIt>
; 780  : _NODISCARD bool operator>(const _Iter_value_t<_BidIt>* _Left, const sub_match<_BidIt>& _Right) {
; 781  :     return _Right < _Left;
; 782  : }
; 783  : 
; 784  : template <class _BidIt>
; 785  : _NODISCARD bool operator<=(const _Iter_value_t<_BidIt>* _Left, const sub_match<_BidIt>& _Right) {
; 786  :     return !(_Right < _Left);
; 787  : }
; 788  : 
; 789  : template <class _BidIt>
; 790  : _NODISCARD bool operator>=(const _Iter_value_t<_BidIt>* _Left, const sub_match<_BidIt>& _Right) {
; 791  :     return !(_Left < _Right);
; 792  : }
; 793  : 
; 794  : template <class _BidIt>
; 795  : _NODISCARD bool operator!=(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>* _Right) {
; 796  :     return !(_Left == _Right);
; 797  : }
; 798  : 
; 799  : template <class _BidIt>
; 800  : _NODISCARD bool operator<(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>* _Right) {
; 801  :     return _Left._Less(_Right);
; 802  : }
; 803  : 
; 804  : template <class _BidIt>
; 805  : _NODISCARD bool operator>(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>* _Right) {
; 806  :     return _Right < _Left;
; 807  : }
; 808  : 
; 809  : template <class _BidIt>
; 810  : _NODISCARD bool operator<=(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>* _Right) {
; 811  :     return !(_Right < _Left);
; 812  : }
; 813  : 
; 814  : template <class _BidIt>
; 815  : _NODISCARD bool operator>=(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>* _Right) {
; 816  :     return !(_Left < _Right);
; 817  : }
; 818  : #endif // ^^^ !_HAS_CXX20 ^^^
; 819  : 
; 820  : _EXPORT_STD template <class _BidIt>
; 821  : _NODISCARD bool operator==(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>& _Right) {
; 822  :     return _Left._Match_equal(_STD addressof(_Right), 1);
; 823  : }
; 824  : 
; 825  : #if _HAS_CXX20
; 826  : _EXPORT_STD template <class _BidIt>
; 827  : _NODISCARD auto operator<=>(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>& _Right) {
; 828  :     using _Comparison_category = _Get_comparison_category_t<char_traits<_Iter_value_t<_BidIt>>>;
; 829  :     return static_cast<_Comparison_category>(_Left._Compare(_STD addressof(_Right), 1) <=> 0);
; 830  : }
; 831  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 832  : template <class _BidIt>
; 833  : _NODISCARD bool operator==(const _Iter_value_t<_BidIt>& _Left, const sub_match<_BidIt>& _Right) {
; 834  :     return _Right._Match_equal(_STD addressof(_Left), 1);
; 835  : }
; 836  : 
; 837  : template <class _BidIt>
; 838  : _NODISCARD bool operator!=(const _Iter_value_t<_BidIt>& _Left, const sub_match<_BidIt>& _Right) {
; 839  :     return !(_Left == _Right);
; 840  : }
; 841  : 
; 842  : template <class _BidIt>
; 843  : _NODISCARD bool operator<(const _Iter_value_t<_BidIt>& _Left, const sub_match<_BidIt>& _Right) {
; 844  :     return _Right._Greater(_STD addressof(_Left), 1);
; 845  : }
; 846  : 
; 847  : template <class _BidIt>
; 848  : _NODISCARD bool operator>(const _Iter_value_t<_BidIt>& _Left, const sub_match<_BidIt>& _Right) {
; 849  :     return _Right < _Left;
; 850  : }
; 851  : 
; 852  : template <class _BidIt>
; 853  : _NODISCARD bool operator<=(const _Iter_value_t<_BidIt>& _Left, const sub_match<_BidIt>& _Right) {
; 854  :     return !(_Right < _Left);
; 855  : }
; 856  : 
; 857  : template <class _BidIt>
; 858  : _NODISCARD bool operator>=(const _Iter_value_t<_BidIt>& _Left, const sub_match<_BidIt>& _Right) {
; 859  :     return !(_Left < _Right);
; 860  : }
; 861  : 
; 862  : template <class _BidIt>
; 863  : _NODISCARD bool operator!=(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>& _Right) {
; 864  :     return !(_Left == _Right);
; 865  : }
; 866  : 
; 867  : template <class _BidIt>
; 868  : _NODISCARD bool operator<(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>& _Right) {
; 869  :     return _Left._Less(_STD addressof(_Right), 1);
; 870  : }
; 871  : 
; 872  : template <class _BidIt>
; 873  : _NODISCARD bool operator>(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>& _Right) {
; 874  :     return _Right < _Left;
; 875  : }
; 876  : 
; 877  : template <class _BidIt>
; 878  : _NODISCARD bool operator<=(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>& _Right) {
; 879  :     return !(_Right < _Left);
; 880  : }
; 881  : 
; 882  : template <class _BidIt>
; 883  : _NODISCARD bool operator>=(const sub_match<_BidIt>& _Left, const _Iter_value_t<_BidIt>& _Right) {
; 884  :     return !(_Left < _Right);
; 885  : }
; 886  : #endif // ^^^ !_HAS_CXX20 ^^^
; 887  : 
; 888  : _EXPORT_STD template <class _BidIt, class _Traits, class _Alloc>
; 889  : _NODISCARD bool operator==(
; 890  :     const sub_match<_BidIt>& _Left, const basic_string<_Iter_value_t<_BidIt>, _Traits, _Alloc>& _Right) {
; 891  :     return _Left._Match_equal(_Right.data(), _Right.size());
; 892  : }
; 893  : 
; 894  : #if _HAS_CXX20
; 895  : _EXPORT_STD template <class _BidIt, class _Traits, class _Alloc>
; 896  : _NODISCARD auto operator<=>(
; 897  :     const sub_match<_BidIt>& _Left, const basic_string<_Iter_value_t<_BidIt>, _Traits, _Alloc>& _Right) {
; 898  :     using _Comparison_category = _Get_comparison_category_t<char_traits<_Iter_value_t<_BidIt>>>;
; 899  :     return static_cast<_Comparison_category>(_Left._Compare(_Right.data(), _Right.size()) <=> 0);
; 900  : }
; 901  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 902  : template <class _BidIt, class _Traits, class _Alloc>
; 903  : _NODISCARD bool operator==(
; 904  :     const basic_string<_Iter_value_t<_BidIt>, _Traits, _Alloc>& _Left, const sub_match<_BidIt>& _Right) {
; 905  :     return _Right._Match_equal(_Left.data(), _Left.size());
; 906  : }
; 907  : 
; 908  : template <class _BidIt, class _Traits, class _Alloc>
; 909  : _NODISCARD bool operator!=(
; 910  :     const basic_string<_Iter_value_t<_BidIt>, _Traits, _Alloc>& _Left, const sub_match<_BidIt>& _Right) {
; 911  :     return !(_Left == _Right);
; 912  : }
; 913  : 
; 914  : template <class _BidIt, class _Traits, class _Alloc>
; 915  : _NODISCARD bool operator<(
; 916  :     const basic_string<_Iter_value_t<_BidIt>, _Traits, _Alloc>& _Left, const sub_match<_BidIt>& _Right) {
; 917  :     return _Right._Greater(_Left.data(), _Left.size());
; 918  : }
; 919  : 
; 920  : template <class _BidIt, class _Traits, class _Alloc>
; 921  : _NODISCARD bool operator>(
; 922  :     const basic_string<_Iter_value_t<_BidIt>, _Traits, _Alloc>& _Left, const sub_match<_BidIt>& _Right) {
; 923  :     return _Right < _Left;
; 924  : }
; 925  : 
; 926  : template <class _BidIt, class _Traits, class _Alloc>
; 927  : _NODISCARD bool operator<=(
; 928  :     const basic_string<_Iter_value_t<_BidIt>, _Traits, _Alloc>& _Left, const sub_match<_BidIt>& _Right) {
; 929  :     return !(_Right < _Left);
; 930  : }
; 931  : 
; 932  : template <class _BidIt, class _Traits, class _Alloc>
; 933  : _NODISCARD bool operator>=(
; 934  :     const basic_string<_Iter_value_t<_BidIt>, _Traits, _Alloc>& _Left, const sub_match<_BidIt>& _Right) {
; 935  :     return !(_Left < _Right);
; 936  : }
; 937  : 
; 938  : template <class _BidIt, class _Traits, class _Alloc>
; 939  : _NODISCARD bool operator!=(
; 940  :     const sub_match<_BidIt>& _Left, const basic_string<_Iter_value_t<_BidIt>, _Traits, _Alloc>& _Right) {
; 941  :     return !(_Left == _Right);
; 942  : }
; 943  : 
; 944  : template <class _BidIt, class _Traits, class _Alloc>
; 945  : _NODISCARD bool operator<(
; 946  :     const sub_match<_BidIt>& _Left, const basic_string<_Iter_value_t<_BidIt>, _Traits, _Alloc>& _Right) {
; 947  :     return _Left._Less(_Right.data(), _Right.size());
; 948  : }
; 949  : 
; 950  : template <class _BidIt, class _Traits, class _Alloc>
; 951  : _NODISCARD bool operator>(
; 952  :     const sub_match<_BidIt>& _Left, const basic_string<_Iter_value_t<_BidIt>, _Traits, _Alloc>& _Right) {
; 953  :     return _Right < _Left;
; 954  : }
; 955  : 
; 956  : template <class _BidIt, class _Traits, class _Alloc>
; 957  : _NODISCARD bool operator<=(
; 958  :     const sub_match<_BidIt>& _Left, const basic_string<_Iter_value_t<_BidIt>, _Traits, _Alloc>& _Right) {
; 959  :     return !(_Right < _Left);
; 960  : }
; 961  : 
; 962  : template <class _BidIt, class _Traits, class _Alloc>
; 963  : _NODISCARD bool operator>=(
; 964  :     const sub_match<_BidIt>& _Left, const basic_string<_Iter_value_t<_BidIt>, _Traits, _Alloc>& _Right) {
; 965  :     return !(_Left < _Right);
; 966  : }
; 967  : #endif // ^^^ !_HAS_CXX20 ^^^
; 968  : 
; 969  : _EXPORT_STD template <class _Elem, class _Traits, class _BidIt>
; 970  : basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr, const sub_match<_BidIt>& _Match) {
; 971  :     return _Ostr << _Match.str();
; 972  : }
; 973  : 
; 974  : _EXPORT_STD template <class _BidIt, class _Alloc = allocator<sub_match<_BidIt>>>
; 975  : class match_results;
; 976  : 
; 977  : template <class _BidIt, class _Alloc, class _InIt, class _OutIt>
; 978  : _OutIt _Format_default(const match_results<_BidIt, _Alloc>& _Match, _OutIt _Out, _InIt _First, _InIt _Last,
; 979  :     regex_constants::match_flag_type _Flags = regex_constants::format_default);
; 980  : 
; 981  : template <class _BidIt, class _Alloc, class _InIt, class _OutIt>
; 982  : _OutIt _Format_sed(const match_results<_BidIt, _Alloc>& _Match, _OutIt _Out, _InIt _First, _InIt _Last,
; 983  :     regex_constants::match_flag_type _Flags = regex_constants::format_default);
; 984  : 
; 985  : _EXPORT_STD template <class _BidIt, class _Alloc>
; 986  : class match_results { // class to hold contents of all capture groups
; 987  : public:
; 988  :     using _Elem     = sub_match<_BidIt>;
; 989  :     using _MyCont   = vector<_Elem, _Alloc>;
; 990  :     using _Mytraits = allocator_traits<_Alloc>;
; 991  : 
; 992  :     using value_type      = _Elem;
; 993  :     using const_reference = const value_type&;
; 994  :     using reference       = value_type&;
; 995  :     using const_iterator  = typename _MyCont::const_iterator;
; 996  :     using iterator        = const_iterator;
; 997  :     using difference_type = typename iterator_traits<_BidIt>::difference_type;
; 998  :     using size_type       = typename _Mytraits::size_type;
; 999  :     using allocator_type  = _Alloc;
; 1000 :     using char_type       = typename iterator_traits<_BidIt>::value_type;
; 1001 :     using string_type     = basic_string<char_type>;
; 1002 : 
; 1003 :     match_results() = default;
; 1004 : 
; 1005 :     explicit match_results(const _Alloc& _Al) : _Matches(_Al) {}
; 1006 : 
; 1007 :     match_results(const match_results& _Other, const _Alloc& _Al)
; 1008 :         : _Org(_Other._Org), _Ready(_Other._Ready), _Matches(_Other._Matches, _Al), _Prefix(_Other._Prefix),
; 1009 :           _Suffix(_Other._Suffix), _Null_elem(_Other._Null_elem) {}
; 1010 : 
; 1011 :     match_results(match_results&& _Other, const _Alloc& _Al) noexcept(
; 1012 :         conjunction_v<typename _Mytraits::is_always_equal, is_nothrow_move_constructible<_BidIt>>) // strengthened
; 1013 :         : _Org(_STD move(_Other._Org)), _Ready(_Other._Ready), _Matches(_STD move(_Other._Matches), _Al),
; 1014 :           _Prefix(_STD move(_Other._Prefix)), _Suffix(_STD move(_Other._Suffix)),
; 1015 :           _Null_elem(_STD move(_Other._Null_elem)) {}
; 1016 : 
; 1017 :     _NODISCARD bool ready() const noexcept /* strengthened */ {
; 1018 :         return _Ready;
; 1019 :     }
; 1020 : 
; 1021 :     _NODISCARD size_type size() const noexcept /* strengthened */ {
; 1022 :         return _Matches.size();
; 1023 :     }
; 1024 : 
; 1025 :     _NODISCARD size_type max_size() const noexcept /* strengthened */ {
; 1026 :         return _Matches.max_size();
; 1027 :     }
; 1028 : 
; 1029 :     _NODISCARD bool empty() const noexcept /* strengthened */ {
; 1030 :         return _Matches.empty();
; 1031 :     }
; 1032 : 
; 1033 :     _NODISCARD difference_type length(size_type _Sub = 0) const {
; 1034 :         return (*this)[_Sub].length();
; 1035 :     }
; 1036 : 
; 1037 :     _NODISCARD difference_type position(size_type _Sub = 0) const {
; 1038 :         return _STD distance(_Org, (*this)[_Sub].first);
; 1039 :     }
; 1040 : 
; 1041 :     _NODISCARD string_type str(size_type _Sub = 0) const {
; 1042 :         return string_type{(*this)[_Sub]};
; 1043 :     }
; 1044 : 
; 1045 :     _NODISCARD const_reference operator[](size_type _Sub) const noexcept /* strengthened */ {
; 1046 :         return _Matches.size() <= _Sub ? _Null_elem : _Matches[_Sub];
; 1047 :     }
; 1048 : 
; 1049 :     _NODISCARD const_reference prefix() const noexcept /* strengthened */ {
; 1050 :         return _Prefix;
; 1051 :     }
; 1052 : 
; 1053 :     _NODISCARD const_reference suffix() const noexcept /* strengthened */ {
; 1054 :         return _Suffix;
; 1055 :     }
; 1056 : 
; 1057 :     _NODISCARD const_iterator begin() const noexcept /* strengthened */ {
; 1058 :         return _Matches.begin();
; 1059 :     }
; 1060 : 
; 1061 :     _NODISCARD const_iterator end() const noexcept /* strengthened */ {
; 1062 :         return _Matches.end();
; 1063 :     }
; 1064 : 
; 1065 :     _NODISCARD const_iterator cbegin() const noexcept /* strengthened */ {
; 1066 :         return _Matches.begin();
; 1067 :     }
; 1068 : 
; 1069 :     _NODISCARD const_iterator cend() const noexcept /* strengthened */ {
; 1070 :         return _Matches.end();
; 1071 :     }
; 1072 : 
; 1073 :     const _Elem* _Unchecked_begin() const noexcept {
; 1074 :         return _Matches._Unchecked_begin();
; 1075 :     }
; 1076 : 
; 1077 :     const _Elem* _Unchecked_end() const noexcept {
; 1078 :         return _Matches._Unchecked_end();
; 1079 :     }
; 1080 : 
; 1081 :     template <class _OutIt>
; 1082 :     _OutIt _Format1(_OutIt _Out, const char_type* _Fmt_begin, const char_type* _Fmt_end,
; 1083 :         regex_constants::match_flag_type _Flags) const { // format text, replacing matches
; 1084 :         return _Flags & regex_constants::format_sed ? _Format_sed(*this, _Out, _Fmt_begin, _Fmt_end, _Flags)
; 1085 :                                                     : _Format_default(*this, _Out, _Fmt_begin, _Fmt_end, _Flags);
; 1086 :     }
; 1087 : 
; 1088 :     template <class _OutIt>
; 1089 :     _OutIt format(_OutIt _Out, const char_type* _Fmt_begin, const char_type* _Fmt_end,
; 1090 :         regex_constants::match_flag_type _Flags = regex_constants::format_default) const {
; 1091 :         // format text, replacing matches
; 1092 :         _Adl_verify_range(_Fmt_begin, _Fmt_end);
; 1093 :         _Seek_wrapped(_Out, _Format1(_Get_unwrapped_unverified(_Out), _Fmt_begin, _Fmt_end, _Flags));
; 1094 :         return _Out;
; 1095 :     }
; 1096 : 
; 1097 :     template <class _OutIt, class _Traits1, class _Alloc1>
; 1098 :     _OutIt format(_OutIt _Out, const basic_string<char_type, _Traits1, _Alloc1>& _Fmt,
; 1099 :         regex_constants::match_flag_type _Flags = regex_constants::format_default) const {
; 1100 :         // format text, replacing matches
; 1101 :         _Seek_wrapped(_Out, _Format1(_Get_unwrapped_unverified(_Out), _Fmt.data(), _Fmt.data() + _Fmt.size(), _Flags));
; 1102 :         return _Out;
; 1103 :     }
; 1104 : 
; 1105 :     template <class _Traits1, class _Alloc1>
; 1106 :     _NODISCARD basic_string<char_type, _Traits1, _Alloc1> format(const basic_string<char_type, _Traits1, _Alloc1>& _Fmt,
; 1107 :         regex_constants::match_flag_type _Flags = regex_constants::format_default) const {
; 1108 :         // format text, replacing matches
; 1109 :         basic_string<char_type, _Traits1, _Alloc1> _Str;
; 1110 :         format(_STD back_inserter(_Str), _Fmt.data(), _Fmt.data() + _Fmt.size(), _Flags);
; 1111 :         return _Str;
; 1112 :     }
; 1113 : 
; 1114 :     _NODISCARD string_type format(
; 1115 :         const char_type* _Fmt_begin, regex_constants::match_flag_type _Flags = regex_constants::format_default) const {
; 1116 :         // format text, replacing matches
; 1117 :         return format(static_cast<string_type>(_Fmt_begin), _Flags);
; 1118 :     }
; 1119 : 
; 1120 :     _NODISCARD allocator_type get_allocator() const noexcept /* strengthened */ {
; 1121 :         return static_cast<allocator_type>(_Matches.get_allocator());
; 1122 :     }
; 1123 : 
; 1124 :     void swap(match_results& _Right) noexcept(_Is_nothrow_swappable<_BidIt>::value) /* strengthened */ {
; 1125 :         using _STD swap;
; 1126 :         _STD swap(_Ready, _Right._Ready);
; 1127 :         swap(_Org, _Right._Org); // intentional ADL
; 1128 :         _Matches.swap(_Right._Matches);
; 1129 :         _STD swap(_Prefix, _Right._Prefix);
; 1130 :         _STD swap(_Suffix, _Right._Suffix);
; 1131 :     }
; 1132 : 
; 1133 :     void _Resize(unsigned int _Nx) {
; 1134 :         _Matches.resize(_Nx);
; 1135 :     }
; 1136 : 
; 1137 :     _Elem& _Pfx() noexcept {
; 1138 :         return _Prefix;
; 1139 :     }
; 1140 : 
; 1141 :     _Elem& _Sfx() noexcept {
; 1142 :         return _Suffix;
; 1143 :     }
; 1144 : 
; 1145 :     _Elem& _Null() noexcept {
; 1146 :         return _Null_elem;
; 1147 :     }
; 1148 : 
; 1149 :     _Elem& _At(unsigned int _Sub) noexcept {
; 1150 :         return _Matches[_Sub];
; 1151 :     }
; 1152 : 
; 1153 :     _Elem _At(unsigned int _Sub) const noexcept {
; 1154 :         return _Matches[_Sub];
; 1155 :     }
; 1156 : 
; 1157 :     _BidIt _Org = _BidIt();
; 1158 :     bool _Ready = false;
; 1159 : 
; 1160 : private:
; 1161 :     _MyCont _Matches;
; 1162 :     _Elem _Prefix;
; 1163 :     _Elem _Suffix;
; 1164 :     _Elem _Null_elem;
; 1165 : };
; 1166 : 
; 1167 : _EXPORT_STD template <class _BidIt, class _Alloc>
; 1168 : _NODISCARD bool operator==(const match_results<_BidIt, _Alloc>& _Left, const match_results<_BidIt, _Alloc>& _Right) {
; 1169 :     if (!_Left.ready() && !_Right.ready()) {
; 1170 :         return true;
; 1171 :     } else if (!_Left.ready() || !_Right.ready()) {
; 1172 :         return false;
; 1173 :     } else if (_Left.empty() && _Right.empty()) {
; 1174 :         return true;
; 1175 :     } else if (_Left.empty() || _Right.empty()) {
; 1176 :         return false;
; 1177 :     } else {
; 1178 :         return _Left.size() == _Right.size() && _Left.prefix() == _Right.prefix() && _Left.suffix() == _Right.suffix()
; 1179 :             && _STD equal(_Left.begin(), _Left.end(), _Right.begin());
; 1180 :     }
; 1181 : }
; 1182 : 
; 1183 : #if !_HAS_CXX20
; 1184 : template <class _BidIt, class _Alloc>
; 1185 : _NODISCARD bool operator!=(const match_results<_BidIt, _Alloc>& _Left, const match_results<_BidIt, _Alloc>& _Right) {
; 1186 :     return !(_Left == _Right);
; 1187 : }
; 1188 : #endif // !_HAS_CXX20
; 1189 : 
; 1190 : _INLINE_VAR constexpr unsigned int _BRE_MAX_GRP = 9U;
; 1191 : 
; 1192 : _INLINE_VAR constexpr unsigned int _Bmp_max   = 256U; // must fit in an unsigned int
; 1193 : _INLINE_VAR constexpr unsigned int _Bmp_shift = 3U;
; 1194 : _INLINE_VAR constexpr unsigned int _Bmp_chrs  = 1U << _Bmp_shift; // # of bits to be stored in each char
; 1195 : _INLINE_VAR constexpr unsigned int _Bmp_mask  = _Bmp_chrs - 1U;
; 1196 : _INLINE_VAR constexpr unsigned int _Bmp_size  = (_Bmp_max + _Bmp_chrs - 1U) / _Bmp_chrs;
; 1197 : 
; 1198 : _INLINE_VAR constexpr unsigned int _Buf_incr        = 16U;
; 1199 : _INLINE_VAR constexpr unsigned int _ARRAY_THRESHOLD = 4U;
; 1200 : 
; 1201 : enum _Node_flags : int { // flags for nfa nodes with special properties
; 1202 :     _Fl_none    = 0x00,
; 1203 :     _Fl_negate  = 0x01,
; 1204 :     _Fl_greedy  = 0x02,
; 1205 :     _Fl_final   = 0x04,
; 1206 :     _Fl_longest = 0x08
; 1207 : };
; 1208 : 
; 1209 : _BITMASK_OPS(_EMPTY_ARGUMENT, _Node_flags)
; 1210 : 
; 1211 : enum _Node_type { // type flag for nfa nodes
; 1212 :     _N_none,
; 1213 :     _N_nop,
; 1214 :     _N_bol,
; 1215 :     _N_eol,
; 1216 :     _N_wbound,
; 1217 :     _N_dot,
; 1218 :     _N_str,
; 1219 :     _N_class,
; 1220 :     _N_group,
; 1221 :     _N_end_group,
; 1222 :     _N_assert,
; 1223 :     _N_neg_assert,
; 1224 :     _N_end_assert,
; 1225 :     _N_capture,
; 1226 :     _N_end_capture,
; 1227 :     _N_back,
; 1228 :     _N_if,
; 1229 :     _N_endif,
; 1230 :     _N_rep,
; 1231 :     _N_end_rep,
; 1232 :     _N_begin,
; 1233 :     _N_end
; 1234 : };
; 1235 : 
; 1236 : template <class _Elem>
; 1237 : struct _Buf { // character buffer
; 1238 :     _Buf() = default;
; 1239 : 
; 1240 :     ~_Buf() noexcept {
; 1241 :         _CSTD free(_Chrs);
; 1242 :     }
; 1243 : 
; 1244 :     unsigned int _Size() const noexcept {
; 1245 :         return _Nchrs;
; 1246 :     }
; 1247 : 
; 1248 :     _Elem _At(unsigned int _Idx) const {
; 1249 : #if _ITERATOR_DEBUG_LEVEL != 0
; 1250 :         _STL_VERIFY(_Idx < _Nchrs, "regex buffer subscript out of range");
; 1251 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 1252 : 
; 1253 :         return _Chrs[_Idx];
; 1254 :     }
; 1255 : 
; 1256 :     const _Elem* _Str() const {
; 1257 :         return _Chrs;
; 1258 :     }
; 1259 : 
; 1260 :     void _Insert(_Elem _Ch) { // append _Ch
; 1261 :         if (_Sz <= _Nchrs) {
; 1262 :             _Expand(_Nchrs + _Buf_incr);
; 1263 :         }
; 1264 : 
; 1265 :         _Chrs[_Nchrs++] = _Ch;
; 1266 :     }
; 1267 : 
; 1268 :     _Elem _Del() noexcept { // remove and return last character
; 1269 :         return _Chrs[--_Nchrs];
; 1270 :     }
; 1271 : 
; 1272 :     template <class _FwdIt>
; 1273 :     void _Insert(_FwdIt _First, _FwdIt _Last) { // append multiple characters
; 1274 :         while (_First != _Last) {
; 1275 :             _Insert(*_First++);
; 1276 :         }
; 1277 :     }
; 1278 : 
; 1279 : private:
; 1280 :     void _Expand(unsigned int _Len) { // expand buffer to hold _Len characters
; 1281 :         _Elem* _Tmp = static_cast<_Elem*>(_CSTD realloc(_Chrs, _Get_size_of_n<sizeof(_Elem)>(_Len)));
; 1282 :         if (!_Tmp) {
; 1283 :             _Xbad_alloc();
; 1284 :         }
; 1285 : 
; 1286 :         _Chrs = _Tmp;
; 1287 :         _Sz   = _Len;
; 1288 :     }
; 1289 : 
; 1290 :     unsigned int _Sz    = 0;
; 1291 :     unsigned int _Nchrs = 0;
; 1292 :     _Elem* _Chrs        = nullptr;
; 1293 : };
; 1294 : 
; 1295 : struct _Bitmap { // accelerator table for small character values
; 1296 :     _Bitmap() = default;
; 1297 : 
; 1298 :     template <class _Elem>
; 1299 :     void _Mark(_Elem _Ch) noexcept { // mark character _Ch
; 1300 :         static_assert(is_unsigned_v<_Elem>, "_Elem must be unsigned");
; 1301 :         unsigned int _Wide = _Ch;
; 1302 :         _Chrs[_Wide >> _Bmp_shift] |= (1 << (_Wide & _Bmp_mask));
; 1303 :     }
; 1304 : 
; 1305 :     template <class _Elem>
; 1306 :     bool _Find(_Elem _Ch) const noexcept {
; 1307 :         static_assert(is_unsigned_v<_Elem>, "_Elem must be unsigned");
; 1308 :         unsigned int _Wide = _Ch;
; 1309 :         return (_Chrs[_Wide >> _Bmp_shift] & (1 << (_Wide & _Bmp_mask))) != 0;
; 1310 :     }
; 1311 : 
; 1312 : private:
; 1313 :     unsigned char _Chrs[_Bmp_size]{};
; 1314 : };
; 1315 : 
; 1316 : template <class _Elem>
; 1317 : struct _Sequence { // holds sequences of _Sz elements
; 1318 :     explicit _Sequence(unsigned int _Len) noexcept : _Sz(_Len) {}
; 1319 : 
; 1320 :     unsigned int _Sz;
; 1321 :     _Buf<_Elem> _Data;
; 1322 :     _Sequence* _Next = nullptr;
; 1323 : };
; 1324 : 
; 1325 : class _Node_base { // base class for all nfa nodes
; 1326 : public:
; 1327 :     explicit _Node_base(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Kind(_Ty), _Flags(_Fl) {}
; 1328 : 
; 1329 :     _Node_type _Kind;
; 1330 :     _Node_flags _Flags;
; 1331 :     _Node_base* _Next = nullptr;
; 1332 :     _Node_base* _Prev = nullptr;
; 1333 : 
; 1334 :     virtual ~_Node_base() noexcept {}
; 1335 : };
; 1336 : 
; 1337 : inline void _Destroy_node(_Node_base* _Nx, _Node_base* _Ne = nullptr) noexcept { // destroy sublist of nodes
; 1338 :     while (_Nx != _Ne && _Nx) { // destroy node
; 1339 :         _Node_base* _Tmp = _Nx;
; 1340 :         _Nx              = _Nx->_Next;
; 1341 :         _Tmp->_Next      = nullptr;
; 1342 :         delete _Tmp;
; 1343 :     }
; 1344 : }
; 1345 : 
; 1346 : class _Root_node : public _Node_base { // root of parse tree
; 1347 : public:
; 1348 :     _Root_node() noexcept : _Node_base(_N_begin) {
; 1349 :         static_assert(sizeof(_Refs) == sizeof(_Atomic_counter_t), "invalid _Refs size");
; 1350 :     }
; 1351 : 
; 1352 :     regex_constants::syntax_option_type _Fl{};
; 1353 :     unsigned int _Loops = 0;
; 1354 :     unsigned int _Marks = 0;
; 1355 :     unsigned int _Refs  = 0;
; 1356 : };
; 1357 : 
; 1358 : class _Node_end_group : public _Node_base { // node that marks end of a group
; 1359 : public:
; 1360 :     _Node_end_group(_Node_type _Ty, _Node_flags _Fl, _Node_base* _Bx) noexcept : _Node_base(_Ty, _Fl), _Back(_Bx) {}
; 1361 : 
; 1362 :     _Node_base* _Back;
; 1363 : };
; 1364 : 
; 1365 : class _Node_assert : public _Node_base { // node that holds an ECMAScript assertion
; 1366 : public:
; 1367 :     explicit _Node_assert(_Node_type _Ty, _Node_flags _Fl = _Fl_none) noexcept : _Node_base(_Ty, _Fl) {}
; 1368 : 
; 1369 :     ~_Node_assert() noexcept {
; 1370 :         _Destroy_node(_Child);
; 1371 :     }
; 1372 : 
; 1373 :     _Node_base* _Child = nullptr;
; 1374 : };
; 1375 : 
; 1376 : class _Node_capture : public _Node_base { // node that marks beginning of a capture group
; 1377 : public:
; 1378 :     explicit _Node_capture(unsigned int _Ix) noexcept : _Node_base(_N_capture, _Fl_none), _Idx(_Ix) {}
; 1379 : 
; 1380 :     unsigned int _Idx;
; 1381 : };
; 1382 : 
; 1383 : class _Node_back : public _Node_base { // node that holds a back reference
; 1384 : public:
; 1385 :     explicit _Node_back(unsigned int _Ix) noexcept : _Node_base(_N_back, _Fl_none), _Idx(_Ix) {}
; 1386 : 
; 1387 :     unsigned int _Idx;
; 1388 : };
; 1389 : 
; 1390 : template <class _Elem>
; 1391 : class _Node_str : public _Node_base { // node that holds text
; 1392 : public:
; 1393 :     explicit _Node_str(_Node_flags _Fl = _Fl_none) noexcept : _Node_base(_N_str, _Fl) {}
; 1394 : 
; 1395 :     _Buf<_Elem> _Data;
; 1396 : };
; 1397 : 
; 1398 : template <class _Elem, class _RxTraits>
; 1399 : class _Node_class : public _Node_base { // node that holds a character class (POSIX bracket expression)
; 1400 : public:
; 1401 :     explicit _Node_class(_Node_type _Ty = _N_class, _Node_flags _Fl = _Fl_none) noexcept : _Node_base(_Ty, _Fl) {}
; 1402 : 
; 1403 :     ~_Node_class() noexcept {
; 1404 :         _Tidy(_Coll);
; 1405 :         delete _Small;
; 1406 :         delete _Large;
; 1407 :         delete _Ranges;
; 1408 :         _Tidy(_Equiv);
; 1409 :     }
; 1410 : 
; 1411 :     void _Tidy(_Sequence<_Elem>* _Head) noexcept { // clean up a list of sequences
; 1412 :         while (_Head) { // delete the head of the list
; 1413 :             _Sequence<_Elem>* _Temp = _Head;
; 1414 :             _Head                   = _Head->_Next;
; 1415 :             delete _Temp;
; 1416 :         }
; 1417 :     }
; 1418 : 
; 1419 :     _Sequence<_Elem>* _Coll = nullptr;
; 1420 :     _Bitmap* _Small         = nullptr;
; 1421 :     _Buf<_Elem>* _Large     = nullptr;
; 1422 :     _Buf<_Elem>* _Ranges    = nullptr;
; 1423 :     typename _RxTraits::char_class_type _Classes{};
; 1424 :     _Sequence<_Elem>* _Equiv = nullptr;
; 1425 : };
; 1426 : 
; 1427 : class _Node_endif : public _Node_base { // node that marks the end of an alternative
; 1428 : public:
; 1429 :     _Node_endif() noexcept : _Node_base(_N_endif, _Fl_none) {}
; 1430 : };
; 1431 : 
; 1432 : class _Node_if : public _Node_base { // node that marks the beginning of an alternative
; 1433 : public:
; 1434 :     explicit _Node_if(_Node_base* _End) noexcept
; 1435 :         : _Node_base(_N_if, _Fl_none), _Endif(static_cast<_Node_endif*>(_End)) {}
; 1436 : 
; 1437 :     ~_Node_if() noexcept {
; 1438 :         _Node_if* _Cur = _Child;
; 1439 :         while (_Cur) { // destroy branch
; 1440 :             _Node_if* _Tmp = _Cur;
; 1441 :             _Cur           = _Cur->_Child;
; 1442 :             _Tmp->_Child   = nullptr;
; 1443 :             _Destroy_node(_Tmp, _Endif);
; 1444 :         }
; 1445 :     }
; 1446 : 
; 1447 :     _Node_endif* _Endif;
; 1448 :     _Node_if* _Child = nullptr;
; 1449 : };
; 1450 : 
; 1451 : class _Node_rep;
; 1452 : 
; 1453 : class _Node_end_rep : public _Node_base { // node that marks the end of a repetition
; 1454 : public:
; 1455 :     _Node_end_rep() noexcept : _Node_base(_N_end_rep) {}
; 1456 : 
; 1457 :     _Node_rep* _Begin_rep = nullptr;
; 1458 : 
; 1459 :     _Node_end_rep& operator=(const _Node_end_rep&) = delete;
; 1460 : };
; 1461 : 
; 1462 : struct _Loop_vals_t { // storage for loop administration
; 1463 :     int _Loop_idx;
; 1464 :     void* _Loop_iter;
; 1465 : };
; 1466 : 
; 1467 : class _Node_rep : public _Node_base { // node that marks the beginning of a repetition
; 1468 : public:
; 1469 :     _Node_rep(bool _Greedy, int _Min_, int _Max_, _Node_end_rep* _End, unsigned int _Number) noexcept
; 1470 :         : _Node_base(_N_rep, _Greedy ? _Fl_greedy : _Fl_none), _Min(_Min_), _Max(_Max_), _End_rep(_End),
; 1471 :           _Loop_number(_Number) {}
; 1472 : 
; 1473 :     const int _Min;
; 1474 :     const int _Max;
; 1475 :     _Node_end_rep* _End_rep;
; 1476 :     unsigned int _Loop_number;
; 1477 :     int _Simple_loop = -1; // -1 undetermined, 0 contains if/do, 1 simple
; 1478 : 
; 1479 :     _Node_rep& operator=(const _Node_rep&) = delete;
; 1480 : };
; 1481 : 
; 1482 : template <class _FwdIt, class _Elem, class _RxTraits>
; 1483 : class _Builder { // provides operations used by _Parser to build the nfa
; 1484 : public:
; 1485 :     using _Difft = typename iterator_traits<_FwdIt>::difference_type;
; 1486 : 
; 1487 :     _Builder(const _RxTraits& _Tr, regex_constants::syntax_option_type);
; 1488 :     bool _Beg_expr() const;
; 1489 :     void _Setlong();
; 1490 :     // _Discard_pattern is an ABI zombie name
; 1491 :     void _Tidy() noexcept;
; 1492 :     _Node_base* _Getmark() const;
; 1493 : 
; 1494 :     void _Add_nop();
; 1495 :     void _Add_bol();
; 1496 :     void _Add_eol();
; 1497 :     void _Add_wbound();
; 1498 :     void _Add_dot();
; 1499 :     void _Add_char(_Elem _Ch);
; 1500 :     void _Add_class();
; 1501 :     void _Add_char_to_class(_Elem _Ch);
; 1502 :     void _Add_range(_Elem _Ex0, _Elem _Ex1);
; 1503 :     void _Add_named_class(_Regex_traits_base::char_class_type, bool = false);
; 1504 :     void _Add_equiv(_FwdIt, _FwdIt, _Difft);
; 1505 :     void _Add_coll(_FwdIt, _FwdIt, _Difft);
; 1506 :     _Node_base* _Begin_group();
; 1507 :     void _End_group(_Node_base* _Back);
; 1508 :     _Node_base* _Begin_assert_group(bool);
; 1509 :     void _End_assert_group(_Node_base*);
; 1510 :     _Node_base* _Begin_capture_group(unsigned int _Idx);
; 1511 :     void _Add_backreference(unsigned int _Idx);
; 1512 :     _Node_base* _Begin_if(_Node_base* _Start);
; 1513 :     void _Else_if(_Node_base*, _Node_base*);
; 1514 :     void _Add_rep(int _Min, int _Max, bool _Greedy);
; 1515 :     void _Negate();
; 1516 :     void _Mark_final();
; 1517 :     _Root_node* _End_pattern();
; 1518 : 
; 1519 : private:
; 1520 :     _Node_base* _Link_node(_Node_base*);
; 1521 :     static void _Insert_node(_Node_base*, _Node_base*);
; 1522 :     _Node_base* _New_node(_Node_type _Kind);
; 1523 :     void _Add_str_node();
; 1524 :     bool _Beg_expr(_Node_base*) const;
; 1525 :     void _Add_char_to_bitmap(_Elem _Ch);
; 1526 :     void _Add_char_to_array(_Elem _Ch);
; 1527 :     void _Add_elts(_Node_class<_Elem, _RxTraits>*, _Regex_traits_base::char_class_type, bool);
; 1528 :     void _Char_to_elts(_FwdIt, _FwdIt, _Difft, _Sequence<_Elem>**);
; 1529 : 
; 1530 :     _Root_node* _Root;
; 1531 :     _Node_base* _Current;
; 1532 :     regex_constants::syntax_option_type _Flags;
; 1533 :     const _RxTraits& _Traits;
; 1534 :     const int _Bmax; // Do not use; use _Get_bmax instead.
; 1535 :     const int _Tmax; // Do not use; use _Get_tmax instead.
; 1536 : 
; 1537 :     unsigned int _Get_bmax() const;
; 1538 :     unsigned int _Get_tmax() const;
; 1539 : 
; 1540 : public:
; 1541 :     _Builder& operator=(const _Builder&) = delete;
; 1542 : };
; 1543 : 
; 1544 : template <class _BidIt>
; 1545 : class _Bt_state_t { // holds the state needed for backtracking
; 1546 : public:
; 1547 :     _BidIt _Cur;
; 1548 :     vector<bool> _Grp_valid;
; 1549 : };
; 1550 : 
; 1551 : template <class _BidIt>
; 1552 : class _Tgt_state_t : public _Bt_state_t<_BidIt> { // holds the current state of the match
; 1553 : public:
; 1554 :     struct _Grp_t { // stores a pair of iterators
; 1555 :         _BidIt _Begin;
; 1556 :         _BidIt _End;
; 1557 :     };
; 1558 : 
; 1559 :     vector<_Grp_t> _Grps;
; 1560 : 
; 1561 :     void operator=(const _Bt_state_t<_BidIt>& _Other) {
; 1562 :         static_cast<_Bt_state_t<_BidIt>&>(*this) = _Other;
; 1563 :     }
; 1564 : };
; 1565 : 
; 1566 : template <class _BidIt, class _Elem, class _RxTraits, class _It>
; 1567 : class _Matcher { // provides ways to match a regular expression to a text sequence
; 1568 : public:
; 1569 :     _Matcher(_It _Pfirst, _It _Plast, const _RxTraits& _Tr, _Root_node* _Re, unsigned int _Nx,
; 1570 :         regex_constants::syntax_option_type _Sf, regex_constants::match_flag_type _Mf)
; 1571 :         : _End(_Plast), _First(_Pfirst), _Rep(_Re), _Sflags(_Sf), _Mflags(_Mf), _Ncap(static_cast<int>(_Nx)),
; 1572 :           _Longest((_Re->_Flags & _Fl_longest) && !(_Mf & regex_constants::match_any)), _Traits(_Tr) {
; 1573 :         _Loop_vals.resize(_Re->_Loops);
; 1574 :         _Adl_verify_range(_Pfirst, _Plast);
; 1575 :     }
; 1576 : 
; 1577 :     void _Setf(regex_constants::match_flag_type _Mf) { // set specified flags
; 1578 :         _Mflags |= _Mf;
; 1579 :     }
; 1580 : 
; 1581 :     void _Clearf(regex_constants::match_flag_type _Mf) { // clear specified flags
; 1582 :         _Mflags &= ~_Mf;
; 1583 :     }
; 1584 : 
; 1585 :     template <class _Alloc>
; 1586 :     bool _Match(_It _Pfirst, match_results<_BidIt, _Alloc>* _Matches, bool _Full_match) {
; 1587 :         // try to match
; 1588 :         _First = _Pfirst;
; 1589 :         return _Match(_Matches, _Full_match);
; 1590 :     }
; 1591 : 
; 1592 :     template <class _Alloc>
; 1593 :     bool _Match(match_results<_BidIt, _Alloc>* _Matches, bool _Full_match) {
; 1594 :         // try to match
; 1595 :         if (_Matches) { // clear _Matches before doing work
; 1596 :             _Matches->_Ready = true;
; 1597 :             _Matches->_Resize(0);
; 1598 :         }
; 1599 : 
; 1600 :         _Begin          = _First;
; 1601 :         _Tgt_state._Cur = _First;
; 1602 :         _Tgt_state._Grp_valid.resize(_Get_ncap());
; 1603 :         _Tgt_state._Grps.resize(_Get_ncap());
; 1604 :         _Cap                  = static_cast<bool>(_Matches);
; 1605 :         _Full                 = _Full_match;
; 1606 :         _Max_complexity_count = _REGEX_MAX_COMPLEXITY_COUNT;
; 1607 :         _Max_stack_count      = _REGEX_MAX_STACK_COUNT;
; 1608 : 
; 1609 :         _Matched = false;
; 1610 : 
; 1611 :         if (!_Match_pat(_Rep)) {
; 1612 :             return false;
; 1613 :         }
; 1614 : 
; 1615 :         if (_Matches) { // copy results to _Matches
; 1616 :             _Matches->_Resize(_Get_ncap());
; 1617 :             for (unsigned int _Idx = 0; _Idx < _Get_ncap(); ++_Idx) { // copy submatch _Idx
; 1618 :                 if (_Res._Grp_valid[_Idx]) { // copy successful match
; 1619 :                     _Matches->_At(_Idx).matched = true;
; 1620 :                     _Matches->_At(_Idx).first   = _Res._Grps[_Idx]._Begin;
; 1621 :                     _Matches->_At(_Idx).second  = _Res._Grps[_Idx]._End;
; 1622 :                 } else { // copy failed match
; 1623 :                     _Matches->_At(_Idx).matched = false;
; 1624 :                     _Matches->_At(_Idx).first   = _End;
; 1625 :                     _Matches->_At(_Idx).second  = _End;
; 1626 :                 }
; 1627 :             }
; 1628 :             _Matches->_Org           = _Begin;
; 1629 :             _Matches->_Pfx().first   = _Begin;
; 1630 :             _Matches->_Pfx().second  = _Matches->_At(0).first;
; 1631 :             _Matches->_Pfx().matched = _Matches->_Pfx().first != _Matches->_Pfx().second;
; 1632 : 
; 1633 :             _Matches->_Sfx().first   = _Matches->_At(0).second;
; 1634 :             _Matches->_Sfx().second  = _End;
; 1635 :             _Matches->_Sfx().matched = _Matches->_Sfx().first != _Matches->_Sfx().second;
; 1636 : 
; 1637 :             _Matches->_Null().first  = _End;
; 1638 :             _Matches->_Null().second = _End;
; 1639 :         }
; 1640 :         return true;
; 1641 :     }
; 1642 : 
; 1643 :     _BidIt _Skip(_BidIt, _BidIt, _Node_base* = nullptr);
; 1644 : 
; 1645 : private:
; 1646 :     _Tgt_state_t<_It> _Tgt_state;
; 1647 :     _Tgt_state_t<_It> _Res;
; 1648 :     vector<_Loop_vals_t> _Loop_vals;
; 1649 : 
; 1650 :     bool _Do_if(_Node_if*);
; 1651 :     bool _Do_rep0(_Node_rep*, bool);
; 1652 :     bool _Do_rep(_Node_rep*, bool, int);
; 1653 :     bool _Do_class(_Node_base*);
; 1654 :     bool _Match_pat(_Node_base*);
; 1655 :     bool _Better_match();
; 1656 :     bool _Is_wbound() const;
; 1657 : 
; 1658 :     unsigned int _Get_ncap() const;
; 1659 : 
; 1660 :     _It _Begin;
; 1661 :     _It _End;
; 1662 :     _It _First;
; 1663 :     _Node_base* _Rep;
; 1664 :     regex_constants::syntax_option_type _Sflags;
; 1665 :     regex_constants::match_flag_type _Mflags;
; 1666 :     bool _Matched = false;
; 1667 :     bool _Cap;
; 1668 :     int _Ncap; // Do not use. Use _Get_ncap instead.
; 1669 :     bool _Longest;
; 1670 :     const _RxTraits& _Traits;
; 1671 :     bool _Full;
; 1672 :     long _Max_complexity_count;
; 1673 :     long _Max_stack_count;
; 1674 : 
; 1675 : public:
; 1676 :     _Matcher& operator=(const _Matcher&) = delete;
; 1677 : };
; 1678 : 
; 1679 : enum _Prs_ret { // indicate class element type
; 1680 :     _Prs_none,
; 1681 :     _Prs_chr,
; 1682 :     _Prs_set
; 1683 : };
; 1684 : 
; 1685 : template <class _FwdIt, class _Elem, class _RxTraits>
; 1686 : class _Parser { // parse a regular expression
; 1687 : public:
; 1688 :     using char_class_type = typename _RxTraits::char_class_type;
; 1689 : 
; 1690 :     _Parser(const _RxTraits& _Tr, _FwdIt _Pfirst, _FwdIt _Plast, regex_constants::syntax_option_type _Fx);
; 1691 :     _Root_node* _Compile();
; 1692 : 
; 1693 :     unsigned int _Mark_count() const noexcept {
; 1694 :         return _Grp_idx + 1;
; 1695 :     }
; 1696 : 
; 1697 : private:
; 1698 :     // lexing
; 1699 :     void _Error(regex_constants::error_type);
; 1700 : 
; 1701 :     bool _Is_esc() const;
; 1702 :     void _Trans();
; 1703 :     void _Next();
; 1704 :     void _Expect(_Meta_type, regex_constants::error_type);
; 1705 : 
; 1706 :     // parsing
; 1707 :     int _Do_digits(int _Base, int _Count, regex_constants::error_type _Error_type);
; 1708 :     bool _DecimalDigits(regex_constants::error_type _Error_type);
; 1709 :     void _HexDigits(int);
; 1710 :     bool _OctalDigits();
; 1711 :     void _Do_ex_class(_Meta_type);
; 1712 :     bool _CharacterClassEscape(bool);
; 1713 :     _Prs_ret _ClassEscape(bool);
; 1714 :     _Prs_ret _ClassAtom();
; 1715 :     void _ClassRanges();
; 1716 :     void _CharacterClass();
; 1717 :     bool _IdentityEscape();
; 1718 :     bool _IsIdentityEscape() const;
; 1719 :     bool _Do_ffn(_Elem);
; 1720 :     bool _Do_ffnx(_Elem);
; 1721 :     bool _CharacterEscape();
; 1722 :     void _AtomEscape();
; 1723 :     void _Do_capture_group();
; 1724 :     void _Do_noncapture_group();
; 1725 :     void _Do_assert_group(bool);
; 1726 :     bool _Wrapped_disjunction();
; 1727 :     void _Quantifier();
; 1728 :     bool _Alternative();
; 1729 :     void _Disjunction();
; 1730 : 
; 1731 :     _FwdIt _Pat;
; 1732 :     _FwdIt _Begin;
; 1733 :     _FwdIt _End;
; 1734 :     unsigned int _Grp_idx = 0;

  00039	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 1735 :     int _Disj_count       = 0;

  00040	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00047	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0004e	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00055	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0

; 2810 :     _CONSTEXPR20 _Vb_val(const _Alloc& _Al) noexcept : _Myvec(static_cast<_Alvbase>(_Al)), _Mysize(0) {

  0005c	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 4568 :     : _Pat(_Pfirst), _Begin(_Pfirst), _End(_Plast), _Nfa(_Tr, _Fx), _Traits(_Tr), _Flags(_Fx) {

  00063	8b 5d 14	 mov	 ebx, DWORD PTR __Fx$[ebp]
  00066	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  00069	8b 75 08	 mov	 esi, DWORD PTR __Tr$[ebp]
  0006c	53		 push	 ebx
  0006d	56		 push	 esi
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00075	e8 00 00 00 00	 call	 ??0?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@W4syntax_option_type@regex_constants@1@@Z ; std::_Builder<char const *,char,std::regex_traits<char> >::_Builder<char const *,char,std::regex_traits<char> >
  0007a	89 5f 40	 mov	 DWORD PTR [edi+64], ebx

; 116  :     _BITMASK_OPS(_EXPORT_STD, syntax_option_type)

  0007d	83 e3 3f	 and	 ebx, 63			; 0000003fH

; 4568 :     : _Pat(_Pfirst), _Begin(_Pfirst), _End(_Plast), _Nfa(_Tr, _Fx), _Traits(_Tr), _Flags(_Fx) {

  00080	89 77 3c	 mov	 DWORD PTR [edi+60], esi

; 4569 : 
; 4570 :     constexpr unsigned int _ECMA_flags = _L_ext_rep | _L_alt_pipe | _L_nex_grp | _L_nex_rep | _L_nc_grp | _L_asrt_gen
; 4571 :                                        | _L_asrt_wrd | _L_bckr | _L_ngr_rep | _L_esc_uni | _L_esc_hex | _L_esc_bsl
; 4572 :                                        | _L_esc_ffn | _L_esc_wsd | _L_esc_ctrl | _L_bzr_chr | _L_grp_esc | _L_ident_ECMA
; 4573 :                                        | _L_empty_grp;
; 4574 : 
; 4575 :     constexpr unsigned int _Basic_flags =
; 4576 :         _L_bckr | _L_lim_bckr | _L_anch_rstr | _L_star_beg | _L_empty_grp | _L_brk_rstr | _L_mtch_long;
; 4577 : 
; 4578 :     constexpr unsigned int _Grep_flags = _Basic_flags | _L_alt_nl | _L_no_nl;
; 4579 : 
; 4580 :     constexpr unsigned int _Extended_flags =
; 4581 :         _L_ext_rep | _L_alt_pipe | _L_nex_grp | _L_nex_rep | _L_ident_ERE | _L_paren_bal | _L_brk_rstr | _L_mtch_long;
; 4582 : 
; 4583 :     constexpr unsigned int _Awk_flags = _Extended_flags | _L_esc_oct | _L_esc_ffn | _L_esc_ffnx | _L_ident_awk;
; 4584 : 
; 4585 :     constexpr unsigned int _Egrep_flags = _Extended_flags | _L_alt_nl | _L_no_nl;
; 4586 : 
; 4587 :     const regex_constants::syntax_option_type _Masked = _Flags & regex_constants::_Gmask;
; 4588 : 
; 4589 :     if (_Masked == regex_constants::ECMAScript || _Masked == 0) {

  00083	83 fb 01	 cmp	 ebx, 1
  00086	74 7b		 je	 SHORT $LN4@Parser
  00088	85 db		 test	 ebx, ebx
  0008a	74 77		 je	 SHORT $LN4@Parser

; 4591 :     } else if (_Masked == regex_constants::basic) {

  0008c	83 fb 02	 cmp	 ebx, 2
  0008f	75 11		 jne	 SHORT $LN5@Parser

; 4603 :     }
; 4604 : 
; 4605 :     if (_L_flags & _L_mtch_long) {
; 4606 :         _Nfa._Setlong();

  00091	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  00094	c7 47 50 00 03
	00 6e		 mov	 DWORD PTR [edi+80], 1845494528 ; 6e000300H
  0009b	e8 00 00 00 00	 call	 ?_Setlong@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Setlong
  000a0	eb 68		 jmp	 SHORT $LN15@Parser
$LN5@Parser:

; 4592 :         _L_flags = _Basic_flags;
; 4593 :     } else if (_Masked == regex_constants::extended) {

  000a2	83 fb 04	 cmp	 ebx, 4
  000a5	75 11		 jne	 SHORT $LN7@Parser

; 4603 :     }
; 4604 : 
; 4605 :     if (_L_flags & _L_mtch_long) {
; 4606 :         _Nfa._Setlong();

  000a7	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  000aa	c7 47 50 1b 00
	80 70		 mov	 DWORD PTR [edi+80], 1887436827 ; 7080001bH
  000b1	e8 00 00 00 00	 call	 ?_Setlong@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Setlong
  000b6	eb 52		 jmp	 SHORT $LN15@Parser
$LN7@Parser:

; 4594 :         _L_flags = _Extended_flags;
; 4595 :     } else if (_Masked == regex_constants::awk) {

  000b8	83 fb 08	 cmp	 ebx, 8
  000bb	75 11		 jne	 SHORT $LN9@Parser

; 4603 :     }
; 4604 : 
; 4605 :     if (_L_flags & _L_mtch_long) {
; 4606 :         _Nfa._Setlong();

  000bd	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  000c0	c7 47 50 1b a0
	81 71		 mov	 DWORD PTR [edi+80], 1904320539 ; 7181a01bH
  000c7	e8 00 00 00 00	 call	 ?_Setlong@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Setlong
  000cc	eb 3c		 jmp	 SHORT $LN15@Parser
$LN9@Parser:

; 4596 :         _L_flags = _Awk_flags;
; 4597 :     } else if (_Masked == regex_constants::grep) {

  000ce	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000d1	75 11		 jne	 SHORT $LN11@Parser

; 4603 :     }
; 4604 : 
; 4605 :     if (_L_flags & _L_mtch_long) {
; 4606 :         _Nfa._Setlong();

  000d3	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  000d6	c7 47 50 04 03
	08 6e		 mov	 DWORD PTR [edi+80], 1846018820 ; 6e080304H
  000dd	e8 00 00 00 00	 call	 ?_Setlong@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Setlong
  000e2	eb 26		 jmp	 SHORT $LN15@Parser
$LN11@Parser:

; 4598 :         _L_flags = _Grep_flags;
; 4599 :     } else if (_Masked == regex_constants::egrep) {

  000e4	83 fb 20	 cmp	 ebx, 32			; 00000020H
  000e7	75 11		 jne	 SHORT $LN13@Parser

; 4603 :     }
; 4604 : 
; 4605 :     if (_L_flags & _L_mtch_long) {
; 4606 :         _Nfa._Setlong();

  000e9	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  000ec	c7 47 50 1f 00
	88 70		 mov	 DWORD PTR [edi+80], 1887961119 ; 7088001fH
  000f3	e8 00 00 00 00	 call	 ?_Setlong@?$_Builder@PBDDV?$regex_traits@D@std@@@std@@QAEXXZ ; std::_Builder<char const *,char,std::regex_traits<char> >::_Setlong
  000f8	eb 10		 jmp	 SHORT $LN15@Parser
$LN13@Parser:

; 4600 :         _L_flags = _Egrep_flags;
; 4601 :     } else {
; 4602 :         _L_flags = 0;

  000fa	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0
  00101	eb 07		 jmp	 SHORT $LN15@Parser
$LN4@Parser:

; 4590 :         _L_flags = _ECMA_flags;

  00103	c7 47 50 fb 5d
	77 08		 mov	 DWORD PTR [edi+80], 142040571 ; 08775dfbH
$LN15@Parser:

; 4607 :     }
; 4608 : 
; 4609 :     _Trans();

  0010a	8b cf		 mov	 ecx, edi
  0010c	e8 00 00 00 00	 call	 ?_Trans@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@AAEXXZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Trans

; 4610 : }

  00111	8b c7		 mov	 eax, edi
  00113	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00116	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011d	59		 pop	 ecx
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@PBD1W4syntax_option_type@regex_constants@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ ; std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@PBD1W4syntax_option_type@regex_constants@1@@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@PBD1W4syntax_option_type@regex_constants@1@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@PBD1W4syntax_option_type@regex_constants@1@@Z ENDP ; std::_Parser<char const *,char,std::regex_traits<char> >::_Parser<char const *,char,std::regex_traits<char> >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$regex_replace@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Result$ = 12						; size = 4
__First$ = 16						; size = 4
__Last$ = 20						; size = 4
__Re$ = 24						; size = 4
__Fmt$ = 28						; size = 4
__Flgs$ = 32						; size = 4
??$regex_replace@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z PROC ; std::regex_replace<std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >,std::regex_traits<char>,char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2342 :     regex_constants::match_flag_type _Flgs = regex_constants::match_default) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2343 :     // search and replace, iterator result, string format
; 2344 :     _Adl_verify_range(_First, _Last);
; 2345 :     _Seek_wrapped(_Result, _Regex_replace1(_Get_unwrapped_unverified(_Result), _Get_unwrapped(_First),

  00004	ff 75 20	 push	 DWORD PTR __Flgs$[ebp]
  00007	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000a	ff 75 1c	 push	 DWORD PTR __Fmt$[ebp]
  0000d	ff 75 18	 push	 DWORD PTR __Re$[ebp]
  00010	ff 75 14	 push	 DWORD PTR __Last$[ebp]
  00013	ff 75 10	 push	 DWORD PTR __First$[ebp]
  00016	ff 75 0c	 push	 DWORD PTR __Result$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??$_Regex_replace1@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PBDV?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@PBD1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z ; std::_Regex_replace1<std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,char const *,std::regex_traits<char>,char,std::char_traits<char>,std::allocator<char> >
  0001f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2346 :                                _Get_unwrapped(_Last), _Re, _Fmt, _Flgs));
; 2347 :     return _Result;

  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00027	89 08		 mov	 DWORD PTR [eax], ecx

; 2348 : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$regex_replace@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z ENDP ; std::regex_replace<std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >,std::regex_traits<char>,char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 3408 :         if (_Mypair._Myval2) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN7@unique_ptr

; 3299 :         delete _Ptr;

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	ff 10		 call	 DWORD PTR [eax]
$LN7@unique_ptr:

; 3409 :             _Mypair._Get_first()(_Mypair._Myval2);
; 3410 :         }
; 3411 :     }

  0000c	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
__Psave$3 = -20						; size = 4
__Lock$4 = -16						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
__Psave_guard$6 = 8					; size = 4
??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::collate<char> >, COMDAT

; 432  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 433  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 89   :             if (_Id == 0) { // still zero, allocate stamp

  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$collate@D@std@@2V0locale@2@A ; std::collate<char>::id

; 434  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$collate@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::collate<char> >::_Psave
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	89 5d ec	 mov	 DWORD PTR __Psave$3[ebp], ebx

; 89   :             if (_Id == 0) { // still zero, allocate stamp

  00048	85 ff		 test	 edi, edi
  0004a	75 2f		 jne	 SHORT $LN11@use_facet

; 90   :                 _BEGIN_LOCK(_LOCK_LOCALE)

  0004c	57		 push	 edi
  0004d	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 91   :                 if (_Id == 0) {

  00055	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$collate@D@std@@2V0locale@2@A, edi ; std::collate<char>::id
  0005b	75 10		 jne	 SHORT $LN12@use_facet

; 92   :                     _Id = static_cast<size_t>(++_Id_cnt);

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00062	40		 inc	 eax
  00063	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$collate@D@std@@2V0locale@2@A, eax ; std::collate<char>::id
$LN12@use_facet:

; 93   :                 }
; 94   :                 _END_LOCK()

  0006d	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00070	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00075	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$collate@D@std@@2V0locale@2@A ; std::collate<char>::id
$LN11@use_facet:

; 375  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0007b	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  0007e	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00085	89 4d f0	 mov	 DWORD PTR $T5[ebp], ecx
  00088	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0008b	3b 7a 0c	 cmp	 edi, DWORD PTR [edx+12]
  0008e	73 0c		 jae	 SHORT $LN19@use_facet
  00090	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00093	8b 34 01	 mov	 esi, DWORD PTR [ecx+eax]

; 376  :         if (_Facptr || !_Ptr->_Xparent) {

  00096	85 f6		 test	 esi, esi
  00098	75 60		 jne	 SHORT $LN39@use_facet
  0009a	eb 05		 jmp	 SHORT $LN42@use_facet
$LN19@use_facet:

; 95   :             }
; 96   :             return _Id;
; 97   :         }
; 98   : 
; 99   : #ifdef _CRTBLD // TRANSITION, ABI: preserved for binary compatibility
; 100  :         __CLR_OR_THIS_CALL operator size_t() {
; 101  :             return _Get_index();
; 102  :         }
; 103  : #endif // defined(_CRTBLD)
; 104  : 
; 105  :     private:
; 106  :         size_t _Id = 0; // the identifier stamp
; 107  : 
; 108  :         __PURE_APPDOMAIN_GLOBAL static int _Id_cnt;
; 109  :     };
; 110  : 
; 111  :     struct _Facet_guard;
; 112  : 
; 113  :     class _CRTIMP2_PURE_IMPORT facet : public _Facet_base, public _Crt_new_delete {
; 114  :         // base class for all locale facets, performs reference counting
; 115  :     private:
; 116  :         friend _Facet_guard;
; 117  : 
; 118  :     public:
; 119  :         static size_t __CLRCALL_OR_CDECL _Getcat(const facet** = nullptr, const locale* = nullptr) {
; 120  :             // get category value, or -1 if no corresponding C category
; 121  :             return static_cast<size_t>(-1);
; 122  :         }
; 123  : 
; 124  :         void __CLR_OR_THIS_CALL _Incref() noexcept override { // increment use count
; 125  :             _MT_INCR(_Myrefs);
; 126  :         }
; 127  : 
; 128  :         _Facet_base* __CLR_OR_THIS_CALL _Decref() noexcept override { // decrement use count
; 129  :             if (_MT_DECR(_Myrefs) == 0) {
; 130  :                 return this;
; 131  :             }
; 132  : 
; 133  :             return nullptr;
; 134  :         }
; 135  : 
; 136  :     private:
; 137  :         _Atomic_counter_t _Myrefs; // the reference count
; 138  : 
; 139  :     protected:
; 140  :         explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0) noexcept // strengthened
; 141  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization
; 142  :         {}
; 143  : 
; 144  :         __CLR_OR_THIS_CALL ~facet() noexcept override {}
; 145  : 
; 146  :     public:
; 147  :         __CLR_OR_THIS_CALL facet(const facet&)            = delete;
; 148  :         facet& __CLR_OR_THIS_CALL operator=(const facet&) = delete;
; 149  :     };
; 150  : 
; 151  :     struct _NODISCARD _Facet_guard {
; 152  :         facet* _Target;
; 153  :         ~_Facet_guard() {
; 154  :             if (_Target) {
; 155  :                 delete _Target->_Decref();
; 156  :             }
; 157  :         }
; 158  :     };
; 159  : 
; 160  :     class _CRTIMP2_PURE_IMPORT _Locimp : public facet { // reference-counted actual implementation of a locale
; 161  :     protected:
; 162  :         __CLR_OR_THIS_CALL ~_Locimp() noexcept {
; 163  :             _Locimp_dtor(this);
; 164  :         }
; 165  : 
; 166  :     private:
; 167  :         static _Locimp* __CLRCALL_PURE_OR_CDECL _New_Locimp(bool _Transparent = false);
; 168  :         static _Locimp* __CLRCALL_PURE_OR_CDECL _New_Locimp(const _Locimp& _Right);
; 169  : 
; 170  :         static void __CLRCALL_PURE_OR_CDECL _Locimp_dtor(_Locimp*);
; 171  :         static void __CLRCALL_PURE_OR_CDECL _Locimp_Addfac(_Locimp*, facet*, size_t); // add a facet
; 172  :         static void __CLRCALL_PURE_OR_CDECL _Locimp_ctor(_Locimp*, const _Locimp&);
; 173  : 
; 174  :         friend locale;
; 175  : 
; 176  :         __CLR_OR_THIS_CALL _Locimp(bool _Transparent)
; 177  :             : locale::facet(1), _Facetvec(nullptr), _Facetcount(0), _Catmask(none), _Xparent(_Transparent), _Name("*") {
; 178  :         }
; 179  : 
; 180  :         __CLR_OR_THIS_CALL _Locimp(const _Locimp& _Right)
; 181  :             : locale::facet(1), _Facetvec(nullptr), _Facetcount(_Right._Facetcount), _Catmask(_Right._Catmask),
; 182  :               _Xparent(_Right._Xparent), _Name(_Right._Name.c_str()) {
; 183  :             _Locimp_ctor(this, _Right);
; 184  :         }
; 185  : 
; 186  :         void __CLR_OR_THIS_CALL _Addfac(facet* _Pfacet, size_t _Id) { // add a facet
; 187  :             _Locimp_Addfac(this, _Pfacet, _Id);
; 188  :         }
; 189  : 
; 190  :         static _Locimp* __CLRCALL_OR_CDECL _Makeloc(
; 191  :             const _Locinfo&, category, _Locimp*, const locale*); // make essential facets
; 192  : 
; 193  :         static void __CLRCALL_OR_CDECL _Makewloc(
; 194  :             const _Locinfo&, category, _Locimp*, const locale*); // make wchar_t facets
; 195  : 
; 196  : #if defined(_NATIVE_WCHAR_T_DEFINED) && !_ENFORCE_FACET_SPECIALIZATIONS
; 197  :         static void __CLRCALL_OR_CDECL _Makeushloc(
; 198  :             const _Locinfo&, category, _Locimp*, const locale*); // make ushort facets
; 199  : #endif // defined(_NATIVE_WCHAR_T_DEFINED) && !_ENFORCE_FACET_SPECIALIZATIONS
; 200  : 
; 201  :         static void __CLRCALL_OR_CDECL _Makexloc(
; 202  :             const _Locinfo&, category, _Locimp*, const locale*); // make remaining facets
; 203  : 
; 204  :         facet** _Facetvec; // pointer to vector of facets
; 205  :         size_t _Facetcount; // size of vector of facets
; 206  :         category _Catmask; // mask describing implemented categories
; 207  :         bool _Xparent; // true if locale is transparent
; 208  :         _Yarn<char> _Name; // locale name, or "*" if not known
; 209  : 
; 210  :         __PURE_APPDOMAIN_GLOBAL static _Locimp* _Clocptr;
; 211  : 
; 212  :     public:
; 213  :         _Locimp& __CLR_OR_THIS_CALL operator=(const _Locimp&) = delete;
; 214  :     };
; 215  : 
; 216  :     template <class _Elem, class _Traits, class _Alloc>
; 217  :     bool operator()(
; 218  :         const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) const {
; 219  :         // compare _Left and _Right strings using collate facet in locale
; 220  :         const auto& _Coll_fac = _STD use_facet<_STD collate<_Elem>>(*this);
; 221  : 
; 222  :         const _Elem* const _Left_data  = _Left.data();
; 223  :         const _Elem* const _Right_data = _Right.data();
; 224  :         return _Coll_fac.compare(_Left_data, _Left_data + _Left.size(), _Right_data, _Right_data + _Right.size()) < 0;
; 225  :     }
; 226  : 
; 227  :     template <class _Facet>
; 228  :     locale combine(const locale& _Loc) const { // combine two locales
; 229  :         _Facet* _Facptr;
; 230  : 
; 231  :         _TRY_BEGIN
; 232  :         _Facptr = const_cast<_Facet*>(_STD addressof(_STD use_facet<_Facet>(_Loc)));
; 233  :         _CATCH_ALL
; 234  :         _Xruntime_error("locale::combine facet missing");
; 235  :         _CATCH_END
; 236  : 
; 237  :         _Locimp* _Newimp = _Locimp::_New_Locimp(*_Ptr);
; 238  :         _Newimp->_Addfac(_Facptr, _Facet::id._Get_index());
; 239  :         _Newimp->_Catmask = none;
; 240  :         _Newimp->_Name    = "*";
; 241  :         return locale{_Secret_locale_construct_tag{}, _Newimp};
; 242  :     }
; 243  : 
; 244  :     template <class _Facet>
; 245  :     locale(const locale& _Loc, const _Facet* _Facptr) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {
; 246  :         if (_Facptr) { // replace facet
; 247  :             _Ptr->_Addfac(const_cast<_Facet*>(_Facptr), _Facet::id._Get_index());
; 248  :             _Ptr->_Catmask = none;
; 249  :             _Ptr->_Name    = "*";
; 250  :         }
; 251  :     }
; 252  : 
; 253  : #pragma warning(push)
; 254  : #pragma warning(disable : 26495) // Variable 'std::locale::_Ptr' is uninitialized.
; 255  :                                  // Always initialize a member variable (type.6).
; 256  : 
; 257  :     // We must not explicitly initialize _Ptr here; we rely on it maintaining the value
; 258  :     // previously created in its storage. To be precise:
; 259  :     // In locale0.cpp, locale::_Init() uses True Placement New at classic_locale's address,
; 260  :     // and classic_locale is constructed from the _Noinit enumerator of type _Uninitialized.
; 261  :     // The sequencing is highly unusual; the True Placement New happens before the _Uninitialized construction,
; 262  :     // so while _Ptr here formally has indeterminate value, we expect it to actually keep the previous value.
; 263  :     locale(_Uninitialized) {} // defer construction
; 264  : #pragma warning(pop)
; 265  : 
; 266  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {
; 267  :         _Ptr->_Incref();
; 268  :     }
; 269  : 
; 270  :     locale() noexcept : _Ptr(_Init(true)) {}
; 271  : 
; 272  : #if !defined(MRTDLL) || !defined(_CRTBLD)
; 273  :     locale(const locale& _Loc, const locale& _Other, category _Cat) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {
; 274  :         // construct a locale by copying named facets
; 275  :         if (_Cat != none) { // worth adding, do it
; 276  :             _STL_ASSERT((_Cat & all) == _Cat, "the bitmask value specifying category must be valid");
; 277  :             _Facet_guard _Guard{_Ptr};
; 278  :             _BEGIN_LOCINFO(_Lobj)
; 279  :             _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
; 280  :             _Lobj._Addcats(_Loc._Ptr->_Catmask, _Loc.name().c_str());
; 281  :             _Lobj._Addcats(_Other._Ptr->_Catmask, _Other.name().c_str());
; 282  :             _Ptr->_Catmask = _Loc._Ptr->_Catmask | _Other._Ptr->_Catmask;
; 283  :             _Ptr->_Name    = _Lobj._Getname();
; 284  :             _END_LOCINFO()
; 285  :             _Guard._Target = nullptr;
; 286  :         }
; 287  :     }
; 288  : 
; 289  : private:
; 290  :     void _Construct(const string& _Str, category _Cat) {
; 291  :         _STL_ASSERT((_Cat & all) == _Cat, "the bitmask value specifying category must be valid");
; 292  :         // construct a locale with named facets
; 293  :         bool _Bad = false;
; 294  :         _Init();
; 295  :         if (_Cat != none) { // worth adding, do it
; 296  :             _Facet_guard _Guard{_Ptr};
; 297  :             _BEGIN_LOCINFO(_Lobj(_Cat, _Str.c_str()))
; 298  :             if (_Badname(_Lobj)) {
; 299  :                 _Bad = true;
; 300  :             } else { // name okay, build the locale
; 301  :                 _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, nullptr);
; 302  :                 _Ptr->_Catmask = _Cat;
; 303  :                 _Ptr->_Name    = _Str.c_str();
; 304  :             }
; 305  :             _END_LOCINFO()
; 306  :             _Guard._Target = nullptr;
; 307  :         }
; 308  : 
; 309  :         if (_Bad) { // Don't throw within _BEGIN_LOCINFO if we can avoid it
; 310  :             delete _Ptr->_Decref();
; 311  :             _Xruntime_error("bad locale name");
; 312  :         }
; 313  :     }
; 314  : 
; 315  : public:
; 316  :     explicit locale(const char* _Locname, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) {
; 317  :         // construct a locale with named facets
; 318  :         // _Locname might have been returned from setlocale().
; 319  :         // Therefore, _Construct() takes const string&.
; 320  :         if (_Locname) {
; 321  :             _Construct(_Locname, _Cat);
; 322  :             return;
; 323  :         }
; 324  : 
; 325  :         _Xruntime_error("bad locale name");
; 326  :     }
; 327  : 
; 328  :     locale(const locale& _Loc, const char* _Locname, category _Cat) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {
; 329  :         // construct a locale by copying, replacing named facets
; 330  :         // _Locname might have been returned from setlocale().
; 331  :         // Therefore, _Construct() takes const string&.
; 332  :         if (_Locname) {
; 333  :             _Construct(_Locname, _Cat);
; 334  :             return;
; 335  :         }
; 336  : 
; 337  :         _Xruntime_error("bad locale name");
; 338  :     }
; 339  : 
; 340  :     explicit locale(const string& _Str, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) {
; 341  :         // construct a locale with named facets
; 342  :         _Construct(_Str, _Cat);
; 343  :     }
; 344  : 
; 345  :     locale(const locale& _Loc, const string& _Str, category _Cat) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {
; 346  :         // construct a locale by copying, replacing named facets
; 347  :         _Construct(_Str, _Cat);
; 348  :     }
; 349  : #endif // !MRTDLL || !_CRTBLD
; 350  : 
; 351  :     ~locale() noexcept {
; 352  :         if (_Ptr) {
; 353  :             delete _Ptr->_Decref();
; 354  :         }
; 355  :     }
; 356  : 
; 357  :     const locale& operator=(const locale& _Right) noexcept {
; 358  :         if (_Ptr != _Right._Ptr) { // different implementation, point at new one
; 359  :             delete _Ptr->_Decref();
; 360  :             _Ptr = _Right._Ptr;
; 361  :             _Ptr->_Incref();
; 362  :         }
; 363  :         return *this;
; 364  :     }
; 365  : 
; 366  :     string name() const {
; 367  :         return _Ptr ? _Ptr->_Name.c_str() : string{};
; 368  :     }
; 369  : 
; 370  :     _Ret_z_ const char* _C_str() const noexcept {
; 371  :         return _Ptr ? _Ptr->_Name.c_str() : "";
; 372  :     }
; 373  : 
; 374  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 375  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0009c	33 f6		 xor	 esi, esi
  0009e	89 4d f0	 mov	 DWORD PTR $T5[ebp], ecx
$LN42@use_facet:

; 376  :         if (_Facptr || !_Ptr->_Xparent) {

  000a1	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000a5	74 13		 je	 SHORT $LN14@use_facet

; 377  :             return _Facptr; // found facet or not transparent
; 378  :         }
; 379  : 
; 380  :         // look in current locale
; 381  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000a7	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 382  :         if (_Id < _Ptr0->_Facetcount) {

  000ac	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000af	73 0d		 jae	 SHORT $LN43@use_facet

; 383  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000b1	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b4	8b 75 f0	 mov	 esi, DWORD PTR $T5[ebp]
  000b7	8b 34 06	 mov	 esi, DWORD PTR [esi+eax]
$LN14@use_facet:

; 435  : 
; 436  :     const size_t _Id         = _Facet::id._Get_index();
; 437  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 438  : 
; 439  :     if (!_Pf) {

  000ba	85 f6		 test	 esi, esi
  000bc	75 3c		 jne	 SHORT $LN39@use_facet
$LN43@use_facet:

; 440  :         if (_Psave) {

  000be	85 db		 test	 ebx, ebx
  000c0	74 04		 je	 SHORT $LN3@use_facet

; 441  :             _Pf = _Psave; // lazy facet already allocated

  000c2	8b f3		 mov	 esi, ebx
  000c4	eb 34		 jmp	 SHORT $LN39@use_facet
$LN3@use_facet:

; 442  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000c6	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  000c9	8d 45 ec	 lea	 eax, DWORD PTR __Psave$3[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?_Getcat@?$collate@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::collate<char>::_Getcat
  000d2	83 c4 08	 add	 esp, 8
  000d5	83 f8 ff	 cmp	 eax, -1
  000d8	74 3c		 je	 SHORT $LN48@use_facet
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1527 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  000da	8b 75 ec	 mov	 esi, DWORD PTR __Psave$3[ebp]
  000dd	89 75 08	 mov	 DWORD PTR __Psave_guard$6[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 455  :             _Facet_Register(_Pfmod);

  000e0	56		 push	 esi
  000e1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000e5	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 456  : #endif // ^^^ !defined(_M_CEE) ^^^
; 457  : 
; 458  :             _Pfmod->_Incref();

  000ea	8b 16		 mov	 edx, DWORD PTR [esi]
  000ec	83 c4 04	 add	 esp, 4
  000ef	8b ce		 mov	 ecx, esi
  000f1	ff 52 04	 call	 DWORD PTR [edx+4]

; 459  :             _Facetptr<_Facet>::_Psave = _Psave;

  000f4	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$collate@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::collate<char> >::_Psave
$LN39@use_facet:

; 460  :             _Pf                       = _Psave;
; 461  : 
; 462  :             (void) _Psave_guard.release();
; 463  :         }
; 464  :     }
; 465  : 
; 466  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  000fa	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  000fd	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00102	8b c6		 mov	 eax, esi

; 467  :     _END_LOCK()
; 468  : } // end of use_facet body

  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c3		 ret	 0
$LN48@use_facet:

; 443  : #if _HAS_EXCEPTIONS
; 444  :             _Throw_bad_cast(); // lazy disallowed

  00116	e8 00 00 00 00	 call	 ?_Throw_bad_cast@std@@YAXXZ ; std::_Throw_bad_cast
$LN45@use_facet:
  0011b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z$1:
  00008	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::collate<char> >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -80				; size = 4
__Ptr$GSCopy$1$ = -76					; size = 4
$T2 = -72						; size = 4
$T3 = -68						; size = 4
__Re$GSCopy$1$ = -68					; size = 4
__Fmt$ = -64						; size = 24
__Str$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Pstr$ = 12						; size = 4
__Re$ = 16						; size = 4
__Ptr$ = 20						; size = 4
__Flgs$ = 24						; size = 4
??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z PROC ; std::regex_replace<std::regex_traits<char>,char>, COMDAT

; 2392 :     const _Elem* _Ptr, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0002d	0f 57 c0	 xorps	 xmm0, xmm0
  00030	8b 45 10	 mov	 eax, DWORD PTR __Re$[ebp]
  00033	8b 55 0c	 mov	 edx, DWORD PTR __Pstr$[ebp]
  00036	89 7d b0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi
  00039	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00040	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00043	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0004a	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2392 :     const _Elem* _Ptr, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {

  00051	89 45 bc	 mov	 DWORD PTR __Re$GSCopy$1$[ebp], eax
  00054	8b 45 14	 mov	 eax, DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  00057	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0005e	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2392 :     const _Elem* _Ptr, regex_constants::match_flag_type _Flgs = regex_constants::match_default) {

  00065	89 45 b4	 mov	 DWORD PTR __Ptr$GSCopy$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 07 00	 mov	 BYTE PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0006b	8b ca		 mov	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2398 :     return _Res;

  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00074	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0007b	0f 11 45 d8	 movups	 XMMWORD PTR __Str$[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0007f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Str$[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00086	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Str$[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0008d	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL170@regex_repl:
  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL170@regex_repl
  00097	2b ce		 sub	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00099	51		 push	 ecx
  0009a	52		 push	 edx
  0009b	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  0009e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  000a3	8b 55 b4	 mov	 edx, DWORD PTR __Ptr$GSCopy$1$[ebp]
  000a6	0f 57 c0	 xorps	 xmm0, xmm0
  000a9	8b ca		 mov	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2395 :     const basic_string<_Elem> _Str(_Pstr);

  000ab	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000b2	0f 11 45 c0	 movups	 XMMWORD PTR __Fmt$[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000b6	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Fmt$[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000bd	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR __Fmt$[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  000c4	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL171@regex_repl:
  000c7	8a 01		 mov	 al, BYTE PTR [ecx]
  000c9	41		 inc	 ecx
  000ca	84 c0		 test	 al, al
  000cc	75 f9		 jne	 SHORT $LL171@regex_repl
  000ce	2b ce		 sub	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000d0	51		 push	 ecx
  000d1	52		 push	 edx
  000d2	8d 4d c0	 lea	 ecx, DWORD PTR __Fmt$[ebp]
  000d5	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2397 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);

  000da	ff 75 18	 push	 DWORD PTR __Flgs$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000dd	83 7d ec 0f	 cmp	 DWORD PTR __Str$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  000e1	8d 55 d8	 lea	 edx, DWORD PTR __Str$[ebp]

; 2152 :         return const_iterator(

  000e4	8b 45 e8	 mov	 eax, DWORD PTR __Str$[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2397 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);

  000e7	8d 4d c0	 lea	 ecx, DWORD PTR __Fmt$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  000ea	0f 47 55 d8	 cmova	 edx, DWORD PTR __Str$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2397 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);

  000ee	51		 push	 ecx
  000ef	ff 75 bc	 push	 DWORD PTR __Re$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2152 :         return const_iterator(

  000f2	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2396 :     const basic_string<_Elem> _Fmt(_Ptr);

  000f4	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000f8	83 7d ec 0f	 cmp	 DWORD PTR __Str$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  000fc	8d 55 d8	 lea	 edx, DWORD PTR __Str$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2397 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);

  000ff	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00100	0f 47 55 d8	 cmova	 edx, DWORD PTR __Str$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2397 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);

  00104	8d 45 bc	 lea	 eax, DWORD PTR $T3[ebp]
  00107	52		 push	 edx
  00108	57		 push	 edi
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ??$regex_replace@V?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$regex_traits@D@2@DU?$char_traits@D@2@V?$allocator@D@2@@std@@YA?AV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@V10@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@1ABV?$basic_regex@DV?$regex_traits@D@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@W4match_flag_type@regex_constants@0@@Z ; std::regex_replace<std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >,std::regex_traits<char>,char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0010f	8b 4d d4	 mov	 ecx, DWORD PTR __Fmt$[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2397 :     _STD regex_replace(_STD back_inserter(_Res), _Str.begin(), _Str.end(), _Re, _Fmt, _Flgs);

  00112	83 c4 1c	 add	 esp, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00115	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00118	76 28		 jbe	 SHORT $LN115@regex_repl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0011a	8b 55 c0	 mov	 edx, DWORD PTR __Fmt$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0011d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0011e	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00120	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00126	72 10		 jb	 SHORT $LN126@regex_repl

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00128	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0012b	83 c1 23	 add	 ecx, 35			; 00000023H
  0012e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00130	83 c0 fc	 add	 eax, -4			; fffffffcH
  00133	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00136	77 57		 ja	 SHORT $LN161@regex_repl
$LN126@regex_repl:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00138	51		 push	 ecx
  00139	52		 push	 edx
  0013a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0013f	83 c4 08	 add	 esp, 8
$LN115@regex_repl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00142	8b 4d ec	 mov	 ecx, DWORD PTR __Str$[ebp+20]
  00145	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00148	76 28		 jbe	 SHORT $LN153@regex_repl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0014a	8b 55 d8	 mov	 edx, DWORD PTR __Str$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0014d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0014e	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00150	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00156	72 10		 jb	 SHORT $LN164@regex_repl

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00158	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0015b	83 c1 23	 add	 ecx, 35			; 00000023H
  0015e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00160	83 c0 fc	 add	 eax, -4			; fffffffcH
  00163	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00166	77 27		 ja	 SHORT $LN161@regex_repl
$LN164@regex_repl:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00168	51		 push	 ecx
  00169	52		 push	 edx
  0016a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0016f	83 c4 08	 add	 esp, 8
$LN153@regex_repl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2398 :     return _Res;

  00172	8b c7		 mov	 eax, edi

; 2399 : }

  00174	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00177	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017e	59		 pop	 ecx
  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00184	33 cd		 xor	 ecx, ebp
  00186	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018b	8b e5		 mov	 esp, ebp
  0018d	5d		 pop	 ebp
  0018e	c3		 ret	 0
$LN161@regex_repl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN173@regex_repl:
  00194	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z$0:
  00000	8b 45 b8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@regex_repl
  0000c	83 65 b8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d b0	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@regex_repl:
  00018	c3		 ret	 0
__unwindfunclet$??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z$1:
  00019	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z$2:
  00021	8d 4d c0	 lea	 ecx, DWORD PTR __Fmt$[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
  0002d	cc		 int	 3
__ehhandler$??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z:
  0002e	90		 npad	 1
  0002f	90		 npad	 1
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00037	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00044	33 c8		 xor	 ecx, eax
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z
  00050	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z ENDP ; std::regex_replace<std::regex_traits<char>,char>
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Tidy@?$basic_regex@DV?$regex_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_regex@DV?$regex_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_regex<char,std::regex_traits<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2001 :     void _Tidy() noexcept { // free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 2002 :         if (_Rep && _MT_DECR(reinterpret_cast<_Atomic_counter_t&>(_Rep->_Refs)) == 0) {

  00003	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 37		 je	 SHORT $LN17@Tidy
  00009	83 c8 ff	 or	 eax, -1
  0000c	f0 0f c1 41 20	 lock	  xadd	 DWORD PTR [ecx+32], eax
  00011	75 2d		 jne	 SHORT $LN17@Tidy

; 2003 :             _Destroy_node(_Rep);

  00013	56		 push	 esi
  00014	8b 37		 mov	 esi, DWORD PTR [edi]

; 1338 :     while (_Nx != _Ne && _Nx) { // destroy node

  00016	85 f6		 test	 esi, esi
  00018	74 1d		 je	 SHORT $LN15@Tidy
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL6@Tidy:

; 1339 :         _Node_base* _Tmp = _Nx;

  00020	8b ce		 mov	 ecx, esi

; 1340 :         _Nx              = _Nx->_Next;

  00022	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00025	8b 30		 mov	 esi, DWORD PTR [eax]

; 1341 :         _Tmp->_Next      = nullptr;

  00027	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1342 :         delete _Tmp;

  0002d	6a 01		 push	 1
  0002f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00031	ff 10		 call	 DWORD PTR [eax]
  00033	85 f6		 test	 esi, esi
  00035	75 e9		 jne	 SHORT $LL6@Tidy
$LN15@Tidy:
  00037	5e		 pop	 esi

; 2004 :         }
; 2005 : 
; 2006 :         _Rep = nullptr;

  00038	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0003e	5f		 pop	 edi

; 2007 :     }

  0003f	c3		 ret	 0
$LN17@Tidy:
  00040	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00046	5f		 pop	 edi
  00047	c3		 ret	 0
?_Tidy@?$basic_regex@DV?$regex_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_regex<char,std::regex_traits<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??1?$basic_regex@DV?$regex_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_regex@DV?$regex_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_regex<char,std::regex_traits<char> >::~basic_regex<char,std::regex_traits<char> >, COMDAT
; _this$ = ecx

; 1900 :     ~basic_regex() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1901 :         _Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$basic_regex@DV?$regex_traits@D@std@@@std@@AAEXXZ ; std::basic_regex<char,std::regex_traits<char> >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 352  :         if (_Ptr) {

  00008	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000b	5e		 pop	 esi
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 11		 je	 SHORT $LN17@basic_rege

; 353  :             delete _Ptr->_Decref();

  00010	8b 01		 mov	 eax, DWORD PTR [ecx]
  00012	ff 50 08	 call	 DWORD PTR [eax+8]
  00015	85 c0		 test	 eax, eax
  00017	74 08		 je	 SHORT $LN17@basic_rege
  00019	8b 10		 mov	 edx, DWORD PTR [eax]
  0001b	8b c8		 mov	 ecx, eax
  0001d	6a 01		 push	 1
  0001f	ff 12		 call	 DWORD PTR [edx]
$LN17@basic_rege:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1902 :     }

  00021	c3		 ret	 0
??1?$basic_regex@DV?$regex_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_regex<char,std::regex_traits<char> >::~basic_regex<char,std::regex_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?_Calculate_loop_simplicity@std@@YAXPAV_Node_base@1@0PAV_Node_rep@1@@Z
_TEXT	SEGMENT
__Nx$ = 8						; size = 4
__Ne$ = 12						; size = 4
__Outer_rep$ = 16					; size = 4
?_Calculate_loop_simplicity@std@@YAXPAV_Node_base@1@0PAV_Node_rep@1@@Z PROC ; std::_Calculate_loop_simplicity, COMDAT

; 4482 : inline void _Calculate_loop_simplicity(_Node_base* _Nx, _Node_base* _Ne, _Node_rep* _Outer_rep) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 4483 :     // walks regex NFA, calculates values of _Node_rep::_Simple_loop
; 4484 :     for (; _Nx != _Ne && _Nx; _Nx = _Nx->_Next) {

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Nx$[ebp]
  00007	3b 7d 0c	 cmp	 edi, DWORD PTR __Ne$[ebp]
  0000a	0f 84 9b 00 00
	00		 je	 $LN49@Calculate_
  00010	53		 push	 ebx
  00011	8b 5d 10	 mov	 ebx, DWORD PTR __Outer_rep$[ebp]
  00014	56		 push	 esi
$LL4@Calculate_:
  00015	85 ff		 test	 edi, edi
  00017	0f 84 8c 00 00
	00		 je	 $LN59@Calculate_

; 4485 :         switch (_Nx->_Kind) {

  0001d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00020	83 c0 f6	 add	 eax, -10		; fffffff6H
  00023	83 f8 09	 cmp	 eax, 9
  00026	77 75		 ja	 SHORT $LN2@Calculate_
  00028	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN47@Calculate_[eax]
  0002f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN48@Calculate_[eax*4]
$LN10@Calculate_:

; 4486 :         case _N_if:
; 4487 :             // _Node_if inside a _Node_rep makes the rep not simple
; 4488 :             if (_Outer_rep) {

  00036	85 db		 test	 ebx, ebx
  00038	74 07		 je	 SHORT $LN11@Calculate_

; 4489 :                 _Outer_rep->_Simple_loop = 0;

  0003a	c7 43 24 00 00
	00 00		 mov	 DWORD PTR [ebx+36], 0
$LN11@Calculate_:

; 4490 :             }
; 4491 : 
; 4492 :             // visit each branch of the if
; 4493 :             for (_Node_if* _Branch = static_cast<_Node_if*>(_Nx)->_Child; _Branch; _Branch = _Branch->_Child) {

  00041	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  00044	85 f6		 test	 esi, esi
  00046	74 55		 je	 SHORT $LN2@Calculate_
$LL9@Calculate_:

; 4494 :                 _Calculate_loop_simplicity(_Branch->_Next, _Branch->_Endif, _Outer_rep);

  00048	53		 push	 ebx
  00049	ff 76 14	 push	 DWORD PTR [esi+20]
  0004c	ff 76 0c	 push	 DWORD PTR [esi+12]
  0004f	e8 00 00 00 00	 call	 ?_Calculate_loop_simplicity@std@@YAXPAV_Node_base@1@0PAV_Node_rep@1@@Z ; std::_Calculate_loop_simplicity
  00054	8b 76 18	 mov	 esi, DWORD PTR [esi+24]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	85 f6		 test	 esi, esi
  0005c	75 ea		 jne	 SHORT $LL9@Calculate_

; 4495 :             }
; 4496 : 
; 4497 :             break;

  0005e	eb 3d		 jmp	 SHORT $LN2@Calculate_
$LN12@Calculate_:

; 4498 :         case _N_assert:
; 4499 :         case _N_neg_assert:
; 4500 :             // visit the assertion body
; 4501 :             // note _Outer_rep being reset: the assertion regex is completely independent
; 4502 :             _Calculate_loop_simplicity(static_cast<_Node_assert*>(_Nx)->_Child, nullptr, nullptr);

  00060	6a 00		 push	 0
  00062	6a 00		 push	 0
  00064	ff 77 14	 push	 DWORD PTR [edi+20]
  00067	e8 00 00 00 00	 call	 ?_Calculate_loop_simplicity@std@@YAXPAV_Node_base@1@0PAV_Node_rep@1@@Z ; std::_Calculate_loop_simplicity
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4503 :             break;

  0006f	eb 2c		 jmp	 SHORT $LN2@Calculate_
$LN14@Calculate_:

; 4504 :         case _N_rep:
; 4505 :             // _Node_rep inside another _Node_rep makes both not simple
; 4506 :             if (_Outer_rep) {

  00071	85 db		 test	 ebx, ebx
  00073	74 10		 je	 SHORT $LN15@Calculate_

; 4507 :                 _Outer_rep->_Simple_loop                   = 0;

  00075	c7 43 24 00 00
	00 00		 mov	 DWORD PTR [ebx+36], 0

; 4508 :                 static_cast<_Node_rep*>(_Nx)->_Simple_loop = 0;

  0007c	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0

; 4509 :             } else {

  00083	eb 18		 jmp	 SHORT $LN2@Calculate_
$LN15@Calculate_:

; 4510 :                 _Outer_rep = static_cast<_Node_rep*>(_Nx);

  00085	8b df		 mov	 ebx, edi

; 4511 :             }
; 4512 :             break;

  00087	eb 14		 jmp	 SHORT $LN2@Calculate_
$LN17@Calculate_:

; 4513 :         case _N_end_rep:
; 4514 :             if (_Outer_rep == static_cast<_Node_end_rep*>(_Nx)->_Begin_rep) {

  00089	3b 5f 14	 cmp	 ebx, DWORD PTR [edi+20]
  0008c	75 0f		 jne	 SHORT $LN2@Calculate_

; 4515 :                 // if the _Node_rep is still undetermined when we reach its end, it is simple
; 4516 :                 _Analysis_assume_(_Outer_rep);
; 4517 :                 if (_Outer_rep->_Simple_loop == -1) {

  0008e	83 7b 24 ff	 cmp	 DWORD PTR [ebx+36], -1
  00092	75 07		 jne	 SHORT $LN19@Calculate_

; 4518 :                     _Outer_rep->_Simple_loop = 1;

  00094	c7 43 24 01 00
	00 00		 mov	 DWORD PTR [ebx+36], 1
$LN19@Calculate_:

; 4519 :                 }
; 4520 :                 _Outer_rep = nullptr;

  0009b	33 db		 xor	 ebx, ebx
$LN2@Calculate_:

; 4483 :     // walks regex NFA, calculates values of _Node_rep::_Simple_loop
; 4484 :     for (; _Nx != _Ne && _Nx; _Nx = _Nx->_Next) {

  0009d	8b 7f 0c	 mov	 edi, DWORD PTR [edi+12]
  000a0	3b 7d 0c	 cmp	 edi, DWORD PTR __Ne$[ebp]
  000a3	0f 85 6c ff ff
	ff		 jne	 $LL4@Calculate_
$LN59@Calculate_:
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
$LN49@Calculate_:
  000ab	5f		 pop	 edi

; 4521 :             }
; 4522 :             break;
; 4523 :         case _N_none:
; 4524 :         case _N_nop:
; 4525 :         case _N_bol:
; 4526 :         case _N_eol:
; 4527 :         case _N_wbound:
; 4528 :         case _N_dot:
; 4529 :         case _N_str:
; 4530 :         case _N_class:
; 4531 :         case _N_group:
; 4532 :         case _N_end_group:
; 4533 :         case _N_end_assert:
; 4534 :         case _N_capture:
; 4535 :         case _N_end_capture:
; 4536 :         case _N_back:
; 4537 :         case _N_endif:
; 4538 :         case _N_begin:
; 4539 :         case _N_end:
; 4540 :         default:
; 4541 :             break;
; 4542 :         }
; 4543 :     }
; 4544 : }

  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
  000ae	66 90		 npad	 2
$LN48@Calculate_:
  000b0	00 00 00 00	 DD	 $LN12@Calculate_
  000b4	00 00 00 00	 DD	 $LN10@Calculate_
  000b8	00 00 00 00	 DD	 $LN14@Calculate_
  000bc	00 00 00 00	 DD	 $LN17@Calculate_
  000c0	00 00 00 00	 DD	 $LN2@Calculate_
$LN47@Calculate_:
  000c4	00		 DB	 0
  000c5	00		 DB	 0
  000c6	04		 DB	 4
  000c7	04		 DB	 4
  000c8	04		 DB	 4
  000c9	04		 DB	 4
  000ca	01		 DB	 1
  000cb	04		 DB	 4
  000cc	02		 DB	 2
  000cd	03		 DB	 3
?_Calculate_loop_simplicity@std@@YAXPAV_Node_base@1@0PAV_Node_rep@1@@Z ENDP ; std::_Calculate_loop_simplicity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@CAXXZ PROC ; std::vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >::~vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00049	5e		 pop	 esi

; 820  :     }

  0004a	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00050	cc		 int	 3
??1?$vector@U_Loop_vals_t@std@@V?$allocator@U_Loop_vals_t@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >::~vector<std::_Loop_vals_t,std::allocator<std::_Loop_vals_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@SAXXZ PROC	; std::vector<bool,std::allocator<bool> >::_Xlen, COMDAT

; 3582 :         _Xlength_error("vector<bool> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EOMJEIFA@vector?$DMbool?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@SAXXZ ENDP	; std::vector<bool,std::allocator<bool> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Insert_x@?$vector@_NV?$allocator@_N@std@@@std@@QAEIV?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@I@Z
_TEXT	SEGMENT
__Dest$$sroa$525$1$ = -16				; size = 4
tv1356 = -16						; size = 4
__Off$1$ = -12						; size = 4
$T3 = -8						; size = 4
__Last$1$ = -8						; size = 4
$T4 = -4						; size = 4
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
$T5 = 16						; size = 4
$T6 = 16						; size = 4
$T7 = 16						; size = 4
?_Insert_x@?$vector@_NV?$allocator@_N@std@@@std@@QAEIV?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@I@Z PROC ; std::vector<bool,std::allocator<bool> >::_Insert_x, COMDAT
; _this$ = ecx

; 3494 :     _CONSTEXPR20 size_type _Insert_x(const_iterator _Where, size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi

; 2617 :         return static_cast<difference_type>(_Mybase::_VBITS_DIFF * (this->_Myptr - _Right._Myptr))

  00007	8b 75 08	 mov	 esi, DWORD PTR __Where$[ebp]

; 3494 :     _CONSTEXPR20 size_type _Insert_x(const_iterator _Where, size_type _Count) {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 3495 :         const difference_type _Off = _Where - begin();
; 3496 : 
; 3497 : #if _ITERATOR_DEBUG_LEVEL == 2
; 3498 :         _STL_VERIFY(end() >= _Where, "vector<bool> insert iterator outside range");
; 3499 :         const bool _Realloc = capacity() - size() < _Count;
; 3500 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 3501 : 
; 3502 :         if (_Count != 0) {

  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]

; 2617 :         return static_cast<difference_type>(_Mybase::_VBITS_DIFF * (this->_Myptr - _Right._Myptr))

  00010	2b 37		 sub	 esi, DWORD PTR [edi]
  00012	c1 fe 02	 sar	 esi, 2
  00015	c1 e6 05	 shl	 esi, 5
  00018	03 75 0c	 add	 esi, DWORD PTR __Where$[ebp+4]
  0001b	89 75 f4	 mov	 DWORD PTR __Off$1$[ebp], esi

; 3495 :         const difference_type _Off = _Where - begin();
; 3496 : 
; 3497 : #if _ITERATOR_DEBUG_LEVEL == 2
; 3498 :         _STL_VERIFY(end() >= _Where, "vector<bool> insert iterator outside range");
; 3499 :         const bool _Realloc = capacity() - size() < _Count;
; 3500 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 3501 : 
; 3502 :         if (_Count != 0) {

  0001e	85 c9		 test	 ecx, ecx
  00020	0f 84 70 01 00
	00		 je	 $LN188@Insert_x

; 3503 :             if (max_size() - size() < _Count) {

  00026	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00029	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0002e	2b c2		 sub	 eax, edx
  00030	3b c1		 cmp	 eax, ecx
  00032	0f 82 68 01 00
	00		 jb	 $LN210@Insert_x

; 1620 :         _Resize(_Newsize, _Val);

  00038	8d 45 f8	 lea	 eax, DWORD PTR $T3[ebp]

; 3505 :             }
; 3506 : 
; 3507 : #if _ITERATOR_DEBUG_LEVEL == 2
; 3508 :             _Orphan_range(static_cast<size_type>(_Realloc ? 0 : _Off), this->_Mysize);
; 3509 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 3510 :             this->_Myvec.resize(this->_Nw(size() + _Count), 0);

  0003b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 1620 :         _Resize(_Newsize, _Val);

  00042	50		 push	 eax

; 2866 :         return (_Count + _VBITS - 1) / _VBITS;

  00043	8d 41 1f	 lea	 eax, DWORD PTR [ecx+31]

; 1620 :         _Resize(_Newsize, _Val);

  00046	8b cf		 mov	 ecx, edi

; 2866 :         return (_Count + _VBITS - 1) / _VBITS;

  00048	03 c2		 add	 eax, edx
  0004a	c1 e8 05	 shr	 eax, 5

; 1620 :         _Resize(_Newsize, _Val);

  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$_Resize@I@?$vector@IV?$allocator@I@std@@@std@@AAEXIABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize<unsigned int>

; 3189 :         return this->_Mysize == 0;

  00053	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00056	85 d2		 test	 edx, edx

; 3511 :             if (empty()) {

  00058	75 12		 jne	 SHORT $LN4@Insert_x

; 3512 :                 this->_Mysize += _Count;

  0005a	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  0005d	03 c2		 add	 eax, edx
  0005f	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 3516 :                 _STD copy_backward(begin() + _Off, _Oldend, end());
; 3517 :             }
; 3518 :         }
; 3519 : 
; 3520 :         return static_cast<size_type>(_Off);

  00062	8b c6		 mov	 eax, esi

; 3521 :     }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 0c 00	 ret	 12			; 0000000cH
$LN4@Insert_x:

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  0006c	8b 37		 mov	 esi, DWORD PTR [edi]
  0006e	33 c9		 xor	 ecx, ecx
  00070	89 75 fc	 mov	 DWORD PTR $T4[ebp], esi

; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  00073	85 d2		 test	 edx, edx
  00075	79 1c		 jns	 SHORT $LN52@Insert_x
  00077	8b c2		 mov	 eax, edx
  00079	f7 d8		 neg	 eax
  0007b	3b c8		 cmp	 ecx, eax
  0007d	73 14		 jae	 SHORT $LN52@Insert_x

; 2582 :             this->_Myoff += static_cast<_Size_type>(_Off);

  0007f	8b ca		 mov	 ecx, edx
  00081	8b c1		 mov	 eax, ecx
  00083	f7 d0		 not	 eax

; 2583 :             this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;

  00085	c1 e8 05	 shr	 eax, 5
  00088	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  0008f	2b f0		 sub	 esi, eax

; 2584 :             this->_Myoff %= _VBITS;
; 2585 :         } else { // add non-negative increment

  00091	eb 0a		 jmp	 SHORT $LN206@Insert_x
$LN52@Insert_x:

; 2586 :             this->_Myoff += static_cast<_Size_type>(_Off);

  00093	03 ca		 add	 ecx, edx
  00095	8b c1		 mov	 eax, ecx
  00097	c1 e8 05	 shr	 eax, 5

; 2587 :             this->_Myptr += this->_Myoff / _VBITS;

  0009a	8d 34 86	 lea	 esi, DWORD PTR [esi+eax*4]
$LN206@Insert_x:

; 3513 :             } else { // make room and copy down suffix
; 3514 :                 iterator _Oldend = end();
; 3515 :                 this->_Mysize += _Count;

  0009d	03 55 10	 add	 edx, DWORD PTR __Count$[ebp]

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  000a0	33 c0		 xor	 eax, eax

; 3513 :             } else { // make room and copy down suffix
; 3514 :                 iterator _Oldend = end();
; 3515 :                 this->_Mysize += _Count;

  000a2	83 e1 1f	 and	 ecx, 31			; 0000001fH
  000a5	89 57 0c	 mov	 DWORD PTR [edi+12], edx

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  000a8	8b 7d fc	 mov	 edi, DWORD PTR $T4[ebp]

; 3513 :             } else { // make room and copy down suffix
; 3514 :                 iterator _Oldend = end();
; 3515 :                 this->_Mysize += _Count;

  000ab	89 75 f8	 mov	 DWORD PTR __Last$1$[ebp], esi

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  000ae	89 45 10	 mov	 DWORD PTR $T7[ebp], eax

; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  000b1	85 d2		 test	 edx, edx
  000b3	79 21		 jns	 SHORT $LN78@Insert_x
  000b5	8b c2		 mov	 eax, edx
  000b7	f7 d8		 neg	 eax
  000b9	39 45 10	 cmp	 DWORD PTR $T7[ebp], eax
  000bc	73 16		 jae	 SHORT $LN191@Insert_x

; 2582 :             this->_Myoff += static_cast<_Size_type>(_Off);

  000be	33 c0		 xor	 eax, eax
  000c0	03 d0		 add	 edx, eax
  000c2	8b c2		 mov	 eax, edx
  000c4	f7 d0		 not	 eax

; 2583 :             this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;

  000c6	c1 e8 05	 shr	 eax, 5
  000c9	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  000d0	2b f8		 sub	 edi, eax

; 2584 :             this->_Myoff %= _VBITS;
; 2585 :         } else { // add non-negative increment

  000d2	eb 0c		 jmp	 SHORT $LN79@Insert_x
$LN191@Insert_x:

; 2488 :     }
; 2489 : 
; 2490 :     _CONSTEXPR20 const _Vbase* _Getptr() const noexcept {
; 2491 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2492 :         const auto _Cont = static_cast<const _Mycont*>(this->_Getcont());
; 2493 :         _STL_VERIFY(_Cont, "cannot dereference value-initialized vector<bool> iterator");
; 2494 :         _STL_VERIFY(this->_Total_off(_Cont) <= static_cast<_Difference_type>(_Cont->_Mysize),
; 2495 :             "vector<bool> iterator not dereferenceable");
; 2496 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2497 : 
; 2498 :         return this->_Myptr;
; 2499 :     }
; 2500 : 
; 2501 :     friend _CONSTEXPR20 void swap(_Vb_reference _Left, _Vb_reference _Right) noexcept {
; 2502 :         bool _Val = _Left; // NOT _STD swap
; 2503 :         _Left     = _Right;
; 2504 :         _Right    = _Val;
; 2505 :     }
; 2506 : 
; 2507 : protected:
; 2508 :     _CONSTEXPR20 _Vbase _Mask() const noexcept {
; 2509 :         return static_cast<_Vbase>(1) << this->_Myoff;
; 2510 :     }
; 2511 : };
; 2512 : 
; 2513 : template <class _Alvbase_wrapped>
; 2514 : class _Vb_const_iterator : public _Vb_iter_base<_Alvbase_wrapped> {
; 2515 : public:
; 2516 :     using _Mybase         = _Vb_iter_base<_Alvbase_wrapped>;
; 2517 :     using _Mycont         = typename _Mybase::_Mycont;
; 2518 :     using _Size_type      = typename _Mybase::_Size_type;
; 2519 :     using _Reft           = _Vb_reference<_Alvbase_wrapped>;
; 2520 :     using const_reference = bool;
; 2521 : 
; 2522 :     using iterator_category = random_access_iterator_tag;
; 2523 :     using value_type        = bool;
; 2524 :     using difference_type   = typename _Mybase::_Difference_type;
; 2525 :     using pointer           = const_reference*;
; 2526 :     using reference         = const_reference;
; 2527 : 
; 2528 :     _CONSTEXPR20 _Vb_const_iterator() = default;
; 2529 : 
; 2530 :     _CONSTEXPR20 _Vb_const_iterator(const _Vbase* _Ptr, const _Container_base* _Mypvbool) noexcept
; 2531 :         : _Mybase(_Ptr, 0, _Mypvbool) {}
; 2532 : 
; 2533 :     _NODISCARD _CONSTEXPR20 const_reference operator*() const noexcept {
; 2534 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2535 :         const auto _Cont = static_cast<const _Mycont*>(this->_Getcont());
; 2536 :         _STL_VERIFY(_Cont, "cannot dereference value-initialized vector<bool> iterator");
; 2537 :         _STL_VERIFY(this->_Total_off(_Cont) < static_cast<difference_type>(_Cont->_Mysize),
; 2538 :             "vector<bool> iterator not dereferenceable");
; 2539 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2540 : 
; 2541 :         return _Reft(*this);
; 2542 :     }
; 2543 : 
; 2544 :     _CONSTEXPR20 _Vb_const_iterator& operator++() noexcept {
; 2545 :         _Inc();
; 2546 :         return *this;
; 2547 :     }
; 2548 : 
; 2549 :     _CONSTEXPR20 _Vb_const_iterator operator++(int) noexcept {
; 2550 :         _Vb_const_iterator _Tmp = *this;
; 2551 :         _Inc();
; 2552 :         return _Tmp;
; 2553 :     }
; 2554 : 
; 2555 :     _CONSTEXPR20 _Vb_const_iterator& operator--() noexcept {
; 2556 :         _Dec();
; 2557 :         return *this;
; 2558 :     }
; 2559 : 
; 2560 :     _CONSTEXPR20 _Vb_const_iterator operator--(int) noexcept {
; 2561 :         _Vb_const_iterator _Tmp = *this;
; 2562 :         _Dec();
; 2563 :         return _Tmp;
; 2564 :     }
; 2565 : 
; 2566 :     _CONSTEXPR20 _Vb_const_iterator& operator+=(const difference_type _Off) noexcept {
; 2567 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2568 :         if (_Off != 0) {
; 2569 :             const auto _Cont = static_cast<const _Mycont*>(this->_Getcont());
; 2570 :             _STL_VERIFY(_Cont, "cannot seek value-initialized vector<bool> iterator");
; 2571 :             const auto _Start_offset = this->_Total_off(_Cont);
; 2572 :             if (_Off < 0) {
; 2573 :                 _STL_VERIFY(-_Start_offset <= _Off, "cannot seek vector<bool> iterator before begin");
; 2574 :             } else if (0 < _Off) {
; 2575 :                 _STL_VERIFY(_Off <= static_cast<difference_type>(_Cont->_Mysize - _Start_offset),
; 2576 :                     "cannot seek vector<bool> iterator after end");
; 2577 :             }
; 2578 :         }
; 2579 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2580 : 
; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  000d4	33 c0		 xor	 eax, eax
$LN78@Insert_x:

; 2586 :             this->_Myoff += static_cast<_Size_type>(_Off);

  000d6	03 d0		 add	 edx, eax
  000d8	8b c2		 mov	 eax, edx
  000da	c1 e8 05	 shr	 eax, 5

; 2587 :             this->_Myptr += this->_Myoff / _VBITS;

  000dd	8d 3c 87	 lea	 edi, DWORD PTR [edi+eax*4]
$LN79@Insert_x:

; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  000e0	8b 45 f4	 mov	 eax, DWORD PTR __Off$1$[ebp]

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  000e3	83 e2 1f	 and	 edx, 31			; 0000001fH
  000e6	c7 45 10 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], 0

; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  000ed	85 c0		 test	 eax, eax
  000ef	79 22		 jns	 SHORT $LN101@Insert_x
  000f1	f7 d8		 neg	 eax
  000f3	39 45 10	 cmp	 DWORD PTR $T6[ebp], eax
  000f6	8b 45 f4	 mov	 eax, DWORD PTR __Off$1$[ebp]
  000f9	73 18		 jae	 SHORT $LN101@Insert_x

; 2582 :             this->_Myoff += static_cast<_Size_type>(_Off);

  000fb	33 f6		 xor	 esi, esi
  000fd	03 c6		 add	 eax, esi
  000ff	89 45 10	 mov	 DWORD PTR $T5[ebp], eax
  00102	f7 d0		 not	 eax

; 2583 :             this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;

  00104	c1 e8 05	 shr	 eax, 5
  00107	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  0010e	29 45 fc	 sub	 DWORD PTR $T4[ebp], eax

; 2584 :             this->_Myoff %= _VBITS;
; 2585 :         } else { // add non-negative increment

  00111	eb 13		 jmp	 SHORT $LN207@Insert_x
$LN101@Insert_x:

; 2586 :             this->_Myoff += static_cast<_Size_type>(_Off);

  00113	33 f6		 xor	 esi, esi
  00115	03 c6		 add	 eax, esi

; 2587 :             this->_Myptr += this->_Myoff / _VBITS;

  00117	8b 75 fc	 mov	 esi, DWORD PTR $T4[ebp]
  0011a	89 45 10	 mov	 DWORD PTR $T5[ebp], eax
  0011d	c1 e8 05	 shr	 eax, 5
  00120	8d 34 86	 lea	 esi, DWORD PTR [esi+eax*4]
  00123	89 75 fc	 mov	 DWORD PTR $T4[ebp], esi
$LN207@Insert_x:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5147 :     _STD _Seek_wrapped(_Dest, _STD _Copy_backward_unchecked(_UFirst, _ULast, _UDest));

  00126	8b 45 10	 mov	 eax, DWORD PTR $T5[ebp]
  00129	83 e0 1f	 and	 eax, 31			; 0000001fH
  0012c	89 45 10	 mov	 DWORD PTR $T5[ebp], eax
$LN208@Insert_x:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2627 :         return this->_Myptr == _Right._Myptr && this->_Myoff == _Right._Myoff;

  0012f	8b 75 f8	 mov	 esi, DWORD PTR __Last$1$[ebp]
  00132	89 55 f0	 mov	 DWORD PTR tv1356[ebp], edx
  00135	39 75 fc	 cmp	 DWORD PTR $T4[ebp], esi
  00138	75 04		 jne	 SHORT $LN121@Insert_x
  0013a	3b c1		 cmp	 eax, ecx
  0013c	74 55		 je	 SHORT $LN189@Insert_x
$LN121@Insert_x:

; 2686 :         if (this->_Myoff != 0) {

  0013e	85 c9		 test	 ecx, ecx
  00140	74 03		 je	 SHORT $LN131@Insert_x

; 2687 :             --this->_Myoff;

  00142	49		 dec	 ecx

; 2688 :         } else { // move to previous word

  00143	eb 0b		 jmp	 SHORT $LN132@Insert_x
$LN131@Insert_x:

; 2690 :             --this->_Myptr;

  00145	83 ee 04	 sub	 esi, 4
  00148	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  0014d	89 75 f8	 mov	 DWORD PTR __Last$1$[ebp], esi
$LN132@Insert_x:

; 2686 :         if (this->_Myoff != 0) {

  00150	85 d2		 test	 edx, edx
  00152	74 03		 je	 SHORT $LN151@Insert_x

; 2687 :             --this->_Myoff;

  00154	4a		 dec	 edx

; 2688 :         } else { // move to previous word

  00155	eb 05		 jmp	 SHORT $LN152@Insert_x
$LN151@Insert_x:

; 2689 :             this->_Myoff = _VBITS - 1;

  00157	ba 1f 00 00 00	 mov	 edx, 31			; 0000001fH
$LN152@Insert_x:

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  0015c	83 7d f0 00	 cmp	 DWORD PTR tv1356[ebp], 0
  00160	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00163	0f 44 f8	 cmove	 edi, eax
  00166	b8 01 00 00 00	 mov	 eax, 1
  0016b	89 7d f0	 mov	 DWORD PTR __Dest$$sroa$525$1$[ebp], edi
  0016e	d3 e0		 shl	 eax, cl

; 2487 :         return (*_Getptr() & _Mask()) != 0;

  00170	8b 37		 mov	 esi, DWORD PTR [edi]
  00172	8b 7d f8	 mov	 edi, DWORD PTR __Last$1$[ebp]
  00175	85 07		 test	 eax, DWORD PTR [edi]

; 2461 :         if (_Val) {

  00177	74 0d		 je	 SHORT $LN174@Insert_x
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5135 :     }

  00179	8b 7d f0	 mov	 edi, DWORD PTR __Dest$$sroa$525$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2462 :             *const_cast<_Vbase*>(_Getptr()) |= _Mask();

  0017c	0f ab d6	 bts	 esi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5135 :     }

  0017f	8b 45 10	 mov	 eax, DWORD PTR $T5[ebp]
  00182	89 37		 mov	 DWORD PTR [edi], esi
  00184	eb a9		 jmp	 SHORT $LN208@Insert_x
$LN174@Insert_x:
  00186	8b 7d f0	 mov	 edi, DWORD PTR __Dest$$sroa$525$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2464 :             *const_cast<_Vbase*>(_Getptr()) &= ~_Mask();

  00189	0f b3 d6	 btr	 esi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5135 :     }

  0018c	8b 45 10	 mov	 eax, DWORD PTR $T5[ebp]
  0018f	89 37		 mov	 DWORD PTR [edi], esi
  00191	eb 9c		 jmp	 SHORT $LN208@Insert_x
$LN189@Insert_x:
  00193	8b 75 f4	 mov	 esi, DWORD PTR __Off$1$[ebp]
$LN188@Insert_x:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 3521 :     }

  00196	5f		 pop	 edi
  00197	8b c6		 mov	 eax, esi
  00199	5e		 pop	 esi
  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c2 0c 00	 ret	 12			; 0000000cH
$LN210@Insert_x:

; 3504 :                 _Xlen(); // result too long

  001a0	e8 00 00 00 00	 call	 ?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@SAXXZ ; std::vector<bool,std::allocator<bool> >::_Xlen
$LN205@Insert_x:
  001a5	cc		 int	 3
?_Insert_x@?$vector@_NV?$allocator@_N@std@@@std@@QAEIV?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@I@Z ENDP ; std::vector<bool,std::allocator<bool> >::_Insert_x
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@V?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@0@Z
_TEXT	SEGMENT
__First$ = -44						; size = 8
$T2 = -44						; size = 8
__Last$ = -36						; size = 8
__Off$1$ = -32						; size = 4
__Words$1$ = -24					; size = 4
$T3 = -24						; size = 4
__Last$1$ = -20						; size = 4
__Last$2$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@V?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@0@Z PROC ; std::vector<bool,std::allocator<bool> >::erase, COMDAT
; _this$ = ecx

; 3437 :     /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@V?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  00029	8b 37		 mov	 esi, DWORD PTR [edi]
  0002b	33 d2		 xor	 edx, edx
  0002d	8b c6		 mov	 eax, esi
  0002f	89 55 d8	 mov	 DWORD PTR __First$[ebp+4], edx
  00032	89 45 d4	 mov	 DWORD PTR __First$[ebp], eax

; 3142 :         if (0 < this->_Mysize) {

  00035	39 57 0c	 cmp	 DWORD PTR [edi+12], edx
  00038	76 4c		 jbe	 SHORT $LN6@erase

; 2617 :         return static_cast<difference_type>(_Mybase::_VBITS_DIFF * (this->_Myptr - _Right._Myptr))

  0003a	8b 45 0c	 mov	 eax, DWORD PTR __First_arg$[ebp]

; 3143 :             _Tmp += _Where - begin();

  0003d	8d 4d d4	 lea	 ecx, DWORD PTR __First$[ebp]

; 2617 :         return static_cast<difference_type>(_Mybase::_VBITS_DIFF * (this->_Myptr - _Right._Myptr))

  00040	2b c6		 sub	 eax, esi
  00042	c1 f8 02	 sar	 eax, 2
  00045	c1 e0 05	 shl	 eax, 5
  00048	03 45 10	 add	 eax, DWORD PTR __First_arg$[ebp+4]

; 3143 :             _Tmp += _Where - begin();

  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??Y?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator+=

; 2617 :         return static_cast<difference_type>(_Mybase::_VBITS_DIFF * (this->_Myptr - _Right._Myptr))

  00051	8b 45 14	 mov	 eax, DWORD PTR __Last_arg$[ebp]

; 3143 :             _Tmp += _Where - begin();

  00054	8d 4d dc	 lea	 ecx, DWORD PTR __Last$[ebp]

; 2617 :         return static_cast<difference_type>(_Mybase::_VBITS_DIFF * (this->_Myptr - _Right._Myptr))

  00057	2b c6		 sub	 eax, esi

; 3143 :             _Tmp += _Where - begin();

  00059	89 75 dc	 mov	 DWORD PTR __Last$[ebp], esi

; 2617 :         return static_cast<difference_type>(_Mybase::_VBITS_DIFF * (this->_Myptr - _Right._Myptr))

  0005c	c1 f8 02	 sar	 eax, 2
  0005f	c1 e0 05	 shl	 eax, 5
  00062	03 45 18	 add	 eax, DWORD PTR __Last_arg$[ebp+4]

; 3143 :             _Tmp += _Where - begin();

  00065	50		 push	 eax
  00066	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Last$[ebp+4], 0
  0006d	e8 00 00 00 00	 call	 ??Y?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator+=
  00072	8b 45 e0	 mov	 eax, DWORD PTR __Last$[ebp+4]
  00075	8b 55 d8	 mov	 edx, DWORD PTR __First$[ebp+4]
  00078	89 45 f0	 mov	 DWORD PTR __Last$2$[ebp], eax
  0007b	8b 45 dc	 mov	 eax, DWORD PTR __Last$[ebp]
  0007e	89 45 ec	 mov	 DWORD PTR __Last$1$[ebp], eax
  00081	8b 45 d4	 mov	 eax, DWORD PTR __First$[ebp]
  00084	eb 06		 jmp	 SHORT $LN37@erase
$LN6@erase:

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  00086	89 75 ec	 mov	 DWORD PTR __Last$1$[ebp], esi
  00089	89 55 f0	 mov	 DWORD PTR __Last$2$[ebp], edx
$LN37@erase:

; 2617 :         return static_cast<difference_type>(_Mybase::_VBITS_DIFF * (this->_Myptr - _Right._Myptr))

  0008c	8b c8		 mov	 ecx, eax
  0008e	2b ce		 sub	 ecx, esi
  00090	c1 f9 02	 sar	 ecx, 2
  00093	c1 e1 05	 shl	 ecx, 5
  00096	03 ca		 add	 ecx, edx
  00098	89 4d e0	 mov	 DWORD PTR __Off$1$[ebp], ecx

; 2627 :         return this->_Myptr == _Right._Myptr && this->_Myoff == _Right._Myoff;

  0009b	3b 45 ec	 cmp	 eax, DWORD PTR __Last$1$[ebp]
  0009e	75 09		 jne	 SHORT $LN212@erase
  000a0	3b 55 f0	 cmp	 edx, DWORD PTR __Last$2$[ebp]
  000a3	0f 84 b3 00 00
	00		 je	 $LN143@erase
$LN212@erase:

; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  000a9	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  000ac	33 c0		 xor	 eax, eax
  000ae	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax

; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  000b1	85 c9		 test	 ecx, ecx
  000b3	79 21		 jns	 SHORT $LN214@erase
  000b5	8b c1		 mov	 eax, ecx
  000b7	f7 d8		 neg	 eax
  000b9	39 45 e8	 cmp	 DWORD PTR $T3[ebp], eax
  000bc	73 16		 jae	 SHORT $LN216@erase

; 2582 :             this->_Myoff += static_cast<_Size_type>(_Off);

  000be	33 c0		 xor	 eax, eax
  000c0	03 c8		 add	 ecx, eax
  000c2	8b c1		 mov	 eax, ecx
  000c4	f7 d0		 not	 eax

; 2583 :             this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;

  000c6	c1 e8 05	 shr	 eax, 5
  000c9	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  000d0	2b f0		 sub	 esi, eax

; 2584 :             this->_Myoff %= _VBITS;
; 2585 :         } else { // add non-negative increment

  000d2	eb 0c		 jmp	 SHORT $LN219@erase
$LN216@erase:

; 2420 :         this->_Adopt(_Mypvbool);
; 2421 :     }
; 2422 : 
; 2423 :     _CONSTEXPR20 void _Advance(_Size_type _Off) noexcept {
; 2424 :         _Myoff += _Off;
; 2425 :         _Myptr += _Myoff / _VBITS;
; 2426 :         _Myoff %= _VBITS;
; 2427 :     }
; 2428 : 
; 2429 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2430 :     _CONSTEXPR20 _Difference_type _Total_off(const _Mycont* _Cont) const noexcept {
; 2431 :         return static_cast<_Difference_type>(_VBITS_DIFF * (_Myptr - _Cont->_Myvec.data()) + _Myoff);
; 2432 :     }
; 2433 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2434 : 
; 2435 :     const _Vbase* _Myptr = nullptr;
; 2436 :     _Size_type _Myoff    = 0;
; 2437 : };
; 2438 : 
; 2439 : template <class _Alvbase_wrapped>
; 2440 : class _Vb_reference : public _Vb_iter_base<_Alvbase_wrapped> {
; 2441 :     // reference to a bit within a base word
; 2442 : private:
; 2443 :     using _Mybase          = _Vb_iter_base<_Alvbase_wrapped>;
; 2444 :     using _Mycont          = typename _Mybase::_Mycont;
; 2445 :     using _Difference_type = typename _Mybase::_Difference_type;
; 2446 : 
; 2447 :     // TRANSITION, ABI: non-trivial constructor
; 2448 :     _CONSTEXPR20 _Vb_reference() = default;
; 2449 : 
; 2450 : public:
; 2451 :     _CONSTEXPR20 _Vb_reference(const _Vb_reference&) = default;
; 2452 : 
; 2453 :     _CONSTEXPR20 _Vb_reference(const _Mybase& _Right) noexcept
; 2454 :         : _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont()) {}
; 2455 : 
; 2456 :     _CONSTEXPR20 _Vb_reference& operator=(const _Vb_reference& _Right) noexcept {
; 2457 :         return *this = static_cast<bool>(_Right);
; 2458 :     }
; 2459 : 
; 2460 :     _CONSTEXPR20 _Vb_reference& operator=(bool _Val) noexcept {
; 2461 :         if (_Val) {
; 2462 :             *const_cast<_Vbase*>(_Getptr()) |= _Mask();
; 2463 :         } else {
; 2464 :             *const_cast<_Vbase*>(_Getptr()) &= ~_Mask();
; 2465 :         }
; 2466 : 
; 2467 :         return *this;
; 2468 :     }
; 2469 : 
; 2470 : #if _HAS_CXX23
; 2471 :     constexpr const _Vb_reference& operator=(bool _Val) const noexcept {
; 2472 :         if (_Val) {
; 2473 :             *const_cast<_Vbase*>(_Getptr()) |= _Mask();
; 2474 :         } else {
; 2475 :             *const_cast<_Vbase*>(_Getptr()) &= ~_Mask();
; 2476 :         }
; 2477 : 
; 2478 :         return *this;
; 2479 :     }
; 2480 : #endif // _HAS_CXX23
; 2481 : 
; 2482 :     _CONSTEXPR20 void flip() noexcept {
; 2483 :         *const_cast<_Vbase*>(_Getptr()) ^= _Mask();
; 2484 :     }
; 2485 : 
; 2486 :     _CONSTEXPR20 operator bool() const noexcept {
; 2487 :         return (*_Getptr() & _Mask()) != 0;
; 2488 :     }
; 2489 : 
; 2490 :     _CONSTEXPR20 const _Vbase* _Getptr() const noexcept {
; 2491 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2492 :         const auto _Cont = static_cast<const _Mycont*>(this->_Getcont());
; 2493 :         _STL_VERIFY(_Cont, "cannot dereference value-initialized vector<bool> iterator");
; 2494 :         _STL_VERIFY(this->_Total_off(_Cont) <= static_cast<_Difference_type>(_Cont->_Mysize),
; 2495 :             "vector<bool> iterator not dereferenceable");
; 2496 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2497 : 
; 2498 :         return this->_Myptr;
; 2499 :     }
; 2500 : 
; 2501 :     friend _CONSTEXPR20 void swap(_Vb_reference _Left, _Vb_reference _Right) noexcept {
; 2502 :         bool _Val = _Left; // NOT _STD swap
; 2503 :         _Left     = _Right;
; 2504 :         _Right    = _Val;
; 2505 :     }
; 2506 : 
; 2507 : protected:
; 2508 :     _CONSTEXPR20 _Vbase _Mask() const noexcept {
; 2509 :         return static_cast<_Vbase>(1) << this->_Myoff;
; 2510 :     }
; 2511 : };
; 2512 : 
; 2513 : template <class _Alvbase_wrapped>
; 2514 : class _Vb_const_iterator : public _Vb_iter_base<_Alvbase_wrapped> {
; 2515 : public:
; 2516 :     using _Mybase         = _Vb_iter_base<_Alvbase_wrapped>;
; 2517 :     using _Mycont         = typename _Mybase::_Mycont;
; 2518 :     using _Size_type      = typename _Mybase::_Size_type;
; 2519 :     using _Reft           = _Vb_reference<_Alvbase_wrapped>;
; 2520 :     using const_reference = bool;
; 2521 : 
; 2522 :     using iterator_category = random_access_iterator_tag;
; 2523 :     using value_type        = bool;
; 2524 :     using difference_type   = typename _Mybase::_Difference_type;
; 2525 :     using pointer           = const_reference*;
; 2526 :     using reference         = const_reference;
; 2527 : 
; 2528 :     _CONSTEXPR20 _Vb_const_iterator() = default;
; 2529 : 
; 2530 :     _CONSTEXPR20 _Vb_const_iterator(const _Vbase* _Ptr, const _Container_base* _Mypvbool) noexcept
; 2531 :         : _Mybase(_Ptr, 0, _Mypvbool) {}
; 2532 : 
; 2533 :     _NODISCARD _CONSTEXPR20 const_reference operator*() const noexcept {
; 2534 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2535 :         const auto _Cont = static_cast<const _Mycont*>(this->_Getcont());
; 2536 :         _STL_VERIFY(_Cont, "cannot dereference value-initialized vector<bool> iterator");
; 2537 :         _STL_VERIFY(this->_Total_off(_Cont) < static_cast<difference_type>(_Cont->_Mysize),
; 2538 :             "vector<bool> iterator not dereferenceable");
; 2539 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2540 : 
; 2541 :         return _Reft(*this);
; 2542 :     }
; 2543 : 
; 2544 :     _CONSTEXPR20 _Vb_const_iterator& operator++() noexcept {
; 2545 :         _Inc();
; 2546 :         return *this;
; 2547 :     }
; 2548 : 
; 2549 :     _CONSTEXPR20 _Vb_const_iterator operator++(int) noexcept {
; 2550 :         _Vb_const_iterator _Tmp = *this;
; 2551 :         _Inc();
; 2552 :         return _Tmp;
; 2553 :     }
; 2554 : 
; 2555 :     _CONSTEXPR20 _Vb_const_iterator& operator--() noexcept {
; 2556 :         _Dec();
; 2557 :         return *this;
; 2558 :     }
; 2559 : 
; 2560 :     _CONSTEXPR20 _Vb_const_iterator operator--(int) noexcept {
; 2561 :         _Vb_const_iterator _Tmp = *this;
; 2562 :         _Dec();
; 2563 :         return _Tmp;
; 2564 :     }
; 2565 : 
; 2566 :     _CONSTEXPR20 _Vb_const_iterator& operator+=(const difference_type _Off) noexcept {
; 2567 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2568 :         if (_Off != 0) {
; 2569 :             const auto _Cont = static_cast<const _Mycont*>(this->_Getcont());
; 2570 :             _STL_VERIFY(_Cont, "cannot seek value-initialized vector<bool> iterator");
; 2571 :             const auto _Start_offset = this->_Total_off(_Cont);
; 2572 :             if (_Off < 0) {
; 2573 :                 _STL_VERIFY(-_Start_offset <= _Off, "cannot seek vector<bool> iterator before begin");
; 2574 :             } else if (0 < _Off) {
; 2575 :                 _STL_VERIFY(_Off <= static_cast<difference_type>(_Cont->_Mysize - _Start_offset),
; 2576 :                     "cannot seek vector<bool> iterator after end");
; 2577 :             }
; 2578 :         }
; 2579 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2580 : 
; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  000d4	33 c0		 xor	 eax, eax
$LN214@erase:

; 2586 :             this->_Myoff += static_cast<_Size_type>(_Off);

  000d6	03 c8		 add	 ecx, eax
  000d8	8b c1		 mov	 eax, ecx
  000da	c1 e8 05	 shr	 eax, 5

; 2587 :             this->_Myptr += this->_Myoff / _VBITS;

  000dd	8d 34 86	 lea	 esi, DWORD PTR [esi+eax*4]
$LN219@erase:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4849 :         return _STD _Copy_vbool(_First, _Last, _Dest);

  000e0	52		 push	 edx
  000e1	ff 75 d4	 push	 DWORD PTR __First$[ebp]
  000e4	83 e1 1f	 and	 ecx, 31			; 0000001fH
  000e7	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  000ea	51		 push	 ecx
  000eb	56		 push	 esi
  000ec	ff 75 f0	 push	 DWORD PTR __Last$2$[ebp]
  000ef	ff 75 ec	 push	 DWORD PTR __Last$1$[ebp]
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 ??$_Copy_vbool@V?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@V12@@std@@YA?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@0@V10@00@Z ; std::_Copy_vbool<std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >,std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2617 :         return static_cast<difference_type>(_Mybase::_VBITS_DIFF * (this->_Myptr - _Right._Myptr))

  000f8	8b 75 d4	 mov	 esi, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4849 :         return _STD _Copy_vbool(_First, _Last, _Dest);

  000fb	83 c4 1c	 add	 esp, 28			; 0000001cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2617 :         return static_cast<difference_type>(_Mybase::_VBITS_DIFF * (this->_Myptr - _Right._Myptr))

  000fe	2b 37		 sub	 esi, DWORD PTR [edi]
  00100	c1 fe 02	 sar	 esi, 2
  00103	c1 e6 05	 shl	 esi, 5
  00106	03 75 d8	 add	 esi, DWORD PTR $T2[ebp+4]

; 3565 :         if (max_size() < _Size) {

  00109	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  0010f	77 78		 ja	 SHORT $LN221@erase

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00111	8b 57 04	 mov	 edx, DWORD PTR [edi+4]

; 2866 :         return (_Count + _VBITS - 1) / _VBITS;

  00114	8d 4e 1f	 lea	 ecx, DWORD PTR [esi+31]

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00117	8b c2		 mov	 eax, edx

; 2866 :         return (_Count + _VBITS - 1) / _VBITS;

  00119	c1 e9 05	 shr	 ecx, 5

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0011c	2b 07		 sub	 eax, DWORD PTR [edi]
  0011e	c1 f8 02	 sar	 eax, 2

; 2866 :         return (_Count + _VBITS - 1) / _VBITS;

  00121	89 4d e8	 mov	 DWORD PTR __Words$1$[ebp], ecx

; 3570 :         if (_Words < this->_Myvec.size()) {

  00124	3b c8		 cmp	 ecx, eax
  00126	73 1a		 jae	 SHORT $LN179@erase

; 129  :         _Ptr += _Off;

  00128	8b 07		 mov	 eax, DWORD PTR [edi]
  0012a	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 1780 :         if (_Firstptr != _Lastptr) { // something to do, invalidate iterators

  0012d	3b c2		 cmp	 eax, edx
  0012f	74 11		 je	 SHORT $LN179@erase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5163 :                 return _STD _Copy_memmove(_First, _Last, _Dest);

  00131	50		 push	 eax
  00132	52		 push	 edx
  00133	52		 push	 edx
  00134	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAIPAI@std@@YAPAIPAI00@Z ; std::_Copy_memmove<unsigned int *,unsigned int *>
  00139	8b 4d e8	 mov	 ecx, DWORD PTR __Words$1$[ebp]
  0013c	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1786 :             _Mylast = _Newlast;

  0013f	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN179@erase:

; 3574 :         this->_Mysize = _Size;

  00142	89 77 0c	 mov	 DWORD PTR [edi+12], esi

; 3575 :         _Size %= _VBITS;

  00145	83 e6 1f	 and	 esi, 31			; 0000001fH

; 3576 :         if (0 < _Size) {

  00148	76 12		 jbe	 SHORT $LN143@erase

; 1919 :         return _My_data._Myfirst[_Pos];

  0014a	8b 07		 mov	 eax, DWORD PTR [edi]
  0014c	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]

; 3577 :             this->_Myvec[_Words - 1] &= (static_cast<_Vbase>(1) << _Size) - 1;

  0014f	b8 01 00 00 00	 mov	 eax, 1
  00154	8b ce		 mov	 ecx, esi
  00156	d3 e0		 shl	 eax, cl
  00158	48		 dec	 eax
  00159	21 42 fc	 and	 DWORD PTR [edx-4], eax
$LN143@erase:

; 2767 :         _Vb_iterator _Tmp = *this;

  0015c	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  0015f	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 2768 :         _Tmp += _Off;

  00161	ff 75 e0	 push	 DWORD PTR __Off$1$[ebp]
  00164	89 0e		 mov	 DWORD PTR [esi], ecx
  00166	8b ce		 mov	 ecx, esi
  00168	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0016f	e8 00 00 00 00	 call	 ??Y?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator+=

; 3438 :         iterator _First      = _Make_iter(_First_arg);
; 3439 :         iterator _Last       = _Make_iter(_Last_arg);
; 3440 :         difference_type _Off = _First - begin();
; 3441 : 
; 3442 :         if (_First != _Last) { // worth doing, copy down over hole
; 3443 : #if _ITERATOR_DEBUG_LEVEL == 2
; 3444 :             _STL_VERIFY(_Last >= _First && end() >= _Last, "vector<bool> erase iterator outside range");
; 3445 :             iterator _Next      = _STD copy(_Last, end(), _First);
; 3446 :             const auto _Newsize = static_cast<size_type>(_Next - begin());
; 3447 :             _Orphan_range(_Newsize, this->_Mysize);
; 3448 :             _Trim(_Newsize);
; 3449 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 / _ITERATOR_DEBUG_LEVEL < 2 vvv
; 3450 :             iterator _Next = _STD copy(_Last, end(), _First);
; 3451 :             _Trim(static_cast<size_type>(_Next - begin()));
; 3452 : #endif // ^^^ _ITERATOR_DEBUG_LEVEL < 2 ^^^
; 3453 :         }
; 3454 :         return begin() + _Off;

  00174	8b c6		 mov	 eax, esi

; 3455 :     }

  00176	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00179	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00180	59		 pop	 ecx
  00181	5f		 pop	 edi
  00182	5e		 pop	 esi
  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c2 14 00	 ret	 20			; 00000014H
$LN221@erase:

; 3566 :             _Xlen(); // result too long

  00189	e8 00 00 00 00	 call	 ?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@SAXXZ ; std::vector<bool,std::allocator<bool> >::_Xlen
$LN218@erase:
  0018e	cc		 int	 3
  0018f	cc		 int	 3
  00190	cc		 int	 3
  00191	cc		 int	 3
  00192	cc		 int	 3
  00193	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@V?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@0@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@V?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@0@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@V?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@0@Z ENDP ; std::vector<bool,std::allocator<bool> >::erase
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?resize@?$vector@_NV?$allocator@_N@std@@@std@@QAEXI_N@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
$T2 = -16						; size = 8
$T3 = -16						; size = 8
$T4 = -8						; size = 8
_this$1$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 1
$T5 = 12						; size = 4
?resize@?$vector@_NV?$allocator@_N@std@@@std@@QAEXI_N@Z PROC ; std::vector<bool,std::allocator<bool> >::resize, COMDAT
; _this$ = ecx

; 3165 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW size_type _Newsize, bool _Val = false) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 3166 :         if (size() < _Newsize) {

  00007	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
  00010	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00013	3b d6		 cmp	 edx, esi
  00015	0f 83 8b 00 00
	00		 jae	 $LN2@resize

; 3167 :             _Insert_n(end(), _Newsize - size(), _Val);

  0001b	2b f2		 sub	 esi, edx

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  0001d	33 c9		 xor	 ecx, ecx

; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  0001f	85 d2		 test	 edx, edx
  00021	79 1e		 jns	 SHORT $LN28@resize
  00023	8b c2		 mov	 eax, edx
  00025	f7 d8		 neg	 eax
  00027	3b c8		 cmp	 ecx, eax
  00029	73 16		 jae	 SHORT $LN28@resize

; 2582 :             this->_Myoff += static_cast<_Size_type>(_Off);

  0002b	8b ca		 mov	 ecx, edx

; 2583 :             this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;

  0002d	8b 17		 mov	 edx, DWORD PTR [edi]
  0002f	8b c1		 mov	 eax, ecx
  00031	f7 d0		 not	 eax
  00033	c1 e8 05	 shr	 eax, 5
  00036	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  0003d	2b d0		 sub	 edx, eax

; 2584 :             this->_Myoff %= _VBITS;
; 2585 :         } else { // add non-negative increment

  0003f	eb 0c		 jmp	 SHORT $LN116@resize
$LN28@resize:

; 2586 :             this->_Myoff += static_cast<_Size_type>(_Off);

  00041	03 ca		 add	 ecx, edx

; 2587 :             this->_Myptr += this->_Myoff / _VBITS;

  00043	8b 17		 mov	 edx, DWORD PTR [edi]
  00045	8b c1		 mov	 eax, ecx
  00047	c1 e8 05	 shr	 eax, 5
  0004a	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
$LN116@resize:

; 3488 :         size_type _Off     = _Insert_x(_Where, _Count);

  0004d	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00050	56		 push	 esi
  00051	51		 push	 ecx
  00052	52		 push	 edx
  00053	8b cf		 mov	 ecx, edi
  00055	e8 00 00 00 00	 call	 ?_Insert_x@?$vector@_NV?$allocator@_N@std@@@std@@QAEIV?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@I@Z ; std::vector<bool,std::allocator<bool> >::_Insert_x

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  0005a	8b 17		 mov	 edx, DWORD PTR [edi]

; 3488 :         size_type _Off     = _Insert_x(_Where, _Count);

  0005c	8b c8		 mov	 ecx, eax

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  0005e	33 ff		 xor	 edi, edi

; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  00060	85 c9		 test	 ecx, ecx
  00062	79 1a		 jns	 SHORT $LN53@resize
  00064	f7 d8		 neg	 eax
  00066	3b f8		 cmp	 edi, eax
  00068	73 14		 jae	 SHORT $LN53@resize

; 2582 :             this->_Myoff += static_cast<_Size_type>(_Off);

  0006a	03 cf		 add	 ecx, edi
  0006c	8b c1		 mov	 eax, ecx
  0006e	f7 d0		 not	 eax

; 2583 :             this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;

  00070	c1 e8 05	 shr	 eax, 5
  00073	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  0007a	2b d0		 sub	 edx, eax

; 2584 :             this->_Myoff %= _VBITS;
; 2585 :         } else { // add non-negative increment

  0007c	eb 0a		 jmp	 SHORT $LN117@resize
$LN53@resize:

; 2586 :             this->_Myoff += static_cast<_Size_type>(_Off);

  0007e	03 cf		 add	 ecx, edi
  00080	8b c1		 mov	 eax, ecx
  00082	c1 e8 05	 shr	 eax, 5

; 2587 :             this->_Myptr += this->_Myoff / _VBITS;

  00085	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
$LN117@resize:

; 3490 :         _STD fill_n(_Result, _Count, _Val);

  00088	8d 45 0c	 lea	 eax, DWORD PTR __Val$[ebp]
  0008b	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0008e	50		 push	 eax
  0008f	56		 push	 esi
  00090	51		 push	 ecx
  00091	52		 push	 edx
  00092	8d 45 f8	 lea	 eax, DWORD PTR $T4[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ??$fill_n@V?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@I_N@std@@YA?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@0@V10@IAB_N@Z ; std::fill_n<std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >,unsigned int,bool>
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	5f		 pop	 edi

; 3170 :         }
; 3171 :     }

  0009f	5e		 pop	 esi
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
$LN2@resize:

; 3168 :         } else if (_Newsize < size()) {

  000a6	0f 86 80 00 00
	00		 jbe	 $LN4@resize

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  000ac	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000ae	33 ff		 xor	 edi, edi
  000b0	89 4d f0	 mov	 DWORD PTR $T3[ebp], ecx

; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  000b3	85 d2		 test	 edx, edx
  000b5	79 21		 jns	 SHORT $LN79@resize
  000b7	8b c2		 mov	 eax, edx
  000b9	f7 d8		 neg	 eax
  000bb	3b f8		 cmp	 edi, eax
  000bd	73 19		 jae	 SHORT $LN79@resize

; 2582 :             this->_Myoff += static_cast<_Size_type>(_Off);

  000bf	8b fa		 mov	 edi, edx

; 2583 :             this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;

  000c1	8b d1		 mov	 edx, ecx
  000c3	8b c7		 mov	 eax, edi
  000c5	f7 d0		 not	 eax
  000c7	c1 e8 05	 shr	 eax, 5
  000ca	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  000d1	2b d0		 sub	 edx, eax
  000d3	89 55 0c	 mov	 DWORD PTR $T5[ebp], edx

; 2584 :             this->_Myoff %= _VBITS;
; 2585 :         } else { // add non-negative increment

  000d6	eb 0d		 jmp	 SHORT $LN118@resize
$LN79@resize:

; 2586 :             this->_Myoff += static_cast<_Size_type>(_Off);

  000d8	03 fa		 add	 edi, edx
  000da	8b c7		 mov	 eax, edi
  000dc	c1 e8 05	 shr	 eax, 5

; 2587 :             this->_Myptr += this->_Myoff / _VBITS;

  000df	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000e2	89 45 0c	 mov	 DWORD PTR $T5[ebp], eax
$LN118@resize:

; 2419 :         : _Myptr(_Ptr), _Myoff(_Off) {

  000e5	83 e7 1f	 and	 edi, 31			; 0000001fH
  000e8	89 4d f0	 mov	 DWORD PTR $T1[ebp], ecx
  000eb	33 d2		 xor	 edx, edx

; 2581 :         if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) { // add negative increment

  000ed	85 f6		 test	 esi, esi
  000ef	79 1c		 jns	 SHORT $LN102@resize
  000f1	8b c6		 mov	 eax, esi
  000f3	f7 d8		 neg	 eax
  000f5	3b d0		 cmp	 edx, eax
  000f7	73 14		 jae	 SHORT $LN102@resize

; 2582 :             this->_Myoff += static_cast<_Size_type>(_Off);

  000f9	8b d6		 mov	 edx, esi
  000fb	8b c2		 mov	 eax, edx
  000fd	f7 d0		 not	 eax

; 2583 :             this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;

  000ff	c1 e8 05	 shr	 eax, 5
  00102	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [eax*4+4]
  00109	2b c8		 sub	 ecx, eax

; 2584 :             this->_Myoff %= _VBITS;
; 2585 :         } else { // add non-negative increment

  0010b	eb 0a		 jmp	 SHORT $LN119@resize
$LN102@resize:

; 2586 :             this->_Myoff += static_cast<_Size_type>(_Off);

  0010d	03 d6		 add	 edx, esi
  0010f	8b c2		 mov	 eax, edx
  00111	c1 e8 05	 shr	 eax, 5

; 2587 :             this->_Myptr += this->_Myoff / _VBITS;

  00114	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
$LN119@resize:

; 3169 :             erase(begin() + static_cast<difference_type>(_Newsize), end());

  00117	57		 push	 edi
  00118	ff 75 0c	 push	 DWORD PTR $T5[ebp]
  0011b	83 e2 1f	 and	 edx, 31			; 0000001fH
  0011e	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  00121	52		 push	 edx
  00122	51		 push	 ecx
  00123	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 ?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@V?$_Vb_const_iterator@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@2@0@Z ; std::vector<bool,std::allocator<bool> >::erase
$LN4@resize:

; 3170 :         }
; 3171 :     }

  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 08 00	 ret	 8
?resize@?$vector@_NV?$allocator@_N@std@@@std@@QAEXI_N@Z ENDP ; std::vector<bool,std::allocator<bool> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??4?$vector@_NV?$allocator@_N@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__First$2$ = -8						; size = 4
__Oldsize$1$ = -4					; size = 4
$T1 = -4						; size = 4
__Right$ = 8						; size = 4
??4?$vector@_NV?$allocator@_N@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<bool,std::allocator<bool> >::operator=, COMDAT
; _this$ = ecx

; 3044 :     _CONSTEXPR20 vector& operator=(const vector& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3045 :         if (this == _STD addressof(_Right)) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	3b f8		 cmp	 edi, eax
  0000e	0f 84 f4 00 00
	00		 je	 $LN91@operator

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00014	8b 10		 mov	 edx, DWORD PTR [eax]

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00016	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00019	53		 push	 ebx

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  0001a	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  0001d	56		 push	 esi

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  0001e	8b 37		 mov	 esi, DWORD PTR [edi]

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00020	2b da		 sub	 ebx, edx

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00022	2b ce		 sub	 ecx, esi

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  00024	c1 fb 02	 sar	 ebx, 2

; 1417 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00027	c1 f9 02	 sar	 ecx, 2

; 1524 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  0002a	89 55 f8	 mov	 DWORD PTR __First$2$[ebp], edx

; 1418 :         if (_Newsize > _Oldcapacity) {

  0002d	3b d9		 cmp	 ebx, ecx
  0002f	0f 86 86 00 00
	00		 jbe	 $LN11@operator

; 1688 :         if (_Newsize > max_size()) {

  00035	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0003b	0f 87 d0 00 00
	00		 ja	 $LN95@operator

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00041	8b d1		 mov	 edx, ecx
  00043	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00048	d1 ea		 shr	 edx, 1
  0004a	2b c2		 sub	 eax, edx
  0004c	3b c8		 cmp	 ecx, eax
  0004e	76 09		 jbe	 SHORT $LN21@operator

; 1997 :             return _Max; // geometric growth would overflow

  00050	c7 45 fc ff ff
	ff 3f		 mov	 DWORD PTR $T1[ebp], 1073741823 ; 3fffffffH
  00057	eb 0b		 jmp	 SHORT $LN22@operator
$LN21@operator:

; 1998 :         }
; 1999 : 
; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  0005c	3b c3		 cmp	 eax, ebx
  0005e	0f 42 c3	 cmovb	 eax, ebx
  00061	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
$LN22@operator:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00064	85 f6		 test	 esi, esi
  00066	74 3f		 je	 SHORT $LN18@operator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00068	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0006b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00071	72 16		 jb	 SHORT $LN43@operator

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00073	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00076	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00079	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007b	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0007e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00081	0f 87 8f 00 00
	00		 ja	 $LN40@operator

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00087	8b f2		 mov	 esi, edx
$LN43@operator:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00089	51		 push	 ecx
  0008a	56		 push	 esi
  0008b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1699 :             _Myfirst = nullptr;

  00090	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00096	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1700 :             _Mylast  = nullptr;

  00099	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1701 :             _Myend   = nullptr;

  000a0	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN18@operator:

; 1702 :         }
; 1703 : 
; 1704 :         _Buy_raw(_Newcapacity);

  000a7	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  000aa	8b cf		 mov	 ecx, edi
  000ac	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@IV?$allocator@I@std@@@std@@AAEXI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_raw

; 1421 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);

  000b1	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  000b3	8b 45 f8	 mov	 eax, DWORD PTR __First$2$[ebp]
  000b6	56		 push	 esi
  000b7	53		 push	 ebx
  000b8	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1427 :             return;

  000b9	eb 34		 jmp	 SHORT $LN92@operator
$LN11@operator:

; 1428 :         }
; 1429 : 
; 1430 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  000bb	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000be	2b c6		 sub	 eax, esi
  000c0	c1 f8 02	 sar	 eax, 2
  000c3	89 45 fc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1431 :         if (_Newsize > _Oldsize) {

  000c6	56		 push	 esi
  000c7	3b d8		 cmp	 ebx, eax
  000c9	76 22		 jbe	 SHORT $LN12@operator

; 1432 :             bool _Copied = false;
; 1433 :             if constexpr (_Iter_copy_cat<_Iter, pointer>::_Bitcopy_assignable) {
; 1434 : #if _HAS_CXX20
; 1435 :                 if (!_STD is_constant_evaluated())
; 1436 : #endif // _HAS_CXX20
; 1437 :                 {
; 1438 :                     _Copy_memmove_n(_First, static_cast<size_t>(_Oldsize), _Myfirst);

  000cb	50		 push	 eax
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAIPAI@std@@YAPAIPAII0@Z ; std::_Copy_memmove_n<unsigned int *,unsigned int *>

; 1439 :                     _First += _Oldsize;

  000d2	8b 4d fc	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]

; 1440 :                     _Copied = true;
; 1441 :                 }
; 1442 :             }
; 1443 : 
; 1444 :             if (!_Copied) {
; 1445 :                 for (auto _Mid = _Myfirst; _Mid != _Mylast; ++_Mid, (void) ++_First) {
; 1446 :                     *_Mid = *_First;
; 1447 :                 }
; 1448 :             }
; 1449 : 
; 1450 :             if constexpr (_Nothrow_construct) {
; 1451 :                 _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1452 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  000d5	2b d9		 sub	 ebx, ecx
  000d7	8b 45 f8	 mov	 eax, DWORD PTR __First$2$[ebp]
  000da	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  000dd	56		 push	 esi
  000de	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1439 :                     _First += _Oldsize;

  000df	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1893 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAIPAI@std@@YAPAIPAII0@Z ; std::_Copy_memmove_n<unsigned int *,unsigned int *>
  000e8	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1458 :         } else {

  000eb	eb 0a		 jmp	 SHORT $LN93@operator
$LN12@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4824 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

  000ed	53		 push	 ebx
  000ee	52		 push	 edx
$LN92@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 3051 :         this->_Mysize = _Right._Mysize;

  000ef	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAIPAI@std@@YAPAIPAII0@Z ; std::_Copy_memmove_n<unsigned int *,unsigned int *>
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN93@operator:
  000f7	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]
  000fa	89 47 04	 mov	 DWORD PTR [edi+4], eax
  000fd	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]

; 3052 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 0 / _ITERATOR_DEBUG_LEVEL != 0 vvv
; 3053 :         this->_Orphan_all();
; 3054 :         auto& _Al       = this->_Getal();
; 3055 :         auto& _Right_al = _Right._Getal();
; 3056 :         if constexpr (_Choose_pocca_v<_Alvbase>) {
; 3057 :             if (_Al != _Right_al) {
; 3058 :                 // reload proxy
; 3059 :                 using _Alproxy_type = _Rebind_alloc_t<_Alvbase, _Container_proxy>;
; 3060 :                 _Alproxy_type _Oldal(_Al);
; 3061 :                 _Alproxy_type _Right_proxy_al(_Right_al);
; 3062 :                 _Container_proxy_ptr<_Alvbase> _Proxy(_Right_proxy_al, _Leave_proxy_unbound{});
; 3063 :                 this->_Myvec  = _Right._Myvec;
; 3064 :                 this->_Mysize = _Right._Mysize;
; 3065 :                 _Proxy._Bind(_Oldal, this);
; 3066 :                 return *this;
; 3067 :             }
; 3068 :         }
; 3069 : 
; 3070 :         this->_Myvec  = _Right._Myvec;
; 3071 :         this->_Mysize = _Right._Mysize;
; 3072 : #endif // ^^^ _ITERATOR_DEBUG_LEVEL != 0 ^^^
; 3073 : 
; 3074 :         return *this;

  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx
  00102	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00105	89 47 0c	 mov	 DWORD PTR [edi+12], eax
$LN91@operator:

; 3075 :     }

  00108	8b c7		 mov	 eax, edi
  0010a	5f		 pop	 edi
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c2 04 00	 ret	 4
$LN95@operator:

; 1689 :             _Xlength();

  00111	e8 00 00 00 00	 call	 ?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
$LN40@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00116	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN90@operator:
  0011b	cc		 int	 3
??4?$vector@_NV?$allocator@_N@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<bool,std::allocator<bool> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ PROC	; std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >, COMDAT
; _this$ = ecx

; 3042 :     _CONSTEXPR20 ~vector() noexcept {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN13@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN32@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN29@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN32@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN13@vector:
  00049	5e		 pop	 esi

; 3042 :     _CONSTEXPR20 ~vector() noexcept {}

  0004a	c3		 ret	 0
$LN29@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN42@vector:
  00050	cc		 int	 3
??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ ENDP	; std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Buy_raw@?$vector@IV?$allocator@I@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@IV?$allocator@I@std@@@std@@AAEXI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_raw, COMDAT
; _this$ = ecx

; 2009 :     _CONSTEXPR20 void _Buy_raw(size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newcapacity$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2009 :     _CONSTEXPR20 void _Buy_raw(size_type _Newcapacity) {

  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0000a	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00010	77 52		 ja	 SHORT $LN25@Buy_raw

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00012	c1 e6 02	 shl	 esi, 2

; 227  :     if (_Bytes == 0) {

  00015	85 f6		 test	 esi, esi
  00017	75 12		 jne	 SHORT $LN12@Buy_raw

; 228  :         return nullptr;

  00019	33 c0		 xor	 eax, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  0001b	89 07		 mov	 DWORD PTR [edi], eax

; 2021 :         _Mylast               = _Newvec;

  0001d	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2022 :         _Myend                = _Newvec + _Newcapacity;

  00020	8b c6		 mov	 eax, esi
  00022	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 2023 :     }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN12@Buy_raw:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0002b	56		 push	 esi
  0002c	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  00032	72 18		 jb	 SHORT $LN13@Buy_raw

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00034	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  00039	89 07		 mov	 DWORD PTR [edi], eax
  0003b	83 c4 04	 add	 esp, 4

; 2021 :         _Mylast               = _Newvec;

  0003e	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2022 :         _Myend                = _Newvec + _Newcapacity;

  00041	03 c6		 add	 eax, esi
  00043	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 2023 :     }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN13@Buy_raw:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  00051	89 07		 mov	 DWORD PTR [edi], eax
  00053	83 c4 04	 add	 esp, 4

; 2021 :         _Mylast               = _Newvec;

  00056	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2022 :         _Myend                = _Newvec + _Newcapacity;

  00059	03 c6		 add	 eax, esi
  0005b	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 2023 :     }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN25@Buy_raw:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00064	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN22@Buy_raw:
  00069	cc		 int	 3
?_Buy_raw@?$vector@IV?$allocator@I@std@@@std@@AAEXI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Node_rep@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_rep@std@@UAEPAXI@Z PROC			; std::_Node_rep::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 28		 push	 40			; 00000028H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Node_rep@std@@UAEPAXI@Z ENDP			; std::_Node_rep::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Node_end_rep@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_end_rep@std@@UAEPAXI@Z PROC			; std::_Node_end_rep::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 18		 push	 24			; 00000018H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Node_end_rep@std@@UAEPAXI@Z ENDP			; std::_Node_end_rep::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??_G_Node_if@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Node_if@std@@UAEPAXI@Z PROC			; std::_Node_if::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1437 :     ~_Node_if() noexcept {

  00004	57		 push	 edi

; 1438 :         _Node_if* _Cur = _Child;

  00005	8b 79 18	 mov	 edi, DWORD PTR [ecx+24]
  00008	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1437 :     ~_Node_if() noexcept {

  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Node_if@std@@6B@

; 1439 :         while (_Cur) { // destroy branch

  00011	85 ff		 test	 edi, edi
  00013	74 3f		 je	 SHORT $LN7@scalar
  00015	53		 push	 ebx
  00016	56		 push	 esi
$LL6@scalar:

; 1440 :             _Node_if* _Tmp = _Cur;
; 1441 :             _Cur           = _Cur->_Child;

  00017	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
  0001a	8b f7		 mov	 esi, edi
  0001c	8b 38		 mov	 edi, DWORD PTR [eax]

; 1442 :             _Tmp->_Child   = nullptr;

  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1443 :             _Destroy_node(_Tmp, _Endif);

  00024	8b 59 14	 mov	 ebx, DWORD PTR [ecx+20]

; 1338 :     while (_Nx != _Ne && _Nx) { // destroy node

  00027	3b f3		 cmp	 esi, ebx
  00029	74 23		 je	 SHORT $LN14@scalar
  0002b	0f 1f 44 00 00	 npad	 5
$LL13@scalar:
  00030	85 f6		 test	 esi, esi
  00032	74 17		 je	 SHORT $LN26@scalar

; 1339 :         _Node_base* _Tmp = _Nx;

  00034	8b ce		 mov	 ecx, esi

; 1340 :         _Nx              = _Nx->_Next;

  00036	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00039	8b 30		 mov	 esi, DWORD PTR [eax]

; 1341 :         _Tmp->_Next      = nullptr;

  0003b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1342 :         delete _Tmp;

  00041	6a 01		 push	 1
  00043	8b 01		 mov	 eax, DWORD PTR [ecx]
  00045	ff 10		 call	 DWORD PTR [eax]
  00047	3b f3		 cmp	 esi, ebx
  00049	75 e5		 jne	 SHORT $LL13@scalar
$LN26@scalar:
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN14@scalar:

; 1439 :         while (_Cur) { // destroy branch

  0004e	85 ff		 test	 edi, edi
  00050	75 c5		 jne	 SHORT $LL6@scalar
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
$LN7@scalar:
  00054	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 1444 :         }
; 1445 :     }

  00058	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Node_base@std@@6B@
  0005e	5f		 pop	 edi
  0005f	74 14		 je	 SHORT $LN25@scalar
  00061	6a 1c		 push	 28			; 0000001cH
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0006c	83 c4 08	 add	 esp, 8
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
$LN25@scalar:
  00075	8b c1		 mov	 eax, ecx
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
??_G_Node_if@std@@UAEPAXI@Z ENDP			; std::_Node_if::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Node_endif@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_endif@std@@UAEPAXI@Z PROC			; std::_Node_endif::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 14		 push	 20			; 00000014H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Node_endif@std@@UAEPAXI@Z ENDP			; std::_Node_endif::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Node_back@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_back@std@@UAEPAXI@Z PROC			; std::_Node_back::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 18		 push	 24			; 00000018H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Node_back@std@@UAEPAXI@Z ENDP			; std::_Node_back::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Node_capture@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_capture@std@@UAEPAXI@Z PROC			; std::_Node_capture::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 18		 push	 24			; 00000018H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Node_capture@std@@UAEPAXI@Z ENDP			; std::_Node_capture::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??_G_Node_assert@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_assert@std@@UAEPAXI@Z PROC			; std::_Node_assert::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1369 :     ~_Node_assert() noexcept {

  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 1370 :         _Destroy_node(_Child);

  00007	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
  0000a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_Node_assert@std@@6B@

; 1338 :     while (_Nx != _Ne && _Nx) { // destroy node

  00010	85 f6		 test	 esi, esi
  00012	74 17		 je	 SHORT $LN12@scalar
$LL11@scalar:

; 1339 :         _Node_base* _Tmp = _Nx;

  00014	8b ce		 mov	 ecx, esi

; 1340 :         _Nx              = _Nx->_Next;

  00016	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00019	8b 30		 mov	 esi, DWORD PTR [eax]

; 1341 :         _Tmp->_Next      = nullptr;

  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1342 :         delete _Tmp;

  00021	6a 01		 push	 1
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	ff 10		 call	 DWORD PTR [eax]
  00027	85 f6		 test	 esi, esi
  00029	75 e9		 jne	 SHORT $LL11@scalar
$LN12@scalar:
  0002b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 1371 :     }

  0002f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_Node_base@std@@6B@
  00035	74 0b		 je	 SHORT $LN20@scalar
  00037	6a 18		 push	 24			; 00000018H
  00039	57		 push	 edi
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003f	83 c4 08	 add	 esp, 8
$LN20@scalar:
  00042	8b c7		 mov	 eax, edi
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??_G_Node_assert@std@@UAEPAXI@Z ENDP			; std::_Node_assert::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Node_end_group@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_end_group@std@@UAEPAXI@Z PROC			; std::_Node_end_group::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 18		 push	 24			; 00000018H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Node_end_group@std@@UAEPAXI@Z ENDP			; std::_Node_end_group::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Root_node@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Root_node@std@@UAEPAXI@Z PROC			; std::_Root_node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 24		 push	 36			; 00000024H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Root_node@std@@UAEPAXI@Z ENDP			; std::_Root_node::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Node_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node_base@std@@UAEPAXI@Z PROC			; std::_Node_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Node_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 14		 push	 20			; 00000014H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Node_base@std@@UAEPAXI@Z ENDP			; std::_Node_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ??1_Node_base@std@@UAE@XZ
_TEXT	SEGMENT
??1_Node_base@std@@UAE@XZ PROC				; std::_Node_base::~_Node_base, COMDAT
; _this$ = ecx

; 1334 :     virtual ~_Node_base() noexcept {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Node_base@std@@6B@
  00006	c3		 ret	 0
??1_Node_base@std@@UAE@XZ ENDP				; std::_Node_base::~_Node_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??1?$regex_traits@D@std@@QAE@XZ
_TEXT	SEGMENT
??1?$regex_traits@D@std@@QAE@XZ PROC			; std::regex_traits<char>::~regex_traits<char>, COMDAT
; _this$ = ecx

; 352  :         if (_Ptr) {

  00000	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00003	85 c9		 test	 ecx, ecx
  00005	74 11		 je	 SHORT $LN12@regex_trai

; 353  :             delete _Ptr->_Decref();

  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 08	 call	 DWORD PTR [eax+8]
  0000c	85 c0		 test	 eax, eax
  0000e	74 08		 je	 SHORT $LN12@regex_trai
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	8b c8		 mov	 ecx, eax
  00014	6a 01		 push	 1
  00016	ff 12		 call	 DWORD PTR [edx]
$LN12@regex_trai:
  00018	c3		 ret	 0
??1?$regex_traits@D@std@@QAE@XZ ENDP			; std::regex_traits<char>::~regex_traits<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
;	COMDAT ?translate@?$_Regex_traits@D@std@@QBEDD@Z
_TEXT	SEGMENT
__Res$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 1
?translate@?$_Regex_traits@D@std@@QBEDD@Z PROC		; std::_Regex_traits<char>::translate, COMDAT
; _this$ = ecx

; 295  :     _Elem translate(_Elem _Ch) const { // provide locale-sensitive mapping

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 296  :         string_type _Res = _Getcoll()->transform(_STD addressof(_Ch), _STD addressof(_Ch) + 1);

  00010	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 40   :         return do_transform(_First, _Last);

  00012	8d 55 09	 lea	 edx, DWORD PTR __Ch$[ebp+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 295  :     _Elem translate(_Elem _Ch) const { // provide locale-sensitive mapping

  00015	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\locale

; 40   :         return do_transform(_First, _Last);

  00016	52		 push	 edx
  00017	8d 55 08	 lea	 edx, DWORD PTR __Ch$[ebp]
  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	52		 push	 edx
  0001d	8d 55 e4	 lea	 edx, DWORD PTR __Res$[ebp]
  00020	52		 push	 edx
  00021	ff 50 10	 call	 DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 297  :         return _Res.size() == 1 ? _Res[0] : _Ch;

  00024	83 7d f4 01	 cmp	 DWORD PTR __Res$[ebp+16], 1
  00028	8b 55 f8	 mov	 edx, DWORD PTR __Res$[ebp+20]
  0002b	8b 4d e4	 mov	 ecx, DWORD PTR __Res$[ebp]
  0002e	75 0d		 jne	 SHORT $LN3@translate
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00030	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  00033	8d 45 e4	 lea	 eax, DWORD PTR __Res$[ebp]

; 417  :         if (_Large_mode_engaged()) {

  00036	0f 47 c1	 cmova	 eax, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 297  :         return _Res.size() == 1 ? _Res[0] : _Ch;

  00039	8a 18		 mov	 bl, BYTE PTR [eax]
  0003b	eb 03		 jmp	 SHORT $LN4@translate
$LN3@translate:
  0003d	8a 5d 08	 mov	 bl, BYTE PTR __Ch$[ebp]
$LN4@translate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00040	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00043	76 25		 jbe	 SHORT $LN40@translate

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00045	42		 inc	 edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00046	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0004e	72 10		 jb	 SHORT $LN51@translate

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00053	83 c2 23	 add	 edx, 35			; 00000023H
  00056	2b c1		 sub	 eax, ecx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 1d		 ja	 SHORT $LN64@translate
$LN51@translate:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00060	52		 push	 edx
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00067	83 c4 08	 add	 esp, 8
$LN40@translate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 298  :     }

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006d	8a c3		 mov	 al, bl
  0006f	33 cd		 xor	 ecx, ebp
  00071	5b		 pop	 ebx
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
$LN64@translate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN62@translate:
  00082	cc		 int	 3
?translate@?$_Regex_traits@D@std@@QBEDD@Z ENDP		; std::_Regex_traits<char>::translate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -96						; size = 52
$T3 = -44						; size = 16
__Lock$4 = -28						; size = 4
$T5 = -24						; size = 4
__Psave$1$ = -24					; size = 4
$T6 = -20						; size = 4
__Lock$7 = -16						; size = 4
$T8 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
__Psave_guard$9 = 8					; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 432  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 433  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00027	6a 00		 push	 0
  00029	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0002c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], 0
  00033	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 89   :             if (_Id == 0) { // still zero, allocate stamp

  00038	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id

; 434  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	89 45 e8	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 89   :             if (_Id == 0) { // still zero, allocate stamp

  0004d	85 ff		 test	 edi, edi
  0004f	75 2f		 jne	 SHORT $LN11@use_facet

; 90   :                 _BEGIN_LOCK(_LOCK_LOCALE)

  00051	57		 push	 edi
  00052	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00055	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 91   :                 if (_Id == 0) {

  0005a	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, edi ; std::ctype<char>::id
  00060	75 10		 jne	 SHORT $LN12@use_facet

; 92   :                     _Id = static_cast<size_t>(++_Id_cnt);

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00067	40		 inc	 eax
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006d	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, eax ; std::ctype<char>::id
$LN12@use_facet:

; 93   :                 }
; 94   :                 _END_LOCK()

  00072	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00075	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0007a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
$LN11@use_facet:

; 375  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  00080	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00083	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  0008a	89 4d f0	 mov	 DWORD PTR $T8[ebp], ecx
  0008d	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00090	3b 7a 0c	 cmp	 edi, DWORD PTR [edx+12]
  00093	73 10		 jae	 SHORT $LN19@use_facet
  00095	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00098	8b 34 01	 mov	 esi, DWORD PTR [ecx+eax]

; 376  :         if (_Facptr || !_Ptr->_Xparent) {

  0009b	85 f6		 test	 esi, esi
  0009d	0f 85 c7 00 00
	00		 jne	 $LN77@use_facet
  000a3	eb 05		 jmp	 SHORT $LN81@use_facet
$LN19@use_facet:

; 372  :     }
; 373  : 
; 374  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 375  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  000a5	33 f6		 xor	 esi, esi
  000a7	89 4d f0	 mov	 DWORD PTR $T8[ebp], ecx
$LN81@use_facet:

; 376  :         if (_Facptr || !_Ptr->_Xparent) {

  000aa	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000ae	74 13		 je	 SHORT $LN14@use_facet

; 377  :             return _Facptr; // found facet or not transparent
; 378  :         }
; 379  : 
; 380  :         // look in current locale
; 381  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000b0	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 382  :         if (_Id < _Ptr0->_Facetcount) {

  000b5	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000b8	73 11		 jae	 SHORT $LN82@use_facet

; 383  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000ba	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000bd	8b 75 f0	 mov	 esi, DWORD PTR $T8[ebp]
  000c0	8b 34 06	 mov	 esi, DWORD PTR [esi+eax]
$LN14@use_facet:

; 435  : 
; 436  :     const size_t _Id         = _Facet::id._Get_index();
; 437  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 438  : 
; 439  :     if (!_Pf) {

  000c3	85 f6		 test	 esi, esi
  000c5	0f 85 9f 00 00
	00		 jne	 $LN77@use_facet
$LN82@use_facet:

; 440  :         if (_Psave) {

  000cb	8b 45 e8	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000ce	85 c0		 test	 eax, eax
  000d0	74 07		 je	 SHORT $LN3@use_facet

; 441  :             _Pf = _Psave; // lazy facet already allocated

  000d2	8b f0		 mov	 esi, eax

; 442  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000d4	e9 91 00 00 00	 jmp	 $LN77@use_facet
$LN3@use_facet:

; 2794 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  000d9	6a 18		 push	 24			; 00000018H
  000db	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000e0	8b f0		 mov	 esi, eax
  000e2	83 c4 04	 add	 esp, 4
  000e5	89 75 e8	 mov	 DWORD PTR $T5[ebp], esi
  000e8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ec	85 f6		 test	 esi, esi
  000ee	74 4d		 je	 SHORT $LN24@use_facet

; 371  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000f0	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000f3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f6	85 c9		 test	 ecx, ecx
  000f8	74 0c		 je	 SHORT $LN32@use_facet
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 190  :         return _Myptr ? _Myptr : &_Nul;

  000fa	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000fd	85 c0		 test	 eax, eax
  000ff	75 0a		 jne	 SHORT $LN33@use_facet
  00101	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 371  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  00104	eb 05		 jmp	 SHORT $LN33@use_facet
$LN32@use_facet:
  00106	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN33@use_facet:

; 2794 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  0010b	50		 push	 eax
  0010c	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  0010f	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 277  :         return ::_Getctype();

  00114	8d 45 d4	 lea	 eax, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2794 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  00117	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR $T6[ebp], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 277  :         return ::_Getctype();

  0011e	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 141  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  0011f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2788 :     __CLR_OR_THIS_CALL ctype(const _Locinfo& _Lobj, size_t _Refs = 0) : ctype_base(_Refs) {

  00126	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 277  :         return ::_Getctype();

  0012c	e8 00 00 00 00	 call	 __Getctype
  00131	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2816 :         _Ctype = _Lobj._Getctype();

  00134	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00137	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0

; 2794 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  0013b	eb 02		 jmp	 SHORT $LN25@use_facet
$LN24@use_facet:
  0013d	33 f6		 xor	 esi, esi
$LN25@use_facet:
  0013f	f6 45 ec 01	 test	 BYTE PTR $T6[ebp], 1
  00143	74 08		 je	 SHORT $LN29@use_facet
  00145	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  00148	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN29@use_facet:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1527 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0014d	89 75 08	 mov	 DWORD PTR __Psave_guard$9[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 455  :             _Facet_Register(_Pfmod);

  00150	56		 push	 esi
  00151	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00155	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 456  : #endif // ^^^ !defined(_M_CEE) ^^^
; 457  : 
; 458  :             _Pfmod->_Incref();

  0015a	8b 16		 mov	 edx, DWORD PTR [esi]
  0015c	83 c4 04	 add	 esp, 4
  0015f	8b ce		 mov	 ecx, esi
  00161	ff 52 04	 call	 DWORD PTR [edx+4]

; 459  :             _Facetptr<_Facet>::_Psave = _Psave;

  00164	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave
$LN77@use_facet:

; 460  :             _Pf                       = _Psave;
; 461  : 
; 462  :             (void) _Psave_guard.release();
; 463  :         }
; 464  :     }
; 465  : 
; 466  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  0016a	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0016d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00172	8b c6		 mov	 eax, esi

; 467  :     _END_LOCK()
; 468  : } // end of use_facet body

  00174	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00177	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017e	59		 pop	 ecx
  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$2:
  00008	6a 18		 push	 24			; 00000018H
  0000a	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1:
  00017	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$9[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00024	90		 npad	 1
  00025	90		 npad	 1
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2811 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2820 :         if (0 < _Ctype._Delfl) {

  00006	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2811 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2820 :         if (0 < _Ctype._Delfl) {

  0000f	85 c0		 test	 eax, eax
  00011	7e 0a		 jle	 SHORT $LN20@scalar

; 2821 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00013	ff 76 0c	 push	 DWORD PTR [esi+12]
  00016	e8 00 00 00 00	 call	 _free
  0001b	eb 0a		 jmp	 SHORT $LN21@scalar
$LN20@scalar:

; 2822 :         } else if (_Ctype._Delfl < 0) {

  0001d	79 0b		 jns	 SHORT $LN13@scalar

; 2823 :             delete[] _Ctype._Table;

  0001f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00022	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN21@scalar:

; 2824 :         }
; 2825 : 
; 2826 :         _CSTD free(_Ctype._LocaleName);

  00027	83 c4 04	 add	 esp, 4
$LN13@scalar:
  0002a	ff 76 14	 push	 DWORD PTR [esi+20]
  0002d	e8 00 00 00 00	 call	 _free
  00032	83 c4 04	 add	 esp, 4

; 2813 :     }

  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN16@scalar
  00041	6a 18		 push	 24			; 00000018H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN16@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2873 :         char* _Dest) const { // narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2874 :         _Adl_verify_range(_First, _Last);
; 2875 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 14	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2876 :         return _Last;

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2877 :     }

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2868 :     virtual _Elem __CLR_OR_THIS_CALL do_narrow(_Elem _Ch, char) const { // narrow char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2869 :         return _Ch;

  00003	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 2870 :     }

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2862 :         const char* _First, const char* _Last, _Elem* _Dest) const { // widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2863 :         _Adl_verify_range(_First, _Last);
; 2864 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2865 :         return _Last;

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2866 :     }

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2857 :     virtual _Elem __CLR_OR_THIS_CALL do_widen(char _Byte) const { // widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2858 :         return _Byte;

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 2859 :     }

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2848 :         const _Elem* _Last) const { // convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2849 :         _Adl_verify_range(_First, _Last);
; 2850 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 19		 je	 SHORT $LN10@do_toupper
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_toupper:

; 2851 :             *_First = static_cast<_Elem>(_Toupper(static_cast<unsigned char>(*_First), &_Ctype));

  00013	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Toupper
  0001d	88 06		 mov	 BYTE PTR [esi], al
  0001f	83 c4 08	 add	 esp, 8
  00022	46		 inc	 esi
  00023	3b f7		 cmp	 esi, edi
  00025	75 ec		 jne	 SHORT $LL4@do_toupper

; 2849 :         _Adl_verify_range(_First, _Last);
; 2850 :         for (; _First != _Last; ++_First) {

  00027	5b		 pop	 ebx
$LN10@do_toupper:
  00028	5f		 pop	 edi

; 2852 :         }
; 2853 : 
; 2854 :         return _First;
; 2855 :     }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2843 :     virtual _Elem __CLR_OR_THIS_CALL do_toupper(_Elem _Ch) const { // convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2844 :         return static_cast<_Elem>(_Toupper(static_cast<unsigned char>(_Ch), &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Toupper
  00011	83 c4 08	 add	 esp, 8

; 2845 :     }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2834 :         const _Elem* _Last) const { // convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2835 :         _Adl_verify_range(_First, _Last);
; 2836 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 19		 je	 SHORT $LN10@do_tolower
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_tolower:

; 2837 :             *_First = static_cast<_Elem>(_Tolower(static_cast<unsigned char>(*_First), &_Ctype));

  00013	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Tolower
  0001d	88 06		 mov	 BYTE PTR [esi], al
  0001f	83 c4 08	 add	 esp, 8
  00022	46		 inc	 esi
  00023	3b f7		 cmp	 esi, edi
  00025	75 ec		 jne	 SHORT $LL4@do_tolower

; 2835 :         _Adl_verify_range(_First, _Last);
; 2836 :         for (; _First != _Last; ++_First) {

  00027	5b		 pop	 ebx
$LN10@do_tolower:
  00028	5f		 pop	 edi

; 2838 :         }
; 2839 : 
; 2840 :         return _First;
; 2841 :     }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2829 :     virtual _Elem __CLR_OR_THIS_CALL do_tolower(_Elem _Ch) const { // convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2830 :         return static_cast<_Elem>(_Tolower(static_cast<unsigned char>(_Ch), &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Tolower
  00011	83 c4 08	 add	 esp, 8

; 2831 :     }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2811 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2820 :         if (0 < _Ctype._Delfl) {

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2811 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2820 :         if (0 < _Ctype._Delfl) {

  0000c	85 c0		 test	 eax, eax
  0000e	7e 0a		 jle	 SHORT $LN12@ctype

; 2821 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00010	ff 76 0c	 push	 DWORD PTR [esi+12]
  00013	e8 00 00 00 00	 call	 _free
  00018	eb 0a		 jmp	 SHORT $LN13@ctype
$LN12@ctype:

; 2822 :         } else if (_Ctype._Delfl < 0) {

  0001a	79 0b		 jns	 SHORT $LN7@ctype

; 2823 :             delete[] _Ctype._Table;

  0001c	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN13@ctype:

; 2824 :         }
; 2825 : 
; 2826 :         _CSTD free(_Ctype._LocaleName);

  00024	83 c4 04	 add	 esp, 4
$LN7@ctype:
  00027	ff 76 14	 push	 DWORD PTR [esi+20]
  0002a	e8 00 00 00 00	 call	 _free
  0002f	83 c4 04	 add	 esp, 4

; 2812 :         _Tidy();
; 2813 :     }

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00038	5e		 pop	 esi
  00039	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 2447 :     __CLR_OR_THIS_CALL ~ctype_base() noexcept override {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 352  :         if (_Ptr) {

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	85 c9		 test	 ecx, ecx
  00005	74 11		 je	 SHORT $LN4@locale

; 353  :             delete _Ptr->_Decref();

  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 08	 call	 DWORD PTR [eax+8]
  0000c	85 c0		 test	 eax, eax
  0000e	74 08		 je	 SHORT $LN4@locale
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	8b c8		 mov	 ecx, eax
  00014	6a 01		 push	 1
  00016	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 354  :         }
; 355  :     }

  00018	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 144  :         __CLR_OR_THIS_CALL ~facet() noexcept override {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 129  :             if (_MT_DECR(_Myrefs) == 0) {

  00000	83 c8 ff	 or	 eax, -1
  00003	f0 0f c1 41 04	 lock	  xadd	 DWORD PTR [ecx+4], eax
  00008	b8 00 00 00 00	 mov	 eax, 0
  0000d	0f 44 c1	 cmove	 eax, ecx

; 130  :                 return this;
; 131  :             }
; 132  : 
; 133  :             return nullptr;
; 134  :         }

  00010	c3		 ret	 0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 125  :             _MT_INCR(_Myrefs);

  00000	f0 ff 41 04	 lock	  inc	 DWORD PTR [ecx+4]

; 126  :         }

  00004	c3		 ret	 0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 181  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 203  :         if (_Myptr) {

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@Yarn

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN8@Yarn:

; 182  :         _Tidy();
; 183  :     }

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 181  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 203  :         if (_Myptr) {

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@Yarn

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN8@Yarn:

; 182  :         _Tidy();
; 183  :     }

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 256  :     __CLR_OR_THIS_CALL ~_Locinfo() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 257  :         _Locinfo_dtor(this);

  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 203  :         if (_Myptr) {

  0002b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 257  :         _Locinfo_dtor(this);

  0002e	83 c4 04	 add	 esp, 4

; 203  :         if (_Myptr) {

  00031	85 c0		 test	 eax, eax
  00033	74 09		 je	 SHORT $LN8@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _free
  0003b	83 c4 04	 add	 esp, 4
$LN8@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  0003e	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 203  :         if (_Myptr) {

  00045	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00048	85 c0		 test	 eax, eax
  0004a	74 09		 je	 SHORT $LN15@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _free
  00052	83 c4 04	 add	 esp, 4
$LN15@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  00055	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 203  :         if (_Myptr) {

  0005c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005f	85 c0		 test	 eax, eax
  00061	74 09		 je	 SHORT $LN22@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _free
  00069	83 c4 04	 add	 esp, 4
$LN22@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  0006c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 203  :         if (_Myptr) {

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	85 c0		 test	 eax, eax
  00078	74 09		 je	 SHORT $LN29@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _free
  00080	83 c4 04	 add	 esp, 4
$LN29@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  00083	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 203  :         if (_Myptr) {

  0008a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0008d	85 c0		 test	 eax, eax
  0008f	74 09		 je	 SHORT $LN36@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _free
  00097	83 c4 04	 add	 esp, 4
$LN36@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  0009a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 203  :         if (_Myptr) {

  000a1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a4	85 c0		 test	 eax, eax
  000a6	74 09		 je	 SHORT $LN43@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _free
  000ae	83 c4 04	 add	 esp, 4
$LN43@Locinfo:

; 258  :     }

  000b1	8b ce		 mov	 ecx, esi

; 211  :         _Myptr = nullptr;

  000b3	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 258  :     }

  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5e		 pop	 esi
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
  000cf	cc		 int	 3
  000d0	cc		 int	 3
  000d1	cc		 int	 3
  000d2	cc		 int	 3
  000d3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 234  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 141  : 
; 142  :     __CLR_OR_THIS_CALL _Yarn(const _Yarn& _Right) noexcept : _Myptr(nullptr), _Nul(0) {
; 143  :         *this = _Right;
; 144  :     }
; 145  : 
; 146  :     __CLR_OR_THIS_CALL _Yarn(const _Elem* _Right) noexcept : _Myptr(nullptr), _Nul(0) {
; 147  :         *this = _Right;
; 148  :     }
; 149  : 
; 150  :     _Yarn& __CLR_OR_THIS_CALL operator=(const _Yarn& _Right) noexcept {
; 151  :         return *this = _Right._Myptr;
; 152  :     }
; 153  : 
; 154  :     _Yarn& __CLR_OR_THIS_CALL operator=(const _Elem* _Right) noexcept {
; 155  :         if (_Myptr != _Right) { // new value, discard old and copy new
; 156  :             _Tidy();
; 157  : 
; 158  :             if (_Right) { // new is not empty, copy it
; 159  :                 const _Elem* _Ptr = _Right;
; 160  :                 while (*_Ptr != _Elem{}) {
; 161  :                     ++_Ptr;
; 162  :                 }
; 163  : 
; 164  :                 const auto _Count = (++_Ptr - _Right) * sizeof(_Elem);
; 165  : 
; 166  : #ifdef _DEBUG
; 167  :                 _Myptr = static_cast<_Elem*>(_malloc_dbg(_Count, _CRT_BLOCK, __FILE__, __LINE__));
; 168  : #else
; 169  :                 _Myptr = static_cast<_Elem*>(_CSTD malloc(_Count));
; 170  : #endif
; 171  : 
; 172  :                 if (_Myptr) {
; 173  :                     _CSTD memcpy(_Myptr, _Right, _Count);
; 174  :                 }
; 175  :             }
; 176  :         }
; 177  : 
; 178  :         return *this;
; 179  :     }
; 180  : 
; 181  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {
; 182  :         _Tidy();
; 183  :     }
; 184  : 
; 185  :     _NODISCARD bool __CLR_OR_THIS_CALL empty() const noexcept {
; 186  :         return _Myptr == nullptr;
; 187  :     }
; 188  : 
; 189  :     _Ret_z_ const _Elem* __CLR_OR_THIS_CALL c_str() const noexcept {
; 190  :         return _Myptr ? _Myptr : &_Nul;
; 191  :     }
; 192  : 
; 193  :     _NODISCARD bool __CLR_OR_THIS_CALL _Empty() const noexcept {
; 194  :         return _Myptr == nullptr;
; 195  :     }
; 196  : 
; 197  :     _Ret_z_ const _Elem* __CLR_OR_THIS_CALL _C_str() const noexcept {
; 198  :         return _Myptr ? _Myptr : &_Nul;
; 199  :     }
; 200  : 
; 201  : private:
; 202  :     void __CLR_OR_THIS_CALL _Tidy() noexcept {
; 203  :         if (_Myptr) {
; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);
; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;
; 212  :     }
; 213  : 
; 214  :     _Elem* _Myptr; // pointer to allocated string
; 215  :     _Elem _Nul; // nul terminator for unallocated string
; 216  : };
; 217  : 
; 218  : extern "C++" class _CRTIMP2_PURE_IMPORT _Locinfo { // summary of all stuff specific to a locale used by standard facets
; 219  : public:
; 220  :     using _Collvec  = ::_Collvec;
; 221  :     using _Ctypevec = ::_Ctypevec;
; 222  :     using _Cvtvec   = ::_Cvtvec;
; 223  :     using _Timevec  = _STD _Timevec;
; 224  : 
; 225  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_ctor(_Locinfo*, const char*);
; 226  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_ctor(_Locinfo*, int, const char*);
; 227  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_dtor(_Locinfo*);
; 228  :     static _Locinfo& __CLRCALL_PURE_OR_CDECL _Locinfo_Addcats(_Locinfo*, int, const char*);
; 229  : 
; 230  :     __CLR_OR_THIS_CALL _Locinfo(const char* _Pch = "C")
; 231  : #ifndef _M_CEE_PURE
; 232  :         : _Lock(_LOCK_LOCALE)

  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 140  :     __CLR_OR_THIS_CALL _Yarn() noexcept : _Myptr(nullptr), _Nul(0) {}

  00037	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0003e	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
  00042	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00049	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  0004d	33 c0		 xor	 eax, eax
  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00056	66 89 46 18	 mov	 WORD PTR [esi+24], ax
  0005a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0005d	66 89 46 20	 mov	 WORD PTR [esi+32], ax
  00061	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00064	88 46 28	 mov	 BYTE PTR [esi+40], al
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006a	88 46 30	 mov	 BYTE PTR [esi+48], al

; 235  :         if (_Pch) {

  0006d	8b 45 08	 mov	 eax, DWORD PTR __Pch$[ebp]
  00070	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00074	85 c0		 test	 eax, eax
  00076	74 1e		 je	 SHORT $LN2@Locinfo

; 236  :             _Locinfo_ctor(this, _Pch);

  00078	50		 push	 eax
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  0007f	83 c4 08	 add	 esp, 8

; 241  :     }

  00082	8b c6		 mov	 eax, esi
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5e		 pop	 esi
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
$LN2@Locinfo:

; 237  :             return;
; 238  :         }
; 239  : 
; 240  :         _Xruntime_error("bad locale name");

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name@
  0009b	e8 00 00 00 00	 call	 ?_Xruntime_error@std@@YAXPBD@Z ; std::_Xruntime_error
$LN30@Locinfo:
  000a0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 24	 add	 ecx, 36			; 00000024H
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00045	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  0004a	cc		 int	 3
  0004b	cc		 int	 3
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  0004f	90		 npad	 1
  00050	90		 npad	 1
  00051	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00055	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00058	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0005b	33 c8		 xor	 ecx, eax
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  00067	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
; Function compile flags: /Ogtp
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 25   :     virtual __CLR_OR_THIS_CALL ~_Facet_base() noexcept {} // ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\typeinfo
;	COMDAT ?_Throw_bad_cast@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_cast@std@@YAXXZ PROC			; std::_Throw_bad_cast, COMDAT

; 62   : [[noreturn]] inline void _Throw_bad_cast() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 63   :     _THROW(bad_cast{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@XZ	; std::bad_cast::bad_cast
  0000e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_cast@std@@YAXXZ ENDP			; std::_Throw_bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_cast@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 153  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 154  :     }

  00003	8b c1		 mov	 eax, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_08EPJLHIJG@bad?5cast@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_typeinfo.h

; 153  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_cast@std@@6B@

; 154  :     }

  00017	c3		 ret	 0
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCTextBar@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTextBar@@UAEPAXI@Z PROC				; CTextBar::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CTextBar@@UAE@XZ	; CTextBar::~CTextBar
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 6c		 push	 108			; 0000006cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCTextBar@@UAEPAXI@Z ENDP				; CTextBar::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
;	COMDAT ?OnCreate@CTextBar@@MAEXXZ
_TEXT	SEGMENT
?OnCreate@CTextBar@@MAEXXZ PROC				; CTextBar::OnCreate, COMDAT
; _this$ = ecx

; 78   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 79   : 	m_dib.SetBkMode(TRANSPARENT);

  00003	6a 01		 push	 1
  00005	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00008	e8 00 00 00 00	 call	 ?SetBkMode@CGraphicDib@@QAEXH@Z ; CGraphicDib::SetBkMode

; 80   : 
; 81   : 	__SetFont(m_fontSize, m_isBold);

  0000d	0f b6 46 68	 movzx	 eax, BYTE PTR [esi+104]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	ff 76 64	 push	 DWORD PTR [esi+100]
  00017	e8 00 00 00 00	 call	 ?__SetFont@CTextBar@@IAEXH_N@Z ; CTextBar::__SetFont
  0001c	5e		 pop	 esi

; 82   : }

  0001d	c3		 ret	 0
?OnCreate@CTextBar@@MAEXXZ ENDP				; CTextBar::OnCreate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
;	COMDAT ?__SetFont@CTextBar@@IAEXH_N@Z
_TEXT	SEGMENT
_logFont$ = -64						; size = 60
__$ArrayPad$ = -4					; size = 4
_fontSize$ = 8						; size = 4
_isBold$ = 12						; size = 1
?__SetFont@CTextBar@@IAEXH_N@Z PROC			; CTextBar::__SetFont, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx

; 7    : 	int iCodePage = GetDefaultCodePage();

  00014	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 8    : 
; 9    : 	LOGFONT logFont;
; 10   : 
; 11   : 	memset(&logFont, 0, sizeof(LOGFONT));
; 12   : 
; 13   : 	logFont.lfHeight			= fontSize;
; 14   : 	logFont.lfEscapement		= 0;
; 15   : 	logFont.lfOrientation		= 0;
; 16   : 
; 17   : 	if (isBold)

  00019	80 7d 0c 00	 cmp	 BYTE PTR _isBold$[ebp], 0
  0001d	0f 57 c0	 xorps	 xmm0, xmm0

; 18   : 		logFont.lfWeight			= FW_BOLD;
; 19   : 	else
; 20   : 		logFont.lfWeight			= FW_NORMAL;
; 21   : 
; 22   : 	logFont.lfItalic			= FALSE;
; 23   : 	logFont.lfUnderline			= FALSE;
; 24   : 	logFont.lfStrikeOut			= FALSE;
; 25   : 	logFont.lfCharSet			= GetCharsetFromCodePage(iCodePage);

  00020	0f b7 f0	 movzx	 esi, ax
  00023	b9 bc 02 00 00	 mov	 ecx, 700		; 000002bcH
  00028	8b 45 08	 mov	 eax, DWORD PTR _fontSize$[ebp]
  0002b	89 45 c0	 mov	 DWORD PTR _logFont$[ebp], eax
  0002e	b8 90 01 00 00	 mov	 eax, 400		; 00000190H
  00033	0f 45 c1	 cmovne	 eax, ecx
  00036	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _logFont$[ebp+4], 0
  0003d	56		 push	 esi
  0003e	66 0f 13 45 dc	 movlpd	 QWORD PTR _logFont$[ebp+28], xmm0
  00043	66 0f 13 45 e4	 movlpd	 QWORD PTR _logFont$[ebp+36], xmm0
  00048	66 0f 13 45 ec	 movlpd	 QWORD PTR _logFont$[ebp+44], xmm0
  0004d	66 0f 13 45 f4	 movlpd	 QWORD PTR _logFont$[ebp+52], xmm0
  00052	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _logFont$[ebp+8], 0
  00059	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _logFont$[ebp+12], 0
  00060	89 45 d0	 mov	 DWORD PTR _logFont$[ebp+16], eax
  00063	66 c7 45 d4 00
	00		 mov	 WORD PTR _logFont$[ebp+20], 0
  00069	c6 45 d6 00	 mov	 BYTE PTR _logFont$[ebp+22], 0
  0006d	e8 00 00 00 00	 call	 ?GetCharsetFromCodePage@@YAHG@Z ; GetCharsetFromCodePage

; 26   : 	logFont.lfOutPrecision		= OUT_DEFAULT_PRECIS;
; 27   : 	logFont.lfClipPrecision		= CLIP_DEFAULT_PRECIS;
; 28   : 	logFont.lfQuality			= ANTIALIASED_QUALITY;
; 29   : 	logFont.lfPitchAndFamily	= DEFAULT_PITCH;
; 30   : 	strcpy(logFont.lfFaceName, GetFontFaceFromCodePage(iCodePage));

  00072	56		 push	 esi
  00073	88 45 d7	 mov	 BYTE PTR _logFont$[ebp+23], al
  00076	c7 45 d8 00 00
	04 00		 mov	 DWORD PTR _logFont$[ebp+24], 262144 ; 00040000H
  0007d	e8 00 00 00 00	 call	 ?GetFontFaceFromCodePage@@YAPBDG@Z ; GetFontFaceFromCodePage
  00082	8d 55 dc	 lea	 edx, DWORD PTR _logFont$[ebp+28]
  00085	83 c4 08	 add	 esp, 8
  00088	2b d0		 sub	 edx, eax
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL5@SetFont:
  00090	8a 08		 mov	 cl, BYTE PTR [eax]
  00092	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00095	88 4c 02 ff	 mov	 BYTE PTR [edx+eax-1], cl
  00099	84 c9		 test	 cl, cl
  0009b	75 f3		 jne	 SHORT $LL5@SetFont

; 31   : 	m_hFont = CreateFontIndirect(&logFont);

  0009d	8d 45 c0	 lea	 eax, DWORD PTR _logFont$[ebp]
  000a0	50		 push	 eax
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFontIndirectA@4

; 32   : 
; 33   : 
; 34   : 	HDC hdc = m_dib.GetDCHandle();

  000a7	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  000aa	89 47 5c	 mov	 DWORD PTR [edi+92], eax
  000ad	e8 00 00 00 00	 call	 ?GetDCHandle@CGraphicDib@@QAEPAUHDC__@@XZ ; CGraphicDib::GetDCHandle

; 35   : 	m_hOldFont = (HFONT)SelectObject(hdc, m_hFont);

  000b2	ff 77 5c	 push	 DWORD PTR [edi+92]
  000b5	50		 push	 eax
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 36   : 
; 37   : }

  000bc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bf	89 47 60	 mov	 DWORD PTR [edi+96], eax
  000c2	33 cd		 xor	 ecx, ebp
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 08 00	 ret	 8
?__SetFont@CTextBar@@IAEXH_N@Z ENDP			; CTextBar::__SetFont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
;	COMDAT ?GetTextExtent@CTextBar@@QAEXPBDPAUtagSIZE@@@Z
_TEXT	SEGMENT
_c_szText$ = 8						; size = 4
_p_size$ = 12						; size = 4
?GetTextExtent@CTextBar@@QAEXPBDPAUtagSIZE@@@Z PROC	; CTextBar::GetTextExtent, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 47   : 	HDC hDC = m_dib.GetDCHandle();

  00005	83 c1 04	 add	 ecx, 4
  00008	e8 00 00 00 00	 call	 ?GetDCHandle@CGraphicDib@@QAEPAUHDC__@@XZ ; CGraphicDib::GetDCHandle

; 48   : 	GetTextExtentPoint32(hDC, c_szText, strlen(c_szText), p_size);

  0000d	8b 55 08	 mov	 edx, DWORD PTR _c_szText$[ebp]
  00010	8b f0		 mov	 esi, eax
  00012	8b ca		 mov	 ecx, edx
  00014	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL3@GetTextExt:
  00017	8a 01		 mov	 al, BYTE PTR [ecx]
  00019	41		 inc	 ecx
  0001a	84 c0		 test	 al, al
  0001c	75 f9		 jne	 SHORT $LL3@GetTextExt
  0001e	ff 75 0c	 push	 DWORD PTR _p_size$[ebp]
  00021	2b cf		 sub	 ecx, edi
  00023	51		 push	 ecx
  00024	52		 push	 edx
  00025	56		 push	 esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTextExtentPoint32A@16
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 49   : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
?GetTextExtent@CTextBar@@QAEXPBDPAUtagSIZE@@@Z ENDP	; CTextBar::GetTextExtent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
;	COMDAT ?SetTextColor@CTextBar@@QAEXHHH@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
?SetTextColor@CTextBar@@QAEXHHH@Z PROC			; CTextBar::SetTextColor, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 41   : 	HDC hDC = m_dib.GetDCHandle();

  00003	83 c1 04	 add	 ecx, 4
  00006	e8 00 00 00 00	 call	 ?GetDCHandle@CGraphicDib@@QAEPAUHDC__@@XZ ; CGraphicDib::GetDCHandle

; 42   : 	::SetTextColor(hDC, RGB(r, g, b));

  0000b	0f b6 55 10	 movzx	 edx, BYTE PTR _b$[ebp]
  0000f	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _g$[ebp]
  00013	c1 e2 08	 shl	 edx, 8
  00016	0b d1		 or	 edx, ecx
  00018	0f b6 4d 08	 movzx	 ecx, BYTE PTR _r$[ebp]
  0001c	c1 e2 08	 shl	 edx, 8
  0001f	0b d1		 or	 edx, ecx
  00021	52		 push	 edx
  00022	50		 push	 eax
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 43   : }

  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
?SetTextColor@CTextBar@@QAEXHHH@Z ENDP			; CTextBar::SetTextColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
;	COMDAT ?TextOutA@CTextBar@@QAEXHHPBD@Z
_TEXT	SEGMENT
__Prs$2 = -160						; size = 84
_this$GSCopy$1$ = -76					; size = 4
_size$3 = -72						; size = 8
_this$ = -68						; size = 4
_c_szText$GSCopy$1$ = -64				; size = 4
$T4 = -60						; size = 20
_x$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_ix$ = 8						; size = 4
_iy$ = 12						; size = 4
_c_szText$ = 16						; size = 4
?TextOutA@CTextBar@@QAEXHHPBD@Z PROC			; CTextBar::TextOutA, COMDAT
; _this$ = ecx

; 62   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TextOutA@CTextBar@@QAEXHHPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 4d b4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00031	8b 75 10	 mov	 esi, DWORD PTR _c_szText$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1818 :     explicit basic_regex(_In_z_ const _Elem* _Ptr, flag_type _Flags = regex_constants::ECMAScript) {

  00034	8d 45 c8	 lea	 eax, DWORD PTR $T4[ebp+4]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp

; 62   : 	{

  00037	89 75 c0	 mov	 DWORD PTR _c_szText$GSCopy$1$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 1994 :     _Root_node* _Rep = nullptr;

  0003a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0
  00041	89 45 bc	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 270  :     locale() noexcept : _Ptr(_Init(true)) {}

  00044	6a 01		 push	 1
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  00052	89 45 d4	 mov	 DWORD PTR $T4[ebp+16], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 406  :         _Pcoll  = _STD addressof(_STD use_facet<collate<_Elem>>(_Loc));

  00055	8d 45 d0	 lea	 eax, DWORD PTR $T4[ebp+12]

; 281  :     _Regex_traits() {

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 406  :         _Pcoll  = _STD addressof(_STD use_facet<collate<_Elem>>(_Loc));

  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??$use_facet@V?$collate@D@std@@@std@@YAABV?$collate@D@0@ABVlocale@0@@Z ; std::use_facet<std::collate<char> >
  00065	89 45 c8	 mov	 DWORD PTR $T4[ebp+4], eax

; 407  :         _Pctype = _STD addressof(_STD use_facet<ctype<_Elem>>(_Loc));

  00068	8d 45 d0	 lea	 eax, DWORD PTR $T4[ebp+12]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
  00074	89 45 cc	 mov	 DWORD PTR $T4[ebp+8], eax

; 2017 :             _Parser<_InIt, _Elem, _RxTraits> _Prs(_Traits, _First, _Last, _Flags);

  00077	6a 01		 push	 1
  00079	68 1b 00 00 00	 push	 OFFSET ??_C@_0BM@CIBGAEGH@?2?$HMc?$FLa?9zA?9Z0?99?$FN?$CL?$HM?2?$HM?$FLr?$HMR?$HMH?$HMh?$FN@+27
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@CIBGAEGH@?2?$HMc?$FLa?9zA?9Z0?99?$FN?$CL?$HM?2?$HM?$FLr?$HMR?$HMH?$HMh?$FN@
  00083	8d 45 c8	 lea	 eax, DWORD PTR $T4[ebp+4]

; 1818 :     explicit basic_regex(_In_z_ const _Elem* _Ptr, flag_type _Flags = regex_constants::ECMAScript) {

  00086	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 2017 :             _Parser<_InIt, _Elem, _RxTraits> _Prs(_Traits, _First, _Last, _Flags);

  0008d	50		 push	 eax
  0008e	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR __Prs$2[ebp]
  00094	e8 00 00 00 00	 call	 ??0?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@ABV?$regex_traits@D@1@PBD1W4syntax_option_type@regex_constants@1@@Z ; std::_Parser<char const *,char,std::regex_traits<char> >::_Parser<char const *,char,std::regex_traits<char> >

; 2018 :             _Root_node* _Rx = _Prs._Compile();

  00099	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR __Prs$2[ebp]
  0009f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000a3	e8 00 00 00 00	 call	 ?_Compile@?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAEPAV_Root_node@2@XZ ; std::_Parser<char const *,char,std::regex_traits<char> >::_Compile
  000a8	8b d8		 mov	 ebx, eax

; 2030 :         if (_Rx) {

  000aa	85 db		 test	 ebx, ebx
  000ac	74 04		 je	 SHORT $LN37@TextOutA

; 2031 :             _MT_INCR(reinterpret_cast<_Atomic_counter_t&>(_Rx->_Refs));

  000ae	f0 ff 43 20	 lock	  inc	 DWORD PTR [ebx+32]
$LN37@TextOutA:

; 2002 :         if (_Rep && _MT_DECR(reinterpret_cast<_Atomic_counter_t&>(_Rep->_Refs)) == 0) {

  000b2	8b 4d c4	 mov	 ecx, DWORD PTR $T4[ebp]
  000b5	83 cf ff	 or	 edi, -1
  000b8	85 c9		 test	 ecx, ecx
  000ba	74 2a		 je	 SHORT $LN45@TextOutA
  000bc	8b c7		 mov	 eax, edi
  000be	f0 0f c1 41 20	 lock	  xadd	 DWORD PTR [ecx+32], eax
  000c3	75 21		 jne	 SHORT $LN45@TextOutA

; 2003 :             _Destroy_node(_Rep);

  000c5	8b 75 c4	 mov	 esi, DWORD PTR $T4[ebp]
  000c8	85 f6		 test	 esi, esi

; 1338 :     while (_Nx != _Ne && _Nx) { // destroy node

  000ca	74 17		 je	 SHORT $LN187@TextOutA
$LN191@TextOutA:

; 1339 :         _Node_base* _Tmp = _Nx;

  000cc	8b ce		 mov	 ecx, esi

; 1340 :         _Nx              = _Nx->_Next;

  000ce	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  000d1	8b 30		 mov	 esi, DWORD PTR [eax]

; 1341 :         _Tmp->_Next      = nullptr;

  000d3	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1342 :         delete _Tmp;

  000d9	6a 01		 push	 1
  000db	8b 01		 mov	 eax, DWORD PTR [ecx]
  000dd	ff 10		 call	 DWORD PTR [eax]
  000df	85 f6		 test	 esi, esi
  000e1	75 e9		 jne	 SHORT $LN191@TextOutA
$LN187@TextOutA:

; 2035 :         _Rep = _Rx;

  000e3	8b 75 c0	 mov	 esi, DWORD PTR _c_szText$GSCopy$1$[ebp]
$LN45@TextOutA:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  000e6	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR __Prs$2[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2035 :         _Rep = _Rx;

  000ec	89 5d c4	 mov	 DWORD PTR $T4[ebp], ebx

; 2020 :         } else {

  000ef	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  000f3	85 c9		 test	 ecx, ecx
  000f5	74 3a		 je	 SHORT $LN69@TextOutA

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000f7	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR __Prs$2[ebp+28]
  000fd	2b c1		 sub	 eax, ecx
  000ff	c1 f8 02	 sar	 eax, 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00102	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]
  00109	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0010b	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00111	72 14		 jb	 SHORT $LN88@TextOutA

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00113	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00116	83 c2 23	 add	 edx, 35			; 00000023H
  00119	2b c1		 sub	 eax, ecx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0011e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00121	0f 87 1b 01 00
	00		 ja	 $LN195@TextOutA
$LN88@TextOutA:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00127	52		 push	 edx
  00128	51		 push	 ecx
  00129	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0012e	83 c4 08	 add	 esp, 8
$LN69@TextOutA:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp

; 63   : 		const auto x = std::regex_replace(c_szText, std::regex("\\|c[a-zA-Z0-9]+|\\|[r|R|H|h]"), "");

  00131	6a 00		 push	 0
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00138	8d 45 c4	 lea	 eax, DWORD PTR $T4[ebp]
  0013b	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00142	50		 push	 eax
  00143	8d 45 d8	 lea	 eax, DWORD PTR _x$[ebp]
  00146	56		 push	 esi
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 ??$regex_replace@V?$regex_traits@D@std@@D@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV?$basic_regex@DV?$regex_traits@D@std@@@0@0W4match_flag_type@regex_constants@0@@Z ; std::regex_replace<std::regex_traits<char>,char>
  0014d	83 c4 14	 add	 esp, 20			; 00000014H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2002 :         if (_Rep && _MT_DECR(reinterpret_cast<_Atomic_counter_t&>(_Rep->_Refs)) == 0) {

  00150	8b 45 c4	 mov	 eax, DWORD PTR $T4[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp

; 63   : 		const auto x = std::regex_replace(c_szText, std::regex("\\|c[a-zA-Z0-9]+|\\|[r|R|H|h]"), "");

  00153	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2002 :         if (_Rep && _MT_DECR(reinterpret_cast<_Atomic_counter_t&>(_Rep->_Refs)) == 0) {

  00157	85 c0		 test	 eax, eax
  00159	74 26		 je	 SHORT $LN110@TextOutA
  0015b	f0 0f c1 78 20	 lock	  xadd	 DWORD PTR [eax+32], edi
  00160	4f		 dec	 edi
  00161	75 1e		 jne	 SHORT $LN110@TextOutA

; 2003 :             _Destroy_node(_Rep);

  00163	8b 75 c4	 mov	 esi, DWORD PTR $T4[ebp]
  00166	85 f6		 test	 esi, esi

; 1338 :     while (_Nx != _Ne && _Nx) { // destroy node

  00168	74 17		 je	 SHORT $LN110@TextOutA
$LN193@TextOutA:

; 1339 :         _Node_base* _Tmp = _Nx;

  0016a	8b ce		 mov	 ecx, esi

; 1340 :         _Nx              = _Nx->_Next;

  0016c	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0016f	8b 30		 mov	 esi, DWORD PTR [eax]

; 1341 :         _Tmp->_Next      = nullptr;

  00171	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1342 :         delete _Tmp;

  00177	6a 01		 push	 1
  00179	8b 01		 mov	 eax, DWORD PTR [ecx]
  0017b	ff 10		 call	 DWORD PTR [eax]
  0017d	85 f6		 test	 esi, esi
  0017f	75 e9		 jne	 SHORT $LN193@TextOutA
$LN110@TextOutA:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 352  :         if (_Ptr) {

  00181	8b 4d d4	 mov	 ecx, DWORD PTR $T4[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\regex

; 2006 :         _Rep = nullptr;

  00184	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 352  :         if (_Ptr) {

  0018b	85 c9		 test	 ecx, ecx
  0018d	74 11		 je	 SHORT $LN128@TextOutA

; 353  :             delete _Ptr->_Decref();

  0018f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00191	ff 50 08	 call	 DWORD PTR [eax+8]
  00194	85 c0		 test	 eax, eax
  00196	74 08		 je	 SHORT $LN128@TextOutA
  00198	8b 10		 mov	 edx, DWORD PTR [eax]
  0019a	8b c8		 mov	 ecx, eax
  0019c	6a 01		 push	 1
  0019e	ff 12		 call	 DWORD PTR [edx]
$LN128@TextOutA:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001a0	83 7d ec 0f	 cmp	 DWORD PTR _x$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  001a4	8d 75 d8	 lea	 esi, DWORD PTR _x$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp

; 66   : 		if (m_isBold) {

  001a7	8b 5d b4	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  001aa	0f 47 75 d8	 cmova	 esi, DWORD PTR _x$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp

; 66   : 		if (m_isBold) {

  001ae	80 7b 68 00	 cmp	 BYTE PTR [ebx+104], 0
  001b2	74 29		 je	 SHORT $LN184@TextOutA

; 67   : 			SIZE size { 0,0 };
; 68   : 			GetTextExtent(c_szText, &size);

  001b4	8d 45 b8	 lea	 eax, DWORD PTR _size$3[ebp]
  001b7	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _size$3[ebp], 0
  001be	50		 push	 eax
  001bf	56		 push	 esi
  001c0	8b cb		 mov	 ecx, ebx
  001c2	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _size$3[ebp+4], 0
  001c9	e8 00 00 00 00	 call	 ?GetTextExtent@CTextBar@@QAEXPBDPAUtagSIZE@@@Z ; CTextBar::GetTextExtent

; 69   : 			ix = (500 - size.cx) / 2;

  001ce	b8 f4 01 00 00	 mov	 eax, 500		; 000001f4H
  001d3	2b 45 b8	 sub	 eax, DWORD PTR _size$3[ebp]
  001d6	99		 cdq
  001d7	2b c2		 sub	 eax, edx
  001d9	d1 f8		 sar	 eax, 1
  001db	eb 03		 jmp	 SHORT $LN2@TextOutA
$LN184@TextOutA:

; 66   : 		if (m_isBold) {

  001dd	8b 45 08	 mov	 eax, DWORD PTR _ix$[ebp]
$LN2@TextOutA:

; 70   : 		}
; 71   : 		m_dib.TextOut(ix, iy, c_szText);

  001e0	56		 push	 esi
  001e1	ff 75 0c	 push	 DWORD PTR _iy$[ebp]
  001e4	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 ?TextOutA@CGraphicDib@@QAEXHHPBD@Z ; CGraphicDib::TextOutA

; 72   : 		Invalidate();

  001ed	8b cb		 mov	 ecx, ebx
  001ef	e8 00 00 00 00	 call	 ?Invalidate@CDibBar@@QAEXXZ ; CDibBar::Invalidate
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001f4	8b 4d ec	 mov	 ecx, DWORD PTR _x$[ebp+20]
  001f7	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001fa	76 28		 jbe	 SHORT $LN161@TextOutA
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001fc	8b 55 d8	 mov	 edx, DWORD PTR _x$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001ff	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00200	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00202	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00208	72 10		 jb	 SHORT $LN172@TextOutA

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0020a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0020d	83 c1 23	 add	 ecx, 35			; 00000023H
  00210	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00212	83 c0 fc	 add	 eax, -4			; fffffffcH
  00215	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00218	77 2d		 ja	 SHORT $LN196@TextOutA
$LN172@TextOutA:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0021a	51		 push	 ecx
  0021b	52		 push	 edx
  0021c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00221	83 c4 08	 add	 esp, 8
$LN161@TextOutA:
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp

; 73   : 	}

  00224	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00227	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022e	59		 pop	 ecx
  0022f	5f		 pop	 edi
  00230	5e		 pop	 esi
  00231	5b		 pop	 ebx
  00232	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00235	33 cd		 xor	 ecx, ebp
  00237	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023c	8b e5		 mov	 esp, ebp
  0023e	5d		 pop	 ebp
  0023f	c2 0c 00	 ret	 12			; 0000000cH
$LN195@TextOutA:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00242	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN196@TextOutA:
  00247	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN189@TextOutA:
  0024c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TextOutA@CTextBar@@QAEXHHPBD@Z$4:
  00000	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?TextOutA@CTextBar@@QAEXHHPBD@Z$2:
  0000b	8d 4d c8	 lea	 ecx, DWORD PTR $T4[ebp+4]
  0000e	e9 00 00 00 00	 jmp	 ??1?$regex_traits@D@std@@QAE@XZ
__unwindfunclet$?TextOutA@CTextBar@@QAEXHHPBD@Z$6:
  00013	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR __Prs$2[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_Parser@PBDDV?$regex_traits@D@std@@@std@@QAE@XZ
__unwindfunclet$?TextOutA@CTextBar@@QAEXHHPBD@Z$0:
  0001e	8d 4d c4	 lea	 ecx, DWORD PTR $T4[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$basic_regex@DV?$regex_traits@D@std@@@std@@QAE@XZ ; std::basic_regex<char,std::regex_traits<char> >::~basic_regex<char,std::regex_traits<char> >
__unwindfunclet$?TextOutA@CTextBar@@QAEXHHPBD@Z$1:
  00026	8d 4d d8	 lea	 ecx, DWORD PTR _x$[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
  00031	cc		 int	 3
  00032	cc		 int	 3
__ehhandler$?TextOutA@CTextBar@@QAEXHHPBD@Z:
  00033	90		 npad	 1
  00034	90		 npad	 1
  00035	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00039	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003c	8b 8a 5c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-164]
  00042	33 c8		 xor	 ecx, eax
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004c	33 c8		 xor	 ecx, eax
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TextOutA@CTextBar@@QAEXHHPBD@Z
  00058	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TextOutA@CTextBar@@QAEXHHPBD@Z ENDP			; CTextBar::TextOutA
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
;	COMDAT ??1CTextBar@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CTextBar@@UAE@XZ PROC				; CTextBar::~CTextBar, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CTextBar@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 94   : 	HDC hdc = m_dib.GetDCHandle();

  00025	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTextBar@@6B@
  0002e	e8 00 00 00 00	 call	 ?GetDCHandle@CGraphicDib@@QAEPAUHDC__@@XZ ; CGraphicDib::GetDCHandle

; 95   : 	SelectObject(hdc, m_hOldFont);

  00033	ff 76 60	 push	 DWORD PTR [esi+96]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 96   : }

  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ??1CDibBar@@UAE@XZ	; CDibBar::~CDibBar
  00044	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	5e		 pop	 esi
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CTextBar@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CTextBar@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CTextBar@@UAE@XZ ENDP				; CTextBar::~CTextBar
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\TextBar.cpp
;	COMDAT ??0CTextBar@@QAE@H_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fontSize$ = 8						; size = 4
_isBold$ = 12						; size = 1
??0CTextBar@@QAE@H_N@Z PROC				; CTextBar::CTextBar, COMDAT
; _this$ = ecx

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CDibBar@@QAE@XZ	; CDibBar::CDibBar

; 86   : 	m_hOldFont = NULL;
; 87   : 	m_fontSize = fontSize;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _fontSize$[ebp]
  00012	89 46 64	 mov	 DWORD PTR [esi+100], eax

; 88   : 	m_isBold = isBold;

  00015	8a 45 0c	 mov	 al, BYTE PTR _isBold$[ebp]
  00018	88 46 68	 mov	 BYTE PTR [esi+104], al

; 89   : 
; 90   : }

  0001b	8b c6		 mov	 eax, esi
  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTextBar@@6B@
  00023	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0002a	5e		 pop	 esi
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
??0CTextBar@@QAE@H_N@Z ENDP				; CTextBar::CTextBar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
$T1 = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 847  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 848  :         auto& _My_data = _Mypair._Myval2;
; 849  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 850  : 
; 851  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 852  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 853  :         } else {
; 854  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 855  :         }
; 856  : 
; 857  :         if (_Count > max_size()) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00010	0f 87 95 00 00
	00		 ja	 $LN40@Construct

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00016	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00019	77 21		 ja	 SHORT $LN3@Construct
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0001b	56		 push	 esi
  0001c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0001f	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00023	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
  00036	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	57		 push	 edi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003d	8b fe		 mov	 edi, esi
  0003f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00042	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 12		 jbe	 SHORT $LN9@Construct

; 2944 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	eb 26		 jmp	 SHORT $LN38@Construct
$LN9@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005c	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00061	3b f8		 cmp	 edi, eax
  00063	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00066	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00069	85 c0		 test	 eax, eax
  0006b	74 18		 je	 SHORT $LN37@Construct
$LN23@Construct:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0006d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00072	72 08		 jb	 SHORT $LN24@Construct

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007a	eb 06		 jmp	 SHORT $LN38@Construct
$LN24@Construct:

; 136  :         return ::operator new(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN38@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00082	83 c4 04	 add	 esp, 4
$LN37@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	56		 push	 esi
  00086	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00089	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0008d	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0008f	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  00092	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00095	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0009a	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a0	5f		 pop	 edi
  000a1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
  000a5	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  000a6	5b		 pop	 ebx
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@Construct:

; 858  :             _Xlen_string(); // result too long

  000ab	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN36@Construct:
  000b0	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3044 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3045 :         auto& _My_data = _Mypair._Myval2;
; 3046 :         _My_data._Orphan_all();
; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN16@Tidy_deall
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN27@Tidy_deall

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN24@Tidy_deall

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN27@Tidy_deall:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN16@Tidy_deall:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3058 :     }

  00044	c3		 ret	 0
$LN24@Tidy_deall:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN35@Tidy_deall:
  0004a	cc		 int	 3
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
_TEXT	SEGMENT
tv515 = -12						; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
__Ch$ = 8						; size = 1
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT
; _this$ = ecx

; 2265 :     _CONSTEXPR20 void push_back(const _Elem _Ch) { // insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 2266 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 2267 :         if (_Old_size < _Mypair._Myval2._Myres) {

  0000a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000d	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00010	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00013	3b d9		 cmp	 ebx, ecx
  00015	73 20		 jae	 SHORT $LN2@push_back

; 2268 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + 1);
; 2269 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00017	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0001a	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 434  :         return _Myres > _Small_string_capacity;

  0001d	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00020	76 02		 jbe	 SHORT $LN5@push_back

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00022	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@push_back:

; 2270 :             _Elem* const _Ptr       = _Mypair._Myval2._Myptr();
; 2271 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  00024	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  00027	88 04 1e	 mov	 BYTE PTR [esi+ebx], al

; 2272 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  0002a	c6 44 1e 01 00	 mov	 BYTE PTR [esi+ebx+1], 0
  0002f	5e		 pop	 esi

; 2285 :     }

  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN2@push_back:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00037	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  0003c	8b c2		 mov	 eax, edx
  0003e	2b c3		 sub	 eax, ebx
  00040	83 f8 01	 cmp	 eax, 1
  00043	0f 82 e6 00 00
	00		 jb	 $LN90@push_back
  00049	57		 push	 edi

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0004a	8d 7b 01	 lea	 edi, DWORD PTR [ebx+1]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0004d	83 cf 0f	 or	 edi, 15			; 0000000fH
  00050	3b fa		 cmp	 edi, edx

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00052	76 0f		 jbe	 SHORT $LN20@push_back

; 2944 :             return _Max;

  00054	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00059	8b fa		 mov	 edi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	eb 3f		 jmp	 SHORT $LN87@push_back
$LN20@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00063	8b c1		 mov	 eax, ecx
  00065	d1 e8		 shr	 eax, 1
  00067	2b d0		 sub	 edx, eax
  00069	3b ca		 cmp	 ecx, edx
  0006b	76 12		 jbe	 SHORT $LN21@push_back

; 2948 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	eb 23		 jmp	 SHORT $LN87@push_back
$LN21@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0007f	03 c1		 add	 eax, ecx
  00081	3b f8		 cmp	 edi, eax
  00083	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00086	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00089	85 c0		 test	 eax, eax
  0008b	74 1b		 je	 SHORT $LN86@push_back
$LN34@push_back:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0008d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00092	72 08		 jb	 SHORT $LN35@push_back

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009a	eb 06		 jmp	 SHORT $LN87@push_back
$LN35@push_back:

; 136  :         return ::operator new(_Bytes);

  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN87@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000a2	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  000a5	83 c4 04	 add	 esp, 4
$LN86@push_back:

; 3006 :         _My_data._Myres       = _New_capacity;

  000a8	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000ab	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
  000ae	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax

; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b1	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  000b4	89 56 10	 mov	 DWORD PTR [esi+16], edx
  000b7	89 7d f4	 mov	 DWORD PTR tv515[ebp], edi

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000ba	53		 push	 ebx
  000bb	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  000be	76 4e		 jbe	 SHORT $LN13@push_back

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000c0	8b 3e		 mov	 edi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  000c9	8b 4d f4	 mov	 ecx, DWORD PTR tv515[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  000cf	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  000d2	88 01		 mov	 BYTE PTR [ecx], al

; 2282 :                     _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  000d4	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d8	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  000db	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000dc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e2	72 12		 jb	 SHORT $LN63@push_back

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000e4	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000e7	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000ea	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ec	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000ef	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f2	77 40		 ja	 SHORT $LN60@push_back

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000f4	8b fa		 mov	 edi, edx
$LN63@push_back:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f6	51		 push	 ecx
  000f7	57		 push	 edi
  000f8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3015 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000fd	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00100	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3015 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00103	89 06		 mov	 DWORD PTR [esi], eax
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi

; 2285 :     }

  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 04 00	 ret	 4
$LN13@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0010e	56		 push	 esi
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  00115	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00118	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  0011b	88 07		 mov	 BYTE PTR [edi], al

; 3015 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0011d	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]

; 2282 :                     _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00120	c6 47 01 00	 mov	 BYTE PTR [edi+1], 0
  00124	5f		 pop	 edi

; 3015 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00125	89 06		 mov	 DWORD PTR [esi], eax
  00127	5e		 pop	 esi

; 2285 :     }

  00128	5b		 pop	 ebx
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 04 00	 ret	 4
$LN90@push_back:

; 2994 :             _Xlen_string(); // result too long

  0012f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN60@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00134	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@push_back:
  00139	cc		 int	 3
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
tv512 = -12						; size = 4
$T1 = -8						; size = 4
__Old_size$1$ = -4					; size = 4
tv528 = -4						; size = 4
__Count$ = 8						; size = 4
$T2 = 8							; size = 4
tv517 = 8						; size = 4
__Ch$ = 12						; size = 1
tv519 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1513 :     _CONSTEXPR20 basic_string& append(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 1514 :         // append _Count * _Ch
; 1515 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1516 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 30		 ja	 SHORT $LN2@append

; 1517 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1518 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 1519 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 1520 :             _Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  00031	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00034	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00038	53		 push	 ebx
  00039	50		 push	 eax
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _memset
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1521 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00043	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1534 :     }

  00047	8b c7		 mov	 eax, edi
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN2@append:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00052	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00057	2b c1		 sub	 eax, ecx
  00059	3b c3		 cmp	 eax, ebx
  0005b	0f 82 17 01 00
	00		 jb	 $LN98@append

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  00061	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00064	83 ce 0f	 or	 esi, 15			; 0000000fH
  00067	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006d	76 12		 jbe	 SHORT $LN23@append

; 2944 :             return _Max;

  0006f	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00074	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007f	eb 4b		 jmp	 SHORT $LN96@append
$LN23@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00081	8b c2		 mov	 eax, edx
  00083	d1 e8		 shr	 eax, 1
  00085	89 45 08	 mov	 DWORD PTR tv517[ebp], eax
  00088	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0008d	2b 45 08	 sub	 eax, DWORD PTR tv517[ebp]
  00090	3b d0		 cmp	 edx, eax
  00092	76 12		 jbe	 SHORT $LN24@append

; 2948 :             return _Max;

  00094	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00099	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a4	eb 26		 jmp	 SHORT $LN96@append
$LN24@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a6	8b 45 08	 mov	 eax, DWORD PTR tv517[ebp]
  000a9	03 c2		 add	 eax, edx
  000ab	3b f0		 cmp	 esi, eax
  000ad	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b0	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000b3	85 c0		 test	 eax, eax
  000b5	74 1b		 je	 SHORT $LN95@append
$LN37@append:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000b7	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bc	72 08		 jb	 SHORT $LN38@append

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c4	eb 06		 jmp	 SHORT $LN96@append
$LN38@append:

; 136  :         return ::operator new(_Bytes);

  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cf	83 c4 04	 add	 esp, 4
$LN95@append:

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000d2	83 7d f8 0f	 cmp	 DWORD PTR $T1[ebp], 15	; 0000000fH
  000d6	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000d9	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000dc	0f be 75 0c	 movsx	 esi, BYTE PTR __Ch$[ebp]
  000e0	89 75 0c	 mov	 DWORD PTR tv519[ebp], esi
  000e3	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000e6	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000e9	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000ec	89 45 08	 mov	 DWORD PTR $T2[ebp], eax
  000ef	89 75 fc	 mov	 DWORD PTR tv528[ebp], esi
  000f2	89 55 f4	 mov	 DWORD PTR tv512[ebp], edx
  000f5	51		 push	 ecx
  000f6	76 56		 jbe	 SHORT $LN16@append

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000f8	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fa	56		 push	 esi
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _memcpy

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00101	53		 push	 ebx
  00102	ff 75 0c	 push	 DWORD PTR tv519[ebp]
  00105	ff 75 fc	 push	 DWORD PTR tv528[ebp]
  00108	e8 00 00 00 00	 call	 _memset
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1531 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0010d	8b 45 f4	 mov	 eax, DWORD PTR tv512[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00110	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00113	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00116	41		 inc	 ecx

; 1531 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00117	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00120	72 12		 jb	 SHORT $LN69@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00122	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00125	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00128	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012a	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0012d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00130	77 4b		 ja	 SHORT $LN66@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00132	8b f2		 mov	 esi, edx
$LN69@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00134	51		 push	 ecx
  00135	56		 push	 esi
  00136	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1525 :         return _Reallocate_grow_by(

  0013b	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0013e	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1525 :         return _Reallocate_grow_by(

  00141	89 07		 mov	 DWORD PTR [edi], eax

; 1534 :     }

  00143	8b c7		 mov	 eax, edi
  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 08 00	 ret	 8
$LN16@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0014e	57		 push	 edi
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 _memcpy

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00155	53		 push	 ebx
  00156	ff 75 0c	 push	 DWORD PTR tv519[ebp]
  00159	56		 push	 esi
  0015a	e8 00 00 00 00	 call	 _memset
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1531 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0015f	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00162	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1531 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00165	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1525 :         return _Reallocate_grow_by(

  00168	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
  0016b	89 07		 mov	 DWORD PTR [edi], eax

; 1534 :     }

  0016d	8b c7		 mov	 eax, edi
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c2 08 00	 ret	 8
$LN98@append:

; 2994 :             _Xlen_string(); // result too long

  00178	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0017d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@append:
  00182	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
