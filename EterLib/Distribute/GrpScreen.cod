; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\GrpScreen.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_diffuseColor@CScreen@@1KA			; CScreen::ms_diffuseColor
PUBLIC	?ms_clearColor@CScreen@@1KA			; CScreen::ms_clearColor
PUBLIC	?ms_clearStencil@CScreen@@1KA			; CScreen::ms_clearStencil
PUBLIC	?ms_clearDepth@CScreen@@1MA			; CScreen::ms_clearDepth
_BSS	SEGMENT
?ms_clearColor@CScreen@@1KA DD 01H DUP (?)		; CScreen::ms_clearColor
?ms_clearStencil@CScreen@@1KA DD 01H DUP (?)		; CScreen::ms_clearStencil
_BSS	ENDS
_DATA	SEGMENT
?ms_diffuseColor@CScreen@@1KA DD 0ffffffffH		; CScreen::ms_diffuseColor
?ms_clearDepth@CScreen@@1MA DD 03f800000r	; 1	; CScreen::ms_clearDepth
_DATA	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0D3DXPLANE@@QAE@XZ				; D3DXPLANE::D3DXPLANE
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0SPDTVertex@@QAE@XZ				; SPDTVertex::SPDTVertex
PUBLIC	??0CScreen@@QAE@XZ				; CScreen::CScreen
PUBLIC	??1CScreen@@UAE@XZ				; CScreen::~CScreen
PUBLIC	?ClearDepthBuffer@CScreen@@QAEXXZ		; CScreen::ClearDepthBuffer
PUBLIC	?Clear@CScreen@@QAEXXZ				; CScreen::Clear
PUBLIC	?Begin@CScreen@@QAE_NXZ				; CScreen::Begin
PUBLIC	?End@CScreen@@QAEXXZ				; CScreen::End
PUBLIC	?Show@CScreen@@QAEXPAUHWND__@@@Z		; CScreen::Show
PUBLIC	?Show@CScreen@@QAEXPAUtagRECT@@@Z		; CScreen::Show
PUBLIC	?Show@CScreen@@QAEXPAUtagRECT@@PAUHWND__@@@Z	; CScreen::Show
PUBLIC	?RenderLine2d@CScreen@@QAEXMMMMM@Z		; CScreen::RenderLine2d
PUBLIC	?RenderBox2d@CScreen@@QAEXMMMMM@Z		; CScreen::RenderBox2d
PUBLIC	?RenderBar2d@CScreen@@QAEXMMMMM@Z		; CScreen::RenderBar2d
PUBLIC	?RenderGradationBar2d@CScreen@@QAEXMMMMKKM@Z	; CScreen::RenderGradationBar2d
PUBLIC	?RenderCircle2d@CScreen@@QAEXMMMMH@Z		; CScreen::RenderCircle2d
PUBLIC	?RenderCircle3d@CScreen@@QAEXMMMMH@Z		; CScreen::RenderCircle3d
PUBLIC	?RenderLine3d@CScreen@@QAEXMMMMMM@Z		; CScreen::RenderLine3d
PUBLIC	?RenderBox3d@CScreen@@QAEXMMMMMM@Z		; CScreen::RenderBox3d
PUBLIC	?RenderBar3d@CScreen@@QAEXMMMMMM@Z		; CScreen::RenderBar3d
PUBLIC	?RenderBar3d@CScreen@@QAEXPBUD3DXVECTOR3@@@Z	; CScreen::RenderBar3d
PUBLIC	?RenderGradationBar3d@CScreen@@QAEXMMMMMMKK@Z	; CScreen::RenderGradationBar3d
PUBLIC	?RenderLineCube@CScreen@@QAEXMMMMMM@Z		; CScreen::RenderLineCube
PUBLIC	?RenderCube@CScreen@@QAEXMMMMMM@Z		; CScreen::RenderCube
PUBLIC	?RenderCube@CScreen@@QAEXMMMMMMUD3DXMATRIX@@@Z	; CScreen::RenderCube
PUBLIC	?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z	; CScreen::RenderTextureBox
PUBLIC	?RenderBillboard@CScreen@@QAEXPAUD3DXVECTOR3@@AAUD3DXCOLOR@@@Z ; CScreen::RenderBillboard
PUBLIC	?DrawMinorGrid@CScreen@@QAEXMMMMMMM@Z		; CScreen::DrawMinorGrid
PUBLIC	?DrawGrid@CScreen@@QAEXMMMMMMMMM@Z		; CScreen::DrawGrid
PUBLIC	?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderD3DXMesh
PUBLIC	?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderSphere
PUBLIC	?RenderCylinder@CScreen@@QAEXPBUD3DXMATRIX@@MMMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderCylinder
PUBLIC	?RenderTriangle3d@CScreen@@QAEXMMMMMMMMM@Z	; CScreen::RenderTriangle3d
PUBLIC	?RenderMiniMapFilter@CScreen@@QAEXMMMMHMMABUD3DXVECTOR3@@@Z ; CScreen::RenderMiniMapFilter
PUBLIC	?SetColorOperation@CScreen@@QAEXXZ		; CScreen::SetColorOperation
PUBLIC	?SetDiffuseOperation@CScreen@@QAEXXZ		; CScreen::SetDiffuseOperation
PUBLIC	?SetBlendOperation@CScreen@@QAEXXZ		; CScreen::SetBlendOperation
PUBLIC	?SetOneColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z ; CScreen::SetOneColorOperation
PUBLIC	?SetAddColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z ; CScreen::SetAddColorOperation
PUBLIC	?SetDiffuseColor@CScreen@@QAEXK@Z		; CScreen::SetDiffuseColor
PUBLIC	?SetDiffuseColor@CScreen@@QAEXMMMM@Z		; CScreen::SetDiffuseColor
PUBLIC	?SetClearColor@CScreen@@QAEXMMMM@Z		; CScreen::SetClearColor
PUBLIC	?SetClearDepth@CScreen@@QAEXM@Z			; CScreen::SetClearDepth
PUBLIC	?SetClearStencil@CScreen@@QAEXK@Z		; CScreen::SetClearStencil
PUBLIC	?SetCursorPosition@CScreen@@QAEXHHHH@Z		; CScreen::SetCursorPosition
PUBLIC	?GetCursorPosition@CScreen@@QAE_NPAM00@Z	; CScreen::GetCursorPosition
PUBLIC	?GetCursorXYPosition@CScreen@@QAE_NPAM0@Z	; CScreen::GetCursorXYPosition
PUBLIC	?GetCursorZPosition@CScreen@@QAE_NPAM@Z		; CScreen::GetCursorZPosition
PUBLIC	?GetPickingPosition@CScreen@@QAEXMPAM00@Z	; CScreen::GetPickingPosition
PUBLIC	?ProjectPosition@CScreen@@QAEXMMMPAM0@Z		; CScreen::ProjectPosition
PUBLIC	?ProjectPosition@CScreen@@QAEXMMMPAM00@Z	; CScreen::ProjectPosition
PUBLIC	?UnprojectPosition@CScreen@@QAEXMMMPAM00@Z	; CScreen::UnprojectPosition
PUBLIC	?IsLostDevice@CScreen@@QAEHXZ			; CScreen::IsLostDevice
PUBLIC	?RestoreDevice@CScreen@@QAEHXZ			; CScreen::RestoreDevice
PUBLIC	?BuildViewFrustum@CScreen@@QAEXXZ		; CScreen::BuildViewFrustum
PUBLIC	?Identity@CScreen@@SAXXZ			; CScreen::Identity
PUBLIC	??_GCScreen@@UAEPAXI@Z				; CScreen::`scalar deleting destructor'
PUBLIC	??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
PUBLIC	?resize@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::resize
PUBLIC	?_Change_array@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXQAUD3DXVECTOR3@@II@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Change_array
PUBLIC	?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
PUBLIC	??1CD3DXMeshRenderingOption@@UAE@XZ		; CD3DXMeshRenderingOption::~CD3DXMeshRenderingOption
PUBLIC	??_GCD3DXMeshRenderingOption@@UAEPAXI@Z		; CD3DXMeshRenderingOption::`scalar deleting destructor'
PUBLIC	??$_Emplace_reallocate@UD3DXVECTOR3@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEPAUD3DXVECTOR3@@QAU2@$$QAU2@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Emplace_reallocate<D3DXVECTOR3>
PUBLIC	??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
PUBLIC	??$_Copy_memmove_tail@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<D3DXVECTOR3 *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_frustum@CScreen@@1VFrustum@@A		; CScreen::ms_frustum
PUBLIC	??_7CScreen@@6B@				; CScreen::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_7CD3DXMeshRenderingOption@@6B@		; CD3DXMeshRenderingOption::`vftable'
PUBLIC	??_C@_0BD@HBCJANMB@BeginScene?5FAILED?6@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CScreen@@6B@				; CScreen::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R4CD3DXMeshRenderingOption@@6B@		; CD3DXMeshRenderingOption::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCD3DXMeshRenderingOption@@@8		; CD3DXMeshRenderingOption `RTTI Type Descriptor'
PUBLIC	??_R3CD3DXMeshRenderingOption@@8		; CD3DXMeshRenderingOption::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CD3DXMeshRenderingOption@@8		; CD3DXMeshRenderingOption::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CD3DXMeshRenderingOption@@8	; CD3DXMeshRenderingOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40490fdb
PUBLIC	__real@40c90fdb
PUBLIC	__real@43340000
PUBLIC	__real@437f0000
PUBLIC	__real@47480000
PUBLIC	__real@4caba950
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	_D3DXVec3Project@24:PROC
EXTRN	_D3DXVec3Unproject@24:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixScaling@16:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?Tracenf@@YAXPBDZZ:PROC				; Tracenf
EXTRN	?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ:PROC ; D3D_CAdapterInfo::GetDesktopD3DDisplayModer
EXTRN	?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z:PROC ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop
EXTRN	?GetColor@CGraphicBase@@QAEKMMMM@Z:PROC		; CGraphicBase::GetColor
EXTRN	?ResetFaceCount@CGraphicBase@@QAEXXZ:PROC	; CGraphicBase::ResetFaceCount
EXTRN	?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z:PROC ; CGraphicBase::SetDefaultIndexBuffer
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	??0CGraphicCollisionObject@@QAE@XZ:PROC		; CGraphicCollisionObject::CGraphicCollisionObject
EXTRN	??1CGraphicCollisionObject@@UAE@XZ:PROC		; CGraphicCollisionObject::~CGraphicCollisionObject
EXTRN	?IntersectTriangle@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@0000PAM11@Z:PROC ; CGraphicCollisionObject::IntersectTriangle
EXTRN	?BuildViewFrustum2@Frustum@@QAEXAAUD3DXMATRIX@@MMMMABUD3DXVECTOR3@@1@Z:PROC ; Frustum::BuildViewFrustum2
EXTRN	??_ECScreen@@UAEPAXI@Z:PROC			; CScreen::`vector deleting destructor'
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	?SetDefaultState@CStateManager@@QAEXXZ:PROC	; CStateManager::SetDefaultState
EXTRN	?BeginScene@CStateManager@@QAE_NXZ:PROC		; CStateManager::BeginScene
EXTRN	?EndScene@CStateManager@@QAEXXZ:PROC		; CStateManager::EndScene
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SaveTextureStageState
EXTRN	?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z:PROC ; CStateManager::RestoreTextureStageState
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SaveTransform
EXTRN	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z:PROC ; CStateManager::RestoreTransform
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z:PROC ; CStateManager::SetStreamSource
EXTRN	?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z:PROC ; CStateManager::SetIndices
EXTRN	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z:PROC ; CStateManager::DrawPrimitive
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	??_ECD3DXMeshRenderingOption@@UAEPAXI@Z:PROC	; CD3DXMeshRenderingOption::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matIdentity
EXTRN	?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matView
EXTRN	?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matProj
EXTRN	?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matInverseView
EXTRN	?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matWorld
EXTRN	?ms_lpSphereMesh@CGraphicBase@@1PAUID3DXMesh@@A:DWORD ; CGraphicBase::ms_lpSphereMesh
EXTRN	?ms_lpCylinderMesh@CGraphicBase@@1PAUID3DXMesh@@A:DWORD ; CGraphicBase::ms_lpCylinderMesh
EXTRN	?ms_iD3DAdapterInfo@CGraphicBase@@1IA:DWORD	; CGraphicBase::ms_iD3DAdapterInfo
EXTRN	?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A:BYTE ; CGraphicBase::ms_kD3DDetector
EXTRN	?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A:DWORD	; CGraphicBase::ms_lpd3d
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A:DWORD ; CGraphicBase::ms_lpd3dMatStack
EXTRN	?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A:BYTE ; CGraphicBase::ms_Viewport
EXTRN	?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A:BYTE ; CGraphicBase::ms_d3dPresentParameter
EXTRN	?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A:BYTE ; CGraphicBase::ms_vtPickRayOrig
EXTRN	?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A:BYTE ; CGraphicBase::ms_vtPickRayDir
EXTRN	?ms_fFieldOfView@CGraphicBase@@1MA:DWORD	; CGraphicBase::ms_fFieldOfView
EXTRN	?ms_fAspect@CGraphicBase@@1MA:DWORD		; CGraphicBase::ms_fAspect
EXTRN	?ms_fNearY@CGraphicBase@@1MA:DWORD		; CGraphicBase::ms_fNearY
EXTRN	?ms_fFarY@CGraphicBase@@1MA:DWORD		; CGraphicBase::ms_fFarY
EXTRN	?ms_Ray@CGraphicBase@@1VCRay@@A:BYTE		; CGraphicBase::ms_Ray
EXTRN	?GRAPHICS_CAPS_CAN_NOT_DRAW_LINE@@3_NA:BYTE	; GRAPHICS_CAPS_CAN_NOT_DRAW_LINE
EXTRN	?g_isBrowserMode@@3_NA:BYTE			; g_isBrowserMode
EXTRN	?g_rcBrowser@@3UtagRECT@@A:BYTE			; g_rcBrowser
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?ms_frustum@CScreen@@1VFrustum@@A DB 074H DUP (?)	; CScreen::ms_frustum
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4caba950
CONST	SEGMENT
__real@4caba950 DD 04caba950r			; 9e+07
CONST	ENDS
;	COMDAT __real@47480000
CONST	SEGMENT
__real@47480000 DD 047480000r			; 51200
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CD3DXMeshRenderingOption@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CD3DXMeshRenderingOption@@8 DD FLAT:??_R0?AVCD3DXMeshRenderingOption@@@8 ; CD3DXMeshRenderingOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CD3DXMeshRenderingOption@@8
rdata$r	ENDS
;	COMDAT ??_R2CD3DXMeshRenderingOption@@8
rdata$r	SEGMENT
??_R2CD3DXMeshRenderingOption@@8 DD FLAT:??_R1A@?0A@EA@CD3DXMeshRenderingOption@@8 ; CD3DXMeshRenderingOption::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CD3DXMeshRenderingOption@@8
rdata$r	SEGMENT
??_R3CD3DXMeshRenderingOption@@8 DD 00H			; CD3DXMeshRenderingOption::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CD3DXMeshRenderingOption@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCD3DXMeshRenderingOption@@@8
data$rs	SEGMENT
??_R0?AVCD3DXMeshRenderingOption@@@8 DD FLAT:??_7type_info@@6B@ ; CD3DXMeshRenderingOption `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCD3DXMeshRenderingOption@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CD3DXMeshRenderingOption@@6B@
rdata$r	SEGMENT
??_R4CD3DXMeshRenderingOption@@6B@ DD 00H		; CD3DXMeshRenderingOption::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCD3DXMeshRenderingOption@@@8
	DD	FLAT:??_R3CD3DXMeshRenderingOption@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$rs	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CScreen@@6B@
rdata$r	SEGMENT
??_R4CScreen@@6B@ DD 00H				; CScreen::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCScreen@@@8
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HBCJANMB@BeginScene?5FAILED?6@
CONST	SEGMENT
??_C@_0BD@HBCJANMB@BeginScene?5FAILED?6@ DB 'BeginScene FAILED', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?sc_awFillRectIndices@?1??GetCursorZPosition@CScreen@@QAE_NPAM@Z@4QBGB
CONST	SEGMENT
?sc_awFillRectIndices@?1??GetCursorZPosition@CScreen@@QAE_NPAM@Z@4QBGB DW 00H ; `CScreen::GetCursorZPosition'::`2'::sc_awFillRectIndices
	DW	02H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
CONST	ENDS
;	COMDAT ?sc_awFillRectIndices@?1??GetCursorXYPosition@CScreen@@QAE_NPAM0@Z@4QBGB
CONST	SEGMENT
?sc_awFillRectIndices@?1??GetCursorXYPosition@CScreen@@QAE_NPAM0@Z@4QBGB DW 00H ; `CScreen::GetCursorXYPosition'::`2'::sc_awFillRectIndices
	DW	02H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
CONST	ENDS
;	COMDAT ??_7CD3DXMeshRenderingOption@@6B@
CONST	SEGMENT
??_7CD3DXMeshRenderingOption@@6B@ DD FLAT:??_R4CD3DXMeshRenderingOption@@6B@ ; CD3DXMeshRenderingOption::`vftable'
	DD	FLAT:??_ECD3DXMeshRenderingOption@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CScreen@@6B@
CONST	SEGMENT
??_7CScreen@@6B@ DD FLAT:??_R4CScreen@@6B@		; CScreen::`vftable'
	DD	FLAT:??_ECScreen@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CD3DXMeshRenderingOption@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CD3DXMeshRenderingOption@@QAE@W4_D3DFILLMODE@@ABUD3DXMATRIX@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CD3DXMeshRenderingOption@@QAE@W4_D3DFILLMODE@@ABUD3DXMATRIX@@@Z$0
__ehfuncinfo$??0CD3DXMeshRenderingOption@@QAE@W4_D3DFILLMODE@@ABUD3DXMATRIX@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CD3DXMeshRenderingOption@@QAE@W4_D3DFILLMODE@@ABUD3DXMATRIX@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenderMiniMapFilter@CScreen@@QAEXMMMMHMMABUD3DXVECTOR3@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderMiniMapFilter@CScreen@@QAEXMMMMHMMABUD3DXVECTOR3@@@Z$0
__ehfuncinfo$?RenderMiniMapFilter@CScreen@@QAEXMMMMHMMABUD3DXVECTOR3@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RenderMiniMapFilter@CScreen@@QAEXMMMMHMMABUD3DXVECTOR3@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z$0
__ehfuncinfo$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenderCircle3d@CScreen@@QAEXMMMMH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderCircle3d@CScreen@@QAEXMMMMH@Z$0
__ehfuncinfo$?RenderCircle3d@CScreen@@QAEXMMMMH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RenderCircle3d@CScreen@@QAEXMMMMH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenderCircle2d@CScreen@@QAEXMMMMH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderCircle2d@CScreen@@QAEXMMMMH@Z$0
__ehfuncinfo$?RenderCircle2d@CScreen@@QAEXMMMMH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RenderCircle2d@CScreen@@QAEXMMMMH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@QBDQAU1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@QBDQAU1@II@Z PROC ; std::_Copy_memmove_tail<D3DXVECTOR3 *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@QBDQAU1@II@Z ENDP ; std::_Copy_memmove_tail<D3DXVECTOR3 *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z PROC ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  0000e	f7 e9		 imul	 ecx
  00010	d1 fa		 sar	 edx, 1
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<D3DXVECTOR3 *>
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ENDP ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@UD3DXVECTOR3@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEPAUD3DXVECTOR3@@QAU2@$$QAU2@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
__Whereoff$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@UD3DXVECTOR3@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEPAUD3DXVECTOR3@@QAU2@$$QAU2@@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Emplace_reallocate<D3DXVECTOR3>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00016	8b 33		 mov	 esi, DWORD PTR [ebx]
  00018	2b d6		 sub	 edx, esi

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0001a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001d	f7 ea		 imul	 edx
  0001f	2b ce		 sub	 ecx, esi
  00021	d1 fa		 sar	 edx, 1
  00023	8b c2		 mov	 eax, edx
  00025	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00028	03 c2		 add	 eax, edx
  0002a	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00032	f7 e9		 imul	 ecx
  00034	d1 fa		 sar	 edx, 1
  00036	8b c2		 mov	 eax, edx
  00038	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003b	03 c2		 add	 eax, edx
  0003d	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  00040	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00045	0f 84 e0 00 00
	00		 je	 $LN104@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0004e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00051	2b ce		 sub	 ecx, esi
  00053	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00058	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0005a	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005f	d1 fa		 sar	 edx, 1
  00061	8b ca		 mov	 ecx, edx
  00063	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00066	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00068	8b d1		 mov	 edx, ecx
  0006a	d1 ea		 shr	 edx, 1
  0006c	2b c2		 sub	 eax, edx
  0006e	3b c8		 cmp	 ecx, eax
  00070	76 12		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00072	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00077	be 55 55 55 15	 mov	 esi, 357913941		; 15555555H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 39		 jmp	 SHORT $LN102@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00084	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00087	8b f7		 mov	 esi, edi
  00089	3b c7		 cmp	 eax, edi
  0008b	0f 43 f0	 cmovae	 esi, eax
  0008e	81 fe 55 55 55
	15		 cmp	 esi, 357913941		; 15555555H
  00094	0f 87 96 00 00
	00		 ja	 $LN105@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0009a	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0009d	c1 e0 02	 shl	 eax, 2

; 227  :     if (_Bytes == 0) {

  000a0	85 c0		 test	 eax, eax
  000a2	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  000a4	33 ff		 xor	 edi, edi
  000a6	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000a8	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ad	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b5	eb 06		 jmp	 SHORT $LN102@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN102@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000bd	8b f8		 mov	 edi, eax
  000bf	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  000c2	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000c5	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000c8	8d 1c 87	 lea	 ebx, DWORD PTR [edi+eax*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000cb	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000ce	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000d2	66 0f d6 03	 movq	 QWORD PTR [ebx], xmm0
  000d6	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000d9	89 43 08	 mov	 DWORD PTR [ebx+8], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000dc	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000df	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e4	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000e7	3b c2		 cmp	 eax, edx
  000e9	75 04		 jne	 SHORT $LN3@Emplace_re
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000eb	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000ed	eb 17		 jmp	 SHORT $LN58@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000ef	57		 push	 edi
  000f0	50		 push	 eax
  000f1	51		 push	 ecx
  000f2	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
  000f7	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fd	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00100	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00103	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
$LN58@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  00106	50		 push	 eax
  00107	52		 push	 edx
  00108	51		 push	 ecx
  00109	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  00111	83 c4 0c	 add	 esp, 12			; 0000000cH
  00114	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00117	40		 inc	 eax
  00118	56		 push	 esi
  00119	50		 push	 eax
  0011a	57		 push	 edi
  0011b	e8 00 00 00 00	 call	 ?_Change_array@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXQAUD3DXVECTOR3@@II@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Change_array

; 903  :     }

  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	8b c3		 mov	 eax, ebx
  00124	5b		 pop	 ebx
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c2 08 00	 ret	 8
$LN104@Emplace_re:

; 873  :             _Xlength();

  0012b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
$LN105@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00130	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN101@Emplace_re:
  00135	cc		 int	 3
??$_Emplace_reallocate@UD3DXVECTOR3@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEPAUD3DXVECTOR3@@QAU2@$$QAU2@@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Emplace_reallocate<D3DXVECTOR3>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCD3DXMeshRenderingOption@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCD3DXMeshRenderingOption@@UAEPAXI@Z PROC		; CD3DXMeshRenderingOption::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CD3DXMeshRenderingOption@@UAE@XZ ; CD3DXMeshRenderingOption::~CD3DXMeshRenderingOption
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 08		 push	 8
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCD3DXMeshRenderingOption@@UAEPAXI@Z ENDP		; CD3DXMeshRenderingOption::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ??1CD3DXMeshRenderingOption@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CD3DXMeshRenderingOption@@UAE@XZ PROC		; CD3DXMeshRenderingOption::~CD3DXMeshRenderingOption, COMDAT
; _this$ = ecx

; 331  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CD3DXMeshRenderingOption@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 332  : 		ms_lpd3dDevice->SetVertexShader(m_dwVS);

  00025	ff 76 04	 push	 DWORD PTR [esi+4]
  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CD3DXMeshRenderingOption@@6B@
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00033	50		 push	 eax
  00034	8b 10		 mov	 edx, DWORD PTR [eax]
  00036	ff 92 30 01 00
	00		 call	 DWORD PTR [edx+304]

; 333  : 
; 334  : 		STATEMANAGER.RestoreTransform(D3DTS_WORLD);

  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00042	68 00 01 00 00	 push	 256			; 00000100H
  00047	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 335  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLORARG1);

  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00052	6a 02		 push	 2
  00054	6a 00		 push	 0
  00056	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 336  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLOROP);

  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00061	6a 01		 push	 1
  00063	6a 00		 push	 0
  00065	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 337  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_ALPHAOP);

  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00070	6a 04		 push	 4
  00072	6a 00		 push	 0
  00074	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 338  : 		STATEMANAGER.SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);

  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0007f	6a 03		 push	 3
  00081	6a 08		 push	 8
  00083	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 339  : 	}

  00088	8b ce		 mov	 ecx, esi
  0008a	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5e		 pop	 esi
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
  0009f	cc		 int	 3
  000a0	cc		 int	 3
  000a1	cc		 int	 3
  000a2	cc		 int	 3
  000a3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CD3DXMeshRenderingOption@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CD3DXMeshRenderingOption@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CD3DXMeshRenderingOption@@UAE@XZ ENDP		; CD3DXMeshRenderingOption::~CD3DXMeshRenderingOption
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Change_array@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXQAUD3DXVECTOR3@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXQAUD3DXVECTOR3@@II@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Change_array, COMDAT
; _this$ = ecx

; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00007	8b 37		 mov	 esi, DWORD PTR [edi]
  00009	85 f6		 test	 esi, esi
  0000b	74 3f		 je	 SHORT $LN10@Change_arr

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00010	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00015	2b ce		 sub	 ecx, esi
  00017	f7 e9		 imul	 ecx
  00019	d1 fa		 sar	 edx, 1
  0001b	8b c2		 mov	 eax, edx
  0001d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00020	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00022	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00025	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 12		 jb	 SHORT $LN21@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00030	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00033	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00036	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00038	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0003b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003e	77 2f		 ja	 SHORT $LN18@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00040	8b f2		 mov	 esi, edx
$LN21@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00042	51		 push	 ecx
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN10@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2060 :         _Myfirst = _Newvec;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0004f	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00052	89 0f		 mov	 DWORD PTR [edi], ecx
  00054	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00057	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0005a	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0005d	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00060	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00063	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00066	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi

; 2064 :     }

  0006b	5d		 pop	 ebp
  0006c	c2 0c 00	 ret	 12			; 0000000cH
$LN18@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Change_arr:
  00074	cc		 int	 3
?_Change_array@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXQAUD3DXVECTOR3@@II@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?resize@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Oldsize$1$ = -4					; size = 4
__Newsize$ = 8						; size = 4
$T3 = 8							; size = 4
?resize@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::resize, COMDAT
; _this$ = ecx

; 1613 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00007	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH

; 1613 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

  0000c	56		 push	 esi

; 1581 :         if (_Newsize < _Oldsize) { // trim

  0000d	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]

; 1613 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

  00010	57		 push	 edi

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00011	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00014	8b d7		 mov	 edx, edi
  00016	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00018	2b d1		 sub	 edx, ecx
  0001a	f7 ea		 imul	 edx
  0001c	d1 fa		 sar	 edx, 1
  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00023	03 c2		 add	 eax, edx
  00025	89 45 fc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1581 :         if (_Newsize < _Oldsize) { // trim

  00028	3b f0		 cmp	 esi, eax
  0002a	73 12		 jae	 SHORT $LN4@resize

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  0002c	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0002f	5f		 pop	 edi
  00030	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 1616 :     }

  00033	5e		 pop	 esi

; 1586 :             _Mylast = _Newlast;

  00034	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1616 :     }

  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
$LN4@resize:

; 1590 :         if (_Newsize > _Oldsize) { // append

  0003e	0f 86 b5 00 00
	00		 jbe	 $LN5@resize

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00044	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00047	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004c	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  0004e	f7 e9		 imul	 ecx
  00050	d1 fa		 sar	 edx, 1
  00052	8b ca		 mov	 ecx, edx
  00054	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00057	03 ca		 add	 ecx, edx

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  00059	3b f1		 cmp	 esi, ecx
  0005b	0f 86 8a 00 00
	00		 jbe	 $LN6@resize

; 1538 :         if (_Newsize > max_size()) {

  00061	81 fe 55 55 55
	15		 cmp	 esi, 357913941		; 15555555H
  00067	0f 87 95 00 00
	00		 ja	 $LN118@resize

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006d	8b d1		 mov	 edx, ecx
  0006f	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H
  00074	d1 ea		 shr	 edx, 1
  00076	2b c2		 sub	 eax, edx
  00078	3b c8		 cmp	 ecx, eax
  0007a	76 12		 jbe	 SHORT $LN13@resize

; 1997 :             return _Max; // geometric growth would overflow

  0007c	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00081	bf 55 55 55 15	 mov	 edi, 357913941		; 15555555H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008c	eb 34		 jmp	 SHORT $LN116@resize
$LN13@resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0008e	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00091	3b fe		 cmp	 edi, esi
  00093	73 0e		 jae	 SHORT $LN14@resize

; 2003 :             return _Newsize; // geometric growth would be insufficient

  00095	8b fe		 mov	 edi, esi
$LN24@resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  00097	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  0009a	c1 e0 02	 shl	 eax, 2

; 227  :     if (_Bytes == 0) {

  0009d	85 c0		 test	 eax, eax
  0009f	75 0c		 jne	 SHORT $LN28@resize

; 228  :         return nullptr;

  000a1	eb 22		 jmp	 SHORT $LN115@resize
$LN14@resize:

; 117  :         if (_Count > _Max_possible) {

  000a3	81 ff 55 55 55
	15		 cmp	 edi, 357913941		; 15555555H
  000a9	77 5c		 ja	 SHORT $LN119@resize
  000ab	eb ea		 jmp	 SHORT $LN24@resize
$LN28@resize:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ad	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b2	72 08		 jb	 SHORT $LN29@resize

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ba	eb 06		 jmp	 SHORT $LN116@resize
$LN29@resize:

; 136  :         return ::operator new(_Bytes);

  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN116@resize:

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000c2	83 c4 04	 add	 esp, 4
$LN115@resize:
  000c5	50		 push	 eax
  000c6	ff 73 04	 push	 DWORD PTR [ebx+4]
  000c9	89 45 08	 mov	 DWORD PTR $T3[ebp], eax
  000cc	ff 33		 push	 DWORD PTR [ebx]
  000ce	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
  000d3	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1570 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000d6	8b cb		 mov	 ecx, ebx
  000d8	57		 push	 edi
  000d9	56		 push	 esi
  000da	ff 75 08	 push	 DWORD PTR $T3[ebp]
  000dd	e8 00 00 00 00	 call	 ?_Change_array@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXQAUD3DXVECTOR3@@II@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Change_array
  000e2	5f		 pop	 edi

; 1616 :     }

  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 04 00	 ret	 4
$LN6@resize:

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  000eb	2b 75 fc	 sub	 esi, DWORD PTR __Oldsize$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2056 :     for (; 0 < _Count; --_Count) {

  000ee	74 06		 je	 SHORT $LN87@resize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  000f0	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000f3	8d 3c 87	 lea	 edi, DWORD PTR [edi+eax*4]
$LN87@resize:
  000f6	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
$LN5@resize:
  000f9	5f		 pop	 edi

; 1616 :     }

  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
$LN118@resize:

; 1539 :             _Xlength();

  00102	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
$LN119@resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00107	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN114@resize:
  0010c	cc		 int	 3
?resize@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN5@vector:
  0005d	5f		 pop	 edi

; 820  :     }

  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00065	cc		 int	 3
??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCScreen@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCScreen@@UAEPAXI@Z PROC				; CScreen::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 04		 push	 4
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCScreen@@UAEPAXI@Z ENDP				; CScreen::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?Identity@CScreen@@SAXXZ
_TEXT	SEGMENT
?Identity@CScreen@@SAXXZ PROC				; CScreen::Identity, COMDAT

; 874  : 	STATEMANAGER.SetTransform(D3DTS_WORLD, &ms_matIdentity);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00006	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  0000b	68 00 01 00 00	 push	 256			; 00000100H
  00010	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 875  : }

  00015	c3		 ret	 0
?Identity@CScreen@@SAXXZ ENDP				; CScreen::Identity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Camera.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Camera.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?BuildViewFrustum@CScreen@@QAEXXZ
_TEXT	SEGMENT
_vv$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?BuildViewFrustum@CScreen@@QAEXXZ PROC			; CScreen::BuildViewFrustum, COMDAT
; _this$ = ecx

; 886  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 887  : 	const D3DXVECTOR3& c_rv3Eye = CCameraManager::Instance().GetCurrentCamera()->GetEye();

  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 888  : 	const D3DXVECTOR3& c_rv3View = CCameraManager::Instance().GetCurrentCamera()->GetView();

  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterLib\Camera.h

; 163  : 		const D3DXVECTOR3 & GetEye() const		{ return m_v3Eye; }

  00023	8d 78 30	 lea	 edi, DWORD PTR [eax+48]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 888  : 	const D3DXVECTOR3& c_rv3View = CCameraManager::Instance().GetCurrentCamera()->GetView();

  00026	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  0002b	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
  00030	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
; File C:\Marty 5.5\Src-Client\Client\EterLib\Camera.h

; 166  : 		const D3DXVECTOR3 & GetView() const		{ return m_v3View; }

  00035	8d 70 54	 lea	 esi, DWORD PTR [eax+84]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  00038	8d 45 bc	 lea	 eax, DWORD PTR _vv$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 890  : 	ms_frustum.BuildViewFrustum2(

  00041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_fAspect@CGraphicBase@@1MA
  00049	8d 45 bc	 lea	 eax, DWORD PTR _vv$[ebp]
  0004c	56		 push	 esi
  0004d	57		 push	 edi
  0004e	83 ec 10	 sub	 esp, 16			; 00000010H
  00051	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  00056	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0005c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_fFieldOfView@CGraphicBase@@1MA
  00064	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0006a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_fFarY@CGraphicBase@@1MA
  00072	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_fNearY@CGraphicBase@@1MA
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?BuildViewFrustum2@Frustum@@QAEXAAUD3DXMATRIX@@MMMMABUD3DXVECTOR3@@1@Z ; Frustum::BuildViewFrustum2

; 891  : 		vv,
; 892  : 		ms_fNearY,
; 893  : 		ms_fFarY,
; 894  : 		ms_fFieldOfView,
; 895  : 		ms_fAspect,
; 896  : 		c_rv3Eye, c_rv3View);
; 897  : }

  0008b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008e	5f		 pop	 edi
  0008f	33 cd		 xor	 ecx, ebp
  00091	5e		 pop	 esi
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
?BuildViewFrustum@CScreen@@QAEXXZ ENDP			; CScreen::BuildViewFrustum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RestoreDevice@CScreen@@QAEHXZ
_TEXT	SEGMENT
_iD3DAdapterInfo$1$ = -4				; size = 4
?RestoreDevice@CScreen@@QAEHXZ PROC			; CScreen::RestoreDevice, COMDAT
; _this$ = ecx

; 640  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 641  : 	if (!ms_lpd3dDevice)

  00006	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0000c	57		 push	 edi
  0000d	85 f6		 test	 esi, esi
  0000f	74 7f		 je	 SHORT $LN10@RestoreDev

; 642  : 		return FALSE;
; 643  : 
; 644  : 	UINT iD3DAdapterInfo = ms_iD3DAdapterInfo;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_iD3DAdapterInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DAdapterInfo

; 645  : 	IDirect3D8 & rkD3D = *ms_lpd3d;

  00016	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A ; CGraphicBase::ms_lpd3d
  0001c	89 45 fc	 mov	 DWORD PTR _iD3DAdapterInfo$1$[ebp], eax

; 646  : 	IDirect3DDevice8 & rkD3DDev = *ms_lpd3dDevice;
; 647  : 	D3DPRESENT_PARAMETERS & rkD3DPP = ms_d3dPresentParameter;
; 648  : 	D3D_CDisplayModeAutoDetector & rkD3DDetector = ms_kD3DDetector;
; 649  : 
; 650  : 	HRESULT hrTestCooperativeLevel = rkD3DDev.TestCooperativeLevel();

  0001f	8b 06		 mov	 eax, DWORD PTR [esi]
  00021	56		 push	 esi
  00022	ff 50 0c	 call	 DWORD PTR [eax+12]

; 651  : 
; 652  : 	if (FAILED(hrTestCooperativeLevel))

  00025	85 c0		 test	 eax, eax
  00027	79 5b		 jns	 SHORT $LN5@RestoreDev

; 653  : 	{
; 654  : 		if (D3DERR_DEVICELOST == hrTestCooperativeLevel)

  00029	3d 68 08 76 88	 cmp	 eax, -2005530520	; 88760868H
  0002e	74 60		 je	 SHORT $LN10@RestoreDev

; 655  : 		{
; 656  : 			return FALSE;
; 657  : 		}
; 658  : 
; 659  : 		if (D3DERR_DEVICENOTRESET == hrTestCooperativeLevel)

  00030	3d 69 08 76 88	 cmp	 eax, -2005530519	; 88760869H
  00035	75 4d		 jne	 SHORT $LN5@RestoreDev

; 660  : 		{
; 661  : 			D3D_CAdapterInfo* pkD3DAdapterInfo = rkD3DDetector.GetD3DAdapterInfop(ms_iD3DAdapterInfo);

  00037	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iD3DAdapterInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DAdapterInfo
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A ; CGraphicBase::ms_kD3DDetector
  00042	e8 00 00 00 00	 call	 ?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop

; 662  : 
; 663  : 			if (!pkD3DAdapterInfo)

  00047	85 c0		 test	 eax, eax
  00049	74 45		 je	 SHORT $LN10@RestoreDev

; 664  : 				return FALSE;
; 665  : 
; 666  : 			D3DDISPLAYMODE & rkD3DDMDesktop = pkD3DAdapterInfo->GetDesktopD3DDisplayModer();

  0004b	8b c8		 mov	 ecx, eax
  0004d	e8 00 00 00 00	 call	 ?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ ; D3D_CAdapterInfo::GetDesktopD3DDisplayModer

; 667  : 
; 668  : 			if (FAILED(rkD3D.GetAdapterDisplayMode(iD3DAdapterInfo, &rkD3DDMDesktop)))

  00052	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00054	8b f8		 mov	 edi, eax
  00056	57		 push	 edi
  00057	ff 75 fc	 push	 DWORD PTR _iD3DAdapterInfo$1$[ebp]
  0005a	53		 push	 ebx
  0005b	ff 51 20	 call	 DWORD PTR [ecx+32]
  0005e	85 c0		 test	 eax, eax
  00060	78 2e		 js	 SHORT $LN10@RestoreDev

; 669  : 				return FALSE;
; 670  : 
; 671  : 			rkD3DPP.BackBufferFormat = rkD3DDMDesktop.Format;

  00062	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00065	a3 08 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+8, eax

; 672  : 
; 673  : 			HRESULT hrReset = rkD3DDev.Reset(&rkD3DPP);

  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	68 00 00 00 00	 push	 OFFSET ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A ; CGraphicBase::ms_d3dPresentParameter
  00071	56		 push	 esi
  00072	ff 50 38	 call	 DWORD PTR [eax+56]

; 674  : 
; 675  : 			if (FAILED(hrReset))

  00075	85 c0		 test	 eax, eax
  00077	78 17		 js	 SHORT $LN10@RestoreDev

; 676  : 			{
; 677  : 				return FALSE;
; 678  : 			}
; 679  : 
; 680  : 			STATEMANAGER.SetDefaultState();

  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0007f	e8 00 00 00 00	 call	 ?SetDefaultState@CStateManager@@QAEXXZ ; CStateManager::SetDefaultState
$LN5@RestoreDev:

; 681  : 		}
; 682  : 	}
; 683  : 
; 684  : 	return TRUE;
; 685  : 
; 686  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN10@RestoreDev:
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	33 c0		 xor	 eax, eax
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
?RestoreDevice@CScreen@@QAEHXZ ENDP			; CScreen::RestoreDevice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?IsLostDevice@CScreen@@QAEHXZ
_TEXT	SEGMENT
?IsLostDevice@CScreen@@QAEHXZ PROC			; CScreen::IsLostDevice, COMDAT
; _this$ = ecx

; 628  : 	if (!ms_lpd3dDevice)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00006	85 c9		 test	 ecx, ecx
  00008	74 10		 je	 SHORT $LN5@IsLostDevi

; 629  : 		return TRUE;
; 630  : 
; 631  : 	IDirect3DDevice8 & rkD3DDev = *ms_lpd3dDevice;
; 632  : 	HRESULT hrTestCooperativeLevel = rkD3DDev.TestCooperativeLevel();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	51		 push	 ecx
  0000d	ff 50 0c	 call	 DWORD PTR [eax+12]

; 633  : 	if (FAILED(hrTestCooperativeLevel))

  00010	33 c9		 xor	 ecx, ecx
  00012	85 c0		 test	 eax, eax
  00014	0f 98 c1	 sets	 cl
  00017	8b c1		 mov	 eax, ecx

; 635  : 
; 636  : 	return FALSE;
; 637  : }

  00019	c3		 ret	 0
$LN5@IsLostDevi:

; 634  : 		return TRUE;

  0001a	b8 01 00 00 00	 mov	 eax, 1

; 635  : 
; 636  : 	return FALSE;
; 637  : }

  0001f	c3		 ret	 0
?IsLostDevice@CScreen@@QAEHXZ ENDP			; CScreen::IsLostDevice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?UnprojectPosition@CScreen@@QAEXMMMPAM00@Z
_TEXT	SEGMENT
_Output$ = -28						; size = 12
_Input$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pfX$ = 20						; size = 4
_pfY$ = 24						; size = 4
_pfZ$ = 28						; size = 4
?UnprojectPosition@CScreen@@QAEXMMMPAM00@Z PROC		; CScreen::UnprojectPosition, COMDAT
; _this$ = ecx

; 768  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 771  : 	D3DXVec3Unproject(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00015	8d 45 f0	 lea	 eax, DWORD PTR _Input$[ebp]
  00018	53		 push	 ebx
  00019	8b 5d 1c	 mov	 ebx, DWORD PTR _pfZ$[ebp]
  0001c	56		 push	 esi
  0001d	8b 75 14	 mov	 esi, DWORD PTR _pfX$[ebp]
  00020	57		 push	 edi
  00021	8b 7d 18	 mov	 edi, DWORD PTR _pfY$[ebp]
  00024	68 00 00 00 00	 push	 OFFSET ?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorld
  00029	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  0002e	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00033	f3 0f 11 45 f0	 movss	 DWORD PTR _Input$[ebp], xmm0

; 181  :     y = fy;

  00038	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 771  : 	D3DXVec3Unproject(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  0003d	68 00 00 00 00	 push	 OFFSET ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A ; CGraphicBase::ms_Viewport
  00042	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00043	f3 0f 11 45 f4	 movss	 DWORD PTR _Input$[ebp+4], xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 771  : 	D3DXVec3Unproject(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00048	8d 45 e4	 lea	 eax, DWORD PTR _Output$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0004b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 771  : 	D3DXVec3Unproject(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00050	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00051	f3 0f 11 45 f8	 movss	 DWORD PTR _Input$[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 771  : 	D3DXVec3Unproject(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00056	e8 00 00 00 00	 call	 _D3DXVec3Unproject@24

; 772  : 
; 773  : 	*pfX = Output.x;

  0005b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _Output$[ebp]

; 774  : 	*pfY = Output.y;
; 775  : 	*pfZ = Output.z;
; 776  : }

  00060	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00063	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00067	33 cd		 xor	 ecx, ebp
  00069	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Output$[ebp+4]
  0006e	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00072	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Output$[ebp+8]
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  0007d	5b		 pop	 ebx
  0007e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 18 00	 ret	 24			; 00000018H
?UnprojectPosition@CScreen@@QAEXMMMPAM00@Z ENDP		; CScreen::UnprojectPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?ProjectPosition@CScreen@@QAEXMMMPAM00@Z
_TEXT	SEGMENT
_Output$ = -28						; size = 12
_Input$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pfX$ = 20						; size = 4
_pfY$ = 24						; size = 4
_pfZ$ = 28						; size = 4
?ProjectPosition@CScreen@@QAEXMMMPAM00@Z PROC		; CScreen::ProjectPosition, COMDAT
; _this$ = ecx

; 757  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 760  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00015	8d 45 f0	 lea	 eax, DWORD PTR _Input$[ebp]
  00018	53		 push	 ebx
  00019	8b 5d 1c	 mov	 ebx, DWORD PTR _pfZ$[ebp]
  0001c	56		 push	 esi
  0001d	8b 75 14	 mov	 esi, DWORD PTR _pfX$[ebp]
  00020	57		 push	 edi
  00021	8b 7d 18	 mov	 edi, DWORD PTR _pfY$[ebp]
  00024	68 00 00 00 00	 push	 OFFSET ?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorld
  00029	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  0002e	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00033	f3 0f 11 45 f0	 movss	 DWORD PTR _Input$[ebp], xmm0

; 181  :     y = fy;

  00038	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 760  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  0003d	68 00 00 00 00	 push	 OFFSET ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A ; CGraphicBase::ms_Viewport
  00042	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00043	f3 0f 11 45 f4	 movss	 DWORD PTR _Input$[ebp+4], xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 760  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00048	8d 45 e4	 lea	 eax, DWORD PTR _Output$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0004b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 760  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00050	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00051	f3 0f 11 45 f8	 movss	 DWORD PTR _Input$[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 760  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00056	e8 00 00 00 00	 call	 _D3DXVec3Project@24

; 761  : 
; 762  : 	*pfX = Output.x;

  0005b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _Output$[ebp]

; 763  : 	*pfY = Output.y;
; 764  : 	*pfZ = Output.z;
; 765  : }

  00060	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00063	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00067	33 cd		 xor	 ecx, ebp
  00069	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Output$[ebp+4]
  0006e	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00072	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Output$[ebp+8]
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  0007d	5b		 pop	 ebx
  0007e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 18 00	 ret	 24			; 00000018H
?ProjectPosition@CScreen@@QAEXMMMPAM00@Z ENDP		; CScreen::ProjectPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?ProjectPosition@CScreen@@QAEXMMMPAM0@Z
_TEXT	SEGMENT
_Output$ = -28						; size = 12
_Input$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pfX$ = 20						; size = 4
_pfY$ = 24						; size = 4
?ProjectPosition@CScreen@@QAEXMMMPAM0@Z PROC		; CScreen::ProjectPosition, COMDAT
; _this$ = ecx

; 747  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 750  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00015	8d 45 f0	 lea	 eax, DWORD PTR _Input$[ebp]
  00018	56		 push	 esi
  00019	8b 75 14	 mov	 esi, DWORD PTR _pfX$[ebp]
  0001c	57		 push	 edi
  0001d	8b 7d 18	 mov	 edi, DWORD PTR _pfY$[ebp]
  00020	68 00 00 00 00	 push	 OFFSET ?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorld
  00025	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  0002a	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0002f	f3 0f 11 45 f0	 movss	 DWORD PTR _Input$[ebp], xmm0

; 181  :     y = fy;

  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 750  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00039	68 00 00 00 00	 push	 OFFSET ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A ; CGraphicBase::ms_Viewport
  0003e	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0003f	f3 0f 11 45 f4	 movss	 DWORD PTR _Input$[ebp+4], xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 750  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00044	8d 45 e4	 lea	 eax, DWORD PTR _Output$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00047	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 750  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  0004c	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0004d	f3 0f 11 45 f8	 movss	 DWORD PTR _Input$[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 750  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00052	e8 00 00 00 00	 call	 _D3DXVec3Project@24

; 751  : 
; 752  : 	*pfX = Output.x;

  00057	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _Output$[ebp]

; 753  : 	*pfY = Output.y;
; 754  : }

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005f	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00063	33 cd		 xor	 ecx, ebp
  00065	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Output$[ebp+4]
  0006a	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 14 00	 ret	 20			; 00000014H
?ProjectPosition@CScreen@@QAEXMMMPAM0@Z ENDP		; CScreen::ProjectPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?GetPickingPosition@CScreen@@QAEXMPAM00@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?GetPickingPosition@CScreen@@QAEXMPAM00@Z PROC		; CScreen::GetPickingPosition, COMDAT
; _this$ = ecx

; 583  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 584  : 	*x = ms_vtPickRayOrig.x + ms_vtPickRayDir.x * t;

  00003	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _t$[ebp]
  00008	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0000b	0f 28 c1	 movaps	 xmm0, xmm1
  0000e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A
  00016	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A
  0001e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 585  : 	*y = ms_vtPickRayOrig.y + ms_vtPickRayDir.y * t;

  00022	0f 28 c1	 movaps	 xmm0, xmm1
  00025	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A+4
  0002d	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00030	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A+4
  00038	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 586  : 	*z = ms_vtPickRayOrig.z + ms_vtPickRayDir.z * t;

  0003c	f3 0f 59 0d 08
	00 00 00	 mulss	 xmm1, DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A+8
  00044	8b 45 14	 mov	 eax, DWORD PTR _z$[ebp]
  00047	f3 0f 58 0d 08
	00 00 00	 addss	 xmm1, DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A+8
  0004f	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 587  : }

  00053	5d		 pop	 ebp
  00054	c2 10 00	 ret	 16			; 00000010H
?GetPickingPosition@CScreen@@QAEXMPAM00@Z ENDP		; CScreen::GetPickingPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?GetCursorZPosition@CScreen@@QAE_NPAM@Z
_TEXT	SEGMENT
_u$ = -76						; size = 4
_v$ = -72						; size = 4
_v3Eye$ = -68						; size = 12
_t$ = -56						; size = 4
_posVertices$ = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_pz$ = 8						; size = 4
?GetCursorZPosition@CScreen@@QAE_NPAM@Z PROC		; CScreen::GetCursorZPosition, COMDAT
; _this$ = ecx

; 555  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _pz$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f9		 mov	 edi, ecx

; 556  : 	D3DXVECTOR3 v3Eye = CCameraManager::Instance().GetCurrentCamera()->GetEye();

  00018	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0001e	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 557  : 
; 558  : 	TPosition posVertices[4];
; 559  : 	posVertices[0] = TPosition(v3Eye.x-90000000.0f, 0.0f, v3Eye.z+90000000.0f);

  00023	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@4caba950
  0002b	be 02 00 00 00	 mov	 esi, OFFSET ?sc_awFillRectIndices@?1??GetCursorZPosition@CScreen@@QAE_NPAM@Z@4QBGB+2
  00030	f3 0f 7e 40 30	 movq	 xmm0, QWORD PTR [eax+48]
  00035	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00038	66 0f d6 45 bc	 movq	 QWORD PTR _v3Eye$[ebp], xmm0
  0003d	f3 0f 10 6d bc	 movss	 xmm5, DWORD PTR _v3Eye$[ebp]
  00042	89 45 c4	 mov	 DWORD PTR _v3Eye$[ebp+8], eax
  00045	0f 28 cd	 movaps	 xmm1, xmm5
  00048	f3 0f 10 65 c4	 movss	 xmm4, DWORD PTR _v3Eye$[ebp+8]
  0004d	f3 0f 5c ca	 subss	 xmm1, xmm2
  00051	0f 28 dc	 movaps	 xmm3, xmm4
  00054	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _posVertices$[ebp+4], 0
  0005b	f3 0f 58 da	 addss	 xmm3, xmm2

; 560  : 	posVertices[1] = TPosition(v3Eye.x-90000000.0f, 0.0f, v3Eye.z-90000000.0f);

  0005f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _posVertices$[ebp+16], 0
  00066	f3 0f 5c e2	 subss	 xmm4, xmm2

; 561  : 	posVertices[2] = TPosition(v3Eye.x+90000000.0f, 0.0f, v3Eye.z+90000000.0f);

  0006a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _posVertices$[ebp+28], 0
  00071	f3 0f 58 ea	 addss	 xmm5, xmm2

; 562  : 	posVertices[3] = TPosition(v3Eye.x+90000000.0f, 0.0f, v3Eye.z-90000000.0f);

  00075	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _posVertices$[ebp+40], 0
  0007c	f3 0f 11 4d cc	 movss	 DWORD PTR _posVertices$[ebp], xmm1
  00081	f3 0f 11 4d d8	 movss	 DWORD PTR _posVertices$[ebp+12], xmm1
  00086	f3 0f 11 5d d4	 movss	 DWORD PTR _posVertices$[ebp+8], xmm3
  0008b	f3 0f 11 65 e0	 movss	 DWORD PTR _posVertices$[ebp+20], xmm4
  00090	f3 0f 11 6d e4	 movss	 DWORD PTR _posVertices$[ebp+24], xmm5
  00095	f3 0f 11 5d ec	 movss	 DWORD PTR _posVertices$[ebp+32], xmm3
  0009a	f3 0f 11 6d f0	 movss	 DWORD PTR _posVertices$[ebp+36], xmm5
  0009f	f3 0f 11 65 f8	 movss	 DWORD PTR _posVertices$[ebp+44], xmm4
$LL4@GetCursorZ:

; 568  : 	{
; 569  : 		if (IntersectTriangle(ms_vtPickRayOrig, ms_vtPickRayDir,

  000a4	8d 45 c8	 lea	 eax, DWORD PTR _t$[ebp]
  000a7	50		 push	 eax
  000a8	8d 45 b8	 lea	 eax, DWORD PTR _v$[ebp]
  000ab	50		 push	 eax
  000ac	8d 45 b4	 lea	 eax, DWORD PTR _u$[ebp]
  000af	50		 push	 eax
  000b0	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  000b4	8d 4d cc	 lea	 ecx, DWORD PTR _posVertices$[ebp]
  000b7	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000ba	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000bd	50		 push	 eax
  000be	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000c1	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000c4	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000c7	50		 push	 eax
  000c8	0f b7 46 fe	 movzx	 eax, WORD PTR [esi-2]
  000cc	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000cf	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000d2	8b cf		 mov	 ecx, edi
  000d4	50		 push	 eax
  000d5	68 00 00 00 00	 push	 OFFSET ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A ; CGraphicBase::ms_vtPickRayDir
  000da	68 00 00 00 00	 push	 OFFSET ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A ; CGraphicBase::ms_vtPickRayOrig
  000df	e8 00 00 00 00	 call	 ?IntersectTriangle@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@0000PAM11@Z ; CGraphicCollisionObject::IntersectTriangle
  000e4	84 c0		 test	 al, al
  000e6	75 1e		 jne	 SHORT $LN25@GetCursorZ

; 563  : 
; 564  : 	static const WORD sc_awFillRectIndices[6] = { 0, 2, 1, 2, 3, 1, };
; 565  : 
; 566  : 	float u, v, t;
; 567  : 	for (int i = 0; i < 2; ++i)

  000e8	83 c6 06	 add	 esi, 6
  000eb	81 fe 0e 00 00
	00		 cmp	 esi, OFFSET ?sc_awFillRectIndices@?1??GetCursorZPosition@CScreen@@QAE_NPAM@Z@4QBGB+14
  000f1	7c b1		 jl	 SHORT $LL4@GetCursorZ

; 577  : 		}
; 578  : 	}
; 579  : 	return false;
; 580  : }

  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	5b		 pop	 ebx
  000f6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f9	33 cd		 xor	 ecx, ebp
  000fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c2 04 00	 ret	 4
$LN25@GetCursorZ:

; 570  : 							 posVertices[sc_awFillRectIndices[i*3+0]],
; 571  : 							 posVertices[sc_awFillRectIndices[i*3+1]],
; 572  : 							 posVertices[sc_awFillRectIndices[i*3+2]],
; 573  : 							 &u, &v, &t))
; 574  : 		{
; 575  : 			*pz = ms_vtPickRayOrig.z + ms_vtPickRayDir.z * t;

  00106	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _t$[ebp]

; 576  : 			return true;

  0010b	b0 01		 mov	 al, 1
  0010d	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A+8

; 577  : 		}
; 578  : 	}
; 579  : 	return false;
; 580  : }

  00115	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	f3 0f 58 05 08
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A+8
  00122	33 cd		 xor	 ecx, ebp
  00124	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  00128	5b		 pop	 ebx
  00129	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 04 00	 ret	 4
?GetCursorZPosition@CScreen@@QAE_NPAM@Z ENDP		; CScreen::GetCursorZPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?GetCursorXYPosition@CScreen@@QAE_NPAM0@Z
_TEXT	SEGMENT
_u$ = -80						; size = 4
_v$ = -76						; size = 4
_v3Eye$ = -72						; size = 12
_py$GSCopy$1$ = -60					; size = 4
_t$ = -56						; size = 4
_posVertices$ = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_px$ = 8						; size = 4
_py$ = 12						; size = 4
?GetCursorXYPosition@CScreen@@QAE_NPAM0@Z PROC		; CScreen::GetCursorXYPosition, COMDAT
; _this$ = ecx

; 526  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _py$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _px$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx
  0001b	89 45 c4	 mov	 DWORD PTR _py$GSCopy$1$[ebp], eax

; 527  : 	D3DXVECTOR3 v3Eye = CCameraManager::Instance().GetCurrentCamera()->GetEye();

  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00024	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 528  : 
; 529  : 	TPosition posVertices[4];
; 530  : 	posVertices[0] = TPosition(v3Eye.x-90000000.0f, v3Eye.y+90000000.0f, 0.0f);

  00029	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@4caba950
  00031	be 02 00 00 00	 mov	 esi, OFFSET ?sc_awFillRectIndices@?1??GetCursorXYPosition@CScreen@@QAE_NPAM0@Z@4QBGB+2
  00036	f3 0f 7e 40 30	 movq	 xmm0, QWORD PTR [eax+48]
  0003b	66 0f d6 45 b8	 movq	 QWORD PTR _v3Eye$[ebp], xmm0
  00040	f3 0f 10 6d b8	 movss	 xmm5, DWORD PTR _v3Eye$[ebp]
  00045	f3 0f 10 65 bc	 movss	 xmm4, DWORD PTR _v3Eye$[ebp+4]
  0004a	0f 28 cd	 movaps	 xmm1, xmm5
  0004d	0f 28 dc	 movaps	 xmm3, xmm4
  00050	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _posVertices$[ebp+8], 0
  00057	f3 0f 5c ca	 subss	 xmm1, xmm2

; 531  : 	posVertices[1] = TPosition(v3Eye.x-90000000.0f, v3Eye.y-90000000.0f, 0.0f);

  0005b	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _posVertices$[ebp+20], 0
  00062	f3 0f 58 da	 addss	 xmm3, xmm2

; 532  : 	posVertices[2] = TPosition(v3Eye.x+90000000.0f, v3Eye.y+90000000.0f, 0.0f);

  00066	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _posVertices$[ebp+32], 0
  0006d	f3 0f 5c e2	 subss	 xmm4, xmm2

; 533  : 	posVertices[3] = TPosition(v3Eye.x+90000000.0f, v3Eye.y-90000000.0f, 0.0f);

  00071	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _posVertices$[ebp+44], 0
  00078	f3 0f 58 ea	 addss	 xmm5, xmm2
  0007c	f3 0f 11 4d cc	 movss	 DWORD PTR _posVertices$[ebp], xmm1
  00081	f3 0f 11 5d d0	 movss	 DWORD PTR _posVertices$[ebp+4], xmm3
  00086	f3 0f 11 4d d8	 movss	 DWORD PTR _posVertices$[ebp+12], xmm1
  0008b	f3 0f 11 65 dc	 movss	 DWORD PTR _posVertices$[ebp+16], xmm4
  00090	f3 0f 11 6d e4	 movss	 DWORD PTR _posVertices$[ebp+24], xmm5
  00095	f3 0f 11 5d e8	 movss	 DWORD PTR _posVertices$[ebp+28], xmm3
  0009a	f3 0f 11 6d f0	 movss	 DWORD PTR _posVertices$[ebp+36], xmm5
  0009f	f3 0f 11 65 f4	 movss	 DWORD PTR _posVertices$[ebp+40], xmm4
$LL4@GetCursorX:

; 539  : 	{
; 540  : 		if (IntersectTriangle(ms_vtPickRayOrig, ms_vtPickRayDir,

  000a4	8d 45 c8	 lea	 eax, DWORD PTR _t$[ebp]
  000a7	50		 push	 eax
  000a8	8d 45 b4	 lea	 eax, DWORD PTR _v$[ebp]
  000ab	50		 push	 eax
  000ac	8d 45 b0	 lea	 eax, DWORD PTR _u$[ebp]
  000af	50		 push	 eax
  000b0	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  000b4	8d 4d cc	 lea	 ecx, DWORD PTR _posVertices$[ebp]
  000b7	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000ba	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000bd	50		 push	 eax
  000be	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000c1	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000c4	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000c7	50		 push	 eax
  000c8	0f b7 46 fe	 movzx	 eax, WORD PTR [esi-2]
  000cc	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000cf	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000d2	8b cf		 mov	 ecx, edi
  000d4	50		 push	 eax
  000d5	68 00 00 00 00	 push	 OFFSET ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A ; CGraphicBase::ms_vtPickRayDir
  000da	68 00 00 00 00	 push	 OFFSET ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A ; CGraphicBase::ms_vtPickRayOrig
  000df	e8 00 00 00 00	 call	 ?IntersectTriangle@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@0000PAM11@Z ; CGraphicCollisionObject::IntersectTriangle
  000e4	84 c0		 test	 al, al
  000e6	75 1e		 jne	 SHORT $LN25@GetCursorX

; 534  : 
; 535  : 	static const WORD sc_awFillRectIndices[6] = { 0, 2, 1, 2, 3, 1, };
; 536  : 
; 537  : 	float u, v, t;
; 538  : 	for (int i = 0; i < 2; ++i)

  000e8	83 c6 06	 add	 esi, 6
  000eb	81 fe 0e 00 00
	00		 cmp	 esi, OFFSET ?sc_awFillRectIndices@?1??GetCursorXYPosition@CScreen@@QAE_NPAM0@Z@4QBGB+14
  000f1	7c b1		 jl	 SHORT $LL4@GetCursorX

; 548  : 			return true;
; 549  : 		}
; 550  : 	}
; 551  : 	return false;
; 552  : }

  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	5b		 pop	 ebx
  000f6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f9	33 cd		 xor	 ecx, ebp
  000fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c2 08 00	 ret	 8
$LN25@GetCursorX:

; 541  : 							 posVertices[sc_awFillRectIndices[i*3+0]],
; 542  : 							 posVertices[sc_awFillRectIndices[i*3+1]],
; 543  : 							 posVertices[sc_awFillRectIndices[i*3+2]],
; 544  : 							 &u, &v, &t))
; 545  : 		{
; 546  : 			*px = ms_vtPickRayOrig.x + ms_vtPickRayDir.x * t;

  00106	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _t$[ebp]

; 547  : 			*py = ms_vtPickRayOrig.y + ms_vtPickRayDir.y * t;

  0010b	8b 45 c4	 mov	 eax, DWORD PTR _py$GSCopy$1$[ebp]
  0010e	0f 28 c1	 movaps	 xmm0, xmm1
  00111	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A

; 548  : 			return true;
; 549  : 		}
; 550  : 	}
; 551  : 	return false;
; 552  : }

  00119	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A
  00126	33 cd		 xor	 ecx, ebp
  00128	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  0012c	f3 0f 59 0d 04
	00 00 00	 mulss	 xmm1, DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A+4
  00134	5b		 pop	 ebx
  00135	f3 0f 58 0d 04
	00 00 00	 addss	 xmm1, DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A+4
  0013d	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00141	b0 01		 mov	 al, 1
  00143	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 08 00	 ret	 8
?GetCursorXYPosition@CScreen@@QAE_NPAM0@Z ENDP		; CScreen::GetCursorXYPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?GetCursorPosition@CScreen@@QAE_NPAM00@Z
_TEXT	SEGMENT
_px$ = 8						; size = 4
_py$ = 12						; size = 4
_pz$ = 16						; size = 4
?GetCursorPosition@CScreen@@QAE_NPAM00@Z PROC		; CScreen::GetCursorPosition, COMDAT
; _this$ = ecx

; 518  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 519  : 	if (!GetCursorXYPosition(px, py)) return false;

  00004	ff 75 0c	 push	 DWORD PTR _py$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _px$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetCursorXYPosition@CScreen@@QAE_NPAM0@Z ; CScreen::GetCursorXYPosition
  00011	84 c0		 test	 al, al
  00013	74 14		 je	 SHORT $LN5@GetCursorP

; 520  : 	if (!GetCursorZPosition(pz)) return false;

  00015	ff 75 10	 push	 DWORD PTR _pz$[ebp]
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?GetCursorZPosition@CScreen@@QAE_NPAM@Z ; CScreen::GetCursorZPosition
  0001f	84 c0		 test	 al, al
  00021	5e		 pop	 esi
  00022	0f 95 c0	 setne	 al

; 521  : 
; 522  : 	return true;
; 523  : }

  00025	5d		 pop	 ebp
  00026	c2 0c 00	 ret	 12			; 0000000cH
$LN5@GetCursorP:

; 520  : 	if (!GetCursorZPosition(pz)) return false;

  00029	32 c0		 xor	 al, al
  0002b	5e		 pop	 esi

; 521  : 
; 522  : 	return true;
; 523  : }

  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
?GetCursorPosition@CScreen@@QAE_NPAM00@Z ENDP		; CScreen::GetCursorPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?SetCursorPosition@CScreen@@QAEXHHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
tv625 = 8						; size = 4
_y$ = 12						; size = 4
_hres$ = 16						; size = 4
tv622 = 16						; size = 4
_vres$ = 20						; size = 4
?SetCursorPosition@CScreen@@QAEXHHHH@Z PROC		; CScreen::SetCursorPosition, COMDAT
; _this$ = ecx

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	66 0f 6e 7d 08	 movd	 xmm7, DWORD PTR _x$[ebp]
  00008	66 0f 6e 45 10	 movd	 xmm0, DWORD PTR _hres$[ebp]
  0000d	66 0f 6e 6d 0c	 movd	 xmm5, DWORD PTR _y$[ebp]

; 490  : 	v.x = -(((2.0f * x) / hres) - 1) / ms_matProj._11;

  00012	0f 5b c0	 cvtdq2ps xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00015	68 18 00 00 00	 push	 OFFSET ?ms_Ray@CGraphicBase@@1VCRay@@A+24
  0001a	68 18 00 00 00	 push	 OFFSET ?ms_Ray@CGraphicBase@@1VCRay@@A+24
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 490  : 	v.x = -(((2.0f * x) / hres) - 1) / ms_matProj._11;

  0001f	0f 5b ff	 cvtdq2ps xmm7, xmm7

; 491  : 	v.y = (((2.0f * y) / vres) - 1) / ms_matProj._22;

  00022	0f 5b ed	 cvtdq2ps xmm5, xmm5
  00025	f3 0f 58 ff	 addss	 xmm7, xmm7
  00029	f3 0f 58 ed	 addss	 xmm5, xmm5

; 492  : 	v.z = 1.0f;
; 493  : 
; 494  :     D3DXMATRIX matViewInverse=ms_matInverseView;

  0002d	0f 10 1d 00 00
	00 00		 movups	 xmm3, XMMWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A
  00034	0f 10 15 10 00
	00 00		 movups	 xmm2, XMMWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+16
  0003b	f3 0f 5e f8	 divss	 xmm7, xmm0
  0003f	66 0f 6e 45 14	 movd	 xmm0, DWORD PTR _vres$[ebp]
  00044	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00047	f3 0f 5c 3d 00
	00 00 00	 subss	 xmm7, DWORD PTR __real@3f800000
  0004f	f3 0f 5e e8	 divss	 xmm5, xmm0
  00053	0f 57 3d 00 00
	00 00		 xorps	 xmm7, DWORD PTR __xmm@80000000800000008000000080000000
  0005a	f3 0f 5c 2d 00
	00 00 00	 subss	 xmm5, DWORD PTR __real@3f800000
  00062	f3 0f 5e 3d 00
	00 00 00	 divss	 xmm7, DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A
  0006a	f3 0f 5e 2d 14
	00 00 00	 divss	 xmm5, DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+20
  00072	0f 10 25 20 00
	00 00		 movups	 xmm4, XMMWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+32
  00079	0f 28 cd	 movaps	 xmm1, xmm5
  0007c	f3 0f 11 6d 08	 movss	 DWORD PTR tv625[ebp], xmm5
  00081	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 495  :     //D3DXMatrixInverse(&matViewInverse, NULL, &ms_matView);
; 496  : 
; 497  :     ms_vtPickRayDir.x = v.x * matViewInverse._11 +

  00085	0f 28 c7	 movaps	 xmm0, xmm7
  00088	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0008c	0f 10 35 30 00
	00 00		 movups	 xmm6, XMMWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+48
  00093	f3 0f 58 c8	 addss	 xmm1, xmm0
  00097	0f 28 c2	 movaps	 xmm0, xmm2
  0009a	0f c6 c2 55	 shufps	 xmm0, xmm2, 85		; 00000055H
  0009e	f3 0f 59 e8	 mulss	 xmm5, xmm0

; 498  : 						v.y * matViewInverse._21 +
; 499  : 						v.z * matViewInverse._31;
; 500  : 
; 501  :     ms_vtPickRayDir.y = v.x * matViewInverse._12 +

  000a2	0f 28 c3	 movaps	 xmm0, xmm3
  000a5	0f c6 c3 55	 shufps	 xmm0, xmm3, 85		; 00000055H
  000a9	f3 0f 58 cc	 addss	 xmm1, xmm4
  000ad	0f c6 d2 aa	 shufps	 xmm2, xmm2, 170		; 000000aaH

; 505  :     ms_vtPickRayDir.z = v.x * matViewInverse._13 +

  000b1	0f c6 db aa	 shufps	 xmm3, xmm3, 170		; 000000aaH
  000b5	f3 0f 11 4d 10	 movss	 DWORD PTR tv622[ebp], xmm1
  000ba	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A, xmm1
  000c2	0f 28 cf	 movaps	 xmm1, xmm7
  000c5	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000c9	0f 28 c4	 movaps	 xmm0, xmm4
  000cc	0f c6 c4 55	 shufps	 xmm0, xmm4, 85		; 00000055H
  000d0	f3 0f 59 fb	 mulss	 xmm7, xmm3
  000d4	f3 0f 58 e9	 addss	 xmm5, xmm1
  000d8	0f c6 e4 aa	 shufps	 xmm4, xmm4, 170		; 000000aaH

; 506  : 						v.y * matViewInverse._23 +
; 507  : 						v.z * matViewInverse._33;
; 508  : 
; 509  :     ms_vtPickRayOrig.x = matViewInverse._41;
; 510  :     ms_vtPickRayOrig.y = matViewInverse._42;

  000dc	0f 28 ce	 movaps	 xmm1, xmm6
  000df	0f c6 ce 55	 shufps	 xmm1, xmm6, 85		; 00000055H
  000e3	f3 0f 58 e8	 addss	 xmm5, xmm0
  000e7	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv625[ebp]
  000ec	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000f0	0f 28 d0	 movaps	 xmm2, xmm0
  000f3	f3 0f 11 2d 04
	00 00 00	 movss	 DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A+4, xmm5
  000fb	f3 0f 58 d7	 addss	 xmm2, xmm7

; 511  :     ms_vtPickRayOrig.z = matViewInverse._43;

  000ff	0f 28 c6	 movaps	 xmm0, xmm6
  00102	0f c6 c6 aa	 shufps	 xmm0, xmm6, 170		; 000000aaH
  00106	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A+8, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 22   : 			m_v3Start = v3Start;

  0010e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR tv622[ebp]
  00113	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A+8
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 505  :     ms_vtPickRayDir.z = v.x * matViewInverse._13 +

  00118	f3 0f 58 d4	 addss	 xmm2, xmm4
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 22   : 			m_v3Start = v3Start;

  0011c	0f 14 f1	 unpcklps xmm6, xmm1
  0011f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00127	0f 57 c1	 xorps	 xmm0, xmm1
  0012a	66 0f d6 35 00
	00 00 00	 movq	 QWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A, xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00132	0f 57 e9	 xorps	 xmm5, xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 22   : 			m_v3Start = v3Start;

  00135	66 0f d6 35 00
	00 00 00	 movq	 QWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A, xmm6
  0013d	a3 08 00 00 00	 mov	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+8, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 505  :     ms_vtPickRayDir.z = v.x * matViewInverse._13 +

  00142	f3 0f 11 15 08
	00 00 00	 movss	 DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A+8, xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0014a	0f 57 d1	 xorps	 xmm2, xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 28   : 			m_v3Direction = v3Dir;

  0014d	f3 0f 11 05 18
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+24, xmm0
  00155	f3 0f 11 2d 1c
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+28, xmm5
  0015d	f3 0f 11 15 20
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+32, xmm2

; 29   : 			D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00165	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 			m_fRayRange = fRayRange;

  0016a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@47480000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00172	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+24
  0017a	f3 0f 59 c1	 mulss	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 30   : 			m_fRayRange = fRayRange;

  0017e	c7 05 24 00 00
	00 00 00 48 47	 mov	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+36, 1195900928 ; 47480000H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00188	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00190	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+12, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00198	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+28
  001a0	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  001a4	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+4
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  001ac	f3 0f 11 05 10
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+16, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001b4	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+32
  001bc	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  001c0	f3 0f 58 05 08
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+8
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 31   : 			m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  001c8	f3 0f 11 05 14
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+20, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 515  : }

  001d0	5d		 pop	 ebp
  001d1	c2 10 00	 ret	 16			; 00000010H
?SetCursorPosition@CScreen@@QAEXHHHH@Z ENDP		; CScreen::SetCursorPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?SetClearStencil@CScreen@@QAEXK@Z
_TEXT	SEGMENT
_stencil$ = 8						; size = 4
?SetClearStencil@CScreen@@QAEXK@Z PROC			; CScreen::SetClearStencil, COMDAT
; _this$ = ecx

; 610  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 611  : 	ms_clearStencil = stencil;

  00003	8b 45 08	 mov	 eax, DWORD PTR _stencil$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?ms_clearStencil@CScreen@@1KA, eax ; CScreen::ms_clearStencil

; 612  : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?SetClearStencil@CScreen@@QAEXK@Z ENDP			; CScreen::SetClearStencil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?SetClearDepth@CScreen@@QAEXM@Z
_TEXT	SEGMENT
_depth$ = 8						; size = 4
?SetClearDepth@CScreen@@QAEXM@Z PROC			; CScreen::SetClearDepth, COMDAT
; _this$ = ecx

; 605  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 606  : 	ms_clearDepth = depth;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _depth$[ebp]
  00008	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ms_clearDepth@CScreen@@1MA, xmm0

; 607  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?SetClearDepth@CScreen@@QAEXM@Z ENDP			; CScreen::SetClearDepth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?SetClearColor@CScreen@@QAEXMMMM@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?SetClearColor@CScreen@@QAEXMMMM@Z PROC			; CScreen::SetClearColor, COMDAT
; _this$ = ecx

; 600  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 601  : 	ms_clearColor = GetColor(r, g, b, a);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _a$[ebp]
  00008	83 ec 10	 sub	 esp, 16			; 00000010H
  0000b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00011	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _b$[ebp]
  00016	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00021	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00027	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _r$[ebp]
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	e8 00 00 00 00	 call	 ?GetColor@CGraphicBase@@QAEKMMMM@Z ; CGraphicBase::GetColor
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?ms_clearColor@CScreen@@1KA, eax ; CScreen::ms_clearColor

; 602  : }

  0003b	5d		 pop	 ebp
  0003c	c2 10 00	 ret	 16			; 00000010H
?SetClearColor@CScreen@@QAEXMMMM@Z ENDP			; CScreen::SetClearColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?SetDiffuseColor@CScreen@@QAEXMMMM@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?SetDiffuseColor@CScreen@@QAEXMMMM@Z PROC		; CScreen::SetDiffuseColor, COMDAT
; _this$ = ecx

; 595  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 596  : 	ms_diffuseColor = GetColor(r, g, b, a);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _a$[ebp]
  00008	83 ec 10	 sub	 esp, 16			; 00000010H
  0000b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00011	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _b$[ebp]
  00016	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00021	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00027	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _r$[ebp]
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	e8 00 00 00 00	 call	 ?GetColor@CGraphicBase@@QAEKMMMM@Z ; CGraphicBase::GetColor
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?ms_diffuseColor@CScreen@@1KA, eax ; CScreen::ms_diffuseColor

; 597  : }

  0003b	5d		 pop	 ebp
  0003c	c2 10 00	 ret	 16			; 00000010H
?SetDiffuseColor@CScreen@@QAEXMMMM@Z ENDP		; CScreen::SetDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?SetDiffuseColor@CScreen@@QAEXK@Z
_TEXT	SEGMENT
_diffuseColor$ = 8					; size = 4
?SetDiffuseColor@CScreen@@QAEXK@Z PROC			; CScreen::SetDiffuseColor, COMDAT
; _this$ = ecx

; 590  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 591  : 	ms_diffuseColor = diffuseColor;

  00003	8b 45 08	 mov	 eax, DWORD PTR _diffuseColor$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?ms_diffuseColor@CScreen@@1KA, eax ; CScreen::ms_diffuseColor

; 592  : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?SetDiffuseColor@CScreen@@QAEXK@Z ENDP			; CScreen::SetDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?SetAddColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z
_TEXT	SEGMENT
_rColor$ = 8						; size = 4
_dwR$1$ = 8						; size = 4
?SetAddColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z PROC ; CScreen::SetAddColorOperation, COMDAT
; _this$ = ecx

; 865  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00003	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  0000b	0f 57 c9	 xorps	 xmm1, xmm1
  0000e	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 865  : {

  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00019	8b 7d 08	 mov	 edi, DWORD PTR _rColor$[ebp]
  0001c	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00020	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00027	72 09		 jb	 SHORT $LN7@SetAddColo
  00029	c7 45 08 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  00030	eb 31		 jmp	 SHORT $LN6@SetAddColo
$LN7@SetAddColo:
  00032	0f 2f c8	 comiss	 xmm1, xmm0
  00035	72 09		 jb	 SHORT $LN5@SetAddColo
  00037	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  0003e	eb 23		 jmp	 SHORT $LN6@SetAddColo
$LN5@SetAddColo:
  00040	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00044	f3 0f 58 c4	 addss	 xmm0, xmm4
  00048	e8 00 00 00 00	 call	 __ftol3
  0004d	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00055	0f 57 c9	 xorps	 xmm1, xmm1
  00058	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  00060	89 45 08	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN6@SetAddColo:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00063	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00068	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0006f	72 07		 jb	 SHORT $LN11@SetAddColo
  00071	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00076	eb 18		 jmp	 SHORT $LN10@SetAddColo
$LN11@SetAddColo:
  00078	0f 2f c8	 comiss	 xmm1, xmm0
  0007b	72 04		 jb	 SHORT $LN9@SetAddColo
  0007d	33 db		 xor	 ebx, ebx
  0007f	eb 0f		 jmp	 SHORT $LN10@SetAddColo
$LN9@SetAddColo:
  00081	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00085	f3 0f 58 c4	 addss	 xmm0, xmm4
  00089	e8 00 00 00 00	 call	 __ftol3
  0008e	8b d8		 mov	 ebx, eax
$LN10@SetAddColo:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  00090	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00095	0f 57 c9	 xorps	 xmm1, xmm1
  00098	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0009f	72 07		 jb	 SHORT $LN15@SetAddColo
  000a1	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  000a6	eb 23		 jmp	 SHORT $LN14@SetAddColo
$LN15@SetAddColo:
  000a8	0f 2f c8	 comiss	 xmm1, xmm0
  000ab	72 04		 jb	 SHORT $LN13@SetAddColo
  000ad	33 f6		 xor	 esi, esi
  000af	eb 1a		 jmp	 SHORT $LN14@SetAddColo
$LN13@SetAddColo:
  000b1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000b9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000c1	e8 00 00 00 00	 call	 __ftol3
  000c6	8b f0		 mov	 esi, eax
  000c8	0f 57 c9	 xorps	 xmm1, xmm1
$LN14@SetAddColo:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  000cb	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  000d0	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000d7	72 07		 jb	 SHORT $LN19@SetAddColo
  000d9	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000de	eb 1e		 jmp	 SHORT $LN18@SetAddColo
$LN19@SetAddColo:
  000e0	0f 2f c8	 comiss	 xmm1, xmm0
  000e3	72 04		 jb	 SHORT $LN17@SetAddColo
  000e5	33 c0		 xor	 eax, eax
  000e7	eb 15		 jmp	 SHORT $LN18@SetAddColo
$LN17@SetAddColo:
  000e9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000f1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000f9	e8 00 00 00 00	 call	 __ftol3
$LN18@SetAddColo:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 866  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, rColor);

  000fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00104	c1 e0 08	 shl	 eax, 8
  00107	0b 45 08	 or	 eax, DWORD PTR _dwR$1$[ebp]
  0010a	c1 e0 08	 shl	 eax, 8
  0010d	0b c3		 or	 eax, ebx
  0010f	c1 e0 08	 shl	 eax, 8
  00112	0b c6		 or	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 866  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, rColor);

  00114	50		 push	 eax
  00115	6a 3c		 push	 60			; 0000003cH
  00117	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 867  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  0011c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00122	6a 02		 push	 2
  00124	6a 02		 push	 2
  00126	6a 00		 push	 0
  00128	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 868  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_TFACTOR);

  0012d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00133	6a 03		 push	 3
  00135	6a 03		 push	 3
  00137	6a 00		 push	 0
  00139	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 869  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_ADD);

  0013e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00144	6a 07		 push	 7
  00146	6a 01		 push	 1
  00148	6a 00		 push	 0
  0014a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  0014f	5f		 pop	 edi
  00150	5e		 pop	 esi
  00151	5b		 pop	 ebx

; 870  : }

  00152	5d		 pop	 ebp
  00153	c2 04 00	 ret	 4
?SetAddColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z ENDP ; CScreen::SetAddColorOperation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?SetOneColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z
_TEXT	SEGMENT
_rColor$ = 8						; size = 4
?SetOneColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z PROC ; CScreen::SetOneColorOperation, COMDAT
; _this$ = ecx

; 855  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 856  : 	STATEMANAGER.SetTexture(0, NULL);

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 857  : 	STATEMANAGER.SetTexture(1, NULL);

  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001b	6a 00		 push	 0
  0001d	6a 01		 push	 1
  0001f	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00024	8b 75 08	 mov	 esi, DWORD PTR _rColor$[ebp]
  00027	0f 57 c9	 xorps	 xmm1, xmm1
  0002a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00032	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  0003a	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0003e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00045	72 07		 jb	 SHORT $LN11@SetOneColo
  00047	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  0004c	eb 2b		 jmp	 SHORT $LN10@SetOneColo
$LN11@SetOneColo:
  0004e	0f 2f c8	 comiss	 xmm1, xmm0
  00051	72 04		 jb	 SHORT $LN9@SetOneColo
  00053	33 db		 xor	 ebx, ebx
  00055	eb 22		 jmp	 SHORT $LN10@SetOneColo
$LN9@SetOneColo:
  00057	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0005b	f3 0f 58 c4	 addss	 xmm0, xmm4
  0005f	e8 00 00 00 00	 call	 __ftol3
  00064	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  0006c	8b d8		 mov	 ebx, eax
  0006e	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  00076	0f 57 c9	 xorps	 xmm1, xmm1
$LN10@SetOneColo:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00079	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0007e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00085	72 07		 jb	 SHORT $LN15@SetOneColo
  00087	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0008c	eb 18		 jmp	 SHORT $LN14@SetOneColo
$LN15@SetOneColo:
  0008e	0f 2f c8	 comiss	 xmm1, xmm0
  00091	72 04		 jb	 SHORT $LN13@SetOneColo
  00093	33 ff		 xor	 edi, edi
  00095	eb 0f		 jmp	 SHORT $LN14@SetOneColo
$LN13@SetOneColo:
  00097	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0009b	f3 0f 58 c4	 addss	 xmm0, xmm4
  0009f	e8 00 00 00 00	 call	 __ftol3
  000a4	8b f8		 mov	 edi, eax
$LN14@SetOneColo:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  000a6	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000ab	0f 57 c9	 xorps	 xmm1, xmm1
  000ae	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000b5	72 07		 jb	 SHORT $LN19@SetOneColo
  000b7	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  000bc	eb 23		 jmp	 SHORT $LN18@SetOneColo
$LN19@SetOneColo:
  000be	0f 2f c8	 comiss	 xmm1, xmm0
  000c1	72 04		 jb	 SHORT $LN17@SetOneColo
  000c3	33 f6		 xor	 esi, esi
  000c5	eb 1a		 jmp	 SHORT $LN18@SetOneColo
$LN17@SetOneColo:
  000c7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000cf	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000d7	e8 00 00 00 00	 call	 __ftol3
  000dc	8b f0		 mov	 esi, eax
  000de	0f 57 c9	 xorps	 xmm1, xmm1
$LN18@SetOneColo:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  000e1	8b 45 08	 mov	 eax, DWORD PTR _rColor$[ebp]
  000e4	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  000e9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000f0	72 07		 jb	 SHORT $LN23@SetOneColo
  000f2	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000f7	eb 1e		 jmp	 SHORT $LN22@SetOneColo
$LN23@SetOneColo:
  000f9	0f 2f c8	 comiss	 xmm1, xmm0
  000fc	72 04		 jb	 SHORT $LN21@SetOneColo
  000fe	33 c0		 xor	 eax, eax
  00100	eb 15		 jmp	 SHORT $LN22@SetOneColo
$LN21@SetOneColo:
  00102	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0010a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00112	e8 00 00 00 00	 call	 __ftol3
$LN22@SetOneColo:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 859  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, rColor);

  00117	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0011d	c1 e0 08	 shl	 eax, 8
  00120	0b c3		 or	 eax, ebx
  00122	c1 e0 08	 shl	 eax, 8
  00125	0b c7		 or	 eax, edi
  00127	c1 e0 08	 shl	 eax, 8
  0012a	0b c6		 or	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 859  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, rColor);

  0012c	50		 push	 eax
  0012d	6a 3c		 push	 60			; 0000003cH
  0012f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 860  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TFACTOR);

  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0013a	6a 03		 push	 3
  0013c	6a 02		 push	 2
  0013e	6a 00		 push	 0
  00140	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 861  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);

  00145	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0014b	6a 02		 push	 2
  0014d	6a 01		 push	 1
  0014f	6a 00		 push	 0
  00151	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx

; 862  : }

  00159	5d		 pop	 ebp
  0015a	c2 04 00	 ret	 4
?SetOneColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z ENDP ; CScreen::SetOneColorOperation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?SetBlendOperation@CScreen@@QAEXXZ
_TEXT	SEGMENT
?SetBlendOperation@CScreen@@QAEXXZ PROC			; CScreen::SetBlendOperation, COMDAT
; _this$ = ecx

; 843  : 	STATEMANAGER.SetTexture(0, NULL);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 844  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00015	6a 02		 push	 2
  00017	6a 02		 push	 2
  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 845  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_CURRENT);

  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00026	6a 01		 push	 1
  00028	6a 03		 push	 3
  0002a	6a 00		 push	 0
  0002c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 846  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00037	6a 04		 push	 4
  00039	6a 01		 push	 1
  0003b	6a 00		 push	 0
  0003d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 847  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00048	6a 02		 push	 2
  0004a	6a 05		 push	 5
  0004c	6a 00		 push	 0
  0004e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 848  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2,	D3DTA_CURRENT);

  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00059	6a 01		 push	 1
  0005b	6a 06		 push	 6
  0005d	6a 00		 push	 0
  0005f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 849  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  00064	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0006a	6a 04		 push	 4
  0006c	6a 04		 push	 4
  0006e	6a 00		 push	 0
  00070	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 850  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP,	D3DTOP_DISABLE);

  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0007b	6a 01		 push	 1
  0007d	6a 01		 push	 1
  0007f	6a 01		 push	 1
  00081	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 851  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,	D3DTOP_DISABLE);

  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0008c	6a 01		 push	 1
  0008e	6a 04		 push	 4
  00090	6a 01		 push	 1
  00092	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 852  : }

  00097	c3		 ret	 0
?SetBlendOperation@CScreen@@QAEXXZ ENDP			; CScreen::SetBlendOperation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?SetDiffuseOperation@CScreen@@QAEXXZ
_TEXT	SEGMENT
?SetDiffuseOperation@CScreen@@QAEXXZ PROC		; CScreen::SetDiffuseOperation, COMDAT
; _this$ = ecx

; 832  : 	STATEMANAGER.SetTexture(0, NULL);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 833  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00015	6a 02		 push	 2
  00017	6a 02		 push	 2
  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 834  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_DIFFUSE);

  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00026	6a 00		 push	 0
  00028	6a 03		 push	 3
  0002a	6a 00		 push	 0
  0002c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 835  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00037	6a 04		 push	 4
  00039	6a 01		 push	 1
  0003b	6a 00		 push	 0
  0003d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 836  : 
; 837  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP,	D3DTOP_DISABLE);

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00048	6a 01		 push	 1
  0004a	6a 01		 push	 1
  0004c	6a 01		 push	 1
  0004e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 838  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,	D3DTOP_DISABLE);

  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00059	6a 01		 push	 1
  0005b	6a 04		 push	 4
  0005d	6a 01		 push	 1
  0005f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 839  : }

  00064	c3		 ret	 0
?SetDiffuseOperation@CScreen@@QAEXXZ ENDP		; CScreen::SetDiffuseOperation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?SetColorOperation@CScreen@@QAEXXZ
_TEXT	SEGMENT
?SetColorOperation@CScreen@@QAEXXZ PROC			; CScreen::SetColorOperation, COMDAT
; _this$ = ecx

; 822  : 	STATEMANAGER.SetTexture(0, NULL);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 823  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_DIFFUSE);

  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00015	6a 00		 push	 0
  00017	6a 02		 push	 2
  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 824  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_SELECTARG1);

  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00026	6a 02		 push	 2
  00028	6a 01		 push	 1
  0002a	6a 00		 push	 0
  0002c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 825  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_DISABLE);

  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00037	6a 01		 push	 1
  00039	6a 04		 push	 4
  0003b	6a 00		 push	 0
  0003d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 826  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP,	D3DTOP_DISABLE);

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00048	6a 01		 push	 1
  0004a	6a 01		 push	 1
  0004c	6a 01		 push	 1
  0004e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 827  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,	D3DTOP_DISABLE);

  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00059	6a 01		 push	 1
  0005b	6a 04		 push	 4
  0005d	6a 01		 push	 1
  0005f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 828  : }

  00064	c3		 ret	 0
?SetColorOperation@CScreen@@QAEXXZ ENDP			; CScreen::SetColorOperation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderMiniMapFilter@CScreen@@QAEXMMMMHMMABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_this$1$ = -56						; size = 4
_fDelta$1$ = -52					; size = 4
tv880 = -48						; size = 4
_pts$ = -44						; size = 12
_i$1$ = -32						; size = 4
$T3 = -32						; size = 4
_fTheta$1$ = -32					; size = 4
$T4 = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_fRadius$ = 20						; size = 4
_iStep$ = 24						; size = 4
_fAngle$ = 28						; size = 4
_fRotation$ = 32					; size = 4
_rCenterOffset$ = 36					; size = 4
?RenderMiniMapFilter@CScreen@@QAEXMMMMHMMABUD3DXVECTOR3@@@Z PROC ; CScreen::RenderMiniMapFilter, COMDAT
; _this$ = ecx

; 801  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RenderMiniMapFilter@CScreen@@QAEXMMMMHMMABUD3DXVECTOR3@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d c8	 mov	 DWORD PTR _this$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002e	33 f6		 xor	 esi, esi
  00030	33 ff		 xor	 edi, edi
  00032	89 7d d4	 mov	 DWORD PTR _pts$[ebp], edi
  00035	89 75 d8	 mov	 DWORD PTR _pts$[ebp+4], esi
  00038	89 75 dc	 mov	 DWORD PTR _pts$[ebp+8], esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 803  : 	pts.reserve(iStep + 1);

  0003b	8b 45 18	 mov	 eax, DWORD PTR _iStep$[ebp]
  0003e	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  00041	83 c0 01	 add	 eax, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1710 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00044	0f 84 a1 00 00
	00		 je	 $LN91@RenderMini

; 1711 :             if (_Newcapacity > max_size()) {

  0004a	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0004f	0f 87 d4 02 00
	00		 ja	 $LN191@RenderMini
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  00055	8d 1c 40	 lea	 ebx, DWORD PTR [eax+eax*2]
  00058	c1 e3 02	 shl	 ebx, 2

; 227  :     if (_Bytes == 0) {

  0005b	85 db		 test	 ebx, ebx
  0005d	75 04		 jne	 SHORT $LN38@RenderMini

; 228  :         return nullptr;

  0005f	33 c0		 xor	 eax, eax
  00061	eb 1e		 jmp	 SHORT $LN188@RenderMini
$LN38@RenderMini:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00063	53		 push	 ebx
  00064	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0006a	72 07		 jb	 SHORT $LN39@RenderMini

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00071	eb 05		 jmp	 SHORT $LN189@RenderMini
$LN39@RenderMini:

; 136  :         return ::operator new(_Bytes);

  00073	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN189@RenderMini:

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00078	8b 7d d4	 mov	 edi, DWORD PTR _pts$[ebp]
  0007b	83 c4 04	 add	 esp, 4
  0007e	8b 75 d8	 mov	 esi, DWORD PTR _pts$[ebp+4]
$LN188@RenderMini:
  00081	50		 push	 eax
  00082	56		 push	 esi
  00083	57		 push	 edi
  00084	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
  00087	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0008c	8b 75 d4	 mov	 esi, DWORD PTR _pts$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00092	85 f6		 test	 esi, esi
  00094	74 43		 je	 SHORT $LN67@RenderMini

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00096	8b 4d dc	 mov	 ecx, DWORD PTR _pts$[ebp+8]
  00099	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0009e	2b ce		 sub	 ecx, esi
  000a0	f7 e9		 imul	 ecx
  000a2	d1 fa		 sar	 edx, 1
  000a4	8b c2		 mov	 eax, edx
  000a6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a9	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000ae	8b c6		 mov	 eax, esi
  000b0	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000b3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b9	72 14		 jb	 SHORT $LN78@RenderMini

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000bb	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  000be	83 c1 23	 add	 ecx, 35			; 00000023H
  000c1	2b c6		 sub	 eax, esi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c9	0f 87 5f 02 00
	00		 ja	 $LN165@RenderMini
$LN78@RenderMini:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000cf	51		 push	 ecx
  000d0	56		 push	 esi
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d6	83 c4 08	 add	 esp, 8
$LN67@RenderMini:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2060 :         _Myfirst = _Newvec;

  000d9	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]
  000dc	8b f8		 mov	 edi, eax

; 2061 :         _Mylast  = _Newvec + _Newsize;

  000de	8b f0		 mov	 esi, eax
  000e0	89 7d d4	 mov	 DWORD PTR _pts$[ebp], edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  000e3	03 c3		 add	 eax, ebx
  000e5	89 75 d8	 mov	 DWORD PTR _pts$[ebp+4], esi
  000e8	89 45 dc	 mov	 DWORD PTR _pts$[ebp+8], eax
$LN91@RenderMini:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 805  : 	float fDelta = D3DX_PI / 180.0f * fAngle / iStep;

  000eb	f3 0f 10 65 1c	 movss	 xmm4, DWORD PTR _fAngle$[ebp]
  000f0	0f 57 c0	 xorps	 xmm0, xmm0

; 806  : 	for (float fTheta = (fRotation - fAngle / 2.0f) * D3DX_PI / 180.0f; fTheta < (fRotation + fAngle / 2.0f) * D3DX_PI / 180.0f; fTheta += fDelta)

  000f3	f3 0f 10 5d 20	 movss	 xmm3, DWORD PTR _fRotation$[ebp]
  000f8	0f 28 cc	 movaps	 xmm1, xmm4
  000fb	f3 0f 59 25 00
	00 00 00	 mulss	 xmm4, DWORD PTR __real@3f000000
  00103	f3 0f 2a 45 18	 cvtsi2ss xmm0, DWORD PTR _iStep$[ebp]
  00108	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3c8efa35
  00110	f3 0f 5c dc	 subss	 xmm3, xmm4
  00114	f3 0f 58 65 20	 addss	 xmm4, DWORD PTR _fRotation$[ebp]
  00119	f3 0f 5e c8	 divss	 xmm1, xmm0
  0011d	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@40490fdb
  00125	f3 0f 59 25 00
	00 00 00	 mulss	 xmm4, DWORD PTR __real@40490fdb
  0012d	f3 0f 5e 1d 00
	00 00 00	 divss	 xmm3, DWORD PTR __real@43340000
  00135	f3 0f 5e 25 00
	00 00 00	 divss	 xmm4, DWORD PTR __real@43340000
  0013d	f3 0f 11 4d cc	 movss	 DWORD PTR _fDelta$1$[ebp], xmm1
  00142	0f 2f e3	 comiss	 xmm4, xmm3
  00145	f3 0f 11 5d e0	 movss	 DWORD PTR _fTheta$1$[ebp], xmm3
  0014a	f3 0f 11 65 1c	 movss	 DWORD PTR _fAngle$[ebp], xmm4
  0014f	0f 86 a0 00 00
	00		 jbe	 $LN3@RenderMini
$LL4@RenderMini:
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  00155	0f 5a c3	 cvtps2pd xmm0, xmm3
  00158	e8 00 00 00 00	 call	 __libm_sse2_cos_precise

; 798  :             return (float)sin(_X);

  0015d	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _fTheta$1$[ebp]

; 692  :             return (float)cos(_X);

  00162	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 808  : 		pts.push_back(D3DXVECTOR3(fx + fRadius * cosf(fTheta),

  00166	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _fRadius$[ebp]
  0016b	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _fx$[ebp]
  00170	f3 0f 11 45 d0	 movss	 DWORD PTR tv880[ebp], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00175	f3 0f 11 45 e4	 movss	 DWORD PTR $T4[ebp], xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  0017a	0f 5a c1	 cvtps2pd xmm0, xmm1
  0017d	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00182	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00185	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _fz$[ebp]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  0018a	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0018e	f3 0f 11 55 ec	 movss	 DWORD PTR $T4[ebp+8], xmm2
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 808  : 		pts.push_back(D3DXVECTOR3(fx + fRadius * cosf(fTheta),

  00193	f3 0f 59 4d 14	 mulss	 xmm1, DWORD PTR _fRadius$[ebp]
  00198	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fy$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0019d	f3 0f 11 4d e8	 movss	 DWORD PTR $T4[ebp+4], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  001a2	3b 75 dc	 cmp	 esi, DWORD PTR _pts$[ebp+8]
  001a5	74 1e		 je	 SHORT $LN117@RenderMini
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 506  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  001a7	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR tv880[ebp]
  001ac	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  001b0	f3 0f 11 4e 04	 movss	 DWORD PTR [esi+4], xmm1
  001b5	f3 0f 11 56 08	 movss	 DWORD PTR [esi+8], xmm2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  001ba	8b 75 d8	 mov	 esi, DWORD PTR _pts$[ebp+4]
  001bd	83 c6 0c	 add	 esi, 12			; 0000000cH
  001c0	89 75 d8	 mov	 DWORD PTR _pts$[ebp+4], esi

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  001c3	eb 10		 jmp	 SHORT $LN2@RenderMini
$LN117@RenderMini:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001c5	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  001c8	50		 push	 eax
  001c9	56		 push	 esi
  001ca	8d 4d d4	 lea	 ecx, DWORD PTR _pts$[ebp]
  001cd	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@UD3DXVECTOR3@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEPAUD3DXVECTOR3@@QAU2@$$QAU2@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Emplace_reallocate<D3DXVECTOR3>
  001d2	8b 75 d8	 mov	 esi, DWORD PTR _pts$[ebp+4]
$LN2@RenderMini:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 806  : 	for (float fTheta = (fRotation - fAngle / 2.0f) * D3DX_PI / 180.0f; fTheta < (fRotation + fAngle / 2.0f) * D3DX_PI / 180.0f; fTheta += fDelta)

  001d5	f3 0f 10 5d e0	 movss	 xmm3, DWORD PTR _fTheta$1$[ebp]
  001da	f3 0f 58 5d cc	 addss	 xmm3, DWORD PTR _fDelta$1$[ebp]
  001df	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _fAngle$[ebp]
  001e4	0f 2f c3	 comiss	 xmm0, xmm3
  001e7	f3 0f 11 5d e0	 movss	 DWORD PTR _fTheta$1$[ebp], xmm3
  001ec	0f 87 63 ff ff
	ff		 ja	 $LL4@RenderMini
  001f2	8b 7d d4	 mov	 edi, DWORD PTR _pts$[ebp]
$LN3@RenderMini:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001f5	2b f7		 sub	 esi, edi
  001f7	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001fc	f7 ee		 imul	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 813  : 	for (int i = 0; i < pts.size() - 1; ++i)

  001fe	33 c9		 xor	 ecx, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00200	d1 fa		 sar	 edx, 1
  00202	8b c2		 mov	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 813  : 	for (int i = 0; i < pts.size() - 1; ++i)

  00204	89 4d e0	 mov	 DWORD PTR _i$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00207	c1 e8 1f	 shr	 eax, 31			; 0000001fH
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 813  : 	for (int i = 0; i < pts.size() - 1; ++i)

  0020a	48		 dec	 eax
  0020b	03 c2		 add	 eax, edx
  0020d	0f 84 b5 00 00
	00		 je	 $LN6@RenderMini
  00213	8b 5d 24	 mov	 ebx, DWORD PTR _rCenterOffset$[ebp]
  00216	33 f6		 xor	 esi, esi
  00218	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL7@RenderMini:

; 814  : 	{
; 815  : 		RenderTriangle3d(pts[i].x, pts[i].y, pts[i].z, fx + rCenterOffset.x, fy + rCenterOffset.y, fz + rCenterOffset.z, pts[i + 1].x, pts[i + 1].y, pts[i + 1].z);

  00220	f3 0f 10 44 37
	14		 movss	 xmm0, DWORD PTR [edi+esi+20]
  00226	83 ec 24	 sub	 esp, 36			; 00000024H
  00229	8b 4d c8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0022c	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  00232	f3 0f 10 44 37
	10		 movss	 xmm0, DWORD PTR [edi+esi+16]
  00238	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  0023e	f3 0f 10 44 37
	0c		 movss	 xmm0, DWORD PTR [edi+esi+12]
  00244	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  0024a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0024f	f3 0f 58 43 08	 addss	 xmm0, DWORD PTR [ebx+8]
  00254	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0025a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0025f	f3 0f 58 43 04	 addss	 xmm0, DWORD PTR [ebx+4]
  00264	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0026a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0026f	f3 0f 58 03	 addss	 xmm0, DWORD PTR [ebx]
  00273	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00279	f3 0f 10 44 37
	08		 movss	 xmm0, DWORD PTR [edi+esi+8]
  0027f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00285	f3 0f 10 44 37
	04		 movss	 xmm0, DWORD PTR [edi+esi+4]
  0028b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00291	f3 0f 10 04 37	 movss	 xmm0, DWORD PTR [edi+esi]
  00296	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029b	e8 00 00 00 00	 call	 ?RenderTriangle3d@CScreen@@QAEXMMMMMMMMM@Z ; CScreen::RenderTriangle3d
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002a0	8b 4d d8	 mov	 ecx, DWORD PTR _pts$[ebp+4]
  002a3	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002a8	8b 7d d4	 mov	 edi, DWORD PTR _pts$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 813  : 	for (int i = 0; i < pts.size() - 1; ++i)

  002ab	83 c6 0c	 add	 esi, 12			; 0000000cH
  002ae	ff 45 e0	 inc	 DWORD PTR _i$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002b1	2b cf		 sub	 ecx, edi
  002b3	f7 e9		 imul	 ecx
  002b5	d1 fa		 sar	 edx, 1
  002b7	8b c2		 mov	 eax, edx
  002b9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 813  : 	for (int i = 0; i < pts.size() - 1; ++i)

  002bc	48		 dec	 eax
  002bd	03 c2		 add	 eax, edx
  002bf	39 45 e0	 cmp	 DWORD PTR _i$1$[ebp], eax
  002c2	0f 82 58 ff ff
	ff		 jb	 $LL7@RenderMini
$LN6@RenderMini:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  002c8	85 ff		 test	 edi, edi
  002ca	74 3f		 je	 SHORT $LN149@RenderMini

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  002cc	8b 4d dc	 mov	 ecx, DWORD PTR _pts$[ebp+8]
  002cf	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002d4	2b cf		 sub	 ecx, edi
  002d6	f7 e9		 imul	 ecx
  002d8	d1 fa		 sar	 edx, 1
  002da	8b c2		 mov	 eax, edx
  002dc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002df	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002e1	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  002e4	8b c7		 mov	 eax, edi
  002e6	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  002e9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002ef	72 10		 jb	 SHORT $LN168@RenderMini

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002f1	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
  002f4	83 c1 23	 add	 ecx, 35			; 00000023H
  002f7	2b c7		 sub	 eax, edi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002f9	83 c0 fc	 add	 eax, -4			; fffffffcH
  002fc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002ff	77 2d		 ja	 SHORT $LN165@RenderMini
$LN168@RenderMini:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00301	51		 push	 ecx
  00302	57		 push	 edi
  00303	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00308	83 c4 08	 add	 esp, 8
$LN149@RenderMini:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 817  : }

  0030b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0030e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00315	59		 pop	 ecx
  00316	5f		 pop	 edi
  00317	5e		 pop	 esi
  00318	5b		 pop	 ebx
  00319	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031c	33 cd		 xor	 ecx, ebp
  0031e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00323	8b e5		 mov	 esp, ebp
  00325	5d		 pop	 ebp
  00326	c2 20 00	 ret	 32			; 00000020H
$LN191@RenderMini:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1712 :                 _Xlength();

  00329	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
$LN165@RenderMini:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0032e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN187@RenderMini:
  00333	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderMiniMapFilter@CScreen@@QAEXMMMMHMMABUD3DXVECTOR3@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _pts$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RenderMiniMapFilter@CScreen@@QAEXMMMMHMMABUD3DXVECTOR3@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderMiniMapFilter@CScreen@@QAEXMMMMHMMABUD3DXVECTOR3@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderMiniMapFilter@CScreen@@QAEXMMMMHMMABUD3DXVECTOR3@@@Z ENDP ; CScreen::RenderMiniMapFilter
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderTriangle3d@CScreen@@QAEXMMMMMMMMM@Z
_TEXT	SEGMENT
_vertices$ = -76					; size = 72
__$ArrayPad$ = -4					; size = 4
_ax$ = 8						; size = 4
_ay$ = 12						; size = 4
_az$ = 16						; size = 4
_bx$ = 20						; size = 4
_by$ = 24						; size = 4
_bz$ = 28						; size = 4
_cx$ = 32						; size = 4
_cy$ = 36						; size = 4
_cz$ = 40						; size = 4
?RenderTriangle3d@CScreen@@QAEXMMMMMMMMM@Z PROC		; CScreen::RenderTriangle3d, COMDAT
; _this$ = ecx

; 781  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 782  : 	assert(ms_lpd3dDevice != NULL);
; 783  : 
; 784  : 	SPDTVertexRaw vertices[3] =
; 785  : 	{
; 786  : 		{ ax, ay, az, ms_diffuseColor, 0.0f, 0.0f },

  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _ax$[ebp]
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  0001a	f3 0f 11 45 b4	 movss	 DWORD PTR _vertices$[ebp], xmm0
  0001f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _ay$[ebp]
  00024	f3 0f 11 45 b8	 movss	 DWORD PTR _vertices$[ebp+4], xmm0
  00029	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _az$[ebp]
  0002e	f3 0f 11 45 bc	 movss	 DWORD PTR _vertices$[ebp+8], xmm0

; 787  : 		{ bx, by, bz, ms_diffuseColor, 0.0f, 0.0f },

  00033	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _bx$[ebp]
  00038	f3 0f 11 45 cc	 movss	 DWORD PTR _vertices$[ebp+24], xmm0
  0003d	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _by$[ebp]
  00042	f3 0f 11 45 d0	 movss	 DWORD PTR _vertices$[ebp+28], xmm0
  00047	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _bz$[ebp]
  0004c	f3 0f 11 45 d4	 movss	 DWORD PTR _vertices$[ebp+32], xmm0

; 788  : 		{ cx, cy, cz, ms_diffuseColor, 0.0f, 0.0f },

  00051	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00056	f3 0f 11 45 e4	 movss	 DWORD PTR _vertices$[ebp+48], xmm0
  0005b	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _cy$[ebp]
  00060	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+12], eax
  00063	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+36], eax
  00066	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+60], eax

; 789  : 	};
; 790  : 
; 791  : 	if (SetPDTStream(vertices, 3))

  00069	8d 45 b4	 lea	 eax, DWORD PTR _vertices$[ebp]
  0006c	f3 0f 11 45 e8	 movss	 DWORD PTR _vertices$[ebp+52], xmm0
  00071	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _cz$[ebp]
  00076	6a 03		 push	 3
  00078	50		 push	 eax
  00079	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
  00080	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  00087	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+40], 0
  0008e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+44], 0
  00095	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+56], xmm0
  0009a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+64], 0
  000a1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  000a8	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  000ad	83 c4 08	 add	 esp, 8
  000b0	84 c0		 test	 al, al
  000b2	74 3f		 je	 SHORT $LN2@RenderTria

; 792  : 	{
; 793  : 		STATEMANAGER.SetTexture(0, NULL);

  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ba	6a 00		 push	 0
  000bc	6a 00		 push	 0
  000be	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 794  : 		STATEMANAGER.SetTexture(1, NULL);

  000c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000c9	6a 00		 push	 0
  000cb	6a 01		 push	 1
  000cd	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 795  : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  000d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000d8	68 42 01 00 00	 push	 322			; 00000142H
  000dd	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 796  : 		STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLELIST, 0, 1);

  000e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e8	6a 01		 push	 1
  000ea	6a 00		 push	 0
  000ec	6a 04		 push	 4
  000ee	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN2@RenderTria:

; 797  : 	}
; 798  : }

  000f3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f6	33 cd		 xor	 ecx, ebp
  000f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 24 00	 ret	 36			; 00000024H
?RenderTriangle3d@CScreen@@QAEXMMMMMMMMM@Z ENDP		; CScreen::RenderTriangle3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderCylinder@CScreen@@QAEXPBUD3DXMATRIX@@MMMMMW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
_c_pmatWorld$ = 8					; size = 4
_fx$ = 12						; size = 4
_fy$ = 16						; size = 4
_fz$ = 20						; size = 4
_fRadius$ = 24						; size = 4
___formal$ = 28						; size = 4
_d3dFillMode$ = 32					; size = 4
?RenderCylinder@CScreen@@QAEXPBUD3DXMATRIX@@MMMMMW4_D3DFILLMODE@@@Z PROC ; CScreen::RenderCylinder, COMDAT
; _this$ = ecx

; 375  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 376  : 	RenderD3DXMesh(ms_lpCylinderMesh, c_pmatWorld, fx, fy, fz, fRadius, d3dFillMode);

  00003	ff 75 20	 push	 DWORD PTR _d3dFillMode$[ebp]
  00006	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fRadius$[ebp]
  0000b	83 ec 10	 sub	 esp, 16			; 00000010H
  0000e	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00014	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00019	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00024	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0002a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	ff 75 08	 push	 DWORD PTR _c_pmatWorld$[ebp]
  00037	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpCylinderMesh@CGraphicBase@@1PAUID3DXMesh@@A ; CGraphicBase::ms_lpCylinderMesh
  0003d	e8 00 00 00 00	 call	 ?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderD3DXMesh

; 377  : }

  00042	5d		 pop	 ebp
  00043	c2 1c 00	 ret	 28			; 0000001cH
?RenderCylinder@CScreen@@QAEXPBUD3DXMATRIX@@MMMMMW4_D3DFILLMODE@@@Z ENDP ; CScreen::RenderCylinder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
_c_pmatWorld$ = 8					; size = 4
_fx$ = 12						; size = 4
_fy$ = 16						; size = 4
_fz$ = 20						; size = 4
_fRadius$ = 24						; size = 4
_d3dFillMode$ = 28					; size = 4
?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z PROC ; CScreen::RenderSphere, COMDAT
; _this$ = ecx

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 371  : 	RenderD3DXMesh(ms_lpSphereMesh, c_pmatWorld, fx, fy, fz, fRadius, d3dFillMode);

  00003	ff 75 1c	 push	 DWORD PTR _d3dFillMode$[ebp]
  00006	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fRadius$[ebp]
  0000b	83 ec 10	 sub	 esp, 16			; 00000010H
  0000e	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00014	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00019	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00024	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0002a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	ff 75 08	 push	 DWORD PTR _c_pmatWorld$[ebp]
  00037	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpSphereMesh@CGraphicBase@@1PAUID3DXMesh@@A ; CGraphicBase::ms_lpSphereMesh
  0003d	e8 00 00 00 00	 call	 ?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderD3DXMesh

; 372  : }

  00042	5d		 pop	 ebp
  00043	c2 18 00	 ret	 24			; 00000018H
?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ENDP ; CScreen::RenderSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
_SetRenderingOption$ = -296				; size = 8
_lpVertexBuffer$ = -288					; size = 4
_lpIndexBuffer$ = -284					; size = 4
_d3dFillMode$GSCopy$1$ = -280				; size = 4
_lpMesh$GSCopy$1$ = -276				; size = 4
_matScaling$ = -272					; size = 64
_matTranslation$ = -208					; size = 64
$T2 = -144						; size = 64
_matWorld$ = -80					; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpMesh$ = 8						; size = 4
_c_pmatWorld$ = 12					; size = 4
_fx$ = 16						; size = 4
_fy$ = 20						; size = 4
_fz$ = 24						; size = 4
_fRadius$ = 28						; size = 4
_d3dFillMode$ = 32					; size = 4
?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z PROC ; CScreen::RenderD3DXMesh, COMDAT
; _this$ = ecx

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 344  : 	D3DXMATRIX matTranslation;
; 345  : 	D3DXMATRIX matScaling;
; 346  : 
; 347  : 	D3DXMatrixTranslation(&matTranslation, fx, fy, fz);

  0002d	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00032	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00035	8b 45 20	 mov	 eax, DWORD PTR _d3dFillMode$[ebp]
  00038	8b 7d 08	 mov	 edi, DWORD PTR _lpMesh$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _c_pmatWorld$[ebp]
  0003e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00044	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00049	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0004f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00054	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _d3dFillMode$GSCopy$1$[ebp], eax
  0005a	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _matTranslation$[ebp]
  00060	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00065	50		 push	 eax
  00066	89 bd ec fe ff
	ff		 mov	 DWORD PTR _lpMesh$GSCopy$1$[ebp], edi
  0006c	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 348  : 	D3DXMatrixScaling(&matScaling, fRadius, fRadius, fRadius);

  00071	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _fRadius$[ebp]
  00076	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _matScaling$[ebp]
  0007c	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0007f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00085	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _D3DXMatrixScaling@16
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  00096	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _matTranslation$[ebp]
  0009c	50		 push	 eax
  0009d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _matScaling$[ebp]
  000a3	50		 push	 eax
  000a4	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 351  : 	matWorld = matScaling * matTranslation;

  000b0	0f 10 85 70 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  000b7	0f 11 45 b0	 movups	 XMMWORD PTR _matWorld$[ebp], xmm0
  000bb	0f 10 45 80	 movups	 xmm0, XMMWORD PTR $T2[ebp+16]
  000bf	0f 11 45 c0	 movups	 XMMWORD PTR _matWorld$[ebp+16], xmm0
  000c3	0f 10 45 90	 movups	 xmm0, XMMWORD PTR $T2[ebp+32]
  000c7	0f 11 45 d0	 movups	 XMMWORD PTR _matWorld$[ebp+32], xmm0
  000cb	0f 10 45 a0	 movups	 xmm0, XMMWORD PTR $T2[ebp+48]
  000cf	0f 11 45 e0	 movups	 XMMWORD PTR _matWorld$[ebp+48], xmm0

; 352  : 
; 353  : 	if (c_pmatWorld)

  000d3	85 f6		 test	 esi, esi
  000d5	74 0b		 je	 SHORT $LN2@RenderD3DX
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 512  :     D3DXMatrixMultiply(this, this, &mat);

  000d7	56		 push	 esi
  000d8	8d 45 b0	 lea	 eax, DWORD PTR _matWorld$[ebp]
  000db	50		 push	 eax
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
$LN2@RenderD3DX:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 317  : 	{

  000e2	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _SetRenderingOption$[ebp]
  000e8	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen

; 318  : 		ms_lpd3dDevice->GetVertexShader(&m_dwVS);

  000ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000f3	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _SetRenderingOption$[ebp+4]
  000f9	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _SetRenderingOption$[ebp], OFFSET ??_7CD3DXMeshRenderingOption@@6B@
  00103	52		 push	 edx
  00104	51		 push	 ecx
  00105	8b 01		 mov	 eax, DWORD PTR [ecx]
  00107	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0010e	ff 90 34 01 00
	00		 call	 DWORD PTR [eax+308]

; 319  : 
; 320  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TFACTOR);

  00114	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0011a	6a 03		 push	 3
  0011c	6a 02		 push	 2
  0011e	6a 00		 push	 0
  00120	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 321  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);

  00125	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012b	6a 02		 push	 2
  0012d	6a 01		 push	 1
  0012f	6a 00		 push	 0
  00131	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 322  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0013c	6a 01		 push	 1
  0013e	6a 04		 push	 4
  00140	6a 00		 push	 0
  00142	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 323  : 		STATEMANAGER.SetRenderState(D3DRS_FILLMODE, d3dFillMode);

  00147	ff b5 e8 fe ff
	ff		 push	 DWORD PTR _d3dFillMode$GSCopy$1$[ebp]
  0014d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00153	6a 08		 push	 8
  00155	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 324  : 		STATEMANAGER.SaveTransform(D3DTS_WORLD, &c_rmatWorld);

  0015a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00160	8d 45 b0	 lea	 eax, DWORD PTR _matWorld$[ebp]
  00163	50		 push	 eax
  00164	68 00 01 00 00	 push	 256			; 00000100H
  00169	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 325  : 
; 326  : 		STATEMANAGER.SetTexture(0, NULL);

  0016e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00174	6a 00		 push	 0
  00176	6a 00		 push	 0
  00178	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 327  : 		STATEMANAGER.SetTexture(1, NULL);

  0017d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00183	6a 00		 push	 0
  00185	6a 01		 push	 1
  00187	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 354  : 	{
; 355  : 		matWorld *= *c_pmatWorld;
; 356  : 	}
; 357  : 
; 358  : 	CD3DXMeshRenderingOption SetRenderingOption(d3dFillMode, matWorld);
; 359  : 	LPDIRECT3DINDEXBUFFER8 lpIndexBuffer;
; 360  : 	LPDIRECT3DVERTEXBUFFER8 lpVertexBuffer;
; 361  : 	lpMesh->GetIndexBuffer(&lpIndexBuffer);

  0018c	8b 07		 mov	 eax, DWORD PTR [edi]
  0018e	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _lpIndexBuffer$[ebp]
  00194	51		 push	 ecx
  00195	57		 push	 edi
  00196	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0019d	ff 50 34	 call	 DWORD PTR [eax+52]

; 362  : 	lpMesh->GetVertexBuffer(&lpVertexBuffer);

  001a0	8b 07		 mov	 eax, DWORD PTR [edi]
  001a2	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _lpVertexBuffer$[ebp]
  001a8	51		 push	 ecx
  001a9	57		 push	 edi
  001aa	ff 50 30	 call	 DWORD PTR [eax+48]

; 363  : 	STATEMANAGER.SetVertexShader(lpMesh->GetFVF());

  001ad	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  001af	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 363  : 	STATEMANAGER.SetVertexShader(lpMesh->GetFVF());

  001b5	57		 push	 edi
  001b6	ff 50 18	 call	 DWORD PTR [eax+24]
  001b9	50		 push	 eax
  001ba	8b ce		 mov	 ecx, esi
  001bc	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 364  : 	STATEMANAGER.SetIndices(lpIndexBuffer, 0);

  001c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c7	6a 00		 push	 0
  001c9	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _lpIndexBuffer$[ebp]
  001cf	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices

; 365  : 	STATEMANAGER.SetStreamSource(0, lpVertexBuffer, 24);

  001d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001da	6a 18		 push	 24			; 00000018H
  001dc	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _lpVertexBuffer$[ebp]
  001e2	6a 00		 push	 0
  001e4	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 366  : 	STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, lpMesh->GetNumVertices(), 0, lpMesh->GetNumFaces());

  001e9	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _lpMesh$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  001ef	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 366  : 	STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, lpMesh->GetNumVertices(), 0, lpMesh->GetNumFaces());

  001f5	51		 push	 ecx
  001f6	8b 01		 mov	 eax, DWORD PTR [ecx]
  001f8	ff 50 10	 call	 DWORD PTR [eax+16]
  001fb	8b f0		 mov	 esi, eax
  001fd	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _lpMesh$GSCopy$1$[ebp]
  00203	50		 push	 eax
  00204	8b 10		 mov	 edx, DWORD PTR [eax]
  00206	ff 52 14	 call	 DWORD PTR [edx+20]
  00209	56		 push	 esi
  0020a	6a 00		 push	 0
  0020c	50		 push	 eax
  0020d	6a 00		 push	 0
  0020f	6a 04		 push	 4
  00211	8b cf		 mov	 ecx, edi
  00213	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive

; 367  : }

  00218	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _SetRenderingOption$[ebp]
  0021e	e8 00 00 00 00	 call	 ??1CD3DXMeshRenderingOption@@UAE@XZ ; CD3DXMeshRenderingOption::~CD3DXMeshRenderingOption
  00223	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00226	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022d	59		 pop	 ecx
  0022e	5f		 pop	 edi
  0022f	5e		 pop	 esi
  00230	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00233	33 cd		 xor	 ecx, ebp
  00235	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z$1:
  00000	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _SetRenderingOption$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__unwindfunclet$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z$0:
  0000b	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _SetRenderingOption$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CD3DXMeshRenderingOption@@UAE@XZ ; CD3DXMeshRenderingOption::~CD3DXMeshRenderingOption
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a d8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-296]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ENDP ; CScreen::RenderD3DXMesh
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?DrawGrid@CScreen@@QAEXMMMMMMMMM@Z
_TEXT	SEGMENT
_xMin$ = 8						; size = 4
_yMin$ = 12						; size = 4
_xMax$ = 16						; size = 4
_yMax$ = 20						; size = 4
_xmajorStep$ = 24					; size = 4
_ymajorStep$ = 28					; size = 4
_x$1$ = 28						; size = 4
_xminorStep$ = 32					; size = 4
_x$2$ = 32						; size = 4
_yminorStep$ = 36					; size = 4
_y$1$ = 36						; size = 4
_y$2$ = 36						; size = 4
_zPos$ = 40						; size = 4
?DrawGrid@CScreen@@QAEXMMMMMMMMM@Z PROC			; CScreen::DrawGrid, COMDAT
; _this$ = ecx

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 457  : 	xMin*=xminorStep;

  00003	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _xminorStep$[ebp]
  00008	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]

; 458  : 	xMax*=xminorStep;
; 459  : 	yMin*=yminorStep;

  0000d	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _yMin$[ebp]
  00012	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00016	56		 push	 esi

; 460  : 	yMax*=yminorStep;
; 461  : 	xmajorStep*=xminorStep;
; 462  : 	ymajorStep*=yminorStep;
; 463  : 
; 464  : 	float x, y;
; 465  : 
; 466  : 	SetDiffuseColor(0.5f, 0.5f, 0.5f);

  00017	83 ec 10	 sub	 esp, 16			; 00000010H
  0001a	8b f1		 mov	 esi, ecx
  0001c	f3 0f 11 45 08	 movss	 DWORD PTR _xMin$[ebp], xmm0
  00021	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _xMax$[ebp]
  00026	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0002a	c7 44 24 0c 00
	00 80 3f	 mov	 DWORD PTR [esp+12], 1065353216 ; 3f800000H
  00032	c7 44 24 08 00
	00 00 3f	 mov	 DWORD PTR [esp+8], 1056964608 ; 3f000000H
  0003a	c7 44 24 04 00
	00 00 3f	 mov	 DWORD PTR [esp+4], 1056964608 ; 3f000000H
  00042	f3 0f 11 45 10	 movss	 DWORD PTR _xMax$[ebp], xmm0
  00047	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _yminorStep$[ebp]
  0004c	f3 0f 59 d0	 mulss	 xmm2, xmm0
  00050	c7 04 24 00 00
	00 3f		 mov	 DWORD PTR [esp], 1056964608 ; 3f000000H
  00057	f3 0f 11 55 0c	 movss	 DWORD PTR _yMin$[ebp], xmm2
  0005c	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  00061	f3 0f 59 d0	 mulss	 xmm2, xmm0
  00065	f3 0f 11 55 14	 movss	 DWORD PTR _yMax$[ebp], xmm2
  0006a	f3 0f 10 55 18	 movss	 xmm2, DWORD PTR _xmajorStep$[ebp]
  0006f	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00073	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _ymajorStep$[ebp]
  00078	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0007c	f3 0f 11 55 18	 movss	 DWORD PTR _xmajorStep$[ebp], xmm2
  00081	f3 0f 11 4d 1c	 movss	 DWORD PTR _ymajorStep$[ebp], xmm1
  00086	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor

; 467  : 	DrawMinorGrid(xMin, yMin, xMax, yMax, xminorStep, yminorStep, zPos);

  0008b	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _zPos$[ebp]
  00090	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00093	8b ce		 mov	 ecx, esi
  00095	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  0009b	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _yminorStep$[ebp]
  000a0	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  000a6	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _xminorStep$[ebp]
  000ab	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  000b1	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _yMax$[ebp]
  000b6	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000bc	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _xMax$[ebp]
  000c1	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000c7	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _yMin$[ebp]
  000cc	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000d2	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  000d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dc	e8 00 00 00 00	 call	 ?DrawMinorGrid@CScreen@@QAEXMMMMMMM@Z ; CScreen::DrawMinorGrid

; 468  : 
; 469  : 	SetDiffuseColor(0.7f, 0.7f, 0.7f);

  000e1	83 ec 10	 sub	 esp, 16			; 00000010H
  000e4	8b ce		 mov	 ecx, esi
  000e6	c7 44 24 0c 00
	00 80 3f	 mov	 DWORD PTR [esp+12], 1065353216 ; 3f800000H
  000ee	c7 44 24 08 33
	33 33 3f	 mov	 DWORD PTR [esp+8], 1060320051 ; 3f333333H
  000f6	c7 44 24 04 33
	33 33 3f	 mov	 DWORD PTR [esp+4], 1060320051 ; 3f333333H
  000fe	c7 04 24 33 33
	33 3f		 mov	 DWORD PTR [esp], 1060320051 ; 3f333333H
  00105	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor
  0010a	0f 57 c0	 xorps	 xmm0, xmm0
  0010d	0f 57 c9	 xorps	 xmm1, xmm1

; 470  : 	for (y = 0.0f; y >= yMin; y -= ymajorStep)

  00110	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _yMin$[ebp]
  00114	f3 0f 11 45 20	 movss	 DWORD PTR _x$2$[ebp], xmm0
  00119	f3 0f 11 4d 24	 movss	 DWORD PTR _y$1$[ebp], xmm1
  0011e	72 4e		 jb	 SHORT $LN3@DrawGrid
$LL4@DrawGrid:

; 471  : 		RenderLine2d(xMin, y, xMax, y, zPos);

  00120	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _zPos$[ebp]
  00125	83 ec 14	 sub	 esp, 20			; 00000014H
  00128	8b ce		 mov	 ecx, esi
  0012a	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00130	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _xMax$[ebp]
  00135	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  0013b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00141	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  00146	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  0014c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00151	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00156	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR _y$1$[ebp]
  0015b	f3 0f 5c 4d 1c	 subss	 xmm1, DWORD PTR _ymajorStep$[ebp]
  00160	0f 2f 4d 0c	 comiss	 xmm1, DWORD PTR _yMin$[ebp]
  00164	f3 0f 11 4d 24	 movss	 DWORD PTR _y$1$[ebp], xmm1
  00169	73 b5		 jae	 SHORT $LL4@DrawGrid
  0016b	0f 57 c0	 xorps	 xmm0, xmm0
$LN3@DrawGrid:

; 472  : 
; 473  : 	for (y = 0.0f; y <= yMax; y += ymajorStep)

  0016e	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  00173	0f 57 c9	 xorps	 xmm1, xmm1
  00176	0f 2f d0	 comiss	 xmm2, xmm0
  00179	f3 0f 11 4d 24	 movss	 DWORD PTR _y$2$[ebp], xmm1
  0017e	72 52		 jb	 SHORT $LN6@DrawGrid
$LL7@DrawGrid:

; 474  : 		RenderLine2d(xMin, y, xMax, y, zPos);

  00180	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _zPos$[ebp]
  00185	83 ec 14	 sub	 esp, 20			; 00000014H
  00188	8b ce		 mov	 ecx, esi
  0018a	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00190	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _xMax$[ebp]
  00195	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  0019b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001a1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  001a6	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  001ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b1	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  001b6	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR _y$2$[ebp]
  001bb	f3 0f 58 4d 1c	 addss	 xmm1, DWORD PTR _ymajorStep$[ebp]
  001c0	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  001c5	0f 2f d1	 comiss	 xmm2, xmm1
  001c8	f3 0f 11 4d 24	 movss	 DWORD PTR _y$2$[ebp], xmm1
  001cd	73 b1		 jae	 SHORT $LL7@DrawGrid
  001cf	0f 57 c0	 xorps	 xmm0, xmm0
$LN6@DrawGrid:

; 475  : 
; 476  : 	for (x = 0.0f; x >= xMin; x -= xmajorStep)

  001d2	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _xMin$[ebp]
  001d6	0f 57 c9	 xorps	 xmm1, xmm1
  001d9	f3 0f 11 4d 1c	 movss	 DWORD PTR _x$1$[ebp], xmm1
  001de	72 4e		 jb	 SHORT $LN9@DrawGrid
$LL10@DrawGrid:

; 477  : 		RenderLine2d(x, yMin, x, yMax, zPos);

  001e0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _zPos$[ebp]
  001e5	83 ec 14	 sub	 esp, 20			; 00000014H
  001e8	8b ce		 mov	 ecx, esi
  001ea	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  001f0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _yMin$[ebp]
  001f5	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  001fb	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00201	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00207	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0020c	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00211	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _x$1$[ebp]
  00216	f3 0f 5c 4d 18	 subss	 xmm1, DWORD PTR _xmajorStep$[ebp]
  0021b	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  00220	0f 2f 4d 08	 comiss	 xmm1, DWORD PTR _xMin$[ebp]
  00224	f3 0f 11 4d 1c	 movss	 DWORD PTR _x$1$[ebp], xmm1
  00229	73 b5		 jae	 SHORT $LL10@DrawGrid
  0022b	0f 57 c0	 xorps	 xmm0, xmm0
$LN9@DrawGrid:

; 478  : 
; 479  : 	for (x = 0.0f; x <= yMax; x += xmajorStep)

  0022e	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _yMax$[ebp]
  00233	0f 2f c8	 comiss	 xmm1, xmm0
  00236	72 52		 jb	 SHORT $LN12@DrawGrid
  00238	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL13@DrawGrid:

; 480  : 		RenderLine2d(x, yMin, x, yMax, zPos);

  00240	f3 0f 10 55 28	 movss	 xmm2, DWORD PTR _zPos$[ebp]
  00245	83 ec 14	 sub	 esp, 20			; 00000014H
  00248	8b ce		 mov	 ecx, esi
  0024a	f3 0f 11 54 24
	10		 movss	 DWORD PTR [esp+16], xmm2
  00250	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  00256	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _yMin$[ebp]
  0025b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00261	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00267	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026c	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00271	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _x$2$[ebp]
  00276	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _xmajorStep$[ebp]
  0027b	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _yMax$[ebp]
  00280	0f 2f c8	 comiss	 xmm1, xmm0
  00283	f3 0f 11 45 20	 movss	 DWORD PTR _x$2$[ebp], xmm0
  00288	73 b6		 jae	 SHORT $LL13@DrawGrid
$LN12@DrawGrid:

; 481  : 
; 482  : 	SetDiffuseColor(1.0f, 1.0f, 1.0f);

  0028a	83 ec 10	 sub	 esp, 16			; 00000010H
  0028d	8b ce		 mov	 ecx, esi
  0028f	c7 44 24 0c 00
	00 80 3f	 mov	 DWORD PTR [esp+12], 1065353216 ; 3f800000H
  00297	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR [esp+8], 1065353216 ; 3f800000H
  0029f	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  002a7	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  002ae	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor

; 483  : 	RenderLine2d(xMin, 0.0f, xMax, 0.0f, zPos);

  002b3	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _zPos$[ebp]
  002b8	83 ec 14	 sub	 esp, 20			; 00000014H
  002bb	8b ce		 mov	 ecx, esi
  002bd	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  002c3	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _xMax$[ebp]
  002c8	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR [esp+12], 0
  002d0	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  002d6	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  002db	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  002e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e8	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 484  : 	RenderLine2d(0.0f, yMin, 0.0f, yMax, zPos);

  002ed	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _zPos$[ebp]
  002f2	83 ec 14	 sub	 esp, 20			; 00000014H
  002f5	8b ce		 mov	 ecx, esi
  002f7	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  002fd	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _yMax$[ebp]
  00302	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00308	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _yMin$[ebp]
  0030d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  00315	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0031b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00322	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00327	5e		 pop	 esi

; 485  : }

  00328	5d		 pop	 ebp
  00329	c2 24 00	 ret	 36			; 00000024H
?DrawGrid@CScreen@@QAEXMMMMMMMMM@Z ENDP			; CScreen::DrawGrid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?DrawMinorGrid@CScreen@@QAEXMMMMMMM@Z
_TEXT	SEGMENT
_y$1$ = -4						; size = 4
_xMin$ = 8						; size = 4
_yMin$ = 12						; size = 4
_xMax$ = 16						; size = 4
_yMax$ = 20						; size = 4
_xminorStep$ = 24					; size = 4
_yminorStep$ = 28					; size = 4
_zPos$ = 32						; size = 4
?DrawMinorGrid@CScreen@@QAEXMMMMMMM@Z PROC		; CScreen::DrawMinorGrid, COMDAT
; _this$ = ecx

; 445  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 446  : 	float x, y;
; 447  : 
; 448  : 	for (y = yMin; y <= yMax; y += yminorStep)

  00004	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _yMin$[ebp]
  00009	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  0000e	0f 28 c3	 movaps	 xmm0, xmm3
  00011	0f 2f d3	 comiss	 xmm2, xmm3
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	f3 0f 11 5d fc	 movss	 DWORD PTR _y$1$[ebp], xmm3
  0001c	72 56		 jb	 SHORT $LN3@DrawMinorG
  0001e	66 90		 npad	 2
$LL4@DrawMinorG:

; 449  : 		RenderLine2d(xMin, y, xMax, y, zPos);

  00020	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _zPos$[ebp]
  00025	83 ec 14	 sub	 esp, 20			; 00000014H
  00028	8b ce		 mov	 ecx, esi
  0002a	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [esp+16], xmm1
  00030	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _xMax$[ebp]
  00035	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0003b	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00041	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00047	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  0004c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00051	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00056	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y$1$[ebp]
  0005b	f3 0f 58 45 1c	 addss	 xmm0, DWORD PTR _yminorStep$[ebp]
  00060	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  00065	0f 2f d0	 comiss	 xmm2, xmm0
  00068	f3 0f 11 45 fc	 movss	 DWORD PTR _y$1$[ebp], xmm0
  0006d	73 b1		 jae	 SHORT $LL4@DrawMinorG
  0006f	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _yMin$[ebp]
$LN3@DrawMinorG:

; 450  : 
; 451  : 	for (x = xMin; x <= xMax; x += xminorStep)

  00074	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  00079	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _xMax$[ebp]
  0007e	0f 2f c8	 comiss	 xmm1, xmm0
  00081	72 4f		 jb	 SHORT $LN6@DrawMinorG
$LL7@DrawMinorG:

; 452  : 		RenderLine2d(x, yMin, x, yMax, zPos);

  00083	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _zPos$[ebp]
  00088	83 ec 14	 sub	 esp, 20			; 00000014H
  0008b	8b ce		 mov	 ecx, esi
  0008d	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [esp+16], xmm1
  00093	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  00099	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0009f	f3 0f 11 5c 24
	04		 movss	 DWORD PTR [esp+4], xmm3
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  000af	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  000b4	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _xminorStep$[ebp]
  000b9	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _xMax$[ebp]
  000be	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  000c3	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _yMin$[ebp]
  000c8	0f 2f c8	 comiss	 xmm1, xmm0
  000cb	f3 0f 11 45 08	 movss	 DWORD PTR _xMin$[ebp], xmm0
  000d0	73 b1		 jae	 SHORT $LL7@DrawMinorG
$LN6@DrawMinorG:
  000d2	5e		 pop	 esi

; 453  : }

  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 1c 00	 ret	 28			; 0000001cH
?DrawMinorGrid@CScreen@@QAEXMMMMMMM@Z ENDP		; CScreen::DrawMinorGrid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderBillboard@CScreen@@QAEXPAUD3DXVECTOR3@@AAUD3DXCOLOR@@@Z
_TEXT	SEGMENT
_Position$GSCopy$1$ = -108				; size = 4
_dwR$1$ = -104						; size = 4
_dwR$1$ = -104						; size = 4
_dwR$1$ = -104						; size = 4
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_Position$ = 8						; size = 4
_Color$ = 12						; size = 4
?RenderBillboard@CScreen@@QAEXPAUD3DXVECTOR3@@AAUD3DXCOLOR@@@Z PROC ; CScreen::RenderBillboard, COMDAT
; _this$ = ecx

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _Position$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00013	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  0001b	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 415  : {

  00023	53		 push	 ebx

; 419  : 	vertices[0].position = TPosition(Position[0].x, Position[0].y, Position[0].z);

  00024	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00028	56		 push	 esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00029	8b 75 0c	 mov	 esi, DWORD PTR _Color$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 419  : 	vertices[0].position = TPosition(Position[0].x, Position[0].y, Position[0].z);

  0002c	f3 0f 11 45 9c	 movss	 DWORD PTR _vertices$[ebp], xmm0
  00031	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00036	f3 0f 11 45 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm0
  0003b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00040	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  00044	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 415  : {

  0004b	57		 push	 edi
  0004c	89 45 94	 mov	 DWORD PTR _Position$GSCopy$1$[ebp], eax

; 419  : 	vertices[0].position = TPosition(Position[0].x, Position[0].y, Position[0].z);

  0004f	f3 0f 11 45 a4	 movss	 DWORD PTR _vertices$[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00054	0f 57 c0	 xorps	 xmm0, xmm0
  00057	72 09		 jb	 SHORT $LN16@RenderBill
  00059	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  00060	eb 34		 jmp	 SHORT $LN15@RenderBill
$LN16@RenderBill:
  00062	0f 2f c1	 comiss	 xmm0, xmm1
  00065	72 09		 jb	 SHORT $LN14@RenderBill
  00067	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  0006e	eb 26		 jmp	 SHORT $LN15@RenderBill
$LN14@RenderBill:
  00070	0f 28 c1	 movaps	 xmm0, xmm1
  00073	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00077	f3 0f 58 c4	 addss	 xmm0, xmm4
  0007b	e8 00 00 00 00	 call	 __ftol3
  00080	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00088	0f 57 c0	 xorps	 xmm0, xmm0
  0008b	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  00093	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN15@RenderBill:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00096	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  0009b	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  000a2	72 07		 jb	 SHORT $LN20@RenderBill
  000a4	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  000a9	eb 1b		 jmp	 SHORT $LN19@RenderBill
$LN20@RenderBill:
  000ab	0f 2f c1	 comiss	 xmm0, xmm1
  000ae	72 04		 jb	 SHORT $LN18@RenderBill
  000b0	33 db		 xor	 ebx, ebx
  000b2	eb 12		 jmp	 SHORT $LN19@RenderBill
$LN18@RenderBill:
  000b4	0f 28 c1	 movaps	 xmm0, xmm1
  000b7	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000bb	f3 0f 58 c4	 addss	 xmm0, xmm4
  000bf	e8 00 00 00 00	 call	 __ftol3
  000c4	8b d8		 mov	 ebx, eax
$LN19@RenderBill:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  000c6	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  000cb	0f 57 c0	 xorps	 xmm0, xmm0
  000ce	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  000d5	72 07		 jb	 SHORT $LN24@RenderBill
  000d7	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  000dc	eb 26		 jmp	 SHORT $LN23@RenderBill
$LN24@RenderBill:
  000de	0f 2f c1	 comiss	 xmm0, xmm1
  000e1	72 04		 jb	 SHORT $LN22@RenderBill
  000e3	33 ff		 xor	 edi, edi
  000e5	eb 1d		 jmp	 SHORT $LN23@RenderBill
$LN22@RenderBill:
  000e7	0f 28 c1	 movaps	 xmm0, xmm1
  000ea	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000f2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000fa	e8 00 00 00 00	 call	 __ftol3
  000ff	8b f8		 mov	 edi, eax
  00101	0f 57 c0	 xorps	 xmm0, xmm0
$LN23@RenderBill:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00104	f3 0f 10 4e 0c	 movss	 xmm1, DWORD PTR [esi+12]
  00109	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00110	72 07		 jb	 SHORT $LN28@RenderBill
  00112	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00117	eb 21		 jmp	 SHORT $LN27@RenderBill
$LN28@RenderBill:
  00119	0f 2f c1	 comiss	 xmm0, xmm1
  0011c	72 04		 jb	 SHORT $LN26@RenderBill
  0011e	33 c0		 xor	 eax, eax
  00120	eb 18		 jmp	 SHORT $LN27@RenderBill
$LN26@RenderBill:
  00122	0f 28 c1	 movaps	 xmm0, xmm1
  00125	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0012d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00135	e8 00 00 00 00	 call	 __ftol3
$LN27@RenderBill:

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0013a	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0013e	c1 e0 08	 shl	 eax, 8
  00141	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
  00144	c1 e0 08	 shl	 eax, 8
  00147	0b c3		 or	 eax, ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 421  : 	vertices[0].texCoord = TTextureCoordinate(0, 0);

  00149	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00150	c1 e0 08	 shl	 eax, 8
  00153	0b c7		 or	 eax, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 421  : 	vertices[0].texCoord = TTextureCoordinate(0, 0);

  00155	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0015c	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 420  : 	vertices[0].diffuse = Color;

  00163	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+12], eax

; 422  : 
; 423  : 	vertices[1].position = TPosition(Position[1].x, Position[1].y, Position[1].z);

  00166	8b 45 94	 mov	 eax, DWORD PTR _Position$GSCopy$1$[ebp]
  00169	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0016e	f3 0f 11 45 b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm0
  00173	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00178	f3 0f 11 45 b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm0
  0017d	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00182	f3 0f 11 45 bc	 movss	 DWORD PTR _vertices$[ebp+32], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00187	0f 57 c0	 xorps	 xmm0, xmm0
  0018a	72 09		 jb	 SHORT $LN38@RenderBill
  0018c	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  00193	eb 2c		 jmp	 SHORT $LN37@RenderBill
$LN38@RenderBill:
  00195	0f 2f c1	 comiss	 xmm0, xmm1
  00198	72 09		 jb	 SHORT $LN36@RenderBill
  0019a	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  001a1	eb 1e		 jmp	 SHORT $LN37@RenderBill
$LN36@RenderBill:
  001a3	0f 28 c1	 movaps	 xmm0, xmm1
  001a6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  001ae	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  001b6	e8 00 00 00 00	 call	 __ftol3
  001bb	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
  001be	0f 57 c0	 xorps	 xmm0, xmm0
$LN37@RenderBill:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  001c1	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  001c6	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  001cd	72 07		 jb	 SHORT $LN42@RenderBill
  001cf	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  001d4	eb 23		 jmp	 SHORT $LN41@RenderBill
$LN42@RenderBill:
  001d6	0f 2f c1	 comiss	 xmm0, xmm1
  001d9	72 04		 jb	 SHORT $LN40@RenderBill
  001db	33 db		 xor	 ebx, ebx
  001dd	eb 1a		 jmp	 SHORT $LN41@RenderBill
$LN40@RenderBill:
  001df	0f 28 c1	 movaps	 xmm0, xmm1
  001e2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  001ea	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  001f2	e8 00 00 00 00	 call	 __ftol3
  001f7	8b d8		 mov	 ebx, eax
$LN41@RenderBill:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  001f9	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  001fe	0f 57 c0	 xorps	 xmm0, xmm0
  00201	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00208	72 07		 jb	 SHORT $LN46@RenderBill
  0020a	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0020f	eb 26		 jmp	 SHORT $LN45@RenderBill
$LN46@RenderBill:
  00211	0f 2f c1	 comiss	 xmm0, xmm1
  00214	72 04		 jb	 SHORT $LN44@RenderBill
  00216	33 ff		 xor	 edi, edi
  00218	eb 1d		 jmp	 SHORT $LN45@RenderBill
$LN44@RenderBill:
  0021a	0f 28 c1	 movaps	 xmm0, xmm1
  0021d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00225	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0022d	e8 00 00 00 00	 call	 __ftol3
  00232	8b f8		 mov	 edi, eax
  00234	0f 57 c0	 xorps	 xmm0, xmm0
$LN45@RenderBill:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00237	f3 0f 10 4e 0c	 movss	 xmm1, DWORD PTR [esi+12]
  0023c	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00243	72 07		 jb	 SHORT $LN50@RenderBill
  00245	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0024a	eb 21		 jmp	 SHORT $LN49@RenderBill
$LN50@RenderBill:
  0024c	0f 2f c1	 comiss	 xmm0, xmm1
  0024f	72 04		 jb	 SHORT $LN48@RenderBill
  00251	33 c0		 xor	 eax, eax
  00253	eb 18		 jmp	 SHORT $LN49@RenderBill
$LN48@RenderBill:
  00255	0f 28 c1	 movaps	 xmm0, xmm1
  00258	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00260	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00268	e8 00 00 00 00	 call	 __ftol3
$LN49@RenderBill:

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0026d	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00271	c1 e0 08	 shl	 eax, 8
  00274	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
  00277	c1 e0 08	 shl	 eax, 8
  0027a	0b c3		 or	 eax, ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 425  : 	vertices[1].texCoord = TTextureCoordinate(1, 0);

  0027c	c7 45 c4 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+40], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00283	c1 e0 08	 shl	 eax, 8
  00286	0b c7		 or	 eax, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 425  : 	vertices[1].texCoord = TTextureCoordinate(1, 0);

  00288	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+44], 0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0028f	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 424  : 	vertices[1].diffuse = Color;

  00296	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+36], eax

; 426  : 
; 427  : 	vertices[2].position = TPosition(Position[2].x, Position[2].y, Position[2].z);

  00299	8b 45 94	 mov	 eax, DWORD PTR _Position$GSCopy$1$[ebp]
  0029c	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  002a1	f3 0f 11 45 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm0
  002a6	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  002ab	f3 0f 11 45 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm0
  002b0	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  002b5	f3 0f 11 45 d4	 movss	 DWORD PTR _vertices$[ebp+56], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  002ba	0f 57 c0	 xorps	 xmm0, xmm0
  002bd	72 09		 jb	 SHORT $LN60@RenderBill
  002bf	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  002c6	eb 2c		 jmp	 SHORT $LN59@RenderBill
$LN60@RenderBill:
  002c8	0f 2f c1	 comiss	 xmm0, xmm1
  002cb	72 09		 jb	 SHORT $LN58@RenderBill
  002cd	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  002d4	eb 1e		 jmp	 SHORT $LN59@RenderBill
$LN58@RenderBill:
  002d6	0f 28 c1	 movaps	 xmm0, xmm1
  002d9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  002e1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  002e9	e8 00 00 00 00	 call	 __ftol3
  002ee	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
  002f1	0f 57 c0	 xorps	 xmm0, xmm0
$LN59@RenderBill:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  002f4	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  002f9	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00300	72 07		 jb	 SHORT $LN64@RenderBill
  00302	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00307	eb 23		 jmp	 SHORT $LN63@RenderBill
$LN64@RenderBill:
  00309	0f 2f c1	 comiss	 xmm0, xmm1
  0030c	72 04		 jb	 SHORT $LN62@RenderBill
  0030e	33 db		 xor	 ebx, ebx
  00310	eb 1a		 jmp	 SHORT $LN63@RenderBill
$LN62@RenderBill:
  00312	0f 28 c1	 movaps	 xmm0, xmm1
  00315	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0031d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00325	e8 00 00 00 00	 call	 __ftol3
  0032a	8b d8		 mov	 ebx, eax
$LN63@RenderBill:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0032c	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  00331	0f 57 c0	 xorps	 xmm0, xmm0
  00334	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  0033b	72 07		 jb	 SHORT $LN68@RenderBill
  0033d	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  00342	eb 26		 jmp	 SHORT $LN67@RenderBill
$LN68@RenderBill:
  00344	0f 2f c1	 comiss	 xmm0, xmm1
  00347	72 04		 jb	 SHORT $LN66@RenderBill
  00349	33 ff		 xor	 edi, edi
  0034b	eb 1d		 jmp	 SHORT $LN67@RenderBill
$LN66@RenderBill:
  0034d	0f 28 c1	 movaps	 xmm0, xmm1
  00350	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00358	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00360	e8 00 00 00 00	 call	 __ftol3
  00365	8b f8		 mov	 edi, eax
  00367	0f 57 c0	 xorps	 xmm0, xmm0
$LN67@RenderBill:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0036a	f3 0f 10 4e 0c	 movss	 xmm1, DWORD PTR [esi+12]
  0036f	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00376	72 07		 jb	 SHORT $LN72@RenderBill
  00378	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0037d	eb 21		 jmp	 SHORT $LN71@RenderBill
$LN72@RenderBill:
  0037f	0f 2f c1	 comiss	 xmm0, xmm1
  00382	72 04		 jb	 SHORT $LN70@RenderBill
  00384	33 c0		 xor	 eax, eax
  00386	eb 18		 jmp	 SHORT $LN71@RenderBill
$LN70@RenderBill:
  00388	0f 28 c1	 movaps	 xmm0, xmm1
  0038b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00393	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0039b	e8 00 00 00 00	 call	 __ftol3
$LN71@RenderBill:

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  003a0	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  003a4	c1 e0 08	 shl	 eax, 8
  003a7	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
  003aa	c1 e0 08	 shl	 eax, 8
  003ad	0b c3		 or	 eax, ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 429  : 	vertices[2].texCoord = TTextureCoordinate(0, 1);

  003af	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+64], 0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  003b6	c1 e0 08	 shl	 eax, 8
  003b9	0b c7		 or	 eax, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 429  : 	vertices[2].texCoord = TTextureCoordinate(0, 1);

  003bb	c7 45 e0 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+68], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  003c2	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 428  : 	vertices[2].diffuse = Color;

  003c9	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+60], eax

; 430  : 
; 431  : 	vertices[3].position = TPosition(Position[3].x, Position[3].y, Position[3].z);

  003cc	8b 45 94	 mov	 eax, DWORD PTR _Position$GSCopy$1$[ebp]
  003cf	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  003d4	f3 0f 11 45 e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm0
  003d9	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  003de	f3 0f 11 45 e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm0
  003e3	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  003e8	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+80], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  003ed	0f 57 c0	 xorps	 xmm0, xmm0
  003f0	72 07		 jb	 SHORT $LN82@RenderBill
  003f2	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  003f7	eb 26		 jmp	 SHORT $LN81@RenderBill
$LN82@RenderBill:
  003f9	0f 2f c1	 comiss	 xmm0, xmm1
  003fc	72 04		 jb	 SHORT $LN80@RenderBill
  003fe	33 db		 xor	 ebx, ebx
  00400	eb 1d		 jmp	 SHORT $LN81@RenderBill
$LN80@RenderBill:
  00402	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  0040a	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00412	0f 28 c1	 movaps	 xmm0, xmm1
  00415	e8 00 00 00 00	 call	 __ftol3
  0041a	8b d8		 mov	 ebx, eax
  0041c	0f 57 c0	 xorps	 xmm0, xmm0
$LN81@RenderBill:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0041f	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00424	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  0042b	72 07		 jb	 SHORT $LN86@RenderBill
  0042d	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  00432	eb 23		 jmp	 SHORT $LN85@RenderBill
$LN86@RenderBill:
  00434	0f 2f c1	 comiss	 xmm0, xmm1
  00437	72 04		 jb	 SHORT $LN84@RenderBill
  00439	33 ff		 xor	 edi, edi
  0043b	eb 1a		 jmp	 SHORT $LN85@RenderBill
$LN84@RenderBill:
  0043d	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  00445	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  0044d	0f 28 c1	 movaps	 xmm0, xmm1
  00450	e8 00 00 00 00	 call	 __ftol3
  00455	8b f8		 mov	 edi, eax
$LN85@RenderBill:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  00457	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  0045c	0f 57 c0	 xorps	 xmm0, xmm0
  0045f	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00466	72 07		 jb	 SHORT $LN90@RenderBill
  00468	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  0046d	eb 26		 jmp	 SHORT $LN89@RenderBill
$LN90@RenderBill:
  0046f	0f 2f c1	 comiss	 xmm0, xmm1
  00472	72 04		 jb	 SHORT $LN88@RenderBill
  00474	33 f6		 xor	 esi, esi
  00476	eb 1d		 jmp	 SHORT $LN89@RenderBill
$LN88@RenderBill:
  00478	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  00480	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00488	0f 28 c1	 movaps	 xmm0, xmm1
  0048b	e8 00 00 00 00	 call	 __ftol3
  00490	8b f0		 mov	 esi, eax
  00492	0f 57 c0	 xorps	 xmm0, xmm0
$LN89@RenderBill:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00495	8b 45 0c	 mov	 eax, DWORD PTR _Color$[ebp]
  00498	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [eax+12]
  0049d	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  004a4	72 07		 jb	 SHORT $LN94@RenderBill
  004a6	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  004ab	eb 21		 jmp	 SHORT $LN93@RenderBill
$LN94@RenderBill:
  004ad	0f 2f c1	 comiss	 xmm0, xmm1
  004b0	72 04		 jb	 SHORT $LN92@RenderBill
  004b2	33 c0		 xor	 eax, eax
  004b4	eb 18		 jmp	 SHORT $LN93@RenderBill
$LN92@RenderBill:
  004b6	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  004be	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  004c6	0f 28 c1	 movaps	 xmm0, xmm1
  004c9	e8 00 00 00 00	 call	 __ftol3
$LN93@RenderBill:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 435  : 	STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  004ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004d4	c1 e0 08	 shl	 eax, 8
  004d7	0b c3		 or	 eax, ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 433  : 	vertices[3].texCoord = TTextureCoordinate(1, 1);

  004d9	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+88], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004e0	c1 e0 08	 shl	 eax, 8
  004e3	0b c7		 or	 eax, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 433  : 	vertices[3].texCoord = TTextureCoordinate(1, 1);

  004e5	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+92], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004ec	c1 e0 08	 shl	 eax, 8
  004ef	0b c6		 or	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 435  : 	STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  004f1	68 42 01 00 00	 push	 322			; 00000142H
  004f6	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+84], eax
  004f9	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 436  : 
; 437  : 	// 2004.11.18.myevan.DrawIndexPrimitiveUP -> DynamicVertexBuffer
; 438  : 	SetDefaultIndexBuffer(DEFAULT_IB_FILL_RECT);

  004fe	6a 05		 push	 5
  00500	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 439  : 	if (SetPDTStream(vertices, 4))

  00505	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  00508	6a 04		 push	 4
  0050a	50		 push	 eax
  0050b	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  00510	83 c4 0c	 add	 esp, 12			; 0000000cH
  00513	5f		 pop	 edi
  00514	5e		 pop	 esi
  00515	5b		 pop	 ebx
  00516	84 c0		 test	 al, al
  00518	74 15		 je	 SHORT $LN2@RenderBill

; 440  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 4, 0, 2);

  0051a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00520	6a 02		 push	 2
  00522	6a 00		 push	 0
  00524	6a 04		 push	 4
  00526	6a 00		 push	 0
  00528	6a 04		 push	 4
  0052a	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN2@RenderBill:

; 441  : 	//OLD: STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, &ms_fillRectIdxVector[0], D3DFMT_INDEX16, vertices, sizeof(TPDTVertex));
; 442  : }

  0052f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00532	33 cd		 xor	 ecx, ebp
  00534	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00539	8b e5		 mov	 esp, ebp
  0053b	5d		 pop	 ebp
  0053c	c2 08 00	 ret	 8
?RenderBillboard@CScreen@@QAEXPAUD3DXVECTOR3@@AAUD3DXCOLOR@@@Z ENDP ; CScreen::RenderBillboard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z
_TEXT	SEGMENT
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
_z$ = 24						; size = 4
_su$ = 28						; size = 4
_sv$ = 32						; size = 4
_eu$ = 36						; size = 4
_ev$ = 40						; size = 4
?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z PROC		; CScreen::RenderTextureBox, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 381  : 	assert(ms_lpd3dDevice != NULL);
; 382  : 
; 383  : 	TPDTVertex vertices[4];
; 384  : 
; 385  : 	vertices[0].position = TPosition(sx, sy, z);

  00010	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _sy$[ebp]

; 386  : 	vertices[0].diffuse = ms_diffuseColor;
; 387  : 	vertices[0].texCoord = TTextureCoordinate(su, sv);

  00015	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _sv$[ebp]
  0001a	f3 0f 10 6d 18	 movss	 xmm5, DWORD PTR _z$[ebp]
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  00024	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _sx$[ebp]
  00029	f3 0f 10 75 10	 movss	 xmm6, DWORD PTR _ex$[ebp]
  0002e	f3 0f 10 5d 1c	 movss	 xmm3, DWORD PTR _su$[ebp]

; 388  : 
; 389  : 	vertices[1].position = TPosition(ex, sy, z);
; 390  : 	vertices[1].diffuse = ms_diffuseColor;
; 391  : 	vertices[1].texCoord = TTextureCoordinate(eu, sv);

  00033	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR _eu$[ebp]

; 392  : 
; 393  : 	vertices[2].position = TPosition(sx, ey, z);
; 394  : 	vertices[2].diffuse = ms_diffuseColor;
; 395  : 	vertices[2].texCoord = TTextureCoordinate(su, ev);
; 396  : 
; 397  : 	vertices[3].position = TPosition(ex, ey, z);
; 398  : 	vertices[3].diffuse = ms_diffuseColor;
; 399  : 	vertices[3].texCoord = TTextureCoordinate(eu, ev);
; 400  : 
; 401  : #ifdef WORLD_EDITOR
; 402  : 	STATEMANAGER.SetTransform(D3DTS_WORLD, ms_lpd3dMatStack->GetTop());
; 403  : #endif
; 404  : 	STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0003e	f3 0f 11 4d a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm1
  00043	f3 0f 11 45 b0	 movss	 DWORD PTR _vertices$[ebp+20], xmm0
  00048	f3 0f 11 4d b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm1
  0004d	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _ey$[ebp]
  00052	f3 0f 11 45 c8	 movss	 DWORD PTR _vertices$[ebp+44], xmm0
  00057	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _ev$[ebp]
  0005c	68 42 01 00 00	 push	 322			; 00000142H
  00061	f3 0f 11 65 9c	 movss	 DWORD PTR _vertices$[ebp], xmm4
  00066	f3 0f 11 6d a4	 movss	 DWORD PTR _vertices$[ebp+8], xmm5
  0006b	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+12], eax
  0006e	f3 0f 11 5d ac	 movss	 DWORD PTR _vertices$[ebp+16], xmm3
  00073	f3 0f 11 75 b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm6
  00078	f3 0f 11 6d bc	 movss	 DWORD PTR _vertices$[ebp+32], xmm5
  0007d	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+36], eax
  00080	f3 0f 11 55 c4	 movss	 DWORD PTR _vertices$[ebp+40], xmm2
  00085	f3 0f 11 65 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm4
  0008a	f3 0f 11 4d d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm1
  0008f	f3 0f 11 6d d4	 movss	 DWORD PTR _vertices$[ebp+56], xmm5
  00094	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+60], eax
  00097	f3 0f 11 5d dc	 movss	 DWORD PTR _vertices$[ebp+64], xmm3
  0009c	f3 0f 11 45 e0	 movss	 DWORD PTR _vertices$[ebp+68], xmm0
  000a1	f3 0f 11 75 e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm6
  000a6	f3 0f 11 4d e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm1
  000ab	f3 0f 11 6d ec	 movss	 DWORD PTR _vertices$[ebp+80], xmm5
  000b0	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+84], eax
  000b3	f3 0f 11 55 f4	 movss	 DWORD PTR _vertices$[ebp+88], xmm2
  000b8	f3 0f 11 45 f8	 movss	 DWORD PTR _vertices$[ebp+92], xmm0
  000bd	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 405  : 
; 406  : 	// 2004.11.18.myevan.DrawIndexPrimitiveUP -> DynamicVertexBuffer
; 407  : 	SetDefaultIndexBuffer(DEFAULT_IB_FILL_RECT);

  000c2	6a 05		 push	 5
  000c4	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 408  : 	if (SetPDTStream(vertices, 4))

  000c9	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  000cc	6a 04		 push	 4
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	84 c0		 test	 al, al
  000d9	74 15		 je	 SHORT $LN2@RenderText

; 409  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 4, 0, 2);

  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e1	6a 02		 push	 2
  000e3	6a 00		 push	 0
  000e5	6a 04		 push	 4
  000e7	6a 00		 push	 0
  000e9	6a 04		 push	 4
  000eb	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN2@RenderText:

; 410  : 	//OLD: STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, &ms_fillRectIdxVector[0], D3DFMT_INDEX16, vertices, sizeof(TPDTVertex));
; 411  : }

  000f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f3	33 cd		 xor	 ecx, ebp
  000f5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 24 00	 ret	 36			; 00000024H
?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z ENDP		; CScreen::RenderTextureBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderCube@CScreen@@QAEXMMMMMMUD3DXMATRIX@@@Z
_TEXT	SEGMENT
tv1022 = -308						; size = 4
_v3Center$$sroa$458$1$ = -304				; size = 4
_v3Center$$sroa$459$1$ = -300				; size = 4
_v3Center$$sroa$460$1$ = -296				; size = 4
_vertices$ = -292					; size = 192
_v3Vertex$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
_matRotation$ = 32					; size = 64
?RenderCube@CScreen@@QAEXMMMMMMUD3DXMATRIX@@@Z PROC	; CScreen::RenderCube, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 193  : 	D3DXVECTOR3 v3Center = D3DXVECTOR3((sx + ex) * 0.5f, (sy + ey) * 0.5f, (sz + ez) * 0.5f);

  00013	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _sy$[ebp]
  00018	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _sx$[ebp]
  0001d	0f 28 ca	 movaps	 xmm1, xmm2
  00020	f3 0f 10 65 18	 movss	 xmm4, DWORD PTR _ey$[ebp]
  00025	0f 28 fd	 movaps	 xmm7, xmm5
  00028	f3 0f 10 75 14	 movss	 xmm6, DWORD PTR _ex$[ebp]
  0002d	f3 0f 58 cc	 addss	 xmm1, xmm4
  00031	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00039	f3 0f 58 fe	 addss	 xmm7, xmm6
  0003d	f3 0f 10 5d 1c	 movss	 xmm3, DWORD PTR _ez$[ebp]
  00042	53		 push	 ebx
  00043	56		 push	 esi
  00044	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00048	8d 9d e0 fe ff
	ff		 lea	 ebx, DWORD PTR _vertices$[ebp+4]
  0004e	57		 push	 edi
  0004f	f3 0f 59 f8	 mulss	 xmm7, xmm0
  00053	8d 7d a4	 lea	 edi, DWORD PTR _v3Vertex$[ebp+8]
  00056	c7 85 cc fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1022[ebp], 8
  00060	f3 0f 11 8d d4
	fe ff ff	 movss	 DWORD PTR _v3Center$$sroa$459$1$[ebp], xmm1
  00068	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _sz$[ebp]
  0006d	f3 0f 11 bd d8
	fe ff ff	 movss	 DWORD PTR _v3Center$$sroa$460$1$[ebp], xmm7
  00075	0f 28 f9	 movaps	 xmm7, xmm1
  00078	f3 0f 58 fb	 addss	 xmm7, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0007c	f3 0f 11 6d 9c	 movss	 DWORD PTR _v3Vertex$[ebp], xmm5

; 181  :     y = fy;

  00081	f3 0f 11 55 a0	 movss	 DWORD PTR _v3Vertex$[ebp+4], xmm2

; 182  :     z = fz;

  00086	f3 0f 11 4d a4	 movss	 DWORD PTR _v3Vertex$[ebp+8], xmm1

; 180  :     x = fx;

  0008b	f3 0f 11 75 a8	 movss	 DWORD PTR _v3Vertex$[ebp+12], xmm6

; 181  :     y = fy;

  00090	f3 0f 11 55 ac	 movss	 DWORD PTR _v3Vertex$[ebp+16], xmm2
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 193  : 	D3DXVECTOR3 v3Center = D3DXVECTOR3((sx + ex) * 0.5f, (sy + ey) * 0.5f, (sz + ez) * 0.5f);

  00095	f3 0f 59 f8	 mulss	 xmm7, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00099	f3 0f 11 4d b0	 movss	 DWORD PTR _v3Vertex$[ebp+20], xmm1

; 180  :     x = fx;

  0009e	f3 0f 11 6d b4	 movss	 DWORD PTR _v3Vertex$[ebp+24], xmm5
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 193  : 	D3DXVECTOR3 v3Center = D3DXVECTOR3((sx + ex) * 0.5f, (sy + ey) * 0.5f, (sz + ez) * 0.5f);

  000a3	f3 0f 11 bd d0
	fe ff ff	 movss	 DWORD PTR _v3Center$$sroa$458$1$[ebp], xmm7
  000ab	f3 0f 10 bd d8
	fe ff ff	 movss	 xmm7, DWORD PTR _v3Center$$sroa$460$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  000b3	f3 0f 11 65 b8	 movss	 DWORD PTR _v3Vertex$[ebp+28], xmm4

; 182  :     z = fz;

  000b8	f3 0f 11 4d bc	 movss	 DWORD PTR _v3Vertex$[ebp+32], xmm1

; 180  :     x = fx;

  000bd	f3 0f 11 75 c0	 movss	 DWORD PTR _v3Vertex$[ebp+36], xmm6

; 181  :     y = fy;

  000c2	f3 0f 11 65 c4	 movss	 DWORD PTR _v3Vertex$[ebp+40], xmm4

; 182  :     z = fz;

  000c7	f3 0f 11 4d c8	 movss	 DWORD PTR _v3Vertex$[ebp+44], xmm1

; 180  :     x = fx;

  000cc	f3 0f 11 6d cc	 movss	 DWORD PTR _v3Vertex$[ebp+48], xmm5

; 181  :     y = fy;

  000d1	f3 0f 11 55 d0	 movss	 DWORD PTR _v3Vertex$[ebp+52], xmm2

; 182  :     z = fz;

  000d6	f3 0f 11 5d d4	 movss	 DWORD PTR _v3Vertex$[ebp+56], xmm3

; 180  :     x = fx;

  000db	f3 0f 11 75 d8	 movss	 DWORD PTR _v3Vertex$[ebp+60], xmm6

; 181  :     y = fy;

  000e0	f3 0f 11 55 dc	 movss	 DWORD PTR _v3Vertex$[ebp+64], xmm2

; 182  :     z = fz;

  000e5	f3 0f 11 5d e0	 movss	 DWORD PTR _v3Vertex$[ebp+68], xmm3

; 180  :     x = fx;

  000ea	f3 0f 11 6d e4	 movss	 DWORD PTR _v3Vertex$[ebp+72], xmm5

; 181  :     y = fy;

  000ef	f3 0f 11 65 e8	 movss	 DWORD PTR _v3Vertex$[ebp+76], xmm4

; 182  :     z = fz;

  000f4	f3 0f 11 5d ec	 movss	 DWORD PTR _v3Vertex$[ebp+80], xmm3

; 180  :     x = fx;

  000f9	f3 0f 11 75 f0	 movss	 DWORD PTR _v3Vertex$[ebp+84], xmm6

; 181  :     y = fy;

  000fe	f3 0f 11 65 f4	 movss	 DWORD PTR _v3Vertex$[ebp+88], xmm4

; 182  :     z = fz;

  00103	f3 0f 11 5d f8	 movss	 DWORD PTR _v3Vertex$[ebp+92], xmm3
  00108	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@RenderCube:

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00110	f3 0f 10 47 f8	 movss	 xmm0, DWORD PTR [edi-8]
  00115	8d 77 f8	 lea	 esi, DWORD PTR [edi-8]
  00118	f3 0f 10 57 fc	 movss	 xmm2, DWORD PTR [edi-4]
  0011d	f3 0f 5c c7	 subss	 xmm0, xmm7
  00121	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 210  : 		D3DXVec3TransformCoord(&v3Vertex[i], &v3Vertex[i], &matRotation);

  00125	8d 45 20	 lea	 eax, DWORD PTR _matRotation$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00128	f3 0f 5c 95 d4
	fe ff ff	 subss	 xmm2, DWORD PTR _v3Center$$sroa$459$1$[ebp]
  00130	f3 0f 5c 8d d0
	fe ff ff	 subss	 xmm1, DWORD PTR _v3Center$$sroa$458$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 210  : 		D3DXVec3TransformCoord(&v3Vertex[i], &v3Vertex[i], &matRotation);

  00138	50		 push	 eax
  00139	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  0013d	56		 push	 esi
  0013e	f3 0f 11 57 fc	 movss	 DWORD PTR [edi-4], xmm2
  00143	56		 push	 esi
  00144	f3 0f 11 0f	 movss	 DWORD PTR [edi], xmm1
  00148	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0014d	f3 0f 10 bd d8
	fe ff ff	 movss	 xmm7, DWORD PTR _v3Center$$sroa$460$1$[ebp]
  00155	f3 0f 10 8d d4
	fe ff ff	 movss	 xmm1, DWORD PTR _v3Center$$sroa$459$1$[ebp]
  0015d	0f 28 d7	 movaps	 xmm2, xmm7
  00160	f3 0f 58 16	 addss	 xmm2, DWORD PTR [esi]
  00164	f3 0f 58 4f fc	 addss	 xmm1, DWORD PTR [edi-4]
  00169	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _v3Center$$sroa$458$1$[ebp]
  00171	f3 0f 58 07	 addss	 xmm0, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 211  : 		v3Vertex[i] = v3Vertex[i] + v3Center;

  00175	f3 0f 11 16	 movss	 DWORD PTR [esi], xmm2
  00179	f3 0f 11 4f fc	 movss	 DWORD PTR [edi-4], xmm1
  0017e	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0

; 212  : 		vertices[i].px = v3Vertex[i].x;
; 213  : 		vertices[i].py = v3Vertex[i].y;

  00182	8b 47 fc	 mov	 eax, DWORD PTR [edi-4]
  00185	89 03		 mov	 DWORD PTR [ebx], eax

; 214  : 		vertices[i].pz = v3Vertex[i].z;

  00187	8b 07		 mov	 eax, DWORD PTR [edi]
  00189	83 c7 0c	 add	 edi, 12			; 0000000cH
  0018c	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 215  : 		vertices[i].diffuse = ms_diffuseColor;

  0018f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  00194	f3 0f 11 53 fc	 movss	 DWORD PTR [ebx-4], xmm2
  00199	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 216  : 		vertices[i].u = 0.0f; vertices[i].v = 0.0f;

  0019c	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  001a3	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  001aa	83 c3 18	 add	 ebx, 24			; 00000018H
  001ad	83 ad cc fe ff
	ff 01		 sub	 DWORD PTR tv1022[ebp], 1
  001b4	0f 85 56 ff ff
	ff		 jne	 $LL4@RenderCube

; 217  : 	}
; 218  : 
; 219  : 	if (SetPDTStream(vertices, 8))

  001ba	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _vertices$[ebp]
  001c0	6a 08		 push	 8
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  001c8	83 c4 08	 add	 esp, 8
  001cb	84 c0		 test	 al, al
  001cd	74 6b		 je	 SHORT $LN5@RenderCube

; 220  : 	{
; 221  : 		STATEMANAGER.SetTexture(0, NULL);

  001cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d5	6a 00		 push	 0
  001d7	6a 00		 push	 0
  001d9	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 222  : 		STATEMANAGER.SetTexture(1, NULL);

  001de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001e4	6a 00		 push	 0
  001e6	6a 01		 push	 1
  001e8	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 223  : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  001ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001f3	68 42 01 00 00	 push	 322			; 00000142H
  001f8	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 224  : 		STATEMANAGER.SetTransform(D3DTS_WORLD, ms_lpd3dMatStack->GetTop());

  001fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00202	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 224  : 		STATEMANAGER.SetTransform(D3DTS_WORLD, ms_lpd3dMatStack->GetTop());

  00208	50		 push	 eax
  00209	8b 10		 mov	 edx, DWORD PTR [eax]
  0020b	ff 52 44	 call	 DWORD PTR [edx+68]
  0020e	50		 push	 eax
  0020f	68 00 01 00 00	 push	 256			; 00000100H
  00214	8b ce		 mov	 ecx, esi
  00216	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 225  : 
; 226  : 		SetDefaultIndexBuffer(DEFAULT_IB_FILL_CUBE);

  0021b	6a 06		 push	 6
  0021d	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 227  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 8, 0, 4*3);

  00222	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00228	83 c4 04	 add	 esp, 4
  0022b	6a 0c		 push	 12			; 0000000cH
  0022d	6a 00		 push	 0
  0022f	6a 08		 push	 8
  00231	6a 00		 push	 0
  00233	6a 04		 push	 4
  00235	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN5@RenderCube:

; 228  : 	}
; 229  : }

  0023a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023d	5f		 pop	 edi
  0023e	5e		 pop	 esi
  0023f	33 cd		 xor	 ecx, ebp
  00241	5b		 pop	 ebx
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c2 58 00	 ret	 88			; 00000058H
?RenderCube@CScreen@@QAEXMMMMMMUD3DXMATRIX@@@Z ENDP	; CScreen::RenderCube
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderCube@CScreen@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_vertices$ = -196					; size = 192
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
?RenderCube@CScreen@@QAEXMMMMMM@Z PROC			; CScreen::RenderCube, COMDAT
; _this$ = ecx

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 166  : 	SPDTVertexRaw vertices[8] =
; 167  : 	{
; 168  : 		{ sx, sy, sz, ms_diffuseColor, 0.0f, 0.0f  },

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  00018	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _sx$[ebp]
  0001d	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _sy$[ebp]
  00022	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _sz$[ebp]

; 169  : 		{ ex, sy, sz, ms_diffuseColor, 0.0f, 0.0f  },

  00027	f3 0f 10 65 14	 movss	 xmm4, DWORD PTR _ex$[ebp]

; 170  : 		{ sx, ey, sz, ms_diffuseColor, 0.0f, 0.0f  },

  0002c	f3 0f 10 55 18	 movss	 xmm2, DWORD PTR _ey$[ebp]

; 171  : 		{ ex, ey, sz, ms_diffuseColor, 0.0f, 0.0f  },
; 172  : 		{ sx, sy, ez, ms_diffuseColor, 0.0f, 0.0f  },

  00031	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _ez$[ebp]
  00036	89 85 48 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+12], eax
  0003c	89 85 60 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+36], eax
  00042	89 85 78 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+60], eax
  00048	89 45 90	 mov	 DWORD PTR _vertices$[ebp+84], eax
  0004b	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+108], eax

; 173  : 		{ ex, sy, ez, ms_diffuseColor, 0.0f, 0.0f  },

  0004e	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+132], eax

; 174  : 		{ sx, ey, ez, ms_diffuseColor, 0.0f, 0.0f  },

  00051	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+156], eax

; 175  : 		{ ex, ey, ez, ms_diffuseColor, 0.0f, 0.0f  },

  00054	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+180], eax

; 176  : 	};
; 177  : 
; 178  : 
; 179  : 	if (SetPDTStream(vertices, 8))

  00057	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _vertices$[ebp]
  0005d	6a 08		 push	 8
  0005f	50		 push	 eax
  00060	f3 0f 11 ad 3c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp], xmm5
  00068	f3 0f 11 9d 40
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+4], xmm3
  00070	f3 0f 11 8d 44
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+8], xmm1
  00078	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+16], 0
  00082	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+20], 0
  0008c	f3 0f 11 a5 54
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+24], xmm4
  00094	f3 0f 11 9d 58
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+28], xmm3
  0009c	f3 0f 11 8d 5c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+32], xmm1
  000a4	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+40], 0
  000ae	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+44], 0
  000b8	f3 0f 11 ad 6c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+48], xmm5
  000c0	f3 0f 11 95 70
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+52], xmm2
  000c8	f3 0f 11 8d 74
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+56], xmm1
  000d0	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+64], 0
  000da	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  000e1	f3 0f 11 65 84	 movss	 DWORD PTR _vertices$[ebp+72], xmm4
  000e6	f3 0f 11 55 88	 movss	 DWORD PTR _vertices$[ebp+76], xmm2
  000eb	f3 0f 11 4d 8c	 movss	 DWORD PTR _vertices$[ebp+80], xmm1
  000f0	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+88], 0
  000f7	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+92], 0
  000fe	f3 0f 11 6d 9c	 movss	 DWORD PTR _vertices$[ebp+96], xmm5
  00103	f3 0f 11 5d a0	 movss	 DWORD PTR _vertices$[ebp+100], xmm3
  00108	f3 0f 11 45 a4	 movss	 DWORD PTR _vertices$[ebp+104], xmm0
  0010d	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+112], 0
  00114	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+116], 0
  0011b	f3 0f 11 65 b4	 movss	 DWORD PTR _vertices$[ebp+120], xmm4
  00120	f3 0f 11 5d b8	 movss	 DWORD PTR _vertices$[ebp+124], xmm3
  00125	f3 0f 11 45 bc	 movss	 DWORD PTR _vertices$[ebp+128], xmm0
  0012a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+136], 0
  00131	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+140], 0
  00138	f3 0f 11 6d cc	 movss	 DWORD PTR _vertices$[ebp+144], xmm5
  0013d	f3 0f 11 55 d0	 movss	 DWORD PTR _vertices$[ebp+148], xmm2
  00142	f3 0f 11 45 d4	 movss	 DWORD PTR _vertices$[ebp+152], xmm0
  00147	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+160], 0
  0014e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+164], 0
  00155	f3 0f 11 65 e4	 movss	 DWORD PTR _vertices$[ebp+168], xmm4
  0015a	f3 0f 11 55 e8	 movss	 DWORD PTR _vertices$[ebp+172], xmm2
  0015f	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+176], xmm0
  00164	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+184], 0
  0016b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+188], 0
  00172	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  00177	83 c4 08	 add	 esp, 8
  0017a	84 c0		 test	 al, al
  0017c	74 6d		 je	 SHORT $LN2@RenderCube

; 180  : 	{
; 181  : 		STATEMANAGER.SetTexture(0, NULL);

  0017e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00184	56		 push	 esi
  00185	6a 00		 push	 0
  00187	6a 00		 push	 0
  00189	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 182  : 		STATEMANAGER.SetTexture(1, NULL);

  0018e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00194	6a 00		 push	 0
  00196	6a 01		 push	 1
  00198	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 183  : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  0019d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001a3	68 42 01 00 00	 push	 322			; 00000142H
  001a8	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 184  : 		STATEMANAGER.SetTransform(D3DTS_WORLD, ms_lpd3dMatStack->GetTop());

  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  001b2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 184  : 		STATEMANAGER.SetTransform(D3DTS_WORLD, ms_lpd3dMatStack->GetTop());

  001b8	50		 push	 eax
  001b9	8b 10		 mov	 edx, DWORD PTR [eax]
  001bb	ff 52 44	 call	 DWORD PTR [edx+68]
  001be	50		 push	 eax
  001bf	68 00 01 00 00	 push	 256			; 00000100H
  001c4	8b ce		 mov	 ecx, esi
  001c6	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 185  : 
; 186  : 		SetDefaultIndexBuffer(DEFAULT_IB_FILL_CUBE);

  001cb	6a 06		 push	 6
  001cd	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 187  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 8, 0, 4*3);

  001d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d8	83 c4 04	 add	 esp, 4
  001db	6a 0c		 push	 12			; 0000000cH
  001dd	6a 00		 push	 0
  001df	6a 08		 push	 8
  001e1	6a 00		 push	 0
  001e3	6a 04		 push	 4
  001e5	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
  001ea	5e		 pop	 esi
$LN2@RenderCube:

; 188  : 	}
; 189  : }

  001eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ee	33 cd		 xor	 ecx, ebp
  001f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f5	8b e5		 mov	 esp, ebp
  001f7	5d		 pop	 ebp
  001f8	c2 18 00	 ret	 24			; 00000018H
?RenderCube@CScreen@@QAEXMMMMMM@Z ENDP			; CScreen::RenderCube
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderLineCube@CScreen@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_vertices$ = -196					; size = 192
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
?RenderLineCube@CScreen@@QAEXMMMMMM@Z PROC		; CScreen::RenderLineCube, COMDAT
; _this$ = ecx

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 139  : 	SPDTVertexRaw vertices[8] =
; 140  : 	{
; 141  : 		{ sx, sy, sz, ms_diffuseColor, 0.0f, 0.0f },

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  00018	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _sx$[ebp]
  0001d	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _sy$[ebp]
  00022	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _sz$[ebp]

; 142  : 		{ ex, sy, sz, ms_diffuseColor, 0.0f, 0.0f },

  00027	f3 0f 10 65 14	 movss	 xmm4, DWORD PTR _ex$[ebp]

; 143  : 		{ sx, ey, sz, ms_diffuseColor, 0.0f, 0.0f },

  0002c	f3 0f 10 55 18	 movss	 xmm2, DWORD PTR _ey$[ebp]

; 144  : 		{ ex, ey, sz, ms_diffuseColor, 0.0f, 0.0f },
; 145  : 		{ sx, sy, ez, ms_diffuseColor, 0.0f, 0.0f },

  00031	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _ez$[ebp]
  00036	89 85 48 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+12], eax
  0003c	89 85 60 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+36], eax
  00042	89 85 78 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+60], eax
  00048	89 45 90	 mov	 DWORD PTR _vertices$[ebp+84], eax
  0004b	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+108], eax

; 146  : 		{ ex, sy, ez, ms_diffuseColor, 0.0f, 0.0f },

  0004e	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+132], eax

; 147  : 		{ sx, ey, ez, ms_diffuseColor, 0.0f, 0.0f },

  00051	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+156], eax

; 148  : 		{ ex, ey, ez, ms_diffuseColor, 0.0f, 0.0f },

  00054	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+180], eax

; 149  : 	};
; 150  : 
; 151  : 
; 152  : 	if (SetPDTStream(vertices, 8))

  00057	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _vertices$[ebp]
  0005d	6a 08		 push	 8
  0005f	50		 push	 eax
  00060	f3 0f 11 ad 3c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp], xmm5
  00068	f3 0f 11 9d 40
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+4], xmm3
  00070	f3 0f 11 8d 44
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+8], xmm1
  00078	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+16], 0
  00082	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+20], 0
  0008c	f3 0f 11 a5 54
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+24], xmm4
  00094	f3 0f 11 9d 58
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+28], xmm3
  0009c	f3 0f 11 8d 5c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+32], xmm1
  000a4	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+40], 0
  000ae	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+44], 0
  000b8	f3 0f 11 ad 6c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+48], xmm5
  000c0	f3 0f 11 95 70
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+52], xmm2
  000c8	f3 0f 11 8d 74
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+56], xmm1
  000d0	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+64], 0
  000da	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  000e1	f3 0f 11 65 84	 movss	 DWORD PTR _vertices$[ebp+72], xmm4
  000e6	f3 0f 11 55 88	 movss	 DWORD PTR _vertices$[ebp+76], xmm2
  000eb	f3 0f 11 4d 8c	 movss	 DWORD PTR _vertices$[ebp+80], xmm1
  000f0	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+88], 0
  000f7	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+92], 0
  000fe	f3 0f 11 6d 9c	 movss	 DWORD PTR _vertices$[ebp+96], xmm5
  00103	f3 0f 11 5d a0	 movss	 DWORD PTR _vertices$[ebp+100], xmm3
  00108	f3 0f 11 45 a4	 movss	 DWORD PTR _vertices$[ebp+104], xmm0
  0010d	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+112], 0
  00114	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+116], 0
  0011b	f3 0f 11 65 b4	 movss	 DWORD PTR _vertices$[ebp+120], xmm4
  00120	f3 0f 11 5d b8	 movss	 DWORD PTR _vertices$[ebp+124], xmm3
  00125	f3 0f 11 45 bc	 movss	 DWORD PTR _vertices$[ebp+128], xmm0
  0012a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+136], 0
  00131	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+140], 0
  00138	f3 0f 11 6d cc	 movss	 DWORD PTR _vertices$[ebp+144], xmm5
  0013d	f3 0f 11 55 d0	 movss	 DWORD PTR _vertices$[ebp+148], xmm2
  00142	f3 0f 11 45 d4	 movss	 DWORD PTR _vertices$[ebp+152], xmm0
  00147	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+160], 0
  0014e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+164], 0
  00155	f3 0f 11 65 e4	 movss	 DWORD PTR _vertices$[ebp+168], xmm4
  0015a	f3 0f 11 55 e8	 movss	 DWORD PTR _vertices$[ebp+172], xmm2
  0015f	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+176], xmm0
  00164	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+184], 0
  0016b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+188], 0
  00172	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  00177	83 c4 08	 add	 esp, 8
  0017a	84 c0		 test	 al, al
  0017c	74 6d		 je	 SHORT $LN2@RenderLine

; 153  : 	{
; 154  : 		STATEMANAGER.SetTexture(0, NULL);

  0017e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00184	56		 push	 esi
  00185	6a 00		 push	 0
  00187	6a 00		 push	 0
  00189	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 155  : 		STATEMANAGER.SetTexture(1, NULL);

  0018e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00194	6a 00		 push	 0
  00196	6a 01		 push	 1
  00198	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 156  : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  0019d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001a3	68 42 01 00 00	 push	 322			; 00000142H
  001a8	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 157  : 		STATEMANAGER.SetTransform(D3DTS_WORLD, ms_lpd3dMatStack->GetTop());

  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  001b2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 157  : 		STATEMANAGER.SetTransform(D3DTS_WORLD, ms_lpd3dMatStack->GetTop());

  001b8	50		 push	 eax
  001b9	8b 10		 mov	 edx, DWORD PTR [eax]
  001bb	ff 52 44	 call	 DWORD PTR [edx+68]
  001be	50		 push	 eax
  001bf	68 00 01 00 00	 push	 256			; 00000100H
  001c4	8b ce		 mov	 ecx, esi
  001c6	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 158  : 		SetDefaultIndexBuffer(DEFAULT_IB_LINE_CUBE);

  001cb	6a 03		 push	 3
  001cd	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 159  : 
; 160  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_LINELIST, 0, 8, 0, 4*3);

  001d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d8	83 c4 04	 add	 esp, 4
  001db	6a 0c		 push	 12			; 0000000cH
  001dd	6a 00		 push	 0
  001df	6a 08		 push	 8
  001e1	6a 00		 push	 0
  001e3	6a 02		 push	 2
  001e5	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
  001ea	5e		 pop	 esi
$LN2@RenderLine:

; 161  : 	}
; 162  : }

  001eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ee	33 cd		 xor	 ecx, ebp
  001f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f5	8b e5		 mov	 esp, ebp
  001f7	5d		 pop	 ebp
  001f8	c2 18 00	 ret	 24			; 00000018H
?RenderLineCube@CScreen@@QAEXMMMMMM@Z ENDP		; CScreen::RenderLineCube
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderGradationBar3d@CScreen@@QAEXMMMMMMKK@Z
_TEXT	SEGMENT
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
_dwStartColor$ = 32					; size = 4
_dwEndColor$ = 36					; size = 4
?RenderGradationBar3d@CScreen@@QAEXMMMMMMKK@Z PROC	; CScreen::RenderGradationBar3d, COMDAT
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 116  : 	assert(ms_lpd3dDevice != NULL);
; 117  : 	if (sx==ex) return;

  00010	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _sx$[ebp]
  00015	f3 0f 10 5d 14	 movss	 xmm3, DWORD PTR _ex$[ebp]
  0001a	0f 2e d3	 ucomiss xmm2, xmm3
  0001d	9f		 lahf
  0001e	f6 c4 44	 test	 ah, 68			; 00000044H
  00021	0f 8b f8 00 00
	00		 jnp	 $LN4@RenderGrad

; 118  : 	if (sy==ey) return;

  00027	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR _sy$[ebp]
  0002c	f3 0f 10 6d 18	 movss	 xmm5, DWORD PTR _ey$[ebp]
  00031	0f 2e e5	 ucomiss xmm4, xmm5
  00034	9f		 lahf
  00035	f6 c4 44	 test	 ah, 68			; 00000044H
  00038	0f 8b e1 00 00
	00		 jnp	 $LN4@RenderGrad

; 119  : 
; 120  : 	SPDTVertexRaw vertices[4] =
; 121  : 	{
; 122  : 		{ sx, sy, sz, dwStartColor, 0.0f, 0.0f },
; 123  : 		{ sx, ey, ez, dwEndColor, 0.0f, 0.0f },

  0003e	8b 45 24	 mov	 eax, DWORD PTR _dwEndColor$[ebp]
  00041	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _sz$[ebp]
  00046	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _ez$[ebp]
  0004b	8b 4d 20	 mov	 ecx, DWORD PTR _dwStartColor$[ebp]
  0004e	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+36], eax

; 124  : 		{ ex, sy, sz, dwStartColor, 0.0f, 0.0f },
; 125  : 		{ ex, ey, ez, dwEndColor, 0.0f, 0.0f },

  00051	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+84], eax

; 126  : 	};
; 127  : 
; 128  : 	if (SetPDTStream(vertices, 4))

  00054	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  00057	6a 04		 push	 4
  00059	50		 push	 eax
  0005a	f3 0f 11 55 9c	 movss	 DWORD PTR _vertices$[ebp], xmm2
  0005f	f3 0f 11 65 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm4
  00064	f3 0f 11 4d a4	 movss	 DWORD PTR _vertices$[ebp+8], xmm1
  00069	89 4d a8	 mov	 DWORD PTR _vertices$[ebp+12], ecx
  0006c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
  00073	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  0007a	f3 0f 11 55 b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm2
  0007f	f3 0f 11 6d b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm5
  00084	f3 0f 11 45 bc	 movss	 DWORD PTR _vertices$[ebp+32], xmm0
  00089	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+40], 0
  00090	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+44], 0
  00097	f3 0f 11 5d cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm3
  0009c	f3 0f 11 65 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm4
  000a1	f3 0f 11 4d d4	 movss	 DWORD PTR _vertices$[ebp+56], xmm1
  000a6	89 4d d8	 mov	 DWORD PTR _vertices$[ebp+60], ecx
  000a9	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+64], 0
  000b0	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  000b7	f3 0f 11 5d e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm3
  000bc	f3 0f 11 6d e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm5
  000c1	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+80], xmm0
  000c6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+88], 0
  000cd	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+92], 0
  000d4	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  000d9	83 c4 08	 add	 esp, 8
  000dc	84 c0		 test	 al, al
  000de	74 3f		 je	 SHORT $LN4@RenderGrad

; 129  : 	{
; 130  : 		STATEMANAGER.SetTexture(0, NULL);

  000e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e6	6a 00		 push	 0
  000e8	6a 00		 push	 0
  000ea	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 131  : 		STATEMANAGER.SetTexture(1, NULL);

  000ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f5	6a 00		 push	 0
  000f7	6a 01		 push	 1
  000f9	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 132  : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  000fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00104	68 42 01 00 00	 push	 322			; 00000142H
  00109	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 133  : 		STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  0010e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00114	6a 02		 push	 2
  00116	6a 00		 push	 0
  00118	6a 05		 push	 5
  0011a	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN4@RenderGrad:

; 134  : 	}
; 135  : }

  0011f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00122	33 cd		 xor	 ecx, ebp
  00124	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 20 00	 ret	 32			; 00000020H
?RenderGradationBar3d@CScreen@@QAEXMMMMMMKK@Z ENDP	; CScreen::RenderGradationBar3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderBar3d@CScreen@@QAEXPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_c_pv3Positions$ = 8					; size = 4
?RenderBar3d@CScreen@@QAEXPBUD3DXVECTOR3@@@Z PROC	; CScreen::RenderBar3d, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _c_pv3Positions$[ebp]

; 94   : 	assert(ms_lpd3dDevice != NULL);
; 95   : 
; 96   : 	SPDTVertexRaw vertices[4] =
; 97   : 	{
; 98   : 		{ c_pv3Positions[0].x, c_pv3Positions[0].y, c_pv3Positions[0].z, ms_diffuseColor, 0.0f, 0.0f },

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  00018	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+12], eax

; 99   : 		{ c_pv3Positions[2].x, c_pv3Positions[2].y, c_pv3Positions[2].z, ms_diffuseColor, 0.0f, 0.0f },

  0001b	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+36], eax
  0001e	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00022	f3 0f 11 45 9c	 movss	 DWORD PTR _vertices$[ebp], xmm0
  00027	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002c	f3 0f 11 45 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm0
  00031	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00036	f3 0f 11 45 a4	 movss	 DWORD PTR _vertices$[ebp+8], xmm0
  0003b	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00040	f3 0f 11 45 b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm0
  00045	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  0004a	f3 0f 11 45 b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm0
  0004f	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  00054	f3 0f 11 45 bc	 movss	 DWORD PTR _vertices$[ebp+32], xmm0

; 100  : 		{ c_pv3Positions[1].x, c_pv3Positions[1].y, c_pv3Positions[1].z, ms_diffuseColor, 0.0f, 0.0f },

  00059	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  0005e	f3 0f 11 45 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm0
  00063	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00068	f3 0f 11 45 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm0
  0006d	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  00072	f3 0f 11 45 d4	 movss	 DWORD PTR _vertices$[ebp+56], xmm0

; 101  : 		{ c_pv3Positions[3].x, c_pv3Positions[3].y, c_pv3Positions[3].z, ms_diffuseColor, 0.0f, 0.0f },

  00077	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  0007c	f3 0f 11 45 e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm0
  00081	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  00086	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+60], eax
  00089	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+84], eax

; 102  : 	};
; 103  : 
; 104  : 
; 105  : 	if (SetPDTStream(vertices, 4))

  0008c	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  0008f	f3 0f 11 45 e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm0
  00094	f3 0f 10 41 2c	 movss	 xmm0, DWORD PTR [ecx+44]
  00099	6a 04		 push	 4
  0009b	50		 push	 eax
  0009c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
  000a3	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  000aa	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+40], 0
  000b1	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+44], 0
  000b8	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+64], 0
  000bf	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  000c6	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+80], xmm0
  000cb	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+88], 0
  000d2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+92], 0
  000d9	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  000de	83 c4 08	 add	 esp, 8
  000e1	84 c0		 test	 al, al
  000e3	74 3f		 je	 SHORT $LN2@RenderBar3

; 106  : 	{
; 107  : 		STATEMANAGER.SetTexture(0, NULL);

  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000eb	6a 00		 push	 0
  000ed	6a 00		 push	 0
  000ef	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 108  : 		STATEMANAGER.SetTexture(1, NULL);

  000f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000fa	6a 00		 push	 0
  000fc	6a 01		 push	 1
  000fe	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 109  : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  00103	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00109	68 42 01 00 00	 push	 322			; 00000142H
  0010e	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 110  : 		STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  00113	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00119	6a 02		 push	 2
  0011b	6a 00		 push	 0
  0011d	6a 05		 push	 5
  0011f	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN2@RenderBar3:

; 111  : 	}
; 112  : }

  00124	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00127	33 cd		 xor	 ecx, ebp
  00129	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 04 00	 ret	 4
?RenderBar3d@CScreen@@QAEXPBUD3DXVECTOR3@@@Z ENDP	; CScreen::RenderBar3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderBar3d@CScreen@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
?RenderBar3d@CScreen@@QAEXMMMMMM@Z PROC			; CScreen::RenderBar3d, COMDAT
; _this$ = ecx

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 71   : 	assert(ms_lpd3dDevice != NULL);
; 72   : 
; 73   : 	SPDTVertexRaw vertices[4] =
; 74   : 	{
; 75   : 		{ sx, sy, sz, ms_diffuseColor, 0.0f, 0.0f },

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  00015	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _sx$[ebp]
  0001a	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR _sy$[ebp]
  0001f	f3 0f 10 5d 10	 movss	 xmm3, DWORD PTR _sz$[ebp]

; 76   : 		{ sx, ey, ez, ms_diffuseColor, 0.0f, 0.0f },

  00024	f3 0f 10 55 18	 movss	 xmm2, DWORD PTR _ey$[ebp]

; 77   : 		{ ex, sy, sz, ms_diffuseColor, 0.0f, 0.0f },

  00029	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ex$[ebp]
  0002e	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+12], eax
  00031	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+36], eax
  00034	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+60], eax

; 78   : 		{ ex, ey, ez, ms_diffuseColor, 0.0f, 0.0f },

  00037	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+84], eax

; 79   : 	};
; 80   : 
; 81   : 
; 82   : 
; 83   : 	if (SetPDTStream(vertices, 4))

  0003a	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  0003d	f3 0f 11 4d 9c	 movss	 DWORD PTR _vertices$[ebp], xmm1
  00042	f3 0f 11 4d b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm1
  00047	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _ez$[ebp]
  0004c	6a 04		 push	 4
  0004e	50		 push	 eax
  0004f	f3 0f 11 65 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm4
  00054	f3 0f 11 5d a4	 movss	 DWORD PTR _vertices$[ebp+8], xmm3
  00059	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
  00060	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  00067	f3 0f 11 55 b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm2
  0006c	f3 0f 11 4d bc	 movss	 DWORD PTR _vertices$[ebp+32], xmm1
  00071	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+40], 0
  00078	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+44], 0
  0007f	f3 0f 11 45 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm0
  00084	f3 0f 11 65 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm4
  00089	f3 0f 11 5d d4	 movss	 DWORD PTR _vertices$[ebp+56], xmm3
  0008e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+64], 0
  00095	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  0009c	f3 0f 11 45 e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm0
  000a1	f3 0f 11 55 e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm2
  000a6	f3 0f 11 4d ec	 movss	 DWORD PTR _vertices$[ebp+80], xmm1
  000ab	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+88], 0
  000b2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+92], 0
  000b9	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  000be	83 c4 08	 add	 esp, 8
  000c1	84 c0		 test	 al, al
  000c3	74 3f		 je	 SHORT $LN2@RenderBar3

; 84   : 	{
; 85   : 		STATEMANAGER.SetTexture(0, NULL);

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000cb	6a 00		 push	 0
  000cd	6a 00		 push	 0
  000cf	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 86   : 		STATEMANAGER.SetTexture(1, NULL);

  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000da	6a 00		 push	 0
  000dc	6a 01		 push	 1
  000de	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 87   : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  000e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e9	68 42 01 00 00	 push	 322			; 00000142H
  000ee	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 88   : 		STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  000f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f9	6a 02		 push	 2
  000fb	6a 00		 push	 0
  000fd	6a 05		 push	 5
  000ff	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN2@RenderBar3:

; 89   : 	}
; 90   : }

  00104	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00107	33 cd		 xor	 ecx, ebp
  00109	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 18 00	 ret	 24			; 00000018H
?RenderBar3d@CScreen@@QAEXMMMMMM@Z ENDP			; CScreen::RenderBar3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderBox3d@CScreen@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_vertices$ = -196					; size = 192
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
?RenderBox3d@CScreen@@QAEXMMMMMM@Z PROC			; CScreen::RenderBox3d, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 39   : 	if (GRAPHICS_CAPS_CAN_NOT_DRAW_LINE)

  00013	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?GRAPHICS_CAPS_CAN_NOT_DRAW_LINE@@3_NA, 0 ; GRAPHICS_CAPS_CAN_NOT_DRAW_LINE
  0001a	0f 85 b2 01 00
	00		 jne	 $LN3@RenderBox3

; 40   : 		return;
; 41   : 
; 42   : 	assert(ms_lpd3dDevice != NULL);
; 43   : 
; 44   : 	SPDTVertexRaw vertices[8] =
; 45   : 	{
; 46   : 		{ sx, sy, sz, ms_diffuseColor, 0.0f, 0.0f },	// 0

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor

; 47   : 		{ ex, sy, sz, ms_diffuseColor, 0.0f, 0.0f },	// 1

  00025	f3 0f 10 65 14	 movss	 xmm4, DWORD PTR _ex$[ebp]
  0002a	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _sx$[ebp]
  0002f	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _sy$[ebp]
  00034	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _sz$[ebp]

; 48   : 
; 49   : 		{ sx, sy, sz, ms_diffuseColor, 0.0f, 0.0f },	// 0
; 50   : 		{ sx, ey, ez, ms_diffuseColor, 0.0f, 0.0f },	// 2

  00039	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _ey$[ebp]
  0003e	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _ez$[ebp]
  00043	f3 0f 11 a5 54
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+24], xmm4

; 51   : 
; 52   : 		{ ex, sy, sz, ms_diffuseColor, 0.0f, 0.0f },	// 1

  0004b	f3 0f 11 65 9c	 movss	 DWORD PTR _vertices$[ebp+96], xmm4

; 53   : 		{ ex, ey, ez, ms_diffuseColor, 0.0f, 0.0f },	// 3

  00050	f3 0f 11 65 b4	 movss	 DWORD PTR _vertices$[ebp+120], xmm4

; 54   : 
; 55   : 		{ sx, ey, ez, ms_diffuseColor, 0.0f, 0.0f },	// 2
; 56   : 		{ ex+1.0f, ey, ez, ms_diffuseColor, 0.0f, 0.0f }

  00055	f3 0f 58 25 00
	00 00 00	 addss	 xmm4, DWORD PTR __real@3f800000
  0005d	89 85 48 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+12], eax
  00063	89 85 60 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+36], eax
  00069	89 85 78 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+60], eax
  0006f	89 45 90	 mov	 DWORD PTR _vertices$[ebp+84], eax
  00072	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+108], eax
  00075	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+132], eax
  00078	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+156], eax
  0007b	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+180], eax

; 57   : 	};
; 58   : 
; 59   : 	// 2004.11.18.myevan.DrawIndexPrimitiveUP -> DynamicVertexBuffer
; 60   : 	if (SetPDTStream(vertices, 8))

  0007e	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _vertices$[ebp]
  00084	6a 08		 push	 8
  00086	50		 push	 eax
  00087	f3 0f 11 ad 3c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp], xmm5
  0008f	f3 0f 11 9d 40
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+4], xmm3
  00097	f3 0f 11 95 44
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+8], xmm2
  0009f	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+16], 0
  000a9	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+20], 0
  000b3	f3 0f 11 9d 58
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+28], xmm3
  000bb	f3 0f 11 95 5c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+32], xmm2
  000c3	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+40], 0
  000cd	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+44], 0
  000d7	f3 0f 11 ad 6c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+48], xmm5
  000df	f3 0f 11 9d 70
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+52], xmm3
  000e7	f3 0f 11 95 74
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+56], xmm2
  000ef	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+64], 0
  000f9	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  00100	f3 0f 11 6d 84	 movss	 DWORD PTR _vertices$[ebp+72], xmm5
  00105	f3 0f 11 4d 88	 movss	 DWORD PTR _vertices$[ebp+76], xmm1
  0010a	f3 0f 11 45 8c	 movss	 DWORD PTR _vertices$[ebp+80], xmm0
  0010f	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+88], 0
  00116	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+92], 0
  0011d	f3 0f 11 5d a0	 movss	 DWORD PTR _vertices$[ebp+100], xmm3
  00122	f3 0f 11 55 a4	 movss	 DWORD PTR _vertices$[ebp+104], xmm2
  00127	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+112], 0
  0012e	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+116], 0
  00135	f3 0f 11 4d b8	 movss	 DWORD PTR _vertices$[ebp+124], xmm1
  0013a	f3 0f 11 45 bc	 movss	 DWORD PTR _vertices$[ebp+128], xmm0
  0013f	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+136], 0
  00146	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+140], 0
  0014d	f3 0f 11 6d cc	 movss	 DWORD PTR _vertices$[ebp+144], xmm5
  00152	f3 0f 11 4d d0	 movss	 DWORD PTR _vertices$[ebp+148], xmm1
  00157	f3 0f 11 45 d4	 movss	 DWORD PTR _vertices$[ebp+152], xmm0
  0015c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+160], 0
  00163	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+164], 0
  0016a	f3 0f 11 65 e4	 movss	 DWORD PTR _vertices$[ebp+168], xmm4
  0016f	f3 0f 11 4d e8	 movss	 DWORD PTR _vertices$[ebp+172], xmm1
  00174	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+176], xmm0
  00179	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+184], 0
  00180	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+188], 0
  00187	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  0018c	83 c4 08	 add	 esp, 8
  0018f	84 c0		 test	 al, al
  00191	74 3f		 je	 SHORT $LN3@RenderBox3

; 61   : 	{
; 62   : 		STATEMANAGER.SetTexture(0, NULL);

  00193	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00199	6a 00		 push	 0
  0019b	6a 00		 push	 0
  0019d	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 63   : 		STATEMANAGER.SetTexture(1, NULL);

  001a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001a8	6a 00		 push	 0
  001aa	6a 01		 push	 1
  001ac	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 64   : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  001b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b7	68 42 01 00 00	 push	 322			; 00000142H
  001bc	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 65   : 		STATEMANAGER.DrawPrimitive(D3DPT_LINELIST, 0, 4);

  001c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c7	6a 04		 push	 4
  001c9	6a 00		 push	 0
  001cb	6a 02		 push	 2
  001cd	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN3@RenderBox3:

; 66   : 	}
; 67   : }

  001d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d5	33 cd		 xor	 ecx, ebp
  001d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c2 18 00	 ret	 24			; 00000018H
?RenderBox3d@CScreen@@QAEXMMMMMM@Z ENDP			; CScreen::RenderBox3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderLine3d@CScreen@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_vertices$ = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
?RenderLine3d@CScreen@@QAEXMMMMMM@Z PROC		; CScreen::RenderLine3d, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 16   : 	if (GRAPHICS_CAPS_CAN_NOT_DRAW_LINE)

  00010	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?GRAPHICS_CAPS_CAN_NOT_DRAW_LINE@@3_NA, 0 ; GRAPHICS_CAPS_CAN_NOT_DRAW_LINE
  00017	0f 85 b4 00 00
	00		 jne	 $LN3@RenderLine

; 17   : 		return;
; 18   : 
; 19   : 	assert(ms_lpd3dDevice != NULL);
; 20   : 
; 21   : 	SPDTVertexRaw vertices[2] =
; 22   : 	{
; 23   : 		{ sx, sy, sz, ms_diffuseColor, 0.0f, 0.0f },

  0001d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  00027	f3 0f 11 45 cc	 movss	 DWORD PTR _vertices$[ebp], xmm0
  0002c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00031	f3 0f 11 45 d0	 movss	 DWORD PTR _vertices$[ebp+4], xmm0
  00036	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _sz$[ebp]
  0003b	f3 0f 11 45 d4	 movss	 DWORD PTR _vertices$[ebp+8], xmm0

; 24   : 		{ ex, ey, ez, ms_diffuseColor, 0.0f, 0.0f }

  00040	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00045	f3 0f 11 45 e4	 movss	 DWORD PTR _vertices$[ebp+24], xmm0
  0004a	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _ey$[ebp]
  0004f	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+12], eax
  00052	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+36], eax

; 25   : 	};
; 26   : 
; 27   : 	// 2004.11.18.myevan.DrawIndexPrimitiveUP -> DynamicVertexBuffer
; 28   : 	if (SetPDTStream(vertices, 2))

  00055	8d 45 cc	 lea	 eax, DWORD PTR _vertices$[ebp]
  00058	f3 0f 11 45 e8	 movss	 DWORD PTR _vertices$[ebp+28], xmm0
  0005d	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _ez$[ebp]
  00062	6a 02		 push	 2
  00064	50		 push	 eax
  00065	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
  0006c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  00073	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+32], xmm0
  00078	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+40], 0
  0007f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+44], 0
  00086	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  0008b	83 c4 08	 add	 esp, 8
  0008e	84 c0		 test	 al, al
  00090	74 3f		 je	 SHORT $LN3@RenderLine

; 29   : 	{
; 30   : 		STATEMANAGER.SetTexture(0, NULL);

  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00098	6a 00		 push	 0
  0009a	6a 00		 push	 0
  0009c	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 31   : 		STATEMANAGER.SetTexture(1, NULL);

  000a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000a7	6a 00		 push	 0
  000a9	6a 01		 push	 1
  000ab	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 32   : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  000b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000b6	68 42 01 00 00	 push	 322			; 00000142H
  000bb	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 33   : 		STATEMANAGER.DrawPrimitive(D3DPT_LINELIST, 0, 1);

  000c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000c6	6a 01		 push	 1
  000c8	6a 00		 push	 0
  000ca	6a 02		 push	 2
  000cc	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN3@RenderLine:

; 34   : 	}
; 35   : }

  000d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d4	33 cd		 xor	 ecx, ebp
  000d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 18 00	 ret	 24			; 00000018H
?RenderLine3d@CScreen@@QAEXMMMMMM@Z ENDP		; CScreen::RenderLine3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Camera.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderCircle3d@CScreen@@QAEXMMMMH@Z
_TEXT	SEGMENT
_pts$ = -44						; size = 12
_delta$1$ = -32						; size = 4
_c_rmatInvView$1$ = -28					; size = 4
_this$1$ = -24						; size = 4
tv728 = -20						; size = 4
_theta$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_fRadius$ = 20						; size = 4
_iStep$ = 24						; size = 4
?RenderCircle3d@CScreen@@QAEXMMMMH@Z PROC		; CScreen::RenderCircle3d, COMDAT
; _this$ = ecx

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RenderCircle3d@CScreen@@QAEXMMMMH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	89 4d e8	 mov	 DWORD PTR _this$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002a	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _pts$[ebp], 0
  00031	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _pts$[ebp+4], 0
  00038	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pts$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 288  : 	pts.resize(iStep);

  0003f	8b 75 18	 mov	 esi, DWORD PTR _iStep$[ebp]
  00042	8d 4d d4	 lea	 ecx, DWORD PTR _pts$[ebp]
  00045	56		 push	 esi
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	e8 00 00 00 00	 call	 ?resize@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::resize

; 289  : 
; 290  : 	theta = 0.0;
; 291  : 	delta = 2 * D3DX_PI / float(iStep);

  00052	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c90fdb
  0005a	0f 57 c0	 xorps	 xmm0, xmm0
  0005d	f3 0f 11 45 f0	 movss	 DWORD PTR _theta$1$[ebp], xmm0
  00062	66 0f 6e c6	 movd	 xmm0, esi
  00066	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 292  : 
; 293  : 	const D3DXMATRIX & c_rmatInvView = CCameraManager::Instance().GetCurrentCamera()->GetBillboardMatrix();

  00069	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0006f	f3 0f 5e c8	 divss	 xmm1, xmm0
  00073	f3 0f 11 4d e0	 movss	 DWORD PTR _delta$1$[ebp], xmm1
  00078	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
; File C:\Marty 5.5\Src-Client\Client\EterLib\Camera.h

; 171  : 		const D3DXMATRIX & GetBillboardMatrix()const	{ return m_matBillboard; }

  0007d	05 ec 00 00 00	 add	 eax, 236		; 000000ecH
  00082	89 45 e4	 mov	 DWORD PTR _c_rmatInvView$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 295  : 	for (count=0; count<iStep; count++)

  00085	85 f6		 test	 esi, esi
  00087	7e 74		 jle	 SHORT $LN3@RenderCirc
  00089	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _theta$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0008e	33 ff		 xor	 edi, edi
  00090	89 75 ec	 mov	 DWORD PTR tv728[ebp], esi
$LL4@RenderCirc:

; 1919 :         return _My_data._Myfirst[_Pos];

  00093	8b 75 d4	 mov	 esi, DWORD PTR _pts$[ebp]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  00096	0f 5a c0	 cvtps2pd xmm0, xmm0
  00099	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0009e	0f 57 c9	 xorps	 xmm1, xmm1
  000a1	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 297  : 		pts[count] = D3DXVECTOR3(fRadius * cosf(theta), fRadius * sinf(theta), 0.0f);

  000a5	f3 0f 59 4d 14	 mulss	 xmm1, DWORD PTR _fRadius$[ebp]
  000aa	f3 0f 11 0c 37	 movss	 DWORD PTR [edi+esi], xmm1
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  000af	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _theta$1$[ebp]
  000b4	0f 5a c1	 cvtps2pd xmm0, xmm1
  000b7	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 298  : 		D3DXVec3TransformCoord(&pts[count], &pts[count], &c_rmatInvView);

  000bc	ff 75 e4	 push	 DWORD PTR _c_rmatInvView$1$[ebp]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  000bf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 297  : 		pts[count] = D3DXVECTOR3(fRadius * cosf(theta), fRadius * sinf(theta), 0.0f);

  000c3	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _fRadius$[ebp]
  000c8	f3 0f 11 44 37
	04		 movss	 DWORD PTR [edi+esi+4], xmm0
  000ce	c7 44 37 08 00
	00 00 00	 mov	 DWORD PTR [edi+esi+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  000d6	8b 45 d4	 mov	 eax, DWORD PTR _pts$[ebp]
  000d9	03 c7		 add	 eax, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 298  : 		D3DXVec3TransformCoord(&pts[count], &pts[count], &c_rmatInvView);

  000db	50		 push	 eax
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 299  : 
; 300  : 		theta += delta;

  000e2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _delta$1$[ebp]
  000e7	83 c7 0c	 add	 edi, 12			; 0000000cH
  000ea	83 6d ec 01	 sub	 DWORD PTR tv728[ebp], 1
  000ee	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _theta$1$[ebp]
  000f3	f3 0f 11 45 f0	 movss	 DWORD PTR _theta$1$[ebp], xmm0
  000f8	75 99		 jne	 SHORT $LL4@RenderCirc
  000fa	8b 75 18	 mov	 esi, DWORD PTR _iStep$[ebp]
$LN3@RenderCirc:

; 301  : 	}
; 302  : 	for (count=0; count<iStep - 1; count++)

  000fd	8d 7e ff	 lea	 edi, DWORD PTR [esi-1]
  00100	85 ff		 test	 edi, edi
  00102	0f 8e 85 00 00
	00		 jle	 $LN6@RenderCirc
  00108	33 f6		 xor	 esi, esi
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL7@RenderCirc:

; 303  : 	{
; 304  : 		RenderLine3d(fx+pts[count].x, fy+pts[count].y, fz+pts[count].z,

  00110	8b 45 d4	 mov	 eax, DWORD PTR _pts$[ebp]
  00113	83 ec 18	 sub	 esp, 24			; 00000018H
  00116	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0011b	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0011e	f3 0f 58 44 06
	14		 addss	 xmm0, DWORD PTR [esi+eax+20]
  00124	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0012a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0012f	f3 0f 58 44 06
	10		 addss	 xmm0, DWORD PTR [esi+eax+16]
  00135	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0013b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00140	f3 0f 58 44 06
	0c		 addss	 xmm0, DWORD PTR [esi+eax+12]
  00146	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0014c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00151	f3 0f 58 44 06
	08		 addss	 xmm0, DWORD PTR [esi+eax+8]
  00157	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0015d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00162	f3 0f 58 44 06
	04		 addss	 xmm0, DWORD PTR [esi+eax+4]
  00168	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0016e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00173	f3 0f 58 04 06	 addss	 xmm0, DWORD PTR [esi+eax]
  00178	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017d	e8 00 00 00 00	 call	 ?RenderLine3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderLine3d
  00182	83 c6 0c	 add	 esi, 12			; 0000000cH
  00185	83 ef 01	 sub	 edi, 1
  00188	75 86		 jne	 SHORT $LL7@RenderCirc
  0018a	8b 75 18	 mov	 esi, DWORD PTR _iStep$[ebp]
$LN6@RenderCirc:

; 305  : 					 fx+pts[count + 1].x, fy+pts[count + 1].y, fz+pts[count + 1].z);
; 306  : 	}
; 307  : 	RenderLine3d(fx+pts[iStep - 1].x, fy+pts[iStep - 1].y, fz+pts[iStep - 1].z,

  0018d	8b 45 d4	 mov	 eax, DWORD PTR _pts$[ebp]
  00190	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  00193	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fz$[ebp]
  00198	83 ec 18	 sub	 esp, 24			; 00000018H
  0019b	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _fy$[ebp]
  001a0	0f 28 c1	 movaps	 xmm0, xmm1
  001a3	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fx$[ebp]
  001a8	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  001ad	f3 0f 58 4c 88
	fc		 addss	 xmm1, DWORD PTR [eax+ecx*4-4]
  001b3	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  001b9	0f 28 c2	 movaps	 xmm0, xmm2
  001bc	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  001c1	f3 0f 58 54 88
	f8		 addss	 xmm2, DWORD PTR [eax+ecx*4-8]
  001c7	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  001cd	0f 28 c3	 movaps	 xmm0, xmm3
  001d0	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  001d4	f3 0f 58 5c 88
	f4		 addss	 xmm3, DWORD PTR [eax+ecx*4-12]
  001da	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001dd	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  001e3	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  001e9	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  001ef	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  001f4	e8 00 00 00 00	 call	 ?RenderLine3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderLine3d

; 308  : 				 fx+pts[0].x, fy+pts[0].y, fz+pts[0].z);
; 309  : }

  001f9	8d 4d d4	 lea	 ecx, DWORD PTR _pts$[ebp]
  001fc	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  00201	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00204	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0020b	59		 pop	 ecx
  0020c	5f		 pop	 edi
  0020d	5e		 pop	 esi
  0020e	8b e5		 mov	 esp, ebp
  00210	5d		 pop	 ebp
  00211	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderCircle3d@CScreen@@QAEXMMMMH@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _pts$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RenderCircle3d@CScreen@@QAEXMMMMH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderCircle3d@CScreen@@QAEXMMMMH@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderCircle3d@CScreen@@QAEXMMMMH@Z ENDP		; CScreen::RenderCircle3d
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderCircle2d@CScreen@@QAEXMMMMH@Z
_TEXT	SEGMENT
_pts$ = -40						; size = 12
_delta$1$ = -28						; size = 4
_this$1$ = -24						; size = 4
tv612 = -20						; size = 4
_theta$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_fRadius$ = 20						; size = 4
_iStep$ = 24						; size = 4
?RenderCircle2d@CScreen@@QAEXMMMMH@Z PROC		; CScreen::RenderCircle2d, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RenderCircle2d@CScreen@@QAEXMMMMH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	89 4d e8	 mov	 DWORD PTR _this$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002a	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _pts$[ebp], 0
  00031	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pts$[ebp+4], 0
  00038	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _pts$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 259  : 	pts.resize(iStep);

  0003f	8b 75 18	 mov	 esi, DWORD PTR _iStep$[ebp]
  00042	8d 4d d8	 lea	 ecx, DWORD PTR _pts$[ebp]
  00045	56		 push	 esi
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	e8 00 00 00 00	 call	 ?resize@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::resize

; 260  : 
; 261  : 	theta = 0.0;
; 262  : 	delta = 2 * D3DX_PI / float(iStep);

  00052	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c90fdb
  0005a	0f 57 d2	 xorps	 xmm2, xmm2
  0005d	66 0f 6e c6	 movd	 xmm0, esi
  00061	f3 0f 11 55 f0	 movss	 DWORD PTR _theta$1$[ebp], xmm2
  00066	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00069	f3 0f 5e c8	 divss	 xmm1, xmm0
  0006d	f3 0f 11 4d e4	 movss	 DWORD PTR _delta$1$[ebp], xmm1

; 263  : 
; 264  : 	for (count=0; count<iStep; count++)

  00072	85 f6		 test	 esi, esi
  00074	7e 72		 jle	 SHORT $LN3@RenderCirc
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00076	33 ff		 xor	 edi, edi
  00078	89 75 ec	 mov	 DWORD PTR tv612[ebp], esi
  0007b	0f 1f 44 00 00	 npad	 5
$LL4@RenderCirc:

; 1919 :         return _My_data._Myfirst[_Pos];

  00080	8b 75 d8	 mov	 esi, DWORD PTR _pts$[ebp]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  00083	0f 5a c2	 cvtps2pd xmm0, xmm2
  00086	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0008b	0f 57 c9	 xorps	 xmm1, xmm1
  0008e	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 266  : 		x = fx + fRadius * cosf(theta);

  00092	f3 0f 59 4d 14	 mulss	 xmm1, DWORD PTR _fRadius$[ebp]
  00097	f3 0f 58 4d 08	 addss	 xmm1, DWORD PTR _fx$[ebp]

; 267  : 		y = fy + fRadius * sinf(theta);
; 268  : 		z = fz;
; 269  : 
; 270  : 		pts[count] = D3DXVECTOR3(x, y, z);

  0009c	f3 0f 11 0c 37	 movss	 DWORD PTR [edi+esi], xmm1
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  000a1	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _theta$1$[ebp]
  000a6	0f 5a c1	 cvtps2pd xmm0, xmm1
  000a9	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 272  : 		theta += delta;

  000ae	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _theta$1$[ebp]
  000b3	f3 0f 58 55 e4	 addss	 xmm2, DWORD PTR _delta$1$[ebp]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  000b8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp

; 272  : 		theta += delta;

  000bc	f3 0f 11 55 f0	 movss	 DWORD PTR _theta$1$[ebp], xmm2
  000c1	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _fRadius$[ebp]
  000c6	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _fy$[ebp]
  000cb	f3 0f 11 44 37
	04		 movss	 DWORD PTR [edi+esi+4], xmm0
  000d1	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  000d6	f3 0f 11 44 37
	08		 movss	 DWORD PTR [edi+esi+8], xmm0
  000dc	83 c7 0c	 add	 edi, 12			; 0000000cH
  000df	83 6d ec 01	 sub	 DWORD PTR tv612[ebp], 1
  000e3	75 9b		 jne	 SHORT $LL4@RenderCirc
  000e5	8b 75 18	 mov	 esi, DWORD PTR _iStep$[ebp]
$LN3@RenderCirc:

; 273  : 	}
; 274  : 	for (count=0; count<iStep - 1; count++)

  000e8	8d 7e ff	 lea	 edi, DWORD PTR [esi-1]
  000eb	85 ff		 test	 edi, edi
  000ed	7e 3b		 jle	 SHORT $LN6@RenderCirc
  000ef	33 f6		 xor	 esi, esi
$LL7@RenderCirc:

; 275  : 	{
; 276  : 		RenderLine3d(pts[count].x, pts[count].y, pts[count].z, pts[count + 1].x, pts[count + 1].y, pts[count + 1].z);

  000f1	8b 45 d8	 mov	 eax, DWORD PTR _pts$[ebp]
  000f4	83 ec 18	 sub	 esp, 24			; 00000018H
  000f7	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000fa	0f 10 44 06 08	 movups	 xmm0, XMMWORD PTR [esi+eax+8]
  000ff	0f 11 44 24 08	 movups	 XMMWORD PTR [esp+8], xmm0
  00104	f3 0f 10 44 06
	04		 movss	 xmm0, DWORD PTR [esi+eax+4]
  0010a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00110	f3 0f 10 04 06	 movss	 xmm0, DWORD PTR [esi+eax]
  00115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011a	e8 00 00 00 00	 call	 ?RenderLine3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderLine3d
  0011f	8d 76 0c	 lea	 esi, DWORD PTR [esi+12]
  00122	83 ef 01	 sub	 edi, 1
  00125	75 ca		 jne	 SHORT $LL7@RenderCirc
  00127	8b 75 18	 mov	 esi, DWORD PTR _iStep$[ebp]
$LN6@RenderCirc:

; 277  : 	}
; 278  : 	RenderLine3d(pts[iStep - 1].x, pts[iStep - 1].y, pts[iStep - 1].z, pts[0].x, pts[0].y, pts[0].z);

  0012a	8b 45 d8	 mov	 eax, DWORD PTR _pts$[ebp]
  0012d	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
  00130	83 ec 18	 sub	 esp, 24			; 00000018H
  00133	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00138	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0013e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00143	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00149	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0014d	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00153	f3 0f 10 44 88
	fc		 movss	 xmm0, DWORD PTR [eax+ecx*4-4]
  00159	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0015f	f3 0f 10 44 88
	f8		 movss	 xmm0, DWORD PTR [eax+ecx*4-8]
  00165	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0016b	f3 0f 10 44 88
	f4		 movss	 xmm0, DWORD PTR [eax+ecx*4-12]
  00171	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00179	e8 00 00 00 00	 call	 ?RenderLine3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderLine3d

; 279  : }

  0017e	8d 4d d8	 lea	 ecx, DWORD PTR _pts$[ebp]
  00181	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  00186	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00189	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00190	59		 pop	 ecx
  00191	5f		 pop	 edi
  00192	5e		 pop	 esi
  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderCircle2d@CScreen@@QAEXMMMMH@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _pts$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RenderCircle2d@CScreen@@QAEXMMMMH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderCircle2d@CScreen@@QAEXMMMMH@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderCircle2d@CScreen@@QAEXMMMMH@Z ENDP		; CScreen::RenderCircle2d
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderGradationBar2d@CScreen@@QAEXMMMMKKM@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
_dwStartColor$ = 24					; size = 4
_dwEndColor$ = 28					; size = 4
_ez$ = 32						; size = 4
?RenderGradationBar2d@CScreen@@QAEXMMMMKKM@Z PROC	; CScreen::RenderGradationBar2d, COMDAT
; _this$ = ecx

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 248  : 	RenderGradationBar3d(sx, sy, ez, ex, ey, ez, dwStartColor, dwEndColor);

  00003	ff 75 1c	 push	 DWORD PTR _dwEndColor$[ebp]
  00006	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _ez$[ebp]
  0000b	ff 75 18	 push	 DWORD PTR _dwStartColor$[ebp]
  0000e	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00013	83 ec 18	 sub	 esp, 24			; 00000018H
  00016	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  0001c	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00022	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00027	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00032	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00038	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0003e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00043	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00048	e8 00 00 00 00	 call	 ?RenderGradationBar3d@CScreen@@QAEXMMMMMMKK@Z ; CScreen::RenderGradationBar3d

; 249  : }

  0004d	5d		 pop	 ebp
  0004e	c2 1c 00	 ret	 28			; 0000001cH
?RenderGradationBar2d@CScreen@@QAEXMMMMKKM@Z ENDP	; CScreen::RenderGradationBar2d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderBar2d@CScreen@@QAEXMMMMM@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
_z$ = 24						; size = 4
?RenderBar2d@CScreen@@QAEXMMMMM@Z PROC			; CScreen::RenderBar2d, COMDAT
; _this$ = ecx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 243  : 	RenderBar3d(sx, sy, z, ex, ey, z);

  00003	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _z$[ebp]
  00008	83 ec 18	 sub	 esp, 24			; 00000018H
  0000b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00010	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  00016	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0001c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00021	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00027	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0002c	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00032	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 ?RenderBar3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderBar3d

; 244  : }

  00047	5d		 pop	 ebp
  00048	c2 14 00	 ret	 20			; 00000014H
?RenderBar2d@CScreen@@QAEXMMMMM@Z ENDP			; CScreen::RenderBar2d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderBox2d@CScreen@@QAEXMMMMM@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
_z$ = 24						; size = 4
?RenderBox2d@CScreen@@QAEXMMMMM@Z PROC			; CScreen::RenderBox2d, COMDAT
; _this$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 238  : 	RenderBox3d(sx, sy, z, ex, ey, z);

  00003	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _z$[ebp]
  00008	83 ec 18	 sub	 esp, 24			; 00000018H
  0000b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00010	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  00016	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0001c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00021	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00027	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0002c	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00032	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 ?RenderBox3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderBox3d

; 239  : }

  00047	5d		 pop	 ebp
  00048	c2 14 00	 ret	 20			; 00000014H
?RenderBox2d@CScreen@@QAEXMMMMM@Z ENDP			; CScreen::RenderBox2d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?RenderLine2d@CScreen@@QAEXMMMMM@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
_z$ = 24						; size = 4
?RenderLine2d@CScreen@@QAEXMMMMM@Z PROC			; CScreen::RenderLine2d, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  : 	RenderLine3d(sx, sy, z, ex, ey, z);

  00003	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _z$[ebp]
  00008	83 ec 18	 sub	 esp, 24			; 00000018H
  0000b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00010	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  00016	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0001c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00021	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00027	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0002c	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00032	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 ?RenderLine3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderLine3d

; 234  : }

  00047	5d		 pop	 ebp
  00048	c2 14 00	 ret	 20			; 00000014H
?RenderLine2d@CScreen@@QAEXMMMMM@Z ENDP			; CScreen::RenderLine2d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?Show@CScreen@@QAEXPAUtagRECT@@PAUHWND__@@@Z
_TEXT	SEGMENT
_pSrcRect$ = 8						; size = 4
_hWnd$ = 12						; size = 4
?Show@CScreen@@QAEXPAUtagRECT@@PAUHWND__@@@Z PROC	; CScreen::Show, COMDAT
; _this$ = ecx

; 741  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 742  : 	assert(ms_lpd3dDevice != NULL);
; 743  : 	ms_lpd3dDevice->Present(pSrcRect, NULL, hWnd, NULL);

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _hWnd$[ebp]
  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	6a 00		 push	 0
  00011	ff 75 08	 push	 DWORD PTR _pSrcRect$[ebp]
  00014	50		 push	 eax
  00015	ff 51 3c	 call	 DWORD PTR [ecx+60]

; 744  : }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?Show@CScreen@@QAEXPAUtagRECT@@PAUHWND__@@@Z ENDP	; CScreen::Show
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?Show@CScreen@@QAEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_pSrcRect$ = 8						; size = 4
?Show@CScreen@@QAEXPAUtagRECT@@@Z PROC			; CScreen::Show, COMDAT
; _this$ = ecx

; 735  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 736  : 	assert(ms_lpd3dDevice != NULL);
; 737  : 	ms_lpd3dDevice->Present(pSrcRect, NULL, NULL, NULL);

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 00		 push	 0
  0000e	ff 75 08	 push	 DWORD PTR _pSrcRect$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	50		 push	 eax
  00014	ff 51 3c	 call	 DWORD PTR [ecx+60]

; 738  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?Show@CScreen@@QAEXPAUtagRECT@@@Z ENDP			; CScreen::Show
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?Show@CScreen@@QAEXPAUHWND__@@@Z
_TEXT	SEGMENT
_rcRight$1 = -68					; size = 16
_rcLeft$2 = -52						; size = 16
_rcBottom$3 = -36					; size = 16
_rcTop$4 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
?Show@CScreen@@QAEXPAUHWND__@@@Z PROC			; CScreen::Show, COMDAT
; _this$ = ecx

; 711  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 712  : 	assert(ms_lpd3dDevice != NULL);
; 713  : 
; 714  : 	if (g_isBrowserMode)

  00010	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_isBrowserMode@@3_NA, 0 ; g_isBrowserMode
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _hWnd$[ebp]
  0001c	8b f1		 mov	 esi, ecx
  0001e	6a 00		 push	 0
  00020	57		 push	 edi
  00021	0f 84 bc 00 00
	00		 je	 $LN2@Show

; 715  : 	{
; 716  : 		RECT rcTop={0, 0, ms_d3dPresentParameter.BackBufferWidth, g_rcBrowser.top};
; 717  : 		RECT rcBottom={0, g_rcBrowser.bottom, ms_d3dPresentParameter.BackBufferWidth, ms_d3dPresentParameter.BackBufferHeight};

  00027	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+4
  0002c	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?g_rcBrowser@@3UtagRECT@@A+4
  00032	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?g_rcBrowser@@3UtagRECT@@A+12
  00038	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A
  0003e	89 45 e8	 mov	 DWORD PTR _rcBottom$3[ebp+12], eax

; 718  : 		RECT rcLeft={0, g_rcBrowser.top, g_rcBrowser.left, g_rcBrowser.bottom};

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_rcBrowser@@3UtagRECT@@A
  00046	89 45 d4	 mov	 DWORD PTR _rcLeft$2[ebp+8], eax

; 719  : 		RECT rcRight={g_rcBrowser.right, g_rcBrowser.top, ms_d3dPresentParameter.BackBufferWidth, g_rcBrowser.bottom};

  00049	a1 08 00 00 00	 mov	 eax, DWORD PTR ?g_rcBrowser@@3UtagRECT@@A+8
  0004e	89 45 bc	 mov	 DWORD PTR _rcRight$1[ebp], eax

; 720  : 
; 721  : 		ms_lpd3dDevice->Present(&rcTop, &rcTop, hWnd, NULL);

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00056	89 55 f8	 mov	 DWORD PTR _rcTop$4[ebp+12], edx
  00059	89 55 d0	 mov	 DWORD PTR _rcLeft$2[ebp+4], edx
  0005c	89 55 c0	 mov	 DWORD PTR _rcRight$1[ebp+4], edx
  0005f	8d 55 ec	 lea	 edx, DWORD PTR _rcTop$4[ebp]
  00062	52		 push	 edx
  00063	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _rcTop$4[ebp], 0
  0006a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _rcTop$4[ebp+4], 0
  00071	89 75 f4	 mov	 DWORD PTR _rcTop$4[ebp+8], esi
  00074	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _rcBottom$3[ebp], 0
  0007b	89 4d e0	 mov	 DWORD PTR _rcBottom$3[ebp+4], ecx
  0007e	89 75 e4	 mov	 DWORD PTR _rcBottom$3[ebp+8], esi
  00081	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _rcLeft$2[ebp], 0
  00088	89 4d d8	 mov	 DWORD PTR _rcLeft$2[ebp+12], ecx
  0008b	89 75 c4	 mov	 DWORD PTR _rcRight$1[ebp+8], esi
  0008e	89 4d c8	 mov	 DWORD PTR _rcRight$1[ebp+12], ecx
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	52		 push	 edx
  00094	50		 push	 eax
  00095	ff 51 3c	 call	 DWORD PTR [ecx+60]

; 722  : 		ms_lpd3dDevice->Present(&rcBottom, &rcBottom, hWnd, NULL);

  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0009d	8d 55 dc	 lea	 edx, DWORD PTR _rcBottom$3[ebp]
  000a0	6a 00		 push	 0
  000a2	57		 push	 edi
  000a3	52		 push	 edx
  000a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a6	52		 push	 edx
  000a7	50		 push	 eax
  000a8	ff 51 3c	 call	 DWORD PTR [ecx+60]

; 723  : 		ms_lpd3dDevice->Present(&rcLeft, &rcLeft, hWnd, NULL);

  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000b0	8d 55 cc	 lea	 edx, DWORD PTR _rcLeft$2[ebp]
  000b3	6a 00		 push	 0
  000b5	57		 push	 edi
  000b6	52		 push	 edx
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	52		 push	 edx
  000ba	50		 push	 eax
  000bb	ff 51 3c	 call	 DWORD PTR [ecx+60]

; 724  : 		ms_lpd3dDevice->Present(&rcRight, &rcRight, hWnd, NULL);

  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000c3	8d 55 bc	 lea	 edx, DWORD PTR _rcRight$1[ebp]
  000c6	6a 00		 push	 0
  000c8	57		 push	 edi
  000c9	52		 push	 edx
  000ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cc	52		 push	 edx
  000cd	50		 push	 eax
  000ce	ff 51 3c	 call	 DWORD PTR [ecx+60]
  000d1	5f		 pop	 edi

; 731  : 	}
; 732  : }

  000d2	5e		 pop	 esi
  000d3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d6	33 cd		 xor	 ecx, ebp
  000d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 04 00	 ret	 4
$LN2@Show:

; 725  : 	}
; 726  : 	else
; 727  : 	{
; 728  : 		HRESULT hr=ms_lpd3dDevice->Present(NULL, NULL, hWnd, NULL);

  000e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000e9	6a 00		 push	 0
  000eb	6a 00		 push	 0
  000ed	51		 push	 ecx
  000ee	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f0	ff 50 3c	 call	 DWORD PTR [eax+60]

; 729  : 		if (D3DERR_DEVICELOST == hr)

  000f3	3d 68 08 76 88	 cmp	 eax, -2005530520	; 88760868H
  000f8	75 07		 jne	 SHORT $LN4@Show

; 730  : 			RestoreDevice();

  000fa	8b ce		 mov	 ecx, esi
  000fc	e8 00 00 00 00	 call	 ?RestoreDevice@CScreen@@QAEHXZ ; CScreen::RestoreDevice
$LN4@Show:

; 731  : 	}
; 732  : }

  00101	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00104	5f		 pop	 edi
  00105	33 cd		 xor	 ecx, ebp
  00107	5e		 pop	 esi
  00108	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 04 00	 ret	 4
?Show@CScreen@@QAEXPAUHWND__@@@Z ENDP			; CScreen::Show
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?End@CScreen@@QAEXXZ
_TEXT	SEGMENT
?End@CScreen@@QAEXXZ PROC				; CScreen::End, COMDAT
; _this$ = ecx

; 704  : 	STATEMANAGER.EndScene();

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00006	e9 00 00 00 00	 jmp	 ?EndScene@CStateManager@@QAEXXZ ; CStateManager::EndScene
?End@CScreen@@QAEXXZ ENDP				; CScreen::End
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?Begin@CScreen@@QAE_NXZ
_TEXT	SEGMENT
?Begin@CScreen@@QAE_NXZ PROC				; CScreen::Begin, COMDAT
; _this$ = ecx

; 690  : 	assert(ms_lpd3dDevice != NULL);
; 691  : 	ResetFaceCount();

  00000	e8 00 00 00 00	 call	 ?ResetFaceCount@CGraphicBase@@QAEXXZ ; CGraphicBase::ResetFaceCount

; 692  : 
; 693  : 	if (!STATEMANAGER.BeginScene())

  00005	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0000b	e8 00 00 00 00	 call	 ?BeginScene@CStateManager@@QAE_NXZ ; CStateManager::BeginScene
  00010	84 c0		 test	 al, al
  00012	75 10		 jne	 SHORT $LN2@Begin

; 694  : 	{
; 695  : 		Tracenf("BeginScene FAILED\n");

  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HBCJANMB@BeginScene?5FAILED?6@
  00019	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  0001e	83 c4 04	 add	 esp, 4

; 696  : 		return false;

  00021	32 c0		 xor	 al, al

; 700  : }

  00023	c3		 ret	 0
$LN2@Begin:

; 697  : 	}
; 698  : 
; 699  : 	return true;

  00024	b0 01		 mov	 al, 1

; 700  : }

  00026	c3		 ret	 0
?Begin@CScreen@@QAE_NXZ ENDP				; CScreen::Begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?Clear@CScreen@@QAEXXZ
_TEXT	SEGMENT
?Clear@CScreen@@QAEXXZ PROC				; CScreen::Clear, COMDAT
; _this$ = ecx

; 622  : 	assert(ms_lpd3dDevice != NULL);
; 623  : 	ms_lpd3dDevice->Clear(0L, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, ms_clearColor, ms_clearDepth, ms_clearStencil);

  00000	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_clearStencil@CScreen@@1KA ; CScreen::ms_clearStencil
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0000b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_clearDepth@CScreen@@1MA
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	51		 push	 ecx
  00016	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001b	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_clearColor@CScreen@@1KA ; CScreen::ms_clearColor
  00021	6a 03		 push	 3
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	50		 push	 eax
  00028	ff 91 90 00 00
	00		 call	 DWORD PTR [ecx+144]

; 624  : }

  0002e	c3		 ret	 0
?Clear@CScreen@@QAEXXZ ENDP				; CScreen::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ?ClearDepthBuffer@CScreen@@QAEXXZ
_TEXT	SEGMENT
?ClearDepthBuffer@CScreen@@QAEXXZ PROC			; CScreen::ClearDepthBuffer, COMDAT
; _this$ = ecx

; 616  : 	assert(ms_lpd3dDevice != NULL);
; 617  : 	ms_lpd3dDevice->Clear(0L, NULL, D3DCLEAR_ZBUFFER, ms_clearColor, ms_clearDepth, ms_clearStencil);

  00000	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_clearStencil@CScreen@@1KA ; CScreen::ms_clearStencil
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0000b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_clearDepth@CScreen@@1MA
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	51		 push	 ecx
  00016	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001b	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_clearColor@CScreen@@1KA ; CScreen::ms_clearColor
  00021	6a 02		 push	 2
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	50		 push	 eax
  00028	ff 91 90 00 00
	00		 call	 DWORD PTR [ecx+144]

; 618  : }

  0002e	c3		 ret	 0
?ClearDepthBuffer@CScreen@@QAEXXZ ENDP			; CScreen::ClearDepthBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ??1CScreen@@UAE@XZ
_TEXT	SEGMENT
??1CScreen@@UAE@XZ PROC					; CScreen::~CScreen, COMDAT
; _this$ = ecx

; 882  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CScreen@@6B@

; 883  : }

  00006	e9 00 00 00 00	 jmp	 ??1CGraphicCollisionObject@@UAE@XZ ; CGraphicCollisionObject::~CGraphicCollisionObject
??1CScreen@@UAE@XZ ENDP					; CScreen::~CScreen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpScreen.cpp
;	COMDAT ??0CScreen@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CScreen@@QAE@XZ PROC					; CScreen::CScreen, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CGraphicCollisionObject@@QAE@XZ ; CGraphicCollisionObject::CGraphicCollisionObject
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CScreen@@6B@

; 879  : }

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??0CScreen@@QAE@XZ ENDP					; CScreen::CScreen
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0SPDTVertex@@QAE@XZ
_TEXT	SEGMENT
??0SPDTVertex@@QAE@XZ PROC				; SPDTVertex::SPDTVertex, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SPDTVertex@@QAE@XZ ENDP				; SPDTVertex::SPDTVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXPLANE@@QAE@XZ
_TEXT	SEGMENT
??0D3DXPLANE@@QAE@XZ PROC				; D3DXPLANE::D3DXPLANE, COMDAT
; _this$ = ecx

; 377  :     D3DXPLANE() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXPLANE@@QAE@XZ ENDP				; D3DXPLANE::D3DXPLANE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
