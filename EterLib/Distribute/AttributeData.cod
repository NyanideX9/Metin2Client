; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\AttributeData.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?c_szAttributeDataFileHeader@@3QBDB DB 'AttributeData', 00H ; c_szAttributeDataFileHeader
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
PUBLIC	?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
PUBLIC	?Type@CAttributeData@@SAKXZ			; CAttributeData::Type
PUBLIC	??0CAttributeData@@QAE@PBD@Z			; CAttributeData::CAttributeData
PUBLIC	??1CAttributeData@@UAE@XZ			; CAttributeData::~CAttributeData
PUBLIC	?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ ; CAttributeData::GetCollisionDataVector
PUBLIC	?GetHeightDataVector@CAttributeData@@QBEABV?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@XZ ; CAttributeData::GetHeightDataVector
PUBLIC	?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z ; CAttributeData::AddCollisionData
PUBLIC	?GetHeightDataCount@CAttributeData@@QBEKXZ	; CAttributeData::GetHeightDataCount
PUBLIC	?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z ; CAttributeData::GetHeightDataPointer
PUBLIC	?GetMaximizeRadius@CAttributeData@@QAEMXZ	; CAttributeData::GetMaximizeRadius
PUBLIC	?OnLoad@CAttributeData@@MAE_NHPBX@Z		; CAttributeData::OnLoad
PUBLIC	?OnClear@CAttributeData@@MAEXXZ			; CAttributeData::OnClear
PUBLIC	?OnIsEmpty@CAttributeData@@MBE_NXZ		; CAttributeData::OnIsEmpty
PUBLIC	?OnIsType@CAttributeData@@MAE_NK@Z		; CAttributeData::OnIsType
PUBLIC	?OnSelfDestruct@CAttributeData@@MAEXXZ		; CAttributeData::OnSelfDestruct
PUBLIC	??1?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAE@XZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::~vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >
PUBLIC	?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array
PUBLIC	?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength
PUBLIC	??1?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@QAE@XZ ; std::vector<SHeightData,std::allocator<SHeightData> >::~vector<SHeightData,std::allocator<SHeightData> >
PUBLIC	?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ ; std::vector<SHeightData,std::allocator<SHeightData> >::_Xlength
PUBLIC	??_GCAttributeData@@UAEPAXI@Z			; CAttributeData::`scalar deleting destructor'
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SHeightData,std::allocator<SHeightData> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >
PUBLIC	??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEPAVCStaticCollisionData@@QAV2@ABV2@@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Emplace_reallocate<CStaticCollisionData const &>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z ; std::_Copy_memmove<CStaticCollisionData *,CStaticCollisionData *>
PUBLIC	??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
PUBLIC	??$_Copy_memmove_tail@PAVCStaticCollisionData@@@std@@YAPAVCStaticCollisionData@@QBDQAV1@II@Z ; std::_Copy_memmove_tail<CStaticCollisionData *>
PUBLIC	??$_Copy_memmove_tail@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<D3DXVECTOR3 *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_7CAttributeData@@6B@				; CAttributeData::`vftable'
PUBLIC	??_C@_0P@COGNDLAI@CAttributeData@		; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CAttributeData@@6B@			; CAttributeData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCAttributeData@@@8			; CAttributeData `RTTI Type Descriptor'
PUBLIC	??_R3CAttributeData@@8				; CAttributeData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAttributeData@@8				; CAttributeData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAttributeData@@8			; CAttributeData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CResource@@8			; CResource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCResource@@@8				; CResource `RTTI Type Descriptor'
PUBLIC	??_R3CResource@@8				; CResource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CResource@@8				; CResource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CReferenceObject@@8		; CReferenceObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCReferenceObject@@@8			; CReferenceObject `RTTI Type Descriptor'
PUBLIC	??_R3CReferenceObject@@8			; CReferenceObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CReferenceObject@@8			; CReferenceObject::`RTTI Base Class Array'
PUBLIC	__real@4049000000000000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?fMAX@@YAMMM@Z:PROC				; fMAX
EXTRN	?Clear@CResource@@QAEXXZ:PROC			; CResource::Clear
EXTRN	?StringToType@CResource@@SAKPBD@Z:PROC		; CResource::StringToType
EXTRN	?CreateDeviceObjects@CResource@@UAE_NXZ:PROC	; CResource::CreateDeviceObjects
EXTRN	?DestroyDeviceObjects@CResource@@UAEXXZ:PROC	; CResource::DestroyDeviceObjects
EXTRN	??0CResource@@QAE@PBD@Z:PROC			; CResource::CResource
EXTRN	??1CResource@@UAE@XZ:PROC			; CResource::~CResource
EXTRN	?OnIsType@CResource@@MAE_NK@Z:PROC		; CResource::OnIsType
EXTRN	?OnConstruct@CResource@@MAEXXZ:PROC		; CResource::OnConstruct
EXTRN	??_ECAttributeData@@UAEPAXI@Z:PROC		; CAttributeData::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?s_type@?1??Type@CAttributeData@@SAKXZ@4KA
_BSS	SEGMENT
?s_type@?1??Type@CAttributeData@@SAKXZ@4KA DD 01H DUP (?) ; `CAttributeData::Type'::`2'::s_type
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA DD 01H DUP (?) ; `CAttributeData::Type'::`2'::$TSS0
_BSS	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@4049000000000000
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
CONST	ENDS
;	COMDAT ??_R2CReferenceObject@@8
rdata$r	SEGMENT
??_R2CReferenceObject@@8 DD FLAT:??_R1A@?0A@EA@CReferenceObject@@8 ; CReferenceObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CReferenceObject@@8
rdata$r	SEGMENT
??_R3CReferenceObject@@8 DD 00H				; CReferenceObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCReferenceObject@@@8
data$rs	SEGMENT
??_R0?AVCReferenceObject@@@8 DD FLAT:??_7type_info@@6B@	; CReferenceObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCReferenceObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CReferenceObject@@8 DD FLAT:??_R0?AVCReferenceObject@@@8 ; CReferenceObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CResource@@8
rdata$r	SEGMENT
??_R2CResource@@8 DD FLAT:??_R1A@?0A@EA@CResource@@8	; CResource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CResource@@8
rdata$r	SEGMENT
??_R3CResource@@8 DD 00H				; CResource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CResource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCResource@@@8
data$rs	SEGMENT
??_R0?AVCResource@@@8 DD FLAT:??_7type_info@@6B@	; CResource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCResource@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CResource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CResource@@8 DD FLAT:??_R0?AVCResource@@@8 ; CResource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CResource@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CAttributeData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAttributeData@@8 DD FLAT:??_R0?AVCAttributeData@@@8 ; CAttributeData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAttributeData@@8
rdata$r	ENDS
;	COMDAT ??_R2CAttributeData@@8
rdata$r	SEGMENT
??_R2CAttributeData@@8 DD FLAT:??_R1A@?0A@EA@CAttributeData@@8 ; CAttributeData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CResource@@8
	DD	FLAT:??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CAttributeData@@8
rdata$r	SEGMENT
??_R3CAttributeData@@8 DD 00H				; CAttributeData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CAttributeData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAttributeData@@@8
data$rs	SEGMENT
??_R0?AVCAttributeData@@@8 DD FLAT:??_7type_info@@6B@	; CAttributeData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAttributeData@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CAttributeData@@6B@
rdata$r	SEGMENT
??_R4CAttributeData@@6B@ DD 00H				; CAttributeData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCAttributeData@@@8
	DD	FLAT:??_R3CAttributeData@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@COGNDLAI@CAttributeData@
CONST	SEGMENT
??_C@_0P@COGNDLAI@CAttributeData@ DB 'CAttributeData', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CAttributeData@@6B@
CONST	SEGMENT
??_7CAttributeData@@6B@ DD FLAT:??_R4CAttributeData@@6B@ ; CAttributeData::`vftable'
	DD	FLAT:??_ECAttributeData@@UAEPAXI@Z
	DD	FLAT:?OnConstruct@CResource@@MAEXXZ
	DD	FLAT:?OnSelfDestruct@CAttributeData@@MAEXXZ
	DD	FLAT:?CreateDeviceObjects@CResource@@UAE_NXZ
	DD	FLAT:?DestroyDeviceObjects@CResource@@UAEXXZ
	DD	FLAT:?OnLoad@CAttributeData@@MAE_NHPBX@Z
	DD	FLAT:?OnClear@CAttributeData@@MAEXXZ
	DD	FLAT:?OnIsEmpty@CAttributeData@@MBE_NXZ
	DD	FLAT:?OnIsType@CAttributeData@@MAE_NK@Z
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Type@CAttributeData@@SAKXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Type@CAttributeData@@SAKXZ$0
__ehfuncinfo$?Type@CAttributeData@@SAKXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Type@CAttributeData@@SAKXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@QBDQAU1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@QBDQAU1@II@Z PROC ; std::_Copy_memmove_tail<D3DXVECTOR3 *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@QBDQAU1@II@Z ENDP ; std::_Copy_memmove_tail<D3DXVECTOR3 *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAVCStaticCollisionData@@@std@@YAPAVCStaticCollisionData@@QBDQAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAVCStaticCollisionData@@@std@@YAPAVCStaticCollisionData@@QBDQAV1@II@Z PROC ; std::_Copy_memmove_tail<CStaticCollisionData *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAVCStaticCollisionData@@@std@@YAPAVCStaticCollisionData@@QBDQAV1@II@Z ENDP ; std::_Copy_memmove_tail<CStaticCollisionData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z PROC ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  0000e	f7 e9		 imul	 ecx
  00010	d1 fa		 sar	 edx, 1
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAUD3DXVECTOR3@@@std@@YAPAUD3DXVECTOR3@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<D3DXVECTOR3 *>
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ENDP ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z PROC ; std::_Copy_memmove<CStaticCollisionData *,CStaticCollisionData *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0000b	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  0000e	f7 e9		 imul	 ecx
  00010	c1 fa 05	 sar	 edx, 5
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00022	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAVCStaticCollisionData@@@std@@YAPAVCStaticCollisionData@@QBDQAV1@II@Z ; std::_Copy_memmove_tail<CStaticCollisionData *>
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z ENDP ; std::_Copy_memmove<CStaticCollisionData *,CStaticCollisionData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
tv512 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1537 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1538 :         if (_Newsize > max_size()) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	81 fb 55 55 55
	15		 cmp	 ebx, 357913941		; 15555555H
  00012	0f 87 f2 00 00
	00		 ja	 $LN116@Resize_rea

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00018	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00020	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00022	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00024	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00029	d1 fa		 sar	 edx, 1
  0002b	8b ca		 mov	 ecx, edx
  0002d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00030	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00032	8b d1		 mov	 edx, ecx
  00034	d1 ea		 shr	 edx, 1
  00036	2b c2		 sub	 eax, edx
  00038	3b c8		 cmp	 ecx, eax
  0003a	76 14		 jbe	 SHORT $LN6@Resize_rea

; 1997 :             return _Max; // geometric growth would overflow

  0003c	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00041	c7 45 fc fc ff
	ff ff		 mov	 DWORD PTR tv512[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0004e	eb 3e		 jmp	 SHORT $LN114@Resize_rea
$LN6@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00050	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00053	3b c3		 cmp	 eax, ebx
  00055	73 15		 jae	 SHORT $LN7@Resize_rea

; 2003 :             return _Newsize; // geometric growth would be insufficient

  00057	8b c3		 mov	 eax, ebx
$LN17@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  00059	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  0005c	c1 e6 02	 shl	 esi, 2

; 986  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	8b c6		 mov	 eax, esi

; 122  :     return _Count * _Ty_size;

  00061	89 75 fc	 mov	 DWORD PTR tv512[ebp], esi

; 227  :     if (_Bytes == 0) {

  00064	85 c0		 test	 eax, eax
  00066	75 11		 jne	 SHORT $LN21@Resize_rea

; 228  :         return nullptr;

  00068	33 db		 xor	 ebx, ebx
  0006a	eb 27		 jmp	 SHORT $LN31@Resize_rea
$LN7@Resize_rea:

; 117  :         if (_Count > _Max_possible) {

  0006c	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00071	0f 87 98 00 00
	00		 ja	 $LN117@Resize_rea
  00077	eb e0		 jmp	 SHORT $LN17@Resize_rea
$LN21@Resize_rea:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00079	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007e	72 08		 jb	 SHORT $LN22@Resize_rea

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00086	eb 06		 jmp	 SHORT $LN114@Resize_rea
$LN22@Resize_rea:

; 136  :         return ::operator new(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN114@Resize_rea:

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  0008e	8b d8		 mov	 ebx, eax
  00090	83 c4 04	 add	 esp, 4
$LN31@Resize_rea:
  00093	53		 push	 ebx
  00094	ff 77 04	 push	 DWORD PTR [edi+4]
  00097	ff 37		 push	 DWORD PTR [edi]
  00099	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0009e	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	85 f6		 test	 esi, esi
  000a5	74 3f		 je	 SHORT $LN61@Resize_rea

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000a7	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000aa	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000af	2b ce		 sub	 ecx, esi
  000b1	f7 e9		 imul	 ecx
  000b3	d1 fa		 sar	 edx, 1
  000b5	8b c2		 mov	 eax, edx
  000b7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ba	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bc	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000bf	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000c2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000c8	72 12		 jb	 SHORT $LN72@Resize_rea

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ca	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000cd	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000d0	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d2	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000d5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d8	77 2b		 ja	 SHORT $LN69@Resize_rea

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000da	8b f2		 mov	 esi, edx
$LN72@Resize_rea:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000dc	51		 push	 ecx
  000dd	56		 push	 esi
  000de	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e3	83 c4 08	 add	 esp, 8
$LN61@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  000e6	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000e9	89 1f		 mov	 DWORD PTR [edi], ebx
  000eb	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000ee	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  000f1	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  000f4	8b 45 fc	 mov	 eax, DWORD PTR tv512[ebp]
  000f7	03 c3		 add	 eax, ebx
  000f9	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1571 :     }

  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	5b		 pop	 ebx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 08 00	 ret	 8
$LN69@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00105	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN116@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1539 :             _Xlength();

  0010a	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
$LN117@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0010f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN113@Resize_rea:
  00114	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEPAVCStaticCollisionData@@QAV2@ABV2@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
__Whereoff$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEPAVCStaticCollisionData@@QAV2@ABV2@@Z PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Emplace_reallocate<CStaticCollisionData const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00016	8b 33		 mov	 esi, DWORD PTR [ebx]
  00018	2b d6		 sub	 edx, esi

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0001a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001d	f7 ea		 imul	 edx
  0001f	2b ce		 sub	 ecx, esi
  00021	c1 fa 05	 sar	 edx, 5
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx
  0002b	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002e	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00033	f7 e9		 imul	 ecx
  00035	c1 fa 05	 sar	 edx, 5
  00038	8b c2		 mov	 eax, edx
  0003a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003d	03 c2		 add	 eax, edx
  0003f	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  00042	3d 33 33 33 03	 cmp	 eax, 53687091		; 03333333H
  00047	0f 84 fb 00 00
	00		 je	 $LN104@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004d	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00050	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00053	2b ce		 sub	 ecx, esi
  00055	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0005a	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0005c	b8 33 33 33 03	 mov	 eax, 53687091		; 03333333H

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00061	c1 fa 05	 sar	 edx, 5
  00064	8b ca		 mov	 ecx, edx
  00066	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00069	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006b	8b d1		 mov	 edx, ecx
  0006d	d1 ea		 shr	 edx, 1
  0006f	2b c2		 sub	 eax, edx
  00071	3b c8		 cmp	 ecx, eax
  00073	76 12		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00075	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  0007a	be 33 33 33 03	 mov	 esi, 53687091		; 03333333H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00085	eb 39		 jmp	 SHORT $LN102@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00087	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0008a	8b f7		 mov	 esi, edi
  0008c	3b c7		 cmp	 eax, edi
  0008e	0f 43 f0	 cmovae	 esi, eax
  00091	81 fe 33 33 33
	03		 cmp	 esi, 53687091		; 03333333H
  00097	0f 87 b0 00 00
	00		 ja	 $LN105@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0009d	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  000a0	c1 e0 04	 shl	 eax, 4

; 227  :     if (_Bytes == 0) {

  000a3	85 c0		 test	 eax, eax
  000a5	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  000a7	33 ff		 xor	 edi, edi
  000a9	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ab	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b0	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b8	eb 06		 jmp	 SHORT $LN102@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN102@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000c0	8b f8		 mov	 edi, eax
  000c2	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  000c5	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000c8	8d 1c 80	 lea	 ebx, DWORD PTR [eax+eax*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000cb	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000ce	c1 e3 04	 shl	 ebx, 4
  000d1	03 df		 add	 ebx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d3	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000d6	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  000d9	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  000dd	0f 11 43 10	 movups	 XMMWORD PTR [ebx+16], xmm0
  000e1	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  000e5	0f 11 43 20	 movups	 XMMWORD PTR [ebx+32], xmm0
  000e9	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]
  000ed	0f 11 43 30	 movups	 XMMWORD PTR [ebx+48], xmm0
  000f1	0f 10 40 40	 movups	 xmm0, XMMWORD PTR [eax+64]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000f5	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000f8	0f 11 43 40	 movups	 XMMWORD PTR [ebx+64], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000fc	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00101	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00104	3b c2		 cmp	 eax, edx
  00106	75 04		 jne	 SHORT $LN3@Emplace_re
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00108	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  0010a	eb 17		 jmp	 SHORT $LN58@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  0010c	57		 push	 edi
  0010d	50		 push	 eax
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z ; std::_Copy_memmove<CStaticCollisionData *,CStaticCollisionData *>
  00114	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011a	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0011d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00120	8d 43 50	 lea	 eax, DWORD PTR [ebx+80]
$LN58@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  00123	50		 push	 eax
  00124	52		 push	 edx
  00125	51		 push	 ecx
  00126	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z ; std::_Copy_memmove<CStaticCollisionData *,CStaticCollisionData *>

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0012b	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  0012e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00131	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00134	40		 inc	 eax
  00135	56		 push	 esi
  00136	50		 push	 eax
  00137	57		 push	 edi
  00138	e8 00 00 00 00	 call	 ?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array

; 903  :     }

  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi
  0013f	8b c3		 mov	 eax, ebx
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 08 00	 ret	 8
$LN104@Emplace_re:

; 873  :             _Xlength();

  00148	e8 00 00 00 00	 call	 ?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength
$LN105@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0014d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN101@Emplace_re:
  00152	cc		 int	 3
??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEPAVCStaticCollisionData@@QAV2@ABV2@@Z ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Emplace_reallocate<CStaticCollisionData const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >, COMDAT

; 2041 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	57		 push	 edi

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  0000b	85 db		 test	 ebx, ebx
  0000d	74 31		 je	 SHORT $LN57@Uninitiali
  0000f	56		 push	 esi
  00010	8d 77 2c	 lea	 esi, DWORD PTR [edi+44]
$LL4@Uninitiali:

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00013	6a 30		 push	 48			; 00000030H
  00015	6a 00		 push	 0
  00017	57		 push	 edi
  00018	e8 00 00 00 00	 call	 _memset
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00020	c7 46 f8 00 00
	00 00		 mov	 DWORD PTR [esi-8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00027	83 c7 30	 add	 edi, 48			; 00000030H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002a	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00037	8d 76 30	 lea	 esi, DWORD PTR [esi+48]

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  0003a	83 eb 01	 sub	 ebx, 1
  0003d	75 d4		 jne	 SHORT $LL4@Uninitiali
  0003f	5e		 pop	 esi
$LN57@Uninitiali:

; 2057 :         _Backout._Emplace_back();
; 2058 :     }
; 2059 : 
; 2060 :     return _Backout._Release();
; 2061 : }

  00040	8b c7		 mov	 eax, edi
  00042	5f		 pop	 edi
  00043	5b		 pop	 ebx
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__Oldsize$1$ = -12					; size = 4
__ULast$1$ = -12					; size = 4
tv862 = -8						; size = 4
$T2 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<SHeightData,std::allocator<SHeightData> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1537 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1538 :         if (_Newsize > max_size()) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$1$[ebp], edi
  00011	81 fb 55 55 55
	05		 cmp	 ebx, 89478485		; 05555555H
  00017	0f 87 ad 01 00
	00		 ja	 $LN197@Resize_rea

; 1540 :         }
; 1541 : 
; 1542 :         auto& _Al         = _Getal();
; 1543 :         auto& _My_data    = _Mypair._Myval2;
; 1544 :         pointer& _Myfirst = _My_data._Myfirst;
; 1545 :         pointer& _Mylast  = _My_data._Mylast;
; 1546 : 
; 1547 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

  0001d	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00020	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00025	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00027	f7 e9		 imul	 ecx

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00029	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002c	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 1540 :         }
; 1541 : 
; 1542 :         auto& _Al         = _Getal();
; 1543 :         auto& _My_data    = _Mypair._Myval2;
; 1544 :         pointer& _Myfirst = _My_data._Myfirst;
; 1545 :         pointer& _Mylast  = _My_data._Mylast;
; 1546 : 
; 1547 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

  0002e	c1 fa 03	 sar	 edx, 3
  00031	8b c2		 mov	 eax, edx
  00033	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00036	03 c2		 add	 eax, edx
  00038	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00040	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00042	b8 55 55 55 05	 mov	 eax, 89478485		; 05555555H

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00047	c1 fa 03	 sar	 edx, 3
  0004a	8b ca		 mov	 ecx, edx
  0004c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004f	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00051	8b d1		 mov	 edx, ecx
  00053	d1 ea		 shr	 edx, 1
  00055	2b c2		 sub	 eax, edx
  00057	3b c8		 cmp	 ecx, eax
  00059	76 19		 jbe	 SHORT $LN6@Resize_rea

; 1997 :             return _Max; // geometric growth would overflow

  0005b	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  00060	c7 45 f8 f0 ff
	ff ff		 mov	 DWORD PTR tv862[ebp], -16 ; fffffff0H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006d	8b f0		 mov	 esi, eax
  0006f	89 75 fc	 mov	 DWORD PTR $T2[ebp], esi
  00072	eb 49		 jmp	 SHORT $LN195@Resize_rea
$LN6@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00077	3b c3		 cmp	 eax, ebx
  00079	73 16		 jae	 SHORT $LN7@Resize_rea

; 2003 :             return _Newsize; // geometric growth would be insufficient

  0007b	8b c3		 mov	 eax, ebx
$LN17@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  0007d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00080	c1 e0 04	 shl	 eax, 4
  00083	89 45 f8	 mov	 DWORD PTR tv862[ebp], eax

; 227  :     if (_Bytes == 0) {

  00086	85 c0		 test	 eax, eax
  00088	75 14		 jne	 SHORT $LN21@Resize_rea

; 228  :         return nullptr;

  0008a	33 f6		 xor	 esi, esi
  0008c	89 75 fc	 mov	 DWORD PTR $T2[ebp], esi
  0008f	eb 2f		 jmp	 SHORT $LN20@Resize_rea
$LN7@Resize_rea:

; 117  :         if (_Count > _Max_possible) {

  00091	3d 55 55 55 05	 cmp	 eax, 89478485		; 05555555H
  00096	0f 87 33 01 00
	00		 ja	 $LN198@Resize_rea
  0009c	eb df		 jmp	 SHORT $LN17@Resize_rea
$LN21@Resize_rea:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0009e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a3	72 0d		 jb	 SHORT $LN22@Resize_rea

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ab	8b f0		 mov	 esi, eax
  000ad	89 75 fc	 mov	 DWORD PTR $T2[ebp], esi
  000b0	eb 0b		 jmp	 SHORT $LN195@Resize_rea
$LN22@Resize_rea:

; 136  :         return ::operator new(_Bytes);

  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  000b8	8b f0		 mov	 esi, eax
  000ba	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
$LN195@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000bd	83 c4 04	 add	 esp, 4
$LN20@Resize_rea:
  000c0	8b 55 f4	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000c3	8b c3		 mov	 eax, ebx
  000c5	57		 push	 edi
  000c6	2b c2		 sub	 eax, edx
  000c8	50		 push	 eax
  000c9	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  000cc	c1 e1 04	 shl	 ecx, 4
  000cf	03 ce		 add	 ecx, esi
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);

  000d7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000da	83 c4 0c	 add	 esp, 12			; 0000000cH
  000dd	8b 1f		 mov	 ebx, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);

  000df	89 45 f4	 mov	 DWORD PTR __ULast$1$[ebp], eax

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  000e2	3b d8		 cmp	 ebx, eax
  000e4	74 57		 je	 SHORT $LN30@Resize_rea
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000e6	83 c6 2c	 add	 esi, 44			; 0000002cH
  000e9	8d 7b 28	 lea	 edi, DWORD PTR [ebx+40]
  000ec	0f 1f 40 00	 npad	 4
$LL31@Resize_rea:
  000f0	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  000f3	8d 76 30	 lea	 esi, DWORD PTR [esi+48]

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  000f6	8d 7f 30	 lea	 edi, DWORD PTR [edi+48]
  000f9	0f 11 46 a4	 movups	 XMMWORD PTR [esi-92], xmm0
  000fd	0f 10 43 10	 movups	 xmm0, XMMWORD PTR [ebx+16]
  00101	0f 11 46 b4	 movups	 XMMWORD PTR [esi-76], xmm0
  00105	8a 43 20	 mov	 al, BYTE PTR [ebx+32]
  00108	83 c3 30	 add	 ebx, 48			; 00000030H
  0010b	88 46 c4	 mov	 BYTE PTR [esi-60], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0010e	8b 57 d4	 mov	 edx, DWORD PTR [edi-44]
  00111	8b 4f d0	 mov	 ecx, DWORD PTR [edi-48]
  00114	8b 47 cc	 mov	 eax, DWORD PTR [edi-52]

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00117	c7 47 d4 00 00
	00 00		 mov	 DWORD PTR [edi-44], 0
  0011e	c7 47 d0 00 00
	00 00		 mov	 DWORD PTR [edi-48], 0
  00125	c7 47 cc 00 00
	00 00		 mov	 DWORD PTR [edi-52], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 403  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  0012c	89 46 c8	 mov	 DWORD PTR [esi-56], eax
  0012f	89 4e cc	 mov	 DWORD PTR [esi-52], ecx
  00132	89 56 d0	 mov	 DWORD PTR [esi-48], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00135	3b 5d f4	 cmp	 ebx, DWORD PTR __ULast$1$[ebp]
  00138	75 b6		 jne	 SHORT $LL31@Resize_rea
  0013a	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN30@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0013d	8b 37		 mov	 esi, DWORD PTR [edi]
  0013f	85 f6		 test	 esi, esi
  00141	74 5e		 je	 SHORT $LN110@Resize_rea

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00143	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00146	3b f3		 cmp	 esi, ebx
  00148	74 15		 je	 SHORT $LN90@Resize_rea
  0014a	66 0f 1f 44 00
	00		 npad	 6
$LL91@Resize_rea:
  00150	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00153	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  00158	83 c6 30	 add	 esi, 48			; 00000030H
  0015b	3b f3		 cmp	 esi, ebx
  0015d	75 f1		 jne	 SHORT $LL91@Resize_rea
$LN90@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0015f	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00162	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00167	8b 37		 mov	 esi, DWORD PTR [edi]
  00169	2b ce		 sub	 ecx, esi
  0016b	f7 e9		 imul	 ecx
  0016d	c1 fa 03	 sar	 edx, 3
  00170	8b c2		 mov	 eax, edx
  00172	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00175	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00177	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0017a	c1 e1 04	 shl	 ecx, 4

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0017d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00183	72 12		 jb	 SHORT $LN121@Resize_rea

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00185	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00188	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0018b	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018d	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00190	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00193	77 30		 ja	 SHORT $LN118@Resize_rea

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00195	8b f2		 mov	 esi, edx
$LN121@Resize_rea:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00197	51		 push	 ecx
  00198	56		 push	 esi
  00199	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0019e	83 c4 08	 add	 esp, 8
$LN110@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  001a1	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  001a4	8b 4d fc	 mov	 ecx, DWORD PTR $T2[ebp]
  001a7	89 0f		 mov	 DWORD PTR [edi], ecx
  001a9	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  001ac	c1 e0 04	 shl	 eax, 4
  001af	03 c1		 add	 eax, ecx
  001b1	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  001b4	8b 45 f8	 mov	 eax, DWORD PTR tv862[ebp]
  001b7	03 c1		 add	 eax, ecx
  001b9	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1571 :     }

  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx
  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 08 00	 ret	 8
$LN118@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN197@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1539 :             _Xlength();

  001ca	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ ; std::vector<SHeightData,std::allocator<SHeightData> >::_Xlength
$LN198@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  001cf	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN194@Resize_rea:
  001d4	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<SHeightData,std::allocator<SHeightData> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
__Backout$3$sroa$278$1$ = -8				; size = 4
_this$1$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi

; 1575 :         // trim or append elements, provide strong guarantee
; 1576 :         auto& _Al           = _Getal();
; 1577 :         auto& _My_data      = _Mypair._Myval2;
; 1578 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1579 :         pointer& _Mylast    = _My_data._Mylast;
; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1581 :         if (_Newsize < _Oldsize) { // trim

  0000a	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  0000d	57		 push	 edi
  0000e	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00011	8b d0		 mov	 edx, eax
  00013	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00015	2b d1		 sub	 edx, ecx
  00017	89 45 f8	 mov	 DWORD PTR __Backout$3$sroa$278$1$[ebp], eax
  0001a	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0001f	f7 ea		 imul	 edx
  00021	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00024	c1 fa 05	 sar	 edx, 5
  00027	8b fa		 mov	 edi, edx
  00029	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0002c	03 fa		 add	 edi, edx
  0002e	89 7d f4	 mov	 DWORD PTR __Oldsize$1$[ebp], edi
  00031	3b f7		 cmp	 esi, edi
  00033	73 14		 jae	 SHORT $LN2@Resize

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  00035	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  00038	c1 e0 04	 shl	 eax, 4
  0003b	5f		 pop	 edi
  0003c	03 c1		 add	 eax, ecx

; 1610 :     }

  0003e	5e		 pop	 esi
  0003f	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN2@Resize:

; 1583 :             _Orphan_range(_Newlast, _Mylast);
; 1584 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1585 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1586 :             _Mylast = _Newlast;
; 1587 :             return;
; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  00049	0f 86 f0 00 00
	00		 jbe	 $LN3@Resize

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  0004f	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00052	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00057	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00059	f7 e9		 imul	 ecx
  0005b	c1 fa 05	 sar	 edx, 5
  0005e	8b ca		 mov	 ecx, edx
  00060	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00063	03 ca		 add	 ecx, edx

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  00065	3b f1		 cmp	 esi, ecx
  00067	0f 86 b4 00 00
	00		 jbe	 $LN4@Resize

; 1538 :         if (_Newsize > max_size()) {

  0006d	81 fe 33 33 33
	03		 cmp	 esi, 53687091		; 03333333H
  00073	0f 87 cf 00 00
	00		 ja	 $LN120@Resize

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00079	8b d1		 mov	 edx, ecx
  0007b	b8 33 33 33 03	 mov	 eax, 53687091		; 03333333H
  00080	d1 ea		 shr	 edx, 1
  00082	2b c2		 sub	 eax, edx
  00084	3b c8		 cmp	 ecx, eax
  00086	76 12		 jbe	 SHORT $LN11@Resize

; 1997 :             return _Max; // geometric growth would overflow

  00088	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  0008d	bf 33 33 33 03	 mov	 edi, 53687091		; 03333333H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00098	eb 3a		 jmp	 SHORT $LN118@Resize
$LN11@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0009a	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  0009d	3b fe		 cmp	 edi, esi
  0009f	73 10		 jae	 SHORT $LN12@Resize

; 2003 :             return _Newsize; // geometric growth would be insufficient

  000a1	8b fe		 mov	 edi, esi
$LN22@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  000a3	8d 04 bf	 lea	 eax, DWORD PTR [edi+edi*4]
  000a6	c1 e0 04	 shl	 eax, 4

; 227  :     if (_Bytes == 0) {

  000a9	85 c0		 test	 eax, eax
  000ab	75 12		 jne	 SHORT $LN26@Resize

; 228  :         return nullptr;

  000ad	33 db		 xor	 ebx, ebx
  000af	eb 28		 jmp	 SHORT $LN25@Resize
$LN12@Resize:

; 117  :         if (_Count > _Max_possible) {

  000b1	81 ff 33 33 33
	03		 cmp	 edi, 53687091		; 03333333H
  000b7	0f 87 90 00 00
	00		 ja	 $LN121@Resize
  000bd	eb e4		 jmp	 SHORT $LN22@Resize
$LN26@Resize:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000bf	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c4	72 08		 jb	 SHORT $LN27@Resize

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000cc	eb 06		 jmp	 SHORT $LN118@Resize
$LN27@Resize:

; 136  :         return ::operator new(_Bytes);

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN118@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000d4	8b d8		 mov	 ebx, eax
  000d6	83 c4 04	 add	 esp, 4
$LN25@Resize:
  000d9	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000dc	8b d6		 mov	 edx, esi
  000de	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  000e1	c1 e1 04	 shl	 ecx, 4
  000e4	03 cb		 add	 ecx, ebx
  000e6	2b d0		 sub	 edx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2056 :     for (; 0 < _Count; --_Count) {

  000e8	74 12		 je	 SHORT $LN36@Resize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000ea	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  000ed	c1 e0 04	 shl	 eax, 4
  000f0	50		 push	 eax
  000f1	6a 00		 push	 0
  000f3	51		 push	 ecx
  000f4	e8 00 00 00 00	 call	 _memset
  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN36@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000ff	53		 push	 ebx
  00100	ff 70 04	 push	 DWORD PTR [eax+4]
  00103	ff 30		 push	 DWORD PTR [eax]
  00105	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z ; std::_Copy_memmove<CStaticCollisionData *,CStaticCollisionData *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1570 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0010a	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  0010d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1570 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00110	57		 push	 edi
  00111	56		 push	 esi
  00112	53		 push	 ebx
  00113	e8 00 00 00 00	 call	 ?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array
  00118	5f		 pop	 edi

; 1610 :     }

  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 08 00	 ret	 8
$LN4@Resize:

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00121	2b f7		 sub	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2056 :     for (; 0 < _Count; --_Count) {

  00123	8b 7d f8	 mov	 edi, DWORD PTR __Backout$3$sroa$278$1$[ebp]
  00126	74 14		 je	 SHORT $LN87@Resize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00128	8d 34 b6	 lea	 esi, DWORD PTR [esi+esi*4]
  0012b	c1 e6 04	 shl	 esi, 4
  0012e	56		 push	 esi
  0012f	6a 00		 push	 0
  00131	57		 push	 edi
  00132	e8 00 00 00 00	 call	 _memset
  00137	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013a	03 fe		 add	 edi, esi
$LN87@Resize:
  0013c	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
$LN3@Resize:
  0013f	5f		 pop	 edi

; 1610 :     }

  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 08 00	 ret	 8
$LN120@Resize:

; 1539 :             _Xlength();

  00148	e8 00 00 00 00	 call	 ?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength
$LN121@Resize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0014d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN117@Resize:
  00152	cc		 int	 3
??$_Resize@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCAttributeData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCAttributeData@@UAEPAXI@Z PROC			; CAttributeData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CAttributeData@@UAE@XZ ; CAttributeData::~CAttributeData
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 48		 push	 72			; 00000048H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCAttributeData@@UAEPAXI@Z ENDP			; CAttributeData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ PROC ; std::vector<SHeightData,std::allocator<SHeightData> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ ENDP ; std::vector<SHeightData,std::allocator<SHeightData> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@QAE@XZ PROC ; std::vector<SHeightData,std::allocator<SHeightData> >::~vector<SHeightData,std::allocator<SHeightData> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 6e		 je	 SHORT $LN5@vector
  0000a	53		 push	 ebx

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  0000b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  0000e	3b f3		 cmp	 esi, ebx
  00010	74 0f		 je	 SHORT $LN10@vector
$LL11@vector:
  00012	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00015	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  0001a	83 c6 30	 add	 esi, 48			; 00000030H
  0001d	3b f3		 cmp	 esi, ebx
  0001f	75 f1		 jne	 SHORT $LL11@vector
$LN10@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00021	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00024	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00029	8b 37		 mov	 esi, DWORD PTR [edi]
  0002b	2b ce		 sub	 ecx, esi
  0002d	f7 e9		 imul	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	5b		 pop	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00030	c1 fa 03	 sar	 edx, 3
  00033	8b c2		 mov	 eax, edx
  00035	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00038	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003a	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0003d	c1 e1 04	 shl	 ecx, 4

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00040	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00046	72 12		 jb	 SHORT $LN41@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00048	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0004b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004e	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00050	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00053	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00056	77 23		 ja	 SHORT $LN38@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00058	8b f2		 mov	 esi, edx
$LN41@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0005a	51		 push	 ecx
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00061	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00067	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0006a	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  00071	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN5@vector:
  00078	5f		 pop	 edi

; 820  :     }

  00079	5e		 pop	 esi
  0007a	c3		 ret	 0
$LN38@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN54@vector:
  00080	cc		 int	 3
??1?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@QAE@XZ ENDP ; std::vector<SHeightData,std::allocator<SHeightData> >::~vector<SHeightData,std::allocator<SHeightData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array, COMDAT
; _this$ = ecx

; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00007	8b 37		 mov	 esi, DWORD PTR [edi]
  00009	85 f6		 test	 esi, esi
  0000b	74 40		 je	 SHORT $LN10@Change_arr

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00010	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00015	2b ce		 sub	 ecx, esi
  00017	f7 e9		 imul	 ecx
  00019	c1 fa 05	 sar	 edx, 5
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00023	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00026	c1 e1 04	 shl	 ecx, 4

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00029	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002f	72 12		 jb	 SHORT $LN21@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00031	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00034	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00037	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00039	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0003c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003f	77 33		 ja	 SHORT $LN18@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00041	8b f2		 mov	 esi, edx
$LN21@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00043	51		 push	 ecx
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004a	83 c4 08	 add	 esp, 8
$LN10@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0004d	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00050	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00053	89 0f		 mov	 DWORD PTR [edi], ecx
  00055	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00058	c1 e0 04	 shl	 eax, 4
  0005b	03 c1		 add	 eax, ecx
  0005d	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00060	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00063	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00066	c1 e0 04	 shl	 eax, 4
  00069	03 c1		 add	 eax, ecx
  0006b	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi

; 2064 :     }

  00070	5d		 pop	 ebp
  00071	c2 0c 00	 ret	 12			; 0000000cH
$LN18@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00074	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Change_arr:
  00079	cc		 int	 3
?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAE@XZ PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::~vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 54		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	c1 fa 05	 sar	 edx, 5
  00019	8b c2		 mov	 eax, edx
  0001b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001e	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00020	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00023	c1 e1 04	 shl	 ecx, 4

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00026	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002c	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002e	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00031	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00034	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00036	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00039	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003c	77 23		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003e	8b f2		 mov	 esi, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	51		 push	 ecx
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00047	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004d	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00050	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  00057	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN5@vector:
  0005e	5f		 pop	 edi

; 820  :     }

  0005f	5e		 pop	 esi
  00060	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00061	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00066	cc		 int	 3
??1?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAE@XZ ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::~vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ?OnSelfDestruct@CAttributeData@@MAEXXZ
_TEXT	SEGMENT
?OnSelfDestruct@CAttributeData@@MAEXXZ PROC		; CAttributeData::OnSelfDestruct, COMDAT
; _this$ = ecx

; 189  : 	Clear();

  00000	e9 00 00 00 00	 jmp	 ?Clear@CResource@@QAEXXZ ; CResource::Clear
?OnSelfDestruct@CAttributeData@@MAEXXZ ENDP		; CAttributeData::OnSelfDestruct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ?OnIsType@CAttributeData@@MAE_NK@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
?OnIsType@CAttributeData@@MAE_NK@Z PROC			; CAttributeData::OnIsType, COMDAT
; _this$ = ecx

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 175  : 	if (CAttributeData::Type() == type)

  00006	e8 00 00 00 00	 call	 ?Type@CAttributeData@@SAKXZ ; CAttributeData::Type
  0000b	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  0000e	3b c2		 cmp	 eax, edx
  00010	75 07		 jne	 SHORT $LN2@OnIsType

; 176  : 		return true;

  00012	b0 01		 mov	 al, 1
  00014	5e		 pop	 esi

; 179  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN2@OnIsType:

; 177  : 
; 178  : 	return CResource::OnIsType(type);

  00019	52		 push	 edx
  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?OnIsType@CResource@@MAE_NK@Z ; CResource::OnIsType
  00021	5e		 pop	 esi

; 179  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?OnIsType@CAttributeData@@MAE_NK@Z ENDP			; CAttributeData::OnIsType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ?OnIsEmpty@CAttributeData@@MBE_NXZ
_TEXT	SEGMENT
?OnIsEmpty@CAttributeData@@MBE_NXZ PROC			; CAttributeData::OnIsEmpty, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	3b 41 34	 cmp	 eax, DWORD PTR [ecx+52]
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 165  : 	if (!m_StaticCollisionDataVector.empty())

  00006	75 0a		 jne	 SHORT $LN11@OnIsEmpty
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00008	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0000b	3b 41 40	 cmp	 eax, DWORD PTR [ecx+64]
  0000e	0f 94 c0	 sete	 al
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 171  : }

  00011	c3		 ret	 0
$LN11@OnIsEmpty:

; 166  : 		return false;
; 167  : 	if (!m_HeightDataVector.empty())
; 168  : 		return false;

  00012	32 c0		 xor	 al, al

; 171  : }

  00014	c3		 ret	 0
?OnIsEmpty@CAttributeData@@MBE_NXZ ENDP			; CAttributeData::OnIsEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ?OnClear@CAttributeData@@MAEXXZ
_TEXT	SEGMENT
?OnClear@CAttributeData@@MAEXXZ PROC			; CAttributeData::OnClear, COMDAT
; _this$ = ecx

; 158  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00005	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00008	3b 47 34	 cmp	 eax, DWORD PTR [edi+52]
  0000b	74 03		 je	 SHORT $LN3@OnClear

; 1807 :         _Mylast = _Myfirst;

  0000d	89 47 34	 mov	 DWORD PTR [edi+52], eax
$LN3@OnClear:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00010	8b 77 3c	 mov	 esi, DWORD PTR [edi+60]
  00013	8b 5f 40	 mov	 ebx, DWORD PTR [edi+64]
  00016	3b f3		 cmp	 esi, ebx
  00018	74 1b		 je	 SHORT $LN7@OnClear
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL14@OnClear:
  00020	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00023	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00028	83 c6 30	 add	 esi, 48			; 00000030H
  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 f1		 jne	 SHORT $LL14@OnClear
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1807 :         _Mylast = _Myfirst;

  0002f	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  00032	89 47 40	 mov	 DWORD PTR [edi+64], eax
$LN7@OnClear:
  00035	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 161  : }

  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	c3		 ret	 0
?OnClear@CAttributeData@@MAEXXZ ENDP			; CAttributeData::OnClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ?OnLoad@CAttributeData@@MAE_NHPBX@Z
_TEXT	SEGMENT
_szHeader$ = -40					; size = 14
tv850 = -24						; size = 4
__Oldsize$1$ = -24					; size = 4
__Newlast$1$ = -24					; size = 4
tv263 = -20						; size = 4
tv288 = -20						; size = 4
tv893 = -20						; size = 4
__My_data$2$ = -20					; size = 4
_dwCollisionDataCount$1$ = -16				; size = 4
_dwPrimitiveCount$1$ = -16				; size = 4
_dwHeightDataCount$1$ = -12				; size = 4
_c_pbBuf$1$ = -8					; size = 4
__Oldsize$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
___formal$ = 8						; size = 4
_c_pvBuf$ = 12						; size = 4
_k$1$ = 12						; size = 4
__Backout$1$sroa$275$1$ = 12				; size = 4
$T2 = 12						; size = 4
$T3 = 15						; size = 1
$T4 = 15						; size = 1
$T5 = 15						; size = 1
?OnLoad@CAttributeData@@MAE_NHPBX@Z PROC		; CAttributeData::OnLoad, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 62   : 	if (!c_pvBuf)

  00008	8b 7d 0c	 mov	 edi, DWORD PTR _c_pvBuf$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi
  00010	85 ff		 test	 edi, edi
  00012	0f 84 df 03 00
	00		 je	 $LN8@OnLoad

; 63   : 	{
; 64   : 		return true;
; 65   : 	}
; 66   : 
; 67   : 	const BYTE * c_pbBuf = static_cast<const BYTE *> (c_pvBuf);
; 68   : 
; 69   : 	char szHeader[c_iAttributeDataFileHeaderLength+1];
; 70   : 	memcpy(szHeader, c_pbBuf, c_iAttributeDataFileHeaderLength+1);

  00018	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 71   : 	c_pbBuf += c_iAttributeDataFileHeaderLength+1;
; 72   : 	if (strcmp(szHeader, c_szAttributeDataFileHeader))

  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET ?c_szAttributeDataFileHeader@@3QBDB
  00020	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  00024	89 45 e0	 mov	 DWORD PTR _szHeader$[ebp+8], eax
  00027	66 8b 47 0c	 mov	 ax, WORD PTR [edi+12]
  0002b	66 89 45 e4	 mov	 WORD PTR _szHeader$[ebp+12], ax
  0002f	8d 45 d8	 lea	 eax, DWORD PTR _szHeader$[ebp]
  00032	66 0f d6 45 d8	 movq	 QWORD PTR _szHeader$[ebp], xmm0
$LL141@OnLoad:
  00037	8a 10		 mov	 dl, BYTE PTR [eax]
  00039	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0003b	75 1a		 jne	 SHORT $LN142@OnLoad
  0003d	84 d2		 test	 dl, dl
  0003f	74 12		 je	 SHORT $LN143@OnLoad
  00041	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00044	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00047	75 0e		 jne	 SHORT $LN142@OnLoad
  00049	83 c0 02	 add	 eax, 2
  0004c	83 c1 02	 add	 ecx, 2
  0004f	84 d2		 test	 dl, dl
  00051	75 e4		 jne	 SHORT $LL141@OnLoad
$LN143@OnLoad:
  00053	33 c0		 xor	 eax, eax
  00055	eb 05		 jmp	 SHORT $LN144@OnLoad
$LN142@OnLoad:
  00057	1b c0		 sbb	 eax, eax
  00059	83 c8 01	 or	 eax, 1
$LN144@OnLoad:
  0005c	85 c0		 test	 eax, eax
  0005e	74 0a		 je	 SHORT $LN14@OnLoad

; 73   : 		return FALSE;

  00060	5f		 pop	 edi
  00061	32 c0		 xor	 al, al

; 155  : }

  00063	5e		 pop	 esi
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN14@OnLoad:

; 77   : 	memcpy(&dwCollisionDataCount, c_pbBuf, sizeof(DWORD));

  0006a	8b 4f 0e	 mov	 ecx, DWORD PTR [edi+14]

; 78   : 	c_pbBuf += sizeof(DWORD);
; 79   : 	memcpy(&dwHeightDataCount, c_pbBuf, sizeof(DWORD));

  0006d	8b 47 12	 mov	 eax, DWORD PTR [edi+18]

; 80   : 	c_pbBuf += sizeof(DWORD);

  00070	83 c7 16	 add	 edi, 22			; 00000016H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00073	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 77   : 	memcpy(&dwCollisionDataCount, c_pbBuf, sizeof(DWORD));

  00076	89 4d f0	 mov	 DWORD PTR _dwCollisionDataCount$1$[ebp], ecx

; 78   : 	c_pbBuf += sizeof(DWORD);
; 79   : 	memcpy(&dwHeightDataCount, c_pbBuf, sizeof(DWORD));

  00079	89 45 f4	 mov	 DWORD PTR _dwHeightDataCount$1$[ebp], eax

; 80   : 	c_pbBuf += sizeof(DWORD);

  0007c	89 7d f8	 mov	 DWORD PTR _c_pbBuf$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0007f	3b 56 34	 cmp	 edx, DWORD PTR [esi+52]
  00082	74 03		 je	 SHORT $LN22@OnLoad

; 1807 :         _Mylast = _Myfirst;

  00084	89 56 34	 mov	 DWORD PTR [esi+52], edx
$LN22@OnLoad:

; 1615 :         _Resize(_Newsize, _Value_init_tag{});

  00087	8d 55 0f	 lea	 edx, DWORD PTR $T3[ebp]
  0008a	52		 push	 edx
  0008b	51		 push	 ecx
  0008c	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  0008f	e8 00 00 00 00	 call	 ??$_Resize@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Resize<std::_Value_init_tag>

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00094	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 84   : 	m_HeightDataVector.clear();

  00097	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0009a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0009c	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
  0009f	3b f0		 cmp	 esi, eax
  000a1	74 22		 je	 SHORT $LN28@OnLoad
  000a3	8b f8		 mov	 edi, eax
$LL35@OnLoad:
  000a5	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  000a8	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  000ad	83 c6 30	 add	 esi, 48			; 00000030H
  000b0	3b f7		 cmp	 esi, edi
  000b2	75 f1		 jne	 SHORT $LL35@OnLoad
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1807 :         _Mylast = _Myfirst;

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000b7	8b 7d f8	 mov	 edi, DWORD PTR _c_pbBuf$1$[ebp]
  000ba	83 c1 3c	 add	 ecx, 60			; 0000003cH
  000bd	8b 01		 mov	 eax, DWORD PTR [ecx]
  000bf	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
  000c2	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN28@OnLoad:

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  000c5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c7	8b c8		 mov	 ecx, eax

; 1581 :         if (_Newsize < _Oldsize) { // trim

  000c9	8b 75 f4	 mov	 esi, DWORD PTR _dwHeightDataCount$1$[ebp]
  000cc	2b ca		 sub	 ecx, edx
  000ce	89 55 ec	 mov	 DWORD PTR tv893[ebp], edx
  000d1	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000d6	f7 e9		 imul	 ecx
  000d8	c1 fa 03	 sar	 edx, 3
  000db	8b c2		 mov	 eax, edx
  000dd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e0	03 c2		 add	 eax, edx
  000e2	89 45 e8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax
  000e5	3b f0		 cmp	 esi, eax
  000e7	73 34		 jae	 SHORT $LN52@OnLoad

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  000e9	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000ec	c1 e0 04	 shl	 eax, 4
  000ef	03 45 ec	 add	 eax, DWORD PTR tv893[ebp]

; 1583 :             _Orphan_range(_Newlast, _Mylast);
; 1584 :             _Destroy_range(_Newlast, _Mylast, _Al);

  000f2	8b f0		 mov	 esi, eax
  000f4	89 45 e8	 mov	 DWORD PTR __Newlast$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  000f7	3b 45 0c	 cmp	 eax, DWORD PTR $T2[ebp]
  000fa	74 19		 je	 SHORT $LN58@OnLoad
  000fc	8b 7d 0c	 mov	 edi, DWORD PTR $T2[ebp]
  000ff	90		 npad	 1
$LL59@OnLoad:
  00100	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00103	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  00108	83 c6 30	 add	 esi, 48			; 00000030H
  0010b	3b f7		 cmp	 esi, edi
  0010d	75 f1		 jne	 SHORT $LL59@OnLoad
  0010f	8b 7d f8	 mov	 edi, DWORD PTR _c_pbBuf$1$[ebp]
  00112	8b 45 e8	 mov	 eax, DWORD PTR __Newlast$1$[ebp]
$LN58@OnLoad:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1586 :             _Mylast = _Newlast;

  00115	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00118	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 1587 :             return;

  0011b	eb 33		 jmp	 SHORT $LN53@OnLoad
$LN52@OnLoad:

; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  0011d	76 2e		 jbe	 SHORT $LN147@OnLoad

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  0011f	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00122	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00125	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0012a	2b 4d ec	 sub	 ecx, DWORD PTR tv893[ebp]
  0012d	f7 e9		 imul	 ecx
  0012f	c1 fa 03	 sar	 edx, 3
  00132	8b c2		 mov	 eax, edx
  00134	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00137	03 c2		 add	 eax, edx

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  00139	3b f0		 cmp	 esi, eax
  0013b	76 5b		 jbe	 SHORT $LN54@OnLoad

; 1593 :                 _Resize_reallocate(_Newsize, _Val);

  0013d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00140	8d 45 0f	 lea	 eax, DWORD PTR $T4[ebp]
  00143	50		 push	 eax
  00144	56		 push	 esi
  00145	8d 49 3c	 lea	 ecx, DWORD PTR [ecx+60]
  00148	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SHeightData,std::allocator<SHeightData> >::_Resize_reallocate<std::_Value_init_tag>
$LN147@OnLoad:
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 87   : 	for (DWORD i = 0; i < dwCollisionDataCount; ++i)

  0014d	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN53@OnLoad:
  00150	83 7d f0 00	 cmp	 DWORD PTR _dwCollisionDataCount$1$[ebp], 0
  00154	0f 86 a4 00 00
	00		 jbe	 $LN3@OnLoad
  0015a	33 f6		 xor	 esi, esi
  0015c	0f 1f 40 00	 npad	 4
$LL4@OnLoad:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00160	8b 52 30	 mov	 edx, DWORD PTR [edx+48]
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 90   : 		memcpy(&rCollisionData.dwType, c_pbBuf, sizeof(DWORD));

  00163	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00165	03 d6		 add	 edx, esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 90   : 		memcpy(&rCollisionData.dwType, c_pbBuf, sizeof(DWORD));

  00167	89 0a		 mov	 DWORD PTR [edx], ecx

; 91   : 		c_pbBuf += sizeof(DWORD);
; 92   : 		memcpy(rCollisionData.szName, c_pbBuf, 32);

  00169	0f 10 47 04	 movups	 xmm0, XMMWORD PTR [edi+4]
  0016d	0f 11 42 04	 movups	 XMMWORD PTR [edx+4], xmm0
  00171	0f 10 47 14	 movups	 xmm0, XMMWORD PTR [edi+20]
  00175	0f 11 42 14	 movups	 XMMWORD PTR [edx+20], xmm0

; 93   : 		c_pbBuf += 32;
; 94   : 		memcpy(&rCollisionData.v3Position, c_pbBuf, sizeof(D3DXVECTOR3));

  00179	f3 0f 7e 47 24	 movq	 xmm0, QWORD PTR [edi+36]
  0017e	66 0f d6 42 28	 movq	 QWORD PTR [edx+40], xmm0
  00183	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]

; 95   : 		c_pbBuf += sizeof(D3DXVECTOR3);

  00186	83 c7 30	 add	 edi, 48			; 00000030H
  00189	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 96   : 
; 97   : 		switch(rCollisionData.dwType)

  0018c	83 f9 05	 cmp	 ecx, 5
  0018f	77 53		 ja	 SHORT $LN5@OnLoad
  00191	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN145@OnLoad[ecx*4]
$LN54@OnLoad:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00198	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0019b	83 c0 3c	 add	 eax, 60			; 0000003cH
  0019e	50		 push	 eax
  0019f	8b c6		 mov	 eax, esi
  001a1	2b 45 e8	 sub	 eax, DWORD PTR __Oldsize$1$[ebp]
  001a4	50		 push	 eax
  001a5	ff 75 0c	 push	 DWORD PTR $T2[ebp]
  001a8	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >
  001ad	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  001b0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b3	89 42 40	 mov	 DWORD PTR [edx+64], eax
  001b6	eb 98		 jmp	 SHORT $LN53@OnLoad
$LN15@OnLoad:
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 125  : 		memcpy(rCollisionData.quatRotation, c_pbBuf, sizeof(D3DXQUATERNION));

  001b8	8b 07		 mov	 eax, DWORD PTR [edi]
  001ba	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  001bd	83 c7 08	 add	 edi, 8
  001c0	89 42 34	 mov	 DWORD PTR [edx+52], eax
  001c3	89 4a 38	 mov	 DWORD PTR [edx+56], ecx
  001c6	eb 1c		 jmp	 SHORT $LN5@OnLoad
$LN17@OnLoad:

; 98   : 		{
; 99   : 			case COLLISION_TYPE_PLANE:
; 100  : 				memcpy(rCollisionData.fDimensions, c_pbBuf, 2*sizeof(float));
; 101  : 				c_pbBuf += 2*sizeof(float);
; 102  : 				break;
; 103  : 			case COLLISION_TYPE_BOX:
; 104  : 				memcpy(rCollisionData.fDimensions, c_pbBuf, 3*sizeof(float));
; 105  : 				c_pbBuf += 3*sizeof(float);
; 106  : 				break;
; 107  : 			case COLLISION_TYPE_SPHERE:
; 108  : 				memcpy(rCollisionData.fDimensions, c_pbBuf, sizeof(float));

  001c8	8b 07		 mov	 eax, DWORD PTR [edi]

; 109  : 				c_pbBuf += sizeof(float);

  001ca	83 c7 04	 add	 edi, 4
  001cd	89 42 34	 mov	 DWORD PTR [edx+52], eax

; 110  : 				break;

  001d0	eb 12		 jmp	 SHORT $LN5@OnLoad
$LN20@OnLoad:

; 125  : 		memcpy(rCollisionData.quatRotation, c_pbBuf, sizeof(D3DXQUATERNION));

  001d2	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  001d6	66 0f d6 42 34	 movq	 QWORD PTR [edx+52], xmm0
  001db	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  001de	83 c7 0c	 add	 edi, 12			; 0000000cH
  001e1	89 42 3c	 mov	 DWORD PTR [edx+60], eax
$LN5@OnLoad:
  001e4	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 126  : 		c_pbBuf += sizeof(D3DXQUATERNION);

  001e7	83 c7 10	 add	 edi, 16			; 00000010H
  001ea	83 c6 50	 add	 esi, 80			; 00000050H
  001ed	83 6d f0 01	 sub	 DWORD PTR _dwCollisionDataCount$1$[ebp], 1
  001f1	0f 11 42 40	 movups	 XMMWORD PTR [edx+64], xmm0
  001f5	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  001f8	0f 85 62 ff ff
	ff		 jne	 $LL4@OnLoad
$LN3@OnLoad:

; 127  : 	}
; 128  : 
; 129  : 	for (DWORD j = 0; j < dwHeightDataCount; ++j)

  001fe	83 7d f4 00	 cmp	 DWORD PTR _dwHeightDataCount$1$[ebp], 0
  00202	0f 84 ef 01 00
	00		 je	 $LN8@OnLoad
  00208	33 c9		 xor	 ecx, ecx
  0020a	89 4d e8	 mov	 DWORD PTR tv850[ebp], ecx
  0020d	0f 1f 00	 npad	 3
$LL9@OnLoad:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00210	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 132  : 		memcpy(rHeightData.szName, c_pbBuf, 32);

  00213	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00216	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00219	03 c1		 add	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 132  : 		memcpy(rHeightData.szName, c_pbBuf, 32);

  0021b	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 137  : 		c_pbBuf += sizeof(DWORD);
; 138  : 
; 139  : 		rHeightData.v3VertexVector.clear();

  0021e	8d 70 24	 lea	 esi, DWORD PTR [eax+36]
  00221	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  00225	89 75 ec	 mov	 DWORD PTR __My_data$2$[ebp], esi
  00228	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  0022c	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  0022f	83 c7 24	 add	 edi, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00232	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 136  : 		memcpy(&dwPrimitiveCount, c_pbBuf, sizeof(DWORD));

  00235	89 4d f0	 mov	 DWORD PTR _dwPrimitiveCount$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00238	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0023a	89 45 0c	 mov	 DWORD PTR __Backout$1$sroa$275$1$[ebp], eax
  0023d	3b c8		 cmp	 ecx, eax
  0023f	74 08		 je	 SHORT $LN79@OnLoad

; 1807 :         _Mylast = _Myfirst;

  00241	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00244	8b c1		 mov	 eax, ecx
  00246	89 4d 0c	 mov	 DWORD PTR __Backout$1$sroa$275$1$[ebp], ecx
$LN79@OnLoad:

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00249	8b d1		 mov	 edx, ecx
  0024b	8b c8		 mov	 ecx, eax
  0024d	2b ca		 sub	 ecx, edx
  0024f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00254	f7 e9		 imul	 ecx

; 1581 :         if (_Newsize < _Oldsize) { // trim

  00256	8b 4d f0	 mov	 ecx, DWORD PTR _dwPrimitiveCount$1$[ebp]
  00259	d1 fa		 sar	 edx, 1
  0025b	8b c2		 mov	 eax, edx
  0025d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00260	03 c2		 add	 eax, edx
  00262	89 45 f8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax
  00265	3b c8		 cmp	 ecx, eax
  00267	73 0d		 jae	 SHORT $LN86@OnLoad

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  00269	8b 16		 mov	 edx, DWORD PTR [esi]
  0026b	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0026e	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]

; 1586 :             _Mylast = _Newlast;

  00271	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1587 :             return;

  00274	eb 42		 jmp	 SHORT $LN87@OnLoad
$LN86@OnLoad:

; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  00276	76 40		 jbe	 SHORT $LN87@OnLoad

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00278	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0027b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00280	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00282	f7 e9		 imul	 ecx

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  00284	8b 4d f0	 mov	 ecx, DWORD PTR _dwPrimitiveCount$1$[ebp]
  00287	d1 fa		 sar	 edx, 1
  00289	8b c2		 mov	 eax, edx
  0028b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0028e	03 c2		 add	 eax, edx
  00290	3b c8		 cmp	 ecx, eax
  00292	76 11		 jbe	 SHORT $LN88@OnLoad

; 1593 :                 _Resize_reallocate(_Newsize, _Val);

  00294	8d 45 0f	 lea	 eax, DWORD PTR $T5[ebp]
  00297	50		 push	 eax
  00298	51		 push	 ecx
  00299	8b ce		 mov	 ecx, esi
  0029b	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>

; 1594 :                 return;

  002a0	8b 4d f0	 mov	 ecx, DWORD PTR _dwPrimitiveCount$1$[ebp]
  002a3	eb 13		 jmp	 SHORT $LN87@OnLoad
$LN88@OnLoad:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2056 :     for (; 0 < _Count; --_Count) {

  002a5	8b 55 0c	 mov	 edx, DWORD PTR __Backout$1$sroa$275$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  002a8	8b c1		 mov	 eax, ecx
  002aa	2b 45 f8	 sub	 eax, DWORD PTR __Oldsize$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2056 :     for (; 0 < _Count; --_Count) {

  002ad	74 06		 je	 SHORT $LN93@OnLoad
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  002af	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  002b2	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
$LN93@OnLoad:
  002b5	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN87@OnLoad:
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 141  : 		memcpy(&rHeightData.v3VertexVector[0], c_pbBuf, dwPrimitiveCount*sizeof(D3DXVECTOR3));

  002b8	8b 45 ec	 mov	 eax, DWORD PTR __My_data$2$[ebp]
  002bb	8d 34 49	 lea	 esi, DWORD PTR [ecx+ecx*2]
  002be	c1 e6 02	 shl	 esi, 2
  002c1	56		 push	 esi
  002c2	57		 push	 edi
  002c3	ff 30		 push	 DWORD PTR [eax]
  002c5	e8 00 00 00 00	 call	 _memcpy

; 142  : 		c_pbBuf += dwPrimitiveCount*sizeof(D3DXVECTOR3);

  002ca	03 fe		 add	 edi, esi

; 145  : 		for (DWORD k = 0; k < rHeightData.v3VertexVector.size(); ++k)

  002cc	33 c9		 xor	 ecx, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002ce	8b 75 ec	 mov	 esi, DWORD PTR __My_data$2$[ebp]
  002d1	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 145  : 		for (DWORD k = 0; k < rHeightData.v3VertexVector.size(); ++k)

  002d6	89 4d 0c	 mov	 DWORD PTR _k$1$[ebp], ecx
  002d9	83 c4 0c	 add	 esp, 12			; 0000000cH
  002dc	89 7d f8	 mov	 DWORD PTR _c_pbBuf$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002df	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  002e2	2b 0e		 sub	 ecx, DWORD PTR [esi]
  002e4	f7 e9		 imul	 ecx
  002e6	d1 fa		 sar	 edx, 1
  002e8	8b c2		 mov	 eax, edx
  002ea	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002ed	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 145  : 		for (DWORD k = 0; k < rHeightData.v3VertexVector.size(); ++k)

  002ef	0f 84 ef 00 00
	00		 je	 $LN7@OnLoad
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  002f5	33 ff		 xor	 edi, edi
  002f7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL12@OnLoad:
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 147  : 			m_fMaximizeRadius = fMAX(m_fMaximizeRadius, fabs(rHeightData.v3VertexVector[k].x)+50.0f);

  00300	8b 06		 mov	 eax, DWORD PTR [esi]
  00302	83 ec 08	 sub	 esp, 8
  00305	f3 0f 10 04 38	 movss	 xmm0, DWORD PTR [eax+edi]
  0030a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0030d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00310	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00317	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4049000000000000
  0031f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00323	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00329	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  00338	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0033b	d9 5d ec	 fstp	 DWORD PTR tv263[ebp]
  0033e	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR tv263[ebp]
  00343	f3 0f 11 48 2c	 movss	 DWORD PTR [eax+44], xmm1

; 148  : 			m_fMaximizeRadius = fMAX(m_fMaximizeRadius, fabs(rHeightData.v3VertexVector[k].y)+50.0f);

  00348	8b 06		 mov	 eax, DWORD PTR [esi]
  0034a	f3 0f 10 44 38
	04		 movss	 xmm0, DWORD PTR [eax+edi+4]
  00350	0f 5a c0	 cvtps2pd xmm0, xmm0
  00353	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  0035a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4049000000000000
  00362	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00366	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0036c	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00371	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  00376	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00379	d9 5d ec	 fstp	 DWORD PTR tv288[ebp]
  0037c	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR tv288[ebp]
  00381	f3 0f 11 48 2c	 movss	 DWORD PTR [eax+44], xmm1

; 149  : 			m_fMaximizeRadius = fMAX(m_fMaximizeRadius, fabs(rHeightData.v3VertexVector[k].z)+50.0f);

  00386	8b 06		 mov	 eax, DWORD PTR [esi]
  00388	f3 0f 10 44 38
	08		 movss	 xmm0, DWORD PTR [eax+edi+8]
  0038e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00391	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00398	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4049000000000000
  003a0	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  003a4	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003aa	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  003af	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  003b4	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  003b7	83 c4 08	 add	 esp, 8
  003ba	ff 45 0c	 inc	 DWORD PTR _k$1$[ebp]
  003bd	83 c7 0c	 add	 edi, 12			; 0000000cH
  003c0	d9 58 2c	 fstp	 DWORD PTR [eax+44]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  003c3	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  003c6	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  003cb	2b 0e		 sub	 ecx, DWORD PTR [esi]
  003cd	f7 e9		 imul	 ecx
  003cf	d1 fa		 sar	 edx, 1
  003d1	8b c2		 mov	 eax, edx
  003d3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003d6	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 145  : 		for (DWORD k = 0; k < rHeightData.v3VertexVector.size(); ++k)

  003d8	39 45 0c	 cmp	 DWORD PTR _k$1$[ebp], eax
  003db	0f 82 1f ff ff
	ff		 jb	 $LL12@OnLoad
  003e1	8b 7d f8	 mov	 edi, DWORD PTR _c_pbBuf$1$[ebp]
$LN7@OnLoad:

; 127  : 	}
; 128  : 
; 129  : 	for (DWORD j = 0; j < dwHeightDataCount; ++j)

  003e4	8b 4d e8	 mov	 ecx, DWORD PTR tv850[ebp]
  003e7	83 c1 30	 add	 ecx, 48			; 00000030H
  003ea	83 6d f4 01	 sub	 DWORD PTR _dwHeightDataCount$1$[ebp], 1
  003ee	89 4d e8	 mov	 DWORD PTR tv850[ebp], ecx
  003f1	0f 85 19 fe ff
	ff		 jne	 $LL9@OnLoad
$LN8@OnLoad:
  003f7	5f		 pop	 edi

; 150  : 		}
; 151  : 		// Getting Maximize Radius
; 152  : 	}
; 153  : 
; 154  : 	return true;

  003f8	b0 01		 mov	 al, 1

; 155  : }

  003fa	5e		 pop	 esi
  003fb	8b e5		 mov	 esp, ebp
  003fd	5d		 pop	 ebp
  003fe	c2 08 00	 ret	 8
  00401	0f 1f 00	 npad	 3
$LN145@OnLoad:
  00404	00 00 00 00	 DD	 $LN15@OnLoad
  00408	00 00 00 00	 DD	 $LN20@OnLoad
  0040c	00 00 00 00	 DD	 $LN17@OnLoad
  00410	00 00 00 00	 DD	 $LN15@OnLoad
  00414	00 00 00 00	 DD	 $LN20@OnLoad
  00418	00 00 00 00	 DD	 $LN20@OnLoad
?OnLoad@CAttributeData@@MAE_NHPBX@Z ENDP		; CAttributeData::OnLoad
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ?GetMaximizeRadius@CAttributeData@@QAEMXZ
_TEXT	SEGMENT
?GetMaximizeRadius@CAttributeData@@QAEMXZ PROC		; CAttributeData::GetMaximizeRadius, COMDAT
; _this$ = ecx

; 51   : 	return m_fMaximizeRadius;

  00000	d9 41 2c	 fld	 DWORD PTR [ecx+44]

; 52   : }

  00003	c3		 ret	 0
?GetMaximizeRadius@CAttributeData@@QAEMXZ ENDP		; CAttributeData::GetMaximizeRadius
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_c_ppHeightData$ = 12					; size = 4
?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z PROC ; CAttributeData::GetHeightDataPointer, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 41   : 	if (dwIndex >= GetHeightDataCount())

  00006	e8 00 00 00 00	 call	 ?GetHeightDataCount@CAttributeData@@QBEKXZ ; CAttributeData::GetHeightDataCount
  0000b	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  0000e	3b d0		 cmp	 edx, eax
  00010	72 07		 jb	 SHORT $LN2@GetHeightD

; 42   : 		return FALSE;

  00012	33 c0		 xor	 eax, eax
  00014	5e		 pop	 esi

; 47   : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
$LN2@GetHeightD:

; 44   : 	*c_ppHeightData = &m_HeightDataVector[dwIndex];

  00019	8b 45 0c	 mov	 eax, DWORD PTR _c_ppHeightData$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1929 :         return _My_data._Myfirst[_Pos];

  0001c	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	03 4e 3c	 add	 ecx, DWORD PTR [esi+60]
  00025	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 44   : 	*c_ppHeightData = &m_HeightDataVector[dwIndex];

  00026	89 08		 mov	 DWORD PTR [eax], ecx

; 45   : 
; 46   : 	return TRUE;

  00028	b8 01 00 00 00	 mov	 eax, 1

; 47   : }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z ENDP ; CAttributeData::GetHeightDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ?GetHeightDataCount@CAttributeData@@QBEKXZ
_TEXT	SEGMENT
?GetHeightDataCount@CAttributeData@@QBEKXZ PROC		; CAttributeData::GetHeightDataCount, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 51 3c	 sub	 edx, DWORD PTR [ecx+60]
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 03	 sar	 edx, 3
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 37   : }

  00017	c3		 ret	 0
?GetHeightDataCount@CAttributeData@@QBEKXZ ENDP		; CAttributeData::GetHeightDataCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z PROC ; CAttributeData::AddCollisionData, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00007	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  0000a	3b 56 38	 cmp	 edx, DWORD PTR [esi+56]
  0000d	74 2f		 je	 SHORT $LN6@AddCollisi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 506  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00012	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00015	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00018	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0001c	0f 11 42 10	 movups	 XMMWORD PTR [edx+16], xmm0
  00020	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  00024	0f 11 42 20	 movups	 XMMWORD PTR [edx+32], xmm0
  00028	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]
  0002c	0f 11 42 30	 movups	 XMMWORD PTR [edx+48], xmm0
  00030	0f 10 40 40	 movups	 xmm0, XMMWORD PTR [eax+64]
  00034	0f 11 42 40	 movups	 XMMWORD PTR [edx+64], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  00038	83 46 34 50	 add	 DWORD PTR [esi+52], 80	; 00000050H

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0003c	eb 0c		 jmp	 SHORT $LN5@AddCollisi
$LN6@AddCollisi:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0003e	ff 75 08	 push	 DWORD PTR _data$[ebp]
  00041	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEPAVCStaticCollisionData@@QAV2@ABV2@@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Emplace_reallocate<CStaticCollisionData const &>
$LN5@AddCollisi:

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0004a	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0004d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00052	2b 4e 30	 sub	 ecx, DWORD PTR [esi+48]
  00055	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 57   : 	return m_StaticCollisionDataVector.size();

  00057	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00058	c1 fa 05	 sar	 edx, 5
  0005b	8b c2		 mov	 eax, edx
  0005d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00060	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 57   : 	return m_StaticCollisionDataVector.size();

  00062	5e		 pop	 esi

; 58   : }

  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z ENDP ; CAttributeData::AddCollisionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ?GetHeightDataVector@CAttributeData@@QBEABV?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@XZ
_TEXT	SEGMENT
?GetHeightDataVector@CAttributeData@@QBEABV?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@XZ PROC ; CAttributeData::GetHeightDataVector, COMDAT
; _this$ = ecx

; 31   : 	return m_HeightDataVector;

  00000	8d 41 3c	 lea	 eax, DWORD PTR [ecx+60]

; 32   : }

  00003	c3		 ret	 0
?GetHeightDataVector@CAttributeData@@QBEABV?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@XZ ENDP ; CAttributeData::GetHeightDataVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ
_TEXT	SEGMENT
?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ PROC ; CAttributeData::GetCollisionDataVector, COMDAT
; _this$ = ecx

; 26   : 	return m_StaticCollisionDataVector;

  00000	8d 41 30	 lea	 eax, DWORD PTR [ecx+48]

; 27   : }

  00003	c3		 ret	 0
?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ ENDP ; CAttributeData::GetCollisionDataVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ??1CAttributeData@@UAE@XZ
_TEXT	SEGMENT
??1CAttributeData@@UAE@XZ PROC				; CAttributeData::~CAttributeData, COMDAT
; _this$ = ecx

; 198  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 199  : }

  00003	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CAttributeData@@6B@
  0000c	e8 00 00 00 00	 call	 ??1?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@QAE@XZ ; std::vector<SHeightData,std::allocator<SHeightData> >::~vector<SHeightData,std::allocator<SHeightData> >
  00011	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00014	e8 00 00 00 00	 call	 ??1?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAE@XZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::~vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >
  00019	8b ce		 mov	 ecx, esi
  0001b	5e		 pop	 esi
  0001c	e9 00 00 00 00	 jmp	 ??1CResource@@UAE@XZ	; CResource::~CResource
??1CAttributeData@@UAE@XZ ENDP				; CAttributeData::~CAttributeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ??0CAttributeData@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c_szFileName$ = 8					; size = 4
??0CAttributeData@@QAE@PBD@Z PROC			; CAttributeData::CAttributeData, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000d	e8 00 00 00 00	 call	 ??0CResource@@QAE@PBD@Z	; CResource::CResource
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CAttributeData@@6B@

; 195  : }

  00018	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0001a	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  00021	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  00028	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  0002f	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00036	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  0003d	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp

; 194  : 	m_fMaximizeRadius = 0.0f;

  00044	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 195  : }

  0004b	5e		 pop	 esi
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
??0CAttributeData@@QAE@PBD@Z ENDP			; CAttributeData::CAttributeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\AttributeData.cpp
;	COMDAT ?Type@CAttributeData@@SAKXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Type@CAttributeData@@SAKXZ PROC			; CAttributeData::Type, COMDAT

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Type@CAttributeData@@SAKXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 183  : 	static TType s_type = StringToType("CAttributeData");

  00022	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0002e	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
  00036	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0003c	7f 14		 jg	 SHORT $LN9@Type
$LN5@Type:

; 184  : 	return s_type;
; 185  : }

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_type@?1??Type@CAttributeData@@SAKXZ@4KA
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN9@Type:

; 183  : 	static TType s_type = StringToType("CAttributeData");

  00052	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
  00057	e8 00 00 00 00	 call	 __Init_thread_header
  0005c	83 c4 04	 add	 esp, 4
  0005f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA, -1
  00066	75 d6		 jne	 SHORT $LN5@Type
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0P@COGNDLAI@CAttributeData@
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00074	e8 00 00 00 00	 call	 ?StringToType@CResource@@SAKPBD@Z ; CResource::StringToType
  00079	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
  0007e	a3 00 00 00 00	 mov	 DWORD PTR ?s_type@?1??Type@CAttributeData@@SAKXZ@4KA, eax
  00083	e8 00 00 00 00	 call	 __Init_thread_footer
  00088	83 c4 08	 add	 esp, 8
  0008b	eb b1		 jmp	 SHORT $LN5@Type
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Type@CAttributeData@@SAKXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Type@CAttributeData@@SAKXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Type@CAttributeData@@SAKXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Type@CAttributeData@@SAKXZ ENDP			; CAttributeData::Type
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN5@vector:
  0005d	5f		 pop	 edi

; 820  :     }

  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00065	cc		 int	 3
??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
