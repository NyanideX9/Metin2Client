; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\LensFlare.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@FDOKIIIA@flare2?4dds@			; `string'
PUBLIC	??_C@_0L@NFHOPKCO@flare1?4dds@			; `string'
PUBLIC	??_C@_0L@MIHLMKJG@flare6?4dds@			; `string'
PUBLIC	??_C@_0L@IFLDGLJN@flare4?4dds@			; `string'
PUBLIC	??_C@_0L@JILGFLCF@flare3?4dds@			; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JILGFLCF@flare3?4dds@
CONST	SEGMENT
??_C@_0L@JILGFLCF@flare3?4dds@ DB 'flare3.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IFLDGLJN@flare4?4dds@
CONST	SEGMENT
??_C@_0L@IFLDGLJN@flare4?4dds@ DB 'flare4.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIHLMKJG@flare6?4dds@
CONST	SEGMENT
??_C@_0L@MIHLMKJG@flare6?4dds@ DB 'flare6.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NFHOPKCO@flare1?4dds@
CONST	SEGMENT
??_C@_0L@NFHOPKCO@flare1?4dds@ DB 'flare1.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FDOKIIIA@flare2?4dds@
CONST	SEGMENT
??_C@_0L@FDOKIIIA@flare2?4dds@ DB 'flare2.dds', 00H	; `string'
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?Draw@CFlare@@QAEXMHHHH@Z			; CFlare::Draw
PUBLIC	?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CFlare::Init
PUBLIC	??0CFlare@@QAE@XZ				; CFlare::CFlare
PUBLIC	??1CFlare@@UAE@XZ				; CFlare::~CFlare
PUBLIC	?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Xlength
PUBLIC	??_GCFlare@@UAEPAXI@Z				; CFlare::`scalar deleting destructor'
PUBLIC	??0CLensFlare@@QAE@XZ				; CLensFlare::CLensFlare
PUBLIC	??1CLensFlare@@UAE@XZ				; CLensFlare::~CLensFlare
PUBLIC	?Compute@CLensFlare@@QAEXABUD3DXVECTOR3@@@Z	; CLensFlare::Compute
PUBLIC	?DrawBeforeFlare@CLensFlare@@QAEXXZ		; CLensFlare::DrawBeforeFlare
PUBLIC	?DrawAfterFlare@CLensFlare@@QAEXXZ		; CLensFlare::DrawAfterFlare
PUBLIC	?DrawFlare@CLensFlare@@QAEXXZ			; CLensFlare::DrawFlare
PUBLIC	?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ; CLensFlare::SetMainFlare
PUBLIC	?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CLensFlare::Initialize
PUBLIC	?SetFlareLocation@CLensFlare@@QAEXNN@Z		; CLensFlare::SetFlareLocation
PUBLIC	?SetBrightnesses@CLensFlare@@QAEXMM@Z		; CLensFlare::SetBrightnesses
PUBLIC	?ReadControlPixels@CLensFlare@@QAEXXZ		; CLensFlare::ReadControlPixels
PUBLIC	?AdjustBrightness@CLensFlare@@QAEXXZ		; CLensFlare::AdjustBrightness
PUBLIC	?CharacterizeFlare@CLensFlare@@QAEX_N0MABUD3DXCOLOR@@@Z ; CLensFlare::CharacterizeFlare
PUBLIC	?Interpolate@CLensFlare@@IAEMMMM@Z		; CLensFlare::Interpolate
PUBLIC	?ReadDepthPixels@CLensFlare@@AAEXPAM@Z		; CLensFlare::ReadDepthPixels
PUBLIC	?ClampBrightness@CLensFlare@@AAEXXZ		; CLensFlare::ClampBrightness
PUBLIC	??_GCLensFlare@@UAEPAXI@Z			; CLensFlare::`scalar deleting destructor'
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@AAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Emplace_reallocate<CFlare::SFlarePiece * const &>
PUBLIC	??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>
PUBLIC	??$_Copy_memmove_tail@PAPAUSFlarePiece@CFlare@@@std@@YAPAPAUSFlarePiece@CFlare@@QBDQAPAU12@II@Z ; std::_Copy_memmove_tail<CFlare::SFlarePiece * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_7CFlare@@6B@					; CFlare::`vftable'
PUBLIC	??_7CLensFlare@@6B@				; CLensFlare::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CFlare@@6B@				; CFlare::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFlare@@@8				; CFlare `RTTI Type Descriptor'
PUBLIC	??_R3CFlare@@8					; CFlare::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFlare@@8					; CFlare::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFlare@@8				; CFlare::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLensFlare@@6B@				; CLensFlare::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLensFlare@@@8				; CLensFlare `RTTI Type Descriptor'
PUBLIC	??_R3CLensFlare@@8				; CLensFlare::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLensFlare@@8				; CLensFlare::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLensFlare@@8			; CLensFlare::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@3f000000
PUBLIC	__real@3f59999a
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@43610000
PUBLIC	__real@437f0000
PUBLIC	__real@4cbebc20
PUBLIC	__xmm@00000001000000010000000100000001
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	_D3DXMatrixOrthoOffCenterRH@28:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?IsType@CResource@@QAE_NK@Z:PROC		; CResource::IsType
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	?Type@CGraphicImage@@SAKXZ:PROC			; CGraphicImage::Type
EXTRN	??0CGraphicImageInstance@@QAE@XZ:PROC		; CGraphicImageInstance::CGraphicImageInstance
EXTRN	??1CGraphicImageInstance@@UAE@XZ:PROC		; CGraphicImageInstance::~CGraphicImageInstance
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?IsEmpty@CGraphicImageInstance@@QBE_NXZ:PROC	; CGraphicImageInstance::IsEmpty
EXTRN	?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTexturePointer
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?RenderBar2d@CScreen@@QAEXMMMMM@Z:PROC		; CScreen::RenderBar2d
EXTRN	?SetDiffuseColor@CScreen@@QAEXMMMM@Z:PROC	; CScreen::SetDiffuseColor
EXTRN	?ProjectPosition@CScreen@@QAEXMMMPAM0@Z:PROC	; CScreen::ProjectPosition
EXTRN	??_ECFlare@@UAEPAXI@Z:PROC			; CFlare::`vector deleting destructor'
EXTRN	??_ECLensFlare@@UAEPAXI@Z:PROC			; CLensFlare::`vector deleting destructor'
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SaveTransform
EXTRN	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z:PROC ; CStateManager::RestoreTransform
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	__libm_sse2_acos_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matIdentity
EXTRN	?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matView
EXTRN	?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A:BYTE ; CGraphicBase::ms_Viewport
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 0d8H DUP (?) ; g_strFiles
_BSS	ENDS
CRT$XCU	SEGMENT
?g_strFiles$initializer$@@3P6AXXZA DD FLAT:??__Eg_strFiles@@YAXXZ ; g_strFiles$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __xmm@00000001000000010000000100000001
CONST	SEGMENT
__xmm@00000001000000010000000100000001 DB 01H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@4cbebc20
CONST	SEGMENT
__real@4cbebc20 DD 04cbebc20r			; 1e+08
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43610000
CONST	SEGMENT
__real@43610000 DD 043610000r			; 225
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$rs	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLensFlare@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLensFlare@@8 DD FLAT:??_R0?AVCLensFlare@@@8 ; CLensFlare::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLensFlare@@8
rdata$r	ENDS
;	COMDAT ??_R2CLensFlare@@8
rdata$r	SEGMENT
??_R2CLensFlare@@8 DD FLAT:??_R1A@?0A@EA@CLensFlare@@8	; CLensFlare::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CLensFlare@@8
rdata$r	SEGMENT
??_R3CLensFlare@@8 DD 00H				; CLensFlare::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CLensFlare@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLensFlare@@@8
data$rs	SEGMENT
??_R0?AVCLensFlare@@@8 DD FLAT:??_7type_info@@6B@	; CLensFlare `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLensFlare@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CLensFlare@@6B@
rdata$r	SEGMENT
??_R4CLensFlare@@6B@ DD 00H				; CLensFlare::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLensFlare@@@8
	DD	FLAT:??_R3CLensFlare@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFlare@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFlare@@8 DD FLAT:??_R0?AVCFlare@@@8	; CFlare::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFlare@@8
rdata$r	ENDS
;	COMDAT ??_R2CFlare@@8
rdata$r	SEGMENT
??_R2CFlare@@8 DD FLAT:??_R1A@?0A@EA@CFlare@@8		; CFlare::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFlare@@8
rdata$r	SEGMENT
??_R3CFlare@@8 DD 00H					; CFlare::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFlare@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFlare@@@8
data$rs	SEGMENT
??_R0?AVCFlare@@@8 DD FLAT:??_7type_info@@6B@		; CFlare `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFlare@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CFlare@@6B@
rdata$r	SEGMENT
??_R4CFlare@@6B@ DD 00H					; CFlare::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFlare@@@8
	DD	FLAT:??_R3CFlare@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?g_fPosition@@3PAMA DD 0bf0ccccdr		; -0.55	; g_fPosition
	DD	0bf000000r			; -0.5
	DD	0bee66666r			; -0.45
	DD	03e4ccccdr			; 0.2
	DD	03e99999ar			; 0.3
	DD	03f733333r			; 0.95
	DD	03f666666r			; 0.9
	DD	03f800000r			; 1
?g_fWidth@@3PAMA DD 041a00000r			; 20	; g_fWidth
	DD	042000000r			; 32
	DD	041a00000r			; 20
	DD	042000000r			; 32
	DD	042c80000r			; 100
	DD	042000000r			; 32
	DD	041a00000r			; 20
	DD	0437a0000r			; 250
?g_afColors@@3PAY03MA DD 03f800000r		; 1	; g_afColors
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f4ccccdr			; 0.8
	DD	03e99999ar			; 0.3
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
	DD	03f666666r			; 0.9
	DD	03e99999ar			; 0.3
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
	DD	03f19999ar			; 0.6
	DD	03f800000r			; 1
	DD	03f19999ar			; 0.6
	DD	03f666666r			; 0.9
	DD	03ecccccdr			; 0.4
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
	DD	03f19999ar			; 0.6
	DD	03e99999ar			; 0.3
	DD	03ecccccdr			; 0.4
_DATA	ENDS
;	COMDAT ??_7CLensFlare@@6B@
CONST	SEGMENT
??_7CLensFlare@@6B@ DD FLAT:??_R4CLensFlare@@6B@	; CLensFlare::`vftable'
	DD	FLAT:??_ECLensFlare@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CFlare@@6B@
CONST	SEGMENT
??_7CFlare@@6B@ DD FLAT:??_R4CFlare@@6B@		; CFlare::`vftable'
	DD	FLAT:??_ECFlare@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??__Eg_strFiles@@YAXXZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??__Eg_strFiles@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??__Eg_strFiles@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z$0
__ehfuncinfo$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLensFlare@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLensFlare@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CLensFlare@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CLensFlare@@QAE@XZ$2
__ehfuncinfo$??0CLensFlare@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CLensFlare@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAUSFlarePiece@CFlare@@@std@@YAPAPAUSFlarePiece@CFlare@@QBDQAPAU12@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAUSFlarePiece@CFlare@@@std@@YAPAPAUSFlarePiece@CFlare@@QBDQAPAU12@II@Z PROC ; std::_Copy_memmove_tail<CFlare::SFlarePiece * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAUSFlarePiece@CFlare@@@std@@YAPAPAUSFlarePiece@CFlare@@QBDQAPAU12@II@Z ENDP ; std::_Copy_memmove_tail<CFlare::SFlarePiece * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAUSFlarePiece@CFlare@@@std@@YAPAPAUSFlarePiece@CFlare@@QBDQAPAU12@II@Z ; std::_Copy_memmove_tail<CFlare::SFlarePiece * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@AAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv652 = -8						; size = 4
tv650 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@AAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z PROC ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Emplace_reallocate<CFlare::SFlarePiece * const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 09 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 c7 00 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 f8	 mov	 DWORD PTR tv652[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b4	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b7	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b9	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	53		 push	 ebx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>
  000c3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c6	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c8	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	85 c0		 test	 eax, eax
  000e0	74 2c		 je	 SHORT $LN72@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN83@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 2a		 ja	 SHORT $LN80@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00102	8b c2		 mov	 eax, edx
$LN83@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
$LN72@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
  00113	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00116	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00118	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR tv652[ebp]
  0011e	03 cf		 add	 ecx, edi

; 903  :     }

  00120	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@AAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z ENDP ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Emplace_reallocate<CFlare::SFlarePiece * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3265 : /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Right$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3265 : /* strengthened */ {

  00007	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00008	8b fe		 mov	 edi, esi
  0000a	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000d	0f 1f 00	 npad	 3
$LL28@operator:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL28@operator
  00017	2b f9		 sub	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2818 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  0001c	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 2818 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00020	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]

; 426  :         if (_Large_mode_engaged()) {

  00023	76 02		 jbe	 SHORT $LN14@operator

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00025	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 578  :     if (_Left_size != _Right_size) {

  00027	3b d7		 cmp	 edx, edi
  00029	74 08		 je	 SHORT $LN21@operator

; 579  :         return false;

  0002b	32 c0		 xor	 al, al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3266 :     return !(_Left == _Right);

  0002d	5f		 pop	 edi
  0002e	34 01		 xor	 al, 1
  00030	5e		 pop	 esi

; 3267 : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN21@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 582  :     if (_Left_size == 0u) {

  00033	85 d2		 test	 edx, edx
  00035	75 08		 jne	 SHORT $LN22@operator

; 583  :         return true;

  00037	b0 01		 mov	 al, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3266 :     return !(_Left == _Right);

  00039	5f		 pop	 edi
  0003a	32 c0		 xor	 al, al
  0003c	5e		 pop	 esi

; 3267 : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
$LN22@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 411  :         return __builtin_memcmp(_First1, _First2, _Count);

  0003f	83 ea 04	 sub	 edx, 4
  00042	72 11		 jb	 SHORT $LN31@operator
$LL32@operator:
  00044	8b 01		 mov	 eax, DWORD PTR [ecx]
  00046	3b 06		 cmp	 eax, DWORD PTR [esi]
  00048	75 10		 jne	 SHORT $LN30@operator
  0004a	83 c1 04	 add	 ecx, 4
  0004d	83 c6 04	 add	 esi, 4
  00050	83 ea 04	 sub	 edx, 4
  00053	73 ef		 jae	 SHORT $LL32@operator
$LN31@operator:
  00055	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00058	74 3d		 je	 SHORT $LN29@operator
$LN30@operator:
  0005a	8a 01		 mov	 al, BYTE PTR [ecx]
  0005c	3a 06		 cmp	 al, BYTE PTR [esi]
  0005e	75 27		 jne	 SHORT $LN33@operator
  00060	83 fa fd	 cmp	 edx, -3			; fffffffdH
  00063	74 32		 je	 SHORT $LN29@operator
  00065	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00068	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  0006b	75 1a		 jne	 SHORT $LN33@operator
  0006d	83 fa fe	 cmp	 edx, -2			; fffffffeH
  00070	74 25		 je	 SHORT $LN29@operator
  00072	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00075	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00078	75 0d		 jne	 SHORT $LN33@operator
  0007a	83 fa ff	 cmp	 edx, -1
  0007d	74 18		 je	 SHORT $LN29@operator
  0007f	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  00082	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00085	74 10		 je	 SHORT $LN29@operator
$LN33@operator:
  00087	1b c0		 sbb	 eax, eax
  00089	83 c8 01	 or	 eax, 1

; 586  :     return _Traits::compare(_Left, _Right, _Left_size) == 0;

  0008c	85 c0		 test	 eax, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3266 :     return !(_Left == _Right);

  0008e	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 586  :     return _Traits::compare(_Left, _Right, _Left_size) == 0;

  0008f	0f 94 c0	 sete	 al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3266 :     return !(_Left == _Right);

  00092	34 01		 xor	 al, 1
  00094	5e		 pop	 esi

; 3267 : }

  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
$LN29@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 411  :         return __builtin_memcmp(_First1, _First2, _Count);

  00097	33 c0		 xor	 eax, eax

; 586  :     return _Traits::compare(_Left, _Right, _Left_size) == 0;

  00099	85 c0		 test	 eax, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3266 :     return !(_Left == _Right);

  0009b	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 586  :     return _Traits::compare(_Left, _Right, _Left_size) == 0;

  0009c	0f 94 c0	 sete	 al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3266 :     return !(_Left == _Right);

  0009f	34 01		 xor	 al, 1
  000a1	5e		 pop	 esi

; 3267 : }

  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_strFiles@@YAXXZ
text$yd	SEGMENT
??__Fg_strFiles@@YAXXZ PROC				; `dynamic atexit destructor for 'g_strFiles'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00005	6a 09		 push	 9
  00007	6a 18		 push	 24			; 00000018H
  00009	68 00 00 00 00	 push	 OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  0000e	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00013	c3		 ret	 0
??__Fg_strFiles@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_strFiles''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ??__Eg_strFiles@@YAXXZ
text$di	SEGMENT
__$EHRec$ = -12						; size = 12
??__Eg_strFiles@@YAXXZ PROC				; `dynamic initializer for 'g_strFiles'', COMDAT

; 50   : };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??__Eg_strFiles@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 40   : {
; 41   : 	"flare2.dds",

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FDOKIIIA@flare2?4dds@
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  0002c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 42   : 	"flare1.dds",

  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NFHOPKCO@flare1?4dds@
  00036	b9 18 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00042	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 43   : 	"flare2.dds",

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FDOKIIIA@flare2?4dds@
  0004c	b9 30 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+48
  00051	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00055	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 44   : 	"flare1.dds",

  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NFHOPKCO@flare1?4dds@
  0005f	b9 48 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+72
  00064	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00068	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 45   : 	"flare6.dds",

  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MIHLMKJG@flare6?4dds@
  00072	b9 60 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+96
  00077	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0007b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 46   : 	"flare4.dds",

  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IFLDGLJN@flare4?4dds@
  00085	b9 78 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+120
  0008a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0008e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 47   : 	"flare2.dds",

  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FDOKIIIA@flare2?4dds@
  00098	b9 90 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+144
  0009d	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000a1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 48   : 	"flare3.dds",

  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JILGFLCF@flare3?4dds@
  000ab	b9 a8 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+168
  000b0	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000b4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 49   : 	""

  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000be	b9 c0 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+192
  000c3	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  000c7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000cc	68 00 00 00 00	 push	 OFFSET ??__Fg_strFiles@@YAXXZ ; `dynamic atexit destructor for 'g_strFiles''
  000d1	e8 00 00 00 00	 call	 _atexit
  000d6	83 c4 04	 add	 esp, 4

; 39   : static string g_strFiles[] =

  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
text$di	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__Eg_strFiles@@YAXXZ$0:
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00005	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$1:
  0000a	b9 18 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24
  0000f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$2:
  00014	b9 30 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+48
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$3:
  0001e	b9 48 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+72
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$4:
  00028	b9 60 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+96
  0002d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$5:
  00032	b9 78 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+120
  00037	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$6:
  0003c	b9 90 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+144
  00041	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$7:
  00046	b9 a8 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+168
  0004b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	cc		 int	 3
  00051	cc		 int	 3
  00052	cc		 int	 3
  00053	cc		 int	 3
  00054	cc		 int	 3
__ehhandler$??__Eg_strFiles@@YAXXZ:
  00055	90		 npad	 1
  00056	90		 npad	 1
  00057	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00061	33 c8		 xor	 ecx, eax
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??__Eg_strFiles@@YAXXZ
  0006d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??__Eg_strFiles@@YAXXZ ENDP				; `dynamic initializer for 'g_strFiles''
; Function compile flags: /Ogtp
;	COMDAT ??_GCLensFlare@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLensFlare@@UAEPAXI@Z PROC				; CLensFlare::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLensFlare@@UAE@XZ	; CLensFlare::~CLensFlare
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 7c		 push	 124			; 0000007cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCLensFlare@@UAEPAXI@Z ENDP				; CLensFlare::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?ClampBrightness@CLensFlare@@AAEXXZ
_TEXT	SEGMENT
?ClampBrightness@CLensFlare@@AAEXXZ PROC		; CLensFlare::ClampBrightness, COMDAT
; _this$ = ecx

; 467  : 	// before
; 468  :     if (m_fBeforeBright < 0.0f)

  00000	f3 0f 10 51 14	 movss	 xmm2, DWORD PTR [ecx+20]
  00005	0f 57 c9	 xorps	 xmm1, xmm1
  00008	0f 2f ca	 comiss	 xmm1, xmm2
  0000b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00013	76 05		 jbe	 SHORT $LN2@ClampBrigh

; 469  :         m_fBeforeBright = 0.0f;

  00015	0f 57 d2	 xorps	 xmm2, xmm2
  00018	eb 08		 jmp	 SHORT $LN4@ClampBrigh
$LN2@ClampBrigh:

; 470  :     else if (m_fBeforeBright > 1.0f)

  0001a	0f 2f d3	 comiss	 xmm2, xmm3
  0001d	76 03		 jbe	 SHORT $LN4@ClampBrigh

; 471  :         m_fBeforeBright = 1.0f;

  0001f	0f 28 d3	 movaps	 xmm2, xmm3
$LN4@ClampBrigh:

; 472  : 
; 473  : 	m_fBeforeBright *= m_fMaxBrightness;

  00022	f3 0f 10 61 40	 movss	 xmm4, DWORD PTR [ecx+64]
  00027	0f 28 c4	 movaps	 xmm0, xmm4
  0002a	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0002e	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 474  : 
; 475  :     if (m_fAfterBright < 0.0f)

  00033	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00038	0f 2f c8	 comiss	 xmm1, xmm0
  0003b	77 0b		 ja	 SHORT $LN7@ClampBrigh

; 476  :         m_fAfterBright = 0.0f;
; 477  :     else if (m_fAfterBright > 1.0f)

  0003d	0f 2f c3	 comiss	 xmm0, xmm3
  00040	0f 28 c8	 movaps	 xmm1, xmm0
  00043	76 03		 jbe	 SHORT $LN7@ClampBrigh

; 478  :         m_fAfterBright = 1.0f;

  00045	0f 28 cb	 movaps	 xmm1, xmm3
$LN7@ClampBrigh:

; 479  : 
; 480  : 	m_fAfterBright *= m_fMaxBrightness;

  00048	f3 0f 59 e1	 mulss	 xmm4, xmm1
  0004c	f3 0f 11 61 18	 movss	 DWORD PTR [ecx+24], xmm4

; 481  : }

  00051	c3		 ret	 0
?ClampBrightness@CLensFlare@@AAEXXZ ENDP		; CLensFlare::ClampBrightness
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?ReadDepthPixels@CLensFlare@@AAEXPAM@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?ReadDepthPixels@CLensFlare@@AAEXPAM@Z PROC		; CLensFlare::ReadDepthPixels, COMDAT
; _this$ = ecx

; 444  : 	/*
; 445  : 	LPDIRECT3DSURFACE8 lpSurface;
; 446  : 	if (FAILED(ms_lpd3dDevice->GetDepthStencilSurface(&lpSurface)))
; 447  : 		assert(false);
; 448  : 
; 449  : 	D3DLOCKED_RECT rect;
; 450  : 	lpSurface->LockRect(&rect, NULL, D3DLOCK_READONLY | D3DLOCK_NO_DIRTY_UPDATE);
; 451  : 
; 452  : 	lpSurface->UnlockRect();
; 453  : 	*/
; 454  : 	/*
; 455  : 	glReadPixels(GLint(m_afFlareWinPos[0] - c_nDepthTestDimension / 2),
; 456  : 				 GLint(m_afFlareWinPos[1] - c_nDepthTestDimension / 2),
; 457  : 				 c_nDepthTestDimension, c_nDepthTestDimension,
; 458  : 				 GL_DEPTH_COMPONENT, GL_FLOAT, pPixels);
; 459  : 	*/
; 460  : }

  00000	c2 04 00	 ret	 4
?ReadDepthPixels@CLensFlare@@AAEXPAM@Z ENDP		; CLensFlare::ReadDepthPixels
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?Interpolate@CLensFlare@@IAEMMMM@Z
_TEXT	SEGMENT
_fStart$ = 8						; size = 4
_fEnd$ = 12						; size = 4
tv128 = 12						; size = 4
_fPercent$ = 16						; size = 4
?Interpolate@CLensFlare@@IAEMMMM@Z PROC			; CLensFlare::Interpolate, COMDAT
; _this$ = ecx

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  : 	return fStart + (fEnd - fStart) * fPercent;

  00003	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fEnd$[ebp]
  00008	f3 0f 5c 4d 08	 subss	 xmm1, DWORD PTR _fStart$[ebp]
  0000d	f3 0f 59 4d 10	 mulss	 xmm1, DWORD PTR _fPercent$[ebp]
  00012	f3 0f 58 4d 08	 addss	 xmm1, DWORD PTR _fStart$[ebp]
  00017	f3 0f 11 4d 0c	 movss	 DWORD PTR tv128[ebp], xmm1
  0001c	d9 45 0c	 fld	 DWORD PTR tv128[ebp]

; 129  : }

  0001f	5d		 pop	 ebp
  00020	c2 0c 00	 ret	 12			; 0000000cH
?Interpolate@CLensFlare@@IAEMMMM@Z ENDP			; CLensFlare::Interpolate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?CharacterizeFlare@CLensFlare@@QAEX_N0MABUD3DXCOLOR@@@Z
_TEXT	SEGMENT
_bEnabled$ = 8						; size = 1
_bShowMainFlare$ = 12					; size = 1
_fMaxBrightness$ = 16					; size = 4
_c_rColor$ = 20						; size = 4
?CharacterizeFlare@CLensFlare@@QAEX_N0MABUD3DXCOLOR@@@Z PROC ; CLensFlare::CharacterizeFlare, COMDAT
; _this$ = ecx

; 357  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 358  : 	m_bEnabled = bEnabled;

  00003	8a 45 08	 mov	 al, BYTE PTR _bEnabled$[ebp]

; 359  : 	m_bShowMainFlare = bShowMainFlare;
; 360  : 	m_fMaxBrightness = fMaxBrightness;
; 361  : 
; 362  : 	m_afColor[0] = c_rColor.r;

  00006	8b 55 14	 mov	 edx, DWORD PTR _c_rColor$[ebp]
  00009	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fMaxBrightness$[ebp]
  0000e	88 41 3c	 mov	 BYTE PTR [ecx+60], al
  00011	8a 45 0c	 mov	 al, BYTE PTR _bShowMainFlare$[ebp]
  00014	88 41 3d	 mov	 BYTE PTR [ecx+61], al
  00017	f3 0f 11 41 40	 movss	 DWORD PTR [ecx+64], xmm0
  0001c	8b 02		 mov	 eax, DWORD PTR [edx]
  0001e	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 363  : 	m_afColor[1] = c_rColor.g;

  00021	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00024	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 364  : 	m_afColor[2] = c_rColor.b;

  00027	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002a	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 365  : }

  0002d	5d		 pop	 ebp
  0002e	c2 10 00	 ret	 16			; 00000010H
?CharacterizeFlare@CLensFlare@@QAEX_N0MABUD3DXCOLOR@@@Z ENDP ; CLensFlare::CharacterizeFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?AdjustBrightness@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
?AdjustBrightness@CLensFlare@@QAEXXZ PROC		; CLensFlare::AdjustBrightness, COMDAT
; _this$ = ecx

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 422  : 	if (m_bEnabled)

  0000c	80 7b 3c 00	 cmp	 BYTE PTR [ebx+60], 0
  00010	0f 84 4d 01 00
	00		 je	 $LN5@AdjustBrig

; 429  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  00016	8b 73 34	 mov	 esi, DWORD PTR [ebx+52]
  00019	33 d2		 xor	 edx, edx
  0001b	8b 7b 38	 mov	 edi, DWORD PTR [ebx+56]
  0001e	0f 57 db	 xorps	 xmm3, xmm3
  00021	0f 28 25 00 00
	00 00		 movaps	 xmm4, XMMWORD PTR __xmm@00000001000000010000000100000001
  00028	0f 57 d2	 xorps	 xmm2, xmm2

; 430  : 				++nDifferent;

  0002b	33 c0		 xor	 eax, eax
  0002d	0f 1f 00	 npad	 3
$LL4@AdjustBrig:

; 427  : 
; 428  : 		for (int i = 0; i < c_nDepthTestDimension * c_nDepthTestDimension; ++i)

  00030	0f 10 04 30	 movups	 xmm0, XMMWORD PTR [eax+esi]
  00034	8d 40 20	 lea	 eax, DWORD PTR [eax+32]

; 429  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  00037	0f 10 0c 97	 movups	 xmm1, XMMWORD PTR [edi+edx*4]
  0003b	0f c2 c8 04	 cmpneqps xmm1, xmm0
  0003f	0f 10 44 96 10	 movups	 xmm0, XMMWORD PTR [esi+edx*4+16]

; 430  : 				++nDifferent;

  00044	0f 54 cc	 andps	 xmm1, xmm4
  00047	66 0f fe d9	 paddd	 xmm3, xmm1
  0004b	0f 10 4c 97 10	 movups	 xmm1, XMMWORD PTR [edi+edx*4+16]
  00050	83 c2 08	 add	 edx, 8
  00053	0f c2 c8 04	 cmpneqps xmm1, xmm0
  00057	0f 54 cc	 andps	 xmm1, xmm4
  0005a	66 0f fe d1	 paddd	 xmm2, xmm1
  0005e	81 fa e0 00 00
	00		 cmp	 edx, 224		; 000000e0H
  00064	7c ca		 jl	 SHORT $LL4@AdjustBrig

; 423  : 	{
; 424  : 		ReadDepthPixels(m_pTestPixels);
; 425  : 
; 426  : 		int nDifferent = 0;

  00066	66 0f fe d3	 paddd	 xmm2, xmm3
  0006a	0f 28 c2	 movaps	 xmm0, xmm2
  0006d	66 0f 73 d8 08	 psrldq	 xmm0, 8
  00072	66 0f fe d0	 paddd	 xmm2, xmm0
  00076	0f 10 c2	 movups	 xmm0, xmm2
  00079	66 0f 73 d8 04	 psrldq	 xmm0, 4
  0007e	66 0f fe d0	 paddd	 xmm2, xmm0
  00082	66 0f 7e d1	 movd	 ecx, xmm2

; 427  : 
; 428  : 		for (int i = 0; i < c_nDepthTestDimension * c_nDepthTestDimension; ++i)

  00086	81 fa e1 00 00
	00		 cmp	 edx, 225		; 000000e1H
  0008c	0f 8d 89 00 00
	00		 jge	 $LN19@AdjustBrig
  00092	b8 e1 00 00 00	 mov	 eax, 225		; 000000e1H
  00097	2b c2		 sub	 eax, edx
  00099	83 f8 04	 cmp	 eax, 4
  0009c	7c 5b		 jl	 SHORT $LC20@AdjustBrig
  0009e	66 90		 npad	 2

; 429  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

$LL25@AdjustBrig:
  000a0	f3 0f 10 04 97	 movss	 xmm0, DWORD PTR [edi+edx*4]
  000a5	0f 2e 04 96	 ucomiss xmm0, DWORD PTR [esi+edx*4]
  000a9	9f		 lahf
  000aa	f6 c4 44	 test	 ah, 68			; 00000044H
  000ad	7b 01		 jnp	 SHORT $LN21@AdjustBrig

; 430  : 				++nDifferent;

  000af	41		 inc	 ecx
$LN21@AdjustBrig:

; 429  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  000b0	f3 0f 10 44 97
	04		 movss	 xmm0, DWORD PTR [edi+edx*4+4]
  000b6	0f 2e 44 96 04	 ucomiss xmm0, DWORD PTR [esi+edx*4+4]
  000bb	9f		 lahf
  000bc	f6 c4 44	 test	 ah, 68			; 00000044H
  000bf	7b 01		 jnp	 SHORT $LN22@AdjustBrig

; 430  : 				++nDifferent;

  000c1	41		 inc	 ecx
$LN22@AdjustBrig:

; 429  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  000c2	f3 0f 10 44 97
	08		 movss	 xmm0, DWORD PTR [edi+edx*4+8]
  000c8	0f 2e 44 96 08	 ucomiss xmm0, DWORD PTR [esi+edx*4+8]
  000cd	9f		 lahf
  000ce	f6 c4 44	 test	 ah, 68			; 00000044H
  000d1	7b 01		 jnp	 SHORT $LN23@AdjustBrig

; 430  : 				++nDifferent;

  000d3	41		 inc	 ecx
$LN23@AdjustBrig:

; 429  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  000d4	f3 0f 10 44 97
	0c		 movss	 xmm0, DWORD PTR [edi+edx*4+12]
  000da	0f 2e 44 96 0c	 ucomiss xmm0, DWORD PTR [esi+edx*4+12]
  000df	9f		 lahf
  000e0	f6 c4 44	 test	 ah, 68			; 00000044H
  000e3	7b 01		 jnp	 SHORT $LN24@AdjustBrig

; 430  : 				++nDifferent;

  000e5	41		 inc	 ecx
$LN24@AdjustBrig:
  000e6	83 c2 04	 add	 edx, 4
  000e9	81 fa de 00 00
	00		 cmp	 edx, 222		; 000000deH
  000ef	7c af		 jl	 SHORT $LL25@AdjustBrig

; 427  : 
; 428  : 		for (int i = 0; i < c_nDepthTestDimension * c_nDepthTestDimension; ++i)

  000f1	81 fa e1 00 00
	00		 cmp	 edx, 225		; 000000e1H
  000f7	7d 22		 jge	 SHORT $LN19@AdjustBrig
$LC20@AdjustBrig:
  000f9	c1 e2 02	 shl	 edx, 2
  000fc	0f 1f 40 00	 npad	 4
$LC30@AdjustBrig:

; 429  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  00100	f3 0f 10 04 3a	 movss	 xmm0, DWORD PTR [edx+edi]
  00105	0f 2e 04 16	 ucomiss xmm0, DWORD PTR [esi+edx]
  00109	9f		 lahf
  0010a	f6 c4 44	 test	 ah, 68			; 00000044H
  0010d	7b 01		 jnp	 SHORT $LN13@AdjustBrig

; 430  : 				++nDifferent;

  0010f	41		 inc	 ecx
$LN13@AdjustBrig:

; 427  : 
; 428  : 		for (int i = 0; i < c_nDepthTestDimension * c_nDepthTestDimension; ++i)

  00110	83 c2 04	 add	 edx, 4
  00113	81 fa 84 03 00
	00		 cmp	 edx, 900		; 00000384H
  00119	7c e5		 jl	 SHORT $LC30@AdjustBrig
$LN19@AdjustBrig:
  0011b	66 0f 6e c1	 movd	 xmm0, ecx
  0011f	0f 57 c9	 xorps	 xmm1, xmm1

; 431  : 
; 432  : 		float fAdjust = (static_cast<float>(nDifferent) / (c_nDepthTestDimension * c_nDepthTestDimension));

  00122	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00125	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43610000
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  0012d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00130	66 0f 2e c8	 ucomisd xmm1, xmm0
  00134	77 06		 ja	 SHORT $LN32@AdjustBrig
  00136	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0013a	eb 05		 jmp	 SHORT $LN33@AdjustBrig
$LN32@AdjustBrig:
  0013c	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN33@AdjustBrig:
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 434  : 		m_fAfterBright *= 1.0f - fAdjust;

  00141	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00149	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 433  : 		fAdjust = sqrtf(fAdjust) * 0.85f;

  0014d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f59999a

; 434  : 		m_fAfterBright *= 1.0f - fAdjust;

  00155	f3 0f 5c c8	 subss	 xmm1, xmm0
  00159	f3 0f 59 4b 18	 mulss	 xmm1, DWORD PTR [ebx+24]
  0015e	f3 0f 11 4b 18	 movss	 DWORD PTR [ebx+24], xmm1
$LN5@AdjustBrig:

; 435  : 	}
; 436  : }

  00163	5f		 pop	 edi
  00164	5e		 pop	 esi
  00165	5b		 pop	 ebx
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c3		 ret	 0
?AdjustBrightness@CLensFlare@@QAEXXZ ENDP		; CLensFlare::AdjustBrightness
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?ReadControlPixels@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
?ReadControlPixels@CLensFlare@@QAEXXZ PROC		; CLensFlare::ReadControlPixels, COMDAT
; _this$ = ecx

; 412  : 	if (m_bEnabled)
; 413  : 		ReadDepthPixels(m_pControlPixels);
; 414  : }

  00000	c2 00 00	 ret	 0
?ReadControlPixels@CLensFlare@@QAEXXZ ENDP		; CLensFlare::ReadControlPixels
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?SetBrightnesses@CLensFlare@@QAEXMM@Z
_TEXT	SEGMENT
_fBeforeBright$ = 8					; size = 4
_fAfterBright$ = 12					; size = 4
?SetBrightnesses@CLensFlare@@QAEXMM@Z PROC		; CLensFlare::SetBrightnesses, COMDAT
; _this$ = ecx

; 396  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 397  : 	if (m_bEnabled)

  00003	80 79 3c 00	 cmp	 BYTE PTR [ecx+60], 0
  00007	74 19		 je	 SHORT $LN2@SetBrightn

; 398  : 	{
; 399  : 	    m_fBeforeBright = fBeforeBright;

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fBeforeBright$[ebp]
  0000e	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 400  : 	    m_fAfterBright = fAfterBright;

  00013	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fAfterBright$[ebp]
  00018	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0

; 401  : 
; 402  : 		ClampBrightness();

  0001d	e8 00 00 00 00	 call	 ?ClampBrightness@CLensFlare@@AAEXXZ ; CLensFlare::ClampBrightness
$LN2@SetBrightn:

; 403  : 	}
; 404  : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?SetBrightnesses@CLensFlare@@QAEXMM@Z ENDP		; CLensFlare::SetBrightnesses
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?SetFlareLocation@CLensFlare@@QAEXNN@Z
_TEXT	SEGMENT
_dX$ = 8						; size = 8
_dY$ = 16						; size = 8
?SetFlareLocation@CLensFlare@@QAEXNN@Z PROC		; CLensFlare::SetFlareLocation, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 	if (m_bEnabled)

  00003	80 79 3c 00	 cmp	 BYTE PTR [ecx+60], 0
  00007	74 66		 je	 SHORT $LN2@SetFlareLo

; 382  : 	{
; 383  : 		m_afFlareWinPos[0] = float(dX);

  00009	f2 0f 10 4d 08	 movsd	 xmm1, QWORD PTR _dX$[ebp]
  0000e	0f 57 c0	 xorps	 xmm0, xmm0
  00011	f2 0f 10 55 10	 movsd	 xmm2, QWORD PTR _dY$[ebp]
  00016	66 0f 5a c9	 cvtpd2ps xmm1, xmm1

; 384  : 		m_afFlareWinPos[1] = float(dY);

  0001a	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  0001e	f3 0f 11 49 0c	 movss	 DWORD PTR [ecx+12], xmm1
  00023	f3 0f 11 51 10	 movss	 DWORD PTR [ecx+16], xmm2

; 385  : 
; 386  : 		m_afFlarePos[0] = float(dX) / ms_Viewport.Width;

  00028	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+8
  0002d	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00031	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00034	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0003d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00041	f3 0f 5e c8	 divss	 xmm1, xmm0
  00045	0f 57 c0	 xorps	 xmm0, xmm0
  00048	f3 0f 11 49 04	 movss	 DWORD PTR [ecx+4], xmm1

; 387  : 		m_afFlarePos[1] = float(dY) / ms_Viewport.Height;

  0004d	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+12
  00052	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00056	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00059	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00062	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00066	f3 0f 5e d0	 divss	 xmm2, xmm0
  0006a	f3 0f 11 51 08	 movss	 DWORD PTR [ecx+8], xmm2
$LN2@SetFlareLo:

; 388  : 	}
; 389  : }

  0006f	5d		 pop	 ebp
  00070	c2 10 00	 ret	 16			; 00000010H
?SetFlareLocation@CLensFlare@@QAEXNN@Z ENDP		; CLensFlare::SetFlareLocation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_strPath$ = 8						; size = 24
?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CLensFlare::Initialize, COMDAT
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 372  : 	if (m_bEnabled)

  00024	80 79 3c 00	 cmp	 BYTE PTR [ecx+60], 0
  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	74 18		 je	 SHORT $LN2@Initialize

; 373  : 		m_cFlare.Init(strPath);

  00031	83 ec 18	 sub	 esp, 24			; 00000018H
  00034	8d 71 24	 lea	 esi, DWORD PTR [ecx+36]
  00037	8d 45 08	 lea	 eax, DWORD PTR _strPath$[ebp]
  0003a	8b cc		 mov	 ecx, esp
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00042	8b ce		 mov	 ecx, esi
  00044	e8 00 00 00 00	 call	 ?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CFlare::Init
$LN2@Initialize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00049	8b 4d 1c	 mov	 ecx, DWORD PTR _strPath$[ebp+20]
  0004c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0004f	76 28		 jbe	 SHORT $LN26@Initialize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00051	8b 55 08	 mov	 edx, DWORD PTR _strPath$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00054	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00055	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00057	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005d	72 10		 jb	 SHORT $LN37@Initialize

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00062	83 c1 23	 add	 ecx, 35			; 00000023H
  00065	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00067	83 c0 fc	 add	 eax, -4			; fffffffcH
  0006a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006d	77 1c		 ja	 SHORT $LN47@Initialize
$LN37@Initialize:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006f	51		 push	 ecx
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00076	83 c4 08	 add	 esp, 8
$LN26@Initialize:
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 374  : }

  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	5e		 pop	 esi
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 18 00	 ret	 24			; 00000018H
$LN47@Initialize:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN45@Initialize:
  00090	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strPath$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CLensFlare::Initialize
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_strSunFile$ = 8					; size = 24
_fSunSize$ = 32						; size = 4
?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z PROC ; CLensFlare::SetMainFlare, COMDAT
; _this$ = ecx

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 295  : 	if (m_bEnabled && m_bShowMainFlare)

  00026	80 7f 3c 00	 cmp	 BYTE PTR [edi+60], 0
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00031	74 3f		 je	 SHORT $LN2@SetMainFla
  00033	80 7f 3d 00	 cmp	 BYTE PTR [edi+61], 0
  00037	74 39		 je	 SHORT $LN2@SetMainFla
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00039	83 7d 1c 0f	 cmp	 DWORD PTR _strSunFile$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  0003d	8d 45 08	 lea	 eax, DWORD PTR _strSunFile$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 297  : 		m_fSunSize = fSunSize;

  00040	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _fSunSize$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00045	0f 47 45 08	 cmova	 eax, DWORD PTR _strSunFile$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 297  : 		m_fSunSize = fSunSize;

  00049	f3 0f 11 47 20	 movss	 DWORD PTR [edi+32], xmm0

; 298  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer(strSunFile.c_str());

  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  0005a	8b f0		 mov	 esi, eax

; 299  : 
; 300  : 		if (!pResource->IsType(CGraphicImage::Type()))

  0005c	e8 00 00 00 00	 call	 ?Type@CGraphicImage@@SAKXZ ; CGraphicImage::Type
  00061	50		 push	 eax
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?IsType@CResource@@QAE_NK@Z ; CResource::IsType

; 301  : 			assert(false);
; 302  : 
; 303  : 		m_SunFlareImageInstance.SetImagePointer(static_cast<CGraphicImage *> (pResource));

  00069	56		 push	 esi
  0006a	8d 4f 54	 lea	 ecx, DWORD PTR [edi+84]
  0006d	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
$LN2@SetMainFla:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00072	8b 4d 1c	 mov	 ecx, DWORD PTR _strSunFile$[ebp+20]
  00075	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00078	76 28		 jbe	 SHORT $LN36@SetMainFla
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007a	8b 55 08	 mov	 edx, DWORD PTR _strSunFile$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0007d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007e	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00080	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00086	72 10		 jb	 SHORT $LN47@SetMainFla

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00088	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0008b	83 c1 23	 add	 ecx, 35			; 00000023H
  0008e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00090	83 c0 fc	 add	 eax, -4			; fffffffcH
  00093	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00096	77 1d		 ja	 SHORT $LN57@SetMainFla
$LN47@SetMainFla:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00098	51		 push	 ecx
  00099	52		 push	 edx
  0009a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009f	83 c4 08	 add	 esp, 8
$LN36@SetMainFla:
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 305  : }

  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 1c 00	 ret	 28			; 0000001cH
$LN57@SetMainFla:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN55@SetMainFla:
  000ba	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strSunFile$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ENDP ; CLensFlare::SetMainFlare
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?DrawFlare@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
_matProj$1 = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
?DrawFlare@CLensFlare@@QAEXXZ PROC			; CLensFlare::DrawFlare, COMDAT
; _this$ = ecx

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 313  : 	if (m_bEnabled && m_bFlareVisible && m_bDrawFlare && m_fAfterBright != 0.0f)

  00013	80 7e 3c 00	 cmp	 BYTE PTR [esi+60], 0
  00017	0f 84 b0 01 00
	00		 je	 $LN2@DrawFlare
  0001d	80 7e 1c 00	 cmp	 BYTE PTR [esi+28], 0
  00021	0f 84 a6 01 00
	00		 je	 $LN2@DrawFlare
  00027	80 7e 1d 00	 cmp	 BYTE PTR [esi+29], 0
  0002b	0f 84 9c 01 00
	00		 je	 $LN2@DrawFlare
  00031	f3 0f 10 4e 18	 movss	 xmm1, DWORD PTR [esi+24]
  00036	0f 57 c0	 xorps	 xmm0, xmm0
  00039	0f 2e c8	 ucomiss xmm1, xmm0
  0003c	9f		 lahf
  0003d	f6 c4 44	 test	 ah, 68			; 00000044H
  00040	0f 8b 87 01 00
	00		 jnp	 $LN2@DrawFlare

; 314  : 	{
; 315  :         //glPushAttrib(GL_ENABLE_BIT);
; 316  : 		STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, FALSE); // glDisable(GL_LIGHTING);

  00046	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0004c	6a 00		 push	 0
  0004e	68 89 00 00 00	 push	 137			; 00000089H
  00053	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 317  : 		STATEMANAGER.SaveRenderState(D3DRS_ZENABLE, FALSE); // glDisable(GL_DEPTH_TEST);

  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0005e	6a 00		 push	 0
  00060	6a 07		 push	 7
  00062	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 318  : 		STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_NONE); // glDisable(GL_CULL_FACE);

  00067	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0006d	6a 01		 push	 1
  0006f	6a 16		 push	 22			; 00000016H
  00071	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 319  : 		STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, FALSE); // glDisable(GL_ALPHA_TEST);

  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0007c	6a 00		 push	 0
  0007e	6a 0f		 push	 15			; 0000000fH
  00080	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 320  : 		STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE); // glEnable(GL_BLEND);

  00085	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0008b	6a 01		 push	 1
  0008d	6a 1b		 push	 27			; 0000001bH
  0008f	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 321  : 
; 322  : 		D3DXMATRIX matProj;
; 323  : 		D3DXMatrixOrthoOffCenterRH(&matProj, 0.0f, ms_Viewport.Width, ms_Viewport.Height, 0.0f, -1.0f, 1.0f);

  00094	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+12
  00099	83 ec 18	 sub	 esp, 24			; 00000018H
  0009c	66 0f 6e c0	 movd	 xmm0, eax
  000a0	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000a4	c7 44 24 14 00
	00 80 3f	 mov	 DWORD PTR [esp+20], 1065353216 ; 3f800000H
  000ac	c7 44 24 10 00
	00 80 bf	 mov	 DWORD PTR [esp+16], -1082130432 ; bf800000H
  000b4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b7	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR [esp+12], 0
  000bf	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000c8	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+8
  000cd	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000d1	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000d7	66 0f 6e c0	 movd	 xmm0, eax
  000db	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000df	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e2	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000eb	8d 45 bc	 lea	 eax, DWORD PTR _matProj$1[ebp]
  000ee	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000f2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000f8	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _D3DXMatrixOrthoOffCenterRH@28

; 324  : 		STATEMANAGER.SaveTransform(D3DTS_PROJECTION, &matProj);

  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0010b	8d 45 bc	 lea	 eax, DWORD PTR _matProj$1[ebp]
  0010e	50		 push	 eax
  0010f	6a 03		 push	 3
  00111	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 325  : 		STATEMANAGER.SaveTransform(D3DTS_VIEW, &ms_matIdentity);

  00116	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0011c	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  00121	6a 02		 push	 2
  00123	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 326  : 
; 327  : 		STATEMANAGER.SetTransform(D3DTS_WORLD, &ms_matIdentity);

  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012e	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  00133	68 00 01 00 00	 push	 256			; 00000100H
  00138	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 328  : 		//glMatrixMode(GL_MODELVIEW);
; 329  : 		//glLoadIdentity();
; 330  : 
; 331  : 		//glDisable(GL_TEXTURE_2D);
; 332  : 		DrawAfterFlare();

  0013d	8b ce		 mov	 ecx, esi
  0013f	e8 00 00 00 00	 call	 ?DrawAfterFlare@CLensFlare@@QAEXXZ ; CLensFlare::DrawAfterFlare

; 333  : 
; 334  : 		//glEnable(GL_TEXTURE_2D);
; 335  : 		m_cFlare.Draw(m_fAfterBright,

  00144	f3 0f 2c 46 10	 cvttss2si eax, DWORD PTR [esi+16]
  00149	f3 0f 10 46 18	 movss	 xmm0, DWORD PTR [esi+24]
  0014e	50		 push	 eax
  0014f	f3 0f 2c 46 0c	 cvttss2si eax, DWORD PTR [esi+12]
  00154	50		 push	 eax
  00155	ff 35 0c 00 00
	00		 push	 DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+12
  0015b	ff 35 08 00 00
	00		 push	 DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+8
  00161	51		 push	 ecx
  00162	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	e8 00 00 00 00	 call	 ?Draw@CFlare@@QAEXMHHHH@Z ; CFlare::Draw

; 336  : 					  ms_Viewport.Width,
; 337  : 					  ms_Viewport.Height,
; 338  : 					  static_cast<int>(m_afFlareWinPos[0]),
; 339  : 					  static_cast<int>(m_afFlareWinPos[1]));
; 340  : 
; 341  : 		STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING); // glDisable(GL_LIGHTING);

  0016f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00175	68 89 00 00 00	 push	 137			; 00000089H
  0017a	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 342  : 		STATEMANAGER.RestoreRenderState(D3DRS_ZENABLE); // glDisable(GL_DEPTH_TEST);

  0017f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00185	6a 07		 push	 7
  00187	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 343  : 		STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE); // glDisable(GL_CULL_FACE);

  0018c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00192	6a 16		 push	 22			; 00000016H
  00194	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 344  : 		STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE); // glEnable(GL_BLEND);

  00199	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0019f	6a 1b		 push	 27			; 0000001bH
  001a1	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 345  : 		STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE); // glDisable(GL_ALPHA_TEST);

  001a6	6a 0f		 push	 15			; 0000000fH
  001a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001ae	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 346  : 
; 347  : 		STATEMANAGER.RestoreTransform(D3DTS_PROJECTION);

  001b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b9	6a 03		 push	 3
  001bb	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 348  : 		STATEMANAGER.RestoreTransform(D3DTS_VIEW);

  001c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c6	6a 02		 push	 2
  001c8	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform
$LN2@DrawFlare:

; 349  : 		//glDisable(GL_TEXTURE_2D);
; 350  :         //glPopAttrib();
; 351  : 	}
; 352  : }

  001cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d0	33 cd		 xor	 ecx, ebp
  001d2	5e		 pop	 esi
  001d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d8	8b e5		 mov	 esp, ebp
  001da	5d		 pop	 ebp
  001db	c3		 ret	 0
?DrawFlare@CLensFlare@@QAEXXZ ENDP			; CLensFlare::DrawFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?DrawAfterFlare@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
?DrawAfterFlare@CLensFlare@@QAEXXZ PROC			; CLensFlare::DrawAfterFlare, COMDAT
; _this$ = ecx

; 279  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 280  : 	if (m_bEnabled && m_fAfterBright != 0.0f && m_bDrawBrightScreen)

  00003	80 7e 3c 00	 cmp	 BYTE PTR [esi+60], 0
  00007	74 76		 je	 SHORT $LN2@DrawAfterF
  00009	f3 0f 10 4e 18	 movss	 xmm1, DWORD PTR [esi+24]
  0000e	0f 57 c0	 xorps	 xmm0, xmm0
  00011	0f 2e c8	 ucomiss xmm1, xmm0
  00014	9f		 lahf
  00015	f6 c4 44	 test	 ah, 68			; 00000044H
  00018	7b 65		 jnp	 SHORT $LN2@DrawAfterF
  0001a	80 7e 1e 00	 cmp	 BYTE PTR [esi+30], 0
  0001e	74 5f		 je	 SHORT $LN2@DrawAfterF

; 281  : 	{
; 282  : 		SetDiffuseColor(m_afColor[0], m_afColor[1], m_afColor[2], m_fAfterBright);

  00020	f3 0f 10 46 4c	 movss	 xmm0, DWORD PTR [esi+76]
  00025	83 ec 10	 sub	 esp, 16			; 00000010H
  00028	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  0002e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00034	f3 0f 10 46 48	 movss	 xmm0, DWORD PTR [esi+72]
  00039	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0003f	f3 0f 10 46 44	 movss	 xmm0, DWORD PTR [esi+68]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor

; 283  : 		RenderBar2d(0.0f, 0.0f, 3840.0f, 2400.0f);	//@natanek7 Lens Flare fix

  0004e	83 ec 14	 sub	 esp, 20			; 00000014H
  00051	8b ce		 mov	 ecx, esi
  00053	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  0005b	c7 44 24 0c 00
	00 16 45	 mov	 DWORD PTR [esp+12], 1159069696 ; 45160000H
  00063	c7 44 24 08 00
	00 70 45	 mov	 DWORD PTR [esp+8], 1164967936 ; 45700000H
  0006b	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  00073	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0007a	e8 00 00 00 00	 call	 ?RenderBar2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderBar2d
$LN2@DrawAfterF:

; 284  : //		RenderBar2d(0.0f, 0.0f, 1024.0f, 1024.0f);
; 285  : 
; 286  : 	}
; 287  : }

  0007f	5e		 pop	 esi
  00080	c3		 ret	 0
?DrawAfterFlare@CLensFlare@@QAEXXZ ENDP			; CLensFlare::DrawAfterFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?DrawBeforeFlare@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
_matWorld$ = -228					; size = 64
_matProj$ = -164					; size = 64
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
?DrawBeforeFlare@CLensFlare@@QAEXXZ PROC		; CLensFlare::DrawBeforeFlare, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 191  :     if (!m_bFlareVisible || !m_bEnabled || !m_bShowMainFlare)

  00016	80 7e 1c 00	 cmp	 BYTE PTR [esi+28], 0
  0001a	0f 84 85 03 00
	00		 je	 $LN3@DrawBefore
  00020	80 7e 3c 00	 cmp	 BYTE PTR [esi+60], 0
  00024	0f 84 7b 03 00
	00		 je	 $LN3@DrawBefore
  0002a	80 7e 3d 00	 cmp	 BYTE PTR [esi+61], 0
  0002e	0f 84 71 03 00
	00		 je	 $LN3@DrawBefore

; 192  :         return;
; 193  : 
; 194  : 	if (m_SunFlareImageInstance.IsEmpty())

  00034	57		 push	 edi
  00035	8d 7e 54	 lea	 edi, DWORD PTR [esi+84]
  00038	8b cf		 mov	 ecx, edi
  0003a	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0003f	84 c0		 test	 al, al
  00041	0f 85 5d 03 00
	00		 jne	 $LN158@DrawBefore

; 195  : 		return;
; 196  : 
; 197  : 	D3DXMATRIX matProj;
; 198  : 	D3DXMatrixOrthoOffCenterRH(&matProj, 0.0f, 1.0f, 1.0f, 0.0f, -1.0f, 1.0f);

  00047	83 ec 18	 sub	 esp, 24			; 00000018H
  0004a	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _matProj$[ebp]
  00050	c7 44 24 14 00
	00 80 3f	 mov	 DWORD PTR [esp+20], 1065353216 ; 3f800000H
  00058	c7 44 24 10 00
	00 80 bf	 mov	 DWORD PTR [esp+16], -1082130432 ; bf800000H
  00060	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR [esp+12], 0
  00068	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR [esp+8], 1065353216 ; 3f800000H
  00070	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00078	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 _D3DXMatrixOrthoOffCenterRH@28

; 199  : 	STATEMANAGER.SaveTransform(D3DTS_PROJECTION, &matProj);

  00085	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0008b	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _matProj$[ebp]
  00091	50		 push	 eax
  00092	6a 03		 push	 3
  00094	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 200  : 	STATEMANAGER.SaveTransform(D3DTS_VIEW, &ms_matIdentity);

  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0009f	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  000a4	6a 02		 push	 2
  000a6	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 201  : 
; 202  : 	D3DXMATRIX matWorld;
; 203  : 	D3DXMatrixTranslation(&matWorld, m_afFlarePos[0], m_afFlarePos[1], 0.0f);

  000ab	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000b0	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _matWorld$[ebp]
  000b6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000b9	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  000c1	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000c7	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  000cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 204  : 	STATEMANAGER.SetTransform(D3DTS_WORLD, &matWorld);

  000d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000dd	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _matWorld$[ebp]
  000e3	50		 push	 eax
  000e4	68 00 01 00 00	 push	 256			; 00000100H
  000e9	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 205  : 
; 206  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, FALSE);

  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f4	6a 00		 push	 0
  000f6	68 89 00 00 00	 push	 137			; 00000089H
  000fb	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 207  : 	STATEMANAGER.SaveRenderState(D3DRS_ZENABLE, FALSE);					// glDisable(GL_DEPTH_TEST);

  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00106	6a 00		 push	 0
  00108	6a 07		 push	 7
  0010a	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 208  : 	STATEMANAGER.SaveRenderState(D3DRS_ZWRITEENABLE, FALSE);

  0010f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00115	6a 00		 push	 0
  00117	6a 0e		 push	 14			; 0000000eH
  00119	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 209  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_NONE);			// glDisable(GL_CULL_FACE);

  0011e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00124	6a 01		 push	 1
  00126	6a 16		 push	 22			; 00000016H
  00128	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 210  : 	STATEMANAGER.SaveRenderState(D3DRS_SHADEMODE, D3DSHADE_FLAT);		// glShadeModel(GL_FLAT);

  0012d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00133	6a 01		 push	 1
  00135	6a 09		 push	 9
  00137	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 211  :     STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, FALSE);			// glDisable(GL_ALPHA_TEST);

  0013c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00142	6a 00		 push	 0
  00144	6a 0f		 push	 15			; 0000000fH
  00146	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 212  :     STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE);			// glEnable(GL_BLEND);

  0014b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00151	6a 01		 push	 1
  00153	6a 1b		 push	 27			; 0000001bH
  00155	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 213  : 	STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  0015a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00160	6a 05		 push	 5
  00162	6a 13		 push	 19			; 00000013H
  00164	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 214  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  00169	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0016f	6a 06		 push	 6
  00171	6a 14		 push	 20			; 00000014H
  00173	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 215  : 
; 216  : 	float fAspectRatio = ms_Viewport.Width / float(ms_Viewport.Height);

  00178	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+8

; 217  : 	float fHeight = m_fSunSize * fAspectRatio;

  0017d	f3 0f 10 66 20	 movss	 xmm4, DWORD PTR [esi+32]
  00182	66 0f 6e c0	 movd	 xmm0, eax
  00186	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0018a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0018d	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00196	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+12
  0019b	66 0f 5a d8	 cvtpd2ps xmm3, xmm0
  0019f	66 0f 6e c0	 movd	 xmm0, eax
  001a3	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  001a7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001aa	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]

; 218  : 	D3DXCOLOR color(1.0f, 1.0f, 1.0f, 1.0f);
; 219  : 
; 220  : 	SVertex vertices[4];
; 221  : 	vertices[0].x = -m_fSunSize;
; 222  : 	vertices[0].y = -fHeight;
; 223  : 	vertices[0].z = 0.0f;
; 224  : 	vertices[0].color = color;
; 225  : 	vertices[0].u = 0.0f;
; 226  : 	vertices[0].v = 0.0f;
; 227  : 
; 228  : 	vertices[1].x = -m_fSunSize;
; 229  : 	vertices[1].y = fHeight;
; 230  : 	vertices[1].z = 0.0f;
; 231  : 	vertices[1].color = color;
; 232  : 	vertices[1].u = 0.0f;
; 233  : 	vertices[1].v = 1.0f;
; 234  : 
; 235  : 	vertices[2].x = m_fSunSize;
; 236  : 	vertices[2].y = -fHeight;
; 237  : 	vertices[2].z = 0.0f;
; 238  : 	vertices[2].color = color;
; 239  : 	vertices[2].u = 1.0f;
; 240  : 	vertices[2].v = 0.0f;
; 241  : 
; 242  : 	vertices[3].x = m_fSunSize;
; 243  : 	vertices[3].y = fHeight;
; 244  : 	vertices[3].z = 0.0f;
; 245  : 	vertices[3].color = color;
; 246  : 	vertices[3].u = 1.0f;
; 247  : 	vertices[3].v = 1.0f;
; 248  : 
; 249  : 	STATEMANAGER.SetTexture(0, m_SunFlareImageInstance.GetTexturePointer()->GetD3DTexture());

  001b3	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001b7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001bd	8b cf		 mov	 ecx, edi
  001bf	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+8], 0
  001c6	c7 45 a8 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+12], -1
  001cd	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
  001d4	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  001db	0f 28 cc	 movaps	 xmm1, xmm4
  001de	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+32], 0
  001e5	f3 0f 5e d8	 divss	 xmm3, xmm0
  001e9	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+36], -1
  001f0	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+40], 0
  001f7	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+44], 1065353216 ; 3f800000H
  001fe	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+56], 0
  00205	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+60], -1
  0020c	c7 45 dc 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+64], 1065353216 ; 3f800000H
  00213	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  0021a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+80], 0
  00221	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+84], -1
  00228	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+88], 1065353216 ; 3f800000H
  0022f	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+92], 1065353216 ; 3f800000H
  00236	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0023d	f3 0f 59 dc	 mulss	 xmm3, xmm4
  00241	f3 0f 11 4d 9c	 movss	 DWORD PTR _vertices$[ebp], xmm1
  00246	f3 0f 11 4d b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm1
  0024b	0f 28 d3	 movaps	 xmm2, xmm3
  0024e	f3 0f 11 5d b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm3
  00253	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  0025a	f3 0f 11 55 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm2
  0025f	f3 0f 11 65 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm4
  00264	f3 0f 11 55 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm2
  00269	f3 0f 11 65 e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm4
  0026e	f3 0f 11 5d e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm3
  00273	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  00278	8b c8		 mov	 ecx, eax
  0027a	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  0027f	50		 push	 eax
  00280	6a 00		 push	 0
  00282	8b ce		 mov	 ecx, esi
  00284	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 250  : 	STATEMANAGER.SetTexture(1, NULL);

  00289	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0028f	6a 00		 push	 0
  00291	6a 01		 push	 1
  00293	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 251  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

  00298	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0029e	6a 04		 push	 4
  002a0	6a 01		 push	 1
  002a2	6a 00		 push	 0
  002a4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 252  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  002a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002af	6a 02		 push	 2
  002b1	6a 02		 push	 2
  002b3	6a 00		 push	 0
  002b5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 253  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  002ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002c0	6a 00		 push	 0
  002c2	6a 03		 push	 3
  002c4	6a 00		 push	 0
  002c6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 254  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

  002cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002d1	6a 02		 push	 2
  002d3	6a 04		 push	 4
  002d5	6a 00		 push	 0
  002d7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 255  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  002dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002e2	6a 02		 push	 2
  002e4	6a 02		 push	 2
  002e6	6a 00		 push	 0
  002e8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 256  : 
; 257  : 	STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  002ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002f3	68 42 01 00 00	 push	 322			; 00000142H
  002f8	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 258  : 	STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, vertices, sizeof(SVertex));

  002fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00303	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  00306	6a 18		 push	 24			; 00000018H
  00308	50		 push	 eax
  00309	6a 02		 push	 2
  0030b	6a 05		 push	 5
  0030d	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP

; 259  : 
; 260  : 	STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING);

  00312	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00318	68 89 00 00 00	 push	 137			; 00000089H
  0031d	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 261  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZENABLE); // glDisable(GL_DEPTH_TEST);

  00322	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00328	6a 07		 push	 7
  0032a	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 262  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZWRITEENABLE);

  0032f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00335	6a 0e		 push	 14			; 0000000eH
  00337	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 263  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE); // glDisable(GL_CULL_FACE);

  0033c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00342	6a 16		 push	 22			; 00000016H
  00344	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 264  : 	STATEMANAGER.RestoreRenderState(D3DRS_SHADEMODE); // glShadeModel(GL_FLAT);

  00349	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0034f	6a 09		 push	 9
  00351	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 265  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE); // glDisable(GL_ALPHA_TEST);

  00356	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0035c	6a 0f		 push	 15			; 0000000fH
  0035e	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 266  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE); // glEnable(GL_BLEND);

  00363	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00369	6a 1b		 push	 27			; 0000001bH
  0036b	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 267  : 	STATEMANAGER.RestoreRenderState(D3DRS_SRCBLEND);

  00370	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00376	6a 13		 push	 19			; 00000013H
  00378	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 268  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  0037d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00383	6a 14		 push	 20			; 00000014H
  00385	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 269  : 
; 270  : 	STATEMANAGER.RestoreTransform(D3DTS_VIEW);

  0038a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00390	6a 02		 push	 2
  00392	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 271  : 	STATEMANAGER.RestoreTransform(D3DTS_PROJECTION);

  00397	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0039d	6a 03		 push	 3
  0039f	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform
$LN158@DrawBefore:
  003a4	5f		 pop	 edi
$LN3@DrawBefore:

; 272  : }

  003a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003a8	33 cd		 xor	 ecx, ebp
  003aa	5e		 pop	 esi
  003ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003b0	8b e5		 mov	 esp, ebp
  003b2	5d		 pop	 ebp
  003b3	c3		 ret	 0
?DrawBeforeFlare@CLensFlare@@QAEXXZ ENDP		; CLensFlare::DrawBeforeFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?Compute@CLensFlare@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv215 = -36						; size = 4
tv213 = -32						; size = 4
tv214 = -28						; size = 4
_fX$ = -24						; size = 4
_fY$ = -20						; size = 4
_fX$1$ = -20						; size = 4
__real@3f800000$1$ = -16				; size = 4
_fY$1$ = -16						; size = 4
_v3Target$ = -12					; size = 12
_c_rv3LightDirection$ = 8				; size = 4
?Compute@CLensFlare@@QAEXABUD3DXVECTOR3@@@Z PROC	; CLensFlare::Compute, COMDAT
; _this$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 24	 sub	 esp, 36			; 00000024H
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx

; 136  : 	float afSunPos[3];
; 137  : 
; 138  : 	D3DXVECTOR3 v3Target = CCameraManager::Instance().GetCurrentCamera()->GetTarget();

  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00012	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 139  : 
; 140  : 	afSunPos[0]	= v3Target.x - c_rv3LightDirection.x * 99999999.0f;

  00017	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@4cbebc20

; 141  : 	afSunPos[1]	= v3Target.y - c_rv3LightDirection.y * 99999999.0f;
; 142  : 	afSunPos[2]	= v3Target.z - c_rv3LightDirection.z * 99999999.0f;
; 143  : 
; 144  : 	float fX, fY;
; 145  : 	ProjectPosition(afSunPos[0], afSunPos[1], afSunPos[2], &fX, &fY);

  0001f	8b ce		 mov	 ecx, esi
  00021	f3 0f 7e 40 3c	 movq	 xmm0, QWORD PTR [eax+60]
  00026	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00029	89 44 24 24	 mov	 DWORD PTR _v3Target$[esp+48], eax
  0002d	8b 45 08	 mov	 eax, DWORD PTR _c_rv3LightDirection$[ebp]
  00030	66 0f d6 44 24
	1c		 movq	 QWORD PTR _v3Target$[esp+40], xmm0
  00036	f3 0f 10 5c 24
	1c		 movss	 xmm3, DWORD PTR _v3Target$[esp+40]
  0003c	f3 0f 10 54 24
	20		 movss	 xmm2, DWORD PTR _v3Target$[esp+44]
  00042	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00046	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0004a	f3 0f 5c d8	 subss	 xmm3, xmm0
  0004e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00053	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00057	f3 0f 5c d0	 subss	 xmm2, xmm0
  0005b	f3 0f 11 5c 24
	08		 movss	 DWORD PTR tv213[esp+40], xmm3
  00061	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00066	8d 44 24 14	 lea	 eax, DWORD PTR _fY$[esp+40]
  0006a	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0006e	50		 push	 eax
  0006f	f3 0f 10 4c 24
	28		 movss	 xmm1, DWORD PTR _v3Target$[esp+52]
  00075	8d 44 24 14	 lea	 eax, DWORD PTR _fX$[esp+44]
  00079	50		 push	 eax
  0007a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0007e	f3 0f 11 54 24
	0c		 movss	 DWORD PTR tv215[esp+48], xmm2
  00084	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00087	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  0008d	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  00093	f3 0f 11 4c 24
	20		 movss	 DWORD PTR tv214[esp+60], xmm1
  00099	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  0009e	e8 00 00 00 00	 call	 ?ProjectPosition@CScreen@@QAEXMMMPAM0@Z ; CScreen::ProjectPosition

; 146  : 
; 147  : 	// set flare location
; 148  : 	SetFlareLocation(fX, fY);

  000a3	f3 0f 10 44 24
	14		 movss	 xmm0, DWORD PTR _fY$[esp+40]
  000a9	83 ec 10	 sub	 esp, 16			; 00000010H
  000ac	f3 0f 11 44 24
	28		 movss	 DWORD PTR _fY$1$[esp+56], xmm0
  000b2	8b ce		 mov	 ecx, esi
  000b4	0f 5a c0	 cvtps2pd xmm0, xmm0
  000b7	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  000bd	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR _fX$[esp+56]
  000c3	f3 0f 11 44 24
	24		 movss	 DWORD PTR _fX$1$[esp+56], xmm0
  000c9	0f 5a c0	 cvtps2pd xmm0, xmm0
  000cc	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000d1	e8 00 00 00 00	 call	 ?SetFlareLocation@CLensFlare@@QAEXNN@Z ; CLensFlare::SetFlareLocation

; 149  : 
; 150  : 	// determine visibility
; 151  : 	float fSunVectorMagnitude = sqrtf(afSunPos[0] * afSunPos[0] +

  000d6	f3 0f 10 4c 24
	04		 movss	 xmm1, DWORD PTR tv215[esp+40]
  000dc	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR tv213[esp+40]
  000e2	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000e6	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000ea	f3 0f 58 c8	 addss	 xmm1, xmm0
  000ee	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv214[esp+40]
  000f4	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000f8	f3 0f 58 c8	 addss	 xmm1, xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  000fc	0f 5a c1	 cvtps2pd xmm0, xmm1
  000ff	0f 57 c9	 xorps	 xmm1, xmm1
  00102	66 0f 2e c8	 ucomisd xmm1, xmm0
  00106	77 06		 ja	 SHORT $LN13@Compute
  00108	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0010c	eb 05		 jmp	 SHORT $LN14@Compute
$LN13@Compute:
  0010e	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN14@Compute:
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 155  : 	afSunVector[0] = -afSunPos[0] / fSunVectorMagnitude;

  00113	f3 0f 10 54 24
	08		 movss	 xmm2, DWORD PTR tv213[esp+40]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00119	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 156  : 	afSunVector[1] = -afSunPos[1] / fSunVectorMagnitude;

  0011c	f3 0f 10 5c 24
	04		 movss	 xmm3, DWORD PTR tv215[esp+40]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00122	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 156  : 	afSunVector[1] = -afSunPos[1] / fSunVectorMagnitude;

  00126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0012e	0f 57 d0	 xorps	 xmm2, xmm0
  00131	0f 57 d8	 xorps	 xmm3, xmm0
  00134	f3 0f 5e d1	 divss	 xmm2, xmm1
  00138	f3 0f 5e d9	 divss	 xmm3, xmm1

; 158  : 
; 159  : 	float afCameraDirection[3];
; 160  : 	afCameraDirection[0] = ms_matView._13;
; 161  : 	afCameraDirection[1] = ms_matView._23;
; 162  : 	afCameraDirection[2] = ms_matView._33;
; 163  : 
; 164  : 
; 165  : 	float fDotProduct =

  0013c	f3 0f 59 15 08
	00 00 00	 mulss	 xmm2, DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+8
  00144	f3 0f 59 1d 18
	00 00 00	 mulss	 xmm3, DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+24
  0014c	f3 0f 58 da	 addss	 xmm3, xmm2
  00150	f3 0f 10 54 24
	0c		 movss	 xmm2, DWORD PTR tv214[esp+40]
  00156	0f 57 d0	 xorps	 xmm2, xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 667  :             return (float)acos(_X);

  00159	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 157  : 	afSunVector[2] = -afSunPos[2] / fSunVectorMagnitude;

  0015c	f3 0f 5e d1	 divss	 xmm2, xmm1

; 158  : 
; 159  : 	float afCameraDirection[3];
; 160  : 	afCameraDirection[0] = ms_matView._13;
; 161  : 	afCameraDirection[1] = ms_matView._23;
; 162  : 	afCameraDirection[2] = ms_matView._33;
; 163  : 
; 164  : 
; 165  : 	float fDotProduct =

  00160	f3 0f 59 15 28
	00 00 00	 mulss	 xmm2, DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+40
  00168	f3 0f 58 da	 addss	 xmm3, xmm2
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 667  :             return (float)acos(_X);

  0016c	f3 0f 5a c3	 cvtss2sd xmm0, xmm3
  00170	e8 00 00 00 00	 call	 __libm_sse2_acos_precise
  00175	0f 57 c9	 xorps	 xmm1, xmm1
  00178	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 170  : 	if (acosf(fDotProduct) < 0.5f * D3DX_PI)

  0017c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00184	0f 2f c1	 comiss	 xmm0, xmm1
  00187	0f 57 c0	 xorps	 xmm0, xmm0
  0018a	0f 97 c0	 seta	 al

; 171  : 		SetVisible(true);
; 172  : 	else
; 173  : 		SetVisible(false);
; 174  : 
; 175  : 	// set flare brightness
; 176  : 	fX /= ms_Viewport.Width;

  0018d	88 46 1c	 mov	 BYTE PTR [esi+28], al
  00190	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+8
  00195	f3 0f 10 64 24
	14		 movss	 xmm4, DWORD PTR _fX$1$[esp+40]

; 177  : 	fY /= ms_Viewport.Height;

  0019b	f3 0f 10 5c 24
	18		 movss	 xmm3, DWORD PTR _fY$1$[esp+40]

; 178  : 
; 179  : 	float fDistance = sqrtf(((0.5f - fX) * (0.5f - fX)) + ((0.5f - fY) * (0.5f - fY)));

  001a1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  001a9	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  001ad	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001b0	0f 28 d1	 movaps	 xmm2, xmm1
  001b3	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  001bc	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A+12
  001c1	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001c5	f3 0f 5e e0	 divss	 xmm4, xmm0
  001c9	0f 57 c0	 xorps	 xmm0, xmm0
  001cc	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  001d0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001d3	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  001dc	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001e0	f3 0f 5e d8	 divss	 xmm3, xmm0
  001e4	0f 28 c1	 movaps	 xmm0, xmm1
  001e7	f3 0f 5c c3	 subss	 xmm0, xmm3
  001eb	f3 0f 5c d3	 subss	 xmm2, xmm3
  001ef	f3 0f 59 d0	 mulss	 xmm2, xmm0
  001f3	0f 28 c1	 movaps	 xmm0, xmm1
  001f6	f3 0f 5c c4	 subss	 xmm0, xmm4
  001fa	f3 0f 5c cc	 subss	 xmm1, xmm4
  001fe	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00202	0f 57 c9	 xorps	 xmm1, xmm1
  00205	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00209	0f 5a c2	 cvtps2pd xmm0, xmm2
  0020c	66 0f 2e c8	 ucomisd xmm1, xmm0
  00210	77 06		 ja	 SHORT $LN15@Compute
  00212	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00216	eb 05		 jmp	 SHORT $LN16@Compute
$LN15@Compute:
  00218	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN16@Compute:
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 181  : 	float fAfterBright = Interpolate(0.0f, 1.0f, 1.0f - (fDistance * c_fDistanceScale));

  0021d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00225	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00228	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 181  : 	float fAfterBright = Interpolate(0.0f, 1.0f, 1.0f - (fDistance * c_fDistanceScale));

  0022c	8b ce		 mov	 ecx, esi
  0022e	f3 0f 5c c8	 subss	 xmm1, xmm0
  00232	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00238	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00240	f3 0f 11 4c 24
	24		 movss	 DWORD PTR __real@3f800000$1$[esp+52], xmm1
  00246	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0024d	e8 00 00 00 00	 call	 ?Interpolate@CLensFlare@@IAEMMMM@Z ; CLensFlare::Interpolate
  00252	f3 0f 10 44 24
	18		 movss	 xmm0, DWORD PTR __real@3f800000$1$[esp+40]

; 182  : 
; 183  : 	SetBrightnesses(fBeforeBright, fAfterBright);

  00258	83 ec 10	 sub	 esp, 16			; 00000010H
  0025b	8b ce		 mov	 ecx, esi
  0025d	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00261	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00267	c7 44 24 04 66
	66 e6 3e	 mov	 DWORD PTR [esp+4], 1055286886 ; 3ee66666H
  0026f	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00276	e8 00 00 00 00	 call	 ?Interpolate@CLensFlare@@IAEMMMM@Z ; CLensFlare::Interpolate
  0027b	51		 push	 ecx
  0027c	8b ce		 mov	 ecx, esi
  0027e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00281	e8 00 00 00 00	 call	 ?SetBrightnesses@CLensFlare@@QAEXMM@Z ; CLensFlare::SetBrightnesses

; 184  : }

  00286	5e		 pop	 esi
  00287	8b e5		 mov	 esp, ebp
  00289	5d		 pop	 ebp
  0028a	c2 04 00	 ret	 4
?Compute@CLensFlare@@QAEXABUD3DXVECTOR3@@@Z ENDP	; CLensFlare::Compute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ??1CLensFlare@@UAE@XZ
_TEXT	SEGMENT
??1CLensFlare@@UAE@XZ PROC				; CLensFlare::~CLensFlare, COMDAT
; _this$ = ecx

; 118  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 119  :     delete[] m_pControlPixels;

  00003	ff 76 34	 push	 DWORD PTR [esi+52]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLensFlare@@6B@
  0000c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 120  :     delete[] m_pTestPixels;

  00011	ff 76 38	 push	 DWORD PTR [esi+56]
  00014	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00019	83 c4 08	 add	 esp, 8

; 121  : }

  0001c	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  0001f	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  00024	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00027	e8 00 00 00 00	 call	 ??1CFlare@@UAE@XZ	; CFlare::~CFlare
  0002c	8b ce		 mov	 ecx, esi
  0002e	5e		 pop	 esi
  0002f	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??1CLensFlare@@UAE@XZ ENDP				; CLensFlare::~CLensFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ??0CLensFlare@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLensFlare@@QAE@XZ PROC				; CLensFlare::CLensFlare, COMDAT
; _this$ = ecx

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CLensFlare@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  0002e	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLensFlare@@6B@
  0003e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00045	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0004c	66 c7 46 1c 00
	01		 mov	 WORD PTR [esi+28], 256	; 00000100H
  00052	c6 46 1e 01	 mov	 BYTE PTR [esi+30], 1
  00056	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0005d	e8 00 00 00 00	 call	 ??0CFlare@@QAE@XZ	; CFlare::CFlare
  00062	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  00065	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00069	66 c7 46 3c 01
	01		 mov	 WORD PTR [esi+60], 257	; 00000101H
  0006f	c7 46 40 00 00
	80 3f		 mov	 DWORD PTR [esi+64], 1065353216 ; 3f800000H
  00076	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance

; 108  :     m_pControlPixels = new float[c_nDepthTestDimension * c_nDepthTestDimension];

  0007b	68 84 03 00 00	 push	 900			; 00000384H
  00080	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00084	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 109  :     m_pTestPixels = new float[c_nDepthTestDimension * c_nDepthTestDimension];

  00089	68 84 03 00 00	 push	 900			; 00000384H
  0008e	89 46 34	 mov	 DWORD PTR [esi+52], eax
  00091	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00096	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00099	83 c4 08	 add	 esp, 8

; 110  : 	m_afColor[0] = m_afColor[1] = m_afColor[2] = 1.0f;

  0009c	c7 46 4c 00 00
	80 3f		 mov	 DWORD PTR [esi+76], 1065353216 ; 3f800000H

; 111  : }

  000a3	8b c6		 mov	 eax, esi
  000a5	c7 46 48 00 00
	80 3f		 mov	 DWORD PTR [esi+72], 1065353216 ; 3f800000H
  000ac	c7 46 44 00 00
	80 3f		 mov	 DWORD PTR [esi+68], 1065353216 ; 3f800000H
  000b3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bd	59		 pop	 ecx
  000be	5e		 pop	 esi
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLensFlare@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__unwindfunclet$??0CLensFlare@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 24	 add	 ecx, 36			; 00000024H
  0000e	e9 00 00 00 00	 jmp	 ??1CFlare@@UAE@XZ	; CFlare::~CFlare
__unwindfunclet$??0CLensFlare@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 54	 add	 ecx, 84			; 00000054H
  00019	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$??0CLensFlare@@QAE@XZ:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CLensFlare@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CLensFlare@@QAE@XZ ENDP				; CLensFlare::CLensFlare
; Function compile flags: /Ogtp
;	COMDAT ??_GCFlare@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFlare@@UAEPAXI@Z PROC				; CFlare::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CFlare@@UAE@XZ	; CFlare::~CFlare
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 10		 push	 16			; 00000010H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCFlare@@UAEPAXI@Z ENDP				; CFlare::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ PROC ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ ENDP ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ??1CFlare@@UAE@XZ
_TEXT	SEGMENT
??1CFlare@@UAE@XZ PROC					; CFlare::~CFlare, COMDAT
; _this$ = ecx

; 499  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CFlare@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN8@CFlare

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00013	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN27@CFlare

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 23		 ja	 SHORT $LN24@CFlare

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN27@CFlare:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00039	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00043	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2082 :             _Myend   = nullptr;

  0004a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN8@CFlare:
  00051	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 500  : }

  00052	c3		 ret	 0
$LN24@CFlare:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@CFlare:
  00058	cc		 int	 3
??1CFlare@@UAE@XZ ENDP					; CFlare::~CFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ??0CFlare@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFlare@@QAE@XZ PROC					; CFlare::CFlare, COMDAT
; _this$ = ecx

; 491  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CFlare@@6B@

; 492  : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 492  : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0CFlare@@QAE@XZ ENDP					; CFlare::CFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T2 = -120						; size = 4
__Result$2$ = -116					; size = 4
$T3 = -112						; size = 1
_this$GSCopy$1$ = -112					; size = 4
_i$1$ = -108						; size = 4
__New_size$1$ = -104					; size = 4
tv1255 = -100						; size = 4
_pPiece$4 = -96						; size = 4
tv1271 = -96						; size = 4
$T5 = -92						; size = 4
__Left_size$1$ = -92					; size = 4
$T6 = -88						; size = 24
$T7 = -64						; size = 24
$T8 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_strPath$ = 8						; size = 24
?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CFlare::Init, COMDAT
; _this$ = ecx

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d 90	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx

; 508  : 	int i = 0;
; 509  : 
; 510  : 	while (g_strFiles[i] != "")

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00032	68 00 00 00 00	 push	 OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  00045	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0004a	83 c4 08	 add	 esp, 8
  0004d	84 c0		 test	 al, al
  0004f	0f 84 17 03 00
	00		 je	 $LN3@Init

; 507  : {

  00055	bf 00 00 00 00	 mov	 edi, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  0005a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv1255[ebp], OFFSET ?g_afColors@@3PAY03MA
$LN312@Init:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00061	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH
  00065	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 512  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + string(g_strFiles[i])).c_str());

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0006d	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00072	89 45 a0	 mov	 DWORD PTR tv1271[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00075	8b 47 10	 mov	 eax, DWORD PTR [edi+16]

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00078	0f 11 45 d8	 movups	 XMMWORD PTR $T8[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0007c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00083	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 0

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0008a	89 45 a4	 mov	 DWORD PTR $T5[ebp], eax

; 426  :         if (_Large_mode_engaged()) {

  0008d	76 02		 jbe	 SHORT $LN29@Init

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0008f	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN29@Init:

; 857  :         if (_Count > max_size()) {

  00091	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00096	0f 87 22 03 00
	00		 ja	 $LN301@Init

; 858  :             _Xlen_string(); // result too long
; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  0009c	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0009f	77 13		 ja	 SHORT $LN37@Init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a1	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  000a4	89 45 e8	 mov	 DWORD PTR $T8[ebp+16], eax

; 867  :             _My_data._Myres  = _Small_string_capacity;

  000a7	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ae	0f 11 45 d8	 movups	 XMMWORD PTR $T8[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 884  :             return;

  000b2	eb 5f		 jmp	 SHORT $LN63@Init
$LN37@Init:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  000b4	8b f0		 mov	 esi, eax
  000b6	83 ce 0f	 or	 esi, 15			; 0000000fH
  000b9	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000bf	76 12		 jbe	 SHORT $LN43@Init

; 2944 :             return _Max;

  000c1	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  000c6	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000d1	eb 23		 jmp	 SHORT $LN310@Init
$LN43@Init:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000d3	83 fe 16	 cmp	 esi, 22			; 00000016H
  000d6	0f 42 f1	 cmovb	 esi, ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  000d9	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000dc	85 c9		 test	 ecx, ecx
  000de	74 1e		 je	 SHORT $LN56@Init
$LN57@Init:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000e0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e6	72 08		 jb	 SHORT $LN58@Init

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ee	eb 06		 jmp	 SHORT $LN310@Init
$LN58@Init:

; 136  :         return ::operator new(_Bytes);

  000f0	51		 push	 ecx
  000f1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN310@Init:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000f6	8b c8		 mov	 ecx, eax
  000f8	83 c4 04	 add	 esp, 4
  000fb	8b 45 a4	 mov	 eax, DWORD PTR $T5[ebp]
$LN56@Init:

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  000fe	89 45 e8	 mov	 DWORD PTR $T8[ebp+16], eax

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00101	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00102	50		 push	 eax
  00103	57		 push	 edi
  00104	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00105	89 4d d8	 mov	 DWORD PTR $T8[ebp], ecx

; 892  :         _My_data._Myres  = _New_capacity;

  00108	89 75 ec	 mov	 DWORD PTR $T8[ebp+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0010b	e8 00 00 00 00	 call	 _memcpy
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN63@Init:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3150 :     const auto _Left_size  = _Left.size();

  00113	8b 4d 18	 mov	 ecx, DWORD PTR _strPath$[ebp+16]
  00116	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0011b	2b c1		 sub	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 512  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + string(g_strFiles[i])).c_str());

  0011d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3150 :     const auto _Left_size  = _Left.size();

  00121	89 4d a4	 mov	 DWORD PTR __Left_size$1$[ebp], ecx

; 3151 :     const auto _Right_size = _Convert_size<_Size_type>(_Traits::length(_Right));
; 3152 :     if (_Left.max_size() - _Left_size < _Right_size) {

  00124	83 f8 01	 cmp	 eax, 1
  00127	0f 82 91 02 00
	00		 jb	 $LN301@Init

; 434  :         return _Myres > _Small_string_capacity;

  0012d	83 7d 1c 0f	 cmp	 DWORD PTR _strPath$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00131	8d 45 08	 lea	 eax, DWORD PTR _strPath$[ebp]

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00134	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 1033 :         size_type _New_capacity = _Small_string_capacity;

  00137	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0013c	0f 47 45 08	 cmova	 eax, DWORD PTR _strPath$[ebp]

; 1035 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  00140	8d 7d a8	 lea	 edi, DWORD PTR $T6[ebp]

; 426  :         if (_Large_mode_engaged()) {

  00143	89 45 8c	 mov	 DWORD PTR __Result$2$[ebp], eax
  00146	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00149	89 55 98	 mov	 DWORD PTR __New_size$1$[ebp], edx
  0014c	0f 11 45 a8	 movups	 XMMWORD PTR $T6[ebp], xmm0

; 1039 :         if (_New_capacity < _New_size) {

  00150	3b d6		 cmp	 edx, esi
  00152	76 5b		 jbe	 SHORT $LN86@Init

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00154	8b f2		 mov	 esi, edx
  00156	83 ce 0f	 or	 esi, 15			; 0000000fH
  00159	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0015f	76 12		 jbe	 SHORT $LN102@Init

; 2944 :             return _Max;

  00161	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00166	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00171	eb 2b		 jmp	 SHORT $LN311@Init
$LN102@Init:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00173	83 fe 16	 cmp	 esi, 22			; 00000016H
  00176	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0017b	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0017e	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00181	85 c0		 test	 eax, eax
  00183	75 04		 jne	 SHORT $LN116@Init

; 228  :         return nullptr;

  00185	33 ff		 xor	 edi, edi
  00187	eb 20		 jmp	 SHORT $LN115@Init
$LN116@Init:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00189	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0018e	72 08		 jb	 SHORT $LN117@Init

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00196	eb 06		 jmp	 SHORT $LN311@Init
$LN117@Init:

; 136  :         return ::operator new(_Bytes);

  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN311@Init:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1043 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0019e	8b 55 98	 mov	 edx, DWORD PTR __New_size$1$[ebp]
  001a1	8b f8		 mov	 edi, eax
  001a3	8b 4d a4	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  001a6	83 c4 04	 add	 esp, 4
$LN115@Init:
  001a9	8b 45 8c	 mov	 eax, DWORD PTR __Result$2$[ebp]
  001ac	89 7d a8	 mov	 DWORD PTR $T6[ebp], edi
$LN86@Init:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001af	51		 push	 ecx
  001b0	50		 push	 eax
  001b1	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1046 :         _My_data._Mysize = _New_size;

  001b2	89 55 b8	 mov	 DWORD PTR $T6[ebp+16], edx

; 1047 :         _My_data._Myres  = _New_capacity;

  001b5	89 75 bc	 mov	 DWORD PTR $T6[ebp+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001b8	e8 00 00 00 00	 call	 _memcpy
  001bd	8b 45 a4	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  001c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c3	66 c7 04 07 2f
	00		 mov	 WORD PTR [edi+eax], 47	; 0000002fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  001c9	8d 45 d8	 lea	 eax, DWORD PTR $T8[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 512  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + string(g_strFiles[i])).c_str());

  001cc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  001d0	50		 push	 eax
  001d1	8d 45 a8	 lea	 eax, DWORD PTR $T6[ebp]
  001d4	50		 push	 eax
  001d5	ff 75 90	 push	 DWORD PTR $T3[ebp]
  001d8	8d 4d c0	 lea	 ecx, DWORD PTR $T7[ebp]
  001db	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 434  :         return _Myres > _Small_string_capacity;

  001e0	83 7d d4 0f	 cmp	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  001e4	8d 45 c0	 lea	 eax, DWORD PTR $T7[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 512  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + string(g_strFiles[i])).c_str());

  001e7	8b 4d a0	 mov	 ecx, DWORD PTR tv1271[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  001ea	0f 47 45 c0	 cmova	 eax, DWORD PTR $T7[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 512  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + string(g_strFiles[i])).c_str());

  001ee	50		 push	 eax
  001ef	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001f3	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001f8	8b 4d d4	 mov	 ecx, DWORD PTR $T7[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 512  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + string(g_strFiles[i])).c_str());

  001fb	8b f8		 mov	 edi, eax
  001fd	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00201	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00204	76 2c		 jbe	 SHORT $LN161@Init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00206	8b 55 c0	 mov	 edx, DWORD PTR $T7[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00209	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0020a	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0020c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00212	72 14		 jb	 SHORT $LN172@Init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00214	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00217	83 c1 23	 add	 ecx, 35			; 00000023H
  0021a	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0021c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0021f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00222	0f 87 91 01 00
	00		 ja	 $LN243@Init
$LN172@Init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00228	51		 push	 ecx
  00229	52		 push	 edx
  0022a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0022f	83 c4 08	 add	 esp, 8
$LN161@Init:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00232	8b 4d bc	 mov	 ecx, DWORD PTR $T6[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  00235	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0023c	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00243	c6 45 c0 00	 mov	 BYTE PTR $T7[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 512  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + string(g_strFiles[i])).c_str());

  00247	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0024b	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0024e	76 2c		 jbe	 SHORT $LN198@Init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00250	8b 55 a8	 mov	 edx, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00253	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00254	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00256	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0025c	72 14		 jb	 SHORT $LN209@Init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0025e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00261	83 c1 23	 add	 ecx, 35			; 00000023H
  00264	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00266	83 c0 fc	 add	 eax, -4			; fffffffcH
  00269	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0026c	0f 87 47 01 00
	00		 ja	 $LN243@Init
$LN209@Init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00272	51		 push	 ecx
  00273	52		 push	 edx
  00274	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00279	83 c4 08	 add	 esp, 8
$LN198@Init:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0027c	8b 4d ec	 mov	 ecx, DWORD PTR $T8[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 512  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + string(g_strFiles[i])).c_str());

  0027f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00283	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00286	76 2c		 jbe	 SHORT $LN235@Init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00288	8b 55 d8	 mov	 edx, DWORD PTR $T8[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0028b	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0028c	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0028e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00294	72 14		 jb	 SHORT $LN246@Init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00296	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00299	83 c1 23	 add	 ecx, 35			; 00000023H
  0029c	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0029e	83 c0 fc	 add	 eax, -4			; fffffffcH
  002a1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002a4	0f 87 0f 01 00
	00		 ja	 $LN243@Init
$LN246@Init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  002aa	51		 push	 ecx
  002ab	52		 push	 edx
  002ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002b1	83 c4 08	 add	 esp, 8
$LN235@Init:
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 514  : 		if (!pResource->IsType(CGraphicImage::Type()))

  002b4	e8 00 00 00 00	 call	 ?Type@CGraphicImage@@SAKXZ ; CGraphicImage::Type
  002b9	50		 push	 eax
  002ba	8b cf		 mov	 ecx, edi
  002bc	e8 00 00 00 00	 call	 ?IsType@CResource@@QAE_NK@Z ; CResource::IsType

; 517  : 		SFlarePiece * pPiece = new SFlarePiece;

  002c1	6a 34		 push	 52			; 00000034H
  002c3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002c8	8b f0		 mov	 esi, eax
  002ca	83 c4 04	 add	 esp, 4
  002cd	89 75 88	 mov	 DWORD PTR $T2[ebp], esi
  002d0	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  002d4	85 f6		 test	 esi, esi
  002d6	74 1e		 je	 SHORT $LN6@Init
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.h

; 65   : 	{

  002d8	8b ce		 mov	 ecx, esi
  002da	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
  002df	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  002e6	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  002ed	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 517  : 		SFlarePiece * pPiece = new SFlarePiece;

  002f4	eb 02		 jmp	 SHORT $LN7@Init
$LN6@Init:
  002f6	33 f6		 xor	 esi, esi
$LN7@Init:

; 518  : 
; 519  : 		pPiece->m_imageInstance.SetImagePointer(static_cast<CGraphicImage *> (pResource));

  002f8	57		 push	 edi
  002f9	8b ce		 mov	 ecx, esi
  002fb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002ff	89 75 a0	 mov	 DWORD PTR _pPiece$4[ebp], esi
  00302	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 520  : 		pPiece->m_fPosition = g_fPosition[i];

  00307	8b 7d 94	 mov	 edi, DWORD PTR _i$1$[ebp]

; 521  : 		pPiece->m_fWidth = g_fWidth[i];
; 522  : 		pPiece->m_pColor = g_afColors[i];
; 523  : 
; 524  : 		m_vFlares.push_back(pPiece);

  0030a	8b 55 90	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
  0030d	8b 04 bd 00 00
	00 00		 mov	 eax, DWORD PTR ?g_fPosition@@3PAMA[edi*4]
  00314	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00317	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  0031a	8b 04 bd 00 00
	00 00		 mov	 eax, DWORD PTR ?g_fWidth@@3PAMA[edi*4]
  00321	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00324	8b 45 9c	 mov	 eax, DWORD PTR tv1255[ebp]
  00327	89 46 30	 mov	 DWORD PTR [esi+48], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0032a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0032d	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00330	74 08		 je	 SHORT $LN258@Init

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00332	89 30		 mov	 DWORD PTR [eax], esi

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  00334	83 42 08 04	 add	 DWORD PTR [edx+8], 4

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00338	eb 0a		 jmp	 SHORT $LN257@Init
$LN258@Init:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0033a	8d 55 a0	 lea	 edx, DWORD PTR _pPiece$4[ebp]
  0033d	52		 push	 edx
  0033e	50		 push	 eax
  0033f	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@AAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Emplace_reallocate<CFlare::SFlarePiece * const &>
$LN257@Init:
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 525  : 		i++;

  00344	83 45 9c 10	 add	 DWORD PTR tv1255[ebp], 16 ; 00000010H
  00348	47		 inc	 edi
  00349	89 7d 94	 mov	 DWORD PTR _i$1$[ebp], edi
  0034c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00351	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00354	8d 3c c5 00 00
	00 00		 lea	 edi, DWORD PTR ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8]
  0035b	57		 push	 edi
  0035c	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00361	83 c4 08	 add	 esp, 8
  00364	84 c0		 test	 al, al
  00366	0f 85 f5 fc ff
	ff		 jne	 $LN312@Init
$LN3@Init:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0036c	8b 4d 1c	 mov	 ecx, DWORD PTR _strPath$[ebp+20]
  0036f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00372	76 28		 jbe	 SHORT $LN282@Init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00374	8b 55 08	 mov	 edx, DWORD PTR _strPath$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00377	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00378	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0037a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00380	72 10		 jb	 SHORT $LN293@Init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00382	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00385	83 c1 23	 add	 ecx, 35			; 00000023H
  00388	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0038a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0038d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00390	77 27		 ja	 SHORT $LN243@Init
$LN293@Init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00392	51		 push	 ecx
  00393	52		 push	 edx
  00394	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00399	83 c4 08	 add	 esp, 8
$LN282@Init:
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 527  : }

  0039c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0039f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003a6	59		 pop	 ecx
  003a7	5f		 pop	 edi
  003a8	5e		 pop	 esi
  003a9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ac	33 cd		 xor	 ecx, ebp
  003ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003b3	8b e5		 mov	 esp, ebp
  003b5	5d		 pop	 ebp
  003b6	c2 18 00	 ret	 24			; 00000018H
$LN243@Init:
  003b9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN301@Init:
  003be	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN309@Init:
  003c3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strPath$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T8[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00010	8d 4d a8	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  00018	8d 4d c0	 lea	 ecx, DWORD PTR $T7[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4:
  00020	6a 34		 push	 52			; 00000034H
  00022	8b 45 88	 mov	 eax, DWORD PTR $T2[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
  0002e	c3		 ret	 0
  0002f	cc		 int	 3
  00030	cc		 int	 3
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
__ehhandler$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00034	90		 npad	 1
  00035	90		 npad	 1
  00036	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003d	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004a	33 c8		 xor	 ecx, eax
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00056	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CFlare::Init
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp
;	COMDAT ?Draw@CFlare@@QAEXMHHHH@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -152					; size = 4
tv964 = -148						; size = 4
_fDY$1$ = -144						; size = 4
_fDX$1$ = -140						; size = 4
_i$1$ = -136						; size = 4
_fCenterX$1$ = -132					; size = 4
_fCenterY$1$ = -128					; size = 4
tv946 = -124						; size = 4
tv979 = -124						; size = 4
_d3dColor$1$sroa$490$1$ = -120				; size = 4
_d3dColor$1$sroa$494$1$ = -116				; size = 4
_d3dColor$1$sroa$496$1$ = -112				; size = 4
_d3dColor$1$sroa$498$1$ = -108				; size = 4
_fW$1$ = -104						; size = 4
_vertices$2 = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_fBrightScale$ = 8					; size = 4
_nWidth$ = 12						; size = 4
_nHeight$ = 16						; size = 4
_nX$ = 20						; size = 4
_nY$ = 24						; size = 4
?Draw@CFlare@@QAEXMHHHH@Z PROC				; CFlare::Draw, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 534  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);

  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001c	6a 02		 push	 2
  0001e	6a 14		 push	 20			; 00000014H
  00020	89 b5 68 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00026	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState
  0002b	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR _nWidth$[ebp]
  00030	66 0f 6e 55 14	 movd	 xmm2, DWORD PTR _nX$[ebp]

; 535  : 
; 536  : 	float fDX = float(nX) - float(nWidth) / 2.0f;

  00035	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 537  : 	float fDY = float(nY) - float(nHeight) / 2.0f;
; 538  : 
; 539  : 	STATEMANAGER.SetTexture(1, NULL);

  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0003e	6a 00		 push	 0
  00040	6a 01		 push	 1
  00042	0f 5b d2	 cvtdq2ps xmm2, xmm2
  00045	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0004d	f3 0f 5c d0	 subss	 xmm2, xmm0
  00051	66 0f 6e 45 10	 movd	 xmm0, DWORD PTR _nHeight$[ebp]
  00056	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00059	f3 0f 11 95 74
	ff ff ff	 movss	 DWORD PTR _fDX$1$[ebp], xmm2
  00061	66 0f 6e 55 18	 movd	 xmm2, DWORD PTR _nY$[ebp]
  00066	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0006e	0f 5b d2	 cvtdq2ps xmm2, xmm2
  00071	f3 0f 5c d0	 subss	 xmm2, xmm0
  00075	f3 0f 11 95 70
	ff ff ff	 movss	 DWORD PTR _fDY$1$[ebp], xmm2
  0007d	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 540  : 	STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  00082	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00088	68 42 01 00 00	 push	 322			; 00000142H
  0008d	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 541  : 
; 542  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00098	6a 02		 push	 2
  0009a	6a 02		 push	 2
  0009c	6a 00		 push	 0
  0009e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 543  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_DIFFUSE);

  000a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000a9	6a 00		 push	 0
  000ab	6a 03		 push	 3
  000ad	6a 00		 push	 0
  000af	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 544  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ba	6a 04		 push	 4
  000bc	6a 01		 push	 1
  000be	6a 00		 push	 0
  000c0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 545  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000cb	6a 02		 push	 2
  000cd	6a 05		 push	 5
  000cf	6a 00		 push	 0
  000d1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 546  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2,	D3DTA_DIFFUSE);

  000d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000dc	6a 00		 push	 0
  000de	6a 06		 push	 6
  000e0	6a 00		 push	 0
  000e2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 547  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  000e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ed	6a 04		 push	 4
  000ef	6a 04		 push	 4
  000f1	6a 00		 push	 0
  000f3	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000f8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 549  : 	for (unsigned int i = 0; i < m_vFlares.size(); i++)

  000fb	33 d2		 xor	 edx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000fd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00100	2b c1		 sub	 eax, ecx
  00102	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 549  : 	for (unsigned int i = 0; i < m_vFlares.size(); i++)

  00105	89 95 78 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], edx
  0010b	85 c0		 test	 eax, eax
  0010d	0f 84 9d 05 00
	00		 je	 $LN3@Draw
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  00113	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fBrightScale$[ebp]
  00118	53		 push	 ebx
  00119	57		 push	 edi
  0011a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Draw:
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 551  : 		float fCenterX = float(nX) - (m_vFlares[i]->m_fPosition + 1.0f) * fDX;

  00120	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00123	66 0f 6e 55 14	 movd	 xmm2, DWORD PTR _nX$[ebp]
  00128	0f 5b d2	 cvtdq2ps xmm2, xmm2

; 552  : 		float fCenterY = float(nY) - (m_vFlares[i]->m_fPosition + 1.0f) * fDY;
; 553  : 		float fW = m_vFlares[i]->m_fWidth;
; 554  : 
; 555  : 		D3DXCOLOR d3dColor(m_vFlares[i]->m_pColor[0] * fBrightScale,
; 556  : 						   m_vFlares[i]->m_pColor[1] * fBrightScale,
; 557  : 						   m_vFlares[i]->m_pColor[2] * fBrightScale,
; 558  : 						   m_vFlares[i]->m_pColor[3] * fBrightScale);
; 559  : 
; 560  : 		STATEMANAGER.SetTexture(0, m_vFlares[i]->m_imageInstance.GetTexturePointer()->GetD3DTexture());

  0012b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00131	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00134	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  00139	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  00141	0f 28 c1	 movaps	 xmm0, xmm1
  00144	f3 0f 59 8d 70
	ff ff ff	 mulss	 xmm1, DWORD PTR _fDY$1$[ebp]
  0014c	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _fDX$1$[ebp]
  00154	f3 0f 5c d0	 subss	 xmm2, xmm0
  00158	66 0f 6e 45 18	 movd	 xmm0, DWORD PTR _nY$[ebp]
  0015d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00160	f3 0f 11 95 7c
	ff ff ff	 movss	 DWORD PTR _fCenterX$1$[ebp], xmm2
  00168	f3 0f 5c c1	 subss	 xmm0, xmm1
  0016c	f3 0f 10 49 2c	 movss	 xmm1, DWORD PTR [ecx+44]
  00171	f3 0f 11 4d 98	 movss	 DWORD PTR _fW$1$[ebp], xmm1
  00176	f3 0f 11 45 80	 movss	 DWORD PTR _fCenterY$1$[ebp], xmm0
  0017b	0f 28 c3	 movaps	 xmm0, xmm3
  0017e	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  00182	f3 0f 11 45 94	 movss	 DWORD PTR _d3dColor$1$sroa$498$1$[ebp], xmm0
  00187	0f 28 c3	 movaps	 xmm0, xmm3
  0018a	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  0018f	f3 0f 11 45 90	 movss	 DWORD PTR _d3dColor$1$sroa$496$1$[ebp], xmm0
  00194	0f 28 c3	 movaps	 xmm0, xmm3
  00197	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  0019c	f3 0f 11 45 8c	 movss	 DWORD PTR _d3dColor$1$sroa$494$1$[ebp], xmm0
  001a1	0f 28 c3	 movaps	 xmm0, xmm3
  001a4	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  001a9	f3 0f 11 45 88	 movss	 DWORD PTR _d3dColor$1$sroa$490$1$[ebp], xmm0
  001ae	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  001b3	8b c8		 mov	 ecx, eax
  001b5	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  001ba	50		 push	 eax
  001bb	6a 00		 push	 0
  001bd	8b ce		 mov	 ecx, esi
  001bf	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 561  : 
; 562  : 		TVertex vertices[4];
; 563  : 
; 564  : 		vertices[0].u = 0.0f;
; 565  : 		vertices[0].v = 0.0f;
; 566  : 		vertices[0].x = fCenterX - fW;

  001c4	f3 0f 10 8d 7c
	ff ff ff	 movss	 xmm1, DWORD PTR _fCenterX$1$[ebp]
  001cc	f3 0f 5c 4d 98	 subss	 xmm1, DWORD PTR _fW$1$[ebp]

; 567  : 		vertices[0].y = fCenterY - fW;
; 568  : 		vertices[0].z = 0.0f;

  001d1	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$498$1$[ebp]
  001d6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  001dd	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+16], 0
  001e4	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+20], 0
  001eb	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+8], 0
  001f2	f3 0f 11 4d 84	 movss	 DWORD PTR tv946[ebp], xmm1
  001f7	f3 0f 11 4d 9c	 movss	 DWORD PTR _vertices$2[ebp], xmm1
  001fc	f3 0f 10 4d 80	 movss	 xmm1, DWORD PTR _fCenterY$1$[ebp]
  00201	f3 0f 5c 4d 98	 subss	 xmm1, DWORD PTR _fW$1$[ebp]
  00206	f3 0f 11 8d 6c
	ff ff ff	 movss	 DWORD PTR tv964[ebp], xmm1
  0020e	f3 0f 11 4d a0	 movss	 DWORD PTR _vertices$2[ebp+4], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00213	0f 57 c9	 xorps	 xmm1, xmm1
  00216	72 07		 jb	 SHORT $LN39@Draw
  00218	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  0021d	eb 23		 jmp	 SHORT $LN38@Draw
$LN39@Draw:
  0021f	0f 2f c8	 comiss	 xmm1, xmm0
  00222	72 04		 jb	 SHORT $LN37@Draw
  00224	33 db		 xor	 ebx, ebx
  00226	eb 1a		 jmp	 SHORT $LN38@Draw
$LN37@Draw:
  00228	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00230	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00238	e8 00 00 00 00	 call	 __ftol3
  0023d	8b d8		 mov	 ebx, eax
  0023f	0f 57 c9	 xorps	 xmm1, xmm1
$LN38@Draw:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00242	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$496$1$[ebp]
  00247	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0024e	72 07		 jb	 SHORT $LN43@Draw
  00250	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  00255	eb 20		 jmp	 SHORT $LN42@Draw
$LN43@Draw:
  00257	0f 2f c8	 comiss	 xmm1, xmm0
  0025a	72 04		 jb	 SHORT $LN41@Draw
  0025c	33 ff		 xor	 edi, edi
  0025e	eb 17		 jmp	 SHORT $LN42@Draw
$LN41@Draw:
  00260	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00268	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00270	e8 00 00 00 00	 call	 __ftol3
  00275	8b f8		 mov	 edi, eax
$LN42@Draw:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  00277	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$494$1$[ebp]
  0027c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00283	72 07		 jb	 SHORT $LN47@Draw
  00285	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  0028a	eb 23		 jmp	 SHORT $LN46@Draw
$LN47@Draw:
  0028c	0f 57 c9	 xorps	 xmm1, xmm1
  0028f	0f 2f c8	 comiss	 xmm1, xmm0
  00292	72 04		 jb	 SHORT $LN45@Draw
  00294	33 f6		 xor	 esi, esi
  00296	eb 17		 jmp	 SHORT $LN46@Draw
$LN45@Draw:
  00298	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  002a0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  002a8	e8 00 00 00 00	 call	 __ftol3
  002ad	8b f0		 mov	 esi, eax
$LN46@Draw:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  002af	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$490$1$[ebp]
  002b4	0f 57 c0	 xorps	 xmm0, xmm0
  002b7	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  002be	72 07		 jb	 SHORT $LN51@Draw
  002c0	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  002c5	eb 24		 jmp	 SHORT $LN50@Draw
$LN51@Draw:
  002c7	0f 2f c1	 comiss	 xmm0, xmm1
  002ca	72 04		 jb	 SHORT $LN49@Draw
  002cc	33 c0		 xor	 eax, eax
  002ce	eb 1b		 jmp	 SHORT $LN50@Draw
$LN49@Draw:
  002d0	0f 28 c1	 movaps	 xmm0, xmm1
  002d3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  002db	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  002e3	e8 00 00 00 00	 call	 __ftol3
  002e8	0f 57 c0	 xorps	 xmm0, xmm0
$LN50@Draw:
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 573  : 		vertices[1].x = fCenterX - fW;

  002eb	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR tv946[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  002f0	c1 e0 08	 shl	 eax, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 573  : 		vertices[1].x = fCenterX - fW;

  002f3	f3 0f 11 4d b4	 movss	 DWORD PTR _vertices$2[ebp+24], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  002f8	0b c3		 or	 eax, ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 574  : 		vertices[1].y = fCenterY + fW;

  002fa	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _fW$1$[ebp]
  002ff	f3 0f 58 4d 80	 addss	 xmm1, DWORD PTR _fCenterY$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00304	c1 e0 08	 shl	 eax, 8
  00307	0b c7		 or	 eax, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 571  : 		vertices[1].u = 0.0f;

  00309	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+40], 0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00310	c1 e0 08	 shl	 eax, 8
  00313	0b c6		 or	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 572  : 		vertices[1].v = 1.0f;

  00315	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR _vertices$2[ebp+44], 1065353216 ; 3f800000H

; 574  : 		vertices[1].y = fCenterY + fW;

  0031c	f3 0f 11 4d 84	 movss	 DWORD PTR tv979[ebp], xmm1
  00321	f3 0f 11 4d b8	 movss	 DWORD PTR _vertices$2[ebp+28], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00326	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$498$1$[ebp]
  0032b	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 569  : 		vertices[0].color = d3dColor;

  00332	89 45 a8	 mov	 DWORD PTR _vertices$2[ebp+12], eax

; 575  : 		vertices[1].z = 0.0f;

  00335	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+32], 0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0033c	72 07		 jb	 SHORT $LN57@Draw
  0033e	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00343	eb 23		 jmp	 SHORT $LN56@Draw
$LN57@Draw:
  00345	0f 2f c1	 comiss	 xmm0, xmm1
  00348	72 04		 jb	 SHORT $LN55@Draw
  0034a	33 db		 xor	 ebx, ebx
  0034c	eb 1a		 jmp	 SHORT $LN56@Draw
$LN55@Draw:
  0034e	0f 28 c1	 movaps	 xmm0, xmm1
  00351	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00359	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00361	e8 00 00 00 00	 call	 __ftol3
  00366	8b d8		 mov	 ebx, eax
$LN56@Draw:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00368	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$496$1$[ebp]
  0036d	0f 57 c9	 xorps	 xmm1, xmm1
  00370	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00377	72 07		 jb	 SHORT $LN61@Draw
  00379	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0037e	eb 23		 jmp	 SHORT $LN60@Draw
$LN61@Draw:
  00380	0f 2f c8	 comiss	 xmm1, xmm0
  00383	72 04		 jb	 SHORT $LN59@Draw
  00385	33 ff		 xor	 edi, edi
  00387	eb 1a		 jmp	 SHORT $LN60@Draw
$LN59@Draw:
  00389	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00391	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00399	e8 00 00 00 00	 call	 __ftol3
  0039e	8b f8		 mov	 edi, eax
  003a0	0f 57 c9	 xorps	 xmm1, xmm1
$LN60@Draw:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  003a3	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$494$1$[ebp]
  003a8	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  003af	72 07		 jb	 SHORT $LN65@Draw
  003b1	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  003b6	eb 20		 jmp	 SHORT $LN64@Draw
$LN65@Draw:
  003b8	0f 2f c8	 comiss	 xmm1, xmm0
  003bb	72 04		 jb	 SHORT $LN63@Draw
  003bd	33 f6		 xor	 esi, esi
  003bf	eb 17		 jmp	 SHORT $LN64@Draw
$LN63@Draw:
  003c1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  003c9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  003d1	e8 00 00 00 00	 call	 __ftol3
  003d6	8b f0		 mov	 esi, eax
$LN64@Draw:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  003d8	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$490$1$[ebp]
  003dd	0f 57 c0	 xorps	 xmm0, xmm0
  003e0	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  003e7	72 07		 jb	 SHORT $LN69@Draw
  003e9	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  003ee	eb 24		 jmp	 SHORT $LN68@Draw
$LN69@Draw:
  003f0	0f 2f c1	 comiss	 xmm0, xmm1
  003f3	72 04		 jb	 SHORT $LN67@Draw
  003f5	33 c0		 xor	 eax, eax
  003f7	eb 1b		 jmp	 SHORT $LN68@Draw
$LN67@Draw:
  003f9	0f 28 c1	 movaps	 xmm0, xmm1
  003fc	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00404	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0040c	e8 00 00 00 00	 call	 __ftol3
  00411	0f 57 c0	 xorps	 xmm0, xmm0
$LN68@Draw:
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 580  : 		vertices[2].x = fCenterX + fW;

  00414	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _fW$1$[ebp]
  00419	f3 0f 58 8d 7c
	ff ff ff	 addss	 xmm1, DWORD PTR _fCenterX$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00421	c1 e0 08	 shl	 eax, 8
  00424	0b c3		 or	 eax, ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 578  : 		vertices[2].u = 1.0f;

  00426	c7 45 dc 00 00
	80 3f		 mov	 DWORD PTR _vertices$2[ebp+64], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0042d	c1 e0 08	 shl	 eax, 8
  00430	0b c7		 or	 eax, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 579  : 		vertices[2].v = 0.0f;

  00432	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+68], 0

; 580  : 		vertices[2].x = fCenterX + fW;

  00439	f3 0f 11 4d 98	 movss	 DWORD PTR _fW$1$[ebp], xmm1
  0043e	f3 0f 11 4d cc	 movss	 DWORD PTR _vertices$2[ebp+48], xmm1

; 581  : 		vertices[2].y = fCenterY - fW;

  00443	f3 0f 10 8d 6c
	ff ff ff	 movss	 xmm1, DWORD PTR tv964[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0044b	c1 e0 08	 shl	 eax, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 581  : 		vertices[2].y = fCenterY - fW;

  0044e	f3 0f 11 4d d0	 movss	 DWORD PTR _vertices$2[ebp+52], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00453	0b c6		 or	 eax, esi

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00455	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$498$1$[ebp]
  0045a	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 576  : 		vertices[1].color = d3dColor;

  00461	89 45 c0	 mov	 DWORD PTR _vertices$2[ebp+36], eax

; 582  : 		vertices[2].z = 0.0f;

  00464	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+56], 0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0046b	72 07		 jb	 SHORT $LN75@Draw
  0046d	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00472	eb 23		 jmp	 SHORT $LN74@Draw
$LN75@Draw:
  00474	0f 2f c1	 comiss	 xmm0, xmm1
  00477	72 04		 jb	 SHORT $LN73@Draw
  00479	33 db		 xor	 ebx, ebx
  0047b	eb 1a		 jmp	 SHORT $LN74@Draw
$LN73@Draw:
  0047d	0f 28 c1	 movaps	 xmm0, xmm1
  00480	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00488	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00490	e8 00 00 00 00	 call	 __ftol3
  00495	8b d8		 mov	 ebx, eax
$LN74@Draw:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00497	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$496$1$[ebp]
  0049c	0f 57 c9	 xorps	 xmm1, xmm1
  0049f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  004a6	72 07		 jb	 SHORT $LN79@Draw
  004a8	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  004ad	eb 23		 jmp	 SHORT $LN78@Draw
$LN79@Draw:
  004af	0f 2f c8	 comiss	 xmm1, xmm0
  004b2	72 04		 jb	 SHORT $LN77@Draw
  004b4	33 ff		 xor	 edi, edi
  004b6	eb 1a		 jmp	 SHORT $LN78@Draw
$LN77@Draw:
  004b8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  004c0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  004c8	e8 00 00 00 00	 call	 __ftol3
  004cd	8b f8		 mov	 edi, eax
  004cf	0f 57 c9	 xorps	 xmm1, xmm1
$LN78@Draw:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  004d2	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$494$1$[ebp]
  004d7	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  004de	72 07		 jb	 SHORT $LN83@Draw
  004e0	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  004e5	eb 20		 jmp	 SHORT $LN82@Draw
$LN83@Draw:
  004e7	0f 2f c8	 comiss	 xmm1, xmm0
  004ea	72 04		 jb	 SHORT $LN81@Draw
  004ec	33 f6		 xor	 esi, esi
  004ee	eb 17		 jmp	 SHORT $LN82@Draw
$LN81@Draw:
  004f0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  004f8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00500	e8 00 00 00 00	 call	 __ftol3
  00505	8b f0		 mov	 esi, eax
$LN82@Draw:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00507	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$490$1$[ebp]
  0050c	0f 57 c0	 xorps	 xmm0, xmm0
  0050f	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00516	72 07		 jb	 SHORT $LN87@Draw
  00518	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0051d	eb 24		 jmp	 SHORT $LN86@Draw
$LN87@Draw:
  0051f	0f 2f c1	 comiss	 xmm0, xmm1
  00522	72 04		 jb	 SHORT $LN85@Draw
  00524	33 c0		 xor	 eax, eax
  00526	eb 1b		 jmp	 SHORT $LN86@Draw
$LN85@Draw:
  00528	0f 28 c1	 movaps	 xmm0, xmm1
  0052b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00533	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0053b	e8 00 00 00 00	 call	 __ftol3
  00540	0f 57 c0	 xorps	 xmm0, xmm0
$LN86@Draw:
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 587  : 		vertices[3].x = fCenterX + fW;

  00543	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _fW$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00548	c1 e0 08	 shl	 eax, 8
  0054b	0b c3		 or	 eax, ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 587  : 		vertices[3].x = fCenterX + fW;

  0054d	f3 0f 11 4d e4	 movss	 DWORD PTR _vertices$2[ebp+72], xmm1

; 588  : 		vertices[3].y = fCenterY + fW;

  00552	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR tv979[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00557	c1 e0 08	 shl	 eax, 8
  0055a	0b c7		 or	 eax, edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 588  : 		vertices[3].y = fCenterY + fW;

  0055c	f3 0f 11 4d e8	 movss	 DWORD PTR _vertices$2[ebp+76], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00561	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$498$1$[ebp]

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00566	c1 e0 08	 shl	 eax, 8
  00569	0b c6		 or	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 585  : 		vertices[3].u = 1.0f;

  0056b	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR _vertices$2[ebp+88], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00572	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 583  : 		vertices[2].color = d3dColor;

  00579	89 45 d8	 mov	 DWORD PTR _vertices$2[ebp+60], eax

; 586  : 		vertices[3].v = 1.0f;

  0057c	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _vertices$2[ebp+92], 1065353216 ; 3f800000H

; 589  : 		vertices[3].z = 0.0f;

  00583	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+80], 0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0058a	72 07		 jb	 SHORT $LN93@Draw
  0058c	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00591	eb 23		 jmp	 SHORT $LN92@Draw
$LN93@Draw:
  00593	0f 2f c1	 comiss	 xmm0, xmm1
  00596	72 04		 jb	 SHORT $LN91@Draw
  00598	33 db		 xor	 ebx, ebx
  0059a	eb 1a		 jmp	 SHORT $LN92@Draw
$LN91@Draw:
  0059c	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  005a4	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  005ac	0f 28 c1	 movaps	 xmm0, xmm1
  005af	e8 00 00 00 00	 call	 __ftol3
  005b4	8b d8		 mov	 ebx, eax
$LN92@Draw:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  005b6	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$496$1$[ebp]
  005bb	0f 57 c9	 xorps	 xmm1, xmm1
  005be	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  005c5	72 07		 jb	 SHORT $LN97@Draw
  005c7	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  005cc	eb 23		 jmp	 SHORT $LN96@Draw
$LN97@Draw:
  005ce	0f 2f c8	 comiss	 xmm1, xmm0
  005d1	72 04		 jb	 SHORT $LN95@Draw
  005d3	33 ff		 xor	 edi, edi
  005d5	eb 1a		 jmp	 SHORT $LN96@Draw
$LN95@Draw:
  005d7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  005df	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  005e7	e8 00 00 00 00	 call	 __ftol3
  005ec	8b f8		 mov	 edi, eax
  005ee	0f 57 c9	 xorps	 xmm1, xmm1
$LN96@Draw:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  005f1	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$494$1$[ebp]
  005f6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  005fd	72 07		 jb	 SHORT $LN101@Draw
  005ff	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00604	eb 20		 jmp	 SHORT $LN100@Draw
$LN101@Draw:
  00606	0f 2f c8	 comiss	 xmm1, xmm0
  00609	72 04		 jb	 SHORT $LN99@Draw
  0060b	33 f6		 xor	 esi, esi
  0060d	eb 17		 jmp	 SHORT $LN100@Draw
$LN99@Draw:
  0060f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00617	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0061f	e8 00 00 00 00	 call	 __ftol3
  00624	8b f0		 mov	 esi, eax
$LN100@Draw:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00626	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$490$1$[ebp]
  0062b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00632	72 07		 jb	 SHORT $LN105@Draw
  00634	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00639	eb 21		 jmp	 SHORT $LN104@Draw
$LN105@Draw:
  0063b	0f 57 c9	 xorps	 xmm1, xmm1
  0063e	0f 2f c8	 comiss	 xmm1, xmm0
  00641	72 04		 jb	 SHORT $LN103@Draw
  00643	33 c0		 xor	 eax, eax
  00645	eb 15		 jmp	 SHORT $LN104@Draw
$LN103@Draw:
  00647	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0064f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00657	e8 00 00 00 00	 call	 __ftol3
$LN104@Draw:
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 592  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, vertices, sizeof(TVertex));

  0065c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00662	c1 e0 08	 shl	 eax, 8
  00665	0b c3		 or	 eax, ebx
  00667	c1 e0 08	 shl	 eax, 8
  0066a	0b c7		 or	 eax, edi
  0066c	c1 e0 08	 shl	 eax, 8
  0066f	0b c6		 or	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 592  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, vertices, sizeof(TVertex));

  00671	6a 18		 push	 24			; 00000018H
  00673	89 45 f0	 mov	 DWORD PTR _vertices$2[ebp+84], eax
  00676	8d 45 9c	 lea	 eax, DWORD PTR _vertices$2[ebp]
  00679	50		 push	 eax
  0067a	6a 02		 push	 2
  0067c	6a 05		 push	 5
  0067e	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00683	8b 9d 68 ff ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 549  : 	for (unsigned int i = 0; i < m_vFlares.size(); i++)

  00689	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _i$1$[ebp]
  0068f	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fBrightScale$[ebp]
  00694	42		 inc	 edx
  00695	89 95 78 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0069b	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0069e	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  006a1	2b c1		 sub	 eax, ecx
  006a3	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EterLib\LensFlare.cpp

; 549  : 	for (unsigned int i = 0; i < m_vFlares.size(); i++)

  006a6	3b d0		 cmp	 edx, eax
  006a8	0f 82 72 fa ff
	ff		 jb	 $LL4@Draw
  006ae	5f		 pop	 edi
  006af	5b		 pop	 ebx
$LN3@Draw:

; 593  : 	}
; 594  : 
; 595  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  006b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  006b6	6a 14		 push	 20			; 00000014H
  006b8	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 596  : }

  006bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006c0	33 cd		 xor	 ecx, ebp
  006c2	5e		 pop	 esi
  006c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006c8	8b e5		 mov	 esp, ebp
  006ca	5d		 pop	 ebp
  006cb	c2 14 00	 ret	 20			; 00000014H
?Draw@CFlare@@QAEXMHHHH@Z ENDP				; CFlare::Draw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -16					; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__Left$ = 12						; size = 4
__New_size$1$ = 12					; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1056 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1063 :         const auto _Right_size = _Right_data._Mysize;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	56		 push	 esi
  0000e	8b f1		 mov	 esi, ecx
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __Left$[ebp]

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1057 :         auto& _My_data    = _Mypair._Myval2;
; 1058 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 1059 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1060 :         _Left_data._Orphan_all();
; 1061 :         _Right_data._Orphan_all();
; 1062 :         const auto _Left_size  = _Left_data._Mysize;

  00025	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 1063 :         const auto _Right_size = _Right_data._Mysize;

  00028	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  0002b	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  0002e	89 55 f0	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 1064 : 
; 1065 :         const auto _Left_capacity  = _Left_data._Myres;
; 1066 :         const auto _Right_capacity = _Right_data._Myres;
; 1067 :         // overflow is OK due to max_size() checks:
; 1068 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  00031	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00034	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 1069 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00037	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0003a	2b c1		 sub	 eax, ecx
  0003c	3b d0		 cmp	 edx, eax

; 1070 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  0003e	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00041	77 5a		 ja	 SHORT $LN113@basic_stri
  00043	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00046	77 55		 ja	 SHORT $LN113@basic_stri

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00048	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0004b	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0004e	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00053	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00058	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0005f	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00066	c6 07 00	 mov	 BYTE PTR [edi], 0

; 416  :         value_type* _Result = _Bx._Buf;

  00069	8b fe		 mov	 edi, esi

; 434  :         return _Myres > _Small_string_capacity;

  0006b	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0006f	76 02		 jbe	 SHORT $LN71@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00071	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN71@basic_stri:

; 434  :         return _Myres > _Small_string_capacity;

  00073	83 7b 14 0f	 cmp	 DWORD PTR [ebx+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00077	76 02		 jbe	 SHORT $LN78@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00079	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN78@basic_stri:

; 1076 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007e	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1076 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007f	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00082	53		 push	 ebx
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1077 :             _My_data._Mysize = _New_size;

  00089	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 1122 :     }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00092	8b c6		 mov	 eax, esi
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
$LN113@basic_stri:

; 1078 :             return;
; 1079 :         }
; 1080 : 
; 1081 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  0009d	2b c2		 sub	 eax, edx
  0009f	3b c8		 cmp	 ecx, eax

; 1082 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  000a1	77 5b		 ja	 SHORT $LN112@basic_stri

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a3	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 1097 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a6	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000aa	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000ad	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  000b2	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  000b7	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  000be	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  000c5	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 1083 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 1084 :             // At this point, we have tested:
; 1085 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 1086 :             // therefore: (by De Morgan's Laws)
; 1087 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 1088 :             // therefore: (by the distributive property)
; 1089 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 1090 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 1091 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_mode_engaged()
; 1092 :             _STL_INTERNAL_CHECK(_Right_data._Large_mode_engaged());
; 1093 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 1094 :             _Take_contents(_Right);
; 1095 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c8	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ca	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1097 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000cb	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memmove
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000d7	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  000db	76 02		 jbe	 SHORT $LN102@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  000dd	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN102@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000df	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  000e2	50		 push	 eax
  000e3	57		 push	 edi
  000e4	53		 push	 ebx
  000e5	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1099 :             _My_data._Mysize = _New_size;

  000ea	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 1122 :     }

  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000f3	8b c6		 mov	 eax, esi
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 0c 00	 ret	 12			; 0000000cH
$LN112@basic_stri:

; 1100 :             return;
; 1101 :         }
; 1102 : 
; 1103 :         // can't use either buffer, reallocate
; 1104 :         const auto _Max = max_size();
; 1105 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000fe	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00103	2b c1		 sub	 eax, ecx
  00105	3b c2		 cmp	 eax, edx
  00107	0f 82 a2 00 00
	00		 jb	 $LN132@basic_stri

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0010d	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00110	83 c8 0f	 or	 eax, 15			; 0000000fH
  00113	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00118	76 14		 jbe	 SHORT $LN20@basic_stri

; 2944 :             return _Max;

  0011a	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  0011f	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR $T2[ebp], 2147483647 ; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00126	52		 push	 edx
  00127	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0012c	eb 2a		 jmp	 SHORT $LN130@basic_stri
$LN20@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0012e	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  00133	3b c2		 cmp	 eax, edx
  00135	0f 42 c2	 cmovb	 eax, edx
  00138	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0013b	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0013e	85 d2		 test	 edx, edx
  00140	74 21		 je	 SHORT $LN129@basic_stri
$LN34@basic_stri:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00142	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00148	72 08		 jb	 SHORT $LN35@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00150	eb 06		 jmp	 SHORT $LN130@basic_stri
$LN35@basic_stri:

; 136  :         return ::operator new(_Bytes);

  00152	52		 push	 edx
  00153	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN130@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00158	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  0015b	8b d0		 mov	 edx, eax
  0015d	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00160	83 c4 04	 add	 esp, 4
$LN129@basic_stri:

; 1115 :         _My_data._Mysize = _New_size;

  00163	8b 5d 0c	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  00166	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 417  :         if (_Large_mode_engaged()) {

  00169	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0016c	89 16		 mov	 DWORD PTR [esi], edx

; 1116 :         _My_data._Myres  = _New_capacity;

  0016e	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 434  :         return _Myres > _Small_string_capacity;

  00171	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00175	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx

; 417  :         if (_Large_mode_engaged()) {

  00178	76 02		 jbe	 SHORT $LN40@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0017a	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN40@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0017c	51		 push	 ecx
  0017d	57		 push	 edi
  0017e	52		 push	 edx
  0017f	e8 00 00 00 00	 call	 _memcpy
  00184	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00187	83 7b 14 0f	 cmp	 DWORD PTR [ebx+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0018b	76 02		 jbe	 SHORT $LN50@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0018d	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN50@basic_stri:

; 1119 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0018f	8b 45 f0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00192	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00193	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1119 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  00194	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  00197	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019a	53		 push	 ebx
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1122 :     }

  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	8b c6		 mov	 eax, esi
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c2 0c 00	 ret	 12			; 0000000cH
$LN132@basic_stri:

; 1106 :             _Xlen_string();

  001af	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN127@basic_stri:
  001b4	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 744  :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000f	8b f7		 mov	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL51@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL51@basic_stri
  0002c	2b f1		 sub	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 857  :         if (_Count > max_size()) {

  0002e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00034	0f 87 9b 00 00
	00		 ja	 $LN62@basic_stri

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  0003a	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  0003d	77 24		 ja	 SHORT $LN21@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003f	56		 push	 esi
  00040	57		 push	 edi
  00041	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00042	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00045	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00051	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	8b c3		 mov	 eax, ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN21@basic_stri:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 12		 jbe	 SHORT $LN27@basic_stri

; 2944 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	eb 26		 jmp	 SHORT $LN60@basic_stri
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00082	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00087	3b f8		 cmp	 edi, eax
  00089	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0008c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0008f	85 c0		 test	 eax, eax
  00091	74 18		 je	 SHORT $LN59@basic_stri
$LN41@basic_stri:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00093	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00098	72 08		 jb	 SHORT $LN42@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a0	eb 06		 jmp	 SHORT $LN60@basic_stri
$LN42@basic_stri:

; 136  :         return ::operator new(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN60@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000a8	83 c4 04	 add	 esp, 4
$LN59@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ab	56		 push	 esi
  000ac	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000af	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b2	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000b3	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  000b5	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  000b8	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bb	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000c0	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	5f		 pop	 edi

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000c7	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  000cb	8b c3		 mov	 eax, ebx
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
$LN62@basic_stri:

; 858  :             _Xlen_string(); // result too long

  000d5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN57@basic_stri:
  000da	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 693  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000d	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00010	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00017	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 434  :         return _Myres > _Small_string_capacity;

  0001e	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00022	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  00025	76 05		 jbe	 SHORT $LN17@basic_stri

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00027	8b 00		 mov	 eax, DWORD PTR [eax]
  00029	89 45 08	 mov	 DWORD PTR __Right$[ebp], eax
$LN17@basic_stri:

; 857  :         if (_Count > max_size()) {

  0002c	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00032	0f 87 8d 00 00
	00		 ja	 $LN63@basic_stri

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00038	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  0003b	77 18		 ja	 SHORT $LN25@basic_stri

; 866  :             _My_data._Mysize = _Count;

  0003d	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00040	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00047	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  0004a	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  0004f	5f		 pop	 edi
  00050	5b		 pop	 ebx
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN25@basic_stri:
  00055	56		 push	 esi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00056	8b f3		 mov	 esi, ebx
  00058	83 ce 0f	 or	 esi, 15			; 0000000fH
  0005b	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00061	76 12		 jbe	 SHORT $LN31@basic_stri

; 2944 :             return _Max;

  00063	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00068	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00073	eb 2a		 jmp	 SHORT $LN61@basic_stri
$LN31@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00075	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0007a	3b f0		 cmp	 esi, eax
  0007c	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0007f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00082	85 c0		 test	 eax, eax
  00084	75 04		 jne	 SHORT $LN45@basic_stri

; 228  :         return nullptr;

  00086	33 c9		 xor	 ecx, ecx
  00088	eb 1a		 jmp	 SHORT $LN44@basic_stri
$LN45@basic_stri:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0008a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0008f	72 08		 jb	 SHORT $LN46@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00097	eb 06		 jmp	 SHORT $LN61@basic_stri
$LN46@basic_stri:

; 136  :         return ::operator new(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN61@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0009f	8b c8		 mov	 ecx, eax
  000a1	83 c4 04	 add	 esp, 4
$LN44@basic_stri:

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000a4	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000a7	89 0f		 mov	 DWORD PTR [edi], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax
  000aa	ff 75 08	 push	 DWORD PTR __Right$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  000ad	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b0	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 892  :         _My_data._Myres  = _New_capacity;

  000b1	89 77 14	 mov	 DWORD PTR [edi+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b4	e8 00 00 00 00	 call	 _memcpy
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  000bc	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 695  :     }

  000bf	5f		 pop	 edi
  000c0	5b		 pop	 ebx
  000c1	5d		 pop	 ebp
  000c2	c2 04 00	 ret	 4
$LN63@basic_stri:

; 858  :             _Xlen_string(); // result too long

  000c5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN60@basic_stri:
  000ca	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
