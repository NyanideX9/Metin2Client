; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\GrpObjectInstance.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXVECTOR4@@QAE@XZ				; D3DXVECTOR4::D3DXVECTOR4
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?Unlink@SpherePack@@QAEXXZ			; SpherePack::Unlink
PUBLIC	??0CGraphicObjectInstance@@QAE@XZ		; CGraphicObjectInstance::CGraphicObjectInstance
PUBLIC	??1CGraphicObjectInstance@@UAE@XZ		; CGraphicObjectInstance::~CGraphicObjectInstance
PUBLIC	?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
PUBLIC	?GetScale@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetScale
PUBLIC	?GetRotation@CGraphicObjectInstance@@QAEMXZ	; CGraphicObjectInstance::GetRotation
PUBLIC	?GetYaw@CGraphicObjectInstance@@QAEMXZ		; CGraphicObjectInstance::GetYaw
PUBLIC	?GetPitch@CGraphicObjectInstance@@QAEMXZ	; CGraphicObjectInstance::GetPitch
PUBLIC	?GetRoll@CGraphicObjectInstance@@QAEMXZ		; CGraphicObjectInstance::GetRoll
PUBLIC	?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z	; CGraphicObjectInstance::SetPosition
PUBLIC	?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z ; CGraphicObjectInstance::SetPosition
PUBLIC	?SetScale@CGraphicObjectInstance@@QAEXMMM@Z	; CGraphicObjectInstance::SetScale
PUBLIC	?SetRotation@CGraphicObjectInstance@@QAEXM@Z	; CGraphicObjectInstance::SetRotation
PUBLIC	?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z	; CGraphicObjectInstance::SetRotation
PUBLIC	?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z ; CGraphicObjectInstance::SetRotationQuaternion
PUBLIC	?SetRotationMatrix@CGraphicObjectInstance@@QAEXABUD3DXMATRIX@@@Z ; CGraphicObjectInstance::SetRotationMatrix
PUBLIC	?Clear@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Clear
PUBLIC	?Update@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Update
PUBLIC	?Render@CGraphicObjectInstance@@QAE_NXZ		; CGraphicObjectInstance::Render
PUBLIC	?BlendRender@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::BlendRender
PUBLIC	?RenderToShadowMap@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::RenderToShadowMap
PUBLIC	?RenderShadow@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::RenderShadow
PUBLIC	?RenderPCBlocker@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::RenderPCBlocker
PUBLIC	?Deform@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Deform
PUBLIC	?Transform@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::Transform
PUBLIC	?Show@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Show
PUBLIC	?Hide@CGraphicObjectInstance@@QAEXXZ		; CGraphicObjectInstance::Hide
PUBLIC	?isShow@CGraphicObjectInstance@@QAE_NXZ		; CGraphicObjectInstance::isShow
PUBLIC	?ApplyAlwaysHidden@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ApplyAlwaysHidden
PUBLIC	?ReleaseAlwaysHidden@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ReleaseAlwaysHidden
PUBLIC	?isIntersect@CGraphicObjectInstance@@QAE_NABVCRay@@PAM11@Z ; CGraphicObjectInstance::isIntersect
PUBLIC	?GetWTBBoxVertex@CGraphicObjectInstance@@QAEAAUD3DXVECTOR4@@ABE@Z ; CGraphicObjectInstance::GetWTBBoxVertex
PUBLIC	?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ ; CGraphicObjectInstance::GetTransform
PUBLIC	?SetPortal@CGraphicObjectInstance@@QAEXKH@Z	; CGraphicObjectInstance::SetPortal
PUBLIC	?GetPortal@CGraphicObjectInstance@@QAEHK@Z	; CGraphicObjectInstance::GetPortal
PUBLIC	?Initialize@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::Initialize
PUBLIC	?OnInitialize@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnInitialize
PUBLIC	?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::UpdateBoundingSphere
PUBLIC	?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::RegisterBoundingSphere
PUBLIC	?OnClear@CGraphicObjectInstance@@UAEXXZ		; CGraphicObjectInstance::OnClear
PUBLIC	?OnUpdate@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnUpdate
PUBLIC	?OnDeform@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnDeform
PUBLIC	?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ; CGraphicObjectInstance::AddCollision
PUBLIC	?ClearCollision@CGraphicObjectInstance@@QAEXXZ	; CGraphicObjectInstance::ClearCollision
PUBLIC	?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::CollisionDynamicSphere
PUBLIC	?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::MovementCollisionDynamicSphere
PUBLIC	?GetCollisionMovementAdjust@CGraphicObjectInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; CGraphicObjectInstance::GetCollisionMovementAdjust
PUBLIC	?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ; CGraphicObjectInstance::UpdateCollisionData
PUBLIC	??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::~vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >
PUBLIC	?_Xlength@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Xlength
PUBLIC	?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ ; CGraphicObjectInstance::GetCollisionInstanceCount
PUBLIC	?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z ; CGraphicObjectInstance::GetCollisionInstanceData
PUBLIC	?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ; CGraphicObjectInstance::SetHeightInstance
PUBLIC	?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ClearHeightInstance
PUBLIC	?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ; CGraphicObjectInstance::UpdateHeightInstance
PUBLIC	?IsObjectHeight@CGraphicObjectInstance@@QAE_NXZ	; CGraphicObjectInstance::IsObjectHeight
PUBLIC	?GetObjectHeight@CGraphicObjectInstance@@QAE_NMMPAM@Z ; CGraphicObjectInstance::GetObjectHeight
PUBLIC	??_GCGraphicObjectInstance@@UAEPAXI@Z		; CGraphicObjectInstance::`scalar deleting destructor'
PUBLIC	??$_Emplace_reallocate@PAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@AAEPAPAVCBaseCollisionInstance@@QAPAV2@$$QAPAV2@@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Emplace_reallocate<CBaseCollisionInstance *>
PUBLIC	??$_Copy_memmove@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CBaseCollisionInstance * *,CBaseCollisionInstance * *>
PUBLIC	??$_Copy_memmove_tail@PAPAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CBaseCollisionInstance * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
PUBLIC	??_7CGraphicObjectInstance@@6B@			; CGraphicObjectInstance::`vftable'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CGraphicObjectInstance@@6B@		; CGraphicObjectInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicObjectInstance@@@8		; CGraphicObjectInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicObjectInstance@@8		; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@3c8efa35
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_D3DXMatrixRotationZ@8:PROC
EXTRN	_D3DXMatrixRotationQuaternion@8:PROC
EXTRN	_D3DXMatrixRotationYawPitchRoll@16:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	??0CGraphicCollisionObject@@QAE@XZ:PROC		; CGraphicCollisionObject::CGraphicCollisionObject
EXTRN	??1CGraphicCollisionObject@@UAE@XZ:PROC		; CGraphicCollisionObject::~CGraphicCollisionObject
EXTRN	?IntersectTriangle@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@0000PAM11@Z:PROC ; CGraphicCollisionObject::IntersectTriangle
EXTRN	?LostChild@SpherePack@@QAEXPAV1@@Z:PROC		; SpherePack::LostChild
EXTRN	?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z:PROC ; SpherePackFactory::AddIntegrate
EXTRN	?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z:PROC ; SpherePackFactory::AddRecompute
EXTRN	?Register@CCullingManager@@QAEPAVSpherePack@@PAVCGraphicObjectInstance@@@Z:PROC ; CCullingManager::Register
EXTRN	?Unregister@CCullingManager@@QAEXPAVSpherePack@@@Z:PROC ; CCullingManager::Unregister
EXTRN	?Destroy@CBaseCollisionInstance@@QAEXXZ:PROC	; CBaseCollisionInstance::Destroy
EXTRN	?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z:PROC ; CBaseCollisionInstance::BuildCollisionInstance
EXTRN	??_ECGraphicObjectInstance@@UAEPAXI@Z:PROC	; CGraphicObjectInstance::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A DD 01H DUP (?) ; CSingleton<CCullingManager>::ms_singleton
_BSS	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicObjectInstance@@8 DD FLAT:??_R0?AVCGraphicObjectInstance@@@8 ; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R2CGraphicObjectInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicObjectInstance@@8 ; CGraphicObjectInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R3CGraphicObjectInstance@@8 DD 00H			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicObjectInstance@@@8
data$rs	SEGMENT
??_R0?AVCGraphicObjectInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicObjectInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicObjectInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicObjectInstance@@6B@
rdata$r	SEGMENT
??_R4CGraphicObjectInstance@@6B@ DD 00H			; CGraphicObjectInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicObjectInstance@@@8
	DD	FLAT:??_R3CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicObjectInstance@@6B@
CONST	SEGMENT
??_7CGraphicObjectInstance@@6B@ DD FLAT:??_R4CGraphicObjectInstance@@6B@ ; CGraphicObjectInstance::`vftable'
	DD	FLAT:??_ECGraphicObjectInstance@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?OnInitialize@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?OnClear@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnUpdate@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnDeform@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGraphicObjectInstance@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGraphicObjectInstance@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphicObjectInstance@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CGraphicObjectInstance@@QAE@XZ$1
__ehfuncinfo$??0CGraphicObjectInstance@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CGraphicObjectInstance@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CBaseCollisionInstance * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CBaseCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CBaseCollisionInstance * *,CBaseCollisionInstance * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCBaseCollisionInstance@@@std@@YAPAPAVCBaseCollisionInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CBaseCollisionInstance * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CBaseCollisionInstance * *,CBaseCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@PAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@AAEPAPAVCBaseCollisionInstance@@QAPAV2@$$QAPAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv652 = -8						; size = 4
tv650 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@PAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@AAEPAPAVCBaseCollisionInstance@@QAPAV2@$$QAPAV2@@Z PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Emplace_reallocate<CBaseCollisionInstance *>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 09 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 c7 00 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 f8	 mov	 DWORD PTR tv652[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b4	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b7	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b9	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	53		 push	 ebx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CBaseCollisionInstance * *,CBaseCollisionInstance * *>
  000c3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c6	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c8	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCBaseCollisionInstance@@PAPAV1@@std@@YAPAPAVCBaseCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CBaseCollisionInstance * *,CBaseCollisionInstance * *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	85 c0		 test	 eax, eax
  000e0	74 2c		 je	 SHORT $LN72@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN83@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 2a		 ja	 SHORT $LN80@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00102	8b c2		 mov	 eax, edx
$LN83@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
$LN72@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
  00113	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00116	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00118	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR tv652[ebp]
  0011e	03 cf		 add	 ecx, edi

; 903  :     }

  00120	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@PAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@AAEPAPAVCBaseCollisionInstance@@QAPAV2@$$QAPAV2@@Z ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Emplace_reallocate<CBaseCollisionInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicObjectInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicObjectInstance@@UAEPAXI@Z PROC		; CGraphicObjectInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicObjectInstance@@UAE@XZ ; CGraphicObjectInstance::~CGraphicObjectInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 7c 01 00 00	 push	 380			; 0000017cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCGraphicObjectInstance@@UAEPAXI@Z ENDP		; CGraphicObjectInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetObjectHeight@CGraphicObjectInstance@@QAE_NMMPAM@Z
_TEXT	SEGMENT
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_pfHeight$ = 16						; size = 4
?GetObjectHeight@CGraphicObjectInstance@@QAE_NMMPAM@Z PROC ; CGraphicObjectInstance::GetObjectHeight, COMDAT
; _this$ = ecx

; 494  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 495  : 	if (!m_pHeightAttributeInstance)

  00003	83 b9 78 01 00
	00 00		 cmp	 DWORD PTR [ecx+376], 0
  0000a	75 06		 jne	 SHORT $LN2@GetObjectH

; 496  : 		return false;

  0000c	32 c0		 xor	 al, al

; 499  : }

  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
$LN2@GetObjectH:

; 497  : 
; 498  : 	return OnGetObjectHeight(fX, fY, pfHeight);

  00012	ff 75 10	 push	 DWORD PTR _pfHeight$[ebp]
  00015	8b 01		 mov	 eax, DWORD PTR [ecx]
  00017	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fY$[ebp]
  0001c	83 ec 08	 sub	 esp, 8
  0001f	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00022	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fX$[ebp]
  0002d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00032	ff d0		 call	 eax

; 499  : }

  00034	5d		 pop	 ebp
  00035	c2 0c 00	 ret	 12			; 0000000cH
?GetObjectHeight@CGraphicObjectInstance@@QAE_NMMPAM@Z ENDP ; CGraphicObjectInstance::GetObjectHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?IsObjectHeight@CGraphicObjectInstance@@QAE_NXZ
_TEXT	SEGMENT
?IsObjectHeight@CGraphicObjectInstance@@QAE_NXZ PROC	; CGraphicObjectInstance::IsObjectHeight, COMDAT
; _this$ = ecx

; 487  : 	if (m_pHeightAttributeInstance)

  00000	83 b9 78 01 00
	00 00		 cmp	 DWORD PTR [ecx+376], 0
  00007	0f 95 c0	 setne	 al

; 488  : 		return true;
; 489  : 
; 490  : 	return false;
; 491  : }

  0000a	c3		 ret	 0
?IsObjectHeight@CGraphicObjectInstance@@QAE_NXZ ENDP	; CGraphicObjectInstance::IsObjectHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z
_TEXT	SEGMENT
_pAttributeInstance$ = 8				; size = 4
?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z PROC ; CGraphicObjectInstance::UpdateHeightInstance, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 481  : 	ClearHeightInstance();

  00006	e8 00 00 00 00	 call	 ?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ClearHeightInstance

; 482  : 	OnUpdateHeighInstance(pAttributeInstance);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 75 08	 push	 DWORD PTR _pAttributeInstance$[ebp]
  00012	ff 50 34	 call	 DWORD PTR [eax+52]
  00015	5e		 pop	 esi

; 483  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?UpdateHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ENDP ; CGraphicObjectInstance::UpdateHeightInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ PROC ; CGraphicObjectInstance::ClearHeightInstance, COMDAT
; _this$ = ecx

; 476  : 	m_pHeightAttributeInstance = NULL;

  00000	c7 81 78 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+376], 0

; 477  : }

  0000a	c3		 ret	 0
?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ ENDP ; CGraphicObjectInstance::ClearHeightInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z
_TEXT	SEGMENT
_pAttributeInstance$ = 8				; size = 4
?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z PROC ; CGraphicObjectInstance::SetHeightInstance, COMDAT
; _this$ = ecx

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 471  : 	m_pHeightAttributeInstance = pAttributeInstance;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pAttributeInstance$[ebp]
  00006	89 81 78 01 00
	00		 mov	 DWORD PTR [ecx+376], eax

; 472  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetHeightInstance@CGraphicObjectInstance@@QAEXPAVCAttributeInstance@@@Z ENDP ; CGraphicObjectInstance::SetHeightInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z PROC ; CGraphicObjectInstance::GetCollisionInstanceData, COMDAT
; _this$ = ecx

; 458  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 81 70 01 00
	00		 mov	 eax, DWORD PTR [ecx+368]
  00009	8b 91 6c 01 00
	00		 mov	 edx, DWORD PTR [ecx+364]
  0000f	2b c2		 sub	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 459  : 	if (dwIndex>m_StaticCollisionInstanceVector.size())

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 459  : 	if (dwIndex>m_StaticCollisionInstanceVector.size())

  00017	3b c8		 cmp	 ecx, eax
  00019	76 06		 jbe	 SHORT $LN2@GetCollisi

; 460  : 	{
; 461  : 		return 0;

  0001b	33 c0		 xor	 eax, eax

; 464  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@GetCollisi:

; 462  : 	}
; 463  : 	return m_StaticCollisionInstanceVector[dwIndex];

  00021	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]

; 464  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?GetCollisionInstanceData@CGraphicObjectInstance@@QAEPAVCBaseCollisionInstance@@K@Z ENDP ; CGraphicObjectInstance::GetCollisionInstanceData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ
_TEXT	SEGMENT
?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ PROC ; CGraphicObjectInstance::GetCollisionInstanceCount, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 81 70 01 00
	00		 mov	 eax, DWORD PTR [ecx+368]
  00006	2b 81 6c 01 00
	00		 sub	 eax, DWORD PTR [ecx+364]
  0000c	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 455  : }

  0000f	c3		 ret	 0
?GetCollisionInstanceCount@CGraphicObjectInstance@@QAEKXZ ENDP ; CGraphicObjectInstance::GetCollisionInstanceCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::~vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00049	5e		 pop	 esi

; 820  :     }

  0004a	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00050	cc		 int	 3
??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::~vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z
_TEXT	SEGMENT
_pscdVector$ = 8					; size = 4
?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z PROC ; CGraphicObjectInstance::UpdateCollisionData, COMDAT
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 447  : 
; 448  : 	ClearCollision();

  00006	e8 00 00 00 00	 call	 ?ClearCollision@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ClearCollision

; 449  : 	OnUpdateCollisionData(pscdVector);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8b ce		 mov	 ecx, esi
  0000f	ff 75 08	 push	 DWORD PTR _pscdVector$[ebp]
  00012	ff 50 30	 call	 DWORD PTR [eax+48]
  00015	5e		 pop	 esi

; 450  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?UpdateCollisionData@CGraphicObjectInstance@@QAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ENDP ; CGraphicObjectInstance::UpdateCollisionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\CollisionData.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\CollisionData.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetCollisionMovementAdjust@CGraphicObjectInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?GetCollisionMovementAdjust@CGraphicObjectInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; CGraphicObjectInstance::GetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 434  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b b7 6c 01 00
	00		 mov	 esi, DWORD PTR [edi+364]
  0000e	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 436  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00014	74 23		 je	 SHORT $LN3@GetCollisi
  00016	8b 5d 0c	 mov	 ebx, DWORD PTR _s$[ebp]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@GetCollisi:

; 438  : 		if ((*it)->MovementCollisionDynamicSphere(s))

  00020	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\CollisionData.h

; 83   : 			return OnMovementCollisionDynamicSphere(s);

  00022	53		 push	 ebx
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00028	ff d0		 call	 eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 438  : 		if ((*it)->MovementCollisionDynamicSphere(s))

  0002a	84 c0		 test	 al, al
  0002c	75 29		 jne	 SHORT $LN38@GetCollisi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  0002e	83 c6 04	 add	 esi, 4

; 166  :         return _Ptr == _Right._Ptr;

  00031	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 436  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00037	75 e7		 jne	 SHORT $LL4@GetCollisi
$LN3@GetCollisi:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00039	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 443  : }

  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 181  :     y = fy;

  00045	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 182  :     z = fz;

  0004c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 443  : }

  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
$LN38@GetCollisi:

; 439  : 			return (*it)->GetCollisionMovementAdjust(s);

  00057	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\CollisionData.h

; 93   : 			return OnGetCollisionMovementAdjust(s);

  00059	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00060	ff 52 04	 call	 DWORD PTR [edx+4]
  00063	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 439  : 			return (*it)->GetCollisionMovementAdjust(s);

  00064	8b c6		 mov	 eax, esi

; 443  : }

  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?GetCollisionMovementAdjust@CGraphicObjectInstance@@QBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; CGraphicObjectInstance::GetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\CollisionData.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z PROC ; CGraphicObjectInstance::MovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 423  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b b7 6c 01 00
	00		 mov	 esi, DWORD PTR [edi+364]
  0000e	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 425  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00014	74 23		 je	 SHORT $LN3@MovementCo
  00016	8b 5d 08	 mov	 ebx, DWORD PTR _s$[ebp]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@MovementCo:

; 427  : 		if ((*it)->MovementCollisionDynamicSphere(s))

  00020	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\CollisionData.h

; 83   : 			return OnMovementCollisionDynamicSphere(s);

  00022	53		 push	 ebx
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00028	ff d0		 call	 eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 427  : 		if ((*it)->MovementCollisionDynamicSphere(s))

  0002a	84 c0		 test	 al, al
  0002c	75 14		 jne	 SHORT $LN34@MovementCo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  0002e	83 c6 04	 add	 esi, 4

; 166  :         return _Ptr == _Right._Ptr;

  00031	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 425  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00037	75 e7		 jne	 SHORT $LL4@MovementCo
$LN3@MovementCo:
  00039	5f		 pop	 edi

; 428  : 			return true;
; 429  : 	}
; 430  : 	return false;
; 431  : }

  0003a	5e		 pop	 esi
  0003b	32 c0		 xor	 al, al
  0003d	5b		 pop	 ebx
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN34@MovementCo:
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	b0 01		 mov	 al, 1
  00046	5b		 pop	 ebx
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?MovementCollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ENDP ; CGraphicObjectInstance::MovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\CollisionData.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z PROC ; CGraphicObjectInstance::CollisionDynamicSphere, COMDAT
; _this$ = ecx

; 412  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b b7 6c 01 00
	00		 mov	 esi, DWORD PTR [edi+364]
  0000e	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 414  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00014	74 23		 je	 SHORT $LN3@CollisionD
  00016	8b 5d 08	 mov	 ebx, DWORD PTR _s$[ebp]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@CollisionD:

; 416  : 		if ((*it)->CollisionDynamicSphere(s))

  00020	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\CollisionData.h

; 87   : 			return OnCollisionDynamicSphere(s);

  00022	53		 push	 ebx
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00028	ff d0		 call	 eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 416  : 		if ((*it)->CollisionDynamicSphere(s))

  0002a	84 c0		 test	 al, al
  0002c	75 14		 jne	 SHORT $LN34@CollisionD
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  0002e	83 c6 04	 add	 esi, 4

; 166  :         return _Ptr == _Right._Ptr;

  00031	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 414  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00037	75 e7		 jne	 SHORT $LL4@CollisionD
$LN3@CollisionD:
  00039	5f		 pop	 edi

; 417  : 			return true;
; 418  : 	}
; 419  : 	return false;
; 420  : }

  0003a	5e		 pop	 esi
  0003b	32 c0		 xor	 al, al
  0003d	5b		 pop	 ebx
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN34@CollisionD:
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	b0 01		 mov	 al, 1
  00046	5b		 pop	 ebx
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?CollisionDynamicSphere@CGraphicObjectInstance@@QBE_NABUCDynamicSphereInstance@@@Z ENDP ; CGraphicObjectInstance::CollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?ClearCollision@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?ClearCollision@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::ClearCollision, COMDAT
; _this$ = ecx

; 398  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00004	8b b7 6c 01 00
	00		 mov	 esi, DWORD PTR [edi+364]
  0000a	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 401  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00010	74 12		 je	 SHORT $LN3@ClearColli
$LL4@ClearColli:

; 402  : 	{
; 403  : 		(*it)->Destroy();

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 ?Destroy@CBaseCollisionInstance@@QAEXXZ ; CBaseCollisionInstance::Destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  00019	83 c6 04	 add	 esi, 4

; 166  :         return _Ptr == _Right._Ptr;

  0001c	3b b7 70 01 00
	00		 cmp	 esi, DWORD PTR [edi+368]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 401  : 	for(it = m_StaticCollisionInstanceVector.begin();it!=m_StaticCollisionInstanceVector.end();++it)

  00022	75 ee		 jne	 SHORT $LL4@ClearColli
$LN3@ClearColli:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00024	8b 87 6c 01 00
	00		 mov	 eax, DWORD PTR [edi+364]
  0002a	3b 87 70 01 00
	00		 cmp	 eax, DWORD PTR [edi+368]
  00030	74 06		 je	 SHORT $LN42@ClearColli

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00032	89 87 70 01 00
	00		 mov	 DWORD PTR [edi+368], eax
$LN42@ClearColli:
  00038	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 409  : }

  00039	5e		 pop	 esi
  0003a	c3		 ret	 0
?ClearCollision@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::ClearCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_pscd$ = 8						; size = 4
_pMat$ = 12						; size = 4
$T1 = 12						; size = 4
?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z PROC ; CGraphicObjectInstance::AddCollision, COMDAT
; _this$ = ecx

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 394  : 	m_StaticCollisionInstanceVector.push_back(CBaseCollisionInstance::BuildCollisionInstance(pscd, pMat));

  00005	ff 75 0c	 push	 DWORD PTR _pMat$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 75 08	 push	 DWORD PTR _pscd$[ebp]
  0000d	e8 00 00 00 00	 call	 ?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ; CBaseCollisionInstance::BuildCollisionInstance
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00012	8b 8e 70 01 00
	00		 mov	 ecx, DWORD PTR [esi+368]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 394  : 	m_StaticCollisionInstanceVector.push_back(CBaseCollisionInstance::BuildCollisionInstance(pscd, pMat));

  00018	83 c4 08	 add	 esp, 8
  0001b	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0001e	3b 8e 74 01 00
	00		 cmp	 ecx, DWORD PTR [esi+372]
  00024	74 0f		 je	 SHORT $LN6@AddCollisi

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00026	89 01		 mov	 DWORD PTR [ecx], eax

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  00028	83 86 70 01 00
	00 04		 add	 DWORD PTR [esi+368], 4
  0002f	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 395  : }

  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN6@AddCollisi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00035	8d 45 0c	 lea	 eax, DWORD PTR $T1[ebp]
  00038	50		 push	 eax
  00039	51		 push	 ecx
  0003a	8d 8e 6c 01 00
	00		 lea	 ecx, DWORD PTR [esi+364]
  00040	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@PAVCBaseCollisionInstance@@@?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@AAEPAPAVCBaseCollisionInstance@@QAPAV2@$$QAPAV2@@Z ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::_Emplace_reallocate<CBaseCollisionInstance *>
  00045	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 395  : }

  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ENDP ; CGraphicObjectInstance::AddCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.h
;	COMDAT ?OnDeform@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnDeform@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnDeform, COMDAT
; _this$ = ecx

; 109  : 		virtual void			OnDeform(){}

  00000	c2 00 00	 ret	 0
?OnDeform@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnDeform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.h
;	COMDAT ?OnUpdate@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnUpdate@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnUpdate, COMDAT
; _this$ = ecx

; 108  : 		virtual void			OnUpdate(){}

  00000	c2 00 00	 ret	 0
?OnUpdate@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.h
;	COMDAT ?OnClear@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnClear@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnClear, COMDAT
; _this$ = ecx

; 107  : 		virtual void			OnClear(){}

  00000	c2 00 00	 ret	 0
?OnClear@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ PROC ; CGraphicObjectInstance::RegisterBoundingSphere, COMDAT
; _this$ = ecx

; 385  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 386  : 	if (m_CullingHandle)

  00003	8b 86 68 01 00
	00		 mov	 eax, DWORD PTR [esi+360]
  00009	85 c0		 test	 eax, eax
  0000b	74 0c		 je	 SHORT $LN2@RegisterBo

; 387  : 		CCullingManager::Instance().Unregister(m_CullingHandle);

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?Unregister@CCullingManager@@QAEXPAVSpherePack@@@Z ; CCullingManager::Unregister
$LN2@RegisterBo:

; 388  : 
; 389  : 	m_CullingHandle = CCullingManager::Instance().Register(this);

  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?Register@CCullingManager@@QAEPAVSpherePack@@PAVCGraphicObjectInstance@@@Z ; CCullingManager::Register
  00025	89 86 68 01 00
	00		 mov	 DWORD PTR [esi+360], eax
  0002b	5e		 pop	 esi

; 390  : }

  0002c	c3		 ret	 0
?RegisterBoundingSphere@CGraphicObjectInstance@@QAEXXZ ENDP ; CGraphicObjectInstance::RegisterBoundingSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
_radius$1 = -20						; size = 4
_center$2 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ PROC ; CGraphicObjectInstance::UpdateBoundingSphere, COMDAT
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 372  : 	if (m_CullingHandle)

  00013	83 be 68 01 00
	00 00		 cmp	 DWORD PTR [esi+360], 0
  0001a	0f 84 54 01 00
	00		 je	 $LN28@UpdateBoun

; 373  : 	{
; 374  : 		Vector3d center;
; 375  : 		float radius;
; 376  : 		GetBoundingSphere(center,radius);

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	8d 4d ec	 lea	 ecx, DWORD PTR _radius$1[ebp]
  00025	51		 push	 ecx
  00026	8d 4d f0	 lea	 ecx, DWORD PTR _center$2[ebp]
  00029	51		 push	 ecx
  0002a	8b ce		 mov	 ecx, esi
  0002c	ff 50 0c	 call	 DWORD PTR [eax+12]

; 377  : 		if (radius != m_CullingHandle->GetRadius())

  0002f	8b b6 68 01 00
	00		 mov	 esi, DWORD PTR [esi+360]
  00035	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR _radius$1[ebp]
  0003a	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _center$2[ebp]
  0003f	0f 2e 56 10	 ucomiss xmm2, DWORD PTR [esi+16]
  00043	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  00048	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _center$2[ebp+4]
  0004d	9f		 lahf
  0004e	f6 c4 44	 test	 ah, 68			; 00000044H
  00051	0f 8b a8 00 00
	00		 jnp	 $LN3@UpdateBoun
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  00057	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
  0005c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _center$2[ebp+8]
  00061	f3 0f 11 46 0c	 movss	 DWORD PTR [esi+12], xmm0
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h

; 474  : 	if (mParent && !HasSpherePackFlag(SPF_INTEGRATE))

  00066	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00069	85 c9		 test	 ecx, ecx
  0006b	0f 84 03 01 00
	00		 je	 $LN28@UpdateBoun

; 133  : 		if ( mFlags & flag ) return true;

  00071	f6 46 38 20	 test	 BYTE PTR [esi+56], 32	; 00000020H
  00075	0f 85 f9 00 00
	00		 jne	 $LN28@UpdateBoun

; 476  : 		if (radius != GetRadius())

  0007b	0f 2e 56 10	 ucomiss xmm2, DWORD PTR [esi+16]
  0007f	9f		 lahf
  00080	f6 c4 44	 test	 ah, 68			; 00000044H
  00083	7b 34		 jnp	 SHORT $LN20@UpdateBoun
; File C:\Marty 5.5\Src-Client\Client\SphereLib\sphere.h

; 68   : 		mRadius2 = radius*radius;

  00085	0f 28 c2	 movaps	 xmm0, xmm2
  00088	f3 0f 11 56 10	 movss	 DWORD PTR [esi+16], xmm2
  0008d	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00091	f3 0f 11 46 14	 movss	 DWORD PTR [esi+20], xmm0
  00096	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  00099	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  0009e	f3 0f 5c ca	 subss	 xmm1, xmm2

; 242  : 		if ( mBindingDistance <= 0 )

  000a2	0f 2f c1	 comiss	 xmm0, xmm1
  000a5	72 09		 jb	 SHORT $LN19@UpdateBoun

; 243  : 			mBindingDistance = 0;

  000a7	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  000ae	eb 09		 jmp	 SHORT $LN20@UpdateBoun
$LN19@UpdateBoun:

; 244  : 		else
; 245  : 			mBindingDistance*=mBindingDistance;

  000b0	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000b4	f3 0f 11 4e 40	 movss	 DWORD PTR [esi+64], xmm1
$LN20@UpdateBoun:

; 482  : 		mFactory->AddRecompute(mParent);

  000b9	51		 push	 ecx
  000ba	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000bd	e8 00 00 00 00	 call	 ?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddRecompute

; 212  : 	float DistanceSquared(const SpherePack *pack) const { return mCenter.DistanceSq( pack->mCenter );  };

  000c2	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 170  : 		float dx = a.x - x;

  000c5	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 171  : 		float dy = a.y - y;

  000ca	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  000cf	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]
  000d4	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]

; 172  : 		float dz = a.z - z;

  000d9	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  000de	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]

; 173  : 		return dx*dx + dy*dy + dz*dz;

  000e3	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000e7	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000eb	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000ef	f3 0f 58 d1	 addss	 xmm2, xmm1
  000f3	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h

; 486  : 		if (dist >= mBindingDistance)

  000f7	0f 2f 56 40	 comiss	 xmm2, DWORD PTR [esi+64]
  000fb	72 77		 jb	 SHORT $LN28@UpdateBoun
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 378  : 			m_CullingHandle->NewPosRadius(center,radius);

  000fd	eb 65		 jmp	 SHORT $LN51@UpdateBoun
$LN3@UpdateBoun:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 57   : 	{ x=A.x; y=A.y; z=A.z;

  000ff	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _center$2[ebp]
  00104	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
  00109	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _center$2[ebp+8]
  0010e	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _center$2[ebp+4]
  00113	f3 0f 11 46 0c	 movss	 DWORD PTR [esi+12], xmm0
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h

; 452  : 	if (mParent && !HasSpherePackFlag(SPF_INTEGRATE))

  00118	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0011b	85 c0		 test	 eax, eax
  0011d	74 55		 je	 SHORT $LN28@UpdateBoun

; 133  : 		if ( mFlags & flag ) return true;

  0011f	f6 46 38 20	 test	 BYTE PTR [esi+56], 32	; 00000020H
  00123	75 4f		 jne	 SHORT $LN28@UpdateBoun
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 170  : 		float dx = a.x - x;

  00125	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 172  : 		float dz = a.z - z;

  0012a	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0012f	f3 0f 5c ca	 subss	 xmm1, xmm2
  00133	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00138	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _center$2[ebp+8]
  0013d	f3 0f 5c d3	 subss	 xmm2, xmm3

; 173  : 		return dx*dx + dy*dy + dz*dz;

  00141	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00145	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00149	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0014d	f3 0f 58 d1	 addss	 xmm2, xmm1
  00151	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h

; 456  : 		if (dist >= mBindingDistance) // if that exceeds our binding distance...

  00155	0f 2f 56 40	 comiss	 xmm2, DWORD PTR [esi+64]
  00159	72 19		 jb	 SHORT $LN28@UpdateBoun

; 457  : 		{
; 458  : 			// If our parent, is not already marked to be recomputed (rebalance the sphere), then add him to the recomputation fifo.
; 459  : 			mFactory->AddRecompute(mParent);

  0015b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddRecompute
$LN51@UpdateBoun:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 382  : }

  00164	8b ce		 mov	 ecx, esi
  00166	e8 00 00 00 00	 call	 ?Unlink@SpherePack@@QAEXXZ ; SpherePack::Unlink
  0016b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0016e	56		 push	 esi
  0016f	e8 00 00 00 00	 call	 ?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate
$LN28@UpdateBoun:
  00174	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00177	33 cd		 xor	 ecx, ebp
  00179	5e		 pop	 esi
  0017a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ ENDP ; CGraphicObjectInstance::UpdateBoundingSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?OnInitialize@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnInitialize@CGraphicObjectInstance@@UAEXXZ PROC	; CGraphicObjectInstance::OnInitialize, COMDAT
; _this$ = ecx

; 6    : {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 7    : 	ZeroMemory(m_abyPortalID, sizeof(m_abyPortalID));

  00003	66 0f d6 81 60
	01 00 00	 movq	 QWORD PTR [ecx+352], xmm0

; 8    : }

  0000b	c3		 ret	 0
?OnInitialize@CGraphicObjectInstance@@UAEXXZ ENDP	; CGraphicObjectInstance::OnInitialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Initialize@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Initialize, COMDAT
; _this$ = ecx

; 328  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 329  : 	if (m_CullingHandle)

  00003	8b 86 68 01 00
	00		 mov	 eax, DWORD PTR [esi+360]
  00009	85 c0		 test	 eax, eax
  0000b	74 0c		 je	 SHORT $LN2@Initialize

; 330  : 		CCullingManager::Instance().Unregister(m_CullingHandle);

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?Unregister@CCullingManager@@QAEXPAVSpherePack@@@Z ; CCullingManager::Unregister
$LN2@Initialize:

; 362  : 	OnInitialize();

  00019	8b 06		 mov	 eax, DWORD PTR [esi]
  0001b	8b ce		 mov	 ecx, esi
  0001d	c7 86 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+360], 0
  00027	c7 86 78 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+376], 0
  00031	66 c7 46 68 01
	00		 mov	 WORD PTR [esi+104], 1
  00037	c6 86 ac 00 00
	00 00		 mov	 BYTE PTR [esi+172], 0
  0003e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00045	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0004c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00053	c7 46 18 00 00
	80 3f		 mov	 DWORD PTR [esi+24], 1065353216 ; 3f800000H
  0005a	c7 46 14 00 00
	80 3f		 mov	 DWORD PTR [esi+20], 1065353216 ; 3f800000H
  00061	c7 46 10 00 00
	80 3f		 mov	 DWORD PTR [esi+16], 1065353216 ; 3f800000H
  00068	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  0006f	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00076	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0007d	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
  00087	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
  00091	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  0009b	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  000a5	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
  000af	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
  000b9	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  000c3	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  000cd	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  000d4	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  000db	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  000e2	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000e9	c7 86 a8 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+168], 1065353216 ; 3f800000H
  000f3	c7 86 94 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+148], 1065353216 ; 3f800000H
  000fd	c7 86 80 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+128], 1065353216 ; 3f800000H
  00107	c7 46 6c 00 00
	80 3f		 mov	 DWORD PTR [esi+108], 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0010e	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00115	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
  0011c	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00123	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
  0012a	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  00131	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  00138	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  0013f	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00146	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  0014d	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  00154	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  0015b	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00162	c7 46 64 00 00
	80 3f		 mov	 DWORD PTR [esi+100], 1065353216 ; 3f800000H
  00169	c7 46 50 00 00
	80 3f		 mov	 DWORD PTR [esi+80], 1065353216 ; 3f800000H
  00170	c7 46 3c 00 00
	80 3f		 mov	 DWORD PTR [esi+60], 1065353216 ; 3f800000H
  00177	c7 46 28 00 00
	80 3f		 mov	 DWORD PTR [esi+40], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 362  : 	OnInitialize();

  0017e	5e		 pop	 esi
  0017f	ff 60 08	 jmp	 DWORD PTR [eax+8]
?Initialize@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetPortal@CGraphicObjectInstance@@QAEHK@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?GetPortal@CGraphicObjectInstance@@QAEHK@Z PROC		; CGraphicObjectInstance::GetPortal, COMDAT
; _this$ = ecx

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 514  : 	if (dwIndex >= PORTAL_ID_MAX_NUM)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00006	83 f8 08	 cmp	 eax, 8
  00009	72 06		 jb	 SHORT $LN2@GetPortal

; 515  : 	{
; 516  : 		assert(dwIndex < PORTAL_ID_MAX_NUM);
; 517  : 		return 0;

  0000b	33 c0		 xor	 eax, eax

; 521  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
$LN2@GetPortal:

; 518  : 	}
; 519  : 
; 520  : 	return m_abyPortalID[dwIndex];

  00011	0f b6 84 08 60
	01 00 00	 movzx	 eax, BYTE PTR [eax+ecx+352]

; 521  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?GetPortal@CGraphicObjectInstance@@QAEHK@Z ENDP		; CGraphicObjectInstance::GetPortal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetPortal@CGraphicObjectInstance@@QAEXKH@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_iID$ = 12						; size = 4
?SetPortal@CGraphicObjectInstance@@QAEXKH@Z PROC	; CGraphicObjectInstance::SetPortal, COMDAT
; _this$ = ecx

; 502  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 503  : 	if (dwIndex >= PORTAL_ID_MAX_NUM)

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  00006	83 fa 08	 cmp	 edx, 8
  00009	73 0a		 jae	 SHORT $LN1@SetPortal

; 504  : 	{
; 505  : 		assert(dwIndex < PORTAL_ID_MAX_NUM);
; 506  : 		return;
; 507  : 	}
; 508  : 
; 509  : 	m_abyPortalID[dwIndex] = iID;

  0000b	8a 45 0c	 mov	 al, BYTE PTR _iID$[ebp]
  0000e	88 84 0a 60 01
	00 00		 mov	 BYTE PTR [edx+ecx+352], al
$LN1@SetPortal:

; 510  : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?SetPortal@CGraphicObjectInstance@@QAEXKH@Z ENDP	; CGraphicObjectInstance::SetPortal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ
_TEXT	SEGMENT
?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ PROC ; CGraphicObjectInstance::GetTransform, COMDAT
; _this$ = ecx

; 169  : 	return m_worldMatrix;

  00000	8d 41 6c	 lea	 eax, DWORD PTR [ecx+108]

; 170  : }

  00003	c3		 ret	 0
?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ ENDP ; CGraphicObjectInstance::GetTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetWTBBoxVertex@CGraphicObjectInstance@@QAEAAUD3DXVECTOR4@@ABE@Z
_TEXT	SEGMENT
_c_rucNumTBBoxVertex$ = 8				; size = 4
?GetWTBBoxVertex@CGraphicObjectInstance@@QAEAAUD3DXVECTOR4@@ABE@Z PROC ; CGraphicObjectInstance::GetWTBBoxVertex, COMDAT
; _this$ = ecx

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 273  : 	return m_v4TBBox[c_rucNumTBBoxVertex];

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rucNumTBBoxVertex$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00009	83 c0 0b	 add	 eax, 11			; 0000000bH
  0000c	c1 e0 04	 shl	 eax, 4
  0000f	03 c1		 add	 eax, ecx

; 274  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?GetWTBBoxVertex@CGraphicObjectInstance@@QAEAAUD3DXVECTOR4@@ABE@Z ENDP ; CGraphicObjectInstance::GetWTBBoxVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?isIntersect@CGraphicObjectInstance@@QAE_NABVCRay@@PAM11@Z
_TEXT	SEGMENT
_pu$GSCopy$1$ = -208					; size = 4
_pv$GSCopy$1$ = -204					; size = 4
_pt$GSCopy$1$ = -200					; size = 4
_v3Start$ = -196					; size = 12
_v3Dir$ = -184						; size = 12
_posVertices$ = -172					; size = 96
_Indices$ = -76						; size = 72
__$ArrayPad$ = -4					; size = 4
_c_rRay$ = 8						; size = 4
_pu$ = 12						; size = 4
_pv$ = 16						; size = 4
_pt$ = 20						; size = 4
?isIntersect@CGraphicObjectInstance@@QAE_NABVCRay@@PAM11@Z PROC ; CGraphicObjectInstance::isIntersect, COMDAT
; _this$ = ecx

; 277  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 55 08	 mov	 edx, DWORD PTR _c_rRay$[ebp]
  00016	8b 45 10	 mov	 eax, DWORD PTR _pv$[ebp]
  00019	53		 push	 ebx
  0001a	8b d9		 mov	 ebx, ecx
  0001c	89 85 34 ff ff
	ff		 mov	 DWORD PTR _pv$GSCopy$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 36   : 			*pv3Start = m_v3Start;

  00022	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 277  : {

  00026	8b 45 14	 mov	 eax, DWORD PTR _pt$[ebp]
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _pu$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0002c	f3 0f 10 a3 30
	01 00 00	 movss	 xmm4, DWORD PTR [ebx+304]

; 181  :     y = fy;

  00034	f3 0f 10 93 34
	01 00 00	 movss	 xmm2, DWORD PTR [ebx+308]

; 180  :     x = fx;

  0003c	f3 0f 10 9b 3c
	01 00 00	 movss	 xmm3, DWORD PTR [ebx+316]

; 181  :     y = fy;

  00044	f3 0f 10 8b 40
	01 00 00	 movss	 xmm1, DWORD PTR [ebx+320]
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 36   : 			*pv3Start = m_v3Start;

  0004c	66 0f d6 85 3c
	ff ff ff	 movq	 QWORD PTR _v3Start$[ebp], xmm0

; 41   : 			*pv3Dir = m_v3Direction;

  00054	f3 0f 7e 42 18	 movq	 xmm0, QWORD PTR [edx+24]
  00059	66 0f d6 85 48
	ff ff ff	 movq	 QWORD PTR _v3Dir$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00061	f3 0f 10 83 38
	01 00 00	 movss	 xmm0, DWORD PTR [ebx+312]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 277  : {

  00069	89 85 38 ff ff
	ff		 mov	 DWORD PTR _pt$GSCopy$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 36   : 			*pv3Start = m_v3Start;

  0006f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 277  : {

  00072	56		 push	 esi

; 285  : 	posVertices[0] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  00073	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _posVertices$[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0007b	8d 75 b6	 lea	 esi, DWORD PTR _Indices$[ebp+2]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 286  : 	posVertices[1] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  0007e	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _posVertices$[ebp+20], xmm0

; 287  : 	posVertices[2] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  00086	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _posVertices$[ebp+32], xmm0

; 288  : 	posVertices[3] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  0008e	f3 0f 11 45 80	 movss	 DWORD PTR _posVertices$[ebp+44], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00093	f3 0f 10 83 44
	01 00 00	 movss	 xmm0, DWORD PTR [ebx+324]
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 36   : 			*pv3Start = m_v3Start;

  0009b	89 85 44 ff ff
	ff		 mov	 DWORD PTR _v3Start$[ebp+8], eax

; 41   : 			*pv3Dir = m_v3Direction;

  000a1	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 277  : {

  000a4	57		 push	 edi
  000a5	89 8d 30 ff ff
	ff		 mov	 DWORD PTR _pu$GSCopy$1$[ebp], ecx

; 300  : 
; 301  : 	int triCount = 12;

  000ab	bf 0c 00 00 00	 mov	 edi, 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\Client\EterLib\Ray.h

; 41   : 			*pv3Dir = m_v3Direction;

  000b0	89 85 50 ff ff
	ff		 mov	 DWORD PTR _v3Dir$[ebp+8], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 285  : 	posVertices[0] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  000b6	f3 0f 11 a5 54
	ff ff ff	 movss	 DWORD PTR _posVertices$[ebp], xmm4
  000be	f3 0f 11 95 58
	ff ff ff	 movss	 DWORD PTR _posVertices$[ebp+4], xmm2

; 286  : 	posVertices[1] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMin.y, m_v3TBBoxMin.z);

  000c6	f3 0f 11 9d 60
	ff ff ff	 movss	 DWORD PTR _posVertices$[ebp+12], xmm3
  000ce	f3 0f 11 95 64
	ff ff ff	 movss	 DWORD PTR _posVertices$[ebp+16], xmm2

; 287  : 	posVertices[2] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  000d6	f3 0f 11 a5 6c
	ff ff ff	 movss	 DWORD PTR _posVertices$[ebp+24], xmm4
  000de	f3 0f 11 8d 70
	ff ff ff	 movss	 DWORD PTR _posVertices$[ebp+28], xmm1

; 288  : 	posVertices[3] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMax.y, m_v3TBBoxMin.z);

  000e6	f3 0f 11 9d 78
	ff ff ff	 movss	 DWORD PTR _posVertices$[ebp+36], xmm3
  000ee	f3 0f 11 8d 7c
	ff ff ff	 movss	 DWORD PTR _posVertices$[ebp+40], xmm1

; 289  : 	posVertices[4] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMin.y, m_v3TBBoxMax.z);

  000f6	f3 0f 11 65 84	 movss	 DWORD PTR _posVertices$[ebp+48], xmm4
  000fb	f3 0f 11 55 88	 movss	 DWORD PTR _posVertices$[ebp+52], xmm2
  00100	f3 0f 11 45 8c	 movss	 DWORD PTR _posVertices$[ebp+56], xmm0

; 290  : 	posVertices[5] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMin.y, m_v3TBBoxMax.z);

  00105	f3 0f 11 5d 90	 movss	 DWORD PTR _posVertices$[ebp+60], xmm3
  0010a	f3 0f 11 55 94	 movss	 DWORD PTR _posVertices$[ebp+64], xmm2
  0010f	f3 0f 11 45 98	 movss	 DWORD PTR _posVertices$[ebp+68], xmm0

; 291  : 	posVertices[6] = TPosition(m_v3TBBoxMin.x, m_v3TBBoxMax.y, m_v3TBBoxMax.z);

  00114	f3 0f 11 65 9c	 movss	 DWORD PTR _posVertices$[ebp+72], xmm4
  00119	f3 0f 11 4d a0	 movss	 DWORD PTR _posVertices$[ebp+76], xmm1
  0011e	f3 0f 11 45 a4	 movss	 DWORD PTR _posVertices$[ebp+80], xmm0

; 292  : 	posVertices[7] = TPosition(m_v3TBBoxMax.x, m_v3TBBoxMax.y, m_v3TBBoxMax.z);

  00123	f3 0f 11 5d a8	 movss	 DWORD PTR _posVertices$[ebp+84], xmm3
  00128	f3 0f 11 4d ac	 movss	 DWORD PTR _posVertices$[ebp+88], xmm1
  0012d	f3 0f 11 45 b0	 movss	 DWORD PTR _posVertices$[ebp+92], xmm0

; 293  : 
; 294  : 	TIndex Indices[36] = {0, 1, 2, 1, 3, 2,

  00132	c7 45 b4 00 00
	01 00		 mov	 DWORD PTR _Indices$[ebp], 65536 ; 00010000H
  00139	c7 45 b8 02 00
	01 00		 mov	 DWORD PTR _Indices$[ebp+4], 65538 ; 00010002H
  00140	c7 45 bc 03 00
	02 00		 mov	 DWORD PTR _Indices$[ebp+8], 131075 ; 00020003H

; 295  : 						  2, 0, 6, 0, 4, 6,

  00147	c7 45 c0 02 00
	00 00		 mov	 DWORD PTR _Indices$[ebp+12], 2
  0014e	c7 45 c4 06 00
	00 00		 mov	 DWORD PTR _Indices$[ebp+16], 6
  00155	c7 45 c8 04 00
	06 00		 mov	 DWORD PTR _Indices$[ebp+20], 393220 ; 00060004H

; 296  : 						  0, 1, 4, 1, 5, 4,

  0015c	c7 45 cc 00 00
	01 00		 mov	 DWORD PTR _Indices$[ebp+24], 65536 ; 00010000H
  00163	c7 45 d0 04 00
	01 00		 mov	 DWORD PTR _Indices$[ebp+28], 65540 ; 00010004H
  0016a	c7 45 d4 05 00
	04 00		 mov	 DWORD PTR _Indices$[ebp+32], 262149 ; 00040005H

; 297  : 						  1, 3, 5, 3, 7, 5,

  00171	c7 45 d8 01 00
	03 00		 mov	 DWORD PTR _Indices$[ebp+36], 196609 ; 00030001H
  00178	c7 45 dc 05 00
	03 00		 mov	 DWORD PTR _Indices$[ebp+40], 196613 ; 00030005H
  0017f	c7 45 e0 07 00
	05 00		 mov	 DWORD PTR _Indices$[ebp+44], 327687 ; 00050007H

; 298  : 						  3, 2, 7, 2, 6, 7,

  00186	c7 45 e4 03 00
	02 00		 mov	 DWORD PTR _Indices$[ebp+48], 131075 ; 00020003H
  0018d	c7 45 e8 07 00
	02 00		 mov	 DWORD PTR _Indices$[ebp+52], 131079 ; 00020007H
  00194	c7 45 ec 06 00
	07 00		 mov	 DWORD PTR _Indices$[ebp+56], 458758 ; 00070006H

; 299  : 						  4, 5, 6, 5, 7, 6};

  0019b	c7 45 f0 04 00
	05 00		 mov	 DWORD PTR _Indices$[ebp+60], 327684 ; 00050004H
  001a2	c7 45 f4 06 00
	05 00		 mov	 DWORD PTR _Indices$[ebp+64], 327686 ; 00050006H
  001a9	c7 45 f8 07 00
	06 00		 mov	 DWORD PTR _Indices$[ebp+68], 393223 ; 00060007H
$LL2@isIntersec:

; 302  : 	WORD* pcurIdx = (WORD*)Indices;
; 303  : 
; 304  : 	while (triCount--)
; 305  : 	{
; 306  : 		if (IntersectTriangle(v3Start, v3Dir,

  001b0	ff b5 38 ff ff
	ff		 push	 DWORD PTR _pt$GSCopy$1$[ebp]
  001b6	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  001ba	4f		 dec	 edi
  001bb	ff b5 34 ff ff
	ff		 push	 DWORD PTR _pv$GSCopy$1$[ebp]
  001c1	51		 push	 ecx
  001c2	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  001c5	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _posVertices$[ebp]
  001cb	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  001ce	50		 push	 eax
  001cf	0f b7 06	 movzx	 eax, WORD PTR [esi]
  001d2	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  001d5	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  001d8	50		 push	 eax
  001d9	0f b7 46 fe	 movzx	 eax, WORD PTR [esi-2]
  001dd	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  001e0	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  001e3	8b cb		 mov	 ecx, ebx
  001e5	50		 push	 eax
  001e6	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _v3Dir$[ebp]
  001ec	50		 push	 eax
  001ed	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _v3Start$[ebp]
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 ?IntersectTriangle@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@0000PAM11@Z ; CGraphicCollisionObject::IntersectTriangle
  001f9	84 c0		 test	 al, al
  001fb	75 20		 jne	 SHORT $LN34@isIntersec

; 307  : 			posVertices[pcurIdx[0]],
; 308  : 			posVertices[pcurIdx[1]],
; 309  : 			posVertices[pcurIdx[2]],
; 310  : 			pu, pv, pt))
; 311  : 		{
; 312  : 			return true;
; 313  : 		}
; 314  : 
; 315  : 		pcurIdx += 3;

  001fd	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _pu$GSCopy$1$[ebp]
  00203	83 c6 06	 add	 esi, 6
  00206	85 ff		 test	 edi, edi
  00208	75 a6		 jne	 SHORT $LL2@isIntersec

; 316  : 	}
; 317  : 
; 318  : 	return false;
; 319  : }

  0020a	5f		 pop	 edi
  0020b	5e		 pop	 esi
  0020c	5b		 pop	 ebx
  0020d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00210	33 cd		 xor	 ecx, ebp
  00212	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c2 10 00	 ret	 16			; 00000010H
$LN34@isIntersec:
  0021d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00220	b0 01		 mov	 al, 1
  00222	5f		 pop	 edi
  00223	5e		 pop	 esi
  00224	33 cd		 xor	 ecx, ebp
  00226	5b		 pop	 ebx
  00227	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022c	8b e5		 mov	 esp, ebp
  0022e	5d		 pop	 ebp
  0022f	c2 10 00	 ret	 16			; 00000010H
?isIntersect@CGraphicObjectInstance@@QAE_NABVCRay@@PAM11@Z ENDP ; CGraphicObjectInstance::isIntersect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?ReleaseAlwaysHidden@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?ReleaseAlwaysHidden@CGraphicObjectInstance@@QAEXXZ PROC ; CGraphicObjectInstance::ReleaseAlwaysHidden, COMDAT
; _this$ = ecx

; 263  : 	m_isAlwaysHidden = false;

  00000	c6 41 69 00	 mov	 BYTE PTR [ecx+105], 0

; 264  : }

  00004	c3		 ret	 0
?ReleaseAlwaysHidden@CGraphicObjectInstance@@QAEXXZ ENDP ; CGraphicObjectInstance::ReleaseAlwaysHidden
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?ApplyAlwaysHidden@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?ApplyAlwaysHidden@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::ApplyAlwaysHidden, COMDAT
; _this$ = ecx

; 258  : 	m_isAlwaysHidden = true;

  00000	c6 41 69 01	 mov	 BYTE PTR [ecx+105], 1

; 259  : }

  00004	c3		 ret	 0
?ApplyAlwaysHidden@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::ApplyAlwaysHidden
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?isShow@CGraphicObjectInstance@@QAE_NXZ
_TEXT	SEGMENT
?isShow@CGraphicObjectInstance@@QAE_NXZ PROC		; CGraphicObjectInstance::isShow, COMDAT
; _this$ = ecx

; 248  : #ifdef __ENABLE_STEALTH_FIX__
; 249  : 	return m_isVisible && !m_isAlwaysHidden;

  00000	80 79 68 00	 cmp	 BYTE PTR [ecx+104], 0
  00004	74 09		 je	 SHORT $LN3@isShow
  00006	80 79 69 00	 cmp	 BYTE PTR [ecx+105], 0
  0000a	75 03		 jne	 SHORT $LN3@isShow
  0000c	b0 01		 mov	 al, 1

; 250  : #else
; 251  : 	return m_isVisible;
; 252  : #endif
; 253  : }

  0000e	c3		 ret	 0
$LN3@isShow:

; 248  : #ifdef __ENABLE_STEALTH_FIX__
; 249  : 	return m_isVisible && !m_isAlwaysHidden;

  0000f	32 c0		 xor	 al, al

; 250  : #else
; 251  : 	return m_isVisible;
; 252  : #endif
; 253  : }

  00011	c3		 ret	 0
?isShow@CGraphicObjectInstance@@QAE_NXZ ENDP		; CGraphicObjectInstance::isShow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Hide@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Hide@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Hide, COMDAT
; _this$ = ecx

; 243  : 	m_isVisible = false;

  00000	c6 41 68 00	 mov	 BYTE PTR [ecx+104], 0

; 244  : }

  00004	c3		 ret	 0
?Hide@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Hide
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Show@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Show@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Show, COMDAT
; _this$ = ecx

; 238  : 	m_isVisible = true;

  00000	c6 41 68 01	 mov	 BYTE PTR [ecx+104], 1

; 239  : }

  00004	c3		 ret	 0
?Show@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Show
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Transform@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Transform@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Transform, COMDAT
; _this$ = ecx

; 111  : #ifdef ENABLE_OBJ_SCALLING
; 112  : 	D3DXMATRIX tmp1;
; 113  : 	D3DXMatrixMultiply(&tmp1, &m_PositionMatrix, &m_mRotation);
; 114  : 
; 115  : 	m_worldMatrix = tmp1;
; 116  : 	m_worldMatrix._41 += m_v3Position.x;
; 117  : 	m_worldMatrix._42 += m_v3Position.y;
; 118  : 	m_worldMatrix._43 += m_v3Position.z;
; 119  : 	D3DXMatrixMultiply(&tmp1, &m_PositionMatrix, &m_ScaleMatrix);
; 120  : 
; 121  : 	D3DXMATRIX tmp2;
; 122  : 	D3DXMatrixMultiply(&tmp2, &tmp1, &m_mRotation);
; 123  : 
; 124  : 	m_TransformMatrix = tmp2;
; 125  : 	m_TransformMatrix._41 = m_v3ScalePosition.x + m_v3Position.x + m_TransformMatrix._41;
; 126  : 	m_TransformMatrix._42 = m_v3ScalePosition.y + m_v3Position.y + m_TransformMatrix._42;
; 127  : 	m_TransformMatrix._43 = m_v3ScalePosition.z + m_v3Position.z + m_TransformMatrix._43;
; 128  : #else
; 129  : 	m_worldMatrix = m_mRotation;

  00000	0f 10 41 28	 movups	 xmm0, XMMWORD PTR [ecx+40]
  00004	0f 11 41 6c	 movups	 XMMWORD PTR [ecx+108], xmm0
  00008	0f 10 41 38	 movups	 xmm0, XMMWORD PTR [ecx+56]
  0000c	0f 11 41 7c	 movups	 XMMWORD PTR [ecx+124], xmm0
  00010	0f 10 41 48	 movups	 xmm0, XMMWORD PTR [ecx+72]
  00014	0f 11 81 8c 00
	00 00		 movups	 XMMWORD PTR [ecx+140], xmm0
  0001b	0f 10 41 58	 movups	 xmm0, XMMWORD PTR [ecx+88]
  0001f	0f 11 81 9c 00
	00 00		 movups	 XMMWORD PTR [ecx+156], xmm0

; 130  : 
; 131  : 	m_worldMatrix._41	+= m_v3Position.x;

  00026	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002b	f3 0f 58 81 9c
	00 00 00	 addss	 xmm0, DWORD PTR [ecx+156]
  00033	f3 0f 11 81 9c
	00 00 00	 movss	 DWORD PTR [ecx+156], xmm0

; 132  : 	m_worldMatrix._42	+= m_v3Position.y;

  0003b	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00040	f3 0f 58 81 a0
	00 00 00	 addss	 xmm0, DWORD PTR [ecx+160]
  00048	f3 0f 11 81 a0
	00 00 00	 movss	 DWORD PTR [ecx+160], xmm0

; 133  : 	m_worldMatrix._43	+= m_v3Position.z;

  00050	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00055	f3 0f 58 81 a4
	00 00 00	 addss	 xmm0, DWORD PTR [ecx+164]
  0005d	f3 0f 11 81 a4
	00 00 00	 movss	 DWORD PTR [ecx+164], xmm0

; 134  : #endif
; 135  : }

  00065	c3		 ret	 0
?Transform@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Transform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Deform@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Deform@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Deform, COMDAT
; _this$ = ecx

; 101  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 102  : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN1@Deform

; 103  : 		return;
; 104  : 
; 105  : 	OnDeform();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 2c	 jmp	 DWORD PTR [eax+44]
$LN1@Deform:
  00014	5e		 pop	 esi

; 106  : }

  00015	c3		 ret	 0
?Deform@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Deform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?RenderPCBlocker@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?RenderPCBlocker@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::RenderPCBlocker, COMDAT
; _this$ = ecx

; 86   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 87   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN1@RenderPCBl

; 88   : 		return;
; 89   : 
; 90   : 	OnRenderPCBlocker();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 20	 jmp	 DWORD PTR [eax+32]
$LN1@RenderPCBl:
  00014	5e		 pop	 esi

; 91   : }

  00015	c3		 ret	 0
?RenderPCBlocker@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::RenderPCBlocker
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?RenderShadow@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?RenderShadow@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::RenderShadow, COMDAT
; _this$ = ecx

; 78   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 79   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN1@RenderShad

; 80   : 		return;
; 81   : 
; 82   : 	OnRenderShadow();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 1c	 jmp	 DWORD PTR [eax+28]
$LN1@RenderShad:
  00014	5e		 pop	 esi

; 83   : }

  00015	c3		 ret	 0
?RenderShadow@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::RenderShadow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?RenderToShadowMap@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?RenderToShadowMap@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::RenderToShadowMap, COMDAT
; _this$ = ecx

; 70   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 71   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN1@RenderToSh

; 72   : 		return;
; 73   : 
; 74   : 	OnRenderToShadowMap();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 18	 jmp	 DWORD PTR [eax+24]
$LN1@RenderToSh:
  00014	5e		 pop	 esi

; 75   : }

  00015	c3		 ret	 0
?RenderToShadowMap@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::RenderToShadowMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?BlendRender@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?BlendRender@CGraphicObjectInstance@@QAEXXZ PROC	; CGraphicObjectInstance::BlendRender, COMDAT
; _this$ = ecx

; 62   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 63   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	74 08		 je	 SHORT $LN1@BlendRende

; 64   : 		return;
; 65   : 
; 66   : 	OnBlendRender();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 14	 jmp	 DWORD PTR [eax+20]
$LN1@BlendRende:
  00014	5e		 pop	 esi

; 67   : }

  00015	c3		 ret	 0
?BlendRender@CGraphicObjectInstance@@QAEXXZ ENDP	; CGraphicObjectInstance::BlendRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Render@CGraphicObjectInstance@@QAE_NXZ
_TEXT	SEGMENT
?Render@CGraphicObjectInstance@@QAE_NXZ PROC		; CGraphicObjectInstance::Render, COMDAT
; _this$ = ecx

; 41   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 42   : 	/*
; 43   : 	if (m_CullingHandle)
; 44   : 	{
; 45   : 		SpherePack * ps = m_CullingHandle->GetParent();
; 46   : 		CScreen s;
; 47   : 		s.SetColorOperation();
; 48   : 		//s.SetDiffuseColor(1,isShow()?1:0,0);
; 49   : 		//s.RenderCircle2d(m_CullingHandle->GetCenter().x,m_CullingHandle->GetCenter().y,m_CullingHandle->GetCenter().z,m_CullingHandle->GetRadius());
; 50   : 		s.SetDiffuseColor(1,isShow()?1:0,ps->HasSpherePackFlag(SPF_PARTIAL)?1:0);
; 51   : 		s.RenderCircle2d(ps->GetCenter().x,ps->GetCenter().y,ps->GetCenter().z,ps->GetRadius());
; 52   : 	}
; 53   : 	//*/
; 54   : 	if (!isShow())

  00003	e8 00 00 00 00	 call	 ?isShow@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::isShow
  00008	84 c0		 test	 al, al
  0000a	75 02		 jne	 SHORT $LN2@Render
  0000c	5e		 pop	 esi

; 59   : }

  0000d	c3		 ret	 0
$LN2@Render:

; 55   : 		return false;
; 56   : 
; 57   : 	OnRender();

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	8b ce		 mov	 ecx, esi
  00012	ff 50 10	 call	 DWORD PTR [eax+16]

; 58   : 	return true;

  00015	b0 01		 mov	 al, 1
  00017	5e		 pop	 esi

; 59   : }

  00018	c3		 ret	 0
?Render@CGraphicObjectInstance@@QAE_NXZ ENDP		; CGraphicObjectInstance::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Update@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Update@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Update, COMDAT
; _this$ = ecx

; 94   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 95   : 	OnUpdate();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 50 28	 call	 DWORD PTR [eax+40]

; 96   : 
; 97   : 	UpdateBoundingSphere();

  00008	8b ce		 mov	 ecx, esi
  0000a	5e		 pop	 esi
  0000b	e9 00 00 00 00	 jmp	 ?UpdateBoundingSphere@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::UpdateBoundingSphere
?Update@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?Clear@CGraphicObjectInstance@@QAEXXZ
_TEXT	SEGMENT
?Clear@CGraphicObjectInstance@@QAEXXZ PROC		; CGraphicObjectInstance::Clear, COMDAT
; _this$ = ecx

; 11   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 12   : 	if (m_CullingHandle)

  00003	8b 86 68 01 00
	00		 mov	 eax, DWORD PTR [esi+360]
  00009	85 c0		 test	 eax, eax
  0000b	74 16		 je	 SHORT $LN2@Clear

; 13   : 	{
; 14   : 		CCullingManager::Instance().Unregister(m_CullingHandle);

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCullingManager@@@@0PAVCCullingManager@@A ; CSingleton<CCullingManager>::ms_singleton
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?Unregister@CCullingManager@@QAEXPAVSpherePack@@@Z ; CCullingManager::Unregister

; 15   : 		m_CullingHandle = NULL;

  00019	c7 86 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+360], 0
$LN2@Clear:

; 16   : 	}
; 17   : 
; 18   : 	ClearHeightInstance();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?ClearHeightInstance@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ClearHeightInstance
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0002a	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
  00034	0f 57 c0	 xorps	 xmm0, xmm0
  00037	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 37   : 	OnClear();

  00041	8b ce		 mov	 ecx, esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00043	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  0004d	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  00057	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
  00061	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
  0006b	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  00075	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  0007f	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  00086	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  0008d	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  00094	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0009b	c7 86 a8 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+168], 1065353216 ; 3f800000H
  000a5	c7 86 94 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+148], 1065353216 ; 3f800000H
  000af	c7 86 80 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+128], 1065353216 ; 3f800000H
  000b9	c7 46 6c 00 00
	80 3f		 mov	 DWORD PTR [esi+108], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 20   : 	m_isVisible = TRUE;

  000c0	c6 46 68 01	 mov	 BYTE PTR [esi+104], 1

; 21   : 
; 22   : 	m_v3Position.x = m_v3Position.y = m_v3Position.z = 0.0f;

  000c4	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000cb	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000d2	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 23   : 	m_v3Scale.x = m_v3Scale.y = m_v3Scale.z = 0.0f;

  000d9	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  000e0	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  000e7	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 24   : 	//m_fRotation = 0.0f;
; 25   : 	m_fYaw = m_fPitch = m_fRoll = 0.0f;

  000ee	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  000f5	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  000fc	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 26   : 	D3DXMatrixIdentity(&m_worldMatrix);
; 27   : 
; 28   : #ifdef ENABLE_OBJ_SCALLING
; 29   : 	m_v3ScalePosition.x = m_v3ScalePosition.y = m_v3ScalePosition.z = 0.0f;
; 30   : 	D3DXMatrixIdentity(&m_ScaleMatrix);
; 31   : 	D3DXMatrixIdentity(&m_PositionMatrix);
; 32   : 	D3DXMatrixIdentity(&m_TransformMatrix);
; 33   : #endif
; 34   : 
; 35   : 	ZeroMemory(m_abyPortalID, sizeof(m_abyPortalID));

  00103	66 0f d6 86 60
	01 00 00	 movq	 QWORD PTR [esi+352], xmm0

; 37   : 	OnClear();

  0010b	8b 06		 mov	 eax, DWORD PTR [esi]
  0010d	5e		 pop	 esi
  0010e	ff 60 24	 jmp	 DWORD PTR [eax+36]
?Clear@CGraphicObjectInstance@@QAEXXZ ENDP		; CGraphicObjectInstance::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetRotationMatrix@CGraphicObjectInstance@@QAEXABUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
?SetRotationMatrix@CGraphicObjectInstance@@QAEXABUD3DXMATRIX@@@Z PROC ; CGraphicObjectInstance::SetRotationMatrix, COMDAT
; _this$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 179  : 	m_mRotation = m;

  00003	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00006	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00009	0f 11 41 28	 movups	 XMMWORD PTR [ecx+40], xmm0
  0000d	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00011	0f 11 41 38	 movups	 XMMWORD PTR [ecx+56], xmm0
  00015	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  00019	0f 11 41 48	 movups	 XMMWORD PTR [ecx+72], xmm0
  0001d	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]
  00021	0f 11 41 58	 movups	 XMMWORD PTR [ecx+88], xmm0

; 180  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?SetRotationMatrix@CGraphicObjectInstance@@QAEXABUD3DXMATRIX@@@Z ENDP ; CGraphicObjectInstance::SetRotationMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z
_TEXT	SEGMENT
_q$ = 8							; size = 4
?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z PROC ; CGraphicObjectInstance::SetRotationQuaternion, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 174  : 	D3DXMatrixRotationQuaternion(&m_mRotation, &q);

  00003	ff 75 08	 push	 DWORD PTR _q$[ebp]
  00006	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8

; 175  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z ENDP ; CGraphicObjectInstance::SetRotationQuaternion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z
_TEXT	SEGMENT
_fYaw$ = 8						; size = 4
_fPitch$ = 12						; size = 4
_fRoll$ = 16						; size = 4
?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z PROC	; CGraphicObjectInstance::SetRotation, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 193  : 	//m_fRotation = fRotation;
; 194  : 	m_fYaw = fYaw;
; 195  : 	m_fPitch = fPitch;
; 196  : 	m_fRoll = fRoll;

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fRoll$[ebp]

; 197  : 
; 198  : 	D3DXMatrixRotationYawPitchRoll(&m_mRotation, D3DXToRadian(fYaw), D3DXToRadian(fPitch), D3DXToRadian(fRoll));

  00008	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  0000b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3c8efa35
  00013	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00016	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _fPitch$[ebp]
  0001b	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fYaw$[ebp]
  00020	f3 0f 11 41 24	 movss	 DWORD PTR [ecx+36], xmm0
  00025	f3 0f 11 51 20	 movss	 DWORD PTR [ecx+32], xmm2
  0002a	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0002e	f3 0f 11 59 1c	 movss	 DWORD PTR [ecx+28], xmm3
  00033	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00037	f3 0f 59 d9	 mulss	 xmm3, xmm1
  0003b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00041	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  00047	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _D3DXMatrixRotationYawPitchRoll@16

; 199  : }

  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z ENDP	; CGraphicObjectInstance::SetRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetRotation@CGraphicObjectInstance@@QAEXM@Z
_TEXT	SEGMENT
_fRotation$ = 8						; size = 4
?SetRotation@CGraphicObjectInstance@@QAEXM@Z PROC	; CGraphicObjectInstance::SetRotation, COMDAT
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 184  : 	m_fYaw = 0;
; 185  : 	m_fPitch = 0;
; 186  : 	m_fRoll = fRotation;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRotation$[ebp]

; 187  : 
; 188  : 	D3DXMatrixRotationZ(&m_mRotation, D3DXToRadian(fRotation));

  00008	8d 41 28	 lea	 eax, DWORD PTR [ecx+40]
  0000b	f3 0f 11 41 24	 movss	 DWORD PTR [ecx+36], xmm0
  00010	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00018	51		 push	 ecx
  00019	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00020	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00027	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _D3DXMatrixRotationZ@8

; 189  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?SetRotation@CGraphicObjectInstance@@QAEXM@Z ENDP	; CGraphicObjectInstance::SetRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetScale@CGraphicObjectInstance@@QAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetScale@CGraphicObjectInstance@@QAEXMMM@Z PROC	; CGraphicObjectInstance::SetScale, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  : 	m_v3Scale.x = x;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00008	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 227  : 	m_v3Scale.y = y;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00012	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 228  : 	m_v3Scale.z = z;

  00017	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  0001c	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0

; 229  : 
; 230  : #ifdef ENABLE_OBJ_SCALLING
; 231  : 	if (bScaleNow)
; 232  : 		D3DXMatrixScaling(&m_ScaleMatrix, m_v3Scale.x, m_v3Scale.y, m_v3Scale.z);
; 233  : #endif
; 234  : }

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
?SetScale@CGraphicObjectInstance@@QAEXMMM@Z ENDP	; CGraphicObjectInstance::SetScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_newposition$ = 8					; size = 4
?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z PROC ; CGraphicObjectInstance::SetPosition, COMDAT
; _this$ = ecx

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 210  : 	m_v3Position = newposition;

  00003	8b 45 08	 mov	 eax, DWORD PTR _newposition$[ebp]
  00006	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0000a	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  0000f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00012	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 211  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CGraphicObjectInstance::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z PROC	; CGraphicObjectInstance::SetPosition, COMDAT
; _this$ = ecx

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 203  : 	m_v3Position.x = x;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00008	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 204  : 	m_v3Position.y = y;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00012	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 205  : 	m_v3Position.z = z;

  00017	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  0001c	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 206  : }

  00021	5d		 pop	 ebp
  00022	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ENDP	; CGraphicObjectInstance::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetRoll@CGraphicObjectInstance@@QAEMXZ
_TEXT	SEGMENT
?GetRoll@CGraphicObjectInstance@@QAEMXZ PROC		; CGraphicObjectInstance::GetRoll, COMDAT
; _this$ = ecx

; 164  : 	return m_fRoll;

  00000	d9 41 24	 fld	 DWORD PTR [ecx+36]

; 165  : }

  00003	c3		 ret	 0
?GetRoll@CGraphicObjectInstance@@QAEMXZ ENDP		; CGraphicObjectInstance::GetRoll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetPitch@CGraphicObjectInstance@@QAEMXZ
_TEXT	SEGMENT
?GetPitch@CGraphicObjectInstance@@QAEMXZ PROC		; CGraphicObjectInstance::GetPitch, COMDAT
; _this$ = ecx

; 159  : 	return m_fPitch;

  00000	d9 41 20	 fld	 DWORD PTR [ecx+32]

; 160  : }

  00003	c3		 ret	 0
?GetPitch@CGraphicObjectInstance@@QAEMXZ ENDP		; CGraphicObjectInstance::GetPitch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetYaw@CGraphicObjectInstance@@QAEMXZ
_TEXT	SEGMENT
?GetYaw@CGraphicObjectInstance@@QAEMXZ PROC		; CGraphicObjectInstance::GetYaw, COMDAT
; _this$ = ecx

; 154  : 	return m_fYaw;

  00000	d9 41 1c	 fld	 DWORD PTR [ecx+28]

; 155  : }

  00003	c3		 ret	 0
?GetYaw@CGraphicObjectInstance@@QAEMXZ ENDP		; CGraphicObjectInstance::GetYaw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetRotation@CGraphicObjectInstance@@QAEMXZ
_TEXT	SEGMENT
?GetRotation@CGraphicObjectInstance@@QAEMXZ PROC	; CGraphicObjectInstance::GetRotation, COMDAT
; _this$ = ecx

; 149  : 	return GetRoll();

  00000	e9 00 00 00 00	 jmp	 ?GetRoll@CGraphicObjectInstance@@QAEMXZ ; CGraphicObjectInstance::GetRoll
?GetRotation@CGraphicObjectInstance@@QAEMXZ ENDP	; CGraphicObjectInstance::GetRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetScale@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
?GetScale@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ PROC ; CGraphicObjectInstance::GetScale, COMDAT
; _this$ = ecx

; 144  : 	return m_v3Scale;

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 145  : }

  00003	c3		 ret	 0
?GetScale@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ENDP ; CGraphicObjectInstance::GetScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ PROC ; CGraphicObjectInstance::GetPosition, COMDAT
; _this$ = ecx

; 139  : 	return m_v3Position;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 140  : }

  00003	c3		 ret	 0
?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ENDP ; CGraphicObjectInstance::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ??1CGraphicObjectInstance@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicObjectInstance@@UAE@XZ PROC			; CGraphicObjectInstance::~CGraphicObjectInstance, COMDAT
; _this$ = ecx

; 366  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicObjectInstance@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicObjectInstance@@6B@

; 367  : 	Initialize();

  0002b	e8 00 00 00 00	 call	 ?Initialize@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Initialize
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00030	8b 86 6c 01 00
	00		 mov	 eax, DWORD PTR [esi+364]
  00036	85 c0		 test	 eax, eax
  00038	74 4d		 je	 SHORT $LN8@CGraphicOb

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003a	8b 8e 74 01 00
	00		 mov	 ecx, DWORD PTR [esi+372]
  00040	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00042	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00045	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004b	72 12		 jb	 SHORT $LN27@CGraphicOb

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0004d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00050	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00053	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00055	83 c0 fc	 add	 eax, -4			; fffffffcH
  00058	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005b	77 41		 ja	 SHORT $LN24@CGraphicOb

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0005d	8b c2		 mov	 eax, edx
$LN27@CGraphicOb:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0005f	51		 push	 ecx
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00066	c7 86 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+364], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 86 70 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+368], 0

; 2082 :             _Myend   = nullptr;

  0007d	c7 86 74 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+372], 0
$LN8@CGraphicOb:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 368  : }

  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ??1CGraphicCollisionObject@@UAE@XZ ; CGraphicCollisionObject::~CGraphicCollisionObject
  0008e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00098	59		 pop	 ecx
  00099	5e		 pop	 esi
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
$LN24@CGraphicOb:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN34@CGraphicOb:
  000a3	cc		 int	 3
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicObjectInstance@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicObjectInstance@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicObjectInstance@@UAE@XZ ENDP			; CGraphicObjectInstance::~CGraphicObjectInstance
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp
;	COMDAT ??0CGraphicObjectInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGraphicObjectInstance@@QAE@XZ PROC			; CGraphicObjectInstance::CGraphicObjectInstance, COMDAT
; _this$ = ecx

; 322  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphicObjectInstance@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CGraphicCollisionObject@@QAE@XZ ; CGraphicCollisionObject::CGraphicCollisionObject
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicObjectInstance@@6B@
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0003b	c7 86 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+364], 0
  00045	c7 86 70 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+368], 0
  0004f	c7 86 74 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+372], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpObjectInstance.cpp

; 324  : 	Initialize();

  00059	8b ce		 mov	 ecx, esi
  0005b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005f	c7 86 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+360], 0
  00069	e8 00 00 00 00	 call	 ?Initialize@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Initialize

; 325  : }

  0006e	8b c6		 mov	 eax, esi
  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5e		 pop	 esi
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphicObjectInstance@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicCollisionObject@@UAE@XZ ; CGraphicCollisionObject::~CGraphicCollisionObject
__unwindfunclet$??0CGraphicObjectInstance@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 6c 01 00
	00		 add	 ecx, 364		; 0000016cH
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCBaseCollisionInstance@@V?$allocator@PAVCBaseCollisionInstance@@@std@@@std@@QAE@XZ ; std::vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >::~vector<CBaseCollisionInstance *,std::allocator<CBaseCollisionInstance *> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$??0CGraphicObjectInstance@@QAE@XZ:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphicObjectInstance@@QAE@XZ
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphicObjectInstance@@QAE@XZ ENDP			; CGraphicObjectInstance::CGraphicObjectInstance
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\spherepack.h
;	COMDAT ?Unlink@SpherePack@@QAEXXZ
_TEXT	SEGMENT
?Unlink@SpherePack@@QAEXXZ PROC				; SpherePack::Unlink, COMDAT
; _this$ = ecx

; 147  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out

  00003	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN2@Unlink

; 149  : 		{
; 150  : 			*mFifo1 = 0;

  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 151  : 			mFifo1 = 0;

  00010	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN2@Unlink:

; 152  : 		}
; 153  : 
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out

  00017	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0001a	85 c0		 test	 eax, eax
  0001c	74 0d		 je	 SHORT $LN3@Unlink

; 155  : 		{
; 156  : 			*mFifo2 = 0;

  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 157  : 			mFifo2 = 0;

  00024	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
$LN3@Unlink:

; 158  : 		}
; 159  : 
; 160  : 		if ( mParent ) mParent->LostChild(this);

  0002b	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0002e	85 c9		 test	 ecx, ecx
  00030	74 06		 je	 SHORT $LN6@Unlink
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?LostChild@SpherePack@@QAEXPAV1@@Z ; SpherePack::LostChild
$LN6@Unlink:

; 161  : 
; 162  : 		assert( !mChildren ); // can't unlink guys with children!
; 163  : 
; 164  : 		mParent = 0; // got no father anymore
; 165  : 	}

  00038	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0003f	5e		 pop	 esi
  00040	c3		 ret	 0
?Unlink@SpherePack@@QAEXXZ ENDP				; SpherePack::Unlink
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR4@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR4@@QAE@XZ PROC				; D3DXVECTOR4::D3DXVECTOR4, COMDAT
; _this$ = ecx

; 133  :     D3DXVECTOR4() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR4@@QAE@XZ ENDP				; D3DXVECTOR4::D3DXVECTOR4
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
