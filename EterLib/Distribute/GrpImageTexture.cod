; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\GrpImageTexture.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CGraphicImageTexture@@QAE@XZ			; CGraphicImageTexture::CGraphicImageTexture
PUBLIC	??1CGraphicImageTexture@@UAE@XZ			; CGraphicImageTexture::~CGraphicImageTexture
PUBLIC	?Destroy@CGraphicImageTexture@@QAEXXZ		; CGraphicImageTexture::Destroy
PUBLIC	?Create@CGraphicImageTexture@@QAE_NIIW4_D3DFORMAT@@K@Z ; CGraphicImageTexture::Create
PUBLIC	?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ ; CGraphicImageTexture::CreateDeviceObjects
PUBLIC	?CreateFromTexturePointer@CGraphicImageTexture@@QAEXPBVCGraphicTexture@@@Z ; CGraphicImageTexture::CreateFromTexturePointer
PUBLIC	?CreateFromDiskFile@CGraphicImageTexture@@QAE_NPBDW4_D3DFORMAT@@K@Z ; CGraphicImageTexture::CreateFromDiskFile
PUBLIC	?CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z ; CGraphicImageTexture::CreateFromMemoryFile
PUBLIC	?CreateDDSTexture@CGraphicImageTexture@@QAE_NAAVCDXTCImage@@PBE@Z ; CGraphicImageTexture::CreateDDSTexture
PUBLIC	?SetFileName@CGraphicImageTexture@@QAEXPBD@Z	; CGraphicImageTexture::SetFileName
PUBLIC	?Lock@CGraphicImageTexture@@QAE_NPAHPAPAXH@Z	; CGraphicImageTexture::Lock
PUBLIC	?Unlock@CGraphicImageTexture@@QAEXH@Z		; CGraphicImageTexture::Unlock
PUBLIC	?Initialize@CGraphicImageTexture@@IAEXXZ	; CGraphicImageTexture::Initialize
PUBLIC	??_GCGraphicImageTexture@@UAEPAXI@Z		; CGraphicImageTexture::`scalar deleting destructor'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	??_7CGraphicImageTexture@@6B@			; CGraphicImageTexture::`vftable'
PUBLIC	??_C@_0FH@IIELBMJN@CGraphicImageTexture?3?3CreateDev@ ; `string'
PUBLIC	??_C@_0CJ@GNAMCJFH@CreateDDSTexture?3?5Cannot?5creatr@ ; `string'
PUBLIC	??_C@_0CG@GKMBNFBC@CreateDDSTexture?3?5Cannot?5lock?5t@ ; `string'
PUBLIC	??_C@_0CM@KHEEHJBJ@CreateFromMemoryFile?3?5Cannot?5cr@ ; `string'
PUBLIC	??_R4CGraphicImageTexture@@6B@			; CGraphicImageTexture::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicImageTexture@@@8		; CGraphicImageTexture `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicImageTexture@@8			; CGraphicImageTexture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicImageTexture@@8			; CGraphicImageTexture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicImageTexture@@8		; CGraphicImageTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicTexture@@8		; CGraphicTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicTexture@@@8			; CGraphicTexture `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicTexture@@8				; CGraphicTexture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicTexture@@8				; CGraphicTexture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_D3DXLoadSurfaceFromSurface@32:PROC
EXTRN	_D3DXCreateTexture@32:PROC
EXTRN	_D3DXCreateTextureFromFileInMemoryEx@60:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	?IsLowTextureMemory@CGraphicBase@@SA_NXZ:PROC	; CGraphicBase::IsLowTextureMemory
EXTRN	?IsEmpty@CGraphicTexture@@UBE_NXZ:PROC		; CGraphicTexture::IsEmpty
EXTRN	?GetWidth@CGraphicTexture@@QBEHXZ:PROC		; CGraphicTexture::GetWidth
EXTRN	?GetHeight@CGraphicTexture@@QBEHXZ:PROC		; CGraphicTexture::GetHeight
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	??0CGraphicTexture@@IAE@XZ:PROC			; CGraphicTexture::CGraphicTexture
EXTRN	??1CGraphicTexture@@MAE@XZ:PROC			; CGraphicTexture::~CGraphicTexture
EXTRN	?Destroy@CGraphicTexture@@IAEXXZ:PROC		; CGraphicTexture::Destroy
EXTRN	?Initialize@CGraphicTexture@@IAEXXZ:PROC	; CGraphicTexture::Initialize
EXTRN	??0CDXTCImage@@QAE@XZ:PROC			; CDXTCImage::CDXTCImage
EXTRN	??1CDXTCImage@@UAE@XZ:PROC			; CDXTCImage::~CDXTCImage
EXTRN	?LoadHeaderFromMemory@CDXTCImage@@QAE_NPBEI@Z:PROC ; CDXTCImage::LoadHeaderFromMemory
EXTRN	?Copy@CDXTCImage@@QAE_NHPAEJ@Z:PROC		; CDXTCImage::Copy
EXTRN	??_ECGraphicImageTexture@@UAEPAXI@Z:PROC	; CGraphicImageTexture::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	?ms_bSupportDXT@CGraphicBase@@1_NA:BYTE		; CGraphicBase::ms_bSupportDXT
EXTRN	?GRAPHICS_CAPS_HALF_SIZE_IMAGE@@3_NA:BYTE	; GRAPHICS_CAPS_HALF_SIZE_IMAGE
EXTRN	?GRAPHICS_CAPS_HALF_SIZE_IMAGE@@3_NA:BYTE	; GRAPHICS_CAPS_HALF_SIZE_IMAGE
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?image@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@4VCDXTCImage@@A
_BSS	SEGMENT
?image@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@4VCDXTCImage@@A DB 0128H DUP (?) ; `CGraphicImageTexture::CreateFromMemoryFile'::`2'::image
_BSS	ENDS
;	COMDAT ?$TSS0@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@4HA DD 01H DUP (?) ; `CGraphicImageTexture::CreateFromMemoryFile'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicTexture@@8
rdata$r	SEGMENT
??_R2CGraphicTexture@@8 DD FLAT:??_R1A@?0A@EA@CGraphicTexture@@8 ; CGraphicTexture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicTexture@@8
rdata$r	SEGMENT
??_R3CGraphicTexture@@8 DD 00H				; CGraphicTexture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicTexture@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicTexture@@@8
data$rs	SEGMENT
??_R0?AVCGraphicTexture@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicTexture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicTexture@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicTexture@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicTexture@@8 DD FLAT:??_R0?AVCGraphicTexture@@@8 ; CGraphicTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicTexture@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicImageTexture@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicImageTexture@@8 DD FLAT:??_R0?AVCGraphicImageTexture@@@8 ; CGraphicImageTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicImageTexture@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicImageTexture@@8
rdata$r	SEGMENT
??_R2CGraphicImageTexture@@8 DD FLAT:??_R1A@?0A@EA@CGraphicImageTexture@@8 ; CGraphicImageTexture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicTexture@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicImageTexture@@8
rdata$r	SEGMENT
??_R3CGraphicImageTexture@@8 DD 00H			; CGraphicImageTexture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGraphicImageTexture@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicImageTexture@@@8
data$rs	SEGMENT
??_R0?AVCGraphicImageTexture@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicImageTexture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicImageTexture@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicImageTexture@@6B@
rdata$r	SEGMENT
??_R4CGraphicImageTexture@@6B@ DD 00H			; CGraphicImageTexture::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicImageTexture@@@8
	DD	FLAT:??_R3CGraphicImageTexture@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CM@KHEEHJBJ@CreateFromMemoryFile?3?5Cannot?5cr@
CONST	SEGMENT
??_C@_0CM@KHEEHJBJ@CreateFromMemoryFile?3?5Cannot?5cr@ DB 'CreateFromMemo'
	DB	'ryFile: Cannot create texture', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GKMBNFBC@CreateDDSTexture?3?5Cannot?5lock?5t@
CONST	SEGMENT
??_C@_0CG@GKMBNFBC@CreateDDSTexture?3?5Cannot?5lock?5t@ DB 'CreateDDSText'
	DB	'ure: Cannot lock texture', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GNAMCJFH@CreateDDSTexture?3?5Cannot?5creatr@
CONST	SEGMENT
??_C@_0CJ@GNAMCJFH@CreateDDSTexture?3?5Cannot?5creatr@ DB 'CreateDDSTextu'
	DB	're: Cannot creatre texture', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@IIELBMJN@CGraphicImageTexture?3?3CreateDev@
CONST	SEGMENT
??_C@_0FH@IIELBMJN@CGraphicImageTexture?3?3CreateDev@ DB 'CGraphicImageTe'
	DB	'xture::CreateDeviceObjects: CreateFromMemoryFile: texture not'
	DB	' found(%s)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicImageTexture@@6B@
CONST	SEGMENT
??_7CGraphicImageTexture@@6B@ DD FLAT:??_R4CGraphicImageTexture@@6B@ ; CGraphicImageTexture::`vftable'
	DD	FLAT:??_ECGraphicImageTexture@@UAEPAXI@Z
	DD	FLAT:?IsEmpty@CGraphicTexture@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z$0
__ehfuncinfo$?CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ$0
__ehfuncinfo$?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGraphicImageTexture@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGraphicImageTexture@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphicImageTexture@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CGraphicImageTexture@@QAE@XZ$1
__ehfuncinfo$??0CGraphicImageTexture@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CGraphicImageTexture@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fimage@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@YAXXZ
text$yd	SEGMENT
??__Fimage@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@YAXXZ PROC ; `CGraphicImageTexture::CreateFromMemoryFile'::`2'::`dynamic atexit destructor for 'image'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?image@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@4VCDXTCImage@@A
  00005	e9 00 00 00 00	 jmp	 ??1CDXTCImage@@UAE@XZ	; CDXTCImage::~CDXTCImage
??__Fimage@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@YAXXZ ENDP ; `CGraphicImageTexture::CreateFromMemoryFile'::`2'::`dynamic atexit destructor for 'image''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicImageTexture@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicImageTexture@@UAEPAXI@Z PROC		; CGraphicImageTexture::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicImageTexture@@UAE@XZ ; CGraphicImageTexture::~CGraphicImageTexture
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 34		 push	 52			; 00000034H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGraphicImageTexture@@UAEPAXI@Z ENDP		; CGraphicImageTexture::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
;	COMDAT ?Initialize@CGraphicImageTexture@@IAEXXZ
_TEXT	SEGMENT
?Initialize@CGraphicImageTexture@@IAEXXZ PROC		; CGraphicImageTexture::Initialize, COMDAT
; _this$ = ecx

; 24   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 25   : 	CGraphicTexture::Initialize();

  00003	e8 00 00 00 00	 call	 ?Initialize@CGraphicTexture@@IAEXXZ ; CGraphicTexture::Initialize

; 26   : 
; 27   : 	m_stFileName = "";

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0000d	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00010	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 28   : 
; 29   : 	m_d3dFmt=D3DFMT_UNKNOWN;

  00015	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 30   : 	m_dwFilter=0;

  0001c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00023	5e		 pop	 esi

; 31   : }

  00024	c3		 ret	 0
?Initialize@CGraphicImageTexture@@IAEXXZ ENDP		; CGraphicImageTexture::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
;	COMDAT ?Unlock@CGraphicImageTexture@@QAEXH@Z
_TEXT	SEGMENT
_level$ = 8						; size = 4
?Unlock@CGraphicImageTexture@@QAEXH@Z PROC		; CGraphicImageTexture::Unlock, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 19   : 	assert(m_lpd3dTexture != NULL);
; 20   : 	m_lpd3dTexture->UnlockRect(level);

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	ff 75 08	 push	 DWORD PTR _level$[ebp]
  00009	50		 push	 eax
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	ff 51 44	 call	 DWORD PTR [ecx+68]

; 21   : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?Unlock@CGraphicImageTexture@@QAEXH@Z ENDP		; CGraphicImageTexture::Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
;	COMDAT ?Lock@CGraphicImageTexture@@QAE_NPAHPAPAXH@Z
_TEXT	SEGMENT
_lockedRect$ = -8					; size = 8
_pRetPitch$ = 8						; size = 4
_ppRetPixels$ = 12					; size = 4
_level$ = 16						; size = 4
?Lock@CGraphicImageTexture@@QAE_NPAHPAPAXH@Z PROC	; CGraphicImageTexture::Lock, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 8    : 	D3DLOCKED_RECT lockedRect;
; 9    : 	if (FAILED(m_lpd3dTexture->LockRect(level, &lockedRect, NULL, 0)))

  00003	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00006	8d 55 f8	 lea	 edx, DWORD PTR _lockedRect$[ebp]
  00009	83 ec 08	 sub	 esp, 8
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	6a 00		 push	 0
  00010	6a 00		 push	 0
  00012	52		 push	 edx
  00013	ff 75 10	 push	 DWORD PTR _level$[ebp]
  00016	51		 push	 ecx
  00017	ff 50 40	 call	 DWORD PTR [eax+64]
  0001a	85 c0		 test	 eax, eax
  0001c	79 08		 jns	 SHORT $LN2@Lock

; 10   : 		return false;

  0001e	32 c0		 xor	 al, al

; 15   : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Lock:

; 11   : 
; 12   : 	*pRetPitch = lockedRect.Pitch;

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _pRetPitch$[ebp]
  00029	8b 45 f8	 mov	 eax, DWORD PTR _lockedRect$[ebp]
  0002c	89 01		 mov	 DWORD PTR [ecx], eax

; 13   : 	*ppRetPixels = (void*)lockedRect.pBits;

  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _ppRetPixels$[ebp]
  00031	8b 45 fc	 mov	 eax, DWORD PTR _lockedRect$[ebp+4]
  00034	89 01		 mov	 DWORD PTR [ecx], eax

; 14   : 	return true;

  00036	b0 01		 mov	 al, 1

; 15   : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?Lock@CGraphicImageTexture@@QAE_NPAHPAPAXH@Z ENDP	; CGraphicImageTexture::Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
;	COMDAT ?SetFileName@CGraphicImageTexture@@QAEXPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?SetFileName@CGraphicImageTexture@@QAEXPBD@Z PROC	; CGraphicImageTexture::SetFileName, COMDAT
; _this$ = ecx

; 320  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 321  : 	m_stFileName=c_szFileName;

  00003	83 c1 1c	 add	 ecx, 28			; 0000001cH

; 322  : }

  00006	5d		 pop	 ebp

; 321  : 	m_stFileName=c_szFileName;

  00007	e9 00 00 00 00	 jmp	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
?SetFileName@CGraphicImageTexture@@QAEXPBD@Z ENDP	; CGraphicImageTexture::SetFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
;	COMDAT ?CreateDDSTexture@CGraphicImageTexture@@QAE_NAAVCDXTCImage@@PBE@Z
_TEXT	SEGMENT
_lockedRect$1 = -28					; size = 8
_pool$1$ = -24						; size = 4
_pkTexDst$1$ = -24					; size = 4
_format$1$ = -20					; size = 4
_format$2$ = -20					; size = 4
_ppsDst$2 = -16						; size = 4
_uTexBias$1$ = -16					; size = 4
_ppsSrc$3 = -12						; size = 4
_uMinMipMapIndex$1$ = -12				; size = 4
_this$1$ = -8						; size = 4
_lpd3dTexture$ = -4					; size = 4
_image$ = 8						; size = 4
___formal$ = 12						; size = 4
?CreateDDSTexture@CGraphicImageTexture@@QAE_NAAVCDXTCImage@@PBE@Z PROC ; CGraphicImageTexture::CreateDDSTexture, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx

; 102  : 	int mipmapCount = image.m_dwMipMapCount == 0 ? 1 : image.m_dwMipMapCount;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _image$[ebp]
  0000a	b8 01 00 00 00	 mov	 eax, 1
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00014	8b bb f4 00 00
	00		 mov	 edi, DWORD PTR [ebx+244]
  0001a	85 ff		 test	 edi, edi
  0001c	0f 44 f8	 cmove	 edi, eax

; 103  : 
; 104  : 	D3DFORMAT format;
; 105  : 	LPDIRECT3DTEXTURE8 lpd3dTexture;
; 106  : 	D3DPOOL pool = ms_bSupportDXT ? D3DPOOL_MANAGED : D3DPOOL_SCRATCH;;

  0001f	33 c0		 xor	 eax, eax
  00021	38 05 00 00 00
	00		 cmp	 BYTE PTR ?ms_bSupportDXT@CGraphicBase@@1_NA, al ; CGraphicBase::ms_bSupportDXT
  00027	0f 94 c0	 sete	 al
  0002a	8d 04 45 01 00
	00 00		 lea	 eax, DWORD PTR [eax*2+1]
  00031	89 45 e8	 mov	 DWORD PTR _pool$1$[ebp], eax

; 107  : 
; 108  : 	if(image.m_CompFormat == PF_DXT5)

  00034	8b 83 ec 00 00
	00		 mov	 eax, DWORD PTR [ebx+236]
  0003a	83 f8 05	 cmp	 eax, 5
  0003d	75 09		 jne	 SHORT $LN8@CreateDDST

; 109  : 		format = D3DFMT_DXT5;

  0003f	c7 45 ec 44 58
	54 35		 mov	 DWORD PTR _format$1$[ebp], 894720068 ; 35545844H
  00046	eb 13		 jmp	 SHORT $LN10@CreateDDST
$LN8@CreateDDST:

; 110  : 	else if(image.m_CompFormat == PF_DXT3)

  00048	83 f8 03	 cmp	 eax, 3
  0004b	be 44 58 54 31	 mov	 esi, 827611204		; 31545844H
  00050	b9 44 58 54 33	 mov	 ecx, 861165636		; 33545844H
  00055	0f 44 f1	 cmove	 esi, ecx
  00058	89 75 ec	 mov	 DWORD PTR _format$1$[ebp], esi
$LN10@CreateDDST:

; 111  : 		format = D3DFMT_DXT3;
; 112  : 	else
; 113  : 		format = D3DFMT_DXT1;
; 114  : 
; 115  : 	UINT uTexBias=0;
; 116  : 	if (IsLowTextureMemory())

  0005b	e8 00 00 00 00	 call	 ?IsLowTextureMemory@CGraphicBase@@SA_NXZ ; CGraphicBase::IsLowTextureMemory
  00060	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _uMinMipMapIndex$1$[ebp], 0
  00067	84 c0		 test	 al, al
  00069	74 22		 je	 SHORT $LN12@CreateDDST

; 120  : 	if (uTexBias>0)
; 121  : 	{
; 122  : 		if (mipmapCount>uTexBias)

  0006b	0f b6 f0	 movzx	 esi, al
  0006e	89 75 f0	 mov	 DWORD PTR _uTexBias$1$[ebp], esi
  00071	3b fe		 cmp	 edi, esi
  00073	76 1f		 jbe	 SHORT $LN14@CreateDDST

; 123  : 		{
; 124  : 			uMinMipMapIndex=uTexBias;
; 125  : 			image.m_nWidth>>=uTexBias;

  00075	8b ce		 mov	 ecx, esi
  00077	89 75 f4	 mov	 DWORD PTR _uMinMipMapIndex$1$[ebp], esi
  0007a	d3 bb 00 01 00
	00		 sar	 DWORD PTR [ebx+256], cl

; 126  : 			image.m_nHeight>>=uTexBias;

  00080	d3 bb 04 01 00
	00		 sar	 DWORD PTR [ebx+260], cl

; 127  : 			mipmapCount-=uTexBias;

  00086	2b fe		 sub	 edi, esi
  00088	89 75 f0	 mov	 DWORD PTR _uTexBias$1$[ebp], esi
  0008b	eb 07		 jmp	 SHORT $LN14@CreateDDST
$LN12@CreateDDST:

; 117  : 		uTexBias=1;
; 118  : 
; 119  : 	UINT uMinMipMapIndex=0;

  0008d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _uTexBias$1$[ebp], 0
$LN14@CreateDDST:

; 128  : 		}
; 129  : 	}
; 130  : 
; 131  : 	if (FAILED(D3DXCreateTexture(	ms_lpd3dDevice, image.m_nWidth, image.m_nHeight,

  00094	8d 45 fc	 lea	 eax, DWORD PTR _lpd3dTexture$[ebp]
  00097	50		 push	 eax
  00098	ff 75 e8	 push	 DWORD PTR _pool$1$[ebp]
  0009b	ff 75 ec	 push	 DWORD PTR _format$1$[ebp]
  0009e	6a 00		 push	 0
  000a0	57		 push	 edi
  000a1	ff b3 04 01 00
	00		 push	 DWORD PTR [ebx+260]
  000a7	ff b3 00 01 00
	00		 push	 DWORD PTR [ebx+256]
  000ad	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000b3	e8 00 00 00 00	 call	 _D3DXCreateTexture@32
  000b8	85 c0		 test	 eax, eax
  000ba	0f 88 6d 01 00
	00		 js	 $LN39@CreateDDST

; 132  : 									mipmapCount, 0, format, pool, &lpd3dTexture)))
; 133  : 	{
; 134  : 		TraceError("CreateDDSTexture: Cannot creatre texture");
; 135  : 		return false;
; 136  : 	}
; 137  : 
; 138  : 	for (DWORD i = 0; i < mipmapCount; ++i)

  000c0	33 f6		 xor	 esi, esi
  000c2	85 ff		 test	 edi, edi
  000c4	74 47		 je	 SHORT $LN3@CreateDDST
$LL4@CreateDDST:

; 139  : 	{
; 140  : 		D3DLOCKED_RECT lockedRect;
; 141  : 
; 142  : 		if (FAILED(lpd3dTexture->LockRect(i, &lockedRect, NULL, 0)))

  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _lpd3dTexture$[ebp]
  000c9	8d 55 e4	 lea	 edx, DWORD PTR _lockedRect$1[ebp]
  000cc	6a 00		 push	 0
  000ce	6a 00		 push	 0
  000d0	52		 push	 edx
  000d1	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d3	56		 push	 esi
  000d4	51		 push	 ecx
  000d5	ff 50 40	 call	 DWORD PTR [eax+64]
  000d8	85 c0		 test	 eax, eax
  000da	79 0f		 jns	 SHORT $LN16@CreateDDST

; 143  : 		{
; 144  : 			TraceError("CreateDDSTexture: Cannot lock texture");

  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@GKMBNFBC@CreateDDSTexture?3?5Cannot?5lock?5t@
  000e1	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000e6	83 c4 04	 add	 esp, 4

; 145  : 		}

  000e9	eb 1d		 jmp	 SHORT $LN2@CreateDDST
$LN16@CreateDDST:

; 146  : 		else
; 147  : 		{
; 148  : 			image.Copy(i+uMinMipMapIndex, (BYTE*)lockedRect.pBits, lockedRect.Pitch);

  000eb	ff 75 e4	 push	 DWORD PTR _lockedRect$1[ebp]
  000ee	8b 45 f4	 mov	 eax, DWORD PTR _uMinMipMapIndex$1$[ebp]
  000f1	8b cb		 mov	 ecx, ebx
  000f3	ff 75 e8	 push	 DWORD PTR _lockedRect$1[ebp+4]
  000f6	03 c6		 add	 eax, esi
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ?Copy@CDXTCImage@@QAE_NHPAEJ@Z ; CDXTCImage::Copy

; 149  : 			lpd3dTexture->UnlockRect(i);

  000fe	8b 45 fc	 mov	 eax, DWORD PTR _lpd3dTexture$[ebp]
  00101	56		 push	 esi
  00102	50		 push	 eax
  00103	8b 08		 mov	 ecx, DWORD PTR [eax]
  00105	ff 51 44	 call	 DWORD PTR [ecx+68]
$LN2@CreateDDST:

; 132  : 									mipmapCount, 0, format, pool, &lpd3dTexture)))
; 133  : 	{
; 134  : 		TraceError("CreateDDSTexture: Cannot creatre texture");
; 135  : 		return false;
; 136  : 	}
; 137  : 
; 138  : 	for (DWORD i = 0; i < mipmapCount; ++i)

  00108	46		 inc	 esi
  00109	3b f7		 cmp	 esi, edi
  0010b	72 b9		 jb	 SHORT $LL4@CreateDDST
$LN3@CreateDDST:

; 150  : 		}
; 151  : 	}
; 152  : 
; 153  : 	if(ms_bSupportDXT)

  0010d	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?ms_bSupportDXT@CGraphicBase@@1_NA, 0 ; CGraphicBase::ms_bSupportDXT
  00114	74 0e		 je	 SHORT $LN18@CreateDDST

; 154  : 	{
; 155  : 		m_lpd3dTexture = lpd3dTexture;

  00116	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00119	8b 45 fc	 mov	 eax, DWORD PTR _lpd3dTexture$[ebp]
  0011c	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 156  : 	}

  0011f	e9 e8 00 00 00	 jmp	 $LN19@CreateDDST
$LN18@CreateDDST:

; 157  : 	else
; 158  : 	{
; 159  : 		if(image.m_CompFormat == PF_DXT3 || image.m_CompFormat == PF_DXT5)

  00124	8b 83 ec 00 00
	00		 mov	 eax, DWORD PTR [ebx+236]
  0012a	83 f8 03	 cmp	 eax, 3
  0012d	74 0c		 je	 SHORT $LN22@CreateDDST

; 161  : 		else
; 162  : 			format = D3DFMT_A1R5G5B5;

  0012f	c7 45 ec 19 00
	00 00		 mov	 DWORD PTR _format$2$[ebp], 25 ; 00000019H
  00136	83 f8 05	 cmp	 eax, 5
  00139	75 07		 jne	 SHORT $LN21@CreateDDST
$LN22@CreateDDST:

; 160  : 			format = D3DFMT_A4R4G4B4;

  0013b	c7 45 ec 1a 00
	00 00		 mov	 DWORD PTR _format$2$[ebp], 26 ; 0000001aH
$LN21@CreateDDST:

; 163  : 
; 164  : 		UINT imgWidth=image.m_nWidth;
; 165  : 		UINT imgHeight=image.m_nHeight;
; 166  : 
; 167  : 		extern bool GRAPHICS_CAPS_HALF_SIZE_IMAGE;
; 168  : 
; 169  : 		if (GRAPHICS_CAPS_HALF_SIZE_IMAGE && uTexBias>0 && mipmapCount==0)

  00142	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?GRAPHICS_CAPS_HALF_SIZE_IMAGE@@3_NA, 0 ; GRAPHICS_CAPS_HALF_SIZE_IMAGE
  00149	8b 93 00 01 00
	00		 mov	 edx, DWORD PTR [ebx+256]
  0014f	8b b3 04 01 00
	00		 mov	 esi, DWORD PTR [ebx+260]
  00155	74 11		 je	 SHORT $LN23@CreateDDST
  00157	8b 45 f0	 mov	 eax, DWORD PTR _uTexBias$1$[ebp]
  0015a	85 c0		 test	 eax, eax
  0015c	74 0a		 je	 SHORT $LN23@CreateDDST
  0015e	85 ff		 test	 edi, edi
  00160	75 06		 jne	 SHORT $LN23@CreateDDST

; 170  : 		{
; 171  : 			imgWidth>>=uTexBias;

  00162	8b c8		 mov	 ecx, eax
  00164	d3 ea		 shr	 edx, cl

; 172  : 			imgHeight>>=uTexBias;

  00166	d3 ee		 shr	 esi, cl
$LN23@CreateDDST:

; 173  : 		}
; 174  : 
; 175  : 		if (FAILED(D3DXCreateTexture(	ms_lpd3dDevice, imgWidth, imgHeight,

  00168	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  0016b	83 c0 10	 add	 eax, 16			; 00000010H
  0016e	50		 push	 eax
  0016f	6a 01		 push	 1
  00171	ff 75 ec	 push	 DWORD PTR _format$2$[ebp]
  00174	6a 00		 push	 0
  00176	57		 push	 edi
  00177	56		 push	 esi
  00178	52		 push	 edx
  00179	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0017f	e8 00 00 00 00	 call	 _D3DXCreateTexture@32
  00184	85 c0		 test	 eax, eax
  00186	0f 88 a1 00 00
	00		 js	 $LN39@CreateDDST

; 180  : 		}
; 181  : 
; 182  : 		IDirect3DTexture8* pkTexSrc=lpd3dTexture;
; 183  : 		IDirect3DTexture8* pkTexDst=m_lpd3dTexture;

  0018c	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  0018f	33 f6		 xor	 esi, esi
  00191	8b 5d fc	 mov	 ebx, DWORD PTR _lpd3dTexture$[ebp]
  00194	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00197	89 45 e8	 mov	 DWORD PTR _pkTexDst$1$[ebp], eax

; 184  : 
; 185  : 		for(int i=0; i<mipmapCount; ++i) {

  0019a	85 ff		 test	 edi, edi
  0019c	7e 62		 jle	 SHORT $LN6@CreateDDST
  0019e	66 90		 npad	 2
$LL7@CreateDDST:

; 186  : 
; 187  : 			IDirect3DSurface8* ppsSrc = NULL;
; 188  : 			IDirect3DSurface8* ppsDst = NULL;
; 189  : 
; 190  : 			if (SUCCEEDED(pkTexSrc->GetSurfaceLevel(i, &ppsSrc)))

  001a0	8b 03		 mov	 eax, DWORD PTR [ebx]
  001a2	8d 4d f4	 lea	 ecx, DWORD PTR _ppsSrc$3[ebp]
  001a5	51		 push	 ecx
  001a6	56		 push	 esi
  001a7	53		 push	 ebx
  001a8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ppsSrc$3[ebp], 0
  001af	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ppsDst$2[ebp], 0
  001b6	ff 50 3c	 call	 DWORD PTR [eax+60]
  001b9	85 c0		 test	 eax, eax
  001bb	78 3b		 js	 SHORT $LN5@CreateDDST

; 191  : 			{
; 192  : 				if (SUCCEEDED(pkTexDst->GetSurfaceLevel(i, &ppsDst)))

  001bd	8b 4d e8	 mov	 ecx, DWORD PTR _pkTexDst$1$[ebp]
  001c0	8d 55 f0	 lea	 edx, DWORD PTR _ppsDst$2[ebp]
  001c3	52		 push	 edx
  001c4	56		 push	 esi
  001c5	51		 push	 ecx
  001c6	8b 01		 mov	 eax, DWORD PTR [ecx]
  001c8	ff 50 3c	 call	 DWORD PTR [eax+60]
  001cb	85 c0		 test	 eax, eax
  001cd	78 20		 js	 SHORT $LN26@CreateDDST

; 193  : 				{
; 194  : 					D3DXLoadSurfaceFromSurface(ppsDst, NULL, NULL, ppsSrc, NULL, NULL, D3DX_FILTER_NONE, 0);

  001cf	6a 00		 push	 0
  001d1	6a 01		 push	 1
  001d3	6a 00		 push	 0
  001d5	6a 00		 push	 0
  001d7	ff 75 f4	 push	 DWORD PTR _ppsSrc$3[ebp]
  001da	6a 00		 push	 0
  001dc	6a 00		 push	 0
  001de	ff 75 f0	 push	 DWORD PTR _ppsDst$2[ebp]
  001e1	e8 00 00 00 00	 call	 _D3DXLoadSurfaceFromSurface@32

; 195  : 					ppsDst->Release();

  001e6	8b 45 f0	 mov	 eax, DWORD PTR _ppsDst$2[ebp]
  001e9	50		 push	 eax
  001ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ec	ff 51 08	 call	 DWORD PTR [ecx+8]
$LN26@CreateDDST:

; 196  : 				}
; 197  : 				ppsSrc->Release();

  001ef	8b 45 f4	 mov	 eax, DWORD PTR _ppsSrc$3[ebp]
  001f2	50		 push	 eax
  001f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f5	ff 51 08	 call	 DWORD PTR [ecx+8]
$LN5@CreateDDST:

; 184  : 
; 185  : 		for(int i=0; i<mipmapCount; ++i) {

  001f8	46		 inc	 esi
  001f9	3b f7		 cmp	 esi, edi
  001fb	7c a3		 jl	 SHORT $LL7@CreateDDST
  001fd	8b 5d fc	 mov	 ebx, DWORD PTR _lpd3dTexture$[ebp]
$LN6@CreateDDST:

; 198  : 			}
; 199  : 		}
; 200  : 
; 201  : 		lpd3dTexture->Release();

  00200	8b 03		 mov	 eax, DWORD PTR [ebx]
  00202	53		 push	 ebx
  00203	ff 50 08	 call	 DWORD PTR [eax+8]
  00206	8b 5d 08	 mov	 ebx, DWORD PTR _image$[ebp]
  00209	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN19@CreateDDST:

; 202  : 	}
; 203  : 
; 204  : 	m_width = image.m_nWidth;

  0020c	8b 83 00 01 00
	00		 mov	 eax, DWORD PTR [ebx+256]
  00212	5f		 pop	 edi
  00213	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 205  : 	m_height = image.m_nHeight;

  00216	8b 83 04 01 00
	00		 mov	 eax, DWORD PTR [ebx+260]

; 206  : 	m_bEmpty = false;
; 207  : 
; 208  : 	return true;
; 209  : }

  0021c	5e		 pop	 esi
  0021d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00220	b0 01		 mov	 al, 1
  00222	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  00226	5b		 pop	 ebx
  00227	8b e5		 mov	 esp, ebp
  00229	5d		 pop	 ebp
  0022a	c2 08 00	 ret	 8
$LN39@CreateDDST:

; 176  : 										mipmapCount, 0, format, D3DPOOL_MANAGED, &m_lpd3dTexture)))
; 177  : 		{
; 178  : 				TraceError("CreateDDSTexture: Cannot creatre texture");

  0022d	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@GNAMCJFH@CreateDDSTexture?3?5Cannot?5creatr@
  00232	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00237	83 c4 04	 add	 esp, 4

; 179  : 				return false;

  0023a	32 c0		 xor	 al, al
  0023c	5f		 pop	 edi

; 206  : 	m_bEmpty = false;
; 207  : 
; 208  : 	return true;
; 209  : }

  0023d	5e		 pop	 esi
  0023e	5b		 pop	 ebx
  0023f	8b e5		 mov	 esp, ebp
  00241	5d		 pop	 ebp
  00242	c2 08 00	 ret	 8
?CreateDDSTexture@CGraphicImageTexture@@QAE_NAAVCDXTCImage@@PBE@Z ENDP ; CGraphicImageTexture::CreateDDSTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
;	COMDAT ?CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -60					; size = 4
_pkTexDst$2 = -56					; size = 4
_ppsDst$3 = -52						; size = 4
_ppsSrc$4 = -48						; size = 4
tv289 = -48						; size = 4
_imageInfo$5 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_bufSize$ = 8						; size = 4
_c_pvBuf$ = 12						; size = 4
_d3dFmt$ = 16						; size = 4
_dwFilter$ = 20						; size = 4
?CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z PROC ; CGraphicImageTexture::CreateFromMemoryFile, COMDAT
; _this$ = ecx

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d c4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx

; 213  : 	assert(ms_lpd3dDevice != NULL);
; 214  : 	assert(m_lpd3dTexture == NULL);
; 215  : 
; 216  : 	static CDXTCImage image;

  00030	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0003c	8b 75 0c	 mov	 esi, DWORD PTR _c_pvBuf$[ebp]
  0003f	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@4HA
  00047	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0004d	0f 8f 93 01 00
	00		 jg	 $LN29@CreateFrom
$LN2@CreateFrom:

; 217  : 
; 218  : //	if (image.LoadHeaderFromMemory((const BYTE *) c_pvBuf))
; 219  : //	{
; 220  : //		return (CreateDDSTexture(image, (const BYTE *) c_pvBuf));
; 221  : //	}
; 222  : 
; 223  : 	//@natanek103
; 224  : 	if (image.LoadHeaderFromMemory((const BYTE*)c_pvBuf, bufSize)) // DDS file

  00053	8b 7d 08	 mov	 edi, DWORD PTR _bufSize$[ebp]
  00056	b9 00 00 00 00	 mov	 ecx, OFFSET ?image@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@4VCDXTCImage@@A
  0005b	57		 push	 edi
  0005c	56		 push	 esi
  0005d	e8 00 00 00 00	 call	 ?LoadHeaderFromMemory@CDXTCImage@@QAE_NPBEI@Z ; CDXTCImage::LoadHeaderFromMemory
  00062	84 c0		 test	 al, al
  00064	74 12		 je	 SHORT $LN8@CreateFrom

; 225  : 	{
; 226  : 		return (CreateDDSTexture(image, (const BYTE *) c_pvBuf));

  00066	56		 push	 esi
  00067	68 00 00 00 00	 push	 OFFSET ?image@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@4VCDXTCImage@@A
  0006c	8b cb		 mov	 ecx, ebx
  0006e	e8 00 00 00 00	 call	 ?CreateDDSTexture@CGraphicImageTexture@@QAE_NAAVCDXTCImage@@PBE@Z ; CGraphicImageTexture::CreateDDSTexture
  00073	e9 46 01 00 00	 jmp	 $LN1@CreateFrom
$LN8@CreateFrom:

; 227  : 	}
; 228  : 	//@natanek103
; 229  : 
; 230  : 	else
; 231  : 	{
; 232  : 		D3DXIMAGE_INFO imageInfo;
; 233  : 		if (FAILED(D3DXCreateTextureFromFileInMemoryEx(

  00078	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
  0007b	50		 push	 eax
  0007c	6a 00		 push	 0
  0007e	89 45 d0	 mov	 DWORD PTR tv289[ebp], eax
  00081	8d 45 d4	 lea	 eax, DWORD PTR _imageInfo$5[ebp]
  00084	50		 push	 eax
  00085	8b 45 14	 mov	 eax, DWORD PTR _dwFilter$[ebp]
  00088	68 ff 00 ff ff	 push	 -65281			; ffff00ffH
  0008d	50		 push	 eax
  0008e	50		 push	 eax
  0008f	6a 01		 push	 1
  00091	ff 75 10	 push	 DWORD PTR _d3dFmt$[ebp]
  00094	6a 00		 push	 0
  00096	6a ff		 push	 -1
  00098	6a ff		 push	 -1
  0009a	6a ff		 push	 -1
  0009c	57		 push	 edi
  0009d	56		 push	 esi
  0009e	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000a4	e8 00 00 00 00	 call	 _D3DXCreateTextureFromFileInMemoryEx@60
  000a9	85 c0		 test	 eax, eax
  000ab	79 14		 jns	 SHORT $LN10@CreateFrom

; 234  : 					ms_lpd3dDevice,
; 235  : 					c_pvBuf,
; 236  : 					bufSize,
; 237  : 					D3DX_DEFAULT,
; 238  : 					D3DX_DEFAULT,
; 239  : 					D3DX_DEFAULT,
; 240  : 					0,
; 241  : 					d3dFmt,
; 242  : 					D3DPOOL_MANAGED,
; 243  : 					dwFilter,
; 244  : 					dwFilter,
; 245  : 					0xffff00ff,
; 246  : 					&imageInfo,
; 247  : 					NULL,
; 248  : 					&m_lpd3dTexture)))
; 249  : 		{
; 250  : 			TraceError("CreateFromMemoryFile: Cannot create texture");

  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@KHEEHJBJ@CreateFromMemoryFile?3?5Cannot?5cr@
  000b2	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000b7	83 c4 04	 add	 esp, 4

; 251  : 			return false;

  000ba	32 c0		 xor	 al, al
  000bc	e9 fd 00 00 00	 jmp	 $LN1@CreateFrom
$LN10@CreateFrom:

; 252  : 		}
; 253  : 
; 254  : 		m_width = imageInfo.Width;

  000c1	8b 45 d4	 mov	 eax, DWORD PTR _imageInfo$5[ebp]

; 255  : 		m_height = imageInfo.Height;
; 256  : 
; 257  : 		D3DFORMAT format=imageInfo.Format;

  000c4	8b 75 e4	 mov	 esi, DWORD PTR _imageInfo$5[ebp+16]
  000c7	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  000ca	8b 45 d8	 mov	 eax, DWORD PTR _imageInfo$5[ebp+4]
  000cd	89 43 0c	 mov	 DWORD PTR [ebx+12], eax

; 258  : 		switch(imageInfo.Format) {

  000d0	8b c6		 mov	 eax, esi
  000d2	83 e8 14	 sub	 eax, 20			; 00000014H
  000d5	74 0e		 je	 SHORT $LN12@CreateFrom
  000d7	83 e8 01	 sub	 eax, 1
  000da	0f 84 fc 00 00
	00		 je	 $LN11@CreateFrom
  000e0	83 e8 01	 sub	 eax, 1
  000e3	75 05		 jne	 SHORT $LN3@CreateFrom
$LN12@CreateFrom:

; 262  : 
; 263  : 			case D3DFMT_X8R8G8B8:
; 264  : 			case D3DFMT_R8G8B8:
; 265  : 				format = D3DFMT_A1R5G5B5;

  000e5	be 19 00 00 00	 mov	 esi, 25			; 00000019H
$LN3@CreateFrom:

; 266  : 				break;
; 267  : 		}
; 268  : 
; 269  : 		UINT uTexBias=0;

  000ea	33 db		 xor	 ebx, ebx

; 270  : 
; 271  : 		extern bool GRAPHICS_CAPS_HALF_SIZE_IMAGE;
; 272  : 		if (GRAPHICS_CAPS_HALF_SIZE_IMAGE)

  000ec	b8 01 00 00 00	 mov	 eax, 1
  000f1	38 1d 00 00 00
	00		 cmp	 BYTE PTR ?GRAPHICS_CAPS_HALF_SIZE_IMAGE@@3_NA, bl ; GRAPHICS_CAPS_HALF_SIZE_IMAGE
  000f7	0f 45 d8	 cmovne	 ebx, eax

; 273  : 			uTexBias=1;
; 274  : 
; 275  : 		if (IsLowTextureMemory())

  000fa	e8 00 00 00 00	 call	 ?IsLowTextureMemory@CGraphicBase@@SA_NXZ ; CGraphicBase::IsLowTextureMemory
  000ff	84 c0		 test	 al, al
  00101	0f 84 ae 00 00
	00		 je	 $LN18@CreateFrom

; 276  : 		if (uTexBias || format!=imageInfo.Format)

  00107	85 db		 test	 ebx, ebx
  00109	75 09		 jne	 SHORT $LN17@CreateFrom
  0010b	3b 75 e4	 cmp	 esi, DWORD PTR _imageInfo$5[ebp+16]
  0010e	0f 84 a1 00 00
	00		 je	 $LN18@CreateFrom
$LN17@CreateFrom:

; 277  : 		{
; 278  : 			IDirect3DTexture8* pkTexSrc=m_lpd3dTexture;

  00114	8b 45 d0	 mov	 eax, DWORD PTR tv289[ebp]

; 279  : 			IDirect3DTexture8* pkTexDst;
; 280  : 
; 281  : 
; 282  : 			if (SUCCEEDED(D3DXCreateTexture(

  00117	8b cb		 mov	 ecx, ebx
  00119	8b 38		 mov	 edi, DWORD PTR [eax]
  0011b	8d 45 c8	 lea	 eax, DWORD PTR _pkTexDst$2[ebp]
  0011e	50		 push	 eax
  0011f	8b 45 d8	 mov	 eax, DWORD PTR _imageInfo$5[ebp+4]
  00122	6a 01		 push	 1
  00124	56		 push	 esi
  00125	6a 00		 push	 0
  00127	ff 75 e0	 push	 DWORD PTR _imageInfo$5[ebp+12]
  0012a	d3 e8		 shr	 eax, cl
  0012c	50		 push	 eax
  0012d	8b 45 d4	 mov	 eax, DWORD PTR _imageInfo$5[ebp]
  00130	d3 e8		 shr	 eax, cl
  00132	50		 push	 eax
  00133	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00139	e8 00 00 00 00	 call	 _D3DXCreateTexture@32
  0013e	85 c0		 test	 eax, eax
  00140	78 73		 js	 SHORT $LN18@CreateFrom

; 283  : 				ms_lpd3dDevice,
; 284  : 				imageInfo.Width>>uTexBias,
; 285  : 				imageInfo.Height>>uTexBias,
; 286  : 				imageInfo.MipLevels,
; 287  : 				0,
; 288  : 				format,
; 289  : 				D3DPOOL_MANAGED,
; 290  : 				&pkTexDst)))
; 291  : 			{
; 292  : 				m_lpd3dTexture=pkTexDst;

  00142	8b 4d d0	 mov	 ecx, DWORD PTR tv289[ebp]

; 293  : 
; 294  : 				for(int i=0; i<imageInfo.MipLevels; ++i) {

  00145	33 f6		 xor	 esi, esi
  00147	8b 45 c8	 mov	 eax, DWORD PTR _pkTexDst$2[ebp]
  0014a	89 01		 mov	 DWORD PTR [ecx], eax
  0014c	39 75 e0	 cmp	 DWORD PTR _imageInfo$5[ebp+12], esi
  0014f	76 5e		 jbe	 SHORT $LN6@CreateFrom
$LL7@CreateFrom:

; 295  : 
; 296  : 					IDirect3DSurface8* ppsSrc = NULL;
; 297  : 					IDirect3DSurface8* ppsDst = NULL;
; 298  : 
; 299  : 					if (SUCCEEDED(pkTexSrc->GetSurfaceLevel(i, &ppsSrc)))

  00151	8b 07		 mov	 eax, DWORD PTR [edi]
  00153	8d 4d d0	 lea	 ecx, DWORD PTR _ppsSrc$4[ebp]
  00156	51		 push	 ecx
  00157	56		 push	 esi
  00158	57		 push	 edi
  00159	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _ppsSrc$4[ebp], 0
  00160	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _ppsDst$3[ebp], 0
  00167	ff 50 3c	 call	 DWORD PTR [eax+60]
  0016a	85 c0		 test	 eax, eax
  0016c	78 3b		 js	 SHORT $LN5@CreateFrom

; 300  : 					{
; 301  : 						if (SUCCEEDED(pkTexDst->GetSurfaceLevel(i, &ppsDst)))

  0016e	8b 4d c8	 mov	 ecx, DWORD PTR _pkTexDst$2[ebp]
  00171	8d 55 cc	 lea	 edx, DWORD PTR _ppsDst$3[ebp]
  00174	52		 push	 edx
  00175	56		 push	 esi
  00176	51		 push	 ecx
  00177	8b 01		 mov	 eax, DWORD PTR [ecx]
  00179	ff 50 3c	 call	 DWORD PTR [eax+60]
  0017c	85 c0		 test	 eax, eax
  0017e	78 20		 js	 SHORT $LN20@CreateFrom

; 302  : 						{
; 303  : 							D3DXLoadSurfaceFromSurface(ppsDst, NULL, NULL, ppsSrc, NULL, NULL, D3DX_FILTER_LINEAR, 0);

  00180	6a 00		 push	 0
  00182	6a 03		 push	 3
  00184	6a 00		 push	 0
  00186	6a 00		 push	 0
  00188	ff 75 d0	 push	 DWORD PTR _ppsSrc$4[ebp]
  0018b	6a 00		 push	 0
  0018d	6a 00		 push	 0
  0018f	ff 75 cc	 push	 DWORD PTR _ppsDst$3[ebp]
  00192	e8 00 00 00 00	 call	 _D3DXLoadSurfaceFromSurface@32

; 304  : 							ppsDst->Release();

  00197	8b 45 cc	 mov	 eax, DWORD PTR _ppsDst$3[ebp]
  0019a	50		 push	 eax
  0019b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019d	ff 51 08	 call	 DWORD PTR [ecx+8]
$LN20@CreateFrom:

; 305  : 						}
; 306  : 						ppsSrc->Release();

  001a0	8b 45 d0	 mov	 eax, DWORD PTR _ppsSrc$4[ebp]
  001a3	50		 push	 eax
  001a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a6	ff 51 08	 call	 DWORD PTR [ecx+8]
$LN5@CreateFrom:

; 293  : 
; 294  : 				for(int i=0; i<imageInfo.MipLevels; ++i) {

  001a9	46		 inc	 esi
  001aa	3b 75 e0	 cmp	 esi, DWORD PTR _imageInfo$5[ebp+12]
  001ad	72 a2		 jb	 SHORT $LL7@CreateFrom
$LN6@CreateFrom:

; 307  : 					}
; 308  : 				}
; 309  : 
; 310  : 				pkTexSrc->Release();

  001af	8b 07		 mov	 eax, DWORD PTR [edi]
  001b1	57		 push	 edi
  001b2	ff 50 08	 call	 DWORD PTR [eax+8]
$LN18@CreateFrom:

; 311  : 			}
; 312  : 		}
; 313  : 	}
; 314  : 
; 315  : 	m_bEmpty = false;

  001b5	8b 45 c4	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  001b8	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 316  : 	return true;

  001bc	b0 01		 mov	 al, 1
$LN1@CreateFrom:

; 317  : }

  001be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c8	59		 pop	 ecx
  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	5b		 pop	 ebx
  001cc	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001cf	33 cd		 xor	 ecx, ebp
  001d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d6	8b e5		 mov	 esp, ebp
  001d8	5d		 pop	 ebp
  001d9	c2 10 00	 ret	 16			; 00000010H
$LN11@CreateFrom:

; 259  : 			case D3DFMT_A8R8G8B8:
; 260  : 				format = D3DFMT_A4R4G4B4;

  001dc	be 1a 00 00 00	 mov	 esi, 26			; 0000001aH

; 261  : 				break;

  001e1	e9 04 ff ff ff	 jmp	 $LN3@CreateFrom
$LN29@CreateFrom:

; 213  : 	assert(ms_lpd3dDevice != NULL);
; 214  : 	assert(m_lpd3dTexture == NULL);
; 215  : 
; 216  : 	static CDXTCImage image;

  001e6	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@4HA
  001eb	e8 00 00 00 00	 call	 __Init_thread_header
  001f0	83 c4 04	 add	 esp, 4
  001f3	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@4HA, -1
  001fa	0f 85 53 fe ff
	ff		 jne	 $LN2@CreateFrom
  00200	b9 00 00 00 00	 mov	 ecx, OFFSET ?image@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@4VCDXTCImage@@A
  00205	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0020c	e8 00 00 00 00	 call	 ??0CDXTCImage@@QAE@XZ	; CDXTCImage::CDXTCImage
  00211	68 00 00 00 00	 push	 OFFSET ??__Fimage@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@YAXXZ ; `CGraphicImageTexture::CreateFromMemoryFile'::`2'::`dynamic atexit destructor for 'image''
  00216	e8 00 00 00 00	 call	 _atexit
  0021b	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@4HA
  00220	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00227	e8 00 00 00 00	 call	 __Init_thread_footer
  0022c	83 c4 08	 add	 esp, 8
  0022f	e9 1f fe ff ff	 jmp	 $LN2@CreateFrom
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z ENDP ; CGraphicImageTexture::CreateFromMemoryFile
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
;	COMDAT ?CreateFromDiskFile@CGraphicImageTexture@@QAE_NPBDW4_D3DFORMAT@@K@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
_d3dFmt$ = 12						; size = 4
_dwFilter$ = 16						; size = 4
?CreateFromDiskFile@CGraphicImageTexture@@QAE_NPBDW4_D3DFORMAT@@K@Z PROC ; CGraphicImageTexture::CreateFromDiskFile, COMDAT
; _this$ = ecx

; 325  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 326  : 	Destroy();

  00006	e8 00 00 00 00	 call	 ?Destroy@CGraphicImageTexture@@QAEXXZ ; CGraphicImageTexture::Destroy

; 327  : 
; 328  : 	SetFileName(c_szFileName);

  0000b	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?SetFileName@CGraphicImageTexture@@QAEXPBD@Z ; CGraphicImageTexture::SetFileName

; 329  : 
; 330  : 	m_d3dFmt = d3dFmt;

  00015	8b 45 0c	 mov	 eax, DWORD PTR _d3dFmt$[ebp]

; 331  : 	m_dwFilter = dwFilter;
; 332  : 	return CreateDeviceObjects();

  00018	8b ce		 mov	 ecx, esi
  0001a	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0001d	8b 45 10	 mov	 eax, DWORD PTR _dwFilter$[ebp]
  00020	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00023	e8 00 00 00 00	 call	 ?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ ; CGraphicImageTexture::CreateDeviceObjects
  00028	5e		 pop	 esi

; 333  : }

  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
?CreateFromDiskFile@CGraphicImageTexture@@QAE_NPBDW4_D3DFORMAT@@K@Z ENDP ; CGraphicImageTexture::CreateFromDiskFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
;	COMDAT ?CreateFromTexturePointer@CGraphicImageTexture@@QAEXPBVCGraphicTexture@@@Z
_TEXT	SEGMENT
_c_pSrcTexture$ = 8					; size = 4
?CreateFromTexturePointer@CGraphicImageTexture@@QAEXPBVCGraphicTexture@@@Z PROC ; CGraphicImageTexture::CreateFromTexturePointer, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 87   : 	if (m_lpd3dTexture)

  00006	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 06		 je	 SHORT $LN2@CreateFrom

; 88   : 		m_lpd3dTexture->Release();

  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	51		 push	 ecx
  00010	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@CreateFrom:

; 89   : 
; 90   : 	m_width = c_pSrcTexture->GetWidth();

  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _c_pSrcTexture$[ebp]
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?GetWidth@CGraphicTexture@@QBEHXZ ; CGraphicTexture::GetWidth

; 91   : 	m_height = c_pSrcTexture->GetHeight();

  0001e	8b ce		 mov	 ecx, esi
  00020	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00023	e8 00 00 00 00	 call	 ?GetHeight@CGraphicTexture@@QBEHXZ ; CGraphicTexture::GetHeight

; 92   : 	m_lpd3dTexture = c_pSrcTexture->GetD3DTexture();

  00028	8b ce		 mov	 ecx, esi
  0002a	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  0002d	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00032	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00035	5e		 pop	 esi

; 93   : 
; 94   : 	if (m_lpd3dTexture)

  00036	85 c0		 test	 eax, eax
  00038	74 06		 je	 SHORT $LN5@CreateFrom

; 95   : 		m_lpd3dTexture->AddRef();

  0003a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003c	50		 push	 eax
  0003d	ff 51 04	 call	 DWORD PTR [ecx+4]
$LN5@CreateFrom:

; 96   : 
; 97   : 	m_bEmpty = false;
; 98   : }

  00040	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0
  00044	5f		 pop	 edi
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?CreateFromTexturePointer@CGraphicImageTexture@@QAEXPBVCGraphicTexture@@@Z ENDP ; CGraphicImageTexture::CreateFromTexturePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
;	COMDAT ?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ
_TEXT	SEGMENT
__Result$1$ = -352					; size = 4
_this$GSCopy$1$ = -348					; size = 4
_c_pvMap$2 = -344					; size = 4
_mappedFile$3 = -340					; size = 324
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ PROC	; CGraphicImageTexture::CreateDeviceObjects, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx
  00030	89 9d a4 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2458 :         return _Mypair._Myval2._Mysize == 0;

  00036	83 7b 2c 00	 cmp	 DWORD PTR [ebx+44], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp

; 45   : 	if (m_stFileName.empty())

  0003a	75 37		 jne	 SHORT $LN2@CreateDevi

; 46   : 	{
; 47   : 		if (FAILED(ms_lpd3dDevice->CreateTexture(m_width, m_height, 1, 0, m_d3dFmt, D3DPOOL_MANAGED, &m_lpd3dTexture)))

  0003c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00042	8b 02		 mov	 eax, DWORD PTR [edx]
  00044	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00047	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
  0004a	50		 push	 eax
  0004b	6a 01		 push	 1
  0004d	ff 73 14	 push	 DWORD PTR [ebx+20]
  00050	6a 00		 push	 0
  00052	6a 01		 push	 1
  00054	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00057	ff 73 08	 push	 DWORD PTR [ebx+8]
  0005a	52		 push	 edx
  0005b	ff d1		 call	 ecx
  0005d	85 c0		 test	 eax, eax
  0005f	79 07		 jns	 SHORT $LN4@CreateDevi

; 48   : 			return false;

  00061	32 c0		 xor	 al, al
  00063	e9 a3 00 00 00	 jmp	 $LN1@CreateDevi
$LN4@CreateDevi:

; 65   : 		// return CreateFromMemoryFile(mappedFile.Size(), c_pvMap, m_d3dFmt, m_dwFilter);
; 66   : 	}
; 67   : 
; 68   : 	m_bEmpty = false;

  00068	c6 43 04 00	 mov	 BYTE PTR [ebx+4], 0

; 69   : 	return true;

  0006c	b0 01		 mov	 al, 1
  0006e	e9 98 00 00 00	 jmp	 $LN1@CreateDevi
$LN2@CreateDevi:

; 52   : 		CMappedFile	mappedFile;

  00073	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mappedFile$3[ebp]
  00079	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0007e	83 7b 30 0f	 cmp	 DWORD PTR [ebx+48], 15	; 0000000fH

; 2328 :         return _Mypair._Myval2._Myptr();

  00082	8d 43 1c	 lea	 eax, DWORD PTR [ebx+28]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp

; 52   : 		CMappedFile	mappedFile;

  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  0008c	8b c8		 mov	 ecx, eax

; 2328 :         return _Mypair._Myval2._Myptr();

  0008e	89 85 a0 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax

; 426  :         if (_Large_mode_engaged()) {

  00094	76 02		 jbe	 SHORT $LN35@CreateDevi

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN35@CreateDevi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp

; 55   : 		if (!CEterPackManager::Instance().Get(mappedFile, m_stFileName.c_str(), &c_pvMap))

  00098	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _c_pvMap$2[ebp]
  0009e	50		 push	 eax
  0009f	51		 push	 ecx
  000a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  000a6	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR _mappedFile$3[ebp]
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  000b2	84 c0		 test	 al, al
  000b4	74 46		 je	 SHORT $LN9@CreateDevi

; 56   : 			return false;
; 57   : 
; 58   : 		//@fixme002
; 59   : 		if (!CreateFromMemoryFile(mappedFile.Size(), c_pvMap, m_d3dFmt, m_dwFilter))

  000b6	8b 73 18	 mov	 esi, DWORD PTR [ebx+24]
  000b9	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mappedFile$3[ebp]
  000bf	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  000c2	8b 9d a8 fe ff
	ff		 mov	 ebx, DWORD PTR _c_pvMap$2[ebp]
  000c8	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size
  000cd	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000d3	56		 push	 esi
  000d4	57		 push	 edi
  000d5	53		 push	 ebx
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ?CreateFromMemoryFile@CGraphicImageTexture@@QAE_NIPBXW4_D3DFORMAT@@K@Z ; CGraphicImageTexture::CreateFromMemoryFile
  000dc	84 c0		 test	 al, al
  000de	75 47		 jne	 SHORT $LN6@CreateDevi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000e0	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR __Result$1$[ebp]
  000e6	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  000ea	76 02		 jbe	 SHORT $LN28@CreateDevi

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000ec	8b 00		 mov	 eax, DWORD PTR [eax]
$LN28@CreateDevi:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp

; 61   : 			TraceError("CGraphicImageTexture::CreateDeviceObjects: CreateFromMemoryFile: texture not found(%s)", m_stFileName.c_str());

  000ee	50		 push	 eax
  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@IIELBMJN@CGraphicImageTexture?3?3CreateDev@
  000f4	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000f9	83 c4 08	 add	 esp, 8
$LN9@CreateDevi:
  000fc	32 db		 xor	 bl, bl
$LN10@CreateDevi:

; 62   : 			return false;
; 63   : 		}
; 64   : 		return true;

  000fe	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mappedFile$3[ebp]
  00104	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  00109	8a c3		 mov	 al, bl
$LN1@CreateDevi:

; 70   : }

  0010b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00115	59		 pop	 ecx
  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx
  00119	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011c	33 cd		 xor	 ecx, ebp
  0011e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
$LN6@CreateDevi:

; 62   : 			return false;
; 63   : 		}
; 64   : 		return true;

  00127	b3 01		 mov	 bl, 1
  00129	eb d3		 jmp	 SHORT $LN10@CreateDevi
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _mappedFile$3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 9c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-356]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ ENDP	; CGraphicImageTexture::CreateDeviceObjects
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
;	COMDAT ?Create@CGraphicImageTexture@@QAE_NIIW4_D3DFORMAT@@K@Z
_TEXT	SEGMENT
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_d3dFmt$ = 16						; size = 4
_dwFilter$ = 20						; size = 4
?Create@CGraphicImageTexture@@QAE_NIIW4_D3DFORMAT@@K@Z PROC ; CGraphicImageTexture::Create, COMDAT
; _this$ = ecx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 74   : 	assert(ms_lpd3dDevice != NULL);
; 75   : 	Destroy();

  00006	e8 00 00 00 00	 call	 ?Destroy@CGraphicImageTexture@@QAEXXZ ; CGraphicImageTexture::Destroy

; 76   : 
; 77   : 	m_width = width;

  0000b	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]

; 78   : 	m_height = height;
; 79   : 	m_d3dFmt = d3dFmt;
; 80   : 	m_dwFilter = dwFilter;
; 81   : 
; 82   : 	return CreateDeviceObjects();

  0000e	8b ce		 mov	 ecx, esi
  00010	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00016	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00019	8b 45 10	 mov	 eax, DWORD PTR _d3dFmt$[ebp]
  0001c	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0001f	8b 45 14	 mov	 eax, DWORD PTR _dwFilter$[ebp]
  00022	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00025	e8 00 00 00 00	 call	 ?CreateDeviceObjects@CGraphicImageTexture@@QAE_NXZ ; CGraphicImageTexture::CreateDeviceObjects
  0002a	5e		 pop	 esi

; 83   : }

  0002b	5d		 pop	 ebp
  0002c	c2 10 00	 ret	 16			; 00000010H
?Create@CGraphicImageTexture@@QAE_NIIW4_D3DFORMAT@@K@Z ENDP ; CGraphicImageTexture::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
;	COMDAT ?Destroy@CGraphicImageTexture@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CGraphicImageTexture@@QAEXXZ PROC		; CGraphicImageTexture::Destroy, COMDAT
; _this$ = ecx

; 34   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 35   : 	CGraphicTexture::Destroy();

  00003	e8 00 00 00 00	 call	 ?Destroy@CGraphicTexture@@IAEXXZ ; CGraphicTexture::Destroy

; 36   : 
; 37   : 	Initialize();

  00008	8b ce		 mov	 ecx, esi
  0000a	5e		 pop	 esi
  0000b	e9 00 00 00 00	 jmp	 ?Initialize@CGraphicImageTexture@@IAEXXZ ; CGraphicImageTexture::Initialize
?Destroy@CGraphicImageTexture@@QAEXXZ ENDP		; CGraphicImageTexture::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
;	COMDAT ??1CGraphicImageTexture@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicImageTexture@@UAE@XZ PROC			; CGraphicImageTexture::~CGraphicImageTexture, COMDAT
; _this$ = ecx

; 341  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicImageTexture@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicImageTexture@@6B@

; 342  : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CGraphicImageTexture@@QAEXXZ ; CGraphicImageTexture::Destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00030	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00033	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00036	76 28		 jbe	 SHORT $LN24@CGraphicIm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00038	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0003b	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0003c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00042	72 12		 jb	 SHORT $LN35@CGraphicIm

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00044	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00047	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004a	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0004f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00052	77 35		 ja	 SHORT $LN32@CGraphicIm

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00054	8b c2		 mov	 eax, edx
$LN35@CGraphicIm:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00056	51		 push	 ecx
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005d	83 c4 08	 add	 esp, 8
$LN24@CGraphicIm:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp

; 343  : }

  00060	8b ce		 mov	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00062	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00069	c7 46 30 0f 00
	00 00		 mov	 DWORD PTR [esi+48], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00070	c6 46 1c 00	 mov	 BYTE PTR [esi+28], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp

; 343  : }

  00074	e8 00 00 00 00	 call	 ??1CGraphicTexture@@MAE@XZ ; CGraphicTexture::~CGraphicTexture
  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	5e		 pop	 esi
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
$LN32@CGraphicIm:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00089	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN43@CGraphicIm:
  0008e	cc		 int	 3
  0008f	cc		 int	 3
  00090	cc		 int	 3
  00091	cc		 int	 3
  00092	cc		 int	 3
  00093	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicImageTexture@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicImageTexture@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicImageTexture@@UAE@XZ ENDP			; CGraphicImageTexture::~CGraphicImageTexture
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp
;	COMDAT ??0CGraphicImageTexture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGraphicImageTexture@@QAE@XZ PROC			; CGraphicImageTexture::CGraphicImageTexture, COMDAT
; _this$ = ecx

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphicImageTexture@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CGraphicTexture@@IAE@XZ ; CGraphicTexture::CGraphicTexture
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicImageTexture@@6B@
  00034	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00037	0f 11 46 1c	 movups	 XMMWORD PTR [esi+28], xmm0

; 836  :         _My_data._Mysize = 0;

  0003b	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00042	c7 46 30 0f 00
	00 00		 mov	 DWORD PTR [esi+48], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp

; 336  : {

  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00050	c6 46 1c 00	 mov	 BYTE PTR [esi+28], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpImageTexture.cpp

; 337  : 	Initialize();

  00054	8b ce		 mov	 ecx, esi
  00056	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005a	e8 00 00 00 00	 call	 ?Initialize@CGraphicImageTexture@@IAEXXZ ; CGraphicImageTexture::Initialize

; 338  : }

  0005f	8b c6		 mov	 eax, esi
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5e		 pop	 esi
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphicImageTexture@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicTexture@@MAE@XZ ; CGraphicTexture::~CGraphicTexture
__unwindfunclet$??0CGraphicImageTexture@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0CGraphicImageTexture@@QAE@XZ:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphicImageTexture@@QAE@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphicImageTexture@@QAE@XZ ENDP			; CGraphicImageTexture::CGraphicImageTexture
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0000b	8b f2		 mov	 esi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00010	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL82@operator:
  00013	8a 06		 mov	 al, BYTE PTR [esi]
  00015	46		 inc	 esi
  00016	84 c0		 test	 al, al
  00018	75 f9		 jne	 SHORT $LL82@operator
  0001a	2b f1		 sub	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001c	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0001f	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00022	3b f1		 cmp	 esi, ecx
  00024	77 26		 ja	 SHORT $LN9@operator

; 416  :         value_type* _Result = _Bx._Buf;

  00026	8b df		 mov	 ebx, edi

; 434  :         return _Myres > _Small_string_capacity;

  00028	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002b	76 02		 jbe	 SHORT $LN12@operator

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002d	8b 1f		 mov	 ebx, DWORD PTR [edi]
$LN12@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0002f	56		 push	 esi
  00030	52		 push	 edx
  00031	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00032	89 77 10	 mov	 DWORD PTR [edi+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00035	e8 00 00 00 00	 call	 _memmove
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003d	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 1422 :         return assign(_Ptr);

  00041	8b c7		 mov	 eax, edi

; 1423 :     }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN9@operator:

; 2962 :         if (_New_size > max_size()) {

  0004c	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00052	0f 87 c7 00 00
	00		 ja	 $LN97@operator

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00058	8b de		 mov	 ebx, esi
  0005a	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0005d	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00063	76 12		 jbe	 SHORT $LN30@operator

; 2944 :             return _Max;

  00065	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006a	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00075	eb 45		 jmp	 SHORT $LN95@operator
$LN30@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00077	8b d1		 mov	 edx, ecx
  00079	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0007e	d1 ea		 shr	 edx, 1
  00080	2b c2		 sub	 eax, edx
  00082	3b c8		 cmp	 ecx, eax
  00084	76 12		 jbe	 SHORT $LN31@operator

; 2948 :             return _Max;

  00086	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0008b	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00096	eb 24		 jmp	 SHORT $LN95@operator
$LN31@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00098	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0009b	3b d8		 cmp	 ebx, eax
  0009d	0f 42 d8	 cmovb	 ebx, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000a0	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000a3	85 c0		 test	 eax, eax
  000a5	74 18		 je	 SHORT $LN94@operator
$LN44@operator:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000a7	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ac	72 08		 jb	 SHORT $LN45@operator

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b4	eb 06		 jmp	 SHORT $LN95@operator
$LN45@operator:

; 136  :         return ::operator new(_Bytes);

  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN95@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000bc	83 c4 04	 add	 esp, 4
$LN94@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	56		 push	 esi
  000c0	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000c3	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c6	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000c7	89 77 10	 mov	 DWORD PTR [edi+16], esi

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  000ca	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cd	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d2	8b 5d fc	 mov	 ebx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000d8	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000db	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000df	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000e2	76 29		 jbe	 SHORT $LN23@operator

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000e4	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	8b 07		 mov	 eax, DWORD PTR [edi]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000e9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ef	72 12		 jb	 SHORT $LN73@operator

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f4	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f7	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f9	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ff	77 19		 ja	 SHORT $LN70@operator

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00101	8b c2		 mov	 eax, edx
$LN73@operator:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00103	51		 push	 ecx
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010a	83 c4 08	 add	 esp, 8
$LN23@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1604 :         return _Reallocate_for(

  0010d	89 1f		 mov	 DWORD PTR [edi], ebx

; 1422 :         return assign(_Ptr);

  0010f	8b c7		 mov	 eax, edi

; 1423 :     }

  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 04 00	 ret	 4
$LN70@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN97@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  0011f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN93@operator:
  00124	cc		 int	 3
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
