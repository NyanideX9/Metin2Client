; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\GrpDevice.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?GRAPHICS_CAPS_CAN_NOT_DRAW_LINE@@3_NA		; GRAPHICS_CAPS_CAN_NOT_DRAW_LINE
PUBLIC	?GRAPHICS_CAPS_CAN_NOT_DRAW_SHADOW@@3_NA	; GRAPHICS_CAPS_CAN_NOT_DRAW_SHADOW
PUBLIC	?GRAPHICS_CAPS_HALF_SIZE_IMAGE@@3_NA		; GRAPHICS_CAPS_HALF_SIZE_IMAGE
PUBLIC	?GRAPHICS_CAPS_CAN_NOT_TEXTURE_ADDRESS_BORDER@@3_NA ; GRAPHICS_CAPS_CAN_NOT_TEXTURE_ADDRESS_BORDER
PUBLIC	?GRAPHICS_CAPS_SOFTWARE_TILING@@3_NA		; GRAPHICS_CAPS_SOFTWARE_TILING
PUBLIC	?g_kD3DPP@@3U_D3DPRESENT_PARAMETERS_@@A		; g_kD3DPP
PUBLIC	?g_isBrowserMode@@3_NA				; g_isBrowserMode
PUBLIC	?g_rcBrowser@@3UtagRECT@@A			; g_rcBrowser
_BSS	SEGMENT
?GRAPHICS_CAPS_CAN_NOT_DRAW_LINE@@3_NA DB 01H DUP (?)	; GRAPHICS_CAPS_CAN_NOT_DRAW_LINE
	ALIGN	4

?GRAPHICS_CAPS_CAN_NOT_DRAW_SHADOW@@3_NA DB 01H DUP (?)	; GRAPHICS_CAPS_CAN_NOT_DRAW_SHADOW
	ALIGN	4

?GRAPHICS_CAPS_HALF_SIZE_IMAGE@@3_NA DB 01H DUP (?)	; GRAPHICS_CAPS_HALF_SIZE_IMAGE
	ALIGN	4

?GRAPHICS_CAPS_CAN_NOT_TEXTURE_ADDRESS_BORDER@@3_NA DB 01H DUP (?) ; GRAPHICS_CAPS_CAN_NOT_TEXTURE_ADDRESS_BORDER
	ALIGN	4

?GRAPHICS_CAPS_SOFTWARE_TILING@@3_NA DB 01H DUP (?)	; GRAPHICS_CAPS_SOFTWARE_TILING
	ALIGN	4

?g_kD3DPP@@3U_D3DPRESENT_PARAMETERS_@@A DB 034H DUP (?)	; g_kD3DPP
?g_isBrowserMode@@3_NA DB 01H DUP (?)			; g_isBrowserMode
	ALIGN	4

?g_rcBrowser@@3UtagRECT@@A DB 010H DUP (?)		; g_rcBrowser
_BSS	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	___local_stdio_scanf_options
PUBLIC	_sscanf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CGraphicDevice@@QAE@XZ			; CGraphicDevice::CGraphicDevice
PUBLIC	??1CGraphicDevice@@UAE@XZ			; CGraphicDevice::~CGraphicDevice
PUBLIC	?InitBackBufferCount@CGraphicDevice@@QAEXI@Z	; CGraphicDevice::InitBackBufferCount
PUBLIC	?Destroy@CGraphicDevice@@QAEXXZ			; CGraphicDevice::Destroy
PUBLIC	?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z	; CGraphicDevice::Create
PUBLIC	?GetDeviceState@CGraphicDevice@@QAE?AW4EDeviceState@1@XZ ; CGraphicDevice::GetDeviceState
PUBLIC	?Reset@CGraphicDevice@@QAE_NXZ			; CGraphicDevice::Reset
PUBLIC	?EnableWebBrowserMode@CGraphicDevice@@QAEXABUtagRECT@@@Z ; CGraphicDevice::EnableWebBrowserMode
PUBLIC	?DisableWebBrowserMode@CGraphicDevice@@QAEXXZ	; CGraphicDevice::DisableWebBrowserMode
PUBLIC	?MoveWebBrowserRect@CGraphicDevice@@QAEXABUtagRECT@@@Z ; CGraphicDevice::MoveWebBrowserRect
PUBLIC	?ResizeBackBuffer@CGraphicDevice@@QAE_NII@Z	; CGraphicDevice::ResizeBackBuffer
PUBLIC	?RegisterWarningString@CGraphicDevice@@QAEXIPBD@Z ; CGraphicDevice::RegisterWarningString
PUBLIC	?__Initialize@CGraphicDevice@@IAEXXZ		; CGraphicDevice::__Initialize
PUBLIC	?__IsInDriverBlackList@CGraphicDevice@@IAE_NAAVD3D_CAdapterInfo@@@Z ; CGraphicDevice::__IsInDriverBlackList
PUBLIC	?__WarningMessage@CGraphicDevice@@IAEXPAUHWND__@@I@Z ; CGraphicDevice::__WarningMessage
PUBLIC	?__InitializeDefaultIndexBufferList@CGraphicDevice@@IAEXXZ ; CGraphicDevice::__InitializeDefaultIndexBufferList
PUBLIC	?__DestroyDefaultIndexBufferList@CGraphicDevice@@IAEXXZ ; CGraphicDevice::__DestroyDefaultIndexBufferList
PUBLIC	?__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ ; CGraphicDevice::__CreateDefaultIndexBufferList
PUBLIC	?__CreateDefaultIndexBuffer@CGraphicDevice@@IAE_NIIPBG@Z ; CGraphicDevice::__CreateDefaultIndexBuffer
PUBLIC	?__InitializePDTVertexBufferList@CGraphicDevice@@IAEXXZ ; CGraphicDevice::__InitializePDTVertexBufferList
PUBLIC	?__DestroyPDTVertexBufferList@CGraphicDevice@@IAEXXZ ; CGraphicDevice::__DestroyPDTVertexBufferList
PUBLIC	?__CreatePDTVertexBufferList@CGraphicDevice@@IAE_NXZ ; CGraphicDevice::__CreatePDTVertexBufferList
PUBLIC	?CreatePTStreamVertexShader@CGraphicDevice@@IAEKXZ ; CGraphicDevice::CreatePTStreamVertexShader
PUBLIC	?CreatePNTStreamVertexShader@CGraphicDevice@@IAEKXZ ; CGraphicDevice::CreatePNTStreamVertexShader
PUBLIC	?CreatePNT2StreamVertexShader@CGraphicDevice@@IAEKXZ ; CGraphicDevice::CreatePNT2StreamVertexShader
PUBLIC	?CreateDoublePNTStreamVertexShader@CGraphicDevice@@IAEKXZ ; CGraphicDevice::CreateDoublePNTStreamVertexShader
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
PUBLIC	??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z ; std::map<unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
PUBLIC	??_GCGraphicDevice@@UAEPAXI@Z			; CGraphicDevice::`scalar deleting destructor'
PUBLIC	?EL3D_ConfirmDevice@@YAHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z ; EL3D_ConfirmDevice
PUBLIC	?GetMaxTextureWidth@@YAKXZ			; GetMaxTextureWidth
PUBLIC	?GetMaxTextureHeight@@YAKXZ			; GetMaxTextureHeight
PUBLIC	??$_Find_lower_bound@I@?$_Tree@V?$_Tmap_traits@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABI@Z ; std::_Tree<std::_Tmap_traits<unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned int>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_7CGraphicDevice@@6B@				; CGraphicDevice::`vftable'
PUBLIC	??_C@_07KGMMFLDN@Warning@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_0L@NIHOAGKC@grpblk?4txt@			; `string'
PUBLIC	??_C@_08NLGDGEBC@?$CFs?5?$CFx?5?$CFx@		; `string'
PUBLIC	??_C@_0BE@JAEGAKLI@adapter?5?$CFd?5is?5EMPTY@	; `string'
PUBLIC	??_C@_0BM@LIHILKDJ@device?5?$CFd?0?5mode?5?$CFd?5is?5EMPTY@ ; `string'
PUBLIC	??_C@_04MAKEOOIM@3dfx@				; `string'
PUBLIC	??_C@_0JB@NCJOPOMN@IDirect3DDevice?4CreateDevice?5?9?5@ ; `string'
PUBLIC	??_C@_0GO@ICOCNPJJ@IDirect3DDevice?4CreateDevice?5?9?5@ ; `string'
PUBLIC	??_C@_0ID@GFNIEGEI@IDirect3DDevice?4CreateDevice?5?9?5@ ; `string'
PUBLIC	??_C@_0CI@IPGGGCFB@IDirect3DDevice?4CreateDevice?5?9?5@ ; `string'
PUBLIC	??_C@_0CJ@PKDINAHJ@IDirect3DDevice?4GetDeviceCaps?5?9@ ; `string'
PUBLIC	??_C@_03OJNODIHH@SIS@				; `string'
PUBLIC	??_R4CGraphicDevice@@6B@			; CGraphicDevice::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicDevice@@@8			; CGraphicDevice `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicDevice@@8				; CGraphicDevice::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicDevice@@8				; CGraphicDevice::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicDevice@@8			; CGraphicDevice::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@3f000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__strnicmp:PROC
EXTRN	_strncpy:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_Direct3DCreate8@4:PROC
EXTRN	_D3DXCreateMatrixStack@8:PROC
EXTRN	_D3DXCreateCylinder@32:PROC
EXTRN	_D3DXCreateSphere@24:PROC
EXTRN	_fclose:PROC
EXTRN	_fgets:PROC
EXTRN	_fopen:PROC
EXTRN	___stdio_common_vsscanf:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?Tracen@@YAXPBD@Z:PROC				; Tracen
EXTRN	?Tracenf@@YAXPBDZZ:PROC				; Tracenf
EXTRN	?GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; D3D_SModeInfo::GetString
EXTRN	?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ:PROC ; D3D_CAdapterInfo::GetDesktopD3DDisplayModer
EXTRN	?GetD3DModeInfop@D3D_CAdapterInfo@@QAEPAUD3D_SModeInfo@@II@Z:PROC ; D3D_CAdapterInfo::GetD3DModeInfop
EXTRN	?Build@D3D_CDisplayModeAutoDetector@@QAEHAAUIDirect3D8@@P6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z:PROC ; D3D_CDisplayModeAutoDetector::Build
EXTRN	?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z:PROC ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop
EXTRN	?GetString@D3D_CDisplayModeAutoDetector@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; D3D_CDisplayModeAutoDetector::GetString
EXTRN	?GetAvailableTextureMemory@CGraphicBase@@SAKXZ:PROC ; CGraphicBase::GetAvailableTextureMemory
EXTRN	??0CGraphicBase@@QAE@XZ:PROC			; CGraphicBase::CGraphicBase
EXTRN	??1CGraphicBase@@UAE@XZ:PROC			; CGraphicBase::~CGraphicBase
EXTRN	??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z:PROC ; CStateManager::CStateManager
EXTRN	?SetDefaultState@CStateManager@@QAEXXZ:PROC	; CStateManager::SetDefaultState
EXTRN	??_ECGraphicDevice@@UAEPAXI@Z:PROC		; CGraphicDevice::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matIdentity
EXTRN	?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matView
EXTRN	?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matProj
EXTRN	?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matInverseView
EXTRN	?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matInverseViewYAxis
EXTRN	?ms_lpSphereMesh@CGraphicBase@@1PAUID3DXMesh@@A:DWORD ; CGraphicBase::ms_lpSphereMesh
EXTRN	?ms_lpCylinderMesh@CGraphicBase@@1PAUID3DXMesh@@A:DWORD ; CGraphicBase::ms_lpCylinderMesh
EXTRN	?ms_hLastResult@CGraphicBase@@1JA:DWORD		; CGraphicBase::ms_hLastResult
EXTRN	?ms_iWidth@CGraphicBase@@1HA:DWORD		; CGraphicBase::ms_iWidth
EXTRN	?ms_iHeight@CGraphicBase@@1HA:DWORD		; CGraphicBase::ms_iHeight
EXTRN	?ms_iD3DAdapterInfo@CGraphicBase@@1IA:DWORD	; CGraphicBase::ms_iD3DAdapterInfo
EXTRN	?ms_iD3DDevInfo@CGraphicBase@@1IA:DWORD		; CGraphicBase::ms_iD3DDevInfo
EXTRN	?ms_iD3DModeInfo@CGraphicBase@@1IA:DWORD	; CGraphicBase::ms_iD3DModeInfo
EXTRN	?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A:BYTE ; CGraphicBase::ms_kD3DDetector
EXTRN	?ms_hWnd@CGraphicBase@@1PAUHWND__@@A:DWORD	; CGraphicBase::ms_hWnd
EXTRN	?ms_hDC@CGraphicBase@@1PAUHDC__@@A:DWORD	; CGraphicBase::ms_hDC
EXTRN	?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A:DWORD	; CGraphicBase::ms_lpd3d
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A:DWORD ; CGraphicBase::ms_lpd3dMatStack
EXTRN	?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A:BYTE ; CGraphicBase::ms_Viewport
EXTRN	?ms_d3dCaps@CGraphicBase@@1U_D3DCAPS8@@A:BYTE	; CGraphicBase::ms_d3dCaps
EXTRN	?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A:BYTE ; CGraphicBase::ms_d3dPresentParameter
EXTRN	?ms_dwD3DBehavior@CGraphicBase@@1KA:DWORD	; CGraphicBase::ms_dwD3DBehavior
EXTRN	?ms_ptVS@CGraphicBase@@1KA:DWORD		; CGraphicBase::ms_ptVS
EXTRN	?ms_pntVS@CGraphicBase@@1KA:DWORD		; CGraphicBase::ms_pntVS
EXTRN	?ms_pnt2VS@CGraphicBase@@1KA:DWORD		; CGraphicBase::ms_pnt2VS
EXTRN	?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matScreen0
EXTRN	?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matScreen1
EXTRN	?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matScreen2
EXTRN	?ms_dwWavingEndTime@CGraphicBase@@1KA:DWORD	; CGraphicBase::ms_dwWavingEndTime
EXTRN	?ms_dwFlashingEndTime@CGraphicBase@@1KA:DWORD	; CGraphicBase::ms_dwFlashingEndTime
EXTRN	?ms_bSupportDXT@CGraphicBase@@1_NA:BYTE		; CGraphicBase::ms_bSupportDXT
EXTRN	?ms_isLowTextureMemory@CGraphicBase@@1_NA:BYTE	; CGraphicBase::ms_isLowTextureMemory
EXTRN	?ms_isHighTextureMemory@CGraphicBase@@1_NA:BYTE	; CGraphicBase::ms_isHighTextureMemory
EXTRN	?ms_alpd3dPDTVB@CGraphicBase@@1PAPAUIDirect3DVertexBuffer8@@A:BYTE ; CGraphicBase::ms_alpd3dPDTVB
EXTRN	?ms_alpd3dDefIB@CGraphicBase@@1PAPAUIDirect3DIndexBuffer8@@A:BYTE ; CGraphicBase::ms_alpd3dDefIB
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?s_MaxTextureWidth@@3KA DD 01H DUP (?)			; s_MaxTextureWidth
?s_MaxTextureHeight@@3KA DD 01H DUP (?)			; s_MaxTextureHeight
_BSS	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicDevice@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicDevice@@8 DD FLAT:??_R0?AVCGraphicDevice@@@8 ; CGraphicDevice::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicDevice@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicDevice@@8
rdata$r	SEGMENT
??_R2CGraphicDevice@@8 DD FLAT:??_R1A@?0A@EA@CGraphicDevice@@8 ; CGraphicDevice::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicDevice@@8
rdata$r	SEGMENT
??_R3CGraphicDevice@@8 DD 00H				; CGraphicDevice::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicDevice@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicDevice@@@8
data$rs	SEGMENT
??_R0?AVCGraphicDevice@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicDevice `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicDevice@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicDevice@@6B@
rdata$r	SEGMENT
??_R4CGraphicDevice@@6B@ DD 00H				; CGraphicDevice::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicDevice@@@8
	DD	FLAT:??_R3CGraphicDevice@@8
rdata$r	ENDS
;	COMDAT ?c_awFillCubeIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
CONST	SEGMENT
?c_awFillCubeIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB DW 00H ; `CGraphicDevice::__CreateDefaultIndexBufferList'::`2'::c_awFillCubeIndices
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	02H
	DW	02H
	DW	00H
	DW	06H
	DW	00H
	DW	04H
	DW	06H
	DW	00H
	DW	01H
	DW	04H
	DW	01H
	DW	05H
	DW	04H
	DW	01H
	DW	03H
	DW	05H
	DW	03H
	DW	07H
	DW	05H
	DW	03H
	DW	02H
	DW	07H
	DW	02H
	DW	06H
	DW	07H
	DW	04H
	DW	05H
	DW	06H
	DW	05H
	DW	07H
	DW	06H
CONST	ENDS
;	COMDAT ?c_awFillRectIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
CONST	SEGMENT
?c_awFillRectIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB DW 00H ; `CGraphicDevice::__CreateDefaultIndexBufferList'::`2'::c_awFillRectIndices
	DW	02H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
CONST	ENDS
;	COMDAT ?c_awFillTriIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
CONST	SEGMENT
?c_awFillTriIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB DW 00H ; `CGraphicDevice::__CreateDefaultIndexBufferList'::`2'::c_awFillTriIndices
	DW	01H
	DW	02H
CONST	ENDS
;	COMDAT ?c_awLineCubeIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
CONST	SEGMENT
?c_awLineCubeIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB DW 00H ; `CGraphicDevice::__CreateDefaultIndexBufferList'::`2'::c_awLineCubeIndices
	DW	01H
	DW	00H
	DW	02H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
	DW	00H
	DW	04H
	DW	01H
	DW	05H
	DW	02H
	DW	06H
	DW	03H
	DW	07H
	DW	04H
	DW	05H
	DW	04H
	DW	06H
	DW	05H
	DW	07H
	DW	06H
	DW	07H
CONST	ENDS
;	COMDAT ?c_awLineRectIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
CONST	SEGMENT
?c_awLineRectIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB DW 00H ; `CGraphicDevice::__CreateDefaultIndexBufferList'::`2'::c_awLineRectIndices
	DW	01H
	DW	00H
	DW	02H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
CONST	ENDS
;	COMDAT ?c_awLineTriIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
CONST	SEGMENT
?c_awLineTriIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB DW 00H ; `CGraphicDevice::__CreateDefaultIndexBufferList'::`2'::c_awLineTriIndices
	DW	01H
	DW	00H
	DW	02H
	DW	01H
	DW	02H
CONST	ENDS
;	COMDAT ?c_awLineIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
CONST	SEGMENT
?c_awLineIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB DW 00H ; `CGraphicDevice::__CreateDefaultIndexBufferList'::`2'::c_awLineIndices
	DW	01H
CONST	ENDS
;	COMDAT ??_C@_03OJNODIHH@SIS@
CONST	SEGMENT
??_C@_03OJNODIHH@SIS@ DB 'SIS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PKDINAHJ@IDirect3DDevice?4GetDeviceCaps?5?9@
CONST	SEGMENT
??_C@_0CJ@PKDINAHJ@IDirect3DDevice?4GetDeviceCaps?5?9@ DB 'IDirect3DDevic'
	DB	'e.GetDeviceCaps - ERROR %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IPGGGCFB@IDirect3DDevice?4CreateDevice?5?9?5@
CONST	SEGMENT
??_C@_0CI@IPGGGCFB@IDirect3DDevice?4CreateDevice?5?9?5@ DB 'IDirect3DDevi'
	DB	'ce.CreateDevice - ERROR %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0ID@GFNIEGEI@IDirect3DDevice?4CreateDevice?5?9?5@
CONST	SEGMENT
??_C@_0ID@GFNIEGEI@IDirect3DDevice?4CreateDevice?5?9?5@ DB 'IDirect3DDevi'
	DB	'ce.CreateDevice - ERROR D3DERR_OUTOFVIDEOMEMORY', 0aH, 'Direc'
	DB	't3D does not have enough display memory to perform the operat'
	DB	'ion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GO@ICOCNPJJ@IDirect3DDevice?4CreateDevice?5?9?5@
CONST	SEGMENT
??_C@_0GO@ICOCNPJJ@IDirect3DDevice?4CreateDevice?5?9?5@ DB 'IDirect3DDevi'
	DB	'ce.CreateDevice - ERROR D3DERR_NOTAVAILABLE', 0aH, 'This devi'
	DB	'ce does not support the queried technique. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JB@NCJOPOMN@IDirect3DDevice?4CreateDevice?5?9?5@
CONST	SEGMENT
??_C@_0JB@NCJOPOMN@IDirect3DDevice?4CreateDevice?5?9?5@ DB 'IDirect3DDevi'
	DB	'ce.CreateDevice - ERROR D3DERR_INVALIDCALL', 0aH, 'The method'
	DB	' call is invalid. For example, a method''s parameter may have'
	DB	' an invalid value.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MAKEOOIM@3dfx@
CONST	SEGMENT
??_C@_04MAKEOOIM@3dfx@ DB '3dfx', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LIHILKDJ@device?5?$CFd?0?5mode?5?$CFd?5is?5EMPTY@
CONST	SEGMENT
??_C@_0BM@LIHILKDJ@device?5?$CFd?0?5mode?5?$CFd?5is?5EMPTY@ DB 'device %d'
	DB	', mode %d is EMPTY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JAEGAKLI@adapter?5?$CFd?5is?5EMPTY@
CONST	SEGMENT
??_C@_0BE@JAEGAKLI@adapter?5?$CFd?5is?5EMPTY@ DB 'adapter %d is EMPTY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLGDGEBC@?$CFs?5?$CFx?5?$CFx@
CONST	SEGMENT
??_C@_08NLGDGEBC@?$CFs?5?$CFx?5?$CFx@ DB '%s %x %x', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NIHOAGKC@grpblk?4txt@
CONST	SEGMENT
??_C@_0L@NIHOAGKC@grpblk?4txt@ DB 'grpblk.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07KGMMFLDN@Warning@
CONST	SEGMENT
??_C@_07KGMMFLDN@Warning@ DB 'Warning', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicDevice@@6B@
CONST	SEGMENT
??_7CGraphicDevice@@6B@ DD FLAT:??_R4CGraphicDevice@@6B@ ; CGraphicDevice::`vftable'
	DD	FLAT:??_ECGraphicDevice@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABI@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABI@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABI@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABI@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABI@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABI@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABI@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABI@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABI$$V@?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@ABI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABI$$V@?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@ABI@Z$2
__ehfuncinfo$??$_Try_emplace@ABI$$V@?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@ABI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABI$$V@?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@ABI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z$2
__ehfuncinfo$??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z$2
__ehfuncinfo$?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGraphicDevice@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGraphicDevice@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphicDevice@@QAE@XZ$0
__ehfuncinfo$??0CGraphicDevice@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CGraphicDevice@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 6e		 jne	 SHORT $LN90@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	56		 push	 esi
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 77 08	 push	 DWORD PTR [edi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b f7		 mov	 esi, edi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00027	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0002a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0002d	76 28		 jbe	 SHORT $LN43@Erase_tree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00032	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00033	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00039	72 12		 jb	 SHORT $LN54@Erase_tree

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00041	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00043	83 c0 fc	 add	 eax, -4			; fffffffcH
  00046	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00049	77 3d		 ja	 SHORT $LN51@Erase_tree

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004b	8b c2		 mov	 eax, edx
$LN54@Erase_tree:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004d	51		 push	 ecx
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
$LN43@Erase_tree:
  00057	6a 2c		 push	 44			; 0000002cH
  00059	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0005a	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00061	c7 46 28 0f 00
	00 00		 mov	 DWORD PTR [esi+40], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00074	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00078	75 05		 jne	 SHORT $LN99@Erase_tree
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007d	eb 99		 jmp	 SHORT $LL2@Erase_tree
$LN99@Erase_tree:
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
$LN90@Erase_tree:
  00081	5f		 pop	 edi

; 762  :     }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN51@Erase_tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN100@Erase_tree:
  0008d	cc		 int	 3
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@I@?$_Tree@V?$_Tmap_traits@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABI@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@I@?$_Tree@V?$_Tmap_traits@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABI@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned int>, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN13@Find_lower
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1627 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@I@?$_Tree@V?$_Tmap_traits@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABI@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?GetMaxTextureHeight@@YAKXZ
_TEXT	SEGMENT
?GetMaxTextureHeight@@YAKXZ PROC			; GetMaxTextureHeight, COMDAT

; 350  : 	return s_MaxTextureHeight;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_MaxTextureHeight@@3KA

; 351  : }

  00005	c3		 ret	 0
?GetMaxTextureHeight@@YAKXZ ENDP			; GetMaxTextureHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?GetMaxTextureWidth@@YAKXZ
_TEXT	SEGMENT
?GetMaxTextureWidth@@YAKXZ PROC				; GetMaxTextureWidth, COMDAT

; 345  : 	return s_MaxTextureWidth;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_MaxTextureWidth@@3KA

; 346  : }

  00005	c3		 ret	 0
?GetMaxTextureWidth@@YAKXZ ENDP				; GetMaxTextureWidth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?EL3D_ConfirmDevice@@YAHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z
_TEXT	SEGMENT
_rkD3DCaps$ = 8						; size = 4
_uBehavior$ = 12					; size = 4
___formal$ = 16						; size = 4
?EL3D_ConfirmDevice@@YAHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z PROC ; EL3D_ConfirmDevice, COMDAT

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 310  : 	if (uBehavior & D3DCREATE_PUREDEVICE)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _uBehavior$[ebp]
  00006	a8 10		 test	 al, 16			; 00000010H
  00008	75 42		 jne	 SHORT $LN11@EL3D_Confi

; 311  :         return FALSE;
; 312  : 
; 313  : 	if (uBehavior & D3DCREATE_HARDWARE_VERTEXPROCESSING)

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _rkD3DCaps$[ebp]
  0000d	a8 40		 test	 al, 64			; 00000040H
  0000f	74 24		 je	 SHORT $LN9@EL3D_Confi

; 314  : 	{
; 315  : 		// DirectionalLight
; 316  : 		if (!(rkD3DCaps.VertexProcessingCaps & D3DVTXPCAPS_DIRECTIONALLIGHTS))

  00011	8b 81 9c 00 00
	00		 mov	 eax, DWORD PTR [ecx+156]
  00017	a8 08		 test	 al, 8
  00019	74 31		 je	 SHORT $LN11@EL3D_Confi

; 317  : 			return FALSE;
; 318  : 
; 319  : 		// PositionalLight
; 320  : 		if (!(rkD3DCaps.VertexProcessingCaps & D3DVTXPCAPS_POSITIONALLIGHTS))

  0001b	a8 10		 test	 al, 16			; 00000010H
  0001d	74 2d		 je	 SHORT $LN11@EL3D_Confi

; 321  : 			return FALSE;
; 322  : 
; 323  : 		// Software T&L Support - ATI NOT SUPPORT CLIP, USE DIRECTX SOFTWARE PROCESSING CLIPPING
; 324  : 		if (GRAPHICS_CAPS_SOFTWARE_TILING)

  0001f	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?GRAPHICS_CAPS_SOFTWARE_TILING@@3_NA, 0 ; GRAPHICS_CAPS_SOFTWARE_TILING
  00026	74 09		 je	 SHORT $LN6@EL3D_Confi

; 325  : 		{
; 326  : 			if (!(rkD3DCaps.PrimitiveMiscCaps & D3DPMISCCAPS_CLIPTLVERTS))

  00028	f7 41 20 00 02
	00 00		 test	 DWORD PTR [ecx+32], 512	; 00000200H
  0002f	eb 02		 jmp	 SHORT $LN16@EL3D_Confi
$LN6@EL3D_Confi:

; 327  : 				return FALSE;
; 328  : 		}
; 329  : 		else
; 330  : 		{
; 331  : 			// Shadow/Terrain
; 332  : 			if (!(rkD3DCaps.VertexProcessingCaps & D3DVTXPCAPS_TEXGEN))

  00031	a8 01		 test	 al, 1
$LN16@EL3D_Confi:

; 334  : 		}
; 335  : 	}
; 336  : 
; 337  : 	s_MaxTextureWidth = rkD3DCaps.MaxTextureWidth;

  00033	74 17		 je	 SHORT $LN11@EL3D_Confi
$LN9@EL3D_Confi:
  00035	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00038	a3 00 00 00 00	 mov	 DWORD PTR ?s_MaxTextureWidth@@3KA, eax

; 338  : 	s_MaxTextureHeight = rkD3DCaps.MaxTextureHeight;

  0003d	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00040	a3 00 00 00 00	 mov	 DWORD PTR ?s_MaxTextureHeight@@3KA, eax

; 339  : 
; 340  : 	return TRUE;

  00045	b8 01 00 00 00	 mov	 eax, 1

; 341  : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN11@EL3D_Confi:

; 333  : 				return FALSE;

  0004c	33 c0		 xor	 eax, eax

; 341  : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?EL3D_ConfirmDevice@@YAHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z ENDP ; EL3D_ConfirmDevice
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicDevice@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicDevice@@UAEPAXI@Z PROC			; CGraphicDevice::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicDevice@@UAE@XZ ; CGraphicDevice::~CGraphicDevice
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 14		 push	 20			; 00000014H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGraphicDevice@@UAEPAXI@Z ENDP			; CGraphicDevice::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map
;	COMDAT ??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z
_TEXT	SEGMENT
__Loc$2 = -32						; size = 12
$T3 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z PROC ; std::map<unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[], COMDAT
; _this$ = ecx

; 345  :     mapped_type& operator[](const key_type& _Keyval) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx

; 197  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00029	8b 75 08	 mov	 esi, DWORD PTR __Keyval$[ebp]
  0002c	8d 45 e0	 lea	 eax, DWORD PTR __Loc$2[ebp]
  0002f	56		 push	 esi
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Find_lower_bound@I@?$_Tree@V?$_Tmap_traits@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABI@Z ; std::_Tree<std::_Tmap_traits<unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned int>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00036	8b 55 e8	 mov	 edx, DWORD PTR __Loc$2[ebp+8]
  00039	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0003d	75 07		 jne	 SHORT $LN4@operator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00044	73 67		 jae	 SHORT $LN3@operator
$LN4@operator:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  00046	81 7f 04 5d 74
	d1 05		 cmp	 DWORD PTR [edi+4], 97612893 ; 05d1745dH
  0004d	74 74		 je	 SHORT $LN137@operator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 205  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  0004f	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00051	89 7d ec	 mov	 DWORD PTR $T3[ebp], edi

; 136  :         return ::operator new(_Bytes);

  00054	6a 2c		 push	 44			; 0000002cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0005d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  00069	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  0006b	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 478  :         : first(_STD _Tuple_get<_Indices1>(_STD move(_Val1))...),

  0006e	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00071	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00074	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 478  :         : first(_STD _Tuple_get<_Indices1>(_STD move(_Val1))...),

  00075	8b 00		 mov	 eax, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00077	ff 75 e4	 push	 DWORD PTR __Loc$2[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 478  :         : first(_STD _Tuple_get<_Indices1>(_STD move(_Val1))...),

  0007a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0007d	ff 75 e0	 push	 DWORD PTR __Loc$2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00080	0f 11 41 14	 movups	 XMMWORD PTR [ecx+20], xmm0

; 836  :         _My_data._Mysize = 0;

  00084	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0008b	c7 41 28 0f 00
	00 00		 mov	 DWORD PTR [ecx+40], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00092	c6 41 14 00	 mov	 BYTE PTR [ecx+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00096	89 31		 mov	 DWORD PTR [ecx], esi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00098	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0009b	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 824  :         this->_Ptr->_Color = _Red;

  0009e	66 c7 41 0c 00
	00		 mov	 WORD PTR [ecx+12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\map

; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000a4	8b cf		 mov	 ecx, edi
  000a6	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
  000ab	8b d0		 mov	 edx, eax
$LN3@operator:

; 346  :         return _Try_emplace(_Keyval).first->_Myval.second;

  000ad	8d 42 14	 lea	 eax, DWORD PTR [edx+20]

; 347  :     }

  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 04 00	 ret	 4
$LN137@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  000c3	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN135@operator:
  000c8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z ENDP ; std::map<unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?CreateDoublePNTStreamVertexShader@CGraphicDevice@@IAEKXZ
_TEXT	SEGMENT
_ret$ = -44						; size = 4
_declVector$ = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
?CreateDoublePNTStreamVertexShader@CGraphicDevice@@IAEKXZ PROC ; CGraphicDevice::CreateDoublePNTStreamVertexShader, COMDAT
; _this$ = ecx

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 205  : 	assert(ms_lpd3dDevice != NULL);
; 206  : 
; 207  : 	DWORD declVector[] =
; 208  : 	{
; 209  : 		D3DVSD_STREAM(0),
; 210  : 		D3DVSD_REG(0, D3DVSDT_FLOAT3),
; 211  : 		D3DVSD_REG(3, D3DVSDT_FLOAT3),
; 212  : 		D3DVSD_REG(7, D3DVSDT_FLOAT2),
; 213  : 		D3DVSD_STREAM(1),
; 214  : 		D3DVSD_REG(D3DVSDE_POSITION2, D3DVSDT_FLOAT3),
; 215  : 		D3DVSD_REG(D3DVSDE_NORMAL2, D3DVSDT_FLOAT3),
; 216  : 		D3DVSD_REG(D3DVSDE_TEXCOORD1, D3DVSDT_FLOAT2),
; 217  : 		D3DVSD_END()
; 218  : 	};
; 219  : 
; 220  : 	DWORD ret;
; 221  : 
; 222  : 	if (FAILED(ms_lpd3dDevice->CreateVertexShader(&declVector[0], NULL, &ret, 0)))

  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00016	8d 55 d4	 lea	 edx, DWORD PTR _ret$[ebp]
  00019	6a 00		 push	 0
  0001b	52		 push	 edx
  0001c	6a 00		 push	 0
  0001e	c7 45 d8 00 00
	00 20		 mov	 DWORD PTR _declVector$[ebp], 536870912 ; 20000000H
  00025	8d 55 d8	 lea	 edx, DWORD PTR _declVector$[ebp]
  00028	c7 45 dc 00 00
	02 40		 mov	 DWORD PTR _declVector$[ebp+4], 1073872896 ; 40020000H
  0002f	c7 45 e0 03 00
	02 40		 mov	 DWORD PTR _declVector$[ebp+8], 1073872899 ; 40020003H
  00036	c7 45 e4 07 00
	01 40		 mov	 DWORD PTR _declVector$[ebp+12], 1073807367 ; 40010007H
  0003d	c7 45 e8 01 00
	00 20		 mov	 DWORD PTR _declVector$[ebp+16], 536870913 ; 20000001H
  00044	c7 45 ec 0f 00
	02 40		 mov	 DWORD PTR _declVector$[ebp+20], 1073872911 ; 4002000fH
  0004b	c7 45 f0 10 00
	02 40		 mov	 DWORD PTR _declVector$[ebp+24], 1073872912 ; 40020010H
  00052	c7 45 f4 08 00
	01 40		 mov	 DWORD PTR _declVector$[ebp+28], 1073807368 ; 40010008H
  00059	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _declVector$[ebp+32], -1
  00060	8b 01		 mov	 eax, DWORD PTR [ecx]
  00062	52		 push	 edx
  00063	51		 push	 ecx
  00064	ff 90 2c 01 00
	00		 call	 DWORD PTR [eax+300]
  0006a	8b 4d d4	 mov	 ecx, DWORD PTR _ret$[ebp]
  0006d	33 d2		 xor	 edx, edx
  0006f	85 c0		 test	 eax, eax
  00071	0f 48 ca	 cmovs	 ecx, edx
  00074	8b c1		 mov	 eax, ecx

; 223  : 		return 0;
; 224  : 
; 225  : 	return ret;
; 226  : }

  00076	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00079	33 cd		 xor	 ecx, ebp
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?CreateDoublePNTStreamVertexShader@CGraphicDevice@@IAEKXZ ENDP ; CGraphicDevice::CreateDoublePNTStreamVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?CreatePNT2StreamVertexShader@CGraphicDevice@@IAEKXZ
_TEXT	SEGMENT
_ret$ = -32						; size = 4
_declVector$ = -28					; size = 24
__$ArrayPad$ = -4					; size = 4
?CreatePNT2StreamVertexShader@CGraphicDevice@@IAEKXZ PROC ; CGraphicDevice::CreatePNT2StreamVertexShader, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 161  : 	assert(ms_lpd3dDevice != NULL);
; 162  : 
; 163  : 	DWORD declVector[] =
; 164  : 	{
; 165  : 		D3DVSD_STREAM(0),
; 166  : 		D3DVSD_REG(0, D3DVSDT_FLOAT3),
; 167  : 		D3DVSD_REG(3, D3DVSDT_FLOAT3),
; 168  : 		D3DVSD_REG(7, D3DVSDT_FLOAT2),
; 169  : 		D3DVSD_REG(D3DVSDE_TEXCOORD1, D3DVSDT_FLOAT2),
; 170  : //		D3DVSD_STREAM(1),
; 171  : 		D3DVSD_END()
; 172  : 	};
; 173  : 
; 174  : 	DWORD ret;
; 175  : 
; 176  : 	if (FAILED(ms_lpd3dDevice->CreateVertexShader(&declVector[0], NULL, &ret, 0)))

  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00016	8d 55 e0	 lea	 edx, DWORD PTR _ret$[ebp]
  00019	6a 00		 push	 0
  0001b	52		 push	 edx
  0001c	6a 00		 push	 0
  0001e	c7 45 e4 00 00
	00 20		 mov	 DWORD PTR _declVector$[ebp], 536870912 ; 20000000H
  00025	8d 55 e4	 lea	 edx, DWORD PTR _declVector$[ebp]
  00028	c7 45 e8 00 00
	02 40		 mov	 DWORD PTR _declVector$[ebp+4], 1073872896 ; 40020000H
  0002f	c7 45 ec 03 00
	02 40		 mov	 DWORD PTR _declVector$[ebp+8], 1073872899 ; 40020003H
  00036	c7 45 f0 07 00
	01 40		 mov	 DWORD PTR _declVector$[ebp+12], 1073807367 ; 40010007H
  0003d	c7 45 f4 08 00
	01 40		 mov	 DWORD PTR _declVector$[ebp+16], 1073807368 ; 40010008H
  00044	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _declVector$[ebp+20], -1
  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	52		 push	 edx
  0004e	51		 push	 ecx
  0004f	ff 90 2c 01 00
	00		 call	 DWORD PTR [eax+300]
  00055	8b 4d e0	 mov	 ecx, DWORD PTR _ret$[ebp]
  00058	33 d2		 xor	 edx, edx
  0005a	85 c0		 test	 eax, eax
  0005c	0f 48 ca	 cmovs	 ecx, edx
  0005f	8b c1		 mov	 eax, ecx

; 177  : 		return 0;
; 178  : 
; 179  : 	return ret;
; 180  : }

  00061	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00064	33 cd		 xor	 ecx, ebp
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?CreatePNT2StreamVertexShader@CGraphicDevice@@IAEKXZ ENDP ; CGraphicDevice::CreatePNT2StreamVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?CreatePNTStreamVertexShader@CGraphicDevice@@IAEKXZ
_TEXT	SEGMENT
_ret$ = -28						; size = 4
_declVector$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
?CreatePNTStreamVertexShader@CGraphicDevice@@IAEKXZ PROC ; CGraphicDevice::CreatePNTStreamVertexShader, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 140  : 	assert(ms_lpd3dDevice != NULL);
; 141  : 
; 142  : 	DWORD declVector[] =
; 143  : 	{
; 144  : 		D3DVSD_STREAM(0),
; 145  : 		D3DVSD_REG(0, D3DVSDT_FLOAT3),
; 146  : 		D3DVSD_REG(3, D3DVSDT_FLOAT3),
; 147  : 		D3DVSD_REG(7, D3DVSDT_FLOAT2),
; 148  : 		D3DVSD_END()
; 149  : 	};
; 150  : 
; 151  : 	DWORD ret;
; 152  : 
; 153  : 	if (FAILED(ms_lpd3dDevice->CreateVertexShader(&declVector[0], NULL, &ret, 0)))

  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00016	8d 55 e4	 lea	 edx, DWORD PTR _ret$[ebp]
  00019	6a 00		 push	 0
  0001b	52		 push	 edx
  0001c	6a 00		 push	 0
  0001e	c7 45 e8 00 00
	00 20		 mov	 DWORD PTR _declVector$[ebp], 536870912 ; 20000000H
  00025	8d 55 e8	 lea	 edx, DWORD PTR _declVector$[ebp]
  00028	c7 45 ec 00 00
	02 40		 mov	 DWORD PTR _declVector$[ebp+4], 1073872896 ; 40020000H
  0002f	c7 45 f0 03 00
	02 40		 mov	 DWORD PTR _declVector$[ebp+8], 1073872899 ; 40020003H
  00036	c7 45 f4 07 00
	01 40		 mov	 DWORD PTR _declVector$[ebp+12], 1073807367 ; 40010007H
  0003d	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _declVector$[ebp+16], -1
  00044	8b 01		 mov	 eax, DWORD PTR [ecx]
  00046	52		 push	 edx
  00047	51		 push	 ecx
  00048	ff 90 2c 01 00
	00		 call	 DWORD PTR [eax+300]
  0004e	8b 4d e4	 mov	 ecx, DWORD PTR _ret$[ebp]
  00051	33 d2		 xor	 edx, edx
  00053	85 c0		 test	 eax, eax
  00055	0f 48 ca	 cmovs	 ecx, edx
  00058	8b c1		 mov	 eax, ecx

; 154  : 		return 0;
; 155  : 
; 156  : 	return ret;
; 157  : }

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005d	33 cd		 xor	 ecx, ebp
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?CreatePNTStreamVertexShader@CGraphicDevice@@IAEKXZ ENDP ; CGraphicDevice::CreatePNTStreamVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?CreatePTStreamVertexShader@CGraphicDevice@@IAEKXZ
_TEXT	SEGMENT
_ret$ = -28						; size = 4
_declVector$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
?CreatePTStreamVertexShader@CGraphicDevice@@IAEKXZ PROC	; CGraphicDevice::CreatePTStreamVertexShader, COMDAT
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 184  : 	assert(ms_lpd3dDevice != NULL);
; 185  : 
; 186  : 	DWORD declVector[] =
; 187  : 	{
; 188  : 		D3DVSD_STREAM(0),
; 189  : 		D3DVSD_REG(0, D3DVSDT_FLOAT3),
; 190  : 		D3DVSD_STREAM(1),
; 191  : 		D3DVSD_REG(7, D3DVSDT_FLOAT2),
; 192  : 		D3DVSD_END()
; 193  : 	};
; 194  : 
; 195  : 	DWORD ret;
; 196  : 
; 197  : 	if (FAILED(ms_lpd3dDevice->CreateVertexShader(&declVector[0], NULL, &ret, 0)))

  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00016	8d 55 e4	 lea	 edx, DWORD PTR _ret$[ebp]
  00019	6a 00		 push	 0
  0001b	52		 push	 edx
  0001c	6a 00		 push	 0
  0001e	c7 45 e8 00 00
	00 20		 mov	 DWORD PTR _declVector$[ebp], 536870912 ; 20000000H
  00025	8d 55 e8	 lea	 edx, DWORD PTR _declVector$[ebp]
  00028	c7 45 ec 00 00
	02 40		 mov	 DWORD PTR _declVector$[ebp+4], 1073872896 ; 40020000H
  0002f	c7 45 f0 01 00
	00 20		 mov	 DWORD PTR _declVector$[ebp+8], 536870913 ; 20000001H
  00036	c7 45 f4 07 00
	01 40		 mov	 DWORD PTR _declVector$[ebp+12], 1073807367 ; 40010007H
  0003d	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _declVector$[ebp+16], -1
  00044	8b 01		 mov	 eax, DWORD PTR [ecx]
  00046	52		 push	 edx
  00047	51		 push	 ecx
  00048	ff 90 2c 01 00
	00		 call	 DWORD PTR [eax+300]
  0004e	8b 4d e4	 mov	 ecx, DWORD PTR _ret$[ebp]
  00051	33 d2		 xor	 edx, edx
  00053	85 c0		 test	 eax, eax
  00055	0f 48 ca	 cmovs	 ecx, edx
  00058	8b c1		 mov	 eax, ecx

; 198  : 		return 0;
; 199  : 
; 200  : 	return (ret);
; 201  : }

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005d	33 cd		 xor	 ecx, ebp
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?CreatePTStreamVertexShader@CGraphicDevice@@IAEKXZ ENDP	; CGraphicDevice::CreatePTStreamVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?__CreatePDTVertexBufferList@CGraphicDevice@@IAE_NXZ
_TEXT	SEGMENT
?__CreatePDTVertexBufferList@CGraphicDevice@@IAE_NXZ PROC ; CGraphicDevice::__CreatePDTVertexBufferList, COMDAT
; _this$ = ecx

; 707  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 708  : 	for (UINT i=0; i<PDT_VERTEXBUFFER_NUM; ++i)

  00002	bf 00 00 00 00	 mov	 edi, OFFSET ?ms_alpd3dPDTVB@CGraphicBase@@1PAPAUIDirect3DVertexBuffer8@@A ; CGraphicBase::ms_alpd3dPDTVB
  00007	33 f6		 xor	 esi, esi
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@CreatePDTV:

; 709  : 	{
; 710  : 		if (FAILED(

  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00016	57		 push	 edi
  00017	6a 02		 push	 2
  00019	68 42 01 00 00	 push	 322			; 00000142H
  0001e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00020	68 08 02 00 00	 push	 520			; 00000208H
  00025	68 80 01 00 00	 push	 384			; 00000180H
  0002a	51		 push	 ecx
  0002b	ff 50 5c	 call	 DWORD PTR [eax+92]
  0002e	85 c0		 test	 eax, eax
  00030	78 13		 js	 SHORT $LN8@CreatePDTV

; 708  : 	for (UINT i=0; i<PDT_VERTEXBUFFER_NUM; ++i)

  00032	83 c6 04	 add	 esi, 4
  00035	83 c7 04	 add	 edi, 4
  00038	81 fe 90 01 00
	00		 cmp	 esi, 400		; 00000190H
  0003e	72 d0		 jb	 SHORT $LL4@CreatePDTV

; 719  : 	}
; 720  : 	return true;

  00040	5f		 pop	 edi
  00041	b0 01		 mov	 al, 1

; 721  : }

  00043	5e		 pop	 esi
  00044	c3		 ret	 0
$LN8@CreatePDTV:
  00045	5f		 pop	 edi

; 711  : 			ms_lpd3dDevice->CreateVertexBuffer(
; 712  : 			sizeof(TPDTVertex)*PDT_VERTEX_NUM,
; 713  : 			D3DUSAGE_DYNAMIC|D3DUSAGE_WRITEONLY,
; 714  : 			D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1,
; 715  : 			D3DPOOL_SYSTEMMEM,
; 716  : 			&ms_alpd3dPDTVB[i])
; 717  : 		))
; 718  : 		return false;

  00046	32 c0		 xor	 al, al

; 721  : }

  00048	5e		 pop	 esi
  00049	c3		 ret	 0
?__CreatePDTVertexBufferList@CGraphicDevice@@IAE_NXZ ENDP ; CGraphicDevice::__CreatePDTVertexBufferList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?__DestroyPDTVertexBufferList@CGraphicDevice@@IAEXXZ
_TEXT	SEGMENT
?__DestroyPDTVertexBufferList@CGraphicDevice@@IAEXXZ PROC ; CGraphicDevice::__DestroyPDTVertexBufferList, COMDAT
; _this$ = ecx

; 695  : {

  00000	56		 push	 esi

; 696  : 	for (UINT i=0; i<PDT_VERTEXBUFFER_NUM; ++i)

  00001	33 f6		 xor	 esi, esi
$LL4@DestroyPDT:

; 697  : 	{
; 698  : 		if (ms_alpd3dPDTVB[i])

  00003	8b 8e 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_alpd3dPDTVB@CGraphicBase@@1PAPAUIDirect3DVertexBuffer8@@A[esi]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 10		 je	 SHORT $LN2@DestroyPDT

; 699  : 		{
; 700  : 			ms_alpd3dPDTVB[i]->Release();

  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	51		 push	 ecx
  00010	ff 50 08	 call	 DWORD PTR [eax+8]

; 701  : 			ms_alpd3dPDTVB[i]=NULL;

  00013	c7 86 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_alpd3dPDTVB@CGraphicBase@@1PAPAUIDirect3DVertexBuffer8@@A[esi], 0
$LN2@DestroyPDT:

; 696  : 	for (UINT i=0; i<PDT_VERTEXBUFFER_NUM; ++i)

  0001d	83 c6 04	 add	 esi, 4
  00020	81 fe 90 01 00
	00		 cmp	 esi, 400		; 00000190H
  00026	72 db		 jb	 SHORT $LL4@DestroyPDT
  00028	5e		 pop	 esi

; 702  : 		}
; 703  : 	}
; 704  : }

  00029	c3		 ret	 0
?__DestroyPDTVertexBufferList@CGraphicDevice@@IAEXXZ ENDP ; CGraphicDevice::__DestroyPDTVertexBufferList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?__InitializePDTVertexBufferList@CGraphicDevice@@IAEXXZ
_TEXT	SEGMENT
?__InitializePDTVertexBufferList@CGraphicDevice@@IAEXXZ PROC ; CGraphicDevice::__InitializePDTVertexBufferList, COMDAT
; _this$ = ecx

; 689  : {

  00000	57		 push	 edi

; 690  : 	for (UINT i=0; i<PDT_VERTEXBUFFER_NUM; ++i)

  00001	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00006	33 c0		 xor	 eax, eax
  00008	bf 00 00 00 00	 mov	 edi, OFFSET ?ms_alpd3dPDTVB@CGraphicBase@@1PAPAUIDirect3DVertexBuffer8@@A ; CGraphicBase::ms_alpd3dPDTVB
  0000d	f3 ab		 rep stosd
  0000f	5f		 pop	 edi

; 691  : 		ms_alpd3dPDTVB[i]=NULL;
; 692  : }

  00010	c3		 ret	 0
?__InitializePDTVertexBufferList@CGraphicDevice@@IAEXXZ ENDP ; CGraphicDevice::__InitializePDTVertexBufferList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?__CreateDefaultIndexBuffer@CGraphicDevice@@IAE_NIIPBG@Z
_TEXT	SEGMENT
_eDefIB$ = 8						; size = 4
_dstIndices$ = 8					; size = 4
_uIdxCount$ = 12					; size = 4
_c_awIndices$ = 16					; size = 4
?__CreateDefaultIndexBuffer@CGraphicDevice@@IAE_NIIPBG@Z PROC ; CGraphicDevice::__CreateDefaultIndexBuffer, COMDAT
; _this$ = ecx

; 741  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 742  : 	assert(ms_alpd3dDefIB[eDefIB]==NULL);
; 743  : 
; 744  : 	if (FAILED(

  00003	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00010	8b 45 08	 mov	 eax, DWORD PTR _eDefIB$[ebp]
  00013	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR ?ms_alpd3dDefIB@CGraphicBase@@1PAPAUIDirect3DIndexBuffer8@@A[eax*4]
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _uIdxCount$[ebp]
  0001d	56		 push	 esi
  0001e	6a 01		 push	 1
  00020	6a 65		 push	 101			; 00000065H
  00022	6a 08		 push	 8
  00024	8d 3c 00	 lea	 edi, DWORD PTR [eax+eax]
  00027	57		 push	 edi
  00028	52		 push	 edx
  00029	ff d1		 call	 ecx
  0002b	85 c0		 test	 eax, eax
  0002d	78 35		 js	 SHORT $LN5@CreateDefa

; 745  : 		ms_lpd3dDevice->CreateIndexBuffer(
; 746  : 			sizeof(WORD)*uIdxCount,
; 747  : 			D3DUSAGE_WRITEONLY,
; 748  : 			D3DFMT_INDEX16,
; 749  : 			D3DPOOL_MANAGED,
; 750  : 			&ms_alpd3dDefIB[eDefIB])
; 751  : 	)) return false;
; 752  : 
; 753  : 	WORD* dstIndices;
; 754  : 	if (FAILED(

  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	8d 55 08	 lea	 edx, DWORD PTR _dstIndices$[ebp]
  00034	6a 00		 push	 0
  00036	52		 push	 edx
  00037	6a 00		 push	 0
  00039	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003b	6a 00		 push	 0
  0003d	51		 push	 ecx
  0003e	ff 50 2c	 call	 DWORD PTR [eax+44]
  00041	85 c0		 test	 eax, eax
  00043	78 1f		 js	 SHORT $LN5@CreateDefa

; 757  : 
; 758  : 	memcpy(dstIndices, c_awIndices, sizeof(WORD)*uIdxCount);

  00045	57		 push	 edi
  00046	ff 75 10	 push	 DWORD PTR _c_awIndices$[ebp]
  00049	ff 75 08	 push	 DWORD PTR _dstIndices$[ebp]
  0004c	e8 00 00 00 00	 call	 _memcpy

; 759  : 
; 760  : 	ms_alpd3dDefIB[eDefIB]->Unlock();

  00051	8b 06		 mov	 eax, DWORD PTR [esi]
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	50		 push	 eax
  00059	ff 51 30	 call	 DWORD PTR [ecx+48]
  0005c	5f		 pop	 edi

; 761  : 
; 762  : 	return true;

  0005d	b0 01		 mov	 al, 1

; 763  : }

  0005f	5e		 pop	 esi
  00060	5d		 pop	 ebp
  00061	c2 0c 00	 ret	 12			; 0000000cH
$LN5@CreateDefa:
  00064	5f		 pop	 edi

; 755  : 		ms_alpd3dDefIB[eDefIB]->Lock(0, 0, (BYTE**)&dstIndices, 0)
; 756  : 	)) return false;

  00065	32 c0		 xor	 al, al

; 763  : }

  00067	5e		 pop	 esi
  00068	5d		 pop	 ebp
  00069	c2 0c 00	 ret	 12			; 0000000cH
?__CreateDefaultIndexBuffer@CGraphicDevice@@IAE_NIIPBG@Z ENDP ; CGraphicDevice::__CreateDefaultIndexBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ
_TEXT	SEGMENT
?__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ PROC ; CGraphicDevice::__CreateDefaultIndexBufferList, COMDAT
; _this$ = ecx

; 766  : {

  00000	56		 push	 esi

; 767  : 	static const WORD c_awLineIndices[2] = { 0, 1, };
; 768  : 	static const WORD c_awLineTriIndices[6] = { 0, 1, 0, 2, 1, 2, };
; 769  : 	static const WORD c_awLineRectIndices[8] = { 0, 1, 0, 2, 1, 3, 2, 3,};
; 770  : 	static const WORD c_awLineCubeIndices[24] = {
; 771  : 		0, 1, 0, 2, 1, 3, 2, 3,
; 772  : 		0, 4, 1, 5, 2, 6, 3, 7,
; 773  : 		4, 5, 4, 6, 5, 7, 6, 7,
; 774  : 	};
; 775  : 	static const WORD c_awFillTriIndices[3]= { 0, 1, 2, };
; 776  : 	static const WORD c_awFillRectIndices[6] = { 0, 2, 1, 2, 3, 1, };
; 777  : 	static const WORD c_awFillCubeIndices[36] = {
; 778  : 		0, 1, 2, 1, 3, 2,
; 779  : 		2, 0, 6, 0, 4, 6,
; 780  : 		0, 1, 4, 1, 5, 4,
; 781  : 		1, 3, 5, 3, 7, 5,
; 782  : 		3, 2, 7, 2, 6, 7,
; 783  : 		4, 5, 6, 5, 7, 6,
; 784  : 	};
; 785  : 
; 786  : 	if (!__CreateDefaultIndexBuffer(DEFAULT_IB_LINE, 2, c_awLineIndices))

  00001	68 00 00 00 00	 push	 OFFSET ?c_awLineIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
  00006	6a 02		 push	 2
  00008	6a 00		 push	 0
  0000a	8b f1		 mov	 esi, ecx
  0000c	e8 00 00 00 00	 call	 ?__CreateDefaultIndexBuffer@CGraphicDevice@@IAE_NIIPBG@Z ; CGraphicDevice::__CreateDefaultIndexBuffer
  00011	84 c0		 test	 al, al
  00013	74 7b		 je	 SHORT $LN10@CreateDefa

; 787  : 		return false;
; 788  : 	if (!__CreateDefaultIndexBuffer(DEFAULT_IB_LINE_TRI, 6, c_awLineTriIndices))

  00015	68 00 00 00 00	 push	 OFFSET ?c_awLineTriIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
  0001a	6a 06		 push	 6
  0001c	6a 01		 push	 1
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?__CreateDefaultIndexBuffer@CGraphicDevice@@IAE_NIIPBG@Z ; CGraphicDevice::__CreateDefaultIndexBuffer
  00025	84 c0		 test	 al, al
  00027	74 67		 je	 SHORT $LN10@CreateDefa

; 789  : 		return false;
; 790  : 	if (!__CreateDefaultIndexBuffer(DEFAULT_IB_LINE_RECT, 8, c_awLineRectIndices))

  00029	68 00 00 00 00	 push	 OFFSET ?c_awLineRectIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
  0002e	6a 08		 push	 8
  00030	6a 02		 push	 2
  00032	8b ce		 mov	 ecx, esi
  00034	e8 00 00 00 00	 call	 ?__CreateDefaultIndexBuffer@CGraphicDevice@@IAE_NIIPBG@Z ; CGraphicDevice::__CreateDefaultIndexBuffer
  00039	84 c0		 test	 al, al
  0003b	74 53		 je	 SHORT $LN10@CreateDefa

; 791  : 		return false;
; 792  : 	if (!__CreateDefaultIndexBuffer(DEFAULT_IB_LINE_CUBE, 24, c_awLineCubeIndices))

  0003d	68 00 00 00 00	 push	 OFFSET ?c_awLineCubeIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
  00042	6a 18		 push	 24			; 00000018H
  00044	6a 03		 push	 3
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?__CreateDefaultIndexBuffer@CGraphicDevice@@IAE_NIIPBG@Z ; CGraphicDevice::__CreateDefaultIndexBuffer
  0004d	84 c0		 test	 al, al
  0004f	74 3f		 je	 SHORT $LN10@CreateDefa

; 793  : 		return false;
; 794  : 	if (!__CreateDefaultIndexBuffer(DEFAULT_IB_FILL_TRI, 3, c_awFillTriIndices))

  00051	68 00 00 00 00	 push	 OFFSET ?c_awFillTriIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
  00056	6a 03		 push	 3
  00058	6a 04		 push	 4
  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?__CreateDefaultIndexBuffer@CGraphicDevice@@IAE_NIIPBG@Z ; CGraphicDevice::__CreateDefaultIndexBuffer
  00061	84 c0		 test	 al, al
  00063	74 2b		 je	 SHORT $LN10@CreateDefa

; 795  : 		return false;
; 796  : 	if (!__CreateDefaultIndexBuffer(DEFAULT_IB_FILL_RECT, 6, c_awFillRectIndices))

  00065	68 00 00 00 00	 push	 OFFSET ?c_awFillRectIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
  0006a	6a 06		 push	 6
  0006c	6a 05		 push	 5
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?__CreateDefaultIndexBuffer@CGraphicDevice@@IAE_NIIPBG@Z ; CGraphicDevice::__CreateDefaultIndexBuffer
  00075	84 c0		 test	 al, al
  00077	74 17		 je	 SHORT $LN10@CreateDefa

; 797  : 		return false;
; 798  : 	if (!__CreateDefaultIndexBuffer(DEFAULT_IB_FILL_CUBE, 36, c_awFillCubeIndices))

  00079	68 00 00 00 00	 push	 OFFSET ?c_awFillCubeIndices@?1??__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ@4QBGB
  0007e	6a 24		 push	 36			; 00000024H
  00080	6a 06		 push	 6
  00082	8b ce		 mov	 ecx, esi
  00084	e8 00 00 00 00	 call	 ?__CreateDefaultIndexBuffer@CGraphicDevice@@IAE_NIIPBG@Z ; CGraphicDevice::__CreateDefaultIndexBuffer
  00089	84 c0		 test	 al, al
  0008b	5e		 pop	 esi
  0008c	0f 95 c0	 setne	 al

; 800  : 
; 801  : 	return true;
; 802  : }

  0008f	c3		 ret	 0
$LN10@CreateDefa:

; 799  : 		return false;

  00090	32 c0		 xor	 al, al
  00092	5e		 pop	 esi

; 800  : 
; 801  : 	return true;
; 802  : }

  00093	c3		 ret	 0
?__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ ENDP ; CGraphicDevice::__CreateDefaultIndexBufferList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?__DestroyDefaultIndexBufferList@CGraphicDevice@@IAEXXZ
_TEXT	SEGMENT
?__DestroyDefaultIndexBufferList@CGraphicDevice@@IAEXXZ PROC ; CGraphicDevice::__DestroyDefaultIndexBufferList, COMDAT
; _this$ = ecx

; 731  : {

  00000	56		 push	 esi

; 732  : 	for (UINT i=0; i<DEFAULT_IB_NUM; ++i)

  00001	33 f6		 xor	 esi, esi
$LL4@DestroyDef:

; 733  : 		if (ms_alpd3dDefIB[i])

  00003	8b 8e 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_alpd3dDefIB@CGraphicBase@@1PAPAUIDirect3DIndexBuffer8@@A[esi]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 10		 je	 SHORT $LN2@DestroyDef

; 734  : 		{
; 735  : 			ms_alpd3dDefIB[i]->Release();

  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	51		 push	 ecx
  00010	ff 50 08	 call	 DWORD PTR [eax+8]

; 736  : 			ms_alpd3dDefIB[i]=NULL;

  00013	c7 86 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_alpd3dDefIB@CGraphicBase@@1PAPAUIDirect3DIndexBuffer8@@A[esi], 0
$LN2@DestroyDef:

; 732  : 	for (UINT i=0; i<DEFAULT_IB_NUM; ++i)

  0001d	83 c6 04	 add	 esi, 4
  00020	83 fe 1c	 cmp	 esi, 28			; 0000001cH
  00023	72 de		 jb	 SHORT $LL4@DestroyDef
  00025	5e		 pop	 esi

; 737  : 		}
; 738  : }

  00026	c3		 ret	 0
?__DestroyDefaultIndexBufferList@CGraphicDevice@@IAEXXZ ENDP ; CGraphicDevice::__DestroyDefaultIndexBufferList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?__InitializeDefaultIndexBufferList@CGraphicDevice@@IAEXXZ
_TEXT	SEGMENT
?__InitializeDefaultIndexBufferList@CGraphicDevice@@IAEXXZ PROC ; CGraphicDevice::__InitializeDefaultIndexBufferList, COMDAT
; _this$ = ecx

; 725  : {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 726  : 	for (UINT i=0; i<DEFAULT_IB_NUM; ++i)
; 727  : 		ms_alpd3dDefIB[i]=NULL;

  00003	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_alpd3dDefIB@CGraphicBase@@1PAPAUIDirect3DIndexBuffer8@@A+16, 0
  0000d	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?ms_alpd3dDefIB@CGraphicBase@@1PAPAUIDirect3DIndexBuffer8@@A, xmm0
  00014	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_alpd3dDefIB@CGraphicBase@@1PAPAUIDirect3DIndexBuffer8@@A+20, 0
  0001e	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_alpd3dDefIB@CGraphicBase@@1PAPAUIDirect3DIndexBuffer8@@A+24, 0

; 728  : }

  00028	c3		 ret	 0
?__InitializeDefaultIndexBufferList@CGraphicDevice@@IAEXXZ ENDP ; CGraphicDevice::__InitializeDefaultIndexBufferList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?__WarningMessage@CGraphicDevice@@IAEXPAUHWND__@@I@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_hWnd$ = 8						; size = 4
_uiMsg$ = 12						; size = 4
?__WarningMessage@CGraphicDevice@@IAEXPAUHWND__@@I@Z PROC ; CGraphicDevice::__WarningMessage, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 0c	 lea	 eax, DWORD PTR _uiMsg$[ebp]
  0000a	50		 push	 eax

; 1142 :         return iterator(_Scary->_Myhead, _Scary);

  0000b	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@I@?$_Tree@V?$_Tmap_traits@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABI@Z ; std::_Tree<std::_Tmap_traits<unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned int>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 55 fc	 mov	 edx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00020	75 33		 jne	 SHORT $LN1@WarningMes
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00022	8b 45 0c	 mov	 eax, DWORD PTR _uiMsg$[ebp]
  00025	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 2b		 jb	 SHORT $LN1@WarningMes

; 232  :         return this->_Ptr == _Right._Ptr;

  0002a	39 16		 cmp	 DWORD PTR [esi], edx
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 53   : 	if (m_kMap_strWarningMessage.end() == m_kMap_strWarningMessage.find(uiMsg))

  0002c	74 27		 je	 SHORT $LN1@WarningMes

; 55   : 	MessageBox(hWnd, m_kMap_strWarningMessage[uiMsg].c_str(), "Warning", MB_OK|MB_TOPMOST);

  0002e	8d 45 0c	 lea	 eax, DWORD PTR _uiMsg$[ebp]
  00031	8b ce		 mov	 ecx, esi
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z ; std::map<unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00039	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0003d	76 02		 jbe	 SHORT $LN44@WarningMes

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN44@WarningMes:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 55   : 	MessageBox(hWnd, m_kMap_strWarningMessage[uiMsg].c_str(), "Warning", MB_OK|MB_TOPMOST);

  00041	68 00 00 04 00	 push	 262144			; 00040000H
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_07KGMMFLDN@Warning@
  0004b	50		 push	 eax
  0004c	ff 75 08	 push	 DWORD PTR _hWnd$[ebp]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
$LN1@WarningMes:
  00055	5e		 pop	 esi

; 56   : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
?__WarningMessage@CGraphicDevice@@IAEXPAUHWND__@@I@Z ENDP ; CGraphicDevice::__WarningMessage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?__IsInDriverBlackList@CGraphicDevice@@IAE_NAAVD3D_CAdapterInfo@@@Z
_TEXT	SEGMENT
_dwChkLowVersion$1 = -784				; size = 4
_dwChkHighVersion$2 = -780				; size = 4
_ret$1$ = -773						; size = 1
_szSrcDriver$ = -772					; size = 256
_szChkDriver$3 = -516					; size = 256
_szLine$4 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_rkD3DAdapterInfo$ = 8					; size = 4
?__IsInDriverBlackList@CGraphicDevice@@IAE_NAAVD3D_CAdapterInfo@@@Z PROC ; CGraphicDevice::__IsInDriverBlackList, COMDAT
; _this$ = ecx

; 354  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 03 00
	00		 sub	 esp, 784		; 00000310H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _rkD3DAdapterInfo$[ebp]

; 355  : 	D3DADAPTER_IDENTIFIER8& rkD3DAdapterIdentifier=rkD3DAdapterInfo.GetIdentifier();
; 356  : 
; 357  : 	char szSrcDriver[256];
; 358  : 	strncpy(szSrcDriver, rkD3DAdapterIdentifier.Driver, sizeof(szSrcDriver)-1);

  00018	8d 85 fc fc ff
	ff		 lea	 eax, DWORD PTR _szSrcDriver$[ebp]
  0001e	57		 push	 edi
  0001f	68 ff 00 00 00	 push	 255			; 000000ffH
  00024	56		 push	 esi
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _strncpy

; 359  : 	DWORD dwSrcHighVersion=rkD3DAdapterIdentifier.DriverVersion.QuadPart>>32;

  0002b	8b 9e 00 04 00
	00		 mov	 ebx, DWORD PTR [esi+1024]
  00031	8b be 04 04 00
	00		 mov	 edi, DWORD PTR [esi+1028]

; 360  : 	DWORD dwSrcLowVersion=rkD3DAdapterIdentifier.DriverVersion.QuadPart&0xffffffff;
; 361  : 
; 362  : 	bool ret=false;
; 363  : 
; 364  : 	FILE* fp=fopen("grpblk.txt", "r");

  00037	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NIHOAGKC@grpblk?4txt@
  00041	c6 85 fb fc ff
	ff 00		 mov	 BYTE PTR _ret$1$[ebp], 0
  00048	e8 00 00 00 00	 call	 _fopen
  0004d	8b f0		 mov	 esi, eax
  0004f	83 c4 14	 add	 esp, 20			; 00000014H

; 365  : 	if (fp)

  00052	85 f6		 test	 esi, esi
  00054	0f 84 ca 00 00
	00		 je	 $LN21@IsInDriver

; 366  : 	{
; 367  : 		DWORD dwChkHighVersion;
; 368  : 		DWORD dwChkLowVersion;
; 369  : 
; 370  : 		char szChkDriver[256];
; 371  : 
; 372  : 		char szLine[256];
; 373  : 		while (fgets(szLine, sizeof(szLine)-1, fp))

  0005a	56		 push	 esi
  0005b	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szLine$4[ebp]
  00061	68 ff 00 00 00	 push	 255			; 000000ffH
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _fgets
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	85 c0		 test	 eax, eax
  00071	0f 84 a4 00 00
	00		 je	 $LN14@IsInDriver
  00077	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@IsInDriver:

; 374  : 		{
; 375  : 			sscanf(szLine, "%s %x %x", szChkDriver, &dwChkHighVersion, &dwChkLowVersion);

  00080	8d 85 f0 fc ff
	ff		 lea	 eax, DWORD PTR _dwChkLowVersion$1[ebp]
  00086	50		 push	 eax
  00087	8d 85 f4 fc ff
	ff		 lea	 eax, DWORD PTR _dwChkHighVersion$2[ebp]
  0008d	50		 push	 eax
  0008e	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szChkDriver$3[ebp]
  00094	50		 push	 eax
  00095	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szLine$4[ebp]
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_08NLGDGEBC@?$CFs?5?$CFx?5?$CFx@
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 _sscanf
  000a6	83 c4 14	 add	 esp, 20			; 00000014H

; 376  : 
; 377  : 			if (strcmp(szSrcDriver, szChkDriver)==0)

  000a9	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szChkDriver$3[ebp]
  000af	8d 8d fc fc ff
	ff		 lea	 ecx, DWORD PTR _szSrcDriver$[ebp]
$LL17@IsInDriver:
  000b5	8a 11		 mov	 dl, BYTE PTR [ecx]
  000b7	3a 10		 cmp	 dl, BYTE PTR [eax]
  000b9	75 1a		 jne	 SHORT $LN18@IsInDriver
  000bb	84 d2		 test	 dl, dl
  000bd	74 12		 je	 SHORT $LN19@IsInDriver
  000bf	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  000c2	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  000c5	75 0e		 jne	 SHORT $LN18@IsInDriver
  000c7	83 c1 02	 add	 ecx, 2
  000ca	83 c0 02	 add	 eax, 2
  000cd	84 d2		 test	 dl, dl
  000cf	75 e4		 jne	 SHORT $LL17@IsInDriver
$LN19@IsInDriver:
  000d1	33 c0		 xor	 eax, eax
  000d3	eb 05		 jmp	 SHORT $LN20@IsInDriver
$LN18@IsInDriver:
  000d5	1b c0		 sbb	 eax, eax
  000d7	83 c8 01	 or	 eax, 1
$LN20@IsInDriver:
  000da	85 c0		 test	 eax, eax
  000dc	75 10		 jne	 SHORT $LN7@IsInDriver

; 378  : 				if (dwSrcHighVersion==dwChkHighVersion)

  000de	3b bd f4 fc ff
	ff		 cmp	 edi, DWORD PTR _dwChkHighVersion$2[ebp]
  000e4	75 08		 jne	 SHORT $LN7@IsInDriver

; 379  : 					if (dwSrcLowVersion==dwChkLowVersion)

  000e6	3b 9d f0 fc ff
	ff		 cmp	 ebx, DWORD PTR _dwChkLowVersion$1[ebp]
  000ec	74 26		 je	 SHORT $LN12@IsInDriver
$LN7@IsInDriver:

; 366  : 	{
; 367  : 		DWORD dwChkHighVersion;
; 368  : 		DWORD dwChkLowVersion;
; 369  : 
; 370  : 		char szChkDriver[256];
; 371  : 
; 372  : 		char szLine[256];
; 373  : 		while (fgets(szLine, sizeof(szLine)-1, fp))

  000ee	56		 push	 esi
  000ef	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szLine$4[ebp]

; 382  : 						break;
; 383  : 					}
; 384  : 
; 385  : 			szLine[0]='\0';

  000f5	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _szLine$4[ebp], 0
  000fc	68 ff 00 00 00	 push	 255			; 000000ffH
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 _fgets
  00107	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010a	85 c0		 test	 eax, eax
  0010c	0f 85 6e ff ff
	ff		 jne	 $LL2@IsInDriver

; 366  : 	{
; 367  : 		DWORD dwChkHighVersion;
; 368  : 		DWORD dwChkLowVersion;
; 369  : 
; 370  : 		char szChkDriver[256];
; 371  : 
; 372  : 		char szLine[256];
; 373  : 		while (fgets(szLine, sizeof(szLine)-1, fp))

  00112	eb 07		 jmp	 SHORT $LN14@IsInDriver
$LN12@IsInDriver:

; 380  : 					{
; 381  : 						ret=true;

  00114	c6 85 fb fc ff
	ff 01		 mov	 BYTE PTR _ret$1$[ebp], 1
$LN14@IsInDriver:

; 386  : 		}
; 387  : 		fclose(fp);

  0011b	56		 push	 esi
  0011c	e8 00 00 00 00	 call	 _fclose
  00121	83 c4 04	 add	 esp, 4
$LN21@IsInDriver:

; 388  : 	}
; 389  : 
; 390  : 	return ret;
; 391  : }

  00124	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00127	8a 85 fb fc ff
	ff		 mov	 al, BYTE PTR _ret$1$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	5f		 pop	 edi
  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx
  00132	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 04 00	 ret	 4
?__IsInDriverBlackList@CGraphicDevice@@IAE_NAAVD3D_CAdapterInfo@@@Z ENDP ; CGraphicDevice::__IsInDriverBlackList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?__Initialize@CGraphicDevice@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CGraphicDevice@@IAEXXZ PROC		; CGraphicDevice::__Initialize, COMDAT
; _this$ = ecx

; 28   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 29   : 	ms_iD3DAdapterInfo=D3DADAPTER_DEFAULT;

  00003	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_iD3DAdapterInfo@CGraphicBase@@1IA, 0 ; CGraphicBase::ms_iD3DAdapterInfo

; 30   : 	ms_iD3DDevInfo=D3DADAPTER_DEFAULT;

  0000d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_iD3DDevInfo@CGraphicBase@@1IA, 0 ; CGraphicBase::ms_iD3DDevInfo

; 31   : 	ms_iD3DModeInfo=D3DADAPTER_DEFAULT;

  00017	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_iD3DModeInfo@CGraphicBase@@1IA, 0 ; CGraphicBase::ms_iD3DModeInfo

; 32   : 
; 33   : 	ms_lpd3d			= NULL;

  00021	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A, 0 ; CGraphicBase::ms_lpd3d

; 34   : 	ms_lpd3dDevice		= NULL;

  0002b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A, 0 ; CGraphicBase::ms_lpd3dDevice

; 35   : 	ms_lpd3dMatStack	= NULL;

  00035	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A, 0 ; CGraphicBase::ms_lpd3dMatStack

; 36   : 
; 37   : 	ms_dwWavingEndTime = 0;

  0003f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_dwWavingEndTime@CGraphicBase@@1KA, 0 ; CGraphicBase::ms_dwWavingEndTime

; 38   : 	ms_dwFlashingEndTime = 0;

  00049	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_dwFlashingEndTime@CGraphicBase@@1KA, 0 ; CGraphicBase::ms_dwFlashingEndTime

; 39   : 
; 40   : 	m_pStateManager		= NULL;

  00053	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 41   : 
; 42   : 	__InitializeDefaultIndexBufferList();

  0005a	e8 00 00 00 00	 call	 ?__InitializeDefaultIndexBufferList@CGraphicDevice@@IAEXXZ ; CGraphicDevice::__InitializeDefaultIndexBufferList

; 43   : 	__InitializePDTVertexBufferList();

  0005f	8b ce		 mov	 ecx, esi
  00061	5e		 pop	 esi
  00062	e9 00 00 00 00	 jmp	 ?__InitializePDTVertexBufferList@CGraphicDevice@@IAEXXZ ; CGraphicDevice::__InitializePDTVertexBufferList
?__Initialize@CGraphicDevice@@IAEXXZ ENDP		; CGraphicDevice::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?RegisterWarningString@CGraphicDevice@@QAEXIPBD@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -4						; size = 4
_uiMsg$ = 8						; size = 4
_c_szString$ = 12					; size = 4
?RegisterWarningString@CGraphicDevice@@QAEXIPBD@Z PROC	; CGraphicDevice::RegisterWarningString, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 48   : 	m_kMap_strWarningMessage[uiMsg] = c_szString;

  00006	8d 45 08	 lea	 eax, DWORD PTR _uiMsg$[ebp]
  00009	83 c1 08	 add	 ecx, 8
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??A?$map@IV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@I@2@V?$allocator@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABI@Z ; std::map<unsigned int,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::operator[]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00015	8b 55 0c	 mov	 edx, DWORD PTR _c_szString$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 48   : 	m_kMap_strWarningMessage[uiMsg] = c_szString;

  00018	8b d8		 mov	 ebx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0001a	8b f2		 mov	 esi, edx
  0001c	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0001f	90		 npad	 1
$LL85@RegisterWa:
  00020	8a 06		 mov	 al, BYTE PTR [esi]
  00022	46		 inc	 esi
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL85@RegisterWa
  00027	2b f1		 sub	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  00029	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  0002c	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  0002f	3b f1		 cmp	 esi, ecx
  00031	77 24		 ja	 SHORT $LN11@RegisterWa

; 416  :         value_type* _Result = _Bx._Buf;

  00033	8b fb		 mov	 edi, ebx

; 434  :         return _Myres > _Small_string_capacity;

  00035	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00038	76 02		 jbe	 SHORT $LN14@RegisterWa

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0003a	8b 3b		 mov	 edi, DWORD PTR [ebx]
$LN14@RegisterWa:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0003c	56		 push	 esi
  0003d	52		 push	 edx
  0003e	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  0003f	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00042	e8 00 00 00 00	 call	 _memmove
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0004a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 49   : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
$LN11@RegisterWa:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2962 :         if (_New_size > max_size()) {

  00057	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  0005d	0f 87 c4 00 00
	00		 ja	 $LN100@RegisterWa

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 12		 jbe	 SHORT $LN32@RegisterWa

; 2944 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	eb 45		 jmp	 SHORT $LN98@RegisterWa
$LN32@RegisterWa:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00082	8b d1		 mov	 edx, ecx
  00084	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00089	d1 ea		 shr	 edx, 1
  0008b	2b c2		 sub	 eax, edx
  0008d	3b c8		 cmp	 ecx, eax
  0008f	76 12		 jbe	 SHORT $LN33@RegisterWa

; 2948 :             return _Max;

  00091	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00096	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a1	eb 24		 jmp	 SHORT $LN98@RegisterWa
$LN33@RegisterWa:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a3	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  000a6	3b f8		 cmp	 edi, eax
  000a8	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000ab	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000ae	85 c0		 test	 eax, eax
  000b0	74 18		 je	 SHORT $LN97@RegisterWa
$LN46@RegisterWa:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000b2	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b7	72 08		 jb	 SHORT $LN47@RegisterWa

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000bf	eb 06		 jmp	 SHORT $LN98@RegisterWa
$LN47@RegisterWa:

; 136  :         return ::operator new(_Bytes);

  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN98@RegisterWa:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000c7	83 c4 04	 add	 esp, 4
$LN97@RegisterWa:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ca	56		 push	 esi
  000cb	ff 75 0c	 push	 DWORD PTR _c_szString$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  000ce	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d1	8b f8		 mov	 edi, eax
  000d3	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000d4	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  000d7	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000da	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000df	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000e5	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000e9	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000ec	76 29		 jbe	 SHORT $LN25@RegisterWa

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000ee	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f1	8b 03		 mov	 eax, DWORD PTR [ebx]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000f3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f9	72 12		 jb	 SHORT $LN75@RegisterWa

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fb	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fe	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00101	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00103	83 c0 fc	 add	 eax, -4			; fffffffcH
  00106	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00109	77 17		 ja	 SHORT $LN72@RegisterWa

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010b	8b c2		 mov	 eax, edx
$LN75@RegisterWa:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0010d	51		 push	 ecx
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00114	83 c4 08	 add	 esp, 8
$LN25@RegisterWa:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 49   : }

  00117	89 3b		 mov	 DWORD PTR [ebx], edi
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 08 00	 ret	 8
$LN72@RegisterWa:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00122	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN100@RegisterWa:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  00127	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN96@RegisterWa:
  0012c	cc		 int	 3
?RegisterWarningString@CGraphicDevice@@QAEXIPBD@Z ENDP	; CGraphicDevice::RegisterWarningString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?ResizeBackBuffer@CGraphicDevice@@QAE_NII@Z
_TEXT	SEGMENT
_uWidth$ = 8						; size = 4
_uHeight$ = 12						; size = 4
?ResizeBackBuffer@CGraphicDevice@@QAE_NII@Z PROC	; CGraphicDevice::ResizeBackBuffer, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 112  : 	if (!ms_lpd3dDevice)

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00009	85 c9		 test	 ecx, ecx
  0000b	74 4a		 je	 SHORT $LN8@ResizeBack

; 113  : 		return false;
; 114  : 
; 115  : 	D3DPRESENT_PARAMETERS& rkD3DPP=ms_d3dPresentParameter;
; 116  : 	if (rkD3DPP.Windowed)

  0000d	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+28, 0
  00014	74 3b		 je	 SHORT $LN4@ResizeBack

; 117  : 	{
; 118  : 		if (rkD3DPP.BackBufferWidth!=uWidth || rkD3DPP.BackBufferHeight!=uHeight)

  00016	8b 55 08	 mov	 edx, DWORD PTR _uWidth$[ebp]
  00019	8b 45 0c	 mov	 eax, DWORD PTR _uHeight$[ebp]
  0001c	39 15 00 00 00
	00		 cmp	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A, edx
  00022	75 08		 jne	 SHORT $LN5@ResizeBack
  00024	39 05 04 00 00
	00		 cmp	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+4, eax
  0002a	74 25		 je	 SHORT $LN4@ResizeBack
$LN5@ResizeBack:

; 119  : 		{
; 120  : 			rkD3DPP.BackBufferWidth=uWidth;

  0002c	89 15 00 00 00
	00		 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A, edx

; 121  : 			rkD3DPP.BackBufferHeight=uHeight;

  00032	a3 04 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+4, eax

; 122  : 
; 123  : 			IDirect3DDevice8& rkD3DDev=*ms_lpd3dDevice;
; 124  : 
; 125  : 			HRESULT hr=rkD3DDev.Reset(&rkD3DPP);

  00037	8b 01		 mov	 eax, DWORD PTR [ecx]
  00039	68 00 00 00 00	 push	 OFFSET ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A ; CGraphicBase::ms_d3dPresentParameter
  0003e	51		 push	 ecx
  0003f	ff 50 38	 call	 DWORD PTR [eax+56]

; 126  : 			if (FAILED(hr))

  00042	85 c0		 test	 eax, eax
  00044	78 11		 js	 SHORT $LN8@ResizeBack

; 129  : 			}
; 130  : 
; 131  : 			STATEMANAGER.SetDefaultState();

  00046	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0004c	e8 00 00 00 00	 call	 ?SetDefaultState@CStateManager@@QAEXXZ ; CStateManager::SetDefaultState
$LN4@ResizeBack:

; 132  : 		}
; 133  : 	}
; 134  : 
; 135  : 	return true;

  00051	b0 01		 mov	 al, 1

; 136  : }

  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
$LN8@ResizeBack:

; 127  : 			{
; 128  : 				return false;

  00057	32 c0		 xor	 al, al

; 136  : }

  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?ResizeBackBuffer@CGraphicDevice@@QAE_NII@Z ENDP	; CGraphicDevice::ResizeBackBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?MoveWebBrowserRect@CGraphicDevice@@QAEXABUtagRECT@@@Z
_TEXT	SEGMENT
_c_rcWebPage$ = 8					; size = 4
?MoveWebBrowserRect@CGraphicDevice@@QAEXABUtagRECT@@@Z PROC ; CGraphicDevice::MoveWebBrowserRect, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	g_rcBrowser=c_rcWebPage;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rcWebPage$[ebp]
  00006	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00009	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?g_rcBrowser@@3UtagRECT@@A, xmm0

; 61   : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?MoveWebBrowserRect@CGraphicDevice@@QAEXABUtagRECT@@@Z ENDP ; CGraphicDevice::MoveWebBrowserRect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?DisableWebBrowserMode@CGraphicDevice@@QAEXXZ
_TEXT	SEGMENT
?DisableWebBrowserMode@CGraphicDevice@@QAEXXZ PROC	; CGraphicDevice::DisableWebBrowserMode, COMDAT
; _this$ = ecx

; 93   : 	if (!ms_lpd3dDevice)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00006	85 c9		 test	 ecx, ecx
  00008	74 55		 je	 SHORT $LN1@DisableWeb

; 94   : 		return;
; 95   : 
; 96   : 	D3DPRESENT_PARAMETERS& rkD3DPP=ms_d3dPresentParameter;
; 97   : 
; 98   : 	g_isBrowserMode=false;
; 99   : 
; 100  : 	rkD3DPP=g_kD3DPP;

  0000a	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_kD3DPP@@3U_D3DPRESENT_PARAMETERS_@@A
  00011	a1 30 00 00 00	 mov	 eax, DWORD PTR ?g_kD3DPP@@3U_D3DPRESENT_PARAMETERS_@@A+48
  00016	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?g_isBrowserMode@@3_NA, 0 ; g_isBrowserMode
  0001d	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A, xmm0
  00024	a3 30 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+48, eax
  00029	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_kD3DPP@@3U_D3DPRESENT_PARAMETERS_@@A+16

; 101  : 
; 102  : 	IDirect3DDevice8& rkD3DDev=*ms_lpd3dDevice;
; 103  : 	HRESULT hr=rkD3DDev.Reset(&rkD3DPP);

  00030	68 00 00 00 00	 push	 OFFSET ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A ; CGraphicBase::ms_d3dPresentParameter
  00035	51		 push	 ecx
  00036	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+16, xmm0
  0003d	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_kD3DPP@@3U_D3DPRESENT_PARAMETERS_@@A+32
  00044	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+32, xmm0
  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 38	 call	 DWORD PTR [eax+56]

; 104  : 	if (FAILED(hr))

  00050	85 c0		 test	 eax, eax
  00052	78 0b		 js	 SHORT $LN1@DisableWeb

; 105  : 		return;
; 106  : 
; 107  : 	STATEMANAGER.SetDefaultState();

  00054	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0005a	e9 00 00 00 00	 jmp	 ?SetDefaultState@CStateManager@@QAEXXZ ; CStateManager::SetDefaultState
$LN1@DisableWeb:

; 108  : }

  0005f	c3		 ret	 0
?DisableWebBrowserMode@CGraphicDevice@@QAEXXZ ENDP	; CGraphicDevice::DisableWebBrowserMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?EnableWebBrowserMode@CGraphicDevice@@QAEXABUtagRECT@@@Z
_TEXT	SEGMENT
_c_rcWebPage$ = 8					; size = 4
?EnableWebBrowserMode@CGraphicDevice@@QAEXABUtagRECT@@@Z PROC ; CGraphicDevice::EnableWebBrowserMode, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 65   : 	if (!ms_lpd3dDevice)

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00009	85 c9		 test	 ecx, ecx
  0000b	0f 84 89 00 00
	00		 je	 $LN1@EnableWebB

; 66   : 		return;
; 67   : 
; 68   : 	D3DPRESENT_PARAMETERS& rkD3DPP=ms_d3dPresentParameter;
; 69   : 
; 70   : 	g_isBrowserMode=true;
; 71   : 
; 72   : 	if (D3DSWAPEFFECT_COPY==rkD3DPP.SwapEffect)

  00011	83 3d 14 00 00
	00 03		 cmp	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+20, 3
  00018	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?g_isBrowserMode@@3_NA, 1 ; g_isBrowserMode
  0001f	74 79		 je	 SHORT $LN1@EnableWebB

; 73   : 		return;
; 74   : 
; 75   : 	g_kD3DPP=rkD3DPP;

  00021	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A
  00028	a1 30 00 00 00	 mov	 eax, DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+48
  0002d	a3 30 00 00 00	 mov	 DWORD PTR ?g_kD3DPP@@3U_D3DPRESENT_PARAMETERS_@@A+48, eax

; 76   : 	g_rcBrowser=c_rcWebPage;

  00032	8b 45 08	 mov	 eax, DWORD PTR _c_rcWebPage$[ebp]
  00035	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?g_kD3DPP@@3U_D3DPRESENT_PARAMETERS_@@A, xmm0

; 77   : 
; 78   : 	//rkD3DPP.Windowed=TRUE;
; 79   : 	rkD3DPP.SwapEffect=D3DSWAPEFFECT_COPY;
; 80   : 	rkD3DPP.BackBufferCount = 1;
; 81   : 	rkD3DPP.FullScreen_PresentationInterval = D3DPRESENT_INTERVAL_IMMEDIATE;
; 82   : 
; 83   : 	IDirect3DDevice8& rkD3DDev=*ms_lpd3dDevice;
; 84   : 	HRESULT hr=rkD3DDev.Reset(&rkD3DPP);

  0003c	68 00 00 00 00	 push	 OFFSET ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A ; CGraphicBase::ms_d3dPresentParameter
  00041	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+16
  00048	51		 push	 ecx
  00049	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?g_kD3DPP@@3U_D3DPRESENT_PARAMETERS_@@A+16, xmm0
  00050	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+32
  00057	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?g_kD3DPP@@3U_D3DPRESENT_PARAMETERS_@@A+32, xmm0
  0005e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00061	c7 05 14 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+20, 3
  0006b	c7 05 0c 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+12, 1
  00075	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?g_rcBrowser@@3UtagRECT@@A, xmm0
  0007c	c7 05 30 00 00
	00 00 00 00 80	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+48, -2147483648 ; 80000000H
  00086	8b 01		 mov	 eax, DWORD PTR [ecx]
  00088	ff 50 38	 call	 DWORD PTR [eax+56]

; 85   : 	if (FAILED(hr))

  0008b	85 c0		 test	 eax, eax
  0008d	78 0b		 js	 SHORT $LN1@EnableWebB

; 86   : 		return;
; 87   : 
; 88   : 	STATEMANAGER.SetDefaultState();

  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00095	e8 00 00 00 00	 call	 ?SetDefaultState@CStateManager@@QAEXXZ ; CStateManager::SetDefaultState
$LN1@EnableWebB:

; 89   : }

  0009a	5d		 pop	 ebp
  0009b	c2 04 00	 ret	 4
?EnableWebBrowserMode@CGraphicDevice@@QAEXABUtagRECT@@@Z ENDP ; CGraphicDevice::EnableWebBrowserMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?Reset@CGraphicDevice@@QAE_NXZ
_TEXT	SEGMENT
?Reset@CGraphicDevice@@QAE_NXZ PROC			; CGraphicDevice::Reset, COMDAT
; _this$ = ecx

; 283  : #ifdef ENABLE_FIX_MOBS_LAG
; 284  : 	__DestroyPDTVertexBufferList();
; 285  : #endif
; 286  : 
; 287  : 	HRESULT hr;
; 288  : 
; 289  : 	if (FAILED(hr = ms_lpd3dDevice->Reset(&ms_d3dPresentParameter)))

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00006	68 00 00 00 00	 push	 OFFSET ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A ; CGraphicBase::ms_d3dPresentParameter
  0000b	51		 push	 ecx
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	ff 50 38	 call	 DWORD PTR [eax+56]
  00011	85 c0		 test	 eax, eax
  00013	0f 99 c0	 setns	 al

; 290  : 	{
; 291  : #ifdef ENABLE_FIX_MOBS_LAG
; 292  : 		TraceError("Failed to reset device");
; 293  : #endif
; 294  : 		return false;
; 295  : 	}
; 296  : 
; 297  : #ifdef ENABLE_FIX_MOBS_LAG
; 298  : 	m_pStateManager->SetDefaultState();
; 299  : 	__CreatePDTVertexBufferList();
; 300  : #endif
; 301  : 	return true;
; 302  : }

  00016	c3		 ret	 0
?Reset@CGraphicDevice@@QAE_NXZ ENDP			; CGraphicDevice::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?GetDeviceState@CGraphicDevice@@QAE?AW4EDeviceState@1@XZ
_TEXT	SEGMENT
?GetDeviceState@CGraphicDevice@@QAE?AW4EDeviceState@1@XZ PROC ; CGraphicDevice::GetDeviceState, COMDAT
; _this$ = ecx

; 230  : 	if (!ms_lpd3dDevice)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@GetDeviceS

; 231  : 		return DEVICESTATE_NULL;

  0000a	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]

; 247  : }

  0000d	c3		 ret	 0
$LN2@GetDeviceS:

; 232  : 
; 233  : 	HRESULT hr;
; 234  : 
; 235  : 	if (FAILED(hr = ms_lpd3dDevice->TestCooperativeLevel()))

  0000e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00010	51		 push	 ecx
  00011	ff 50 0c	 call	 DWORD PTR [eax+12]
  00014	8b c8		 mov	 ecx, eax
  00016	85 c9		 test	 ecx, ecx
  00018	79 1b		 jns	 SHORT $LN3@GetDeviceS

; 236  : 	{
; 237  : 		if (D3DERR_DEVICELOST == hr)

  0001a	81 f9 68 08 76
	88		 cmp	 ecx, -2005530520	; 88760868H
  00020	74 0d		 je	 SHORT $LN5@GetDeviceS

; 238  : 			return DEVICESTATE_BROKEN;
; 239  : 
; 240  : 		if (D3DERR_DEVICENOTRESET == hr)

  00022	33 c0		 xor	 eax, eax
  00024	81 f9 69 08 76
	88		 cmp	 ecx, -2005530519	; 88760869H
  0002a	0f 94 c0	 sete	 al
  0002d	40		 inc	 eax

; 247  : }

  0002e	c3		 ret	 0
$LN5@GetDeviceS:

; 241  : 			return DEVICESTATE_NEEDS_RESET;
; 242  : 
; 243  : 		return DEVICESTATE_BROKEN;

  0002f	b8 01 00 00 00	 mov	 eax, 1

; 247  : }

  00034	c3		 ret	 0
$LN3@GetDeviceS:

; 244  : 	}
; 245  : 
; 246  : 	return DEVICESTATE_OK;

  00035	33 c0		 xor	 eax, eax

; 247  : }

  00037	c3		 ret	 0
?GetDeviceState@CGraphicDevice@@QAE?AW4EDeviceState@1@XZ ENDP ; CGraphicDevice::GetDeviceState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z
_TEXT	SEGMENT
$T2 = -84						; size = 4
tv2687 = -84						; size = 4
_pkD3DAdapterInfo$1$ = -80				; size = 4
_hWnd$GSCopy$1$ = -76					; size = 4
_this$GSCopy$1$ = -72					; size = 4
_iRet$1$ = -68						; size = 4
_ErrorCorrection$1$ = -68				; size = 4
_stDevList$ = -64					; size = 24
_stModeInfo$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_hWnd$ = 8						; size = 4
_iHres$ = 12						; size = 4
_iVres$ = 16						; size = 4
_Windowed$ = 20						; size = 1
___formal$ = 24						; size = 4
_iReflashRate$ = 28					; size = 4
?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z PROC	; CGraphicDevice::Create, COMDAT
; _this$ = ecx

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b c1		 mov	 eax, ecx
  0002c	89 45 b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], eax
  0002f	8b 7d 08	 mov	 edi, DWORD PTR _hWnd$[ebp]
  00032	89 7d b4	 mov	 DWORD PTR _hWnd$GSCopy$1$[ebp], edi

; 395  : 	int iRet = CREATE_OK;

  00035	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR _iRet$1$[ebp], 1

; 396  : 
; 397  : 	Destroy();

  0003c	e8 00 00 00 00	 call	 ?Destroy@CGraphicDevice@@QAEXXZ ; CGraphicDevice::Destroy

; 398  : 
; 399  : 	ms_iWidth	= iHres;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _iHres$[ebp]
  00044	a3 00 00 00 00	 mov	 DWORD PTR ?ms_iWidth@CGraphicBase@@1HA, eax ; CGraphicBase::ms_iWidth

; 400  : 	ms_iHeight	= iVres;

  00049	8b 45 10	 mov	 eax, DWORD PTR _iVres$[ebp]

; 401  : 
; 402  : 	ms_hWnd		= hWnd;
; 403  : 	ms_hDC		= GetDC(hWnd);

  0004c	57		 push	 edi
  0004d	a3 00 00 00 00	 mov	 DWORD PTR ?ms_iHeight@CGraphicBase@@1HA, eax ; CGraphicBase::ms_iHeight
  00052	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_hWnd@CGraphicBase@@1PAUHWND__@@A, edi ; CGraphicBase::ms_hWnd
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4

; 404  : 	ms_lpd3d	= Direct3DCreate8(D3D_SDK_VERSION);

  0005e	68 dc 00 00 00	 push	 220			; 000000dcH
  00063	a3 00 00 00 00	 mov	 DWORD PTR ?ms_hDC@CGraphicBase@@1PAUHDC__@@A, eax ; CGraphicBase::ms_hDC
  00068	e8 00 00 00 00	 call	 _Direct3DCreate8@4
  0006d	a3 00 00 00 00	 mov	 DWORD PTR ?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A, eax ; CGraphicBase::ms_lpd3d
  00072	85 c0		 test	 eax, eax

; 405  : 
; 406  : 	if (!ms_lpd3d)

  00074	75 0a		 jne	 SHORT $LN4@Create

; 407  : 		return CREATE_NO_DIRECTX;

  00076	b8 02 00 00 00	 mov	 eax, 2
  0007b	e9 93 0a 00 00	 jmp	 $LN1@Create
$LN4@Create:

; 408  : 
; 409  : 	if (!ms_kD3DDetector.Build(*ms_lpd3d, EL3D_ConfirmDevice))

  00080	68 00 00 00 00	 push	 OFFSET ?EL3D_ConfirmDevice@@YAHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z ; EL3D_ConfirmDevice
  00085	50		 push	 eax
  00086	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A ; CGraphicBase::ms_kD3DDetector
  0008b	e8 00 00 00 00	 call	 ?Build@D3D_CDisplayModeAutoDetector@@QAEHAAUIDirect3D8@@P6AHAAU_D3DCAPS8@@IW4_D3DFORMAT@@@Z@Z ; D3D_CDisplayModeAutoDetector::Build
  00090	85 c0		 test	 eax, eax
  00092	75 0a		 jne	 SHORT $LN5@Create

; 410  : 		return CREATE_ENUM;

  00094	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00099	e9 75 0a 00 00	 jmp	 $LN1@Create
$LN5@Create:
  0009e	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  000a1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _stDevList$[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000a8	0f 11 45 c0	 movups	 XMMWORD PTR _stDevList$[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  000ac	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _stDevList$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000b3	c6 45 c0 00	 mov	 BYTE PTR _stDevList$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 417  : 	ms_kD3DDetector.GetString(&stDevList);

  000b7	8d 45 c0	 lea	 eax, DWORD PTR _stDevList$[ebp]
  000ba	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000c1	50		 push	 eax
  000c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A ; CGraphicBase::ms_kD3DDetector
  000c7	e8 00 00 00 00	 call	 ?GetString@D3D_CDisplayModeAutoDetector@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_CDisplayModeAutoDetector::GetString

; 418  : 
; 419  : 	//Tracen(stDevList.c_str());
; 420  : 	//Tracenf("adapter %d, device %d, mode %d", ms_iD3DAdapterInfo, ms_iD3DDevInfo, ms_iD3DModeInfo);
; 421  : 
; 422  : 	D3D_CAdapterInfo * pkD3DAdapterInfo = ms_kD3DDetector.GetD3DAdapterInfop(ms_iD3DAdapterInfo);

  000cc	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iD3DAdapterInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DAdapterInfo
  000d2	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A ; CGraphicBase::ms_kD3DDetector
  000d7	e8 00 00 00 00	 call	 ?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop
  000dc	8b f0		 mov	 esi, eax
  000de	89 75 b0	 mov	 DWORD PTR _pkD3DAdapterInfo$1$[ebp], esi

; 423  : 	if (!pkD3DAdapterInfo)

  000e1	85 f6		 test	 esi, esi
  000e3	75 1d		 jne	 SHORT $LN6@Create

; 424  : 	{
; 425  : 		Tracenf("adapter %d is EMPTY", ms_iD3DAdapterInfo);

  000e5	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iD3DAdapterInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DAdapterInfo
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JAEGAKLI@adapter?5?$CFd?5is?5EMPTY@
  000f0	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  000f5	83 c4 08	 add	 esp, 8
  000f8	be 80 00 00 00	 mov	 esi, 128		; 00000080H
  000fd	e9 df 09 00 00	 jmp	 $LN133@Create
$LN6@Create:

; 426  : 		return CREATE_DETECT;
; 427  : 	}
; 428  : 
; 429  : 	if (__IsInDriverBlackList(*pkD3DAdapterInfo))

  00102	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00105	56		 push	 esi
  00106	e8 00 00 00 00	 call	 ?__IsInDriverBlackList@CGraphicDevice@@IAE_NAAVD3D_CAdapterInfo@@@Z ; CGraphicDevice::__IsInDriverBlackList
  0010b	84 c0		 test	 al, al
  0010d	74 16		 je	 SHORT $LN7@Create

; 430  : 	{
; 431  : 		iRet |= CREATE_BAD_DRIVER;

  0010f	b9 01 02 00 00	 mov	 ecx, 513		; 00000201H

; 432  : 		__WarningMessage(hWnd, CREATE_BAD_DRIVER);

  00114	68 00 02 00 00	 push	 512			; 00000200H
  00119	89 4d bc	 mov	 DWORD PTR _iRet$1$[ebp], ecx
  0011c	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0011f	57		 push	 edi
  00120	e8 00 00 00 00	 call	 ?__WarningMessage@CGraphicDevice@@IAEXPAUHWND__@@I@Z ; CGraphicDevice::__WarningMessage
$LN7@Create:

; 433  : 	}
; 434  : 
; 435  : 	D3D_SModeInfo * pkD3DModeInfo = pkD3DAdapterInfo->GetD3DModeInfop(ms_iD3DDevInfo, ms_iD3DModeInfo);

  00125	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iD3DModeInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DModeInfo
  0012b	8b ce		 mov	 ecx, esi
  0012d	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iD3DDevInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DDevInfo
  00133	e8 00 00 00 00	 call	 ?GetD3DModeInfop@D3D_CAdapterInfo@@QAEPAUD3D_SModeInfo@@II@Z ; D3D_CAdapterInfo::GetD3DModeInfop
  00138	8b f8		 mov	 edi, eax

; 436  : 	if (!pkD3DModeInfo)

  0013a	85 ff		 test	 edi, edi
  0013c	75 23		 jne	 SHORT $LN8@Create

; 437  : 	{
; 438  : 		Tracenf("device %d, mode %d is EMPTY", ms_iD3DDevInfo, ms_iD3DModeInfo);

  0013e	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iD3DModeInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DModeInfo
  00144	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iD3DDevInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DDevInfo
  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LIHILKDJ@device?5?$CFd?0?5mode?5?$CFd?5is?5EMPTY@
  0014f	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  00154	83 c4 0c	 add	 esp, 12			; 0000000cH
  00157	be 80 00 00 00	 mov	 esi, 128		; 00000080H
  0015c	e9 80 09 00 00	 jmp	 $LN133@Create
$LN8@Create:

; 439  : 		return CREATE_DETECT;
; 440  : 	}
; 441  : 
; 442  : 	D3DADAPTER_IDENTIFIER8& rkD3DAdapterId=pkD3DAdapterInfo->GetIdentifier();
; 443  : 	if (Windowed &&
; 444  : 		strnicmp(rkD3DAdapterId.Driver, "3dfx", 4)==0 &&

  00161	80 7d 14 00	 cmp	 BYTE PTR _Windowed$[ebp], 0
  00165	74 2b		 je	 SHORT $LN9@Create
  00167	6a 04		 push	 4
  00169	68 00 00 00 00	 push	 OFFSET ??_C@_04MAKEOOIM@3dfx@
  0016e	56		 push	 esi
  0016f	e8 00 00 00 00	 call	 __strnicmp
  00174	83 c4 0c	 add	 esp, 12			; 0000000cH
  00177	85 c0		 test	 eax, eax
  00179	75 17		 jne	 SHORT $LN9@Create
  0017b	8b ce		 mov	 ecx, esi
  0017d	e8 00 00 00 00	 call	 ?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ ; D3D_CAdapterInfo::GetDesktopD3DDisplayModer
  00182	83 78 0c 16	 cmp	 DWORD PTR [eax+12], 22	; 00000016H
  00186	75 0a		 jne	 SHORT $LN9@Create

; 445  : 		22 == pkD3DAdapterInfo->GetDesktopD3DDisplayModer().Format)
; 446  : 	{
; 447  : 		return CREATE_FORMAT;

  00188	be 00 04 00 00	 mov	 esi, 1024		; 00000400H
  0018d	e9 4f 09 00 00	 jmp	 $LN133@Create
$LN9@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1527 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00192	8b 75 bc	 mov	 esi, DWORD PTR _iRet$1$[ebp]
  00195	0f 57 c0	 xorps	 xmm0, xmm0
  00198	81 ce 00 01 00
	00		 or	 esi, 256		; 00000100H
  0019e	83 7f 0c 20	 cmp	 DWORD PTR [edi+12], 32	; 00000020H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001a2	0f 11 45 d8	 movups	 XMMWORD PTR _stModeInfo$[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1527 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  001a6	0f 45 75 bc	 cmovne	 esi, DWORD PTR _iRet$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  001aa	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stModeInfo$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  001b1	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _stModeInfo$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001b8	c6 45 d8 00	 mov	 BYTE PTR _stModeInfo$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 460  : 	pkD3DModeInfo->GetString(&stModeInfo);

  001bc	8d 45 d8	 lea	 eax, DWORD PTR _stModeInfo$[ebp]
  001bf	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001c3	50		 push	 eax
  001c4	8b cf		 mov	 ecx, edi
  001c6	e8 00 00 00 00	 call	 ?GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_SModeInfo::GetString
  001cb	8a 55 14	 mov	 dl, BYTE PTR _Windowed$[ebp]

; 461  : 
; 462  : 	//Tracen(stModeInfo.c_str());
; 463  : 
; 464  : 	int ErrorCorrection = 0;

  001ce	8b 4d 1c	 mov	 ecx, DWORD PTR _iReflashRate$[ebp]
  001d1	0f b6 c2	 movzx	 eax, dl
  001d4	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _ErrorCorrection$1$[ebp], 0
  001db	89 45 ac	 mov	 DWORD PTR tv2687[ebp], eax
  001de	66 90		 npad	 2
$RETRY$354:

; 465  : 
; 466  : RETRY:
; 467  : 	ZeroMemory(&ms_d3dPresentParameter, sizeof(ms_d3dPresentParameter));
; 468  : 
; 469  : 	ms_d3dPresentParameter.Windowed							= Windowed;

  001e0	a3 1c 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+28, eax
  001e5	0f 57 c0	 xorps	 xmm0, xmm0

; 470  : 	ms_d3dPresentParameter.BackBufferWidth					= iHres;

  001e8	8b 45 0c	 mov	 eax, DWORD PTR _iHres$[ebp]
  001eb	a3 00 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A, eax

; 471  : 	ms_d3dPresentParameter.BackBufferHeight					= iVres;

  001f0	8b 45 10	 mov	 eax, DWORD PTR _iVres$[ebp]
  001f3	a3 04 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+4, eax

; 472  : 	ms_d3dPresentParameter.hDeviceWindow					= hWnd;

  001f8	8b 45 b4	 mov	 eax, DWORD PTR _hWnd$GSCopy$1$[ebp]
  001fb	a3 18 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+24, eax

; 473  : 	ms_d3dPresentParameter.BackBufferCount					= m_uBackBufferCount;

  00200	8b 45 b8	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00203	66 0f 13 05 08
	00 00 00	 movlpd	 QWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+8, xmm0
  0020b	66 0f 13 05 10
	00 00 00	 movlpd	 QWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+16, xmm0
  00213	66 0f 13 05 20
	00 00 00	 movlpd	 QWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+32, xmm0
  0021b	66 0f 13 05 28
	00 00 00	 movlpd	 QWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+40, xmm0
  00223	c7 05 30 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+48, 0
  0022d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00230	a3 0c 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+12, eax

; 474  : 	ms_d3dPresentParameter.SwapEffect						= D3DSWAPEFFECT_DISCARD;

  00235	c7 05 14 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+20, 1

; 475  : 
; 476  : 	if (Windowed)

  0023f	84 d2		 test	 dl, dl
  00241	74 0d		 je	 SHORT $LN11@Create

; 477  : 	{
; 478  : 		ms_d3dPresentParameter.BackBufferFormat				= pkD3DAdapterInfo->GetDesktopD3DDisplayModer().Format;

  00243	8b 4d b0	 mov	 ecx, DWORD PTR _pkD3DAdapterInfo$1$[ebp]
  00246	e8 00 00 00 00	 call	 ?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ ; D3D_CAdapterInfo::GetDesktopD3DDisplayModer
  0024b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 479  : 	}

  0024e	eb 09		 jmp	 SHORT $LN350@Create
$LN11@Create:

; 480  : 	else
; 481  : 	{
; 482  : 		ms_d3dPresentParameter.BackBufferFormat				= pkD3DModeInfo->m_eD3DFmtPixel;

  00250	8b 47 10	 mov	 eax, DWORD PTR [edi+16]

; 483  : 		ms_d3dPresentParameter.FullScreen_RefreshRateInHz	= iReflashRate;

  00253	89 0d 2c 00 00
	00		 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+44, ecx
$LN350@Create:

; 484  : 	}
; 485  : 
; 486  : 	ms_d3dPresentParameter.Flags							= D3DPRESENTFLAG_LOCKABLE_BACKBUFFER;
; 487  : 	ms_d3dPresentParameter.EnableAutoDepthStencil			= TRUE;
; 488  : 	ms_d3dPresentParameter.AutoDepthStencilFormat			= pkD3DModeInfo->m_eD3DFmtDepthStencil;
; 489  : 
; 490  : 	ms_dwD3DBehavior = pkD3DModeInfo->m_dwD3DBehavior;
; 491  : 
; 492  : 	if (FAILED(ms_hLastResult = ms_lpd3d->CreateDevice(

  00259	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A ; CGraphicBase::ms_lpd3d
  0025f	68 00 00 00 00	 push	 OFFSET ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00264	a3 08 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+8, eax
  00269	c7 05 28 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+40, 1
  00273	c7 05 20 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+32, 1
  0027d	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00280	68 00 00 00 00	 push	 OFFSET ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A ; CGraphicBase::ms_d3dPresentParameter
  00285	a3 24 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+36, eax
  0028a	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0028d	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwD3DBehavior@CGraphicBase@@1KA, eax ; CGraphicBase::ms_dwD3DBehavior
  00292	ff 77 0c	 push	 DWORD PTR [edi+12]
  00295	8b 01		 mov	 eax, DWORD PTR [ecx]
  00297	ff 75 b4	 push	 DWORD PTR _hWnd$GSCopy$1$[ebp]
  0029a	6a 01		 push	 1
  0029c	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iD3DAdapterInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DAdapterInfo
  002a2	51		 push	 ecx
  002a3	ff 50 3c	 call	 DWORD PTR [eax+60]
  002a6	a3 00 00 00 00	 mov	 DWORD PTR ?ms_hLastResult@CGraphicBase@@1JA, eax ; CGraphicBase::ms_hLastResult
  002ab	85 c0		 test	 eax, eax
  002ad	79 67		 jns	 SHORT $LN13@Create

; 493  : 				ms_iD3DAdapterInfo,
; 494  : 				D3DDEVTYPE_HAL,
; 495  : 				hWnd,
; 496  : 				pkD3DModeInfo->m_dwD3DBehavior,
; 497  : 				&ms_d3dPresentParameter,
; 498  : 				&ms_lpd3dDevice)))
; 499  : 	{
; 500  : 		switch (ms_hLastResult)

  002af	3d 7c 01 76 88	 cmp	 eax, -2005532292	; 8876017cH
  002b4	74 2c		 je	 SHORT $LN16@Create
  002b6	3d 6a 08 76 88	 cmp	 eax, -2005530518	; 8876086aH
  002bb	74 1e		 je	 SHORT $LN15@Create
  002bd	3d 6c 08 76 88	 cmp	 eax, -2005530516	; 8876086cH
  002c2	74 10		 je	 SHORT $LN14@Create

; 510  : 				break;
; 511  : 			default:
; 512  : 				Tracenf("IDirect3DDevice.CreateDevice - ERROR %d", ms_hLastResult);

  002c4	50		 push	 eax
  002c5	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IPGGGCFB@IDirect3DDevice?4CreateDevice?5?9?5@
  002ca	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  002cf	83 c4 08	 add	 esp, 8
  002d2	eb 1b		 jmp	 SHORT $LN2@Create
$LN14@Create:

; 501  : 		{
; 502  : 			case D3DERR_INVALIDCALL:
; 503  : 				Tracen("IDirect3DDevice.CreateDevice - ERROR D3DERR_INVALIDCALL\nThe method call is invalid. For example, a method's parameter may have an invalid value.");

  002d4	68 00 00 00 00	 push	 OFFSET ??_C@_0JB@NCJOPOMN@IDirect3DDevice?4CreateDevice?5?9?5@

; 504  : 				break;

  002d9	eb 0c		 jmp	 SHORT $LN351@Create
$LN15@Create:

; 505  : 			case D3DERR_NOTAVAILABLE:
; 506  : 				Tracen("IDirect3DDevice.CreateDevice - ERROR D3DERR_NOTAVAILABLE\nThis device does not support the queried technique. ");

  002db	68 00 00 00 00	 push	 OFFSET ??_C@_0GO@ICOCNPJJ@IDirect3DDevice?4CreateDevice?5?9?5@

; 507  : 				break;

  002e0	eb 05		 jmp	 SHORT $LN351@Create
$LN16@Create:

; 508  : 			case D3DERR_OUTOFVIDEOMEMORY:
; 509  : 				Tracen("IDirect3DDevice.CreateDevice - ERROR D3DERR_OUTOFVIDEOMEMORY\nDirect3D does not have enough display memory to perform the operation");

  002e2	68 00 00 00 00	 push	 OFFSET ??_C@_0ID@GFNIEGEI@IDirect3DDevice?4CreateDevice?5?9?5@
$LN351@Create:

; 513  : 				break;
; 514  : 		}
; 515  : 
; 516  : 		if (ErrorCorrection)

  002e7	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  002ec	83 c4 04	 add	 esp, 4
$LN2@Create:
  002ef	83 7d bc 00	 cmp	 DWORD PTR _ErrorCorrection$1$[ebp], 0
  002f3	75 17		 jne	 SHORT $LN345@Create

; 517  : 			return CREATE_DEVICE;
; 518  : 
; 519  : 		iReflashRate = 0;
; 520  : 		++ErrorCorrection;
; 521  : 		iRet = CREATE_REFRESHRATE;
; 522  : 		goto RETRY;

  002f5	8a 55 14	 mov	 dl, BYTE PTR _Windowed$[ebp]
  002f8	33 c9		 xor	 ecx, ecx
  002fa	8b 45 ac	 mov	 eax, DWORD PTR tv2687[ebp]
  002fd	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR _ErrorCorrection$1$[ebp], 1
  00304	8d 71 20	 lea	 esi, DWORD PTR [ecx+32]
  00307	e9 d4 fe ff ff	 jmp	 $RETRY$354
$LN345@Create:
  0030c	be 10 00 00 00	 mov	 esi, 16			; 00000010H
  00311	e9 89 07 00 00	 jmp	 $LN34@Create
$LN13@Create:

; 523  : 	}
; 524  : 
; 525  : 	// Check DXT Support Info
; 526  : 	if(ms_lpd3d->CheckDeviceFormat(
; 527  : 				ms_iD3DAdapterInfo,
; 528  : 				D3DDEVTYPE_HAL,
; 529  : 				ms_d3dPresentParameter.BackBufferFormat,
; 530  : 				0,
; 531  : 				D3DRTYPE_TEXTURE,
; 532  : 				D3DFMT_DXT1) == D3DERR_NOTAVAILABLE)

  00316	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A ; CGraphicBase::ms_lpd3d
  0031c	68 44 58 54 31	 push	 827611204		; 31545844H
  00321	6a 03		 push	 3
  00323	6a 00		 push	 0
  00325	ff 35 08 00 00
	00		 push	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+8
  0032b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0032d	6a 01		 push	 1
  0032f	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iD3DAdapterInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DAdapterInfo
  00335	51		 push	 ecx
  00336	ff 50 28	 call	 DWORD PTR [eax+40]
  00339	3d 6a 08 76 88	 cmp	 eax, -2005530518	; 8876086aH
  0033e	75 07		 jne	 SHORT $LN19@Create

; 533  : 	{
; 534  : 		ms_bSupportDXT = false;

  00340	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?ms_bSupportDXT@CGraphicBase@@1_NA, 0 ; CGraphicBase::ms_bSupportDXT
$LN19@Create:

; 535  : 	}
; 536  : 
; 537  : 	if(ms_lpd3d->CheckDeviceFormat(
; 538  : 				ms_iD3DAdapterInfo,
; 539  : 				D3DDEVTYPE_HAL,
; 540  : 				ms_d3dPresentParameter.BackBufferFormat,
; 541  : 				0,
; 542  : 				D3DRTYPE_TEXTURE,
; 543  : 				D3DFMT_DXT3) == D3DERR_NOTAVAILABLE)

  00347	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A ; CGraphicBase::ms_lpd3d
  0034d	68 44 58 54 33	 push	 861165636		; 33545844H
  00352	6a 03		 push	 3
  00354	6a 00		 push	 0
  00356	ff 35 08 00 00
	00		 push	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+8
  0035c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0035e	6a 01		 push	 1
  00360	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iD3DAdapterInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DAdapterInfo
  00366	51		 push	 ecx
  00367	ff 50 28	 call	 DWORD PTR [eax+40]
  0036a	3d 6a 08 76 88	 cmp	 eax, -2005530518	; 8876086aH
  0036f	75 07		 jne	 SHORT $LN20@Create

; 544  : 	{
; 545  : 		ms_bSupportDXT = false;

  00371	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?ms_bSupportDXT@CGraphicBase@@1_NA, 0 ; CGraphicBase::ms_bSupportDXT
$LN20@Create:

; 546  : 	}
; 547  : 
; 548  : 	if(ms_lpd3d->CheckDeviceFormat(
; 549  : 				ms_iD3DAdapterInfo,
; 550  : 				D3DDEVTYPE_HAL,
; 551  : 				ms_d3dPresentParameter.BackBufferFormat,
; 552  : 				0,
; 553  : 				D3DRTYPE_TEXTURE,
; 554  : 				D3DFMT_DXT5) == D3DERR_NOTAVAILABLE)

  00378	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A ; CGraphicBase::ms_lpd3d
  0037e	68 44 58 54 35	 push	 894720068		; 35545844H
  00383	6a 03		 push	 3
  00385	6a 00		 push	 0
  00387	ff 35 08 00 00
	00		 push	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+8
  0038d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0038f	6a 01		 push	 1
  00391	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iD3DAdapterInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DAdapterInfo
  00397	51		 push	 ecx
  00398	ff 50 28	 call	 DWORD PTR [eax+40]
  0039b	3d 6a 08 76 88	 cmp	 eax, -2005530518	; 8876086aH
  003a0	75 07		 jne	 SHORT $LN21@Create

; 555  : 	{
; 556  : 		ms_bSupportDXT = false;

  003a2	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?ms_bSupportDXT@CGraphicBase@@1_NA, 0 ; CGraphicBase::ms_bSupportDXT
$LN21@Create:

; 557  : 	}
; 558  : 
; 559  : 	if (FAILED((ms_hLastResult = ms_lpd3dDevice->GetDeviceCaps(&ms_d3dCaps))))

  003a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  003af	68 00 00 00 00	 push	 OFFSET ?ms_d3dCaps@CGraphicBase@@1U_D3DCAPS8@@A ; CGraphicBase::ms_d3dCaps
  003b4	51		 push	 ecx
  003b5	8b 01		 mov	 eax, DWORD PTR [ecx]
  003b7	ff 50 1c	 call	 DWORD PTR [eax+28]
  003ba	a3 00 00 00 00	 mov	 DWORD PTR ?ms_hLastResult@CGraphicBase@@1JA, eax ; CGraphicBase::ms_hLastResult
  003bf	85 c0		 test	 eax, eax
  003c1	79 18		 jns	 SHORT $LN22@Create

; 560  : 	{
; 561  : 		Tracenf("IDirect3DDevice.GetDeviceCaps - ERROR %d", ms_hLastResult);

  003c3	50		 push	 eax
  003c4	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@PKDINAHJ@IDirect3DDevice?4GetDeviceCaps?5?9@
  003c9	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  003ce	83 c4 08	 add	 esp, 8

; 562  : 		return CREATE_GET_DEVICE_CAPS2;

  003d1	be 08 00 00 00	 mov	 esi, 8
  003d6	e9 c4 06 00 00	 jmp	 $LN34@Create
$LN22@Create:

; 563  : 	}
; 564  : 
; 565  : 	if (!Windowed)

  003db	80 7d 14 00	 cmp	 BYTE PTR _Windowed$[ebp], 0
  003df	75 17		 jne	 SHORT $LN23@Create

; 566  : 		SetWindowPos(hWnd, HWND_TOPMOST, 0, 0, iHres, iVres, SWP_SHOWWINDOW);

  003e1	6a 40		 push	 64			; 00000040H
  003e3	ff 75 10	 push	 DWORD PTR _iVres$[ebp]
  003e6	ff 75 0c	 push	 DWORD PTR _iHres$[ebp]
  003e9	6a 00		 push	 0
  003eb	6a 00		 push	 0
  003ed	6a ff		 push	 -1
  003ef	ff 75 b4	 push	 DWORD PTR _hWnd$GSCopy$1$[ebp]
  003f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28
$LN23@Create:

; 567  : 
; 568  : 	//Tracef("vertex shader version : %X\n",(DWORD)ms_d3dCaps.VertexShaderVersion);
; 569  : 
; 570  : 	ms_lpd3dDevice->GetViewport(&ms_Viewport);

  003f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  003fe	68 00 00 00 00	 push	 OFFSET ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT8@@A ; CGraphicBase::ms_Viewport
  00403	51		 push	 ecx
  00404	8b 01		 mov	 eax, DWORD PTR [ecx]
  00406	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]

; 571  : 
; 572  : 	m_pStateManager = new CStateManager(ms_lpd3dDevice);

  0040c	68 7c 33 01 00	 push	 78716			; 0001337cH
  00411	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00416	83 c4 04	 add	 esp, 4
  00419	89 45 ac	 mov	 DWORD PTR $T2[ebp], eax
  0041c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00420	85 c0		 test	 eax, eax
  00422	74 0f		 je	 SHORT $LN36@Create
  00424	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0042a	8b c8		 mov	 ecx, eax
  0042c	e8 00 00 00 00	 call	 ??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z ; CStateManager::CStateManager
  00431	eb 02		 jmp	 SHORT $LN37@Create
$LN36@Create:
  00433	33 c0		 xor	 eax, eax
$LN37@Create:
  00435	8b 7d b8	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]

; 573  : 
; 574  : 	D3DXCreateMatrixStack(0, &ms_lpd3dMatStack);

  00438	68 00 00 00 00	 push	 OFFSET ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  0043d	6a 00		 push	 0
  0043f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00443	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00446	e8 00 00 00 00	 call	 _D3DXCreateMatrixStack@8

; 575  : 	ms_lpd3dMatStack->LoadIdentity();

  0044b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  00450	50		 push	 eax
  00451	8b 08		 mov	 ecx, DWORD PTR [eax]
  00453	ff 51 14	 call	 DWORD PTR [ecx+20]

; 576  : 
; 577  : 	ms_ptVS	= CreatePTStreamVertexShader();

  00456	8b cf		 mov	 ecx, edi
  00458	e8 00 00 00 00	 call	 ?CreatePTStreamVertexShader@CGraphicDevice@@IAEKXZ ; CGraphicDevice::CreatePTStreamVertexShader

; 578  : 	ms_pntVS = CreatePNTStreamVertexShader();

  0045d	8b cf		 mov	 ecx, edi
  0045f	a3 00 00 00 00	 mov	 DWORD PTR ?ms_ptVS@CGraphicBase@@1KA, eax ; CGraphicBase::ms_ptVS
  00464	e8 00 00 00 00	 call	 ?CreatePNTStreamVertexShader@CGraphicDevice@@IAEKXZ ; CGraphicDevice::CreatePNTStreamVertexShader

; 579  : 	ms_pnt2VS = CreatePNT2StreamVertexShader();

  00469	8b cf		 mov	 ecx, edi
  0046b	a3 00 00 00 00	 mov	 DWORD PTR ?ms_pntVS@CGraphicBase@@1KA, eax ; CGraphicBase::ms_pntVS
  00470	e8 00 00 00 00	 call	 ?CreatePNT2StreamVertexShader@CGraphicDevice@@IAEKXZ ; CGraphicDevice::CreatePNT2StreamVertexShader
  00475	a3 00 00 00 00	 mov	 DWORD PTR ?ms_pnt2VS@CGraphicBase@@1KA, eax ; CGraphicBase::ms_pnt2VS
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0047a	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+56, 0
  00484	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+52, 0
  0048e	c7 05 30 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+48, 0
  00498	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+44, 0
  004a2	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+36, 0
  004ac	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+32, 0
  004b6	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+28, 0
  004c0	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+24, 0
  004ca	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+16, 0
  004d4	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+12, 0
  004de	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+8, 0
  004e8	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+4, 0

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  004f2	c7 05 3c 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+60, 1065353216 ; 3f800000H
  004fc	c7 05 28 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+40, 1065353216 ; 3f800000H
  00506	c7 05 14 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A+20, 1065353216 ; 3f800000H
  00510	c7 05 00 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A, 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0051a	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+56, 0
  00524	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+52, 0
  0052e	c7 05 30 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+48, 0
  00538	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+44, 0
  00542	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+36, 0
  0054c	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+32, 0
  00556	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+28, 0
  00560	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+24, 0
  0056a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+16, 0
  00574	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+12, 0
  0057e	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+8, 0
  00588	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+4, 0

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00592	c7 05 3c 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+60, 1065353216 ; 3f800000H
  0059c	c7 05 28 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+40, 1065353216 ; 3f800000H
  005a6	c7 05 14 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+20, 1065353216 ; 3f800000H
  005b0	c7 05 00 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A, 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  005ba	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+56, 0
  005c4	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+52, 0
  005ce	c7 05 30 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+48, 0
  005d8	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+44, 0
  005e2	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+36, 0
  005ec	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+32, 0
  005f6	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+28, 0
  00600	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+24, 0
  0060a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+16, 0
  00614	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+12, 0
  0061e	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+8, 0
  00628	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+4, 0

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00632	c7 05 3c 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+60, 1065353216 ; 3f800000H
  0063c	c7 05 28 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+40, 1065353216 ; 3f800000H
  00646	c7 05 14 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+20, 1065353216 ; 3f800000H
  00650	c7 05 00 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A, 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0065a	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+56, 0
  00664	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+52, 0
  0066e	c7 05 30 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+48, 0
  00678	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+44, 0
  00682	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+36, 0
  0068c	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+32, 0
  00696	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+28, 0
  006a0	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+24, 0
  006aa	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+16, 0
  006b4	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+12, 0
  006be	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+8, 0
  006c8	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+4, 0

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  006d2	c7 05 3c 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+60, 1065353216 ; 3f800000H
  006dc	c7 05 28 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+40, 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 596  : 	ms_matScreen2._11 = (float) iHres / 2;

  006e6	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR _iHres$[ebp]
  006eb	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 598  : 
; 599  : 	D3DXCreateSphere(ms_lpd3dDevice, 1.0f, 32, 32, &ms_lpSphereMesh, NULL);

  006ee	6a 00		 push	 0
  006f0	68 00 00 00 00	 push	 OFFSET ?ms_lpSphereMesh@CGraphicBase@@1PAUID3DXMesh@@A ; CGraphicBase::ms_lpSphereMesh
  006f5	6a 20		 push	 32			; 00000020H
  006f7	6a 20		 push	 32			; 00000020H
  006f9	51		 push	 ecx
  006fa	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00702	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00709	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0070f	c7 05 14 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+20, 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 596  : 	ms_matScreen2._11 = (float) iHres / 2;

  00719	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A, xmm0
  00721	66 0f 6e 45 10	 movd	 xmm0, DWORD PTR _iVres$[ebp]

; 597  : 	ms_matScreen2._22 = (float) iVres / 2;

  00726	0f 5b c0	 cvtdq2ps xmm0, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00729	c7 05 00 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A, 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00733	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+56, 0
  0073d	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+52, 0
  00747	c7 05 30 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+48, 0
  00751	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+44, 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 597  : 	ms_matScreen2._22 = (float) iVres / 2;

  0075b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00763	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+36, 0
  0076d	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+32, 0
  00777	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+28, 0
  00781	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+24, 0
  0078b	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+16, 0
  00795	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+12, 0
  0079f	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+8, 0
  007a9	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+4, 0

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  007b3	c7 05 3c 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+60, 1065353216 ; 3f800000H
  007bd	c7 05 28 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+40, 1065353216 ; 3f800000H
  007c7	c7 05 14 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A+20, 1065353216 ; 3f800000H
  007d1	c7 05 00 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matInverseViewYAxis@CGraphicBase@@1UD3DXMATRIX@@A, 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  007db	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+56, 0
  007e5	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+52, 0
  007ef	c7 05 30 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+48, 0
  007f9	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+44, 0
  00803	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+36, 0
  0080d	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+32, 0
  00817	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+28, 0
  00821	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+24, 0
  0082b	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+16, 0
  00835	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+12, 0
  0083f	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+8, 0
  00849	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+4, 0

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00853	c7 05 3c 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+60, 1065353216 ; 3f800000H
  0085d	c7 05 28 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+40, 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00867	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+56, 0
  00871	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+44, 0
  0087b	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+36, 0
  00885	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+32, 0
  0088f	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+28, 0
  00899	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+24, 0
  008a3	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+16, 0
  008ad	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+12, 0
  008b7	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+8, 0
  008c1	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+4, 0

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  008cb	c7 05 3c 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+60, 1065353216 ; 3f800000H
  008d5	c7 05 28 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+40, 1065353216 ; 3f800000H
  008df	c7 05 14 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+20, 1065353216 ; 3f800000H
  008e9	c7 05 00 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A, 1065353216 ; 3f800000H

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  008f3	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+56, 0
  008fd	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+52, 0
  00907	c7 05 30 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+48, 0
  00911	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+44, 0
  0091b	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+36, 0
  00925	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+32, 0
  0092f	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+28, 0
  00939	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+24, 0
  00943	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+16, 0
  0094d	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+12, 0
  00957	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+8, 0
  00961	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+4, 0

; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0096b	c7 05 3c 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+60, 1065353216 ; 3f800000H
  00975	c7 05 28 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+40, 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 590  : 	ms_matScreen0._11 = 1;

  0097f	c7 05 00 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A, 1065353216 ; 3f800000H

; 591  : 	ms_matScreen0._22 = -1;

  00989	c7 05 14 00 00
	00 00 00 80 bf	 mov	 DWORD PTR ?ms_matScreen0@CGraphicBase@@1UD3DXMATRIX@@A+20, -1082130432 ; bf800000H

; 592  : 
; 593  : 	ms_matScreen1._41 = 1;

  00993	c7 05 30 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+48, 1065353216 ; 3f800000H

; 594  : 	ms_matScreen1._42 = 1;

  0099d	c7 05 34 00 00
	00 00 00 80 3f	 mov	 DWORD PTR ?ms_matScreen1@CGraphicBase@@1UD3DXMATRIX@@A+52, 1065353216 ; 3f800000H

; 597  : 	ms_matScreen2._22 = (float) iVres / 2;

  009a7	f3 0f 11 05 14
	00 00 00	 movss	 DWORD PTR ?ms_matScreen2@CGraphicBase@@1UD3DXMATRIX@@A+20, xmm0

; 598  : 
; 599  : 	D3DXCreateSphere(ms_lpd3dDevice, 1.0f, 32, 32, &ms_lpSphereMesh, NULL);

  009af	e8 00 00 00 00	 call	 _D3DXCreateSphere@24

; 600  : 	D3DXCreateCylinder(ms_lpd3dDevice, 1.0f, 1.0f, 1.0f, 8, 8, &ms_lpCylinderMesh, NULL);

  009b4	6a 00		 push	 0
  009b6	68 00 00 00 00	 push	 OFFSET ?ms_lpCylinderMesh@CGraphicBase@@1PAUID3DXMesh@@A ; CGraphicBase::ms_lpCylinderMesh
  009bb	6a 08		 push	 8
  009bd	6a 08		 push	 8
  009bf	83 ec 0c	 sub	 esp, 12			; 0000000cH
  009c2	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR [esp+8], 1065353216 ; 3f800000H
  009ca	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  009d2	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  009d9	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  009df	e8 00 00 00 00	 call	 _D3DXCreateCylinder@32

; 601  : 
; 602  : 	ms_lpd3dDevice->Clear(0L, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, 0xff000000, 1.0f, 0);

  009e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  009e9	6a 00		 push	 0
  009eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  009ed	51		 push	 ecx
  009ee	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  009f5	68 00 00 00 ff	 push	 -16777216		; ff000000H
  009fa	6a 03		 push	 3
  009fc	6a 00		 push	 0
  009fe	6a 00		 push	 0
  00a00	50		 push	 eax
  00a01	ff 91 90 00 00
	00		 call	 DWORD PTR [ecx+144]

; 603  : 
; 604  : 	if (!__CreateDefaultIndexBufferList())

  00a07	8b cf		 mov	 ecx, edi
  00a09	e8 00 00 00 00	 call	 ?__CreateDefaultIndexBufferList@CGraphicDevice@@IAE_NXZ ; CGraphicDevice::__CreateDefaultIndexBufferList
  00a0e	84 c0		 test	 al, al
  00a10	75 07		 jne	 SHORT $LN24@Create

; 605  : 		return false;

  00a12	33 f6		 xor	 esi, esi
  00a14	e9 86 00 00 00	 jmp	 $LN34@Create
$LN24@Create:

; 606  : 
; 607  : 	if (!__CreatePDTVertexBufferList())

  00a19	8b cf		 mov	 ecx, edi
  00a1b	e8 00 00 00 00	 call	 ?__CreatePDTVertexBufferList@CGraphicDevice@@IAE_NXZ ; CGraphicDevice::__CreatePDTVertexBufferList
  00a20	84 c0		 test	 al, al
  00a22	75 04		 jne	 SHORT $LN25@Create

; 608  : 		return false;

  00a24	33 f6		 xor	 esi, esi
  00a26	eb 77		 jmp	 SHORT $LN34@Create
$LN25@Create:

; 609  : 
; 610  : 	DWORD dwTexMemSize = GetAvailableTextureMemory();

  00a28	e8 00 00 00 00	 call	 ?GetAvailableTextureMemory@CGraphicBase@@SAKXZ ; CGraphicBase::GetAvailableTextureMemory

; 611  : 
; 612  : 	if (dwTexMemSize < 64 * 1024 * 1024)
; 613  : 		ms_isLowTextureMemory = true;
; 614  : 	else
; 615  : 		ms_isLowTextureMemory = false;
; 616  : 
; 617  : 	if (dwTexMemSize > 100 * 1024 * 1024)
; 618  : 		ms_isHighTextureMemory = true;
; 619  : 	else
; 620  : 		ms_isHighTextureMemory = false;
; 621  : 
; 622  : 	if (ms_d3dCaps.TextureAddressCaps & D3DPTADDRESSCAPS_BORDER)
; 623  : 		GRAPHICS_CAPS_CAN_NOT_TEXTURE_ADDRESS_BORDER=false;
; 624  : 	else
; 625  : 		GRAPHICS_CAPS_CAN_NOT_TEXTURE_ADDRESS_BORDER=true;
; 626  : 
; 627  : 	//D3DADAPTER_IDENTIFIER8& rkD3DAdapterId=pkD3DAdapterInfo->GetIdentifier();
; 628  : 	if (strnicmp(rkD3DAdapterId.Driver, "SIS", 3) == 0)

  00a2d	8b 7d b0	 mov	 edi, DWORD PTR _pkD3DAdapterInfo$1$[ebp]
  00a30	3d 00 00 00 04	 cmp	 eax, 67108864		; 04000000H
  00a35	6a 03		 push	 3
  00a37	0f 92 05 00 00
	00 00		 setb	 BYTE PTR ?ms_isLowTextureMemory@CGraphicBase@@1_NA ; CGraphicBase::ms_isLowTextureMemory
  00a3e	3d 00 00 40 06	 cmp	 eax, 104857600		; 06400000H
  00a43	a1 4c 00 00 00	 mov	 eax, DWORD PTR ?ms_d3dCaps@CGraphicBase@@1U_D3DCAPS8@@A+76
  00a48	0f 97 05 00 00
	00 00		 seta	 BYTE PTR ?ms_isHighTextureMemory@CGraphicBase@@1_NA ; CGraphicBase::ms_isHighTextureMemory
  00a4f	c1 e8 03	 shr	 eax, 3
  00a52	f6 d0		 not	 al
  00a54	24 01		 and	 al, 1
  00a56	68 00 00 00 00	 push	 OFFSET ??_C@_03OJNODIHH@SIS@
  00a5b	57		 push	 edi
  00a5c	a2 00 00 00 00	 mov	 BYTE PTR ?GRAPHICS_CAPS_CAN_NOT_TEXTURE_ADDRESS_BORDER@@3_NA, al ; GRAPHICS_CAPS_CAN_NOT_TEXTURE_ADDRESS_BORDER
  00a61	e8 00 00 00 00	 call	 __strnicmp
  00a66	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a69	85 c0		 test	 eax, eax
  00a6b	75 09		 jne	 SHORT $LN32@Create

; 629  : 	{
; 630  : 		GRAPHICS_CAPS_CAN_NOT_DRAW_LINE = true;

  00a6d	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GRAPHICS_CAPS_CAN_NOT_DRAW_LINE@@3_NA, 1 ; GRAPHICS_CAPS_CAN_NOT_DRAW_LINE

; 631  : 		GRAPHICS_CAPS_CAN_NOT_DRAW_SHADOW = true;
; 632  : 		GRAPHICS_CAPS_HALF_SIZE_IMAGE = true;
; 633  : 		ms_isLowTextureMemory = true;
; 634  : 	}

  00a74	eb 14		 jmp	 SHORT $LN352@Create
$LN32@Create:

; 635  : 	else if (strnicmp(rkD3DAdapterId.Driver, "3dfx", 4) == 0)

  00a76	6a 04		 push	 4
  00a78	68 00 00 00 00	 push	 OFFSET ??_C@_04MAKEOOIM@3dfx@
  00a7d	57		 push	 edi
  00a7e	e8 00 00 00 00	 call	 __strnicmp
  00a83	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a86	85 c0		 test	 eax, eax
  00a88	75 15		 jne	 SHORT $LN34@Create
$LN352@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00a8a	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?ms_isLowTextureMemory@CGraphicBase@@1_NA, 1 ; CGraphicBase::ms_isLowTextureMemory
  00a91	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GRAPHICS_CAPS_HALF_SIZE_IMAGE@@3_NA, 1 ; GRAPHICS_CAPS_HALF_SIZE_IMAGE
  00a98	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GRAPHICS_CAPS_CAN_NOT_DRAW_SHADOW@@3_NA, 1 ; GRAPHICS_CAPS_CAN_NOT_DRAW_SHADOW
$LN34@Create:
  00a9f	8b 4d ec	 mov	 ecx, DWORD PTR _stModeInfo$[ebp+20]
  00aa2	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00aa5	76 28		 jbe	 SHORT $LN146@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00aa7	8b 55 d8	 mov	 edx, DWORD PTR _stModeInfo$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00aaa	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00aab	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00aad	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00ab3	72 10		 jb	 SHORT $LN157@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00ab5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00ab8	83 c1 23	 add	 ecx, 35			; 00000023H
  00abb	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00abd	83 c0 fc	 add	 eax, -4			; fffffffcH
  00ac0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00ac3	77 6b		 ja	 SHORT $LN96@Create
$LN157@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00ac5	51		 push	 ecx
  00ac6	52		 push	 edx
  00ac7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00acc	83 c4 08	 add	 esp, 8
$LN146@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00acf	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stModeInfo$[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00ad6	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _stModeInfo$[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00add	c6 45 d8 00	 mov	 BYTE PTR _stModeInfo$[ebp], 0
$LN133@Create:

; 434  :         return _Myres > _Small_string_capacity;

  00ae1	8b 4d d4	 mov	 ecx, DWORD PTR _stDevList$[ebp+20]
  00ae4	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00ae7	76 28		 jbe	 SHORT $LN88@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00ae9	8b 55 c0	 mov	 edx, DWORD PTR _stDevList$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00aec	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00aed	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00aef	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00af5	72 10		 jb	 SHORT $LN99@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00af7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00afa	83 c1 23	 add	 ecx, 35			; 00000023H
  00afd	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00aff	83 c0 fc	 add	 eax, -4			; fffffffcH
  00b02	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00b05	77 29		 ja	 SHORT $LN96@Create
$LN99@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00b07	51		 push	 ecx
  00b08	52		 push	 edx
  00b09	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00b0e	83 c4 08	 add	 esp, 8
$LN88@Create:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 642  : 	return (iRet);

  00b11	8b c6		 mov	 eax, esi
$LN1@Create:

; 643  : }

  00b13	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00b16	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00b1d	59		 pop	 ecx
  00b1e	5f		 pop	 edi
  00b1f	5e		 pop	 esi
  00b20	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b23	33 cd		 xor	 ecx, ebp
  00b25	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b2a	8b e5		 mov	 esp, ebp
  00b2c	5d		 pop	 ebp
  00b2d	c2 18 00	 ret	 24			; 00000018H
$LN96@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00b30	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN349@Create:
  00b35	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _stDevList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR _stModeInfo$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z$2:
  00010	68 7c 33 01 00	 push	 78716			; 0001337cH
  00015	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001e	83 c4 08	 add	 esp, 8
  00021	c3		 ret	 0
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
  00026	cc		 int	 3
__ehhandler$?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z:
  00027	90		 npad	 1
  00028	90		 npad	 1
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Create@CGraphicDevice@@QAEHPAUHWND__@@HH_NHH@Z ENDP	; CGraphicDevice::Create
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?Destroy@CGraphicDevice@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CGraphicDevice@@QAEXXZ PROC			; CGraphicDevice::Destroy, COMDAT
; _this$ = ecx

; 810  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 811  : 	__DestroyPDTVertexBufferList();

  00003	e8 00 00 00 00	 call	 ?__DestroyPDTVertexBufferList@CGraphicDevice@@IAEXXZ ; CGraphicDevice::__DestroyPDTVertexBufferList

; 812  : 	__DestroyDefaultIndexBufferList();

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ?__DestroyDefaultIndexBufferList@CGraphicDevice@@IAEXXZ ; CGraphicDevice::__DestroyDefaultIndexBufferList

; 813  : 
; 814  : 	if (ms_hDC)

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_hDC@CGraphicBase@@1PAUHDC__@@A ; CGraphicBase::ms_hDC
  00014	85 c0		 test	 eax, eax
  00016	74 17		 je	 SHORT $LN2@Destroy

; 815  : 	{
; 816  : 		ReleaseDC(ms_hWnd, ms_hDC);

  00018	50		 push	 eax
  00019	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_hWnd@CGraphicBase@@1PAUHWND__@@A ; CGraphicBase::ms_hWnd
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8

; 817  : 		ms_hDC = NULL;

  00025	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_hDC@CGraphicBase@@1PAUHDC__@@A, 0 ; CGraphicBase::ms_hDC
$LN2@Destroy:

; 818  : 	}
; 819  : 
; 820  : 	if (ms_ptVS)

  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_ptVS@CGraphicBase@@1KA ; CGraphicBase::ms_ptVS
  00035	85 d2		 test	 edx, edx
  00037	74 19		 je	 SHORT $LN3@Destroy

; 821  : 	{
; 822  : 		ms_lpd3dDevice->DeleteVertexShader(ms_ptVS);

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0003e	52		 push	 edx
  0003f	50		 push	 eax
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	ff 91 38 01 00
	00		 call	 DWORD PTR [ecx+312]

; 823  : 		ms_ptVS = 0;;

  00048	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_ptVS@CGraphicBase@@1KA, 0 ; CGraphicBase::ms_ptVS
$LN3@Destroy:

; 824  : 	}
; 825  : 
; 826  : 	if (ms_pntVS)

  00052	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_pntVS@CGraphicBase@@1KA ; CGraphicBase::ms_pntVS
  00058	85 d2		 test	 edx, edx
  0005a	74 19		 je	 SHORT $LN4@Destroy

; 827  : 	{
; 828  : 		ms_lpd3dDevice->DeleteVertexShader(ms_pntVS);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00061	52		 push	 edx
  00062	50		 push	 eax
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	ff 91 38 01 00
	00		 call	 DWORD PTR [ecx+312]

; 829  : 		ms_pntVS = 0;

  0006b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_pntVS@CGraphicBase@@1KA, 0 ; CGraphicBase::ms_pntVS
$LN4@Destroy:

; 830  : 	}
; 831  : 
; 832  : 	if (ms_pnt2VS)

  00075	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_pnt2VS@CGraphicBase@@1KA ; CGraphicBase::ms_pnt2VS
  0007b	85 d2		 test	 edx, edx
  0007d	74 19		 je	 SHORT $LN5@Destroy

; 833  : 	{
; 834  : 		ms_lpd3dDevice->DeleteVertexShader(ms_pnt2VS);

  0007f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00084	52		 push	 edx
  00085	50		 push	 eax
  00086	8b 08		 mov	 ecx, DWORD PTR [eax]
  00088	ff 91 38 01 00
	00		 call	 DWORD PTR [ecx+312]

; 835  : 		ms_pnt2VS = 0;

  0008e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_pnt2VS@CGraphicBase@@1KA, 0 ; CGraphicBase::ms_pnt2VS
$LN5@Destroy:
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 156  : 	if (!rpObject)

  00098	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpSphereMesh@CGraphicBase@@1PAUID3DXMesh@@A ; CGraphicBase::ms_lpSphereMesh
  0009e	85 c9		 test	 ecx, ecx
  000a0	74 10		 je	 SHORT $LN10@Destroy

; 157  : 		return;
; 158  : 
; 159  : 	rpObject->Release();

  000a2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a4	51		 push	 ecx
  000a5	ff 50 08	 call	 DWORD PTR [eax+8]

; 160  : 	rpObject = NULL;

  000a8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_lpSphereMesh@CGraphicBase@@1PAUID3DXMesh@@A, 0 ; CGraphicBase::ms_lpSphereMesh
$LN10@Destroy:

; 156  : 	if (!rpObject)

  000b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpCylinderMesh@CGraphicBase@@1PAUID3DXMesh@@A ; CGraphicBase::ms_lpCylinderMesh
  000b8	85 c9		 test	 ecx, ecx
  000ba	74 10		 je	 SHORT $LN13@Destroy

; 157  : 		return;
; 158  : 
; 159  : 	rpObject->Release();

  000bc	8b 01		 mov	 eax, DWORD PTR [ecx]
  000be	51		 push	 ecx
  000bf	ff 50 08	 call	 DWORD PTR [eax+8]

; 160  : 	rpObject = NULL;

  000c2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_lpCylinderMesh@CGraphicBase@@1PAUID3DXMesh@@A, 0 ; CGraphicBase::ms_lpCylinderMesh
$LN13@Destroy:

; 156  : 	if (!rpObject)

  000cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  000d2	85 c9		 test	 ecx, ecx
  000d4	74 10		 je	 SHORT $LN16@Destroy

; 157  : 		return;
; 158  : 
; 159  : 	rpObject->Release();

  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d8	51		 push	 ecx
  000d9	ff 50 08	 call	 DWORD PTR [eax+8]

; 160  : 	rpObject = NULL;

  000dc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A, 0 ; CGraphicBase::ms_lpd3dMatStack
$LN16@Destroy:

; 156  : 	if (!rpObject)

  000e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000ec	85 c9		 test	 ecx, ecx
  000ee	74 10		 je	 SHORT $LN19@Destroy

; 157  : 		return;
; 158  : 
; 159  : 	rpObject->Release();

  000f0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f2	51		 push	 ecx
  000f3	ff 50 08	 call	 DWORD PTR [eax+8]

; 160  : 	rpObject = NULL;

  000f6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A, 0 ; CGraphicBase::ms_lpd3dDevice
$LN19@Destroy:

; 156  : 	if (!rpObject)

  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A ; CGraphicBase::ms_lpd3d
  00106	85 c9		 test	 ecx, ecx
  00108	74 10		 je	 SHORT $LN22@Destroy

; 157  : 		return;
; 158  : 
; 159  : 	rpObject->Release();

  0010a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0010c	51		 push	 ecx
  0010d	ff 50 08	 call	 DWORD PTR [eax+8]

; 160  : 	rpObject = NULL;

  00110	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A, 0 ; CGraphicBase::ms_lpd3d
$LN22@Destroy:
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 845  : 	if (m_pStateManager)

  0011a	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0011d	85 c9		 test	 ecx, ecx
  0011f	74 0d		 je	 SHORT $LN6@Destroy

; 846  : 	{
; 847  : 		delete m_pStateManager;

  00121	8b 01		 mov	 eax, DWORD PTR [ecx]
  00123	6a 01		 push	 1
  00125	ff 10		 call	 DWORD PTR [eax]

; 848  : 		m_pStateManager = NULL;

  00127	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
$LN6@Destroy:

; 849  : 	}
; 850  : 
; 851  : 	__Initialize();

  0012e	8b ce		 mov	 ecx, esi
  00130	5e		 pop	 esi
  00131	e9 00 00 00 00	 jmp	 ?__Initialize@CGraphicDevice@@IAEXXZ ; CGraphicDevice::__Initialize
?Destroy@CGraphicDevice@@QAEXXZ ENDP			; CGraphicDevice::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ?InitBackBufferCount@CGraphicDevice@@QAEXI@Z
_TEXT	SEGMENT
_uBackBufferCount$ = 8					; size = 4
?InitBackBufferCount@CGraphicDevice@@QAEXI@Z PROC	; CGraphicDevice::InitBackBufferCount, COMDAT
; _this$ = ecx

; 805  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 806  : 	m_uBackBufferCount=uBackBufferCount;

  00003	8b 45 08	 mov	 eax, DWORD PTR _uBackBufferCount$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 807  : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?InitBackBufferCount@CGraphicDevice@@QAEXI@Z ENDP	; CGraphicDevice::InitBackBufferCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ??1CGraphicDevice@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicDevice@@UAE@XZ PROC				; CGraphicDevice::~CGraphicDevice, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicDevice@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx
  00026	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CGraphicDevice@@6B@

; 24   : 	Destroy();

  0002c	e8 00 00 00 00	 call	 ?Destroy@CGraphicDevice@@QAEXXZ ; CGraphicDevice::Destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00031	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 25   : }

  00034	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00037	8b ce		 mov	 ecx, esi
  00039	ff 70 04	 push	 DWORD PTR [eax+4]
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned int const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00042	6a 2c		 push	 44			; 0000002cH
  00044	ff 36		 push	 DWORD PTR [esi]
  00046	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004b	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 25   : }

  0004e	8b cf		 mov	 ecx, edi
  00050	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicDevice@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicDevice@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicDevice@@UAE@XZ ENDP				; CGraphicDevice::~CGraphicDevice
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp
;	COMDAT ??0CGraphicDevice@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGraphicDevice@@QAE@XZ PROC				; CGraphicDevice::CGraphicDevice, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphicDevice@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
  00031	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00034	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CGraphicDevice@@6B@
  0003a	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00041	6a 2c		 push	 44			; 0000002cH
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 18   : {

  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0004d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00053	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 19   : 	__Initialize();

  00062	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00064	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00066	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00069	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  0006c	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00072	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\GrpDevice.cpp

; 19   : 	__Initialize();

  00074	e8 00 00 00 00	 call	 ?__Initialize@CGraphicDevice@@IAEXXZ ; CGraphicDevice::__Initialize

; 20   : }

  00079	8b c7		 mov	 eax, edi
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphicDevice@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CGraphicDevice@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphicDevice@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphicDevice@@QAE@XZ ENDP				; CGraphicDevice::CGraphicDevice
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 417  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT _sscanf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT

; 2247 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2153 :         return __stdio_common_vsscanf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00016	ff 70 04	 push	 DWORD PTR [eax+4]
  00019	ff 30		 push	 DWORD PTR [eax]
  0001b	e8 00 00 00 00	 call	 ___stdio_common_vsscanf
  00020	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);
; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);
; 2252 :         __crt_va_end(_ArgList);
; 2253 :         return _Result;
; 2254 :     }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00005	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
