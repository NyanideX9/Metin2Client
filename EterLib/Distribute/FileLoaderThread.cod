; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\FileLoaderThread.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CFileLoaderThread@@QAE@XZ			; CFileLoaderThread::CFileLoaderThread
PUBLIC	??1CFileLoaderThread@@QAE@XZ			; CFileLoaderThread::~CFileLoaderThread
PUBLIC	?Create@CFileLoaderThread@@QAEHPAX@Z		; CFileLoaderThread::Create
PUBLIC	?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CFileLoaderThread::Request
PUBLIC	?Fetch@CFileLoaderThread@@QAE_NPAPAUSData@1@@Z	; CFileLoaderThread::Fetch
PUBLIC	?Shutdown@CFileLoaderThread@@QAEXXZ		; CFileLoaderThread::Shutdown
PUBLIC	?EntryPoint@CFileLoaderThread@@KGIPAX@Z		; CFileLoaderThread::EntryPoint
PUBLIC	?Run@CFileLoaderThread@@IAEIPAX@Z		; CFileLoaderThread::Run
PUBLIC	?Setup@CFileLoaderThread@@IAEIXZ		; CFileLoaderThread::Setup
PUBLIC	?Execute@CFileLoaderThread@@IAEIPAX@Z		; CFileLoaderThread::Execute
PUBLIC	?Destroy@CFileLoaderThread@@IAEXXZ		; CFileLoaderThread::Destroy
PUBLIC	?Process@CFileLoaderThread@@IAEXXZ		; CFileLoaderThread::Process
PUBLIC	??1?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAE@XZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::~deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >
PUBLIC	?push_back@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAEXABQAUSData@CFileLoaderThread@@@Z ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::push_back
PUBLIC	?_Xlen@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@CAXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Xlen
PUBLIC	?_Growmap@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXI@Z ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Growmap
PUBLIC	?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy
PUBLIC	??$stl_wipe@V?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@@YAXAAV?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@Z ; stl_wipe<std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> > >
PUBLIC	??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAPAUSData@CFileLoaderThread@@I@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CFileLoaderThread::SData * * *,unsigned int>
PUBLIC	??$_Zero_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0@Z ; std::_Zero_range<CFileLoaderThread::SData * * *>
PUBLIC	??$_Copy_memmove@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@00@Z ; std::_Copy_memmove<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
PUBLIC	??$_Copy_memmove_tail@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QBDQAPAPAU12@II@Z ; std::_Copy_memmove_tail<CFileLoaderThread::SData * * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
PUBLIC	??_C@_0EP@NDKNAKHH@CFileLoaderThread?3?3Execute?3?5Tim@ ; `string'
PUBLIC	??_C@_0DD@FFGDMIEH@CFileLoaderThread?3?3Request?3?5Rel@ ; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__ReleaseSemaphore@12:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__SetThreadPriority@8:PROC
EXTRN	__imp__CreateSemaphoreA@16:PROC
EXTRN	__beginthreadex:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	??0CMappedFile@@QAE@XZ:PROC			; CMappedFile::CMappedFile
EXTRN	??1CMappedFile@@UAE@XZ:PROC			; CMappedFile::~CMappedFile
EXTRN	?Size@CMappedFile@@QAEKXZ:PROC			; CMappedFile::Size
EXTRN	?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z:PROC ; CEterPackManager::Get
EXTRN	??0Mutex@@QAE@XZ:PROC				; Mutex::Mutex
EXTRN	??1Mutex@@QAE@XZ:PROC				; Mutex::~Mutex
EXTRN	?Lock@Mutex@@QAEXXZ:PROC			; Mutex::Lock
EXTRN	?Unlock@Mutex@@QAEXXZ:PROC			; Mutex::Unlock
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?g_iLoadingDelayTime@@3HA:DWORD			; g_iLoadingDelayTime
EXTRN	___security_cookie:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A DD 01H DUP (?) ; CSingleton<CEterPackManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@FFGDMIEH@CFileLoaderThread?3?3Request?3?5Rel@
CONST	SEGMENT
??_C@_0DD@FFGDMIEH@CFileLoaderThread?3?3Request?3?5Rel@ DB 'CFileLoaderTh'
	DB	'read::Request: ReleaseSemaphore error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@NDKNAKHH@CFileLoaderThread?3?3Execute?3?5Tim@
CONST	SEGMENT
??_C@_0EP@NDKNAKHH@CFileLoaderThread?3?3Execute?3?5Tim@ DB 'CFileLoaderTh'
	DB	'read::Execute: Timeout occured while time-out interval is INI'
	DB	'FITE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFileLoaderThread@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFileLoaderThread@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFileLoaderThread@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CFileLoaderThread@@QAE@XZ$2
__ehfuncinfo$??0CFileLoaderThread@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CFileLoaderThread@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SData@CFileLoaderThread@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SData@CFileLoaderThread@@QAE@XZ$0
__ehfuncinfo$??0SData@CFileLoaderThread@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SData@CFileLoaderThread@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QBDQAPAPAU12@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QBDQAPAPAU12@II@Z PROC ; std::_Copy_memmove_tail<CFileLoaderThread::SData * * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QBDQAPAPAU12@II@Z ENDP ; std::_Copy_memmove_tail<CFileLoaderThread::SData * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@00@Z PROC ; std::_Copy_memmove<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QBDQAPAPAU12@II@Z ; std::_Copy_memmove_tail<CFileLoaderThread::SData * * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@00@Z ENDP ; std::_Copy_memmove<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Zero_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0@Z PROC ; std::_Zero_range<CFileLoaderThread::SData * * *>, COMDAT

; 2032 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2033 :     char* const _First_ch = reinterpret_cast<char*>(_STD _To_address(_First));
; 2034 :     char* const _Last_ch  = reinterpret_cast<char*>(_STD _To_address(_Last));
; 2035 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 2036 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2037 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0@Z ENDP ; std::_Zero_range<CFileLoaderThread::SData * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAPAUSData@CFileLoaderThread@@I@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAPAUSData@CFileLoaderThread@@I@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<CFileLoaderThread::SData * * *,unsigned int>, COMDAT

; 2064 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2065 :     // value-initialize all elements in [_UFirst, _UFirst + _Count)
; 2066 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 2067 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 2068 :         return _STD _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __UFirst$[ebp], ecx

; 2069 :     } else {
; 2070 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 2071 :         for (; 0 < _Count; --_Count) {
; 2072 :             _Backout._Emplace_back();
; 2073 :         }
; 2074 : 
; 2075 :         return _Backout._Release();
; 2076 :     }
; 2077 : }

  00012	5d		 pop	 ebp

; 2065 :     // value-initialize all elements in [_UFirst, _UFirst + _Count)
; 2066 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 2067 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 2068 :         return _STD _Zero_range(_UFirst, _UFirst + _Count);

  00013	e9 00 00 00 00	 jmp	 ??$_Zero_range@PAPAPAUSData@CFileLoaderThread@@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0@Z ; std::_Zero_range<CFileLoaderThread::SData * * *>
??$_Uninitialized_value_construct_n_unchecked1@PAPAPAUSData@CFileLoaderThread@@I@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<CFileLoaderThread::SData * * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z PROC ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>, COMDAT

; 1928 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1929 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1930 :     _STD _Adl_verify_range(_First, _Last);
; 1931 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1933 :     auto _UDest       = _STD _Get_unwrapped_n(_Dest, _STD _Idl_distance<_InIt>(_UFirst, _ULast));
; 1934 :     _STD _Seek_wrapped(_Dest, _STD _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));
; 1935 :     return _Dest;
; 1936 : }

  00003	5d		 pop	 ebp

; 1915 :             return _STD _Copy_memmove(_First, _Last, _Dest);

  00004	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@00@Z ; std::_Copy_memmove<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z ENDP ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h
;	COMDAT ??$stl_wipe@V?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@@YAXAAV?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@Z
_TEXT	SEGMENT
tv609 = -8						; size = 4
tv614 = -4						; size = 4
_container$ = 8						; size = 4
??$stl_wipe@V?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@@YAXAAV?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@Z PROC ; stl_wipe<std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> > >, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 252  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _container$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 112  : {

  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 252  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  0000a	8b 59 0c	 mov	 ebx, DWORD PTR [ecx+12]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 112  : {

  0000d	56		 push	 esi
  0000e	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1297 :             _Myproxy = _Parent->_Myproxy;

  0000f	8b 39		 mov	 edi, DWORD PTR [ecx]
$LL4@stl_wipe:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 899  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00011	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00014	03 41 0c	 add	 eax, DWORD PTR [ecx+12]

; 353  :         return this->_Myoff == _Right._Myoff;

  00017	3b d8		 cmp	 ebx, eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 113  : 	for (auto i = container.begin(); i != container.end(); ++i)

  00019	0f 84 b0 00 00
	00		 je	 $LN3@stl_wipe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0001f	85 ff		 test	 edi, edi
  00021	74 04		 je	 SHORT $LN68@stl_wipe
  00023	8b 07		 mov	 eax, DWORD PTR [edi]
  00025	eb 02		 jmp	 SHORT $LN69@stl_wipe
$LN68@stl_wipe:
  00027	33 c0		 xor	 eax, eax
$LN69@stl_wipe:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00029	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0002c	8b cb		 mov	 ecx, ebx
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 115  : 		delete* i;

  0002e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00031	4e		 dec	 esi
  00032	c1 e9 02	 shr	 ecx, 2

; 571  :         const auto _Block_off = static_cast<difference_type>(_Off % _Block_size);

  00035	8b d3		 mov	 edx, ebx

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00037	23 f1		 and	 esi, ecx
  00039	89 4d f8	 mov	 DWORD PTR tv609[ebp], ecx

; 571  :         const auto _Block_off = static_cast<difference_type>(_Off % _Block_size);

  0003c	83 e2 03	 and	 edx, 3

; 572  :         return _Map[_Block][_Block_off];

  0003f	c1 e2 02	 shl	 edx, 2
  00042	89 55 fc	 mov	 DWORD PTR tv614[ebp], edx
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 115  : 		delete* i;

  00045	8b 34 b0	 mov	 esi, DWORD PTR [eax+esi*4]
  00048	8b 34 32	 mov	 esi, DWORD PTR [edx+esi]
  0004b	85 f6		 test	 esi, esi
  0004d	74 59		 je	 SHORT $LN78@stl_wipe
  0004f	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00052	e8 00 00 00 00	 call	 ??1CMappedFile@@UAE@XZ	; CMappedFile::~CMappedFile
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00057	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0005a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0005d	76 27		 jbe	 SHORT $LN106@stl_wipe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005f	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00061	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00062	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00068	72 12		 jb	 SHORT $LN117@stl_wipe

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0006a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00070	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00072	83 c0 fc	 add	 eax, -4			; fffffffcH
  00075	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00078	77 61		 ja	 SHORT $LN114@stl_wipe

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0007a	8b c2		 mov	 eax, edx
$LN117@stl_wipe:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007c	51		 push	 ecx
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00083	83 c4 08	 add	 esp, 8
$LN106@stl_wipe:
  00086	68 64 01 00 00	 push	 356			; 00000164H
  0008b	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0008c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00093	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0009a	c6 06 00	 mov	 BYTE PTR [esi], 0
  0009d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000a2	8b 55 fc	 mov	 edx, DWORD PTR tv614[ebp]
  000a5	83 c4 08	 add	 esp, 8
$LN78@stl_wipe:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  000a8	85 ff		 test	 edi, edi
  000aa	74 04		 je	 SHORT $LN134@stl_wipe
  000ac	8b 07		 mov	 eax, DWORD PTR [edi]
  000ae	eb 02		 jmp	 SHORT $LN135@stl_wipe
$LN134@stl_wipe:
  000b0	33 c0		 xor	 eax, eax
$LN135@stl_wipe:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  000b2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 116  : 		*i = NULL;

  000b5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  000b8	49		 dec	 ecx
  000b9	23 4d f8	 and	 ecx, DWORD PTR tv609[ebp]

; 278  :         ++_Myoff;

  000bc	43		 inc	 ebx
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 116  : 		*i = NULL;

  000bd	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 278  :         ++_Myoff;

  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _container$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 116  : 		*i = NULL;

  000c3	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 278  :         ++_Myoff;

  000ca	e9 42 ff ff ff	 jmp	 $LL4@stl_wipe
$LN3@stl_wipe:

; 1577 :         _Tidy();

  000cf	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\eterBase\Stl.h

; 120  : }

  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
$LN114@stl_wipe:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000db	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN160@stl_wipe:
  000e0	cc		 int	 3
??$stl_wipe@V?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@@YAXAAV?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@Z ENDP ; stl_wipe<std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ PROC ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy, COMDAT
; _this$ = ecx

; 1671 :     void _Tidy() noexcept { // free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 959  :         return _Mysize() == 0;

  00003	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00006	85 c9		 test	 ecx, ecx

; 1672 :         _Orphan_all();
; 1673 : 
; 1674 :         while (!empty()) {

  00008	74 15		 je	 SHORT $LN76@Tidy
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Tidy:

; 1513 :         if (--_Mysize() == 0) {

  00010	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00013	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00016	8b c8		 mov	 ecx, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 f4		 jne	 SHORT $LL2@Tidy

; 1514 :             _Myoff() = 0;

  0001c	89 47 0c	 mov	 DWORD PTR [edi+12], eax
$LN76@Tidy:

; 1675 :             pop_back();
; 1676 :         }
; 1677 : 
; 1678 :         if (_Map() != nullptr) {

  0001f	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00023	74 61		 je	 SHORT $LN25@Tidy
  00025	56		 push	 esi

; 1655 :         for (auto _Block = _Map_distance(); _Block > 0;) { // free storage for a block and destroy pointer

  00026	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00029	85 f6		 test	 esi, esi
  0002b	7e 1d		 jle	 SHORT $LN73@Tidy
  0002d	0f 1f 00	 npad	 3
$LL23@Tidy:

; 1656 :             --_Block;
; 1657 :             auto& _Block_ptr = _Map()[_Block];
; 1658 :             if (_Block_ptr) { // free block

  00030	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00033	4e		 dec	 esi
  00034	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00037	85 c0		 test	 eax, eax
  00039	74 0b		 je	 SHORT $LN21@Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003b	6a 10		 push	 16			; 00000010H
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00043	83 c4 08	 add	 esp, 8
$LN21@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1655 :         for (auto _Block = _Map_distance(); _Block > 0;) { // free storage for a block and destroy pointer

  00046	85 f6		 test	 esi, esi
  00048	7f e6		 jg	 SHORT $LL23@Tidy
$LN73@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00050	c1 e1 02	 shl	 ecx, 2
  00053	5e		 pop	 esi

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00054	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005a	72 12		 jb	 SHORT $LN63@Tidy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00062	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00064	83 c0 fc	 add	 eax, -4			; fffffffcH
  00067	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006a	77 1c		 ja	 SHORT $LN60@Tidy

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006c	8b c2		 mov	 eax, edx
$LN63@Tidy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006e	51		 push	 ecx
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00075	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1667 :         _Map()     = nullptr;

  00078	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1668 :         _Mapsize() = 0;

  0007f	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN25@Tidy:
  00086	5f		 pop	 edi

; 1683 :     }

  00087	c3		 ret	 0
$LN60@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@Tidy:
  0008d	cc		 int	 3
?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ ENDP ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ?_Growmap@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
tv465 = -8						; size = 4
__Myptr$1$ = -4						; size = 4
__Count$ = 8						; size = 4
$T1 = 8							; size = 4
?_Growmap@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXI@Z PROC ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Growmap, COMDAT
; _this$ = ecx

; 1603 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1604 :         static_assert(_Minimum_map_size > 1, "The _Xlen() test should always be performed.");
; 1605 : 
; 1606 :         _Alpty _Almap(_Getal());
; 1607 :         size_type _Newsize = _Mapsize() > 0 ? _Mapsize() : 1;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	be 01 00 00 00	 mov	 esi, 1
  00012	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00015	85 c9		 test	 ecx, ecx
  00017	0f 45 f1	 cmovne	 esi, ecx
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Growmap:

; 1608 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _Minimum_map_size) {

  00020	8b c6		 mov	 eax, esi
  00022	2b c1		 sub	 eax, ecx
  00024	3b c2		 cmp	 eax, edx
  00026	72 05		 jb	 SHORT $LN6@Growmap
  00028	83 fe 08	 cmp	 esi, 8
  0002b	73 13		 jae	 SHORT $LN3@Growmap
$LN6@Growmap:

; 1609 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1610 :             if (max_size() / _Block_size - _Newsize < _Newsize) {

  0002d	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH
  00032	2b c6		 sub	 eax, esi
  00034	3b c6		 cmp	 eax, esi
  00036	0f 82 11 01 00
	00		 jb	 $LN55@Growmap

; 1612 :             }
; 1613 : 
; 1614 :             _Newsize *= 2;

  0003c	03 f6		 add	 esi, esi

; 1615 :         }

  0003e	eb e0		 jmp	 SHORT $LL2@Growmap
$LN3@Growmap:
  00040	53		 push	 ebx

; 1616 : 
; 1617 :         size_type _Allocsize = _Newsize;
; 1618 : 
; 1619 :         const auto _Myboff  = static_cast<size_type>(_Myoff() / _Block_size);

  00041	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00044	c1 eb 02	 shr	 ebx, 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00047	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0004d	0f 87 ff 00 00
	00		 ja	 $LN81@Growmap

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00053	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 227  :     if (_Bytes == 0) {

  0005a	85 c0		 test	 eax, eax
  0005c	74 17		 je	 SHORT $LN78@Growmap
$LN23@Growmap:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0005e	50		 push	 eax
  0005f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00064	72 07		 jb	 SHORT $LN24@Growmap

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00066	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006b	eb 05		 jmp	 SHORT $LN79@Growmap
$LN24@Growmap:

; 136  :         return ::operator new(_Bytes);

  0006d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN79@Growmap:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1622 :         _Mapptr _Myptr      = _Newmap + _Map_off;

  00072	83 c4 04	 add	 esp, 4
$LN78@Growmap:
  00075	89 45 08	 mov	 DWORD PTR $T1[ebp], eax
  00078	8d 14 9d 00 00
	00 00		 lea	 edx, DWORD PTR [ebx*4]
  0007f	03 c2		 add	 eax, edx
  00081	89 55 f8	 mov	 DWORD PTR tv465[ebp], edx
  00084	89 45 fc	 mov	 DWORD PTR __Myptr$1$[ebp], eax

; 1623 :         _STL_ASSERT(_Allocsize >= _Newsize, "_Allocsize >= _Newsize");
; 1624 :         while (_Newsize <= _Allocsize / 2) {

  00087	8b c6		 mov	 eax, esi
  00089	d1 e8		 shr	 eax, 1
  0008b	3b f0		 cmp	 esi, eax
  0008d	77 07		 ja	 SHORT $LN5@Growmap
  0008f	90		 npad	 1
$LL4@Growmap:

; 1625 :             _Newsize *= 2;

  00090	03 f6		 add	 esi, esi
  00092	3b f0		 cmp	 esi, eax
  00094	76 fa		 jbe	 SHORT $LL4@Growmap
$LN5@Growmap:

; 1626 :         }
; 1627 : 
; 1628 :         _Count = _Newsize - _Mapsize();

  00096	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00099	2b f0		 sub	 esi, eax

; 1629 : 
; 1630 :         const auto _Map_count = static_cast<_Map_difference_type>(_Count);
; 1631 : 
; 1632 :         _Myptr = _STD uninitialized_copy(_Map() + _Map_off, _Map() + _Map_distance(), _Myptr); // copy initial to end

  0009b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0009e	ff 75 fc	 push	 DWORD PTR __Myptr$1$[ebp]
  000a1	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000a4	50		 push	 eax
  000a5	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
  000ae	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1633 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000b4	50		 push	 eax
  000b5	3b de		 cmp	 ebx, esi
  000b7	77 23		 ja	 SHORT $LN8@Growmap

; 1634 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Map_off, _Myptr); // copy rest of old

  000b9	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
  000c0	03 c1		 add	 eax, ecx
  000c2	50		 push	 eax
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>

; 1635 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  000c9	8b ce		 mov	 ecx, esi
  000cb	2b cb		 sub	 ecx, ebx
  000cd	51		 push	 ecx
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAPAUSData@CFileLoaderThread@@I@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CFileLoaderThread::SData * * *,unsigned int>

; 1636 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new

  000d4	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  000d7	83 c4 14	 add	 esp, 20			; 00000014H

; 1637 :         } else { // increment not greater than offset of initial block

  000da	eb 24		 jmp	 SHORT $LN9@Growmap
$LN8@Growmap:

; 1638 :             _STD uninitialized_copy(_Map(), _Map() + _Map_count, _Myptr); // copy more old

  000dc	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000df	50		 push	 eax
  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>

; 1639 :             _Myptr = _STD uninitialized_copy(_Map() + _Map_count, _Map() + _Map_off, _Newmap); // copy rest of old

  000e6	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000e9	ff 75 08	 push	 DWORD PTR $T1[ebp]
  000ec	8b 45 f8	 mov	 eax, DWORD PTR tv465[ebp]
  000ef	03 c1		 add	 eax, ecx
  000f1	50		 push	 eax
  000f2	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAPAUSData@CFileLoaderThread@@PAPAPAU12@@std@@YAPAPAPAUSData@CFileLoaderThread@@QAPAPAU12@0PAPAPAU12@@Z ; std::uninitialized_copy<CFileLoaderThread::SData * * *,CFileLoaderThread::SData * * *>
  000fb	83 c4 18	 add	 esp, 24			; 00000018H

; 1640 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  000fe	8b de		 mov	 ebx, esi
$LN9@Growmap:

; 1641 :         }
; 1642 : 
; 1643 :         if (_Map() != nullptr) {

  00100	53		 push	 ebx
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAPAUSData@CFileLoaderThread@@I@std@@YAPAPAPAUSData@CFileLoaderThread@@PAPAPAU12@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CFileLoaderThread::SData * * *,unsigned int>
  00107	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0010a	83 c4 08	 add	 esp, 8
  0010d	85 c0		 test	 eax, eax
  0010f	74 2a		 je	 SHORT $LN38@Growmap
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00111	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00114	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00117	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011d	72 12		 jb	 SHORT $LN49@Growmap

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0011f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00122	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00125	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00127	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012d	77 28		 ja	 SHORT $LN46@Growmap

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0012f	8b c2		 mov	 eax, edx
$LN49@Growmap:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00131	51		 push	 ecx
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00138	83 c4 08	 add	 esp, 8
$LN38@Growmap:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1648 :         _Map() = _Newmap; // point at new

  0013b	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]

; 1649 :         _Mapsize() += _Count;

  0013e	01 77 08	 add	 DWORD PTR [edi+8], esi
  00141	5b		 pop	 ebx
  00142	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1650 :     }

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 04 00	 ret	 4
$LN55@Growmap:

; 1611 :                 _Xlen(); // result too long

  0014d	e8 00 00 00 00	 call	 ?_Xlen@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@CAXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Xlen
$LN81@Growmap:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00152	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN46@Growmap:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00157	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@Growmap:
  0015c	cc		 int	 3
?_Growmap@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXI@Z ENDP ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ?_Xlen@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@CAXXZ PROC ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Xlen, COMDAT

; 1596 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@CAXXZ ENDP ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ?push_back@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAEXABQAUSData@CFileLoaderThread@@@Z
_TEXT	SEGMENT
tv378 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAEXABQAUSData@CFileLoaderThread@@@Z PROC ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::push_back, COMDAT
; _this$ = ecx

; 1235 :     void push_back(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 1132 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00009	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000f	03 c1		 add	 eax, ecx
  00011	a8 03		 test	 al, 3
  00013	75 14		 jne	 SHORT $LN4@push_back
  00015	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00018	c1 e8 02	 shr	 eax, 2
  0001b	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  0001e	77 09		 ja	 SHORT $LN4@push_back

; 1133 :             _Growmap(1);

  00020	6a 01		 push	 1
  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ?_Growmap@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXI@Z ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Growmap
$LN4@push_back:

; 1134 :         }
; 1135 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  00029	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002c	8d 04 8d ff ff
	ff ff		 lea	 eax, DWORD PTR [ecx*4-1]
  00033	21 46 0c	 and	 DWORD PTR [esi+12], eax

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00036	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]

; 1136 :         const auto _Newoff = static_cast<size_type>(_Myoff() + _Mysize());

  00039	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0003c	03 7e 0c	 add	 edi, DWORD PTR [esi+12]

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0003f	8b df		 mov	 ebx, edi
  00041	c1 eb 02	 shr	 ebx, 2
  00044	23 c3		 and	 eax, ebx

; 1138 :         if (_Map()[_Block] == nullptr) {

  00046	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0004d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00050	89 4d fc	 mov	 DWORD PTR tv378[ebp], ecx
  00053	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00057	75 13		 jne	 SHORT $LN5@push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00059	6a 10		 push	 16			; 00000010H
  0005b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1139 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00060	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00063	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1139 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00066	8b 55 fc	 mov	 edx, DWORD PTR tv378[ebp]
  00069	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
$LN5@push_back:

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0006c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 577  :         const auto _Block_off = static_cast<difference_type>(_Off % _Block_size);

  0006f	83 e7 03	 and	 edi, 3

; 1142 :         _Alty_traits::construct(_Getal(), _Get_data()._Address_subscript(_Newoff), _STD forward<_Tys>(_Vals)...);

  00072	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00075	49		 dec	 ecx
  00076	23 cb		 and	 ecx, ebx

; 1142 :         _Alty_traits::construct(_Getal(), _Get_data()._Address_subscript(_Newoff), _STD forward<_Tys>(_Vals)...);

  00078	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0007b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	89 04 b9	 mov	 DWORD PTR [ecx+edi*4], eax

; 1143 : 
; 1144 :         ++_Mysize();

  00083	ff 46 10	 inc	 DWORD PTR [esi+16]
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx

; 1236 :         _Orphan_all();
; 1237 :         _Emplace_back_internal(_Val);
; 1238 :     }

  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?push_back@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAEXABQAUSData@CFileLoaderThread@@@Z ENDP ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ??1?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAE@XZ PROC ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::~deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >, COMDAT
; _this$ = ecx

; 761  :     ~deque() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 762  :         _Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00008	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0000a	6a 08		 push	 8
  0000c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00013	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00018	83 c4 08	 add	 esp, 8
  0001b	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 765  :     }

  0001c	c3		 ret	 0
??1?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAE@XZ ENDP ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::~deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Process@CFileLoaderThread@@IAEXXZ
_TEXT	SEGMENT
_pData$ = -12						; size = 4
_pvBuf$ = -8						; size = 4
$T1 = -4						; size = 4
?Process@CFileLoaderThread@@IAEXXZ PROC			; CFileLoaderThread::Process, COMDAT
; _this$ = ecx

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 153  : 	m_RequestMutex.Lock();

  0000a	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  0000d	e8 00 00 00 00	 call	 ?Lock@Mutex@@QAEXXZ	; Mutex::Lock
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 959  :         return _Mysize() == 0;

  00012	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 155  : 	if (m_pRequestDeque.empty())

  00016	75 0e		 jne	 SHORT $LN2@Process

; 156  : 	{
; 157  : 		m_RequestMutex.Unlock();

  00018	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  0001b	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock
  00020	5f		 pop	 edi

; 180  : }

  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
$LN2@Process:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1767 :         return _Get_data()._Subscript(_Myoff() + _Pos);

  00026	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00029	8b d1		 mov	 edx, ecx
  0002b	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0002e	48		 dec	 eax
  0002f	c1 ea 02	 shr	 edx, 2
  00032	23 d0		 and	 edx, eax

; 1767 :         return _Get_data()._Subscript(_Myoff() + _Pos);

  00034	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 161  : 	TData * pData = m_pRequestDeque.front();

  00037	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 565  :         const auto _Block_off = static_cast<difference_type>(_Off % _Block_size);

  0003a	83 e1 03	 and	 ecx, 3
  0003d	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 161  : 	TData * pData = m_pRequestDeque.front();

  0003e	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00041	8b 34 88	 mov	 esi, DWORD PTR [eax+ecx*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1490 :         if (--_Mysize() == 0) {

  00044	83 47 1c ff	 add	 DWORD PTR [edi+28], -1
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 161  : 	TData * pData = m_pRequestDeque.front();

  00048	89 75 f4	 mov	 DWORD PTR _pData$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1490 :         if (--_Mysize() == 0) {

  0004b	75 09		 jne	 SHORT $LN21@Process

; 1491 :             _Myoff() = 0;

  0004d	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 1492 :         } else {

  00054	eb 07		 jmp	 SHORT $LN22@Process
$LN21@Process:

; 1493 :             ++_Myoff();

  00056	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  00059	40		 inc	 eax
  0005a	89 47 18	 mov	 DWORD PTR [edi+24], eax
$LN22@Process:
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 164  : 	m_RequestMutex.Unlock();

  0005d	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00060	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00065	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00069	8b c6		 mov	 eax, esi

; 426  :         if (_Large_mode_engaged()) {

  0006b	76 02		 jbe	 SHORT $LN35@Process

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0006d	8b 06		 mov	 eax, DWORD PTR [esi]
$LN35@Process:
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 168  : 	if (CEterPackManager::Instance().Get(pData->File, pData->stFileName.c_str(), &pvBuf))

  0006f	8d 4d f8	 lea	 ecx, DWORD PTR _pvBuf$[ebp]
  00072	51		 push	 ecx
  00073	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEterPackManager@@@@0PAVCEterPackManager@@A ; CSingleton<CEterPackManager>::ms_singleton
  00079	50		 push	 eax
  0007a	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?Get@CEterPackManager@@QAE_NAAVCMappedFile@@PBDPAPBX@Z ; CEterPackManager::Get
  00083	84 c0		 test	 al, al
  00085	74 2c		 je	 SHORT $LN3@Process
  00087	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]

; 169  : 	{
; 170  : 		pData->dwSize	= pData->File.Size();

  0008a	e8 00 00 00 00	 call	 ?Size@CMappedFile@@QAEKXZ ; CMappedFile::Size

; 171  : 		pData->pvBuf	= new char [pData->dwSize];

  0008f	50		 push	 eax
  00090	89 86 60 01 00
	00		 mov	 DWORD PTR [esi+352], eax
  00096	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009b	89 86 5c 01 00
	00		 mov	 DWORD PTR [esi+348], eax

; 172  : 		memcpy(pData->pvBuf, pvBuf, pData->dwSize);

  000a1	ff b6 60 01 00
	00		 push	 DWORD PTR [esi+352]
  000a7	ff 75 f8	 push	 DWORD PTR _pvBuf$[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _memcpy
  000b0	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@Process:

; 173  : 	}
; 174  : 
; 175  : 	m_CompleteMutex.Lock();

  000b3	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
  000b6	e8 00 00 00 00	 call	 ?Lock@Mutex@@QAEXXZ	; Mutex::Lock

; 176  : 	m_pCompleteDeque.push_back(pData);

  000bb	8d 45 f4	 lea	 eax, DWORD PTR _pData$[ebp]
  000be	50		 push	 eax
  000bf	8d 4f 38	 lea	 ecx, DWORD PTR [edi+56]
  000c2	e8 00 00 00 00	 call	 ?push_back@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAEXABQAUSData@CFileLoaderThread@@@Z ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::push_back

; 177  : 	m_CompleteMutex.Unlock();

  000c7	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
  000ca	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock

; 178  : 
; 179  : 	Sleep(g_iLoadingDelayTime);

  000cf	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_iLoadingDelayTime@@3HA ; g_iLoadingDelayTime
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  000db	5e		 pop	 esi
  000dc	5f		 pop	 edi

; 180  : }

  000dd	5b		 pop	 ebx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
?Process@CFileLoaderThread@@IAEXXZ ENDP			; CFileLoaderThread::Process
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Destroy@CFileLoaderThread@@IAEXXZ
_TEXT	SEGMENT
?Destroy@CFileLoaderThread@@IAEXXZ PROC			; CFileLoaderThread::Destroy, COMDAT
; _this$ = ecx

; 44   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 45   : 	if (m_hSemaphore)

  00003	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00006	85 c0		 test	 eax, eax
  00008	74 0e		 je	 SHORT $LN2@Destroy

; 46   : 	{
; 47   : 		CloseHandle(m_hSemaphore);

  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 48   : 		m_hSemaphore = NULL;

  00011	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
$LN2@Destroy:

; 49   : 	}
; 50   : 
; 51   : 	stl_wipe(m_pRequestDeque);

  00018	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$stl_wipe@V?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@@YAXAAV?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@Z ; stl_wipe<std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> > >

; 52   : 	stl_wipe(m_pCompleteDeque);

  00021	8d 46 38	 lea	 eax, DWORD PTR [esi+56]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$stl_wipe@V?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@@YAXAAV?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@@Z ; stl_wipe<std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> > >
  0002a	83 c4 08	 add	 esp, 8
  0002d	5e		 pop	 esi

; 53   : }

  0002e	c3		 ret	 0
?Destroy@CFileLoaderThread@@IAEXXZ ENDP			; CFileLoaderThread::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Execute@CFileLoaderThread@@IAEIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Execute@CFileLoaderThread@@IAEIPAX@Z PROC		; CFileLoaderThread::Execute, COMDAT
; _this$ = ecx

; 86   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 87   : 	while (!m_bShutdowned)

  00003	80 7e 6c 00	 cmp	 BYTE PTR [esi+108], 0
  00007	75 3c		 jne	 SHORT $LN14@Execute
  00009	57		 push	 edi
  0000a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__WaitForSingleObject@8
$LL2@Execute:

; 88   : 	{
; 89   : 		DWORD dwWaitResult;
; 90   : 
; 91   : 		dwWaitResult = WaitForSingleObject(m_hSemaphore, INFINITE);

  00010	6a ff		 push	 -1
  00012	ff 76 64	 push	 DWORD PTR [esi+100]
  00015	ff d7		 call	 edi

; 92   : 
; 93   : 		if (m_bShutdowned)

  00017	80 7e 6c 00	 cmp	 BYTE PTR [esi+108], 0
  0001b	75 27		 jne	 SHORT $LN19@Execute

; 94   : 			break;
; 95   : 
; 96   : 		switch (dwWaitResult)

  0001d	85 c0		 test	 eax, eax
  0001f	74 16		 je	 SHORT $LN7@Execute
  00021	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  00026	75 16		 jne	 SHORT $LN4@Execute

; 101  : 				}
; 102  : 				break;
; 103  : 
; 104  : 			case WAIT_TIMEOUT:
; 105  : 				TraceError("CFileLoaderThread::Execute: Timeout occured while time-out interval is INIFITE");

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@NDKNAKHH@CFileLoaderThread?3?3Execute?3?5Tim@
  0002d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00032	83 c4 04	 add	 esp, 4
  00035	eb 07		 jmp	 SHORT $LN4@Execute
$LN7@Execute:

; 97   : 		{
; 98   : 			case WAIT_OBJECT_0:
; 99   : 				{
; 100  : 					Process();

  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?Process@CFileLoaderThread@@IAEXXZ ; CFileLoaderThread::Process
$LN4@Execute:

; 87   : 	while (!m_bShutdowned)

  0003e	80 7e 6c 00	 cmp	 BYTE PTR [esi+108], 0
  00042	74 cc		 je	 SHORT $LL2@Execute
$LN19@Execute:
  00044	5f		 pop	 edi
$LN14@Execute:

; 106  : 				break;
; 107  : 		}
; 108  : 	}
; 109  : 
; 110  : 	Destroy();

  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 ?Destroy@CFileLoaderThread@@IAEXXZ ; CFileLoaderThread::Destroy

; 111  : 	return 1;

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	5e		 pop	 esi

; 112  : }

  00052	c2 04 00	 ret	 4
?Execute@CFileLoaderThread@@IAEIPAX@Z ENDP		; CFileLoaderThread::Execute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Setup@CFileLoaderThread@@IAEIXZ
_TEXT	SEGMENT
?Setup@CFileLoaderThread@@IAEIXZ PROC			; CFileLoaderThread::Setup, COMDAT
; _this$ = ecx

; 56   : {

  00000	56		 push	 esi

; 57   : 	m_hSemaphore = CreateSemaphore(NULL,		// no security attributes

  00001	6a 00		 push	 0
  00003	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	8b f1		 mov	 esi, ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSemaphoreA@16

; 58   : 								   0,			// initial count
; 59   : 								   65535,		// maximum count
; 60   : 								   NULL);		// unnamed semaphore
; 61   : 	if (!m_hSemaphore)

  00014	33 c9		 xor	 ecx, ecx
  00016	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00019	85 c0		 test	 eax, eax

; 62   : 		return 0;

  0001b	5e		 pop	 esi
  0001c	0f 95 c1	 setne	 cl
  0001f	8b c1		 mov	 eax, ecx

; 63   : 
; 64   : 	return 1;
; 65   : }

  00021	c3		 ret	 0
?Setup@CFileLoaderThread@@IAEIXZ ENDP			; CFileLoaderThread::Setup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Run@CFileLoaderThread@@IAEIPAX@Z
_TEXT	SEGMENT
_arg$ = 8						; size = 4
?Run@CFileLoaderThread@@IAEIPAX@Z PROC			; CFileLoaderThread::Run, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 29   : 	if (!Setup())

  00006	e8 00 00 00 00	 call	 ?Setup@CFileLoaderThread@@IAEIXZ ; CFileLoaderThread::Setup
  0000b	85 c0		 test	 eax, eax
  0000d	75 05		 jne	 SHORT $LN2@Run
  0000f	5e		 pop	 esi

; 33   : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
$LN2@Run:

; 30   : 		return 0;
; 31   : 
; 32   : 	return (Execute(arg));

  00014	ff 75 08	 push	 DWORD PTR _arg$[ebp]
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?Execute@CFileLoaderThread@@IAEIPAX@Z ; CFileLoaderThread::Execute
  0001e	5e		 pop	 esi

; 33   : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?Run@CFileLoaderThread@@IAEIPAX@Z ENDP			; CFileLoaderThread::Run
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?EntryPoint@CFileLoaderThread@@KGIPAX@Z
_TEXT	SEGMENT
_pThis$ = 8						; size = 4
?EntryPoint@CFileLoaderThread@@KGIPAX@Z PROC		; CFileLoaderThread::EntryPoint, COMDAT

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   : 	CFileLoaderThread * pThread = (CFileLoaderThread *) pThis;
; 39   : 	return pThread->Run(pThread->Arg());

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pThis$[ebp]
  00006	ff 71 04	 push	 DWORD PTR [ecx+4]
  00009	e8 00 00 00 00	 call	 ?Run@CFileLoaderThread@@IAEIPAX@Z ; CFileLoaderThread::Run

; 40   : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?EntryPoint@CFileLoaderThread@@KGIPAX@Z ENDP		; CFileLoaderThread::EntryPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Shutdown@CFileLoaderThread@@QAEXXZ
_TEXT	SEGMENT
?Shutdown@CFileLoaderThread@@QAEXXZ PROC		; CFileLoaderThread::Shutdown, COMDAT
; _this$ = ecx

; 68   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 69   : 	if (!m_hSemaphore)

  00003	83 7e 64 00	 cmp	 DWORD PTR [esi+100], 0
  00007	74 26		 je	 SHORT $LN1@Shutdown

; 70   : 		return;
; 71   : 
; 72   : 	BOOL bRet;
; 73   : 
; 74   : 	m_bShutdowned = true;

  00009	57		 push	 edi
  0000a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__ReleaseSemaphore@12
  00010	c6 46 6c 01	 mov	 BYTE PTR [esi+108], 1
$LL4@Shutdown:

; 75   : 
; 76   : 	do
; 77   : 	{
; 78   : 		bRet = ReleaseSemaphore(m_hSemaphore, 1, NULL);

  00014	6a 00		 push	 0
  00016	6a 01		 push	 1
  00018	ff 76 64	 push	 DWORD PTR [esi+100]
  0001b	ff d7		 call	 edi

; 79   : 	}
; 80   : 	while (!bRet);

  0001d	85 c0		 test	 eax, eax
  0001f	74 f3		 je	 SHORT $LL4@Shutdown
  00021	5f		 pop	 edi

; 81   : 
; 82   : 	WaitForSingleObject(m_hThread, 10000);

  00022	68 10 27 00 00	 push	 10000			; 00002710H
  00027	ff 36		 push	 DWORD PTR [esi]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
$LN1@Shutdown:

; 83   : }

  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
?Shutdown@CFileLoaderThread@@QAEXXZ ENDP		; CFileLoaderThread::Shutdown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Fetch@CFileLoaderThread@@QAE_NPAPAUSData@1@@Z
_TEXT	SEGMENT
_ppData$ = 8						; size = 4
tv330 = 8						; size = 4
?Fetch@CFileLoaderThread@@QAE_NPAPAUSData@1@@Z PROC	; CFileLoaderThread::Fetch, COMDAT
; _this$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 136  : 	m_CompleteMutex.Lock();

  00007	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  0000a	e8 00 00 00 00	 call	 ?Lock@Mutex@@QAEXXZ	; Mutex::Lock
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 959  :         return _Mysize() == 0;

  0000f	83 7e 48 00	 cmp	 DWORD PTR [esi+72], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 138  : 	if (m_pCompleteDeque.empty())

  00013	75 10		 jne	 SHORT $LN2@Fetch

; 139  : 	{
; 140  : 		m_CompleteMutex.Unlock();

  00015	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00018	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock
  0001d	5f		 pop	 edi

; 141  : 		return false;

  0001e	32 c0		 xor	 al, al

; 149  : }

  00020	5e		 pop	 esi
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN2@Fetch:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1767 :         return _Get_data()._Subscript(_Myoff() + _Pos);

  00025	8b 56 44	 mov	 edx, DWORD PTR [esi+68]

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00028	8b ca		 mov	 ecx, edx
  0002a	8b 46 40	 mov	 eax, DWORD PTR [esi+64]

; 565  :         const auto _Block_off = static_cast<difference_type>(_Off % _Block_size);

  0002d	83 e2 03	 and	 edx, 3

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00030	48		 dec	 eax
  00031	c1 e9 02	 shr	 ecx, 2
  00034	23 c8		 and	 ecx, eax
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 144  : 	*ppData = m_pCompleteDeque.front();

  00036	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00039	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0003c	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0003f	8b 45 08	 mov	 eax, DWORD PTR _ppData$[ebp]
  00042	89 08		 mov	 DWORD PTR [eax], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1490 :         if (--_Mysize() == 0) {

  00044	83 46 48 ff	 add	 DWORD PTR [esi+72], -1
  00048	75 17		 jne	 SHORT $LN20@Fetch
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 147  : 	m_CompleteMutex.Unlock();

  0004a	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1491 :             _Myoff() = 0;

  0004d	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 147  : 	m_CompleteMutex.Unlock();

  00054	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock
  00059	5f		 pop	 edi

; 148  : 	return true;

  0005a	b0 01		 mov	 al, 1

; 149  : }

  0005c	5e		 pop	 esi
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN20@Fetch:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1493 :             ++_Myoff();

  00061	ff 46 44	 inc	 DWORD PTR [esi+68]
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 147  : 	m_CompleteMutex.Unlock();

  00064	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00067	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock
  0006c	5f		 pop	 edi

; 148  : 	return true;

  0006d	b0 01		 mov	 al, 1

; 149  : }

  0006f	5e		 pop	 esi
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?Fetch@CFileLoaderThread@@QAE_NPAPAUSData@1@@Z ENDP	; CFileLoaderThread::Fetch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_pData$ = -32						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
_this$1$ = -24						; size = 4
$T4 = -20						; size = 4
tv706 = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_rstFileName$ = 8					; size = 4
__Result$1$ = 8						; size = 4
?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CFileLoaderThread::Request, COMDAT
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d e8	 mov	 DWORD PTR _this$1$[ebp], edi

; 116  : 	TData * pData = new TData;

  0002c	68 64 01 00 00	 push	 356			; 00000164H
  00031	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00036	8b f0		 mov	 esi, eax
  00038	83 c4 04	 add	 esp, 4
  0003b	89 75 e0	 mov	 DWORD PTR $T2[ebp], esi
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	85 f6		 test	 esi, esi
  00047	74 33		 je	 SHORT $LN4@Request
  00049	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0004c	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0004f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00056	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 836  :         _My_data._Mysize = 0;

  0005d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00064	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0006b	c6 06 00	 mov	 BYTE PTR [esi], 0
  0006e	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00071	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00075	e8 00 00 00 00	 call	 ??0CMappedFile@@QAE@XZ	; CMappedFile::CMappedFile
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 116  : 	TData * pData = new TData;

  0007a	eb 02		 jmp	 SHORT $LN5@Request
$LN4@Request:
  0007c	33 f6		 xor	 esi, esi
$LN5@Request:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  0007e	8b 45 08	 mov	 eax, DWORD PTR _c_rstFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 118  : 	pData->dwSize = 0;

  00081	c7 86 60 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+352], 0
  0008b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00092	89 75 e0	 mov	 DWORD PTR _pData$[ebp], esi

; 119  : 	pData->pvBuf = NULL;

  00095	c7 86 5c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+348], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  0009f	3b f0		 cmp	 esi, eax
  000a1	0f 84 1a 01 00
	00		 je	 $LN57@Request

; 434  :         return _Myres > _Small_string_capacity;

  000a7	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000ab	8b 78 10	 mov	 edi, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  000ae	76 05		 jbe	 SHORT $LN35@Request

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000b0	8b 00		 mov	 eax, DWORD PTR [eax]
  000b2	89 45 08	 mov	 DWORD PTR _c_rstFileName$[ebp], eax
$LN35@Request:

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  000b5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  000b8	89 55 e4	 mov	 DWORD PTR $T3[ebp], edx
  000bb	3b fa		 cmp	 edi, edx
  000bd	77 29		 ja	 SHORT $LN42@Request

; 416  :         value_type* _Result = _Bx._Buf;

  000bf	89 75 08	 mov	 DWORD PTR __Result$1$[ebp], esi
  000c2	8b ce		 mov	 ecx, esi

; 434  :         return _Myres > _Small_string_capacity;

  000c4	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  000c7	76 05		 jbe	 SHORT $LN45@Request

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  000c9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000cb	89 4d 08	 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN45@Request:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ce	57		 push	 edi
  000cf	50		 push	 eax
  000d0	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  000d1	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000d4	e8 00 00 00 00	 call	 _memmove
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  000d9	8b 45 08	 mov	 eax, DWORD PTR __Result$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  000df	c6 04 07 00	 mov	 BYTE PTR [edi+eax], 0

; 1600 :             _ASAN_STRING_CREATE(*this);
; 1601 :             return *this;

  000e3	e9 d6 00 00 00	 jmp	 $LN117@Request
$LN42@Request:

; 2962 :         if (_New_size > max_size()) {

  000e8	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  000ee	0f 87 28 01 00
	00		 ja	 $LN121@Request

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  000f4	8b cf		 mov	 ecx, edi
  000f6	83 c9 0f	 or	 ecx, 15			; 0000000fH
  000f9	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000ff	76 15		 jbe	 SHORT $LN63@Request

; 2944 :             return _Max;

  00101	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00106	89 45 f0	 mov	 DWORD PTR $T5[ebp], eax
  00109	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00114	eb 51		 jmp	 SHORT $LN119@Request
$LN63@Request:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00116	8b c2		 mov	 eax, edx
  00118	d1 e8		 shr	 eax, 1
  0011a	89 45 ec	 mov	 DWORD PTR tv706[ebp], eax
  0011d	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00122	2b 45 ec	 sub	 eax, DWORD PTR tv706[ebp]
  00125	3b d0		 cmp	 edx, eax
  00127	76 15		 jbe	 SHORT $LN64@Request

; 2948 :             return _Max;

  00129	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0012e	89 45 f0	 mov	 DWORD PTR $T5[ebp], eax
  00131	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0013c	eb 29		 jmp	 SHORT $LN119@Request
$LN64@Request:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0013e	8b 45 ec	 mov	 eax, DWORD PTR tv706[ebp]
  00141	03 c2		 add	 eax, edx
  00143	3b c8		 cmp	 ecx, eax
  00145	0f 42 c8	 cmovb	 ecx, eax
  00148	89 4d f0	 mov	 DWORD PTR $T5[ebp], ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  0014b	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0014e	85 c0		 test	 eax, eax
  00150	74 1b		 je	 SHORT $LN118@Request
$LN77@Request:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00152	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00157	72 08		 jb	 SHORT $LN78@Request

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0015f	eb 06		 jmp	 SHORT $LN119@Request
$LN78@Request:

; 136  :         return ::operator new(_Bytes);

  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN119@Request:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  00167	8b 4d f0	 mov	 ecx, DWORD PTR $T5[ebp]
  0016a	83 c4 04	 add	 esp, 4
$LN118@Request:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016d	57		 push	 edi
  0016e	ff 75 08	 push	 DWORD PTR _c_rstFileName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  00171	89 45 ec	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00174	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  00175	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  00178	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0017b	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00180	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00183	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  00186	8b 4d e4	 mov	 ecx, DWORD PTR $T3[ebp]

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00189	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  0018d	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  00190	76 2a		 jbe	 SHORT $LN56@Request
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00192	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00194	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00195	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0019b	72 12		 jb	 SHORT $LN106@Request

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0019d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001a0	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001a3	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001a5	83 c0 fc	 add	 eax, -4			; fffffffcH
  001a8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001ab	77 6a		 ja	 SHORT $LN103@Request

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001ad	8b c2		 mov	 eax, edx
$LN106@Request:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001af	51		 push	 ecx
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2978 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  001b6	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  001b9	83 c4 08	 add	 esp, 8
$LN56@Request:
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 122  : 	m_RequestMutex.Lock();

  001bc	89 06		 mov	 DWORD PTR [esi], eax
$LN117@Request:
  001be	8b 7d e8	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN57@Request:
  001c1	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  001c4	e8 00 00 00 00	 call	 ?Lock@Mutex@@QAEXXZ	; Mutex::Lock

; 123  : 	m_pRequestDeque.push_back(pData);

  001c9	8d 45 e0	 lea	 eax, DWORD PTR _pData$[ebp]
  001cc	50		 push	 eax
  001cd	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  001d0	e8 00 00 00 00	 call	 ?push_back@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAEXABQAUSData@CFileLoaderThread@@@Z ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::push_back

; 124  : 	m_RequestMutex.Unlock();

  001d5	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  001d8	e8 00 00 00 00	 call	 ?Unlock@Mutex@@QAEXXZ	; Mutex::Unlock

; 125  : 
; 126  : 	++m_iRestSemCount;

  001dd	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  001e0	40		 inc	 eax

; 127  : 
; 128  : 	if (!ReleaseSemaphore(m_hSemaphore, m_iRestSemCount, NULL))

  001e1	6a 00		 push	 0
  001e3	50		 push	 eax
  001e4	ff 77 64	 push	 DWORD PTR [edi+100]
  001e7	89 47 68	 mov	 DWORD PTR [edi+104], eax
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseSemaphore@12
  001f0	85 c0		 test	 eax, eax
  001f2	75 0d		 jne	 SHORT $LN2@Request

; 129  : 		TraceError("CFileLoaderThread::Request: ReleaseSemaphore error");

  001f4	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@FFGDMIEH@CFileLoaderThread?3?3Request?3?5Rel@
  001f9	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  001fe	83 c4 04	 add	 esp, 4
$LN2@Request:

; 130  : 
; 131  : 	--m_iRestSemCount;

  00201	ff 4f 68	 dec	 DWORD PTR [edi+104]

; 132  : }

  00204	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00207	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0020e	59		 pop	 ecx
  0020f	5f		 pop	 edi
  00210	5e		 pop	 esi
  00211	8b e5		 mov	 esp, ebp
  00213	5d		 pop	 ebp
  00214	c2 04 00	 ret	 4
$LN103@Request:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00217	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN121@Request:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  0021c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN116@Request:
  00221	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	68 64 01 00 00	 push	 356			; 00000164H
  00005	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00012	8b 4d e0	 mov	 ecx, DWORD PTR $T2[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Request@CFileLoaderThread@@QAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CFileLoaderThread::Request
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ?Create@CFileLoaderThread@@QAEHPAX@Z
_TEXT	SEGMENT
_arg$ = 8						; size = 4
?Create@CFileLoaderThread@@QAEHPAX@Z PROC		; CFileLoaderThread::Create, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : 	Arg(arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR _arg$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 18   : 	m_hThread = (HANDLE) _beginthreadex(NULL, 0, EntryPoint, this, 0, &m_uThreadID);

  0000c	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000f	50		 push	 eax
  00010	6a 00		 push	 0
  00012	56		 push	 esi
  00013	68 00 00 00 00	 push	 OFFSET ?EntryPoint@CFileLoaderThread@@KGIPAX@Z ; CFileLoaderThread::EntryPoint
  00018	6a 00		 push	 0
  0001a	6a 00		 push	 0
  0001c	e8 00 00 00 00	 call	 __beginthreadex
  00021	83 c4 18	 add	 esp, 24			; 00000018H
  00024	89 06		 mov	 DWORD PTR [esi], eax
  00026	5e		 pop	 esi

; 19   : 
; 20   : 	if (!m_hThread)

  00027	85 c0		 test	 eax, eax
  00029	75 04		 jne	 SHORT $LN2@Create

; 25   : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN2@Create:

; 21   : 		return false;
; 22   : 
; 23   : 	SetThreadPriority(m_hThread, THREAD_PRIORITY_NORMAL);

  0002f	6a 00		 push	 0
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadPriority@8

; 24   : 	return true;

  00038	b8 01 00 00 00	 mov	 eax, 1

; 25   : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?Create@CFileLoaderThread@@QAEHPAX@Z ENDP		; CFileLoaderThread::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ??1CFileLoaderThread@@QAE@XZ
_TEXT	SEGMENT
??1CFileLoaderThread@@QAE@XZ PROC			; CFileLoaderThread::~CFileLoaderThread, COMDAT
; _this$ = ecx

; 11   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 12   : 	Destroy();

  00004	e8 00 00 00 00	 call	 ?Destroy@CFileLoaderThread@@IAEXXZ ; CFileLoaderThread::Destroy

; 13   : }

  00009	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
  0000c	e8 00 00 00 00	 call	 ??1Mutex@@QAE@XZ	; Mutex::~Mutex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 762  :         _Tidy();

  00011	8d 4f 38	 lea	 ecx, DWORD PTR [edi+56]
  00014	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00019	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001c	6a 08		 push	 8
  0001e	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001f	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 13   : }

  0002e	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  00031	e8 00 00 00 00	 call	 ??1Mutex@@QAE@XZ	; Mutex::~Mutex
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 762  :         _Tidy();

  00036	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00039	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@AAEXXZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0003e	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00041	6a 08		 push	 8
  00043	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00044	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00050	83 c4 08	 add	 esp, 8
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 13   : }

  00055	c3		 ret	 0
??1CFileLoaderThread@@QAE@XZ ENDP			; CFileLoaderThread::~CFileLoaderThread
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp
;	COMDAT ??0CFileLoaderThread@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFileLoaderThread@@QAE@XZ PROC			; CFileLoaderThread::CFileLoaderThread, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CFileLoaderThread@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 6    : CFileLoaderThread::CFileLoaderThread() : m_bShutdowned(false), m_pArg(NULL), m_hThread(NULL), m_uThreadID(0)

  0002a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 7    : {

  00030	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  00033	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0003a	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00041	6a 08		 push	 8

; 1231 :     _Container_proxy* _Myproxy = nullptr;

  00043	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 556  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00049	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00050	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00057	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0005e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00065	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006a	83 c4 04	 add	 esp, 4

; 1201 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  0006d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1218 :         _Myproxy            = _New_proxy;

  00074	89 06		 mov	 DWORD PTR [esi], eax

; 1219 :         _New_proxy->_Mycont = this;

  00076	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 7    : {

  00078	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00082	e8 00 00 00 00	 call	 ??0Mutex@@QAE@XZ	; Mutex::Mutex
  00087	8d 77 38	 lea	 esi, DWORD PTR [edi+56]
  0008a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0008e	6a 08		 push	 8

; 1231 :     _Container_proxy* _Myproxy = nullptr;

  00090	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 556  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00096	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0009d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000a4	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000ab	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 1201 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  000ba	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1218 :         _Myproxy            = _New_proxy;

  000c1	89 06		 mov	 DWORD PTR [esi], eax

; 1219 :         _New_proxy->_Mycont = this;

  000c3	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\FileLoaderThread.cpp

; 7    : {

  000c5	8d 4f 4c	 lea	 ecx, DWORD PTR [edi+76]
  000c8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000cc	e8 00 00 00 00	 call	 ??0Mutex@@QAE@XZ	; Mutex::Mutex

; 6    : CFileLoaderThread::CFileLoaderThread() : m_bShutdowned(false), m_pArg(NULL), m_hThread(NULL), m_uThreadID(0)

  000d1	c6 47 6c 00	 mov	 BYTE PTR [edi+108], 0

; 8    : }

  000d5	8b c7		 mov	 eax, edi
  000d7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000da	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e1	59		 pop	 ecx
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFileLoaderThread@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAE@XZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::~deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >
__unwindfunclet$??0CFileLoaderThread@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1Mutex@@QAE@XZ	; Mutex::~Mutex
__unwindfunclet$??0CFileLoaderThread@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 38	 add	 ecx, 56			; 00000038H
  0001c	e9 00 00 00 00	 jmp	 ??1?$deque@PAUSData@CFileLoaderThread@@V?$allocator@PAUSData@CFileLoaderThread@@@std@@@std@@QAE@XZ ; std::deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >::~deque<CFileLoaderThread::SData *,std::allocator<CFileLoaderThread::SData *> >
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$??0CFileLoaderThread@@QAE@XZ:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CFileLoaderThread@@QAE@XZ
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CFileLoaderThread@@QAE@XZ ENDP			; CFileLoaderThread::CFileLoaderThread
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
