; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterLib\Distribute\StateManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_kLightData@@3USLightData@@A			; m_kLightData
_BSS	SEGMENT
?m_kLightData@@3USLightData@@A DB 0340H DUP (?)		; m_kLightData
_BSS	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXVECTOR4@@QAE@XZ				; D3DXVECTOR4::D3DXVECTOR4
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??_FCStreamData@@QAEXXZ				; CStreamData::`default constructor closure'
PUBLIC	?ResetState@CStateManagerState@@QAEXXZ		; CStateManagerState::ResetState
PUBLIC	??1?$CSingleton@VCStateManager@@@@UAE@XZ	; CSingleton<CStateManager>::~CSingleton<CStateManager>
PUBLIC	??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z	; CSingleton<CStateManager>::`scalar deleting destructor'
PUBLIC	??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z	; CStateManager::CStateManager
PUBLIC	??1CStateManager@@UAE@XZ			; CStateManager::~CStateManager
PUBLIC	?SetDefaultState@CStateManager@@QAEXXZ		; CStateManager::SetDefaultState
PUBLIC	?SetAnisotropicFiltering@CStateManager@@QAEXXZ	; CStateManager::SetAnisotropicFiltering
PUBLIC	?Restore@CStateManager@@QAEXXZ			; CStateManager::Restore
PUBLIC	?BeginScene@CStateManager@@QAE_NXZ		; CStateManager::BeginScene
PUBLIC	?EndScene@CStateManager@@QAEXXZ			; CStateManager::EndScene
PUBLIC	?SaveMaterial@CStateManager@@QAEXXZ		; CStateManager::SaveMaterial
PUBLIC	?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SaveMaterial
PUBLIC	?RestoreMaterial@CStateManager@@QAEXXZ		; CStateManager::RestoreMaterial
PUBLIC	?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial
PUBLIC	?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL8@@@Z ; CStateManager::GetMaterial
PUBLIC	?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT8@@@Z	; CStateManager::SetLight
PUBLIC	?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT8@@@Z	; CStateManager::GetLight
PUBLIC	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState
PUBLIC	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
PUBLIC	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
PUBLIC	?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z ; CStateManager::GetRenderState
PUBLIC	?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SaveTexture
PUBLIC	?RestoreTexture@CStateManager@@QAEXK@Z		; CStateManager::RestoreTexture
PUBLIC	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
PUBLIC	?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture8@@@Z ; CStateManager::GetTexture
PUBLIC	?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState
PUBLIC	?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState
PUBLIC	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
PUBLIC	?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z ; CStateManager::GetTextureStageState
PUBLIC	?SetBestFiltering@CStateManager@@QAEXK@Z	; CStateManager::SetBestFiltering
PUBLIC	?SaveVertexShader@CStateManager@@QAEXK@Z	; CStateManager::SaveVertexShader
PUBLIC	?RestoreVertexShader@CStateManager@@QAEXXZ	; CStateManager::RestoreVertexShader
PUBLIC	?SetVertexShader@CStateManager@@QAEXK@Z		; CStateManager::SetVertexShader
PUBLIC	?GetVertexShader@CStateManager@@QAEXPAK@Z	; CStateManager::GetVertexShader
PUBLIC	?SavePixelShader@CStateManager@@QAEXK@Z		; CStateManager::SavePixelShader
PUBLIC	?RestorePixelShader@CStateManager@@QAEXXZ	; CStateManager::RestorePixelShader
PUBLIC	?SetPixelShader@CStateManager@@QAEXK@Z		; CStateManager::SetPixelShader
PUBLIC	?GetPixelShader@CStateManager@@QAEXPAK@Z	; CStateManager::GetPixelShader
PUBLIC	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform
PUBLIC	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform
PUBLIC	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform
PUBLIC	?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform
PUBLIC	?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SaveVertexShaderConstant
PUBLIC	?RestoreVertexShaderConstant@CStateManager@@QAEXKK@Z ; CStateManager::RestoreVertexShaderConstant
PUBLIC	?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant
PUBLIC	?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SavePixelShaderConstant
PUBLIC	?RestorePixelShaderConstant@CStateManager@@QAEXKK@Z ; CStateManager::RestorePixelShaderConstant
PUBLIC	?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant
PUBLIC	?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SaveStreamSource
PUBLIC	?RestoreStreamSource@CStateManager@@QAEXI@Z	; CStateManager::RestoreStreamSource
PUBLIC	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource
PUBLIC	?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SaveIndices
PUBLIC	?RestoreIndices@CStateManager@@QAEXXZ		; CStateManager::RestoreIndices
PUBLIC	?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
PUBLIC	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
PUBLIC	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
PUBLIC	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
PUBLIC	?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z ; CStateManager::DrawIndexedPrimitiveUP
PUBLIC	?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState
PUBLIC	?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z ; CStateManager::SetDevice
PUBLIC	??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
PUBLIC	??_GCStateManager@@UAEPAXI@Z			; CStateManager::`scalar deleting destructor'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCStateManager@@@@6B@		; CSingleton<CStateManager>::`vftable'
PUBLIC	??_7CStateManager@@6B@				; CStateManager::`vftable'
PUBLIC	??_R4CStateManager@@6B@				; CStateManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCStateManager@@@8			; CStateManager `RTTI Type Descriptor'
PUBLIC	??_R3CStateManager@@8				; CStateManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CStateManager@@8				; CStateManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CStateManager@@8			; CStateManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8	; CSingleton<CStateManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCStateManager@@@@@8	; CSingleton<CStateManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCStateManager@@@@8		; CSingleton<CStateManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCStateManager@@@@8		; CSingleton<CStateManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCStateManager@@@@6B@		; CSingleton<CStateManager>::`RTTI Complete Object Locator'
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	??_E?$CSingleton@VCStateManager@@@@UAEPAXI@Z:PROC ; CSingleton<CStateManager>::`vector deleting destructor'
EXTRN	??_ECStateManager@@UAEPAXI@Z:PROC		; CStateManager::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCStateManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCStateManager@@@@6B@ DD 00H		; CSingleton<CStateManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCStateManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCStateManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCStateManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8 ; CSingleton<CStateManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCStateManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCStateManager@@@@8 DD 00H		; CSingleton<CStateManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCStateManager@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCStateManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CStateManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCStateManager@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCStateManager@@@@@8 ; CSingleton<CStateManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CStateManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CStateManager@@8 DD FLAT:??_R0?AVCStateManager@@@8 ; CStateManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CStateManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CStateManager@@8
rdata$r	SEGMENT
??_R2CStateManager@@8 DD FLAT:??_R1A@?0A@EA@CStateManager@@8 ; CStateManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CStateManager@@8
rdata$r	SEGMENT
??_R3CStateManager@@8 DD 00H				; CStateManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CStateManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCStateManager@@@8
data$rs	SEGMENT
??_R0?AVCStateManager@@@8 DD FLAT:??_7type_info@@6B@	; CStateManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCStateManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CStateManager@@6B@
rdata$r	SEGMENT
??_R4CStateManager@@6B@ DD 00H				; CStateManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCStateManager@@@8
	DD	FLAT:??_R3CStateManager@@8
rdata$r	ENDS
;	COMDAT ??_7CStateManager@@6B@
CONST	SEGMENT
??_7CStateManager@@6B@ DD FLAT:??_R4CStateManager@@6B@	; CStateManager::`vftable'
	DD	FLAT:??_ECStateManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCStateManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCStateManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCStateManager@@@@6B@ ; CSingleton<CStateManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCStateManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CStateManager@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z$1
__ehfuncinfo$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCStateManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCStateManager@@UAEPAXI@Z PROC			; CStateManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CStateManager@@UAE@XZ ; CStateManager::~CStateManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 7c 33 01 00	 push	 78716			; 0001337cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCStateManager@@UAEPAXI@Z ENDP			; CStateManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ PROC ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN5@vector:
  0005d	5f		 pop	 edi

; 820  :     }

  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00065	cc		 int	 3
??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ENDP ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_lpDevice$ = 8						; size = 4
?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z PROC ; CStateManager::SetDevice, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 114  : 	StateManager_Assert(lpDevice);
; 115  : 	lpDevice->AddRef();

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpDevice$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	8b 07		 mov	 eax, DWORD PTR [edi]
  0000d	ff 50 04	 call	 DWORD PTR [eax+4]

; 116  : 
; 117  : 	if (m_lpD3DDev)

  00010	8b 8e 78 33 01
	00		 mov	 ecx, DWORD PTR [esi+78712]
  00016	85 c9		 test	 ecx, ecx
  00018	74 06		 je	 SHORT $LN2@SetDevice

; 118  : 	{
; 119  : 		m_lpD3DDev->Release();

  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	51		 push	 ecx
  0001d	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@SetDevice:

; 120  : 		m_lpD3DDev = NULL;
; 121  : 	}
; 122  : 
; 123  : 	m_lpD3DDev = lpDevice;
; 124  : 
; 125  : 	SetDefaultState();

  00020	8b ce		 mov	 ecx, esi
  00022	89 be 78 33 01
	00		 mov	 DWORD PTR [esi+78712], edi
  00028	e8 00 00 00 00	 call	 ?SetDefaultState@CStateManager@@QAEXXZ ; CStateManager::SetDefaultState
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi

; 126  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z ENDP ; CStateManager::SetDevice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z PROC ; CStateManager::GetRenderState, COMDAT
; _this$ = ecx

; 479  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 480  : 	return m_CurrentState.m_RenderStates[Type];

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	8b 84 81 78 66
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+26232]

; 481  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ENDP ; CStateManager::GetRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_MinVertexIndex$ = 12					; size = 4
_NumVertexIndices$ = 16					; size = 4
_PrimitiveCount$ = 20					; size = 4
_pIndexData$ = 24					; size = 4
_IndexDataFormat$ = 28					; size = 4
_pVertexStreamZeroData$ = 32				; size = 4
_VertexStreamZeroStride$ = 36				; size = 4
?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z PROC ; CStateManager::DrawIndexedPrimitiveUP, COMDAT
; _this$ = ecx

; 825  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 826  : 	m_CurrentState.m_IndexData = NULL;
; 827  : 	m_CurrentState.m_StreamData[0] = NULL;
; 828  : 	return (m_lpD3DDev->DrawIndexedPrimitiveUP(PrimitiveType, MinVertexIndex, NumVertexIndices, PrimitiveCount, pIndexData, IndexDataFormat, pVertexStreamZeroData, VertexStreamZeroStride));

  00003	ff 75 24	 push	 DWORD PTR _VertexStreamZeroStride$[ebp]
  00006	c7 81 e4 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52452], 0
  00010	ff 75 20	 push	 DWORD PTR _pVertexStreamZeroData$[ebp]
  00013	c7 81 e8 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52456], 0
  0001d	ff 75 1c	 push	 DWORD PTR _IndexDataFormat$[ebp]
  00020	c7 81 64 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52324], 0
  0002a	ff 75 18	 push	 DWORD PTR _pIndexData$[ebp]
  0002d	c7 81 68 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52328], 0
  00037	ff 75 14	 push	 DWORD PTR _PrimitiveCount$[ebp]
  0003a	8b 89 78 33 01
	00		 mov	 ecx, DWORD PTR [ecx+78712]
  00040	ff 75 10	 push	 DWORD PTR _NumVertexIndices$[ebp]
  00043	ff 75 0c	 push	 DWORD PTR _MinVertexIndex$[ebp]
  00046	8b 01		 mov	 eax, DWORD PTR [ecx]
  00048	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  0004b	51		 push	 ecx
  0004c	ff 90 24 01 00
	00		 call	 DWORD PTR [eax+292]

; 829  : }

  00052	5d		 pop	 ebp
  00053	c2 20 00	 ret	 32			; 00000020H
?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z ENDP ; CStateManager::DrawIndexedPrimitiveUP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_minIndex$ = 12						; size = 4
_NumVertices$ = 16					; size = 4
_startIndex$ = 20					; size = 4
_primCount$ = 24					; size = 4
?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z PROC ; CStateManager::DrawIndexedPrimitive, COMDAT
; _this$ = ecx

; 820  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 821  : 	return (m_lpD3DDev->DrawIndexedPrimitive(PrimitiveType, minIndex, NumVertices, startIndex, primCount));

  00003	ff 75 18	 push	 DWORD PTR _primCount$[ebp]
  00006	8b 89 78 33 01
	00		 mov	 ecx, DWORD PTR [ecx+78712]
  0000c	ff 75 14	 push	 DWORD PTR _startIndex$[ebp]
  0000f	ff 75 10	 push	 DWORD PTR _NumVertices$[ebp]
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	ff 75 0c	 push	 DWORD PTR _minIndex$[ebp]
  00017	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  0001a	51		 push	 ecx
  0001b	ff 90 1c 01 00
	00		 call	 DWORD PTR [eax+284]

; 822  : }

  00021	5d		 pop	 ebp
  00022	c2 14 00	 ret	 20			; 00000014H
?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ENDP ; CStateManager::DrawIndexedPrimitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_PrimitiveCount$ = 12					; size = 4
_pVertexStreamZeroData$ = 16				; size = 4
_VertexStreamZeroStride$ = 20				; size = 4
?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z PROC ; CStateManager::DrawPrimitiveUP, COMDAT
; _this$ = ecx

; 814  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 815  : 	m_CurrentState.m_StreamData[0] = NULL;
; 816  : 	return (m_lpD3DDev->DrawPrimitiveUP(PrimitiveType, PrimitiveCount, pVertexStreamZeroData, VertexStreamZeroStride));

  00003	ff 75 14	 push	 DWORD PTR _VertexStreamZeroStride$[ebp]
  00006	c7 81 64 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52324], 0
  00010	ff 75 10	 push	 DWORD PTR _pVertexStreamZeroData$[ebp]
  00013	c7 81 68 cc 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+52328], 0
  0001d	8b 89 78 33 01
	00		 mov	 ecx, DWORD PTR [ecx+78712]
  00023	ff 75 0c	 push	 DWORD PTR _PrimitiveCount$[ebp]
  00026	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	51		 push	 ecx
  0002c	ff 90 20 01 00
	00		 call	 DWORD PTR [eax+288]

; 817  : }

  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ENDP ; CStateManager::DrawPrimitiveUP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_StartVertex$ = 12					; size = 4
_PrimitiveCount$ = 16					; size = 4
?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z PROC ; CStateManager::DrawPrimitive, COMDAT
; _this$ = ecx

; 809  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 810  : 	return (m_lpD3DDev->DrawPrimitive(PrimitiveType, StartVertex, PrimitiveCount));

  00003	ff 75 10	 push	 DWORD PTR _PrimitiveCount$[ebp]
  00006	8b 89 78 33 01
	00		 mov	 ecx, DWORD PTR [ecx+78712]
  0000c	ff 75 0c	 push	 DWORD PTR _StartVertex$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	51		 push	 ecx
  00015	ff 90 18 01 00
	00		 call	 DWORD PTR [eax+280]

; 811  : }

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ENDP ; CStateManager::DrawPrimitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z
_TEXT	SEGMENT
_pIndexData$ = 8					; size = 4
_BaseVertexIndex$ = 12					; size = 4
?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z PROC ; CStateManager::SetIndices, COMDAT
; _this$ = ecx

; 798  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h

; 87   : 			: m_lpIndexData(pIndexData),

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pIndexData$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp

; 798  : {

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h

; 88   : 		m_BaseVertexIndex(BaseVertexIndex)

  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _BaseVertexIndex$[ebp]

; 94   : 			return ((m_lpIndexData == rhs.m_lpIndexData) && (m_BaseVertexIndex == rhs.m_BaseVertexIndex));

  0000e	39 9e e4 cc 00
	00		 cmp	 DWORD PTR [esi+52452], ebx
  00014	75 08		 jne	 SHORT $LN8@SetIndices
  00016	39 be e8 cc 00
	00		 cmp	 DWORD PTR [esi+52456], edi
  0001c	74 1d		 je	 SHORT $LN1@SetIndices
$LN8@SetIndices:
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp

; 804  : 	m_lpD3DDev->SetIndices(pIndexData, BaseVertexIndex);

  0001e	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00024	57		 push	 edi
  00025	53		 push	 ebx
  00026	50		 push	 eax
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	ff 91 54 01 00
	00		 call	 DWORD PTR [ecx+340]

; 805  : 	m_CurrentState.m_IndexData = kIndexData;

  0002f	89 9e e4 cc 00
	00		 mov	 DWORD PTR [esi+52452], ebx
  00035	89 be e8 cc 00
	00		 mov	 DWORD PTR [esi+52456], edi
$LN1@SetIndices:

; 806  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ENDP ; CStateManager::SetIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreIndices@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreIndices@CStateManager@@QAEXXZ PROC		; CStateManager::RestoreIndices, COMDAT
; _this$ = ecx

; 794  : 	SetIndices(m_CopyState.m_IndexData.m_lpIndexData, m_CopyState.m_IndexData.m_BaseVertexIndex);

  00000	ff b1 5c 33 01
	00		 push	 DWORD PTR [ecx+78684]
  00006	ff b1 58 33 01
	00		 push	 DWORD PTR [ecx+78680]
  0000c	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices

; 795  : }

  00011	c3		 ret	 0
?RestoreIndices@CStateManager@@QAEXXZ ENDP		; CStateManager::RestoreIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z
_TEXT	SEGMENT
_pIndexData$ = 8					; size = 4
_BaseVertexIndex$ = 12					; size = 4
?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z PROC ; CStateManager::SaveIndices, COMDAT
; _this$ = ecx

; 787  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 788  : 	m_CopyState.m_IndexData = m_CurrentState.m_IndexData;

  00003	8b 81 e4 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52452]
  00009	8b 91 e8 cc 00
	00		 mov	 edx, DWORD PTR [ecx+52456]
  0000f	89 81 58 33 01
	00		 mov	 DWORD PTR [ecx+78680], eax
  00015	89 91 5c 33 01
	00		 mov	 DWORD PTR [ecx+78684], edx

; 790  : }

  0001b	5d		 pop	 ebp

; 789  : 	SetIndices(pIndexData, BaseVertexIndex);

  0001c	e9 00 00 00 00	 jmp	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ENDP ; CStateManager::SaveIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z
_TEXT	SEGMENT
_StreamNumber$ = 8					; size = 4
_pStreamData$ = 12					; size = 4
_Stride$ = 16						; size = 4
?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z PROC ; CStateManager::SetStreamSource, COMDAT
; _this$ = ecx

; 777  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h

; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));

  00003	8b 55 08	 mov	 edx, DWORD PTR _StreamNumber$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp

; 777  : {

  00006	53		 push	 ebx
  00007	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00008	8b 75 10	 mov	 esi, DWORD PTR _Stride$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp

; 777  : {

  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _pStreamData$[ebp]

; 76   : 			return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));

  00011	39 bc d3 64 cc
	00 00		 cmp	 DWORD PTR [ebx+edx*8+52324], edi
  00018	75 09		 jne	 SHORT $LN8@SetStreamS
  0001a	39 b4 d3 68 cc
	00 00		 cmp	 DWORD PTR [ebx+edx*8+52328], esi
  00021	74 23		 je	 SHORT $LN1@SetStreamS
$LN8@SetStreamS:
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp

; 782  : 	m_lpD3DDev->SetStreamSource(StreamNumber, pStreamData, Stride);

  00023	8b 83 78 33 01
	00		 mov	 eax, DWORD PTR [ebx+78712]
  00029	56		 push	 esi
  0002a	57		 push	 edi
  0002b	52		 push	 edx
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	50		 push	 eax
  0002f	ff 91 4c 01 00
	00		 call	 DWORD PTR [ecx+332]

; 783  : 	m_CurrentState.m_StreamData[StreamNumber] = kStreamData;

  00035	8b 45 08	 mov	 eax, DWORD PTR _StreamNumber$[ebp]
  00038	89 bc c3 64 cc
	00 00		 mov	 DWORD PTR [ebx+eax*8+52324], edi
  0003f	89 b4 c3 68 cc
	00 00		 mov	 DWORD PTR [ebx+eax*8+52328], esi
$LN1@SetStreamS:

; 784  : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ENDP ; CStateManager::SetStreamSource
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreStreamSource@CStateManager@@QAEXI@Z
_TEXT	SEGMENT
_StreamNumber$ = 8					; size = 4
?RestoreStreamSource@CStateManager@@QAEXI@Z PROC	; CStateManager::RestoreStreamSource, COMDAT
; _this$ = ecx

; 770  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 771  : 	SetStreamSource(StreamNumber,

  00003	8b 45 08	 mov	 eax, DWORD PTR _StreamNumber$[ebp]
  00006	ff b4 c1 dc 32
	01 00		 push	 DWORD PTR [ecx+eax*8+78556]
  0000d	ff b4 c1 d8 32
	01 00		 push	 DWORD PTR [ecx+eax*8+78552]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 772  : 					m_CopyState.m_StreamData[StreamNumber].m_lpStreamData,
; 773  : 					m_CopyState.m_StreamData[StreamNumber].m_Stride);
; 774  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?RestoreStreamSource@CStateManager@@QAEXI@Z ENDP	; CStateManager::RestoreStreamSource
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z
_TEXT	SEGMENT
_StreamNumber$ = 8					; size = 4
_pStreamData$ = 12					; size = 4
_Stride$ = 16						; size = 4
?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z PROC ; CStateManager::SaveStreamSource, COMDAT
; _this$ = ecx

; 763  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 764  : 	// Check that we have set this up before, if not, the default is this.
; 765  : 	m_CopyState.m_StreamData[StreamNumber] = m_CurrentState.m_StreamData[StreamNumber];

  00004	8b 75 08	 mov	 esi, DWORD PTR _StreamNumber$[ebp]

; 766  : 	SetStreamSource(StreamNumber, pStreamData, Stride);

  00007	ff 75 10	 push	 DWORD PTR _Stride$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR _pStreamData$[ebp]
  0000d	8b 84 f1 64 cc
	00 00		 mov	 eax, DWORD PTR [ecx+esi*8+52324]
  00014	8b 94 f1 68 cc
	00 00		 mov	 edx, DWORD PTR [ecx+esi*8+52328]
  0001b	56		 push	 esi
  0001c	89 84 f1 d8 32
	01 00		 mov	 DWORD PTR [ecx+esi*8+78552], eax
  00023	89 94 f1 dc 32
	01 00		 mov	 DWORD PTR [ecx+esi*8+78556], edx
  0002a	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource
  0002f	5e		 pop	 esi

; 767  : }

  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ENDP ; CStateManager::SaveStreamSource
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z PROC	; CStateManager::SetPixelShaderConstant, COMDAT
; _this$ = ecx

; 751  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 752  : 	m_lpD3DDev->SetPixelShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _dwRegister$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR _pConstantData$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 10	 mov	 edi, DWORD PTR _dwConstantCount$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  00015	8b 80 78 33 01
	00		 mov	 eax, DWORD PTR [eax+78712]
  0001b	57		 push	 edi
  0001c	56		 push	 esi
  0001d	53		 push	 ebx
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	50		 push	 eax
  00021	ff 92 6c 01 00
	00		 call	 DWORD PTR [edx+364]

; 753  : 
; 754  : 	// Set the renderstate and remember it.
; 755  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00027	85 ff		 test	 edi, edi
  00029	74 28		 je	 SHORT $LN3@SetPixelSh

; 752  : 	m_lpD3DDev->SetPixelShaderConstant(dwRegister, pConstantData, dwConstantCount);

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0002e	c1 e3 04	 shl	 ebx, 4
  00031	05 78 80 00 00	 add	 eax, 32888		; 00008078H
  00036	03 c3		 add	 eax, ebx
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@SetPixelSh:

; 753  : 
; 754  : 	// Set the renderstate and remember it.
; 755  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00040	8d 76 10	 lea	 esi, DWORD PTR [esi+16]
  00043	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 756  : 	{
; 757  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 758  : 		m_CurrentState.m_PixelShaderConstants[dwRegister + i] = *(((D3DXVECTOR4*)pConstantData) + i);

  00046	0f 10 46 f0	 movups	 xmm0, XMMWORD PTR [esi-16]
  0004a	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0
  0004e	83 ef 01	 sub	 edi, 1
  00051	75 ed		 jne	 SHORT $LL4@SetPixelSh
$LN3@SetPixelSh:
  00053	5f		 pop	 edi

; 759  : 	}
; 760  : }

  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP	; CStateManager::SetPixelShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?RestorePixelShaderConstant@CStateManager@@QAEXKK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_dwConstantCount$ = 12					; size = 4
?RestorePixelShaderConstant@CStateManager@@QAEXKK@Z PROC ; CStateManager::RestorePixelShaderConstant, COMDAT
; _this$ = ecx

; 746  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 747  : 	SetPixelShaderConstant(dwRegister, &m_CopyState.m_PixelShaderConstants[dwRegister], dwConstantCount);

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwRegister$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	ff 75 0c	 push	 DWORD PTR _dwConstantCount$[ebp]
  0000b	c1 e0 04	 shl	 eax, 4
  0000e	05 ec e6 00 00	 add	 eax, 59116		; 0000e6ecH
  00013	03 c1		 add	 eax, ecx
  00015	50		 push	 eax
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant

; 748  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?RestorePixelShaderConstant@CStateManager@@QAEXKK@Z ENDP ; CStateManager::RestorePixelShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z PROC ; CStateManager::SavePixelShaderConstant, COMDAT
; _this$ = ecx

; 733  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 734  : 	DWORD i;
; 735  : 
; 736  : 	for (i = 0; i < dwConstantCount; i++)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
  00006	56		 push	 esi
  00007	8b 75 10	 mov	 esi, DWORD PTR _dwConstantCount$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	85 f6		 test	 esi, esi
  0000f	74 25		 je	 SHORT $LN3@SavePixelS
  00011	8b 55 0c	 mov	 edx, DWORD PTR _pConstantData$[ebp]
  00014	8b ce		 mov	 ecx, esi
  00016	c1 e0 04	 shl	 eax, 4
  00019	05 ec e6 00 00	 add	 eax, 59116		; 0000e6ecH
  0001e	03 c7		 add	 eax, edi
$LL4@SavePixelS:
  00020	8d 52 10	 lea	 edx, DWORD PTR [edx+16]
  00023	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 737  : 	{
; 738  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 739  : 		m_CopyState.m_PixelShaderConstants[dwRegister + i] = *(((D3DXVECTOR4*)pConstantData) + i);

  00026	0f 10 42 f0	 movups	 xmm0, XMMWORD PTR [edx-16]
  0002a	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0
  0002e	83 e9 01	 sub	 ecx, 1
  00031	75 ed		 jne	 SHORT $LL4@SavePixelS
  00033	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
$LN3@SavePixelS:

; 740  : 	}
; 741  : 
; 742  : 	SetPixelShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00036	56		 push	 esi
  00037	ff 75 0c	 push	 DWORD PTR _pConstantData$[ebp]
  0003a	8b cf		 mov	 ecx, edi
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 743  : }

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP ; CStateManager::SavePixelShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z PROC ; CStateManager::SetVertexShaderConstant, COMDAT
; _this$ = ecx

; 720  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 721  : 	m_lpD3DDev->SetVertexShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _dwRegister$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR _pConstantData$[ebp]
  0000e	57		 push	 edi
  0000f	8b 7d 10	 mov	 edi, DWORD PTR _dwConstantCount$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  00015	8b 80 78 33 01
	00		 mov	 eax, DWORD PTR [eax+78712]
  0001b	57		 push	 edi
  0001c	56		 push	 esi
  0001d	53		 push	 ebx
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	50		 push	 eax
  00021	ff 92 3c 01 00
	00		 call	 DWORD PTR [edx+316]

; 722  : 
; 723  : 	// Set the renderstate and remember it.
; 724  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00027	85 ff		 test	 edi, edi
  00029	74 28		 je	 SHORT $LN3@SetVertexS

; 721  : 	m_lpD3DDev->SetVertexShaderConstant(dwRegister, pConstantData, dwConstantCount);

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0002e	c1 e3 04	 shl	 ebx, 4
  00031	05 78 7a 00 00	 add	 eax, 31352		; 00007a78H
  00036	03 c3		 add	 eax, ebx
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@SetVertexS:

; 722  : 
; 723  : 	// Set the renderstate and remember it.
; 724  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00040	8d 76 10	 lea	 esi, DWORD PTR [esi+16]
  00043	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 725  : 	{
; 726  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 727  : 		m_CurrentState.m_VertexShaderConstants[dwRegister + i] = *(((D3DXVECTOR4*)pConstantData) + i);

  00046	0f 10 46 f0	 movups	 xmm0, XMMWORD PTR [esi-16]
  0004a	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0
  0004e	83 ef 01	 sub	 edi, 1
  00051	75 ed		 jne	 SHORT $LL4@SetVertexS
$LN3@SetVertexS:
  00053	5f		 pop	 edi

; 728  : 	}
; 729  : }

  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP ; CStateManager::SetVertexShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreVertexShaderConstant@CStateManager@@QAEXKK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_dwConstantCount$ = 12					; size = 4
?RestoreVertexShaderConstant@CStateManager@@QAEXKK@Z PROC ; CStateManager::RestoreVertexShaderConstant, COMDAT
; _this$ = ecx

; 715  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 716  : 	SetVertexShaderConstant(dwRegister, &m_CopyState.m_VertexShaderConstants[dwRegister], dwConstantCount);

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwRegister$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	ff 75 0c	 push	 DWORD PTR _dwConstantCount$[ebp]
  0000b	c1 e0 04	 shl	 eax, 4
  0000e	05 ec e0 00 00	 add	 eax, 57580		; 0000e0ecH
  00013	03 c1		 add	 eax, ecx
  00015	50		 push	 eax
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 717  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?RestoreVertexShaderConstant@CStateManager@@QAEXKK@Z ENDP ; CStateManager::RestoreVertexShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z PROC ; CStateManager::SaveVertexShaderConstant, COMDAT
; _this$ = ecx

; 702  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 703  : 	DWORD i;
; 704  : 
; 705  : 	for (i = 0; i < dwConstantCount; i++)

  00003	8b 55 10	 mov	 edx, DWORD PTR _dwConstantCount$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	85 d2		 test	 edx, edx
  0000e	74 27		 je	 SHORT $LN4@SaveVertex
  00010	56		 push	 esi
  00011	c1 e0 04	 shl	 eax, 4
  00014	8b ca		 mov	 ecx, edx
  00016	57		 push	 edi
  00017	81 e1 ff ff ff
	0f		 and	 ecx, 268435455		; 0fffffffH
  0001d	8d b8 ec e0 00
	00		 lea	 edi, DWORD PTR [eax+57580]
  00023	8d b0 78 7a 00
	00		 lea	 esi, DWORD PTR [eax+31352]
  00029	03 fb		 add	 edi, ebx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
  0002e	03 f3		 add	 esi, ebx
  00030	c1 e1 02	 shl	 ecx, 2
  00033	f3 a5		 rep movsd
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
$LN4@SaveVertex:

; 706  : 	{
; 707  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 708  : 		m_CopyState.m_VertexShaderConstants[dwRegister + i] = m_CurrentState.m_VertexShaderConstants[dwRegister + i];
; 709  : 	}
; 710  : 
; 711  : 	SetVertexShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00037	52		 push	 edx
  00038	ff 75 0c	 push	 DWORD PTR _pConstantData$[ebp]
  0003b	8b cb		 mov	 ecx, ebx
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant
  00043	5b		 pop	 ebx

; 712  : }

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP ; CStateManager::SaveVertexShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pMatrix$ = 12						; size = 4
?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z PROC ; CStateManager::GetTransform, COMDAT
; _this$ = ecx

; 696  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	*pMatrix = m_CurrentState.m_Matrices[Type];

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	c1 e0 06	 shl	 eax, 6
  00009	03 c8		 add	 ecx, eax
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _pMatrix$[ebp]
  0000e	0f 10 81 20 81
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+33056]
  00015	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00018	0f 10 81 30 81
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+33072]
  0001f	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00023	0f 10 81 40 81
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+33088]
  0002a	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
  0002e	0f 10 81 50 81
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+33104]
  00035	0f 11 40 30	 movups	 XMMWORD PTR [eax+48], xmm0

; 698  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ENDP ; CStateManager::GetTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pMatrix$ = 12						; size = 4
?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z PROC ; CStateManager::SetTransform, COMDAT
; _this$ = ecx

; 682  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 683  : 	if (m_bScene)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _Type$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _pMatrix$[ebp]
  0000e	80 be 6d 33 01
	00 00		 cmp	 BYTE PTR [esi+78701], 0
  00015	74 11		 je	 SHORT $LN2@SetTransfo

; 684  : 	{
; 685  : 		m_lpD3DDev->SetTransform(Type, pMatrix);

  00017	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	50		 push	 eax
  00020	8b 10		 mov	 edx, DWORD PTR [eax]
  00022	ff 92 94 00 00
	00		 call	 DWORD PTR [edx+148]
$LN2@SetTransfo:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 463  :     memcpy(&_11, &mat, sizeof(D3DXMATRIX));

  00028	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp

; 692  : 	m_CurrentState.m_Matrices[Type] = *pMatrix;

  0002b	c1 e3 06	 shl	 ebx, 6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 463  :     memcpy(&_11, &mat, sizeof(D3DXMATRIX));

  0002e	0f 10 4f 10	 movups	 xmm1, XMMWORD PTR [edi+16]
  00032	0f 10 57 20	 movups	 xmm2, XMMWORD PTR [edi+32]
  00036	0f 10 5f 30	 movups	 xmm3, XMMWORD PTR [edi+48]
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp

; 692  : 	m_CurrentState.m_Matrices[Type] = *pMatrix;

  0003a	5f		 pop	 edi
  0003b	0f 11 84 33 20
	81 00 00	 movups	 XMMWORD PTR [ebx+esi+33056], xmm0
  00043	0f 11 8c 33 30
	81 00 00	 movups	 XMMWORD PTR [ebx+esi+33072], xmm1
  0004b	0f 11 94 33 40
	81 00 00	 movups	 XMMWORD PTR [ebx+esi+33088], xmm2
  00053	0f 11 9c 33 50
	81 00 00	 movups	 XMMWORD PTR [ebx+esi+33104], xmm3
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx

; 693  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ENDP ; CStateManager::SetTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z PROC ; CStateManager::RestoreTransform, COMDAT
; _this$ = ecx

; 667  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 668  : #ifdef _DEBUG
; 669  : 	if (!m_bTransformSavingFlag[Type])
; 670  : 	{
; 671  : 		Tracef(" CStateManager::RestoreTransform - This transform was not saved [%d]\n", Type);
; 672  : 		StateManager_Assert(!" This render state was not saved!");
; 673  : 	}
; 674  : 	m_bTransformSavingFlag[Type] = FALSE;
; 675  : #endif _DEBUG
; 676  : 
; 677  : 	SetTransform(Type, &m_CopyState.m_Matrices[Type]);

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e0 06	 shl	 eax, 6
  0000b	05 94 e7 00 00	 add	 eax, 59284		; 0000e794H
  00010	03 c1		 add	 eax, ecx
  00012	50		 push	 eax
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 678  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ENDP ; CStateManager::RestoreTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pMatrix$ = 12						; size = 4
?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z PROC ; CStateManager::SaveTransform, COMDAT
; _this$ = ecx

; 652  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 653  : #ifdef _DEBUG
; 654  : 	if (m_bTransformSavingFlag[Type])
; 655  : 	{
; 656  : 		Tracef(" CStateManager::SaveTransform - This transform is already saved [%d]\n", Type);
; 657  : 		StateManager_Assert(!" This trasform is already saved!");
; 658  : 	}
; 659  : 	m_bTransformSavingFlag[Type] = TRUE;
; 660  : #endif _DEBUG
; 661  : 
; 662  : 	m_CopyState.m_Matrices[Type] = m_CurrentState.m_Matrices[Type];

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e0 06	 shl	 eax, 6
  0000b	0f 10 84 08 20
	81 00 00	 movups	 xmm0, XMMWORD PTR [eax+ecx+33056]
  00013	0f 11 84 08 94
	e7 00 00	 movups	 XMMWORD PTR [eax+ecx+59284], xmm0
  0001b	0f 10 84 08 30
	81 00 00	 movups	 xmm0, XMMWORD PTR [eax+ecx+33072]
  00023	0f 11 84 08 a4
	e7 00 00	 movups	 XMMWORD PTR [eax+ecx+59300], xmm0
  0002b	0f 10 84 08 40
	81 00 00	 movups	 xmm0, XMMWORD PTR [eax+ecx+33088]
  00033	0f 11 84 08 b4
	e7 00 00	 movups	 XMMWORD PTR [eax+ecx+59316], xmm0
  0003b	0f 10 84 08 50
	81 00 00	 movups	 xmm0, XMMWORD PTR [eax+ecx+33104]
  00043	0f 11 84 08 c4
	e7 00 00	 movups	 XMMWORD PTR [eax+ecx+59332], xmm0

; 663  : 	SetTransform(Type, (D3DXMATRIX *)pMatrix);

  0004b	89 55 08	 mov	 DWORD PTR _Type$[ebp], edx

; 664  : }

  0004e	5d		 pop	 ebp

; 663  : 	SetTransform(Type, (D3DXMATRIX *)pMatrix);

  0004f	e9 00 00 00 00	 jmp	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform
?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ENDP ; CStateManager::SaveTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?GetPixelShader@CStateManager@@QAEXPAK@Z
_TEXT	SEGMENT
_pdwShader$ = 8						; size = 4
?GetPixelShader@CStateManager@@QAEXPAK@Z PROC		; CStateManager::GetPixelShader, COMDAT
; _this$ = ecx

; 645  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 646  : 	*pdwShader = m_CurrentState.m_dwPixelShader;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pdwShader$[ebp]
  00006	8b 89 18 81 00
	00		 mov	 ecx, DWORD PTR [ecx+33048]
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 647  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetPixelShader@CStateManager@@QAEXPAK@Z ENDP		; CStateManager::GetPixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetPixelShader@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SetPixelShader@CStateManager@@QAEXK@Z PROC		; CStateManager::SetPixelShader, COMDAT
; _this$ = ecx

; 636  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 637  : 	if (m_CurrentState.m_dwPixelShader == dwShader)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _dwShader$[ebp]
  0000a	39 be 18 81 00
	00		 cmp	 DWORD PTR [esi+33048], edi
  00010	74 16		 je	 SHORT $LN1@SetPixelSh

; 638  : 		return;
; 639  : 
; 640  : 	m_lpD3DDev->SetPixelShader(dwShader);

  00012	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00018	57		 push	 edi
  00019	50		 push	 eax
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	ff 92 60 01 00
	00		 call	 DWORD PTR [edx+352]

; 641  : 	m_CurrentState.m_dwPixelShader = dwShader;

  00022	89 be 18 81 00
	00		 mov	 DWORD PTR [esi+33048], edi
$LN1@SetPixelSh:

; 642  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetPixelShader@CStateManager@@QAEXK@Z ENDP		; CStateManager::SetPixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?RestorePixelShader@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestorePixelShader@CStateManager@@QAEXXZ PROC		; CStateManager::RestorePixelShader, COMDAT
; _this$ = ecx

; 632  : 	SetPixelShader(m_CopyState.m_dwPixelShader);

  00000	ff b1 8c e7 00
	00		 push	 DWORD PTR [ecx+59276]
  00006	e8 00 00 00 00	 call	 ?SetPixelShader@CStateManager@@QAEXK@Z ; CStateManager::SetPixelShader

; 633  : }

  0000b	c3		 ret	 0
?RestorePixelShader@CStateManager@@QAEXXZ ENDP		; CStateManager::RestorePixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SavePixelShader@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SavePixelShader@CStateManager@@QAEXK@Z PROC		; CStateManager::SavePixelShader, COMDAT
; _this$ = ecx

; 625  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 626  : 	m_CopyState.m_dwPixelShader = m_CurrentState.m_dwPixelShader;

  00003	8b 81 18 81 00
	00		 mov	 eax, DWORD PTR [ecx+33048]
  00009	89 81 8c e7 00
	00		 mov	 DWORD PTR [ecx+59276], eax

; 628  : }

  0000f	5d		 pop	 ebp

; 627  : 	SetPixelShader(dwShader);

  00010	e9 00 00 00 00	 jmp	 ?SetPixelShader@CStateManager@@QAEXK@Z ; CStateManager::SetPixelShader
?SavePixelShader@CStateManager@@QAEXK@Z ENDP		; CStateManager::SavePixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?GetVertexShader@CStateManager@@QAEXPAK@Z
_TEXT	SEGMENT
_pdwShader$ = 8						; size = 4
?GetVertexShader@CStateManager@@QAEXPAK@Z PROC		; CStateManager::GetVertexShader, COMDAT
; _this$ = ecx

; 619  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 620  : 	*pdwShader = m_CurrentState.m_dwVertexShader;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pdwShader$[ebp]
  00006	8b 89 1c 81 00
	00		 mov	 ecx, DWORD PTR [ecx+33052]
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 621  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetVertexShader@CStateManager@@QAEXPAK@Z ENDP		; CStateManager::GetVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetVertexShader@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SetVertexShader@CStateManager@@QAEXK@Z PROC		; CStateManager::SetVertexShader, COMDAT
; _this$ = ecx

; 610  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 611  : 	if (m_CurrentState.m_dwVertexShader == dwShader)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _dwShader$[ebp]
  0000a	39 be 1c 81 00
	00		 cmp	 DWORD PTR [esi+33052], edi
  00010	74 16		 je	 SHORT $LN1@SetVertexS

; 612  : 		return;
; 613  : 
; 614  : 	m_lpD3DDev->SetVertexShader(dwShader);

  00012	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00018	57		 push	 edi
  00019	50		 push	 eax
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	ff 92 30 01 00
	00		 call	 DWORD PTR [edx+304]

; 615  : 	m_CurrentState.m_dwVertexShader = dwShader;

  00022	89 be 1c 81 00
	00		 mov	 DWORD PTR [esi+33052], edi
$LN1@SetVertexS:

; 616  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetVertexShader@CStateManager@@QAEXK@Z ENDP		; CStateManager::SetVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreVertexShader@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreVertexShader@CStateManager@@QAEXXZ PROC		; CStateManager::RestoreVertexShader, COMDAT
; _this$ = ecx

; 606  : 	SetVertexShader(m_CopyState.m_dwVertexShader);

  00000	ff b1 90 e7 00
	00		 push	 DWORD PTR [ecx+59280]
  00006	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 607  : }

  0000b	c3		 ret	 0
?RestoreVertexShader@CStateManager@@QAEXXZ ENDP		; CStateManager::RestoreVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveVertexShader@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SaveVertexShader@CStateManager@@QAEXK@Z PROC		; CStateManager::SaveVertexShader, COMDAT
; _this$ = ecx

; 599  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 600  : 	m_CopyState.m_dwVertexShader = m_CurrentState.m_dwVertexShader;

  00003	8b 81 1c 81 00
	00		 mov	 eax, DWORD PTR [ecx+33052]
  00009	89 81 90 e7 00
	00		 mov	 DWORD PTR [ecx+59280], eax

; 602  : }

  0000f	5d		 pop	 ebp

; 601  : 	SetVertexShader(dwShader);

  00010	e9 00 00 00 00	 jmp	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader
?SaveVertexShader@CStateManager@@QAEXK@Z ENDP		; CStateManager::SaveVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetBestFiltering@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
?SetBestFiltering@CStateManager@@QAEXK@Z PROC		; CStateManager::SetBestFiltering, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 132  : 	SetTextureStageState(dwStage, D3DTSS_MINFILTER,	m_dwBestMinFilter);

  00004	8b 75 08	 mov	 esi, DWORD PTR _dwStage$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	ff b7 70 33 01
	00		 push	 DWORD PTR [edi+78704]
  00010	6a 11		 push	 17			; 00000011H
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 133  : 	SetTextureStageState(dwStage, D3DTSS_MAGFILTER,	m_dwBestMagFilter);

  00018	ff b7 74 33 01
	00		 push	 DWORD PTR [edi+78708]
  0001e	8b cf		 mov	 ecx, edi
  00020	6a 10		 push	 16			; 00000010H
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 134  : 	SetTextureStageState(dwStage, D3DTSS_MIPFILTER,	D3DTEXF_LINEAR);

  00028	6a 02		 push	 2
  0002a	6a 12		 push	 18			; 00000012H
  0002c	56		 push	 esi
  0002d	8b cf		 mov	 ecx, edi
  0002f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 135  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?SetBestFiltering@CStateManager@@QAEXK@Z ENDP		; CStateManager::SetBestFiltering
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_pdwValue$ = 16						; size = 4
?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z PROC ; CStateManager::GetTextureStageState, COMDAT
; _this$ = ecx

; 593  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 594  : 	*pdwValue = m_CurrentState.m_TextureStates[dwStage][Type];

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _dwStage$[ebp]
  00008	c1 e1 07	 shl	 ecx, 7
  0000b	03 4d 0c	 add	 ecx, DWORD PTR _Type$[ebp]
  0000e	8b 8c 88 78 6a
	00 00		 mov	 ecx, DWORD PTR [eax+ecx*4+27256]
  00015	8b 45 10	 mov	 eax, DWORD PTR _pdwValue$[ebp]
  00018	89 08		 mov	 DWORD PTR [eax], ecx

; 595  : }

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z ENDP ; CStateManager::GetTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_dwValue$ = 16						; size = 4
?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z PROC ; CStateManager::SetTextureStageState, COMDAT
; _this$ = ecx

; 584  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 585  : 	if (m_CurrentState.m_TextureStates[dwStage][Type] == dwValue)

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e0 07	 shl	 eax, 7
  0000b	03 45 0c	 add	 eax, DWORD PTR _Type$[ebp]
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 75 10	 mov	 esi, DWORD PTR _dwValue$[ebp]
  00013	39 b4 81 78 6a
	00 00		 cmp	 DWORD PTR [ecx+eax*4+27256], esi
  0001a	8d 1c 81	 lea	 ebx, DWORD PTR [ecx+eax*4]
  0001d	74 1a		 je	 SHORT $LN1@SetTexture

; 586  : 		return;
; 587  : 
; 588  : 	m_lpD3DDev->SetTextureStageState(dwStage, Type, dwValue);

  0001f	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  00025	56		 push	 esi
  00026	ff 75 0c	 push	 DWORD PTR _Type$[ebp]
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	52		 push	 edx
  0002c	50		 push	 eax
  0002d	ff 91 fc 00 00
	00		 call	 DWORD PTR [ecx+252]

; 589  : 	m_CurrentState.m_TextureStates[dwStage][Type] = dwValue;

  00033	89 b3 78 6a 00
	00		 mov	 DWORD PTR [ebx+27256], esi
$LN1@SetTexture:

; 590  : }

  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ENDP ; CStateManager::SetTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z PROC ; CStateManager::RestoreTextureStageState, COMDAT
; _this$ = ecx

; 571  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 572  : #ifdef _DEBUG
; 573  : 	if (!m_bTextureStageStateSavingFlag[dwStage][Type])
; 574  : 	{
; 575  : 		Tracef(" CStateManager::RestoreTextureStageState - This texture stage state was not saved [%d, %d]\n", dwStage, Type);
; 576  : 		StateManager_Assert(!" This texture stage state was not saved!");
; 577  : 	}
; 578  : 	m_bTextureStageStateSavingFlag[dwStage][Type] = FALSE;
; 579  : #endif _DEBUG
; 580  : 	SetTextureStageState(dwStage, Type, m_CopyState.m_TextureStates[dwStage][Type]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStage$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR _Type$[ebp]
  00009	c1 e0 07	 shl	 eax, 7
  0000c	03 c2		 add	 eax, edx
  0000e	ff b4 81 ec d0
	00 00		 push	 DWORD PTR [ecx+eax*4+53484]
  00015	52		 push	 edx
  00016	ff 75 08	 push	 DWORD PTR _dwStage$[ebp]
  00019	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 581  : }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ENDP ; CStateManager::RestoreTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_dwValue$ = 16						; size = 4
?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z PROC ; CStateManager::SaveTextureStageState, COMDAT
; _this$ = ecx

; 556  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 557  : 	// Check that we have set this up before, if not, the default is this.
; 558  : #ifdef _DEBUG
; 559  : 	if (m_bTextureStageStateSavingFlag[dwStage][Type])
; 560  : 	{
; 561  : 		Tracef(" CStateManager::SaveTextureStageState - This texture stage state is already saved [%d, %d]\n", dwStage, Type);
; 562  : 		StateManager_Assert(!" This texture stage state is already saved!");
; 563  : 	}
; 564  : 	m_bTextureStageStateSavingFlag[dwStage][Type] = TRUE;
; 565  : #endif _DEBUG
; 566  : 	m_CopyState.m_TextureStates[dwStage][Type] = m_CurrentState.m_TextureStates[dwStage][Type];

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	56		 push	 esi

; 567  : 	SetTextureStageState(dwStage, Type, dwValue);

  00007	ff 75 10	 push	 DWORD PTR _dwValue$[ebp]
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _Type$[ebp]
  0000d	c1 e2 07	 shl	 edx, 7
  00010	03 d6		 add	 edx, esi
  00012	56		 push	 esi
  00013	ff 75 08	 push	 DWORD PTR _dwStage$[ebp]
  00016	8b 84 91 78 6a
	00 00		 mov	 eax, DWORD PTR [ecx+edx*4+27256]
  0001d	89 84 91 ec d0
	00 00		 mov	 DWORD PTR [ecx+edx*4+53484], eax
  00024	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  00029	5e		 pop	 esi

; 568  : }

  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ENDP ; CStateManager::SaveTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture8@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_ppTexture$ = 12					; size = 4
?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture8@@@Z PROC ; CStateManager::GetTexture, COMDAT
; _this$ = ecx

; 550  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 551  : 	*ppTexture = m_CurrentState.m_Textures[dwStage];

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStage$[ebp]
  00006	8b 8c 81 f8 80
	00 00		 mov	 ecx, DWORD PTR [ecx+eax*4+33016]
  0000d	8b 45 0c	 mov	 eax, DWORD PTR _ppTexture$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 552  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture8@@@Z ENDP ; CStateManager::GetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_pTexture$ = 12						; size = 4
?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z PROC ; CStateManager::SetTexture, COMDAT
; _this$ = ecx

; 541  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 542  : 	if (pTexture == m_CurrentState.m_Textures[dwStage])

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _pTexture$[ebp]
  0000a	3b b4 91 f8 80
	00 00		 cmp	 esi, DWORD PTR [ecx+edx*4+33016]
  00011	57		 push	 edi
  00012	8d 3c 91	 lea	 edi, DWORD PTR [ecx+edx*4]
  00015	74 17		 je	 SHORT $LN1@SetTexture

; 543  : 		return;
; 544  : 
; 545  : 	m_lpD3DDev->SetTexture(dwStage, pTexture);

  00017	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  0001d	56		 push	 esi
  0001e	52		 push	 edx
  0001f	50		 push	 eax
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	ff 91 f4 00 00
	00		 call	 DWORD PTR [ecx+244]

; 546  : 	m_CurrentState.m_Textures[dwStage] = pTexture;

  00028	89 b7 f8 80 00
	00		 mov	 DWORD PTR [edi+33016], esi
$LN1@SetTexture:

; 547  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ENDP ; CStateManager::SetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreTexture@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
?RestoreTexture@CStateManager@@QAEXK@Z PROC		; CStateManager::RestoreTexture, COMDAT
; _this$ = ecx

; 536  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 537  : 	SetTexture(dwStage, m_CopyState.m_Textures[dwStage]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStage$[ebp]
  00006	ff b4 81 6c e7
	00 00		 push	 DWORD PTR [ecx+eax*4+59244]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 538  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?RestoreTexture@CStateManager@@QAEXK@Z ENDP		; CStateManager::RestoreTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_pTexture$ = 12						; size = 4
?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z PROC ; CStateManager::SaveTexture, COMDAT
; _this$ = ecx

; 529  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 530  : 	// Check that we have set this up before, if not, the default is this.
; 531  : 	m_CopyState.m_Textures[dwStage] = m_CurrentState.m_Textures[dwStage];

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	8b 84 91 f8 80
	00 00		 mov	 eax, DWORD PTR [ecx+edx*4+33016]
  0000d	89 84 91 6c e7
	00 00		 mov	 DWORD PTR [ecx+edx*4+59244], eax

; 532  : 	SetTexture(dwStage, pTexture);

  00014	89 55 08	 mov	 DWORD PTR _dwStage$[ebp], edx

; 533  : }

  00017	5d		 pop	 ebp

; 532  : 	SetTexture(dwStage, pTexture);

  00018	e9 00 00 00 00	 jmp	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ENDP ; CStateManager::SaveTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pdwValue$ = 12						; size = 4
?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z PROC ; CStateManager::GetRenderState, COMDAT
; _this$ = ecx

; 523  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 524  : 	*pdwValue = m_CurrentState.m_RenderStates[Type];

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	8b 8c 81 78 66
	00 00		 mov	 ecx, DWORD PTR [ecx+eax*4+26232]
  0000d	8b 45 0c	 mov	 eax, DWORD PTR _pdwValue$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 525  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z ENDP ; CStateManager::GetRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_Value$ = 12						; size = 4
?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z PROC ; CStateManager::SetRenderState, COMDAT
; _this$ = ecx

; 514  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 515  : 	if (m_CurrentState.m_RenderStates[Type] == Value)

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _Value$[ebp]
  0000a	39 b4 91 78 66
	00 00		 cmp	 DWORD PTR [ecx+edx*4+26232], esi
  00011	57		 push	 edi
  00012	8d 3c 91	 lea	 edi, DWORD PTR [ecx+edx*4]
  00015	74 17		 je	 SHORT $LN1@SetRenderS

; 516  : 		return;
; 517  : 
; 518  : 	m_lpD3DDev->SetRenderState(Type, Value);

  00017	8b 81 78 33 01
	00		 mov	 eax, DWORD PTR [ecx+78712]
  0001d	56		 push	 esi
  0001e	52		 push	 edx
  0001f	50		 push	 eax
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	ff 91 c8 00 00
	00		 call	 DWORD PTR [ecx+200]

; 519  : 	m_CurrentState.m_RenderStates[Type] = Value;

  00028	89 b7 78 66 00
	00		 mov	 DWORD PTR [edi+26232], esi
$LN1@SetRenderS:

; 520  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ENDP ; CStateManager::SetRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z PROC ; CStateManager::RestoreRenderState, COMDAT
; _this$ = ecx

; 500  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 501  : #ifdef _DEBUG
; 502  : 	if (!m_bRenderStateSavingFlag[Type])
; 503  : 	{
; 504  : 		Tracef(" CStateManager::SaveRenderState - This render state was not saved [%d, %d]\n", Type);
; 505  : 		StateManager_Assert(!" This render state was not saved!");
; 506  : 	}
; 507  : 	m_bRenderStateSavingFlag[Type] = FALSE;
; 508  : #endif _DEBUG
; 509  : 
; 510  : 	SetRenderState(Type, m_CopyState.m_RenderStates[Type]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	ff b4 81 ec cc
	00 00		 push	 DWORD PTR [ecx+eax*4+52460]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 511  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ENDP ; CStateManager::RestoreRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_dwValue$ = 12						; size = 4
?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z PROC ; CStateManager::SaveRenderState, COMDAT
; _this$ = ecx

; 484  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 485  : #ifdef _DEBUG
; 486  : 	if (m_bRenderStateSavingFlag[Type])
; 487  : 	{
; 488  : 		Tracef(" CStateManager::SaveRenderState - This render state is already saved [%d, %d]\n", Type, dwValue);
; 489  : 		StateManager_Assert(!" This render state is already saved!");
; 490  : 	}
; 491  : 	m_bRenderStateSavingFlag[Type] = TRUE;
; 492  : #endif _DEBUG
; 493  : 
; 494  : 	// Check that we have set this up before, if not, the default is this.
; 495  : 	m_CopyState.m_RenderStates[Type] = m_CurrentState.m_RenderStates[Type];

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	8b 84 91 78 66
	00 00		 mov	 eax, DWORD PTR [ecx+edx*4+26232]
  0000d	89 84 91 ec cc
	00 00		 mov	 DWORD PTR [ecx+edx*4+52460], eax

; 496  : 	SetRenderState(Type, dwValue);

  00014	89 55 08	 mov	 DWORD PTR _Type$[ebp], edx

; 497  : }

  00017	5d		 pop	 ebp

; 496  : 	SetRenderState(Type, dwValue);

  00018	e9 00 00 00 00	 jmp	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ENDP ; CStateManager::SaveRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT8@@@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_pLight$ = 12						; size = 4
?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT8@@@Z PROC	; CStateManager::GetLight, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 28   : 	assert(index<8);
; 29   : 	*pLight=m_kLightData.m_akD3DLight[index];

  00004	6b 75 08 68	 imul	 esi, DWORD PTR _index$[ebp], 104
  00008	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  0000d	57		 push	 edi
  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _pLight$[ebp]
  00011	81 c6 00 00 00
	00		 add	 esi, OFFSET ?m_kLightData@@3USLightData@@A ; m_kLightData
  00017	f3 a5		 rep movsd
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi

; 30   : }

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT8@@@Z ENDP	; CStateManager::GetLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT8@@@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_pLight$ = 12						; size = 4
?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT8@@@Z PROC	; CStateManager::SetLight, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   : 	assert(index<SLightData::LIGHT_NUM);
; 21   : 	m_kLightData.m_akD3DLight[index]=*pLight;

  00003	8b 55 0c	 mov	 edx, DWORD PTR _pLight$[ebp]
  00006	8b c1		 mov	 eax, ecx
  00008	53		 push	 ebx
  00009	8b 5d 08	 mov	 ebx, DWORD PTR _index$[ebp]
  0000c	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	6b fb 68	 imul	 edi, ebx, 104
  00016	8b f2		 mov	 esi, edx

; 22   : 
; 23   : 	m_lpD3DDev->SetLight(index, pLight);

  00018	52		 push	 edx
  00019	53		 push	 ebx
  0001a	81 c7 00 00 00
	00		 add	 edi, OFFSET ?m_kLightData@@3USLightData@@A ; m_kLightData
  00020	f3 a5		 rep movsd
  00022	8b 80 78 33 01
	00		 mov	 eax, DWORD PTR [eax+78712]
  00028	50		 push	 eax
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	ff 91 b0 00 00
	00		 call	 DWORD PTR [ecx+176]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 24   : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT8@@@Z ENDP	; CStateManager::SetLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL8@@@Z
_TEXT	SEGMENT
_pMaterial$ = 8						; size = 4
?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL8@@@Z PROC ; CStateManager::GetMaterial, COMDAT
; _this$ = ecx

; 472  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 473  : 	// Set the renderstate and remember it.
; 474  : 	*pMaterial = m_CurrentState.m_D3DMaterial;

  00003	0f 10 81 20 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52256]
  0000a	8b 55 08	 mov	 edx, DWORD PTR _pMaterial$[ebp]
  0000d	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00010	0f 10 81 30 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52272]
  00017	0f 11 42 10	 movups	 XMMWORD PTR [edx+16], xmm0
  0001b	0f 10 81 40 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52288]
  00022	0f 11 42 20	 movups	 XMMWORD PTR [edx+32], xmm0
  00026	0f 10 81 50 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52304]
  0002d	0f 11 42 30	 movups	 XMMWORD PTR [edx+48], xmm0
  00031	8b 81 60 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52320]
  00037	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 475  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL8@@@Z ENDP ; CStateManager::GetMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z
_TEXT	SEGMENT
_pMaterial$ = 8						; size = 4
?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z PROC ; CStateManager::SetMaterial, COMDAT
; _this$ = ecx

; 466  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 467  : 	m_lpD3DDev->SetMaterial(pMaterial);

  00004	8b 75 08	 mov	 esi, DWORD PTR _pMaterial$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	56		 push	 esi
  0000b	8b 87 78 33 01
	00		 mov	 eax, DWORD PTR [edi+78712]
  00011	50		 push	 eax
  00012	8b 10		 mov	 edx, DWORD PTR [eax]
  00014	ff 92 a8 00 00
	00		 call	 DWORD PTR [edx+168]

; 468  : 	m_CurrentState.m_D3DMaterial = *pMaterial;

  0001a	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  0001d	0f 11 87 20 cc
	00 00		 movups	 XMMWORD PTR [edi+52256], xmm0
  00024	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  00028	0f 11 87 30 cc
	00 00		 movups	 XMMWORD PTR [edi+52272], xmm0
  0002f	0f 10 46 20	 movups	 xmm0, XMMWORD PTR [esi+32]
  00033	0f 11 87 40 cc
	00 00		 movups	 XMMWORD PTR [edi+52288], xmm0
  0003a	0f 10 46 30	 movups	 xmm0, XMMWORD PTR [esi+48]
  0003e	0f 11 87 50 cc
	00 00		 movups	 XMMWORD PTR [edi+52304], xmm0
  00045	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00048	89 87 60 cc 00
	00		 mov	 DWORD PTR [edi+52320], eax
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 469  : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ENDP ; CStateManager::SetMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?RestoreMaterial@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreMaterial@CStateManager@@QAEXXZ PROC		; CStateManager::RestoreMaterial, COMDAT
; _this$ = ecx

; 462  : 	SetMaterial(&m_CopyState.m_D3DMaterial);

  00000	8d 81 94 32 01
	00		 lea	 eax, DWORD PTR [ecx+78484]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial

; 463  : }

  0000c	c3		 ret	 0
?RestoreMaterial@CStateManager@@QAEXXZ ENDP		; CStateManager::RestoreMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z
_TEXT	SEGMENT
_pMaterial$ = 8						; size = 4
?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z PROC ; CStateManager::SaveMaterial, COMDAT
; _this$ = ecx

; 454  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 455  : 	// Check that we have set this up before, if not, the default is this.
; 456  : 	m_CopyState.m_D3DMaterial = m_CurrentState.m_D3DMaterial;

  00003	0f 10 81 20 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52256]
  0000a	8b 81 60 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52320]
  00010	0f 11 81 94 32
	01 00		 movups	 XMMWORD PTR [ecx+78484], xmm0
  00017	0f 10 81 30 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52272]
  0001e	0f 11 81 a4 32
	01 00		 movups	 XMMWORD PTR [ecx+78500], xmm0
  00025	0f 10 81 40 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52288]
  0002c	0f 11 81 b4 32
	01 00		 movups	 XMMWORD PTR [ecx+78516], xmm0
  00033	0f 10 81 50 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52304]
  0003a	0f 11 81 c4 32
	01 00		 movups	 XMMWORD PTR [ecx+78532], xmm0
  00041	89 81 d4 32 01
	00		 mov	 DWORD PTR [ecx+78548], eax

; 458  : }

  00047	5d		 pop	 ebp

; 457  : 	SetMaterial(pMaterial);

  00048	e9 00 00 00 00	 jmp	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial
?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ENDP ; CStateManager::SaveMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SaveMaterial@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?SaveMaterial@CStateManager@@QAEXXZ PROC		; CStateManager::SaveMaterial, COMDAT
; _this$ = ecx

; 450  : 	m_CopyState.m_D3DMaterial = m_CurrentState.m_D3DMaterial;

  00000	0f 10 81 20 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52256]
  00007	8b 81 60 cc 00
	00		 mov	 eax, DWORD PTR [ecx+52320]
  0000d	0f 11 81 94 32
	01 00		 movups	 XMMWORD PTR [ecx+78484], xmm0
  00014	0f 10 81 30 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52272]
  0001b	0f 11 81 a4 32
	01 00		 movups	 XMMWORD PTR [ecx+78500], xmm0
  00022	0f 10 81 40 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52288]
  00029	0f 11 81 b4 32
	01 00		 movups	 XMMWORD PTR [ecx+78516], xmm0
  00030	0f 10 81 50 cc
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+52304]
  00037	0f 11 81 c4 32
	01 00		 movups	 XMMWORD PTR [ecx+78532], xmm0
  0003e	89 81 d4 32 01
	00		 mov	 DWORD PTR [ecx+78548], eax

; 451  : }

  00044	c3		 ret	 0
?SaveMaterial@CStateManager@@QAEXXZ ENDP		; CStateManager::SaveMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?EndScene@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?EndScene@CStateManager@@QAEXXZ PROC			; CStateManager::EndScene, COMDAT
; _this$ = ecx

; 52   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 53   : 	m_lpD3DDev->EndScene();

  00003	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00009	50		 push	 eax
  0000a	8b 10		 mov	 edx, DWORD PTR [eax]
  0000c	ff 92 8c 00 00
	00		 call	 DWORD PTR [edx+140]

; 54   : 	m_bScene=false;

  00012	c6 86 6d 33 01
	00 00		 mov	 BYTE PTR [esi+78701], 0
  00019	5e		 pop	 esi

; 55   : }

  0001a	c3		 ret	 0
?EndScene@CStateManager@@QAEXXZ ENDP			; CStateManager::EndScene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?BeginScene@CStateManager@@QAE_NXZ
_TEXT	SEGMENT
_m4View$ = -196						; size = 64
_m4Proj$ = -132						; size = 64
_m4World$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?BeginScene@CStateManager@@QAE_NXZ PROC			; CStateManager::BeginScene, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 34   : 	m_bScene=true;
; 35   : 
; 36   : 	D3DXMATRIX m4Proj;
; 37   : 	D3DXMATRIX m4View;
; 38   : 	D3DXMATRIX m4World;
; 39   : 	GetTransform(D3DTS_WORLD, &m4World);

  00016	8d 45 bc	 lea	 eax, DWORD PTR _m4World$[ebp]
  00019	50		 push	 eax
  0001a	68 00 01 00 00	 push	 256			; 00000100H
  0001f	c6 86 6d 33 01
	00 01		 mov	 BYTE PTR [esi+78701], 1
  00026	e8 00 00 00 00	 call	 ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform

; 40   : 	GetTransform(D3DTS_PROJECTION, &m4Proj);

  0002b	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _m4Proj$[ebp]
  00031	8b ce		 mov	 ecx, esi
  00033	50		 push	 eax
  00034	6a 03		 push	 3
  00036	e8 00 00 00 00	 call	 ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform

; 41   : 	GetTransform(D3DTS_VIEW, &m4View);

  0003b	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _m4View$[ebp]
  00041	8b ce		 mov	 ecx, esi
  00043	50		 push	 eax
  00044	6a 02		 push	 2
  00046	e8 00 00 00 00	 call	 ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform

; 42   : 	SetTransform(D3DTS_WORLD, &m4World);

  0004b	8d 45 bc	 lea	 eax, DWORD PTR _m4World$[ebp]
  0004e	8b ce		 mov	 ecx, esi
  00050	50		 push	 eax
  00051	68 00 01 00 00	 push	 256			; 00000100H
  00056	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 43   : 	SetTransform(D3DTS_PROJECTION, &m4Proj);

  0005b	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _m4Proj$[ebp]
  00061	8b ce		 mov	 ecx, esi
  00063	50		 push	 eax
  00064	6a 03		 push	 3
  00066	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 44   : 	SetTransform(D3DTS_VIEW, &m4View);

  0006b	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _m4View$[ebp]
  00071	8b ce		 mov	 ecx, esi
  00073	50		 push	 eax
  00074	6a 02		 push	 2
  00076	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 45   : 
; 46   : 	if (FAILED(m_lpD3DDev->BeginScene()))

  0007b	8b 86 78 33 01
	00		 mov	 eax, DWORD PTR [esi+78712]
  00081	50		 push	 eax
  00082	8b 08		 mov	 ecx, DWORD PTR [eax]
  00084	ff 91 88 00 00
	00		 call	 DWORD PTR [ecx+136]

; 47   : 		return false;
; 48   : 	return true;
; 49   : }

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008d	85 c0		 test	 eax, eax
  0008f	5e		 pop	 esi
  00090	0f 99 c0	 setns	 al
  00093	33 cd		 xor	 ecx, ebp
  00095	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
?BeginScene@CStateManager@@QAE_NXZ ENDP			; CStateManager::BeginScene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?Restore@CStateManager@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?Restore@CStateManager@@QAEXXZ PROC			; CStateManager::Restore, COMDAT
; _this$ = ecx

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi

; 139  : 	int i, j;
; 140  : 
; 141  : 	m_bForce = true;

  0000c	33 ff		 xor	 edi, edi
  0000e	c6 86 6c 33 01
	00 01		 mov	 BYTE PTR [esi+78700], 1
  00015	8d 9e 78 66 00
	00		 lea	 ebx, DWORD PTR [esi+26232]
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@Restore:

; 142  : 
; 143  : 	for (i = 0; i < STATEMANAGER_MAX_RENDERSTATES; ++i)
; 144  : 		SetRenderState(D3DRENDERSTATETYPE(i), m_CurrentState.m_RenderStates[i]);

  00020	ff 33		 push	 DWORD PTR [ebx]
  00022	8b ce		 mov	 ecx, esi
  00024	57		 push	 edi
  00025	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
  0002a	47		 inc	 edi
  0002b	8d 5b 04	 lea	 ebx, DWORD PTR [ebx+4]
  0002e	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  00034	72 ea		 jb	 SHORT $LL4@Restore

; 145  : 
; 146  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  00036	8b c6		 mov	 eax, esi
  00038	33 db		 xor	 ebx, ebx
  0003a	8d b8 78 6a 00
	00		 lea	 edi, DWORD PTR [eax+27256]
$LL7@Restore:

; 147  : 		for (j = 0; j < STATEMANAGER_MAX_TEXTURESTATES; ++j)

  00040	33 f6		 xor	 esi, esi
$LL10@Restore:

; 148  : 			SetTextureStageState(i, D3DTEXTURESTAGESTATETYPE(j), m_CurrentState.m_TextureStates[i][j]);

  00042	ff 37		 push	 DWORD PTR [edi]
  00044	8b c8		 mov	 ecx, eax
  00046	56		 push	 esi
  00047	53		 push	 ebx
  00048	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00050	46		 inc	 esi
  00051	83 c7 04	 add	 edi, 4
  00054	81 fe 80 00 00
	00		 cmp	 esi, 128		; 00000080H
  0005a	72 e6		 jb	 SHORT $LL10@Restore

; 145  : 
; 146  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  0005c	43		 inc	 ebx
  0005d	83 fb 08	 cmp	 ebx, 8
  00060	72 de		 jb	 SHORT $LL7@Restore

; 149  : 
; 150  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  00062	8b f0		 mov	 esi, eax
  00064	33 ff		 xor	 edi, edi
  00066	8d 9e f8 80 00
	00		 lea	 ebx, DWORD PTR [esi+33016]
  0006c	0f 1f 40 00	 npad	 4
$LL13@Restore:

; 151  : 		SetTexture(i, m_CurrentState.m_Textures[i]);

  00070	ff 33		 push	 DWORD PTR [ebx]
  00072	8b ce		 mov	 ecx, esi
  00074	57		 push	 edi
  00075	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
  0007a	47		 inc	 edi
  0007b	8d 5b 04	 lea	 ebx, DWORD PTR [ebx+4]
  0007e	83 ff 08	 cmp	 edi, 8
  00081	72 ed		 jb	 SHORT $LL13@Restore

; 152  : 
; 153  : 	m_bForce = false;

  00083	5f		 pop	 edi
  00084	c6 86 6c 33 01
	00 00		 mov	 BYTE PTR [esi+78700], 0
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx

; 154  : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
?Restore@CStateManager@@QAEXXZ ENDP			; CStateManager::Restore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetAnisotropicFiltering@CStateManager@@QAEXXZ
_TEXT	SEGMENT
_d3dCaps$ = -216					; size = 212
__$ArrayPad$ = -4					; size = 4
?SetAnisotropicFiltering@CStateManager@@QAEXXZ PROC	; CStateManager::SetAnisotropicFiltering, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f9		 mov	 edi, ecx

; 414  :     D3DCAPS8 d3dCaps;
; 415  :     m_lpD3DDev->GetDeviceCaps(&d3dCaps);

  00018	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _d3dCaps$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 87 78 33 01
	00		 mov	 eax, DWORD PTR [edi+78712]
  00025	50		 push	 eax
  00026	8b 10		 mov	 edx, DWORD PTR [eax]
  00028	ff 52 1c	 call	 DWORD PTR [edx+28]

; 416  : 
; 417  :     if (d3dCaps.TextureFilterCaps & D3DPTFILTERCAPS_MAGFANISOTROPIC)

  0002b	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _d3dCaps$[ebp+64]

; 418  :     {
; 419  :         m_dwBestMagFilter = D3DTEXF_ANISOTROPIC;
; 420  :     }
; 421  :     else
; 422  :     {
; 423  :         m_dwBestMagFilter = D3DTEXF_LINEAR;
; 424  :     }
; 425  : 
; 426  :     if (d3dCaps.TextureFilterCaps & D3DPTFILTERCAPS_MINFANISOTROPIC)
; 427  :     {
; 428  :         m_dwBestMinFilter = D3DTEXF_ANISOTROPIC;
; 429  :     }
; 430  :     else
; 431  :     {
; 432  :         m_dwBestMinFilter = D3DTEXF_LINEAR;
; 433  :     }
; 434  : 
; 435  :     DWORD dwMaxAnisotropy = d3dCaps.MaxAnisotropy;
; 436  :     dwMaxAnisotropy = (dwMaxAnisotropy < 4) ? dwMaxAnisotropy : 4;

  00031	bb 04 00 00 00	 mov	 ebx, 4
  00036	8b c1		 mov	 eax, ecx
  00038	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  0003e	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00043	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00049	0d 00 00 00 08	 or	 eax, 134217728		; 08000000H
  0004e	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  00051	c1 e8 1a	 shr	 eax, 26			; 0000001aH
  00054	89 87 74 33 01
	00		 mov	 DWORD PTR [edi+78708], eax
  0005a	89 8f 70 33 01
	00		 mov	 DWORD PTR [edi+78704], ecx
  00060	39 5d 94	 cmp	 DWORD PTR _d3dCaps$[ebp+108], ebx
  00063	0f 42 5d 94	 cmovb	 ebx, DWORD PTR _d3dCaps$[ebp+108]
  00067	33 f6		 xor	 esi, esi
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@SetAnisotr:

; 437  : 
; 438  :     for (int i = 0; i < 8; ++i)
; 439  :     {
; 440  :         m_lpD3DDev->SetTextureStageState(i, D3DTSS_MAXANISOTROPY, dwMaxAnisotropy);

  00070	8b 87 78 33 01
	00		 mov	 eax, DWORD PTR [edi+78712]
  00076	53		 push	 ebx
  00077	6a 15		 push	 21			; 00000015H
  00079	56		 push	 esi
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	50		 push	 eax
  0007d	ff 91 fc 00 00
	00		 call	 DWORD PTR [ecx+252]
  00083	46		 inc	 esi
  00084	83 fe 08	 cmp	 esi, 8
  00087	7c e7		 jl	 SHORT $LL4@SetAnisotr

; 441  :     }
; 442  : 
; 443  :     m_lpD3DDev->SetRenderState(D3DRS_SOFTWAREVERTEXPROCESSING, FALSE);

  00089	8b 87 78 33 01
	00		 mov	 eax, DWORD PTR [edi+78712]
  0008f	6a 00		 push	 0
  00091	68 99 00 00 00	 push	 153			; 00000099H
  00096	50		 push	 eax
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	ff 91 c8 00 00
	00		 call	 DWORD PTR [ecx+200]

; 444  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	33 cd		 xor	 ecx, ebp
  000a6	5b		 pop	 ebx
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
?SetAnisotropicFiltering@CStateManager@@QAEXXZ ENDP	; CStateManager::SetAnisotropicFiltering
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ?SetDefaultState@CStateManager@@QAEXXZ
_TEXT	SEGMENT
_DefaultMat$ = -1672					; size = 68
_Identity$ = -1604					; size = 64
_av4Null$ = -1540					; size = 1536
__$ArrayPad$ = -4					; size = 4
?SetDefaultState@CStateManager@@QAEXXZ PROC		; CStateManager::SetDefaultState, COMDAT
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 06 00
	00		 sub	 esp, 1672		; 00000688H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 158  : 	SetAnisotropicFiltering(); //@natanek100

  00016	e8 00 00 00 00	 call	 ?SetAnisotropicFiltering@CStateManager@@QAEXXZ ; CStateManager::SetAnisotropicFiltering

; 159  : 
; 160  : 	m_CurrentState.ResetState();

  0001b	8d 8e 78 66 00
	00		 lea	 ecx, DWORD PTR [esi+26232]
  00021	e8 00 00 00 00	 call	 ?ResetState@CStateManagerState@@QAEXXZ ; CStateManagerState::ResetState

; 161  : 	m_CopyState.ResetState();

  00026	8d 8e ec cc 00
	00		 lea	 ecx, DWORD PTR [esi+52460]
  0002c	e8 00 00 00 00	 call	 ?ResetState@CStateManagerState@@QAEXXZ ; CStateManagerState::ResetState

; 162  : 	m_ChipState.ResetState();

  00031	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00034	e8 00 00 00 00	 call	 ?ResetState@CStateManagerState@@QAEXXZ ; CStateManagerState::ResetState

; 170  : 	SetTransform(D3DTS_WORLD, &Identity);

  00039	8d 85 bc f9 ff
	ff		 lea	 eax, DWORD PTR _Identity$[ebp]
  0003f	66 c7 86 6c 33
	01 00 01 00	 mov	 WORD PTR [esi+78700], 1
  00048	50		 push	 eax
  00049	68 00 01 00 00	 push	 256			; 00000100H
  0004e	8b ce		 mov	 ecx, esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00050	c7 85 f4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+56], 0
  0005a	c7 85 f0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+52], 0
  00064	c7 85 ec f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+48], 0
  0006e	c7 85 e8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+44], 0
  00078	c7 85 e0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+36], 0
  00082	c7 85 dc f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+32], 0
  0008c	c7 85 d8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+28], 0
  00096	c7 85 d4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+24], 0
  000a0	c7 85 cc f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+16], 0
  000aa	c7 85 c8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+12], 0
  000b4	c7 85 c4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+8], 0
  000be	c7 85 c0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+4], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000c8	c7 85 f8 f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp+60], 1065353216 ; 3f800000H
  000d2	c7 85 e4 f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp+40], 1065353216 ; 3f800000H
  000dc	c7 85 d0 f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp+20], 1065353216 ; 3f800000H
  000e6	c7 85 bc f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp

; 170  : 	SetTransform(D3DTS_WORLD, &Identity);

  000f0	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 171  : 	SetTransform(D3DTS_VIEW, &Identity);

  000f5	8d 85 bc f9 ff
	ff		 lea	 eax, DWORD PTR _Identity$[ebp]
  000fb	8b ce		 mov	 ecx, esi
  000fd	50		 push	 eax
  000fe	6a 02		 push	 2
  00100	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 172  : 	SetTransform(D3DTS_PROJECTION, &Identity);

  00105	8d 85 bc f9 ff
	ff		 lea	 eax, DWORD PTR _Identity$[ebp]
  0010b	8b ce		 mov	 ecx, esi
  0010d	50		 push	 eax
  0010e	6a 03		 push	 3
  00110	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 173  : 
; 174  : 	D3DMATERIAL8 DefaultMat;
; 175  : 	ZeroMemory(&DefaultMat, sizeof(D3DMATERIAL8));
; 176  : 
; 177  : 	DefaultMat.Diffuse.r = 1.0f;

  00115	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000

; 178  : 	DefaultMat.Diffuse.g = 1.0f;
; 179  : 	DefaultMat.Diffuse.b = 1.0f;
; 180  : 	DefaultMat.Diffuse.a = 1.0f;
; 181  : 	DefaultMat.Ambient.r = 1.0f;
; 182  : 	DefaultMat.Ambient.g = 1.0f;
; 183  : 	DefaultMat.Ambient.b = 1.0f;
; 184  : 	DefaultMat.Ambient.a = 1.0f;
; 185  : 	DefaultMat.Emissive.r = 0.0f;
; 186  : 	DefaultMat.Emissive.g = 0.0f;
; 187  : 	DefaultMat.Emissive.b = 0.0f;
; 188  : 	DefaultMat.Emissive.a = 0.0f;
; 189  : 	DefaultMat.Specular.r = 0.0f;
; 190  : 	DefaultMat.Specular.g = 0.0f;
; 191  : 	DefaultMat.Specular.b = 0.0f;
; 192  : 	DefaultMat.Specular.a = 0.0f;
; 193  : 	DefaultMat.Power = 0.0f;
; 194  : 
; 195  : 	SetMaterial(&DefaultMat);

  0011c	8d 85 78 f9 ff
	ff		 lea	 eax, DWORD PTR _DefaultMat$[ebp]
  00122	c7 85 b8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _DefaultMat$[ebp+64], 0
  0012c	50		 push	 eax
  0012d	0f 11 85 78 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp], xmm0
  00134	8b ce		 mov	 ecx, esi
  00136	0f 11 85 88 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp+16], xmm0
  0013d	0f 57 c0	 xorps	 xmm0, xmm0
  00140	0f 11 85 a8 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp+48], xmm0
  00147	0f 11 85 98 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp+32], xmm0
  0014e	e8 00 00 00 00	 call	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial

; 196  : 
; 197  : 	SetRenderState(D3DRS_DIFFUSEMATERIALSOURCE, D3DMCS_MATERIAL);

  00153	6a 00		 push	 0
  00155	68 91 00 00 00	 push	 145			; 00000091H
  0015a	8b ce		 mov	 ecx, esi
  0015c	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 198  : 	SetRenderState(D3DRS_SPECULARMATERIALSOURCE, D3DMCS_MATERIAL);

  00161	6a 00		 push	 0
  00163	68 92 00 00 00	 push	 146			; 00000092H
  00168	8b ce		 mov	 ecx, esi
  0016a	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 199  : 	SetRenderState(D3DRS_AMBIENTMATERIALSOURCE, D3DMCS_MATERIAL);

  0016f	6a 00		 push	 0
  00171	68 93 00 00 00	 push	 147			; 00000093H
  00176	8b ce		 mov	 ecx, esi
  00178	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 200  : 	SetRenderState(D3DRS_EMISSIVEMATERIALSOURCE, D3DMCS_MATERIAL);

  0017d	6a 00		 push	 0
  0017f	68 94 00 00 00	 push	 148			; 00000094H
  00184	8b ce		 mov	 ecx, esi
  00186	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 201  : 
; 202  : 	SetRenderState(D3DRS_LINEPATTERN, 0xFFFFFFFF);

  0018b	6a ff		 push	 -1
  0018d	6a 0a		 push	 10			; 0000000aH
  0018f	8b ce		 mov	 ecx, esi
  00191	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 203  : 	SetRenderState(D3DRS_LASTPIXEL, FALSE);

  00196	6a 00		 push	 0
  00198	6a 10		 push	 16			; 00000010H
  0019a	8b ce		 mov	 ecx, esi
  0019c	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 204  : 	SetRenderState(D3DRS_ALPHAREF, 1);

  001a1	6a 01		 push	 1
  001a3	6a 18		 push	 24			; 00000018H
  001a5	8b ce		 mov	 ecx, esi
  001a7	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 205  : 	SetRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATEREQUAL);

  001ac	6a 07		 push	 7
  001ae	6a 19		 push	 25			; 00000019H
  001b0	8b ce		 mov	 ecx, esi
  001b2	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 206  : 	SetRenderState(D3DRS_ZVISIBLE, FALSE);

  001b7	6a 00		 push	 0
  001b9	6a 1e		 push	 30			; 0000001eH
  001bb	8b ce		 mov	 ecx, esi
  001bd	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 207  : 	SetRenderState(D3DRS_FOGSTART, 0);

  001c2	6a 00		 push	 0
  001c4	6a 24		 push	 36			; 00000024H
  001c6	8b ce		 mov	 ecx, esi
  001c8	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 208  : 	SetRenderState(D3DRS_FOGEND, 0);

  001cd	6a 00		 push	 0
  001cf	6a 25		 push	 37			; 00000025H
  001d1	8b ce		 mov	 ecx, esi
  001d3	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 209  : 	SetRenderState(D3DRS_FOGDENSITY, 0);

  001d8	6a 00		 push	 0
  001da	6a 26		 push	 38			; 00000026H
  001dc	8b ce		 mov	 ecx, esi
  001de	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 210  : 	SetRenderState(D3DRS_EDGEANTIALIAS, FALSE);

  001e3	6a 00		 push	 0
  001e5	6a 28		 push	 40			; 00000028H
  001e7	8b ce		 mov	 ecx, esi
  001e9	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 211  : 	SetRenderState(D3DRS_ZBIAS, 0);

  001ee	6a 00		 push	 0
  001f0	6a 2f		 push	 47			; 0000002fH
  001f2	8b ce		 mov	 ecx, esi
  001f4	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 212  : 	SetRenderState(D3DRS_STENCILWRITEMASK, 0xFFFFFFFF);

  001f9	6a ff		 push	 -1
  001fb	6a 3b		 push	 59			; 0000003bH
  001fd	8b ce		 mov	 ecx, esi
  001ff	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 213  : 	SetRenderState(D3DRS_AMBIENT, 0x00000000);

  00204	6a 00		 push	 0
  00206	68 8b 00 00 00	 push	 139			; 0000008bH
  0020b	8b ce		 mov	 ecx, esi
  0020d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 214  : 	SetRenderState(D3DRS_LOCALVIEWER, FALSE);

  00212	6a 00		 push	 0
  00214	68 8e 00 00 00	 push	 142			; 0000008eH
  00219	8b ce		 mov	 ecx, esi
  0021b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 215  : 	SetRenderState(D3DRS_NORMALIZENORMALS, FALSE);

  00220	6a 00		 push	 0
  00222	68 8f 00 00 00	 push	 143			; 0000008fH
  00227	8b ce		 mov	 ecx, esi
  00229	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 216  : 	SetRenderState(D3DRS_VERTEXBLEND, D3DVBF_DISABLE);

  0022e	6a 00		 push	 0
  00230	68 97 00 00 00	 push	 151			; 00000097H
  00235	8b ce		 mov	 ecx, esi
  00237	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 217  : 	SetRenderState(D3DRS_CLIPPLANEENABLE, 0);

  0023c	6a 00		 push	 0
  0023e	68 98 00 00 00	 push	 152			; 00000098H
  00243	8b ce		 mov	 ecx, esi
  00245	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 218  : 	SetRenderState(D3DRS_SOFTWAREVERTEXPROCESSING, FALSE);

  0024a	6a 00		 push	 0
  0024c	68 99 00 00 00	 push	 153			; 00000099H
  00251	8b ce		 mov	 ecx, esi
  00253	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 219  : 	SetRenderState(D3DRS_MULTISAMPLEANTIALIAS, FALSE);

  00258	6a 00		 push	 0
  0025a	68 a1 00 00 00	 push	 161			; 000000a1H
  0025f	8b ce		 mov	 ecx, esi
  00261	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 220  : 	SetRenderState(D3DRS_MULTISAMPLEMASK, 0xFFFFFFFF);

  00266	6a ff		 push	 -1
  00268	68 a2 00 00 00	 push	 162			; 000000a2H
  0026d	8b ce		 mov	 ecx, esi
  0026f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 221  : 	SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE, FALSE);

  00274	6a 00		 push	 0
  00276	68 a7 00 00 00	 push	 167			; 000000a7H
  0027b	8b ce		 mov	 ecx, esi
  0027d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 222  : 	SetRenderState(D3DRS_COLORWRITEENABLE, 0xFFFFFFFF);

  00282	6a ff		 push	 -1
  00284	68 a8 00 00 00	 push	 168			; 000000a8H
  00289	8b ce		 mov	 ecx, esi
  0028b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 223  : 	SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);

  00290	6a 03		 push	 3
  00292	6a 08		 push	 8
  00294	8b ce		 mov	 ecx, esi
  00296	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 224  : 	SetRenderState(D3DRS_SHADEMODE, D3DSHADE_GOURAUD);

  0029b	6a 02		 push	 2
  0029d	6a 09		 push	 9
  0029f	8b ce		 mov	 ecx, esi
  002a1	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 225  : 	SetRenderState(D3DRS_CULLMODE, D3DCULL_CW);

  002a6	6a 02		 push	 2
  002a8	6a 16		 push	 22			; 00000016H
  002aa	8b ce		 mov	 ecx, esi
  002ac	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 226  : 	SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

  002b1	6a 00		 push	 0
  002b3	6a 1b		 push	 27			; 0000001bH
  002b5	8b ce		 mov	 ecx, esi
  002b7	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 227  : 	SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);

  002bc	6a 01		 push	 1
  002be	68 ab 00 00 00	 push	 171			; 000000abH
  002c3	8b ce		 mov	 ecx, esi
  002c5	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 228  : 	SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  002ca	6a 05		 push	 5
  002cc	6a 13		 push	 19			; 00000013H
  002ce	8b ce		 mov	 ecx, esi
  002d0	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 229  : 	SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  002d5	6a 06		 push	 6
  002d7	6a 14		 push	 20			; 00000014H
  002d9	8b ce		 mov	 ecx, esi
  002db	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 230  : 	SetRenderState(D3DRS_FOGENABLE, FALSE);

  002e0	6a 00		 push	 0
  002e2	6a 1c		 push	 28			; 0000001cH
  002e4	8b ce		 mov	 ecx, esi
  002e6	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 231  : 	SetRenderState(D3DRS_FOGCOLOR, 0xFF000000);

  002eb	68 00 00 00 ff	 push	 -16777216		; ff000000H
  002f0	6a 22		 push	 34			; 00000022H
  002f2	8b ce		 mov	 ecx, esi
  002f4	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 232  : 	SetRenderState(D3DRS_FOGTABLEMODE, D3DFOG_NONE);

  002f9	6a 00		 push	 0
  002fb	6a 23		 push	 35			; 00000023H
  002fd	8b ce		 mov	 ecx, esi
  002ff	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 233  : 	SetRenderState(D3DRS_FOGVERTEXMODE, D3DFOG_LINEAR);

  00304	6a 03		 push	 3
  00306	68 8c 00 00 00	 push	 140			; 0000008cH
  0030b	8b ce		 mov	 ecx, esi
  0030d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 234  : 	SetRenderState(D3DRS_RANGEFOGENABLE, FALSE);

  00312	6a 00		 push	 0
  00314	6a 30		 push	 48			; 00000030H
  00316	8b ce		 mov	 ecx, esi
  00318	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 235  : 	SetRenderState(D3DRS_ZENABLE, TRUE);

  0031d	6a 01		 push	 1
  0031f	6a 07		 push	 7
  00321	8b ce		 mov	 ecx, esi
  00323	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 236  : 	SetRenderState(D3DRS_ZFUNC, D3DCMP_LESSEQUAL);

  00328	6a 04		 push	 4
  0032a	6a 17		 push	 23			; 00000017H
  0032c	8b ce		 mov	 ecx, esi
  0032e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 237  : 	SetRenderState(D3DRS_ZWRITEENABLE, TRUE);

  00333	6a 01		 push	 1
  00335	6a 0e		 push	 14			; 0000000eH
  00337	8b ce		 mov	 ecx, esi
  00339	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 238  : 	SetRenderState(D3DRS_DITHERENABLE, TRUE);

  0033e	6a 01		 push	 1
  00340	6a 1a		 push	 26			; 0000001aH
  00342	8b ce		 mov	 ecx, esi
  00344	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 239  : 	SetRenderState(D3DRS_STENCILENABLE, FALSE);

  00349	6a 00		 push	 0
  0034b	6a 34		 push	 52			; 00000034H
  0034d	8b ce		 mov	 ecx, esi
  0034f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 240  : 	SetRenderState(D3DRS_ALPHATESTENABLE, FALSE);

  00354	6a 00		 push	 0
  00356	6a 0f		 push	 15			; 0000000fH
  00358	8b ce		 mov	 ecx, esi
  0035a	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 241  : 	SetRenderState(D3DRS_CLIPPING, TRUE);

  0035f	6a 01		 push	 1
  00361	68 88 00 00 00	 push	 136			; 00000088H
  00366	8b ce		 mov	 ecx, esi
  00368	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 242  : 	SetRenderState(D3DRS_LIGHTING, FALSE);

  0036d	6a 00		 push	 0
  0036f	68 89 00 00 00	 push	 137			; 00000089H
  00374	8b ce		 mov	 ecx, esi
  00376	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 243  : 	SetRenderState(D3DRS_SPECULARENABLE, FALSE);

  0037b	6a 00		 push	 0
  0037d	6a 1d		 push	 29			; 0000001dH
  0037f	8b ce		 mov	 ecx, esi
  00381	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 244  : 	SetRenderState(D3DRS_COLORVERTEX, FALSE);

  00386	6a 00		 push	 0
  00388	68 8d 00 00 00	 push	 141			; 0000008dH
  0038d	8b ce		 mov	 ecx, esi
  0038f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 245  : 	SetRenderState(D3DRS_WRAP0, 0);

  00394	6a 00		 push	 0
  00396	68 80 00 00 00	 push	 128			; 00000080H
  0039b	8b ce		 mov	 ecx, esi
  0039d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 246  : 	SetRenderState(D3DRS_WRAP1, 0);

  003a2	6a 00		 push	 0
  003a4	68 81 00 00 00	 push	 129			; 00000081H
  003a9	8b ce		 mov	 ecx, esi
  003ab	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 247  : 	SetRenderState(D3DRS_WRAP2, 0);

  003b0	6a 00		 push	 0
  003b2	68 82 00 00 00	 push	 130			; 00000082H
  003b7	8b ce		 mov	 ecx, esi
  003b9	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 248  : 	SetRenderState(D3DRS_WRAP3, 0);

  003be	6a 00		 push	 0
  003c0	68 83 00 00 00	 push	 131			; 00000083H
  003c5	8b ce		 mov	 ecx, esi
  003c7	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 249  : 	SetRenderState(D3DRS_WRAP4, 0);

  003cc	6a 00		 push	 0
  003ce	68 84 00 00 00	 push	 132			; 00000084H
  003d3	8b ce		 mov	 ecx, esi
  003d5	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 250  : 	SetRenderState(D3DRS_WRAP5, 0);

  003da	6a 00		 push	 0
  003dc	68 85 00 00 00	 push	 133			; 00000085H
  003e1	8b ce		 mov	 ecx, esi
  003e3	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 251  : 	SetRenderState(D3DRS_WRAP6, 0);

  003e8	6a 00		 push	 0
  003ea	68 86 00 00 00	 push	 134			; 00000086H
  003ef	8b ce		 mov	 ecx, esi
  003f1	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 252  : 	SetRenderState(D3DRS_WRAP7, 0);

  003f6	6a 00		 push	 0
  003f8	68 87 00 00 00	 push	 135			; 00000087H
  003fd	8b ce		 mov	 ecx, esi
  003ff	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 253  : 
; 254  : 	SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

  00404	6a 04		 push	 4
  00406	6a 01		 push	 1
  00408	6a 00		 push	 0
  0040a	8b ce		 mov	 ecx, esi
  0040c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 255  : 	SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00411	6a 02		 push	 2
  00413	6a 02		 push	 2
  00415	6a 00		 push	 0
  00417	8b ce		 mov	 ecx, esi
  00419	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 256  : 	SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_CURRENT);

  0041e	6a 01		 push	 1
  00420	6a 03		 push	 3
  00422	6a 00		 push	 0
  00424	8b ce		 mov	 ecx, esi
  00426	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 257  : 	SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  0042b	6a 02		 push	 2
  0042d	6a 05		 push	 5
  0042f	6a 00		 push	 0
  00431	8b ce		 mov	 ecx, esi
  00433	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 258  : 	SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_CURRENT);

  00438	6a 01		 push	 1
  0043a	6a 06		 push	 6
  0043c	6a 00		 push	 0
  0043e	8b ce		 mov	 ecx, esi
  00440	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 259  : 	SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

  00445	6a 02		 push	 2
  00447	6a 04		 push	 4
  00449	6a 00		 push	 0
  0044b	8b ce		 mov	 ecx, esi
  0044d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 260  : 
; 261  : 	SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);

  00452	6a 01		 push	 1
  00454	6a 01		 push	 1
  00456	6a 01		 push	 1
  00458	8b ce		 mov	 ecx, esi
  0045a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 262  : 	SetTextureStageState(1, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  0045f	6a 02		 push	 2
  00461	6a 02		 push	 2
  00463	6a 01		 push	 1
  00465	8b ce		 mov	 ecx, esi
  00467	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 263  : 	SetTextureStageState(1, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  0046c	6a 00		 push	 0
  0046e	6a 03		 push	 3
  00470	6a 01		 push	 1
  00472	8b ce		 mov	 ecx, esi
  00474	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 264  : 	SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00479	6a 01		 push	 1
  0047b	6a 04		 push	 4
  0047d	6a 01		 push	 1
  0047f	8b ce		 mov	 ecx, esi
  00481	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 265  : 	SetTextureStageState(1, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00486	6a 02		 push	 2
  00488	6a 05		 push	 5
  0048a	6a 01		 push	 1
  0048c	8b ce		 mov	 ecx, esi
  0048e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 266  : 	SetTextureStageState(1, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  00493	6a 00		 push	 0
  00495	6a 06		 push	 6
  00497	6a 01		 push	 1
  00499	8b ce		 mov	 ecx, esi
  0049b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 267  : 
; 268  : 	SetTextureStageState(2, D3DTSS_COLOROP, D3DTOP_DISABLE);

  004a0	6a 01		 push	 1
  004a2	6a 01		 push	 1
  004a4	6a 02		 push	 2
  004a6	8b ce		 mov	 ecx, esi
  004a8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 269  : 	SetTextureStageState(2, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  004ad	6a 02		 push	 2
  004af	6a 02		 push	 2
  004b1	6a 02		 push	 2
  004b3	8b ce		 mov	 ecx, esi
  004b5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 270  : 	SetTextureStageState(2, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  004ba	6a 00		 push	 0
  004bc	6a 03		 push	 3
  004be	6a 02		 push	 2
  004c0	8b ce		 mov	 ecx, esi
  004c2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 271  : 	SetTextureStageState(2, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  004c7	6a 01		 push	 1
  004c9	6a 04		 push	 4
  004cb	6a 02		 push	 2
  004cd	8b ce		 mov	 ecx, esi
  004cf	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 272  : 	SetTextureStageState(2, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  004d4	6a 02		 push	 2
  004d6	6a 05		 push	 5
  004d8	6a 02		 push	 2
  004da	8b ce		 mov	 ecx, esi
  004dc	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 273  : 	SetTextureStageState(2, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  004e1	6a 00		 push	 0
  004e3	6a 06		 push	 6
  004e5	6a 02		 push	 2
  004e7	8b ce		 mov	 ecx, esi
  004e9	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 274  : 
; 275  : 	SetTextureStageState(3, D3DTSS_COLOROP, D3DTOP_DISABLE);

  004ee	6a 01		 push	 1
  004f0	6a 01		 push	 1
  004f2	6a 03		 push	 3
  004f4	8b ce		 mov	 ecx, esi
  004f6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 276  : 	SetTextureStageState(3, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  004fb	6a 02		 push	 2
  004fd	6a 02		 push	 2
  004ff	6a 03		 push	 3
  00501	8b ce		 mov	 ecx, esi
  00503	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 277  : 	SetTextureStageState(3, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  00508	6a 00		 push	 0
  0050a	6a 03		 push	 3
  0050c	6a 03		 push	 3
  0050e	8b ce		 mov	 ecx, esi
  00510	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 278  : 	SetTextureStageState(3, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00515	6a 01		 push	 1
  00517	6a 04		 push	 4
  00519	6a 03		 push	 3
  0051b	8b ce		 mov	 ecx, esi
  0051d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 279  : 	SetTextureStageState(3, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00522	6a 02		 push	 2
  00524	6a 05		 push	 5
  00526	6a 03		 push	 3
  00528	8b ce		 mov	 ecx, esi
  0052a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 280  : 	SetTextureStageState(3, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  0052f	6a 00		 push	 0
  00531	6a 06		 push	 6
  00533	6a 03		 push	 3
  00535	8b ce		 mov	 ecx, esi
  00537	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 281  : 
; 282  : 	SetTextureStageState(4, D3DTSS_COLOROP, D3DTOP_DISABLE);

  0053c	6a 01		 push	 1
  0053e	6a 01		 push	 1
  00540	6a 04		 push	 4
  00542	8b ce		 mov	 ecx, esi
  00544	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 283  : 	SetTextureStageState(4, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00549	6a 02		 push	 2
  0054b	6a 02		 push	 2
  0054d	6a 04		 push	 4
  0054f	8b ce		 mov	 ecx, esi
  00551	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 284  : 	SetTextureStageState(4, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  00556	6a 00		 push	 0
  00558	6a 03		 push	 3
  0055a	6a 04		 push	 4
  0055c	8b ce		 mov	 ecx, esi
  0055e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 285  : 	SetTextureStageState(4, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00563	6a 01		 push	 1
  00565	6a 04		 push	 4
  00567	6a 04		 push	 4
  00569	8b ce		 mov	 ecx, esi
  0056b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 286  : 	SetTextureStageState(4, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00570	6a 02		 push	 2
  00572	6a 05		 push	 5
  00574	6a 04		 push	 4
  00576	8b ce		 mov	 ecx, esi
  00578	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 287  : 	SetTextureStageState(4, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  0057d	6a 00		 push	 0
  0057f	6a 06		 push	 6
  00581	6a 04		 push	 4
  00583	8b ce		 mov	 ecx, esi
  00585	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 288  : 
; 289  : 	SetTextureStageState(5, D3DTSS_COLOROP, D3DTOP_DISABLE);

  0058a	6a 01		 push	 1
  0058c	6a 01		 push	 1
  0058e	6a 05		 push	 5
  00590	8b ce		 mov	 ecx, esi
  00592	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 290  : 	SetTextureStageState(5, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00597	6a 02		 push	 2
  00599	6a 02		 push	 2
  0059b	6a 05		 push	 5
  0059d	8b ce		 mov	 ecx, esi
  0059f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 291  : 	SetTextureStageState(5, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  005a4	6a 00		 push	 0
  005a6	6a 03		 push	 3
  005a8	6a 05		 push	 5
  005aa	8b ce		 mov	 ecx, esi
  005ac	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 292  : 	SetTextureStageState(5, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  005b1	6a 01		 push	 1
  005b3	6a 04		 push	 4
  005b5	6a 05		 push	 5
  005b7	8b ce		 mov	 ecx, esi
  005b9	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 293  : 	SetTextureStageState(5, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  005be	6a 02		 push	 2
  005c0	6a 05		 push	 5
  005c2	6a 05		 push	 5
  005c4	8b ce		 mov	 ecx, esi
  005c6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 294  : 	SetTextureStageState(5, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  005cb	6a 00		 push	 0
  005cd	6a 06		 push	 6
  005cf	6a 05		 push	 5
  005d1	8b ce		 mov	 ecx, esi
  005d3	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 295  : 
; 296  : 	SetTextureStageState(6, D3DTSS_COLOROP, D3DTOP_DISABLE);

  005d8	6a 01		 push	 1
  005da	6a 01		 push	 1
  005dc	6a 06		 push	 6
  005de	8b ce		 mov	 ecx, esi
  005e0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 297  : 	SetTextureStageState(6, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  005e5	6a 02		 push	 2
  005e7	6a 02		 push	 2
  005e9	6a 06		 push	 6
  005eb	8b ce		 mov	 ecx, esi
  005ed	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 298  : 	SetTextureStageState(6, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  005f2	6a 00		 push	 0
  005f4	6a 03		 push	 3
  005f6	6a 06		 push	 6
  005f8	8b ce		 mov	 ecx, esi
  005fa	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 299  : 	SetTextureStageState(6, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  005ff	6a 01		 push	 1
  00601	6a 04		 push	 4
  00603	6a 06		 push	 6
  00605	8b ce		 mov	 ecx, esi
  00607	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 300  : 	SetTextureStageState(6, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  0060c	6a 02		 push	 2
  0060e	6a 05		 push	 5
  00610	6a 06		 push	 6
  00612	8b ce		 mov	 ecx, esi
  00614	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 301  : 	SetTextureStageState(6, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  00619	6a 00		 push	 0
  0061b	6a 06		 push	 6
  0061d	6a 06		 push	 6
  0061f	8b ce		 mov	 ecx, esi
  00621	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 302  : 
; 303  : 	SetTextureStageState(7, D3DTSS_COLOROP, D3DTOP_DISABLE);

  00626	6a 01		 push	 1
  00628	6a 01		 push	 1
  0062a	6a 07		 push	 7
  0062c	8b ce		 mov	 ecx, esi
  0062e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 304  : 	SetTextureStageState(7, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00633	6a 02		 push	 2
  00635	6a 02		 push	 2
  00637	6a 07		 push	 7
  00639	8b ce		 mov	 ecx, esi
  0063b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 305  : 	SetTextureStageState(7, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  00640	6a 00		 push	 0
  00642	6a 03		 push	 3
  00644	6a 07		 push	 7
  00646	8b ce		 mov	 ecx, esi
  00648	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 306  : 	SetTextureStageState(7, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  0064d	6a 01		 push	 1
  0064f	6a 04		 push	 4
  00651	6a 07		 push	 7
  00653	8b ce		 mov	 ecx, esi
  00655	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 307  : 	SetTextureStageState(7, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  0065a	6a 02		 push	 2
  0065c	6a 05		 push	 5
  0065e	6a 07		 push	 7
  00660	8b ce		 mov	 ecx, esi
  00662	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 308  : 	SetTextureStageState(7, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  00667	6a 00		 push	 0
  00669	6a 06		 push	 6
  0066b	6a 07		 push	 7
  0066d	8b ce		 mov	 ecx, esi
  0066f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 309  : 
; 310  : 	SetTextureStageState(0, D3DTSS_TEXCOORDINDEX, 0);

  00674	6a 00		 push	 0
  00676	6a 0b		 push	 11			; 0000000bH
  00678	6a 00		 push	 0
  0067a	8b ce		 mov	 ecx, esi
  0067c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 311  : 	SetTextureStageState(1, D3DTSS_TEXCOORDINDEX, 1);

  00681	6a 01		 push	 1
  00683	6a 0b		 push	 11			; 0000000bH
  00685	6a 01		 push	 1
  00687	8b ce		 mov	 ecx, esi
  00689	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 312  : 	SetTextureStageState(2, D3DTSS_TEXCOORDINDEX, 2);

  0068e	6a 02		 push	 2
  00690	6a 0b		 push	 11			; 0000000bH
  00692	6a 02		 push	 2
  00694	8b ce		 mov	 ecx, esi
  00696	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 313  : 	SetTextureStageState(3, D3DTSS_TEXCOORDINDEX, 3);

  0069b	6a 03		 push	 3
  0069d	6a 0b		 push	 11			; 0000000bH
  0069f	6a 03		 push	 3
  006a1	8b ce		 mov	 ecx, esi
  006a3	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 314  : 	SetTextureStageState(4, D3DTSS_TEXCOORDINDEX, 4);

  006a8	6a 04		 push	 4
  006aa	6a 0b		 push	 11			; 0000000bH
  006ac	6a 04		 push	 4
  006ae	8b ce		 mov	 ecx, esi
  006b0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 315  : 	SetTextureStageState(5, D3DTSS_TEXCOORDINDEX, 5);

  006b5	6a 05		 push	 5
  006b7	6a 0b		 push	 11			; 0000000bH
  006b9	6a 05		 push	 5
  006bb	8b ce		 mov	 ecx, esi
  006bd	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 316  : 	SetTextureStageState(6, D3DTSS_TEXCOORDINDEX, 6);

  006c2	6a 06		 push	 6
  006c4	6a 0b		 push	 11			; 0000000bH
  006c6	6a 06		 push	 6
  006c8	8b ce		 mov	 ecx, esi
  006ca	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 317  : 	SetTextureStageState(7, D3DTSS_TEXCOORDINDEX, 7);

  006cf	6a 07		 push	 7
  006d1	6a 0b		 push	 11			; 0000000bH
  006d3	6a 07		 push	 7
  006d5	8b ce		 mov	 ecx, esi
  006d7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 318  : 
; 319  : 	SetTextureStageState(0, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  006dc	6a 02		 push	 2
  006de	6a 11		 push	 17			; 00000011H
  006e0	6a 00		 push	 0
  006e2	8b ce		 mov	 ecx, esi
  006e4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 320  : 	SetTextureStageState(0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  006e9	6a 02		 push	 2
  006eb	6a 10		 push	 16			; 00000010H
  006ed	6a 00		 push	 0
  006ef	8b ce		 mov	 ecx, esi
  006f1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 321  : 	SetTextureStageState(0, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  006f6	6a 02		 push	 2
  006f8	6a 12		 push	 18			; 00000012H
  006fa	6a 00		 push	 0
  006fc	8b ce		 mov	 ecx, esi
  006fe	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 322  : 
; 323  : 	SetTextureStageState(1, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  00703	6a 02		 push	 2
  00705	6a 11		 push	 17			; 00000011H
  00707	6a 01		 push	 1
  00709	8b ce		 mov	 ecx, esi
  0070b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 324  : 	SetTextureStageState(1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  00710	6a 02		 push	 2
  00712	6a 10		 push	 16			; 00000010H
  00714	6a 01		 push	 1
  00716	8b ce		 mov	 ecx, esi
  00718	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 325  : 	SetTextureStageState(1, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  0071d	6a 02		 push	 2
  0071f	6a 12		 push	 18			; 00000012H
  00721	6a 01		 push	 1
  00723	8b ce		 mov	 ecx, esi
  00725	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 326  : 
; 327  : 	SetTextureStageState(2, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  0072a	6a 02		 push	 2
  0072c	6a 11		 push	 17			; 00000011H
  0072e	6a 02		 push	 2
  00730	8b ce		 mov	 ecx, esi
  00732	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 328  : 	SetTextureStageState(2, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  00737	6a 02		 push	 2
  00739	6a 10		 push	 16			; 00000010H
  0073b	6a 02		 push	 2
  0073d	8b ce		 mov	 ecx, esi
  0073f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 329  : 	SetTextureStageState(2, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  00744	6a 02		 push	 2
  00746	6a 12		 push	 18			; 00000012H
  00748	6a 02		 push	 2
  0074a	8b ce		 mov	 ecx, esi
  0074c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 330  : 
; 331  : 	SetTextureStageState(3, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  00751	6a 02		 push	 2
  00753	6a 11		 push	 17			; 00000011H
  00755	6a 03		 push	 3
  00757	8b ce		 mov	 ecx, esi
  00759	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 332  : 	SetTextureStageState(3, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  0075e	6a 02		 push	 2
  00760	6a 10		 push	 16			; 00000010H
  00762	6a 03		 push	 3
  00764	8b ce		 mov	 ecx, esi
  00766	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 333  : 	SetTextureStageState(3, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  0076b	6a 02		 push	 2
  0076d	6a 12		 push	 18			; 00000012H
  0076f	6a 03		 push	 3
  00771	8b ce		 mov	 ecx, esi
  00773	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 334  : 
; 335  : 	SetTextureStageState(4, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  00778	6a 02		 push	 2
  0077a	6a 11		 push	 17			; 00000011H
  0077c	6a 04		 push	 4
  0077e	8b ce		 mov	 ecx, esi
  00780	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 336  : 	SetTextureStageState(4, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  00785	6a 02		 push	 2
  00787	6a 10		 push	 16			; 00000010H
  00789	6a 04		 push	 4
  0078b	8b ce		 mov	 ecx, esi
  0078d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 337  : 	SetTextureStageState(4, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  00792	6a 02		 push	 2
  00794	6a 12		 push	 18			; 00000012H
  00796	6a 04		 push	 4
  00798	8b ce		 mov	 ecx, esi
  0079a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 338  : 
; 339  : 	SetTextureStageState(5, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  0079f	6a 02		 push	 2
  007a1	6a 11		 push	 17			; 00000011H
  007a3	6a 05		 push	 5
  007a5	8b ce		 mov	 ecx, esi
  007a7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 340  : 	SetTextureStageState(5, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  007ac	6a 02		 push	 2
  007ae	6a 10		 push	 16			; 00000010H
  007b0	6a 05		 push	 5
  007b2	8b ce		 mov	 ecx, esi
  007b4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 341  : 	SetTextureStageState(5, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  007b9	6a 02		 push	 2
  007bb	6a 12		 push	 18			; 00000012H
  007bd	6a 05		 push	 5
  007bf	8b ce		 mov	 ecx, esi
  007c1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 342  : 
; 343  : 	SetTextureStageState(6, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  007c6	6a 02		 push	 2
  007c8	6a 11		 push	 17			; 00000011H
  007ca	6a 06		 push	 6
  007cc	8b ce		 mov	 ecx, esi
  007ce	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 344  : 	SetTextureStageState(6, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  007d3	6a 02		 push	 2
  007d5	6a 10		 push	 16			; 00000010H
  007d7	6a 06		 push	 6
  007d9	8b ce		 mov	 ecx, esi
  007db	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 345  : 	SetTextureStageState(6, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  007e0	6a 02		 push	 2
  007e2	6a 12		 push	 18			; 00000012H
  007e4	6a 06		 push	 6
  007e6	8b ce		 mov	 ecx, esi
  007e8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 346  : 
; 347  : 	SetTextureStageState(7, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  007ed	6a 02		 push	 2
  007ef	6a 11		 push	 17			; 00000011H
  007f1	6a 07		 push	 7
  007f3	8b ce		 mov	 ecx, esi
  007f5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 348  : 	SetTextureStageState(7, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  007fa	6a 02		 push	 2
  007fc	6a 10		 push	 16			; 00000010H
  007fe	6a 07		 push	 7
  00800	8b ce		 mov	 ecx, esi
  00802	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 349  : 	SetTextureStageState(7, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  00807	6a 02		 push	 2
  00809	6a 12		 push	 18			; 00000012H
  0080b	6a 07		 push	 7
  0080d	8b ce		 mov	 ecx, esi
  0080f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 350  : 
; 351  : 	SetTextureStageState(0, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00814	6a 01		 push	 1
  00816	6a 0d		 push	 13			; 0000000dH
  00818	6a 00		 push	 0
  0081a	8b ce		 mov	 ecx, esi
  0081c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 352  : 	SetTextureStageState(0, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  00821	6a 01		 push	 1
  00823	6a 0e		 push	 14			; 0000000eH
  00825	6a 00		 push	 0
  00827	8b ce		 mov	 ecx, esi
  00829	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 353  : 	SetTextureStageState(1, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  0082e	6a 01		 push	 1
  00830	6a 0d		 push	 13			; 0000000dH
  00832	6a 01		 push	 1
  00834	8b ce		 mov	 ecx, esi
  00836	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 354  : 	SetTextureStageState(1, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  0083b	6a 01		 push	 1
  0083d	6a 0e		 push	 14			; 0000000eH
  0083f	6a 01		 push	 1
  00841	8b ce		 mov	 ecx, esi
  00843	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 355  : 	SetTextureStageState(2, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00848	6a 01		 push	 1
  0084a	6a 0d		 push	 13			; 0000000dH
  0084c	6a 02		 push	 2
  0084e	8b ce		 mov	 ecx, esi
  00850	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 356  : 	SetTextureStageState(2, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  00855	6a 01		 push	 1
  00857	6a 0e		 push	 14			; 0000000eH
  00859	6a 02		 push	 2
  0085b	8b ce		 mov	 ecx, esi
  0085d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 357  : 	SetTextureStageState(3, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00862	6a 01		 push	 1
  00864	6a 0d		 push	 13			; 0000000dH
  00866	6a 03		 push	 3
  00868	8b ce		 mov	 ecx, esi
  0086a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 358  : 	SetTextureStageState(3, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  0086f	6a 01		 push	 1
  00871	6a 0e		 push	 14			; 0000000eH
  00873	6a 03		 push	 3
  00875	8b ce		 mov	 ecx, esi
  00877	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 359  : 	SetTextureStageState(4, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  0087c	6a 01		 push	 1
  0087e	6a 0d		 push	 13			; 0000000dH
  00880	6a 04		 push	 4
  00882	8b ce		 mov	 ecx, esi
  00884	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 360  : 	SetTextureStageState(4, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  00889	6a 01		 push	 1
  0088b	6a 0e		 push	 14			; 0000000eH
  0088d	6a 04		 push	 4
  0088f	8b ce		 mov	 ecx, esi
  00891	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 361  : 	SetTextureStageState(5, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00896	6a 01		 push	 1
  00898	6a 0d		 push	 13			; 0000000dH
  0089a	6a 05		 push	 5
  0089c	8b ce		 mov	 ecx, esi
  0089e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 362  : 	SetTextureStageState(5, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  008a3	6a 01		 push	 1
  008a5	6a 0e		 push	 14			; 0000000eH
  008a7	6a 05		 push	 5
  008a9	8b ce		 mov	 ecx, esi
  008ab	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 363  : 	SetTextureStageState(6, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  008b0	6a 01		 push	 1
  008b2	6a 0d		 push	 13			; 0000000dH
  008b4	6a 06		 push	 6
  008b6	8b ce		 mov	 ecx, esi
  008b8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 364  : 	SetTextureStageState(6, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  008bd	6a 01		 push	 1
  008bf	6a 0e		 push	 14			; 0000000eH
  008c1	6a 06		 push	 6
  008c3	8b ce		 mov	 ecx, esi
  008c5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 365  : 	SetTextureStageState(7, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  008ca	6a 01		 push	 1
  008cc	6a 0d		 push	 13			; 0000000dH
  008ce	6a 07		 push	 7
  008d0	8b ce		 mov	 ecx, esi
  008d2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 366  : 	SetTextureStageState(7, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  008d7	6a 01		 push	 1
  008d9	6a 0e		 push	 14			; 0000000eH
  008db	6a 07		 push	 7
  008dd	8b ce		 mov	 ecx, esi
  008df	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 367  : 
; 368  : 	SetTextureStageState(0, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  008e4	6a 00		 push	 0
  008e6	6a 18		 push	 24			; 00000018H
  008e8	6a 00		 push	 0
  008ea	8b ce		 mov	 ecx, esi
  008ec	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 369  : 	SetTextureStageState(1, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  008f1	6a 00		 push	 0
  008f3	6a 18		 push	 24			; 00000018H
  008f5	6a 01		 push	 1
  008f7	8b ce		 mov	 ecx, esi
  008f9	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 370  : 	SetTextureStageState(2, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  008fe	6a 00		 push	 0
  00900	6a 18		 push	 24			; 00000018H
  00902	6a 02		 push	 2
  00904	8b ce		 mov	 ecx, esi
  00906	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 371  : 	SetTextureStageState(3, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  0090b	6a 00		 push	 0
  0090d	6a 18		 push	 24			; 00000018H
  0090f	6a 03		 push	 3
  00911	8b ce		 mov	 ecx, esi
  00913	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 372  : 	SetTextureStageState(4, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  00918	6a 00		 push	 0
  0091a	6a 18		 push	 24			; 00000018H
  0091c	6a 04		 push	 4
  0091e	8b ce		 mov	 ecx, esi
  00920	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 373  : 	SetTextureStageState(5, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  00925	6a 00		 push	 0
  00927	6a 18		 push	 24			; 00000018H
  00929	6a 05		 push	 5
  0092b	8b ce		 mov	 ecx, esi
  0092d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 374  : 	SetTextureStageState(6, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  00932	6a 00		 push	 0
  00934	6a 18		 push	 24			; 00000018H
  00936	6a 06		 push	 6
  00938	8b ce		 mov	 ecx, esi
  0093a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 375  : 	SetTextureStageState(7, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  0093f	6a 00		 push	 0
  00941	6a 18		 push	 24			; 00000018H
  00943	6a 07		 push	 7
  00945	8b ce		 mov	 ecx, esi
  00947	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 376  : 
; 377  : 	SetTexture(0, NULL);

  0094c	6a 00		 push	 0
  0094e	6a 00		 push	 0
  00950	8b ce		 mov	 ecx, esi
  00952	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 378  : 	SetTexture(1, NULL);

  00957	6a 00		 push	 0
  00959	6a 01		 push	 1
  0095b	8b ce		 mov	 ecx, esi
  0095d	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 379  : 	SetTexture(2, NULL);

  00962	6a 00		 push	 0
  00964	6a 02		 push	 2
  00966	8b ce		 mov	 ecx, esi
  00968	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 380  : 	SetTexture(3, NULL);

  0096d	6a 00		 push	 0
  0096f	6a 03		 push	 3
  00971	8b ce		 mov	 ecx, esi
  00973	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 381  : 	SetTexture(4, NULL);

  00978	6a 00		 push	 0
  0097a	6a 04		 push	 4
  0097c	8b ce		 mov	 ecx, esi
  0097e	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 382  : 	SetTexture(5, NULL);

  00983	6a 00		 push	 0
  00985	6a 05		 push	 5
  00987	8b ce		 mov	 ecx, esi
  00989	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 383  : 	SetTexture(6, NULL);

  0098e	6a 00		 push	 0
  00990	6a 06		 push	 6
  00992	8b ce		 mov	 ecx, esi
  00994	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 384  : 	SetTexture(7, NULL);

  00999	6a 00		 push	 0
  0099b	6a 07		 push	 7
  0099d	8b ce		 mov	 ecx, esi
  0099f	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 385  : 
; 386  : 	SetPixelShader(0);

  009a4	6a 00		 push	 0
  009a6	8b ce		 mov	 ecx, esi
  009a8	e8 00 00 00 00	 call	 ?SetPixelShader@CStateManager@@QAEXK@Z ; CStateManager::SetPixelShader

; 387  : 	SetVertexShader(D3DFVF_XYZ);

  009ad	6a 02		 push	 2
  009af	8b ce		 mov	 ecx, esi
  009b1	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 388  : 
; 389  : 	D3DXVECTOR4 av4Null[STATEMANAGER_MAX_VCONSTANTS];
; 390  : 	memset(av4Null, 0, sizeof(av4Null));

  009b6	68 00 06 00 00	 push	 1536			; 00000600H
  009bb	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _av4Null$[ebp]
  009c1	6a 00		 push	 0
  009c3	50		 push	 eax
  009c4	e8 00 00 00 00	 call	 _memset
  009c9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 391  : 	SetVertexShaderConstant(0, av4Null, STATEMANAGER_MAX_VCONSTANTS);

  009cc	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _av4Null$[ebp]
  009d2	8b ce		 mov	 ecx, esi
  009d4	6a 60		 push	 96			; 00000060H
  009d6	50		 push	 eax
  009d7	6a 00		 push	 0
  009d9	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 392  : 	SetPixelShaderConstant(0, av4Null, STATEMANAGER_MAX_PCONSTANTS);

  009de	6a 08		 push	 8
  009e0	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _av4Null$[ebp]
  009e6	8b ce		 mov	 ecx, esi
  009e8	50		 push	 eax
  009e9	6a 00		 push	 0
  009eb	e8 00 00 00 00	 call	 ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant

; 393  : 
; 394  : 	m_bForce = false;
; 395  : 
; 396  : #ifdef _DEBUG
; 397  : 	int i, j;
; 398  : 	for (i = 0; i < STATEMANAGER_MAX_RENDERSTATES; i++)
; 399  : 		m_bRenderStateSavingFlag[i] = FALSE;
; 400  : 
; 401  : 	for (j = 0; j < STATEMANAGER_MAX_TRANSFORMSTATES; j++)
; 402  : 		m_bTransformSavingFlag[j] = FALSE;
; 403  : 
; 404  : 	for (j = 0; j < STATEMANAGER_MAX_STAGES; ++j)
; 405  : 		for (i = 0; i < STATEMANAGER_MAX_TEXTURESTATES; ++i)
; 406  : 			m_bTextureStageStateSavingFlag[j][i] = FALSE;
; 407  : #endif _DEBUG
; 408  : }

  009f0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009f3	c6 86 6c 33 01
	00 00		 mov	 BYTE PTR [esi+78700], 0
  009fa	33 cd		 xor	 ecx, ebp
  009fc	5e		 pop	 esi
  009fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a02	8b e5		 mov	 esp, ebp
  00a04	5d		 pop	 ebp
  00a05	c3		 ret	 0
?SetDefaultState@CStateManager@@QAEXXZ ENDP		; CStateManager::SetDefaultState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ??1CStateManager@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CStateManager@@UAE@XZ PROC				; CStateManager::~CStateManager, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CStateManager@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 67   : 	if (m_lpD3DDev)

  00025	8b 8e 78 33 01
	00		 mov	 ecx, DWORD PTR [esi+78712]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CStateManager@@6B@
  00031	85 c9		 test	 ecx, ecx
  00033	74 10		 je	 SHORT $LN2@CStateMana

; 68   : 	{
; 69   : 		m_lpD3DDev->Release();

  00035	8b 01		 mov	 eax, DWORD PTR [ecx]
  00037	51		 push	 ecx
  00038	ff 50 08	 call	 DWORD PTR [eax+8]

; 70   : 		m_lpD3DDev = NULL;

  0003b	c7 86 78 33 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+78712], 0
$LN2@CStateMana:

; 72   : }

  00045	8d 8e 60 33 01
	00		 lea	 ecx, DWORD PTR [esi+78688]
  0004b	e8 00 00 00 00	 call	 ??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 19   : 	{

  00050	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCStateManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00056	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, 0 ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp

; 72   : }

  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5e		 pop	 esi
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
  00070	cc		 int	 3
  00071	cc		 int	 3
  00072	cc		 int	 3
  00073	cc		 int	 3
  00074	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CStateManager@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CStateManager@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CStateManager@@UAE@XZ ENDP				; CStateManager::~CStateManager
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp
;	COMDAT ??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpDevice$ = 8						; size = 4
??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z PROC	; CStateManager::CStateManager, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00029	89 35 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, esi ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp

; 58   : {

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h

; 163  : 		{

  00036	8d 86 f0 65 00
	00		 lea	 eax, DWORD PTR [esi+26096]
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp

; 58   : {

  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CStateManager@@6B@
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h

; 163  : 		{

  00042	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL151@CStateMana:

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00050	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00056	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00059	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  00060	83 e9 01	 sub	 ecx, 1
  00063	75 eb		 jne	 SHORT $LL151@CStateMana

; 87   : 			: m_lpIndexData(pIndexData),

  00065	89 8e 70 66 00
	00		 mov	 DWORD PTR [esi+26224], ecx

; 163  : 		{

  0006b	8d 86 64 cc 00
	00		 lea	 eax, DWORD PTR [esi+52324]

; 88   : 		m_BaseVertexIndex(BaseVertexIndex)

  00071	89 8e 74 66 00
	00		 mov	 DWORD PTR [esi+26228], ecx

; 163  : 		{

  00077	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0007c	0f 1f 40 00	 npad	 4
$LL155@CStateMana:

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00080	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00086	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00089	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  00090	83 e9 01	 sub	 ecx, 1
  00093	75 eb		 jne	 SHORT $LL155@CStateMana

; 87   : 			: m_lpIndexData(pIndexData),

  00095	89 8e e4 cc 00
	00		 mov	 DWORD PTR [esi+52452], ecx

; 163  : 		{

  0009b	8d 86 d8 32 01
	00		 lea	 eax, DWORD PTR [esi+78552]

; 88   : 		m_BaseVertexIndex(BaseVertexIndex)

  000a1	89 8e e8 cc 00
	00		 mov	 DWORD PTR [esi+52456], ecx

; 163  : 		{

  000a7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000ac	0f 1f 40 00	 npad	 4
$LL159@CStateMana:

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  000b0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000b6	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  000b9	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  000c0	83 e9 01	 sub	 ecx, 1
  000c3	75 eb		 jne	 SHORT $LL159@CStateMana

; 87   : 			: m_lpIndexData(pIndexData),

  000c5	89 8e 58 33 01
	00		 mov	 DWORD PTR [esi+78680], ecx

; 88   : 		m_BaseVertexIndex(BaseVertexIndex)

  000cb	89 8e 5c 33 01
	00		 mov	 DWORD PTR [esi+78684], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000d1	89 8e 60 33 01
	00		 mov	 DWORD PTR [esi+78688], ecx
  000d7	89 8e 64 33 01
	00		 mov	 DWORD PTR [esi+78692], ecx
  000dd	89 8e 68 33 01
	00		 mov	 DWORD PTR [esi+78696], ecx
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.cpp

; 62   : 	SetDevice(lpDevice);

  000e3	ff 75 08	 push	 DWORD PTR _lpDevice$[ebp]
  000e6	89 8e 78 33 01
	00		 mov	 DWORD PTR [esi+78712], ecx
  000ec	88 8e 6d 33 01
	00		 mov	 BYTE PTR [esi+78701], cl
  000f2	8b ce		 mov	 ecx, esi
  000f4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f8	c7 86 70 33 01
	00 02 00 00 00	 mov	 DWORD PTR [esi+78704], 2
  00102	c7 86 74 33 01
	00 02 00 00 00	 mov	 DWORD PTR [esi+78708], 2
  0010c	e8 00 00 00 00	 call	 ?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice8@@@Z ; CStateManager::SetDevice

; 63   : }

  00111	8b c6		 mov	 eax, esi
  00113	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00116	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011d	59		 pop	 ecx
  0011e	5e		 pop	 esi
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCStateManager@@@@UAE@XZ ; CSingleton<CStateManager>::~CSingleton<CStateManager>
__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 60 33 01
	00		 add	 ecx, 78688		; 00013360H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CStateManager@@QAE@PAUIDirect3DDevice8@@@Z ENDP	; CStateManager::CStateManager
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z PROC	; CSingleton<CStateManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCStateManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, 0 ; CSingleton<CStateManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN8@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z ENDP	; CSingleton<CStateManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCStateManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCStateManager@@@@UAE@XZ PROC		; CSingleton<CStateManager>::~CSingleton<CStateManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCStateManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, 0 ; CSingleton<CStateManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCStateManager@@@@UAE@XZ ENDP		; CSingleton<CStateManager>::~CSingleton<CStateManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h
;	COMDAT ?ResetState@CStateManagerState@@QAEXXZ
_TEXT	SEGMENT
?ResetState@CStateManagerState@@QAEXXZ PROC		; CStateManagerState::ResetState, COMDAT
; _this$ = ecx

; 167  : 		{

  00000	8b d1		 mov	 edx, ecx

; 168  : 			DWORD i, y;
; 169  : 
; 170  : 			for (i = 0; i < STATEMANAGER_MAX_RENDERSTATES; i++)

  00002	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0000e	8b fa		 mov	 edi, edx
  00010	f3 ab		 rep stosd

; 171  : 				m_RenderStates[i] = 0x7FFFFFFF;
; 172  : 
; 173  : 			for (i = 0; i < STATEMANAGER_MAX_STAGES; i++)

  00012	8d ba 00 04 00
	00		 lea	 edi, DWORD PTR [edx+1024]
  00018	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0001d	f3 ab		 rep stosd

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  0001f	33 f6		 xor	 esi, esi

; 174  : 				for (y = 0; y < STATEMANAGER_MAX_TEXTURESTATES; y++)
; 175  : 					m_TextureStates[i][y] = 0x7FFFFFFF;
; 176  : 
; 177  : 			for (i = 0; i < STATEMANAGER_MAX_STREAMS; i++)

  00021	8d 82 ec 65 00
	00		 lea	 eax, DWORD PTR [edx+26092]

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00027	33 ff		 xor	 edi, edi

; 174  : 				for (y = 0; y < STATEMANAGER_MAX_TEXTURESTATES; y++)
; 175  : 					m_TextureStates[i][y] = 0x7FFFFFFF;
; 176  : 
; 177  : 			for (i = 0; i < STATEMANAGER_MAX_STREAMS; i++)

  00029	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0002e	66 90		 npad	 2
$LL13@ResetState:

; 178  : 				m_StreamData[i] = CStreamData();

  00030	89 30		 mov	 DWORD PTR [eax], esi
  00032	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00035	89 78 fc	 mov	 DWORD PTR [eax-4], edi
  00038	83 e9 01	 sub	 ecx, 1
  0003b	75 f3		 jne	 SHORT $LL13@ResetState

; 179  : 
; 180  : 			m_IndexData = CIndexData();

  0003d	89 8a 6c 66 00
	00		 mov	 DWORD PTR [edx+26220], ecx

; 88   : 		m_BaseVertexIndex(BaseVertexIndex)

  00043	8d 82 dc 1a 00
	00		 lea	 eax, DWORD PTR [edx+6876]

; 179  : 
; 180  : 			m_IndexData = CIndexData();

  00049	89 8a 70 66 00
	00		 mov	 DWORD PTR [edx+26224], ecx
  0004f	5f		 pop	 edi

; 181  : 
; 182  : 			for (i = 0; i < STATEMANAGER_MAX_STAGES; i++)
; 183  : 				m_Textures[i] = NULL;

  00050	89 8a 80 1a 00
	00		 mov	 DWORD PTR [edx+6784], ecx
  00056	89 8a 84 1a 00
	00		 mov	 DWORD PTR [edx+6788], ecx
  0005c	89 8a 88 1a 00
	00		 mov	 DWORD PTR [edx+6792], ecx
  00062	89 8a 8c 1a 00
	00		 mov	 DWORD PTR [edx+6796], ecx
  00068	89 8a 90 1a 00
	00		 mov	 DWORD PTR [edx+6800], ecx
  0006e	89 8a 94 1a 00
	00		 mov	 DWORD PTR [edx+6804], ecx
  00074	89 8a 98 1a 00
	00		 mov	 DWORD PTR [edx+6808], ecx
  0007a	89 8a 9c 1a 00
	00		 mov	 DWORD PTR [edx+6812], ecx

; 88   : 		m_BaseVertexIndex(BaseVertexIndex)

  00080	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH

; 174  : 				for (y = 0; y < STATEMANAGER_MAX_TEXTURESTATES; y++)
; 175  : 					m_TextureStates[i][y] = 0x7FFFFFFF;
; 176  : 
; 177  : 			for (i = 0; i < STATEMANAGER_MAX_STREAMS; i++)

  00085	5e		 pop	 esi
$LL19@ResetState:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00086	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h

; 187  : 			for (i = 0; i < STATEMANAGER_MAX_TRANSFORMSTATES; i++)

  0008d	8d 40 40	 lea	 eax, DWORD PTR [eax+64]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00090	c7 40 c0 00 00
	00 00		 mov	 DWORD PTR [eax-64], 0
  00097	c7 40 bc 00 00
	00 00		 mov	 DWORD PTR [eax-68], 0
  0009e	c7 40 b8 00 00
	00 00		 mov	 DWORD PTR [eax-72], 0
  000a5	c7 40 b0 00 00
	00 00		 mov	 DWORD PTR [eax-80], 0
  000ac	c7 40 ac 00 00
	00 00		 mov	 DWORD PTR [eax-84], 0
  000b3	c7 40 a8 00 00
	00 00		 mov	 DWORD PTR [eax-88], 0
  000ba	c7 40 a4 00 00
	00 00		 mov	 DWORD PTR [eax-92], 0
  000c1	c7 40 9c 00 00
	00 00		 mov	 DWORD PTR [eax-100], 0
  000c8	c7 40 98 00 00
	00 00		 mov	 DWORD PTR [eax-104], 0
  000cf	c7 40 94 00 00
	00 00		 mov	 DWORD PTR [eax-108], 0
  000d6	c7 40 90 00 00
	00 00		 mov	 DWORD PTR [eax-112], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000dd	c7 40 c8 00 00
	80 3f		 mov	 DWORD PTR [eax-56], 1065353216 ; 3f800000H
  000e4	c7 40 b4 00 00
	80 3f		 mov	 DWORD PTR [eax-76], 1065353216 ; 3f800000H
  000eb	c7 40 a0 00 00
	80 3f		 mov	 DWORD PTR [eax-96], 1065353216 ; 3f800000H
  000f2	c7 40 8c 00 00
	80 3f		 mov	 DWORD PTR [eax-116], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h

; 187  : 			for (i = 0; i < STATEMANAGER_MAX_TRANSFORMSTATES; i++)

  000f9	83 e9 01	 sub	 ecx, 1
  000fc	75 88		 jne	 SHORT $LL19@ResetState

; 188  : 				D3DXMatrixIdentity(&m_Matrices[i]);
; 189  : 
; 190  : 			for (i = 0; i < STATEMANAGER_MAX_VCONSTANTS; i++)

  000fe	0f 57 c0	 xorps	 xmm0, xmm0
  00101	8d 82 00 14 00
	00		 lea	 eax, DWORD PTR [edx+5120]
  00107	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0010c	0f 1f 40 00	 npad	 4
$LL22@ResetState:
  00110	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 191  : 				m_VertexShaderConstants[i] = D3DXVECTOR4(0.0f, 0.0f, 0.0f, 0.0f);

  00113	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0
  00117	83 e9 01	 sub	 ecx, 1
  0011a	75 f4		 jne	 SHORT $LL22@ResetState

; 192  : 
; 193  : 			for (i = 0; i < STATEMANAGER_MAX_PCONSTANTS; i++)

  0011c	0f 57 c0	 xorps	 xmm0, xmm0
  0011f	8d 82 00 1a 00
	00		 lea	 eax, DWORD PTR [edx+6656]
  00125	b9 08 00 00 00	 mov	 ecx, 8
  0012a	66 0f 1f 44 00
	00		 npad	 6
$LL25@ResetState:
  00130	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 194  : 				m_PixelShaderConstants[i] = D3DXVECTOR4(0.0f, 0.0f, 0.0f, 0.0f);

  00133	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0
  00137	83 e9 01	 sub	 ecx, 1
  0013a	75 f4		 jne	 SHORT $LL25@ResetState

; 195  : 
; 196  : 			m_dwPixelShader = 0;
; 197  : 			m_dwVertexShader = D3DFVF_XYZ;
; 198  : 
; 199  : 			ZeroMemory(&m_Matrices, sizeof(D3DXMATRIX) * STATEMANAGER_MAX_TRANSFORMSTATES);

  0013c	68 00 4b 00 00	 push	 19200			; 00004b00H
  00141	51		 push	 ecx
  00142	8d 82 a8 1a 00
	00		 lea	 eax, DWORD PTR [edx+6824]
  00148	89 8a a0 1a 00
	00		 mov	 DWORD PTR [edx+6816], ecx
  0014e	50		 push	 eax
  0014f	c7 82 a4 1a 00
	00 02 00 00 00	 mov	 DWORD PTR [edx+6820], 2
  00159	e8 00 00 00 00	 call	 _memset
  0015e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 200  : 		}

  00161	c3		 ret	 0
?ResetState@CStateManagerState@@QAEXXZ ENDP		; CStateManagerState::ResetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterLib\StateManager.h
;	COMDAT ??_FCStreamData@@QAEXXZ
_TEXT	SEGMENT
??_FCStreamData@@QAEXXZ PROC				; CStreamData::`default constructor closure', COMDAT
; _this$ = ecx

; 70   : 		CStreamData(LPDIRECT3DVERTEXBUFFER8 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000d	c3		 ret	 0
??_FCStreamData@@QAEXXZ ENDP				; CStreamData::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR4@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR4@@QAE@XZ PROC				; D3DXVECTOR4::D3DXVECTOR4, COMDAT
; _this$ = ecx

; 133  :     D3DXVECTOR4() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR4@@QAE@XZ ENDP				; D3DXVECTOR4::D3DXVECTOR4
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
