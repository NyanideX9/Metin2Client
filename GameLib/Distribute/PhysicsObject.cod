; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\PhysicsObject.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_pWorld@IPhysicsWorld@@0PAV1@A		; IPhysicsWorld::ms_pWorld
PUBLIC	?ms_ObjManager@IObjectManager@@0PAV1@A		; IObjectManager::ms_ObjManager
_BSS	SEGMENT
?ms_pWorld@IPhysicsWorld@@0PAV1@A DD 01H DUP (?)	; IPhysicsWorld::ms_pWorld
?ms_ObjManager@IObjectManager@@0PAV1@A DD 01H DUP (?)	; IObjectManager::ms_ObjManager
_BSS	ENDS
PUBLIC	??0CPhysicsObject@@QAE@XZ			; CPhysicsObject::CPhysicsObject
PUBLIC	??1CPhysicsObject@@UAE@XZ			; CPhysicsObject::~CPhysicsObject
PUBLIC	?Initialize@CPhysicsObject@@QAEXXZ		; CPhysicsObject::Initialize
PUBLIC	?Update@CPhysicsObject@@QAEXM@Z			; CPhysicsObject::Update
PUBLIC	?isBlending@CPhysicsObject@@QAE_NXZ		; CPhysicsObject::isBlending
PUBLIC	?SetDirection@CPhysicsObject@@QAEXABUD3DXVECTOR3@@@Z ; CPhysicsObject::SetDirection
PUBLIC	?IncreaseExternalForce@CPhysicsObject@@QAEXABUD3DXVECTOR3@@M@Z ; CPhysicsObject::IncreaseExternalForce
PUBLIC	?SetLastPosition@CPhysicsObject@@QAEXABUD3DXVECTOR3@@M@Z ; CPhysicsObject::SetLastPosition
PUBLIC	?GetLastPosition@CPhysicsObject@@QAEXPAUD3DXVECTOR3@@@Z ; CPhysicsObject::GetLastPosition
PUBLIC	?GetXMovement@CPhysicsObject@@QAEMXZ		; CPhysicsObject::GetXMovement
PUBLIC	?GetYMovement@CPhysicsObject@@QAEMXZ		; CPhysicsObject::GetYMovement
PUBLIC	?Accumulate@CPhysicsObject@@IAEXPAUD3DXVECTOR3@@@Z ; CPhysicsObject::Accumulate
PUBLIC	??_GCPhysicsObject@@UAEPAXI@Z			; CPhysicsObject::`scalar deleting destructor'
PUBLIC	??_7CPhysicsObject@@6B@				; CPhysicsObject::`vftable'
PUBLIC	??_R4CPhysicsObject@@6B@			; CPhysicsObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPhysicsObject@@@8			; CPhysicsObject `RTTI Type Descriptor'
PUBLIC	??_R3CPhysicsObject@@8				; CPhysicsObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPhysicsObject@@8				; CPhysicsObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPhysicsObject@@8			; CPhysicsObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3a83126f
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??0CEaseOutInterpolation@@QAE@XZ:PROC		; CEaseOutInterpolation::CEaseOutInterpolation
EXTRN	??1CEaseOutInterpolation@@UAE@XZ:PROC		; CEaseOutInterpolation::~CEaseOutInterpolation
EXTRN	?Initialize@CEaseOutInterpolation@@QAEXXZ:PROC	; CEaseOutInterpolation::Initialize
EXTRN	?Setup@CEaseOutInterpolation@@QAEHMMM@Z:PROC	; CEaseOutInterpolation::Setup
EXTRN	?Interpolate@CEaseOutInterpolation@@QAEXM@Z:PROC ; CEaseOutInterpolation::Interpolate
EXTRN	?isPlaying@CEaseOutInterpolation@@QAEHXZ:PROC	; CEaseOutInterpolation::isPlaying
EXTRN	?GetChangingValue@CEaseOutInterpolation@@QAEMXZ:PROC ; CEaseOutInterpolation::GetChangingValue
EXTRN	??_ECPhysicsObject@@UAEPAXI@Z:PROC		; CPhysicsObject::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CPhysicsObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPhysicsObject@@8 DD FLAT:??_R0?AVCPhysicsObject@@@8 ; CPhysicsObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPhysicsObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CPhysicsObject@@8
rdata$r	SEGMENT
??_R2CPhysicsObject@@8 DD FLAT:??_R1A@?0A@EA@CPhysicsObject@@8 ; CPhysicsObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CPhysicsObject@@8
rdata$r	SEGMENT
??_R3CPhysicsObject@@8 DD 00H				; CPhysicsObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CPhysicsObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPhysicsObject@@@8
data$rs	SEGMENT
??_R0?AVCPhysicsObject@@@8 DD FLAT:??_7type_info@@6B@	; CPhysicsObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPhysicsObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CPhysicsObject@@6B@
rdata$r	SEGMENT
??_R4CPhysicsObject@@6B@ DD 00H				; CPhysicsObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPhysicsObject@@@8
	DD	FLAT:??_R3CPhysicsObject@@8
rdata$r	ENDS
;	COMDAT ??_7CPhysicsObject@@6B@
CONST	SEGMENT
??_7CPhysicsObject@@6B@ DD FLAT:??_R4CPhysicsObject@@6B@ ; CPhysicsObject::`vftable'
	DD	FLAT:??_ECPhysicsObject@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CPhysicsObject@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPhysicsObject@@QAE@XZ$0
__ehfuncinfo$??0CPhysicsObject@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CPhysicsObject@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPhysicsObject@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPhysicsObject@@UAEPAXI@Z PROC			; CPhysicsObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPhysicsObject@@UAE@XZ ; CPhysicsObject::~CPhysicsObject
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 78		 push	 120			; 00000078H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCPhysicsObject@@UAEPAXI@Z ENDP			; CPhysicsObject::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
;	COMDAT ?Accumulate@CPhysicsObject@@IAEXPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_pv3Position$ = 8					; size = 4
?Accumulate@CPhysicsObject@@IAEXPAUD3DXVECTOR3@@@Z PROC	; CPhysicsObject::Accumulate, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  00003	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  00008	0f 57 db	 xorps	 xmm3, xmm3
  0000b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 24   : 		fabs(m_v3Velocity.y) < EPSILON ||

  00013	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3a83126f
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  0001b	0f 54 c1	 andps	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 24   : 		fabs(m_v3Velocity.y) < EPSILON ||

  0001e	0f 2f d0	 comiss	 xmm2, xmm0
  00021	77 1a		 ja	 SHORT $LN3@Accumulate
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  00023	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  00028	0f 54 c1	 andps	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 24   : 		fabs(m_v3Velocity.y) < EPSILON ||

  0002b	0f 2f d0	 comiss	 xmm2, xmm0
  0002e	77 0d		 ja	 SHORT $LN3@Accumulate
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  00030	f3 0f 10 41 2c	 movss	 xmm0, DWORD PTR [ecx+44]
  00035	0f 54 c1	 andps	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 24   : 		fabs(m_v3Velocity.y) < EPSILON ||

  00038	0f 2f d0	 comiss	 xmm2, xmm0
  0003b	76 0e		 jbe	 SHORT $LN29@Accumulate
$LN3@Accumulate:

; 25   : 		fabs(m_v3Velocity.z) < EPSILON )
; 26   : 	{
; 27   : 		fForce -= (m_fMass * m_fFriction);

  0003d	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00042	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  00047	f3 0f 5c d8	 subss	 xmm3, xmm0
$LN29@Accumulate:

; 30   : 	m_v3Acceleration = m_v3Direction * (fForce / m_fMass);

  0004b	f3 0f 5e 59 04	 divss	 xmm3, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00050	0f 28 c3	 movaps	 xmm0, xmm3
  00053	0f 28 cb	 movaps	 xmm1, xmm3
  00056	f3 0f 59 41 10	 mulss	 xmm0, DWORD PTR [ecx+16]
  0005b	f3 0f 59 49 14	 mulss	 xmm1, DWORD PTR [ecx+20]
  00060	f3 0f 59 59 0c	 mulss	 xmm3, DWORD PTR [ecx+12]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 30   : 	m_v3Acceleration = m_v3Direction * (fForce / m_fMass);

  00065	f3 0f 11 59 18	 movss	 DWORD PTR [ecx+24], xmm3
  0006a	f3 0f 11 41 1c	 movss	 DWORD PTR [ecx+28], xmm0
  0006f	f3 0f 11 49 20	 movss	 DWORD PTR [ecx+32], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00074	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00079	f3 0f 58 49 24	 addss	 xmm1, DWORD PTR [ecx+36]

; 205  :     y += v.y;

  0007e	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  00083	f3 0f 11 49 24	 movss	 DWORD PTR [ecx+36], xmm1
  00088	f3 0f 58 41 1c	 addss	 xmm0, DWORD PTR [ecx+28]
  0008d	f3 0f 11 41 28	 movss	 DWORD PTR [ecx+40], xmm0

; 206  :     z += v.z;

  00092	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  00097	f3 0f 58 41 2c	 addss	 xmm0, DWORD PTR [ecx+44]
  0009c	f3 0f 11 41 2c	 movss	 DWORD PTR [ecx+44], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 32   : 	if (m_v3Velocity.x * m_v3Direction.x < EPSILON)

  000a1	f3 0f 59 49 0c	 mulss	 xmm1, DWORD PTR [ecx+12]
  000a6	0f 2f d1	 comiss	 xmm2, xmm1
  000a9	76 0e		 jbe	 SHORT $LN4@Accumulate

; 33   : 	{
; 34   : 		m_v3Velocity.x = 0.0f;

  000ab	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 35   : 		m_v3Direction.x = 0.0f;

  000b2	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN4@Accumulate:

; 36   : 	}
; 37   : 	if (m_v3Velocity.y * m_v3Direction.y < EPSILON)

  000b9	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  000be	f3 0f 59 41 10	 mulss	 xmm0, DWORD PTR [ecx+16]
  000c3	0f 2f d0	 comiss	 xmm2, xmm0
  000c6	76 0e		 jbe	 SHORT $LN5@Accumulate

; 38   : 	{
; 39   : 		m_v3Velocity.y = 0.0f;

  000c8	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 40   : 		m_v3Direction.y = 0.0f;

  000cf	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
$LN5@Accumulate:

; 41   : 	}
; 42   : 	if (m_v3Velocity.z * m_v3Direction.z < EPSILON)

  000d6	f3 0f 10 41 2c	 movss	 xmm0, DWORD PTR [ecx+44]
  000db	f3 0f 59 41 14	 mulss	 xmm0, DWORD PTR [ecx+20]
  000e0	0f 2f d0	 comiss	 xmm2, xmm0
  000e3	76 0e		 jbe	 SHORT $LN6@Accumulate

; 43   : 	{
; 44   : 		m_v3Velocity.z = 0.0f;

  000e5	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 45   : 		m_v3Direction.z = 0.0f;

  000ec	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
$LN6@Accumulate:

; 46   : 	}
; 47   : 
; 48   : 	pv3Position->x += m_v3Velocity.x;

  000f3	8b 45 08	 mov	 eax, DWORD PTR _pv3Position$[ebp]
  000f6	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  000fb	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  000ff	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 49   : 	pv3Position->y += m_v3Velocity.y;

  00103	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  00108	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0010d	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 50   : 	pv3Position->z += m_v3Velocity.z;

  00112	f3 0f 10 41 2c	 movss	 xmm0, DWORD PTR [ecx+44]
  00117	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  0011c	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 51   : }

  00121	5d		 pop	 ebp
  00122	c2 04 00	 ret	 4
?Accumulate@CPhysicsObject@@IAEXPAUD3DXVECTOR3@@@Z ENDP	; CPhysicsObject::Accumulate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
;	COMDAT ?GetYMovement@CPhysicsObject@@QAEMXZ
_TEXT	SEGMENT
?GetYMovement@CPhysicsObject@@QAEMXZ PROC		; CPhysicsObject::GetYMovement, COMDAT
; _this$ = ecx

; 138  : 	return m_yPushingPosition.GetChangingValue();

  00000	83 c1 58	 add	 ecx, 88			; 00000058H
  00003	e9 00 00 00 00	 jmp	 ?GetChangingValue@CEaseOutInterpolation@@QAEMXZ ; CEaseOutInterpolation::GetChangingValue
?GetYMovement@CPhysicsObject@@QAEMXZ ENDP		; CPhysicsObject::GetYMovement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
;	COMDAT ?GetXMovement@CPhysicsObject@@QAEMXZ
_TEXT	SEGMENT
?GetXMovement@CPhysicsObject@@QAEMXZ PROC		; CPhysicsObject::GetXMovement, COMDAT
; _this$ = ecx

; 133  : 	return m_xPushingPosition.GetChangingValue();

  00000	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00003	e9 00 00 00 00	 jmp	 ?GetChangingValue@CEaseOutInterpolation@@QAEMXZ ; CEaseOutInterpolation::GetChangingValue
?GetXMovement@CPhysicsObject@@QAEMXZ ENDP		; CPhysicsObject::GetXMovement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
;	COMDAT ?GetLastPosition@CPhysicsObject@@QAEXPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_pPosition$ = 8						; size = 4
?GetLastPosition@CPhysicsObject@@QAEXPAUD3DXVECTOR3@@@Z PROC ; CPhysicsObject::GetLastPosition, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 119  : 	pPosition->x = (m_v3LastPosition.x);

  00003	8b 55 08	 mov	 edx, DWORD PTR _pPosition$[ebp]
  00006	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00009	89 02		 mov	 DWORD PTR [edx], eax

; 120  : 	pPosition->y = (m_v3LastPosition.y);

  0000b	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0000e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 121  : 	pPosition->z = (m_v3LastPosition.z);

  00011	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  00014	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 122  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetLastPosition@CPhysicsObject@@QAEXPAUD3DXVECTOR3@@@Z ENDP ; CPhysicsObject::GetLastPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
;	COMDAT ?SetLastPosition@CPhysicsObject@@QAEXABUD3DXVECTOR3@@M@Z
_TEXT	SEGMENT
_c_rPosition$ = 8					; size = 4
_fBlendingTime$ = 12					; size = 4
?SetLastPosition@CPhysicsObject@@QAEXABUD3DXVECTOR3@@M@Z PROC ; CPhysicsObject::SetLastPosition, COMDAT
; _this$ = ecx

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 	m_v3LastPosition.x = float(c_rPosition.x);
; 111  : 	m_v3LastPosition.y = float(c_rPosition.y);
; 112  : 	m_v3LastPosition.z = float(c_rPosition.z);
; 113  : 	m_xPushingPosition.Setup(0.0f, c_rPosition.x, fBlendingTime);

  00003	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fBlendingTime$[ebp]
  00008	56		 push	 esi
  00009	8b 75 08	 mov	 esi, DWORD PTR _c_rPosition$[ebp]
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx
  0000f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	89 47 30	 mov	 DWORD PTR [edi+48], eax
  00017	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 47 34	 mov	 DWORD PTR [edi+52], eax
  00020	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00023	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00029	89 47 38	 mov	 DWORD PTR [edi+56], eax
  0002c	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00030	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00036	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0003d	e8 00 00 00 00	 call	 ?Setup@CEaseOutInterpolation@@QAEHMMM@Z ; CEaseOutInterpolation::Setup

; 114  : 	m_yPushingPosition.Setup(0.0f, c_rPosition.y, fBlendingTime);

  00042	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fBlendingTime$[ebp]
  00047	8d 4f 58	 lea	 ecx, DWORD PTR [edi+88]
  0004a	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0004d	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00053	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00058	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0005e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00065	e8 00 00 00 00	 call	 ?Setup@CEaseOutInterpolation@@QAEHMMM@Z ; CEaseOutInterpolation::Setup
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi

; 115  : }

  0006c	5d		 pop	 ebp
  0006d	c2 08 00	 ret	 8
?SetLastPosition@CPhysicsObject@@QAEXABUD3DXVECTOR3@@M@Z ENDP ; CPhysicsObject::SetLastPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
;	COMDAT ?IncreaseExternalForce@CPhysicsObject@@QAEXABUD3DXVECTOR3@@M@Z
_TEXT	SEGMENT
_c_rvBasePosition$GSCopy$1$ = -32			; size = 4
_v3Movement$ = -28					; size = 12
$T1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_c_rvBasePosition$ = 8					; size = 4
_fForce$ = 12						; size = 4
?IncreaseExternalForce@CPhysicsObject@@QAEXABUD3DXVECTOR3@@M@Z PROC ; CPhysicsObject::IncreaseExternalForce, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _fForce$[ebp]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	8b 45 08	 mov	 eax, DWORD PTR _c_rvBasePosition$[ebp]
  0001b	89 45 e0	 mov	 DWORD PTR _c_rvBasePosition$GSCopy$1$[ebp], eax
  0001e	57		 push	 edi

; 58   : /*
; 59   : 	Tracenf("force %f, mass %f, accel (%f, %f, %f)", fForce, m_fMass,
; 60   : 		m_v3Acceleration.x,
; 61   : 		m_v3Acceleration.y,
; 62   : 		m_v3Acceleration.z);
; 63   : */
; 64   : 	const int LoopValue = 100;
; 65   : 	D3DXVECTOR3 v3Movement(0.0f, 0.0f, 0.0f);
; 66   : 
; 67   : 	for(int i = 0; i < LoopValue; ++i)

  0001f	33 ff		 xor	 edi, edi
  00021	f3 0f 5e 56 04	 divss	 xmm2, DWORD PTR [esi+4]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00026	0f 28 c2	 movaps	 xmm0, xmm2
  00029	0f 28 ca	 movaps	 xmm1, xmm2
  0002c	f3 0f 59 56 0c	 mulss	 xmm2, DWORD PTR [esi+12]
  00031	f3 0f 59 4e 10	 mulss	 xmm1, DWORD PTR [esi+16]
  00036	f3 0f 59 46 14	 mulss	 xmm0, DWORD PTR [esi+20]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 56   : 	m_v3Acceleration = m_v3Direction * (fForce / m_fMass);

  0003b	f3 0f 11 56 18	 movss	 DWORD PTR [esi+24], xmm2
  00040	f3 0f 11 4e 1c	 movss	 DWORD PTR [esi+28], xmm1
  00045	f3 0f 11 46 20	 movss	 DWORD PTR [esi+32], xmm0

; 57   : 	m_v3Velocity = m_v3Acceleration;

  0004a	f3 0f 7e 46 18	 movq	 xmm0, QWORD PTR [esi+24]
  0004f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00052	66 0f d6 46 24	 movq	 QWORD PTR [esi+36], xmm0
  00057	89 46 2c	 mov	 DWORD PTR [esi+44], eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0005a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _v3Movement$[ebp], 0

; 181  :     y = fy;

  00061	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _v3Movement$[ebp+4], 0

; 182  :     z = fz;

  00068	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _v3Movement$[ebp+8], 0
  0006f	90		 npad	 1
$LL4@IncreaseEx:
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 69   : 		Accumulate(&v3Movement);

  00070	8d 45 e4	 lea	 eax, DWORD PTR _v3Movement$[ebp]
  00073	8b ce		 mov	 ecx, esi
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?Accumulate@CPhysicsObject@@IAEXPAUD3DXVECTOR3@@@Z ; CPhysicsObject::Accumulate

; 70   : 
; 71   : 		// VICTIM_COLLISION_TEST
; 72   : 		IPhysicsWorld* pWorld = IPhysicsWorld::GetPhysicsWorld();

  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_pWorld@IPhysicsWorld@@0PAV1@A ; IPhysicsWorld::ms_pWorld

; 73   : 		if (pWorld)

  00081	85 c9		 test	 ecx, ecx
  00083	74 3e		 je	 SHORT $LN6@IncreaseEx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00085	8b 45 e0	 mov	 eax, DWORD PTR _c_rvBasePosition$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 75   : 			if (pWorld->isPhysicalCollision(c_rvBasePosition + v3Movement))

  00088	8d 55 f0	 lea	 edx, DWORD PTR $T1[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0008b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _v3Movement$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 75   : 			if (pWorld->isPhysicalCollision(c_rvBasePosition + v3Movement))

  00090	52		 push	 edx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00091	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]

; 180  :     x = fx;

  00095	f3 0f 11 45 f0	 movss	 DWORD PTR $T1[ebp], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0009a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _v3Movement$[ebp+4]
  0009f	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]

; 181  :     y = fy;

  000a4	f3 0f 11 45 f4	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000a9	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _v3Movement$[ebp+8]
  000ae	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 75   : 			if (pWorld->isPhysicalCollision(c_rvBasePosition + v3Movement))

  000b3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000b8	f3 0f 11 45 f8	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 75   : 			if (pWorld->isPhysicalCollision(c_rvBasePosition + v3Movement))

  000bd	ff d0		 call	 eax
  000bf	84 c0		 test	 al, al
  000c1	75 79		 jne	 SHORT $LN38@IncreaseEx
$LN6@IncreaseEx:
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  000c3	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [esi+36]
  000c8	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 94   : 			fabs(m_v3Velocity.y) < EPSILON &&

  000d0	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3a83126f
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  000d8	0f 54 c1	 andps	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 94   : 			fabs(m_v3Velocity.y) < EPSILON &&

  000db	0f 2f d0	 comiss	 xmm2, xmm0
  000de	76 1a		 jbe	 SHORT $LN2@IncreaseEx
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  000e0	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [esi+40]
  000e5	0f 54 c1	 andps	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 94   : 			fabs(m_v3Velocity.y) < EPSILON &&

  000e8	0f 2f d0	 comiss	 xmm2, xmm0
  000eb	76 0d		 jbe	 SHORT $LN2@IncreaseEx
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  000ed	f3 0f 10 46 2c	 movss	 xmm0, DWORD PTR [esi+44]
  000f2	0f 54 c1	 andps	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 94   : 			fabs(m_v3Velocity.y) < EPSILON &&

  000f5	0f 2f d0	 comiss	 xmm2, xmm0
  000f8	77 0a		 ja	 SHORT $LN41@IncreaseEx
$LN2@IncreaseEx:

; 58   : /*
; 59   : 	Tracenf("force %f, mass %f, accel (%f, %f, %f)", fForce, m_fMass,
; 60   : 		m_v3Acceleration.x,
; 61   : 		m_v3Acceleration.y,
; 62   : 		m_v3Acceleration.z);
; 63   : */
; 64   : 	const int LoopValue = 100;
; 65   : 	D3DXVECTOR3 v3Movement(0.0f, 0.0f, 0.0f);
; 66   : 
; 67   : 	for(int i = 0; i < LoopValue; ++i)

  000fa	47		 inc	 edi
  000fb	83 ff 64	 cmp	 edi, 100		; 00000064H
  000fe	0f 8c 6c ff ff
	ff		 jl	 $LL4@IncreaseEx
$LN41@IncreaseEx:

; 95   : 			fabs(m_v3Velocity.z) < EPSILON )
; 96   : 			break;
; 97   : 	}
; 98   : 
; 99   : 	SetLastPosition(v3Movement, float(LoopValue) * c_fFrameTime);

  00104	51		 push	 ecx
  00105	8d 45 e4	 lea	 eax, DWORD PTR _v3Movement$[ebp]
  00108	c7 04 24 00 00
	00 40		 mov	 DWORD PTR [esp], 1073741824 ; 40000000H
  0010f	50		 push	 eax
  00110	8b ce		 mov	 ecx, esi
  00112	e8 00 00 00 00	 call	 ?SetLastPosition@CPhysicsObject@@QAEXABUD3DXVECTOR3@@M@Z ; CPhysicsObject::SetLastPosition

; 100  : 
; 101  : 	if( m_pActorInstance )

  00117	8b 56 74	 mov	 edx, DWORD PTR [esi+116]
  0011a	85 d2		 test	 edx, edx
  0011c	74 0c		 je	 SHORT $LN8@IncreaseEx

; 102  : 	{
; 103  : 		IObjectManager* pObjectManager = IObjectManager::GetObjectManager();

  0011e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_ObjManager@IObjectManager@@0PAV1@A ; IObjectManager::ms_ObjManager

; 104  : 		pObjectManager->AdjustCollisionWithOtherObjects( m_pActorInstance );

  00124	52		 push	 edx
  00125	8b 01		 mov	 eax, DWORD PTR [ecx]
  00127	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@IncreaseEx:

; 105  : 	}
; 106  : }

  0012a	5f		 pop	 edi
  0012b	5e		 pop	 esi
  0012c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012f	33 cd		 xor	 ecx, ebp
  00131	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c2 08 00	 ret	 8
$LN38@IncreaseEx:

; 76   : 			{
; 77   : 				Initialize();

  0013c	8b ce		 mov	 ecx, esi
  0013e	e8 00 00 00 00	 call	 ?Initialize@CPhysicsObject@@QAEXXZ ; CPhysicsObject::Initialize

; 105  : 	}
; 106  : }

  00143	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00146	5f		 pop	 edi
  00147	33 cd		 xor	 ecx, ebp
  00149	5e		 pop	 esi
  0014a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c2 08 00	 ret	 8
?IncreaseExternalForce@CPhysicsObject@@QAEXABUD3DXVECTOR3@@M@Z ENDP ; CPhysicsObject::IncreaseExternalForce
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
;	COMDAT ?SetDirection@CPhysicsObject@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_c_rv3Direction$ = 8					; size = 4
?SetDirection@CPhysicsObject@@QAEXABUD3DXVECTOR3@@@Z PROC ; CPhysicsObject::SetDirection, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 126  : 	m_v3Direction.x = c_rv3Direction.x;

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_rv3Direction$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 127  : 	m_v3Direction.y = c_rv3Direction.y;

  0000b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 128  : 	m_v3Direction.z = c_rv3Direction.z;

  00011	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00014	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 129  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?SetDirection@CPhysicsObject@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CPhysicsObject::SetDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
;	COMDAT ?isBlending@CPhysicsObject@@QAE_NXZ
_TEXT	SEGMENT
?isBlending@CPhysicsObject@@QAE_NXZ PROC		; CPhysicsObject::isBlending, COMDAT
; _this$ = ecx

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0000a	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [esi+40]
  0000f	f3 0f 10 56 24	 movss	 xmm2, DWORD PTR [esi+36]
  00014	f3 0f 10 46 2c	 movss	 xmm0, DWORD PTR [esi+44]
  00019	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0001d	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00021	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00025	f3 0f 58 d1	 addss	 xmm2, xmm1
  00029	0f 57 c9	 xorps	 xmm1, xmm1
  0002c	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00030	0f 5a c2	 cvtps2pd xmm0, xmm2
  00033	66 0f 2e c8	 ucomisd xmm1, xmm0
  00037	77 06		 ja	 SHORT $LN11@isBlending
  00039	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0003d	eb 05		 jmp	 SHORT $LN12@isBlending
$LN11@isBlending:
  0003f	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN12@isBlending:
  00044	0f 57 c9	 xorps	 xmm1, xmm1
  00047	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
  0004b	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp

; 143  : 	if (0.0f != D3DXVec3Length(&m_v3Velocity))

  0004e	0f 2e c1	 ucomiss xmm0, xmm1
  00051	9f		 lahf
  00052	f6 c4 44	 test	 ah, 68			; 00000044H
  00055	7a 1e		 jp	 SHORT $LN4@isBlending

; 144  : 		return true;
; 145  : 
; 146  : 	if (m_xPushingPosition.isPlaying() ||

  00057	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0005a	e8 00 00 00 00	 call	 ?isPlaying@CEaseOutInterpolation@@QAEHXZ ; CEaseOutInterpolation::isPlaying
  0005f	85 c0		 test	 eax, eax
  00061	75 12		 jne	 SHORT $LN4@isBlending
  00063	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00066	e8 00 00 00 00	 call	 ?isPlaying@CEaseOutInterpolation@@QAEHXZ ; CEaseOutInterpolation::isPlaying
  0006b	85 c0		 test	 eax, eax
  0006d	0f 95 c0	 setne	 al

; 149  : 
; 150  : 	return false;
; 151  : }

  00070	5e		 pop	 esi
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN4@isBlending:

; 147  : 		m_yPushingPosition.isPlaying())
; 148  : 		return true;

  00075	b0 01		 mov	 al, 1

; 149  : 
; 150  : 	return false;
; 151  : }

  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?isBlending@CPhysicsObject@@QAE_NXZ ENDP		; CPhysicsObject::isBlending
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
;	COMDAT ?Update@CPhysicsObject@@QAEXM@Z
_TEXT	SEGMENT
_fElapsedTime$ = 8					; size = 4
?Update@CPhysicsObject@@QAEXM@Z PROC			; CPhysicsObject::Update, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 12   : 	if (m_xPushingPosition.isPlaying())

  00007	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0000a	e8 00 00 00 00	 call	 ?isPlaying@CEaseOutInterpolation@@QAEHXZ ; CEaseOutInterpolation::isPlaying
  0000f	85 c0		 test	 eax, eax
  00011	74 13		 je	 SHORT $LN2@Update

; 13   : 		m_xPushingPosition.Interpolate(fElapsedTime);

  00013	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  00018	51		 push	 ecx
  00019	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0001c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00021	e8 00 00 00 00	 call	 ?Interpolate@CEaseOutInterpolation@@QAEXM@Z ; CEaseOutInterpolation::Interpolate
$LN2@Update:

; 14   : 	if (m_yPushingPosition.isPlaying())

  00026	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00029	e8 00 00 00 00	 call	 ?isPlaying@CEaseOutInterpolation@@QAEHXZ ; CEaseOutInterpolation::isPlaying
  0002e	85 c0		 test	 eax, eax
  00030	74 13		 je	 SHORT $LN3@Update

; 15   : 		m_yPushingPosition.Interpolate(fElapsedTime);

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  00037	51		 push	 ecx
  00038	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  0003b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00040	e8 00 00 00 00	 call	 ?Interpolate@CEaseOutInterpolation@@QAEXM@Z ; CEaseOutInterpolation::Interpolate
$LN3@Update:

; 16   : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?Update@CPhysicsObject@@QAEXM@Z ENDP			; CPhysicsObject::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
;	COMDAT ?Initialize@CPhysicsObject@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CPhysicsObject@@QAEXXZ PROC			; CPhysicsObject::Initialize, COMDAT
; _this$ = ecx

; 154  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 155  : 	m_fMass = 1.0f;

  00003	c7 46 04 00 00
	80 3f		 mov	 DWORD PTR [esi+4], 1065353216 ; 3f800000H

; 156  : 	m_fFriction = 0.3f;
; 157  : 	m_v3Direction = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
; 158  : 	m_v3Acceleration = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
; 159  : 	m_v3Velocity = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
; 160  : 	m_v3LastPosition = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
; 161  : 
; 162  : 	m_xPushingPosition.Initialize();

  0000a	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0000d	c7 46 08 9a 99
	99 3e		 mov	 DWORD PTR [esi+8], 1050253722 ; 3e99999aH
  00014	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00022	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00029	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00030	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00037	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0003e	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  00045	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  0004c	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  00053	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  0005a	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  00061	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00068	e8 00 00 00 00	 call	 ?Initialize@CEaseOutInterpolation@@QAEXXZ ; CEaseOutInterpolation::Initialize

; 163  : 	m_yPushingPosition.Initialize();

  0006d	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00070	5e		 pop	 esi
  00071	e9 00 00 00 00	 jmp	 ?Initialize@CEaseOutInterpolation@@QAEXXZ ; CEaseOutInterpolation::Initialize
?Initialize@CPhysicsObject@@QAEXXZ ENDP			; CPhysicsObject::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
;	COMDAT ??1CPhysicsObject@@UAE@XZ
_TEXT	SEGMENT
??1CPhysicsObject@@UAE@XZ PROC				; CPhysicsObject::~CPhysicsObject, COMDAT
; _this$ = ecx

; 176  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 177  : }

  00003	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPhysicsObject@@6B@
  0000c	e8 00 00 00 00	 call	 ??1CEaseOutInterpolation@@UAE@XZ ; CEaseOutInterpolation::~CEaseOutInterpolation
  00011	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CEaseOutInterpolation@@UAE@XZ ; CEaseOutInterpolation::~CEaseOutInterpolation
??1CPhysicsObject@@UAE@XZ ENDP				; CPhysicsObject::~CPhysicsObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\PhysicsObject.cpp
;	COMDAT ??0CPhysicsObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CPhysicsObject@@QAE@XZ PROC				; CPhysicsObject::CPhysicsObject, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CPhysicsObject@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPhysicsObject@@6B@
  00032	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00039	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00040	e8 00 00 00 00	 call	 ??0CEaseOutInterpolation@@QAE@XZ ; CEaseOutInterpolation::CEaseOutInterpolation
  00045	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	e8 00 00 00 00	 call	 ??0CEaseOutInterpolation@@QAE@XZ ; CEaseOutInterpolation::CEaseOutInterpolation

; 172  : 	m_pActorInstance = NULL;

  00054	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 173  : }

  0005b	8b c6		 mov	 eax, esi
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	5e		 pop	 esi
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPhysicsObject@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00006	e9 00 00 00 00	 jmp	 ??1CEaseOutInterpolation@@UAE@XZ ; CEaseOutInterpolation::~CEaseOutInterpolation
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0CPhysicsObject@@QAE@XZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CPhysicsObject@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CPhysicsObject@@QAE@XZ ENDP				; CPhysicsObject::CPhysicsObject
END
