; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\GameLib\Distribute\FlyTrace.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_R4?$CDynamicPool@VCFlyTrace@@@@6B@		; CDynamicPool<CFlyTrace>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8		; CDynamicPool<CFlyTrace> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCFlyTrace@@@@8		; CDynamicPool<CFlyTrace>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCFlyTrace@@@@8		; CDynamicPool<CFlyTrace>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8	; CDynamicPool<CFlyTrace>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPool@VCFlyTrace@@@@6B@		; CDynamicPool<CFlyTrace>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z	; CDynamicPool<CFlyTrace>::`scalar deleting destructor'
EXTRN	??_E?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z:PROC	; CDynamicPool<CFlyTrace>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_7?$CDynamicPool@VCFlyTrace@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCFlyTrace@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCFlyTrace@@@@6B@ ; CDynamicPool<CFlyTrace>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8 ; CDynamicPool<CFlyTrace>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCFlyTrace@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8 ; CDynamicPool<CFlyTrace>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCFlyTrace@@@@8 DD 00H		; CDynamicPool<CFlyTrace>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CFlyTrace> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCFlyTrace@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCFlyTrace@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCFlyTrace@@@@6B@ DD 00H		; CDynamicPool<CFlyTrace>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CFlyTrace@@QAE@XZ				; CFlyTrace::CFlyTrace
PUBLIC	??1CFlyTrace@@UAE@XZ				; CFlyTrace::~CFlyTrace
PUBLIC	?Destroy@CFlyTrace@@QAEXXZ			; CFlyTrace::Destroy
PUBLIC	?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z ; CFlyTrace::Create
PUBLIC	?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z ; CFlyTrace::UpdateNewPosition
PUBLIC	?Update@CFlyTrace@@QAEXXZ			; CFlyTrace::Update
PUBLIC	?Render@CFlyTrace@@QAEXXZ			; CFlyTrace::Render
PUBLIC	?__Initialize@CFlyTrace@@IAEXXZ			; CFlyTrace::__Initialize
PUBLIC	?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@CAXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
PUBLIC	?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
PUBLIC	?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
PUBLIC	?DestroySystem@CFlyTrace@@SAXXZ			; CFlyTrace::DestroySystem
PUBLIC	?New@CFlyTrace@@SAPAV1@XZ			; CFlyTrace::New
PUBLIC	?Delete@CFlyTrace@@SAXPAV1@@Z			; CFlyTrace::Delete
PUBLIC	??_GCFlyTrace@@UAEPAXI@Z			; CFlyTrace::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ		; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
PUBLIC	?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlength
PUBLIC	??0TFlyVertex@@QAE@XZ				; TFlyVertex::TFlyVertex
PUBLIC	??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
PUBLIC	?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlength
PUBLIC	??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Emplace_reallocate<std::pair<float,TFlyVertexSet> >
PUBLIC	??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>
PUBLIC	??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
PUBLIC	??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Make_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Make_heap_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$_Copy_memmove@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00@Z ; std::_Copy_memmove<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
PUBLIC	??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>
PUBLIC	??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
PUBLIC	??$_Copy_memmove_tail@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QBDQAU10@II@Z ; std::_Copy_memmove_tail<std::pair<float,TFlyVertexSet> *>
PUBLIC	??$_Copy_memmove_tail@PAPAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CFlyTrace * *>
PUBLIC	??$_Copy_memmove_tail@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QBDQAPAU10@II@Z ; std::_Copy_memmove_tail<std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A ; CFlyTrace::ms_kPool
PUBLIC	??_7CFlyTrace@@6B@				; CFlyTrace::`vftable'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CFlyTrace@@6B@				; CFlyTrace::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFlyTrace@@@8				; CFlyTrace `RTTI Type Descriptor'
PUBLIC	??_R3CFlyTrace@@8				; CFlyTrace::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFlyTrace@@8				; CFlyTrace::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFlyTrace@@8			; CFlyTrace::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformNormal@12:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	?UpdateViewMatrix@CGraphicBase@@QAEXXZ:PROC	; CGraphicBase::UpdateViewMatrix
EXTRN	?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z:PROC ; Frustum::ViewVolumeTest
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SaveVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SaveVertexShader
EXTRN	?RestoreVertexShader@CStateManager@@QAEXXZ:PROC	; CStateManager::RestoreVertexShader
EXTRN	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SaveTransform
EXTRN	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z:PROC ; CStateManager::RestoreTransform
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	??_ECFlyTrace@@UAEPAXI@Z:PROC			; CFlyTrace::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	?ms_frustum@CScreen@@1VFrustum@@A:BYTE		; CScreen::ms_frustum
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CFlyTrace@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CFlyTrace@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$rs	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFlyTrace@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFlyTrace@@8 DD FLAT:??_R0?AVCFlyTrace@@@8 ; CFlyTrace::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFlyTrace@@8
rdata$r	ENDS
;	COMDAT ??_R2CFlyTrace@@8
rdata$r	SEGMENT
??_R2CFlyTrace@@8 DD FLAT:??_R1A@?0A@EA@CFlyTrace@@8	; CFlyTrace::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CFlyTrace@@8
rdata$r	SEGMENT
??_R3CFlyTrace@@8 DD 00H				; CFlyTrace::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CFlyTrace@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFlyTrace@@@8
data$rs	SEGMENT
??_R0?AVCFlyTrace@@@8 DD FLAT:??_7type_info@@6B@	; CFlyTrace `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFlyTrace@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CFlyTrace@@6B@
rdata$r	SEGMENT
??_R4CFlyTrace@@6B@ DD 00H				; CFlyTrace::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFlyTrace@@@8
	DD	FLAT:??_R3CFlyTrace@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CFlyTrace@@6B@
CONST	SEGMENT
??_7CFlyTrace@@6B@ DD FLAT:??_R4CFlyTrace@@6B@		; CFlyTrace::`vftable'
	DD	FLAT:??_ECFlyTrace@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A DD FLAT:??_7?$CDynamicPool@VCFlyTrace@@@@6B@ ; CFlyTrace::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CFlyTrace@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CFlyTrace@@SAPAV1@XZ$0
__ehfuncinfo$?New@CFlyTrace@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CFlyTrace@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@CFlyTrace@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$1
__ehfuncinfo$?Render@CFlyTrace@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Render@CFlyTrace@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFlyTrace@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFlyTrace@@QAE@XZ$0
__ehfuncinfo$??0CFlyTrace@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CFlyTrace@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z
_TEXT	SEGMENT
__Tmp$1 = -144						; size = 144
__Tmp$2 = -144						; size = 144
__Tmp$3 = -144						; size = 144
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z PROC ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 8235 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 0c	 mov	 edx, DWORD PTR __Mid$[ebp]
  00006	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0000c	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8235 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00016	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  0001a	0f 2f c1	 comiss	 xmm0, xmm1
  0001d	76 35		 jbe	 SHORT $LN2@Med3_unche

; 140  :     _Left    = _STD move(_Right);

  0001f	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  00023	8d 72 04	 lea	 esi, DWORD PTR [edx+4]

; 141  :     _Right   = _STD move(_Tmp);

  00026	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1

; 139  :     _Ty _Tmp = _STD move(_Left);

  0002a	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$1[ebp]
  00030	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00035	f3 a5		 rep movsd
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00037	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0003c	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  0003f	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00042	f3 a5		 rep movsd
  00044	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00049	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$1[ebp]
  0004f	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00052	f3 a5		 rep movsd
$LN2@Med3_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00054	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00057	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0005b	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0005f	0f 2f c1	 comiss	 xmm0, xmm1
  00062	76 77		 jbe	 SHORT $LN4@Med3_unche

; 140  :     _Left    = _STD move(_Right);

  00064	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  00068	8d 70 04	 lea	 esi, DWORD PTR [eax+4]

; 141  :     _Right   = _STD move(_Tmp);

  0006b	f3 0f 11 0a	 movss	 DWORD PTR [edx], xmm1

; 139  :     _Ty _Tmp = _STD move(_Left);

  0006f	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$2[ebp]
  00075	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0007a	f3 a5		 rep movsd
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  0007c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00081	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00084	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  00087	f3 a5		 rep movsd
  00089	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0008e	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$2[ebp]
  00094	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  00097	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00099	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0009d	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  000a1	0f 2f c1	 comiss	 xmm0, xmm1
  000a4	76 35		 jbe	 SHORT $LN4@Med3_unche

; 140  :     _Left    = _STD move(_Right);

  000a6	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  000aa	8d 72 04	 lea	 esi, DWORD PTR [edx+4]

; 141  :     _Right   = _STD move(_Tmp);

  000ad	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1

; 139  :     _Ty _Tmp = _STD move(_Left);

  000b1	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$3[ebp]
  000b7	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  000bc	f3 a5		 rep movsd
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  000be	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  000c3	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  000c6	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  000c9	f3 a5		 rep movsd
  000cb	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  000d0	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$3[ebp]
  000d6	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  000d9	f3 a5		 rep movsd
$LN4@Med3_unche:
  000db	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8248 : }

  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ENDP ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QBDQAPAU10@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QBDQAPAU10@II@Z PROC ; std::_Copy_memmove_tail<std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QBDQAPAU10@II@Z ENDP ; std::_Copy_memmove_tail<std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CFlyTrace * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CFlyTrace * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QBDQAU10@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QBDQAU10@II@Z PROC ; std::_Copy_memmove_tail<std::pair<float,TFlyVertexSet> *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QBDQAU10@II@Z ENDP ; std::_Copy_memmove_tail<std::pair<float,TFlyVertexSet> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
;	COMDAT ??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z
_TEXT	SEGMENT
tv547 = -8						; size = 4
__Max_sequence_non_leaf$1$ = -4				; size = 4
__First$ = 8						; size = 4
__Idx$1$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$1$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z PROC ; std::_Pop_heap_hole_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >, COMDAT

; 58   :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 59   :     // percolate _Hole to _Bottom, then push _Val
; 60   :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 61   : 
; 62   :     using _Diff      = _Iter_diff_t<_RanIt>;
; 63   :     const _Diff _Top = _Hole;
; 64   :     _Diff _Idx       = _Hole;
; 65   : 
; 66   :     // Check whether _Idx can have a child before calculating that child's index, since
; 67   :     // calculating the child's index can trigger integer overflows
; 68   :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00006	8b 4d 10	 mov	 ecx, DWORD PTR __Bottom$[ebp]
  00009	53		 push	 ebx

; 69   :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000d	49		 dec	 ecx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  00013	8b d7		 mov	 edx, edi
  00015	89 4d f8	 mov	 DWORD PTR tv547[ebp], ecx
  00018	8b c7		 mov	 eax, edi
  0001a	d1 f9		 sar	 ecx, 1
  0001c	89 55 0c	 mov	 DWORD PTR __Top$1$[ebp], edx
  0001f	89 4d fc	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], ecx
  00022	3b f9		 cmp	 edi, ecx
  00024	7d 64		 jge	 SHORT $LN3@Pop_heap_h
  00026	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL2@Pop_heap_h:

; 70   :         _Idx = 2 * _Idx + 2;

  00030	8d 14 00	 lea	 edx, DWORD PTR [eax+eax]

; 71   :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  00033	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00036	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
  0003c	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0003f	69 c0 94 00 00
	00		 imul	 eax, eax, 148

; 74   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00045	f3 0f 10 04 18	 movss	 xmm0, DWORD PTR [eax+ebx]
  0004a	33 c0		 xor	 eax, eax
  0004c	0f 2f 04 19	 comiss	 xmm0, DWORD PTR [ecx+ebx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00050	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 74   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00055	0f 96 c0	 setbe	 al
  00058	69 ff 94 00 00
	00		 imul	 edi, edi, 148
  0005e	40		 inc	 eax
  0005f	03 fb		 add	 edi, ebx
  00061	03 c2		 add	 eax, edx
  00063	69 f0 94 00 00
	00		 imul	 esi, eax, 148
  00069	89 45 08	 mov	 DWORD PTR __Idx$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  0006c	8b 04 1e	 mov	 eax, DWORD PTR [esi+ebx]
  0006f	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00071	83 c7 04	 add	 edi, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 75   :         _Hole             = _Idx;

  00074	8b 45 08	 mov	 eax, DWORD PTR __Idx$1$[ebp]
  00077	03 f3		 add	 esi, ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00079	83 c6 04	 add	 esi, 4
  0007c	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 69   :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR __Max_sequence_non_leaf$1$[ebp]

; 75   :         _Hole             = _Idx;

  00081	8b f8		 mov	 edi, eax
  00083	3b c1		 cmp	 eax, ecx
  00085	7c a9		 jl	 SHORT $LL2@Pop_heap_h
  00087	8b 55 0c	 mov	 edx, DWORD PTR __Top$1$[ebp]
$LN3@Pop_heap_h:

; 76   :     }
; 77   : 
; 78   :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  0008a	3b c1		 cmp	 eax, ecx
  0008c	75 33		 jne	 SHORT $LN5@Pop_heap_h
  0008e	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00091	a8 01		 test	 al, 1
  00093	75 2c		 jne	 SHORT $LN5@Pop_heap_h

; 79   :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  00095	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
  0009b	69 ff 94 00 00
	00		 imul	 edi, edi, 148
  000a1	03 fb		 add	 edi, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  000a3	8b 84 19 6c ff
	ff ff		 mov	 eax, DWORD PTR [ecx+ebx-148]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  000aa	8d b1 70 ff ff
	ff		 lea	 esi, DWORD PTR [ecx-144]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  000b0	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  000b2	03 f3		 add	 esi, ebx
  000b4	83 c7 04	 add	 edi, 4
  000b7	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  000bc	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 80   :         _Hole             = _Bottom - 1;

  000be	8b 7d f8	 mov	 edi, DWORD PTR tv547[ebp]
$LN5@Pop_heap_h:

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  000c1	3b d7		 cmp	 edx, edi
  000c3	8b 55 14	 mov	 edx, DWORD PTR __Val$[ebp]
  000c6	7d 43		 jge	 SHORT $LN52@Pop_heap_h
  000c8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL25@Pop_heap_h:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000d0	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 26   :     for (_Diff _Idx                                                          = (_Hole - 1) >> 1; // shift for codegen

  000d4	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  000d7	d1 f8		 sar	 eax, 1

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  000d9	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000df	f3 0f 10 0c 19	 movss	 xmm1, DWORD PTR [ecx+ebx]
  000e4	0f 2f c1	 comiss	 xmm0, xmm1
  000e7	76 22		 jbe	 SHORT $LN52@Pop_heap_h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 29   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  000e9	69 ff 94 00 00
	00		 imul	 edi, edi, 148
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  000ef	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 29   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  000f2	03 fb		 add	 edi, ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  000f4	03 f1		 add	 esi, ecx
  000f6	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  000fb	f3 0f 11 0f	 movss	 DWORD PTR [edi], xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  000ff	83 c7 04	 add	 edi, 4
  00102	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 30   :         _Hole             = _Idx;

  00104	8b f8		 mov	 edi, eax
  00106	39 45 0c	 cmp	 DWORD PTR __Top$1$[ebp], eax
  00109	7c c5		 jl	 SHORT $LL25@Pop_heap_h
$LN52@Pop_heap_h:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  0010b	8b 02		 mov	 eax, DWORD PTR [edx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  0010d	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 33   :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  00110	69 ff 94 00 00
	00		 imul	 edi, edi, 148
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00116	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 33   :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0011b	03 fb		 add	 edi, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  0011d	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  0011f	83 c7 04	 add	 edi, 4
  00122	f3 a5		 rep movsd
  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 84   : }

  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ENDP ; std::_Pop_heap_hole_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z PROC ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QBDQAPAU10@II@Z ; std::_Copy_memmove_tail<std::pair<float,D3DXVECTOR3> * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z ENDP ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCFlyTrace@@@std@@YAPAPAVCFlyTrace@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CFlyTrace * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00@Z PROC ; std::_Copy_memmove<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0000b	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  0000e	f7 e9		 imul	 ecx
  00010	03 d1		 add	 edx, ecx
  00012	c1 fa 07	 sar	 edx, 7
  00015	8b c2		 mov	 eax, edx
  00017	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001a	03 c2		 add	 eax, edx

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  0001c	50		 push	 eax
  0001d	51		 push	 ecx
  0001e	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00021	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00024	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QBDQAU10@II@Z ; std::_Copy_memmove_tail<std::pair<float,TFlyVertexSet> *>
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Copy_memmove@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00@Z ENDP ; std::_Copy_memmove<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Tmp$1 = -156						; size = 144
__Tmp$2 = -156						; size = 144
__Tmp$3 = -156						; size = 144
__Tmp$4 = -156						; size = 144
__Tmp$5 = -156						; size = 144
__Tmp$6 = -156						; size = 144
__Tmp$7 = -156						; size = 144
__Glast$1$ = -12					; size = 4
__Last$1$ = -12						; size = 4
tv980 = -8						; size = 4
tv987 = -8						; size = 4
__Pfirst$1$ = -8					; size = 4
__Left$1$ = -8						; size = 4
tv983 = -4						; size = 4
__Plast$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
__Gfirst$1$ = 20					; size = 4
??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z PROC ; std::_Partition_by_median_guess_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 8268 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 8269 :     // partition [_First, _Last)
; 8270 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  0000b	8b 75 0c	 mov	 esi, DWORD PTR __First$[ebp]
  0000e	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00013	57		 push	 edi
  00014	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  00017	8b cf		 mov	 ecx, edi
  00019	2b ce		 sub	 ecx, esi
  0001b	f7 e9		 imul	 ecx

; 8271 :     _STD _Guess_median_unchecked(_First, _Mid, _STD _Prev_iter(_Last), _Pred);

  0001d	8d 87 6c ff ff
	ff		 lea	 eax, DWORD PTR [edi-148]
  00023	03 d1		 add	 edx, ecx
  00025	89 45 f4	 mov	 DWORD PTR __Last$1$[ebp], eax
  00028	c1 fa 07	 sar	 edx, 7
  0002b	8b ca		 mov	 ecx, edx
  0002d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00030	03 ca		 add	 ecx, edx
  00032	d1 f9		 sar	 ecx, 1
  00034	69 d9 94 00 00
	00		 imul	 ebx, ecx, 148

; 8254 :     const _Diff _Count = _Last - _First;

  0003a	8b c8		 mov	 ecx, eax
  0003c	2b ce		 sub	 ecx, esi
  0003e	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00043	f7 e9		 imul	 ecx

; 8269 :     // partition [_First, _Last)
; 8270 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00045	03 de		 add	 ebx, esi

; 8254 :     const _Diff _Count = _Last - _First;

  00047	03 d1		 add	 edx, ecx

; 8269 :     // partition [_First, _Last)
; 8270 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00049	89 5d f8	 mov	 DWORD PTR __Pfirst$1$[ebp], ebx

; 8254 :     const _Diff _Count = _Last - _First;

  0004c	c1 fa 07	 sar	 edx, 7
  0004f	8b c2		 mov	 eax, edx
  00051	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00054	03 c2		 add	 eax, edx

; 8255 :     if (40 < _Count) { // Tukey's ninther

  00056	83 f8 28	 cmp	 eax, 40			; 00000028H
  00059	7e 64		 jle	 SHORT $LN185@Partition_

; 8256 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller
; 8257 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 8258 :         _STD _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  0005b	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  0005e	40		 inc	 eax
  0005f	c1 f8 03	 sar	 eax, 3
  00062	69 f8 94 00 00
	00		 imul	 edi, eax, 148
  00068	69 d8 28 01 00
	00		 imul	 ebx, eax, 296
  0006e	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]
  00071	8b 75 14	 mov	 esi, DWORD PTR __Pred$[ebp]
  00074	56		 push	 esi
  00075	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  00078	89 4d fc	 mov	 DWORD PTR tv983[ebp], ecx
  0007b	50		 push	 eax
  0007c	51		 push	 ecx
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 8259 :         _STD _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00083	8b 4d f8	 mov	 ecx, DWORD PTR __Pfirst$1$[ebp]
  00086	56		 push	 esi
  00087	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  0008a	50		 push	 eax
  0008b	51		 push	 ecx
  0008c	2b cf		 sub	 ecx, edi
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 8260 :         _STD _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  00094	8b 45 f4	 mov	 eax, DWORD PTR __Last$1$[ebp]
  00097	8b f0		 mov	 esi, eax
  00099	2b f7		 sub	 esi, edi
  0009b	8b 7d 14	 mov	 edi, DWORD PTR __Pred$[ebp]
  0009e	57		 push	 edi
  0009f	50		 push	 eax
  000a0	2b c3		 sub	 eax, ebx
  000a2	56		 push	 esi
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 8261 :         _STD _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  000a9	8b 5d f8	 mov	 ebx, DWORD PTR __Pfirst$1$[ebp]
  000ac	57		 push	 edi
  000ad	56		 push	 esi
  000ae	53		 push	 ebx
  000af	ff 75 fc	 push	 DWORD PTR tv983[ebp]
  000b2	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 8262 :     } else {

  000b7	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  000ba	83 c4 40	 add	 esp, 64			; 00000040H
  000bd	eb 14		 jmp	 SHORT $LN186@Partition_
$LN185@Partition_:

; 8263 :         _STD _Med3_unchecked(_First, _Mid, _Last, _Pred);

  000bf	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000c2	8d 87 6c ff ff
	ff		 lea	 eax, DWORD PTR [edi-148]
  000c8	50		 push	 eax
  000c9	53		 push	 ebx
  000ca	56		 push	 esi
  000cb	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  000d0	83 c4 10	 add	 esp, 16			; 00000010H
$LN186@Partition_:

; 8276 :            && !_Pred(*_Pfirst, *_STD _Prev_iter(_Pfirst))) {

  000d3	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  000d6	8d 93 94 00 00
	00		 lea	 edx, DWORD PTR [ebx+148]
  000dc	89 55 fc	 mov	 DWORD PTR __Plast$1$[ebp], edx
  000df	3b cb		 cmp	 ecx, ebx
  000e1	73 2c		 jae	 SHORT $LN230@Partition_
  000e3	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  000e7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000f0	f3 0f 10 83 6c
	ff ff ff	 movss	 xmm0, DWORD PTR [ebx-148]
  000f8	0f 2f c8	 comiss	 xmm1, xmm0
  000fb	77 12		 ja	 SHORT $LN230@Partition_
  000fd	0f 2f 03	 comiss	 xmm0, DWORD PTR [ebx]
  00100	77 0d		 ja	 SHORT $LN230@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8277 :         --_Pfirst;

  00102	81 c3 6c ff ff
	ff		 add	 ebx, -148		; ffffff6cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00108	0f 28 c8	 movaps	 xmm1, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8276 :            && !_Pred(*_Pfirst, *_STD _Prev_iter(_Pfirst))) {

  0010b	3b cb		 cmp	 ecx, ebx
  0010d	72 e1		 jb	 SHORT $LL2@Partition_
$LN230@Partition_:

; 8280 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  0010f	3b d7		 cmp	 edx, edi
  00111	73 1f		 jae	 SHORT $LN155@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00113	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
$LL4@Partition_:
  00117	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0011b	0f 2f c8	 comiss	 xmm1, xmm0
  0011e	77 0f		 ja	 SHORT $LN231@Partition_
  00120	0f 2f c1	 comiss	 xmm0, xmm1
  00123	77 0a		 ja	 SHORT $LN231@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8280 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00125	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  0012b	3b d7		 cmp	 edx, edi
  0012d	72 e8		 jb	 SHORT $LL4@Partition_
$LN231@Partition_:
  0012f	89 55 fc	 mov	 DWORD PTR __Plast$1$[ebp], edx
$LN155@Partition_:

; 8281 :         ++_Plast;
; 8282 :     }
; 8283 : 
; 8284 :     _RanIt _Gfirst = _Plast;
; 8285 :     _RanIt _Glast  = _Pfirst;

  00132	8b f3		 mov	 esi, ebx
  00134	8b c2		 mov	 eax, edx
  00136	89 75 f4	 mov	 DWORD PTR __Glast$1$[ebp], esi
$LN256@Partition_:

; 8286 : 
; 8287 :     for (;;) { // partition
; 8288 :         for (; _Gfirst < _Last; ++_Gfirst) {

  00139	89 45 14	 mov	 DWORD PTR __Gfirst$1$[ebp], eax
  0013c	0f 1f 40 00	 npad	 4
$LL8@Partition_:
  00140	3b c7		 cmp	 eax, edi
  00142	73 7a		 jae	 SHORT $LN209@Partition_
$LL11@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00144	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00148	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0014c	0f 2f c8	 comiss	 xmm1, xmm0
  0014f	77 58		 ja	 SHORT $LN9@Partition_
  00151	0f 2f c1	 comiss	 xmm0, xmm1
  00154	77 5f		 ja	 SHORT $LN232@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8293 :             } else if (_Plast != _Gfirst) {

  00156	8d 8a 94 00 00
	00		 lea	 ecx, DWORD PTR [edx+148]
  0015c	89 4d f8	 mov	 DWORD PTR tv987[ebp], ecx
  0015f	3b d0		 cmp	 edx, eax
  00161	74 44		 je	 SHORT $LN19@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00163	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00167	8d 72 04	 lea	 esi, DWORD PTR [edx+4]

; 140  :     _Left    = _STD move(_Right);

  0016a	f3 0f 11 0a	 movss	 DWORD PTR [edx], xmm1

; 139  :     _Ty _Tmp = _STD move(_Left);

  0016e	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$7[ebp]

; 141  :     _Right   = _STD move(_Tmp);

  00174	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  00178	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0017d	f3 a5		 rep movsd
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  0017f	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  00182	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00187	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8295 :                 ++_Plast;

  0018a	8b 55 f8	 mov	 edx, DWORD PTR tv987[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  0018d	f3 a5		 rep movsd
  0018f	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  00192	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8296 :             } else {

  00197	8b 45 14	 mov	 eax, DWORD PTR __Gfirst$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  0019a	8d b5 64 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$7[ebp]
  001a0	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8296 :             } else {

  001a2	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  001a5	eb 02		 jmp	 SHORT $LN9@Partition_
$LN19@Partition_:

; 8297 :                 ++_Plast;

  001a7	8b d1		 mov	 edx, ecx
$LN9@Partition_:

; 8286 : 
; 8287 :     for (;;) { // partition
; 8288 :         for (; _Gfirst < _Last; ++_Gfirst) {

  001a9	05 94 00 00 00	 add	 eax, 148		; 00000094H
  001ae	89 45 14	 mov	 DWORD PTR __Gfirst$1$[ebp], eax
  001b1	3b c7		 cmp	 eax, edi
  001b3	72 8f		 jb	 SHORT $LL11@Partition_
$LN232@Partition_:
  001b5	8b 75 f4	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  001b8	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  001bb	89 55 fc	 mov	 DWORD PTR __Plast$1$[ebp], edx
$LN209@Partition_:

; 8301 :         for (; _First < _Glast; --_Glast) {

  001be	3b f1		 cmp	 esi, ecx
  001c0	0f 86 85 00 00
	00		 jbe	 $LN255@Partition_
  001c6	8d 86 6c ff ff
	ff		 lea	 eax, DWORD PTR [esi-148]
  001cc	89 45 f8	 mov	 DWORD PTR tv980[ebp], eax
  001cf	90		 npad	 1
$LL14@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  001d0	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  001d4	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  001d8	0f 2f c1	 comiss	 xmm0, xmm1
  001db	77 51		 ja	 SHORT $LN12@Partition_
  001dd	0f 2f c8	 comiss	 xmm1, xmm0
  001e0	77 61		 ja	 SHORT $LN233@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8307 :             } else if (--_Pfirst != _Glast_prev) {

  001e2	81 eb 94 00 00
	00		 sub	 ebx, 148		; 00000094H
  001e8	3b d8		 cmp	 ebx, eax
  001ea	74 42		 je	 SHORT $LN12@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  001ec	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  001f0	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]

; 140  :     _Left    = _STD move(_Right);

  001f3	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1

; 139  :     _Ty _Tmp = _STD move(_Left);

  001f7	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$5[ebp]

; 141  :     _Right   = _STD move(_Tmp);

  001fd	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  00201	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00206	f3 a5		 rep movsd
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00208	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  0020b	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00210	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00213	f3 a5		 rep movsd
  00215	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  00218	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0021d	8b 45 f8	 mov	 eax, DWORD PTR tv980[ebp]
  00220	8d b5 64 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$5[ebp]
  00226	f3 a5		 rep movsd
  00228	8b 75 f4	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  0022b	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
$LN12@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8301 :         for (; _First < _Glast; --_Glast) {

  0022e	81 ee 94 00 00
	00		 sub	 esi, 148		; 00000094H
  00234	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  00239	89 75 f4	 mov	 DWORD PTR __Glast$1$[ebp], esi
  0023c	89 45 f8	 mov	 DWORD PTR tv980[ebp], eax
  0023f	3b ce		 cmp	 ecx, esi
  00241	72 8d		 jb	 SHORT $LL14@Partition_
$LN233@Partition_:
  00243	8b 45 14	 mov	 eax, DWORD PTR __Gfirst$1$[ebp]

; 8308 :                 swap(*_Pfirst, *_Glast_prev); // intentional ADL
; 8309 :             }
; 8310 :         }
; 8311 : 
; 8312 :         if (_Glast == _First && _Gfirst == _Last) {

  00246	3b f1		 cmp	 esi, ecx
  00248	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
$LN255@Partition_:
  0024b	0f 85 b4 00 00
	00		 jne	 $LN27@Partition_
  00251	8b 4d fc	 mov	 ecx, DWORD PTR __Plast$1$[ebp]
  00254	3b c7		 cmp	 eax, edi
  00256	0f 84 b7 01 00
	00		 je	 $LN196@Partition_

; 8314 :         }
; 8315 : 
; 8316 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 8317 :             if (_Plast != _Gfirst) {

  0025c	3b c8		 cmp	 ecx, eax
  0025e	74 40		 je	 SHORT $LN225@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  00260	8b 01		 mov	 eax, DWORD PTR [ecx]

; 459  :         swap(second, _Right.second); // intentional ADL

  00262	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]

; 139  :     _Ty _Tmp = _STD move(_Left);

  00265	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00269	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]

; 140  :     _Left    = _STD move(_Right);

  0026c	89 03		 mov	 DWORD PTR [ebx], eax

; 139  :     _Ty _Tmp = _STD move(_Left);

  0026e	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$2[ebp]
  00274	8b 45 14	 mov	 eax, DWORD PTR __Gfirst$1$[ebp]

; 141  :     _Right   = _STD move(_Tmp);

  00277	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  0027b	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00280	f3 a5		 rep movsd
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00282	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00287	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0028a	8b f2		 mov	 esi, edx
  0028c	f3 a5		 rep movsd
  0028e	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00293	8d b5 64 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$2[ebp]
  00299	8b fa		 mov	 edi, edx
  0029b	f3 a5		 rep movsd
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __Plast$1$[ebp]
$LN225@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  002a0	8b 00		 mov	 eax, DWORD PTR [eax]

; 139  :     _Ty _Tmp = _STD move(_Left);

  002a2	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  002a5	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  002a9	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8321 :             ++_Plast;

  002af	81 c1 94 00 00
	00		 add	 ecx, 148		; 00000094H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  002b5	89 03		 mov	 DWORD PTR [ebx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8324 :             ++_Gfirst;

  002b7	8b 45 14	 mov	 eax, DWORD PTR __Gfirst$1$[ebp]
  002ba	89 4d fc	 mov	 DWORD PTR __Plast$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  002bd	8b 4d 14	 mov	 ecx, DWORD PTR __Gfirst$1$[ebp]

; 459  :         swap(second, _Right.second); // intentional ADL

  002c0	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]

; 141  :     _Right   = _STD move(_Tmp);

  002c3	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  002c7	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  002cc	f3 a5		 rep movsd
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  002ce	8b f2		 mov	 esi, edx
  002d0	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  002d3	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8323 :             ++_Pfirst;

  002d8	81 c3 94 00 00
	00		 add	 ebx, 148		; 00000094H
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  002de	f3 a5		 rep movsd
  002e0	8b fa		 mov	 edi, edx
  002e2	8d b5 64 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8324 :             ++_Gfirst;

  002e8	8b 55 fc	 mov	 edx, DWORD PTR __Plast$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  002eb	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  002f0	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8324 :             ++_Gfirst;

  002f2	8b 75 f4	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  002f5	05 94 00 00 00	 add	 eax, 148		; 00000094H
  002fa	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  002fd	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00300	e9 34 fe ff ff	 jmp	 $LN256@Partition_
$LN27@Partition_:

; 8325 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00305	81 c6 6c ff ff
	ff		 add	 esi, -148		; ffffff6cH
  0030b	89 75 f4	 mov	 DWORD PTR __Glast$1$[ebp], esi
  0030e	3b c7		 cmp	 eax, edi
  00310	0f 85 a3 00 00
	00		 jne	 $LN30@Partition_

; 8326 :             if (--_Glast != --_Pfirst) {

  00316	81 eb 94 00 00
	00		 sub	 ebx, 148		; 00000094H
  0031c	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
  0031f	89 55 f8	 mov	 DWORD PTR __Left$1$[ebp], edx
  00322	3b f3		 cmp	 esi, ebx
  00324	74 3a		 je	 SHORT $LN226@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00326	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0032a	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$6[ebp]

; 140  :     _Left    = _STD move(_Right);

  00330	8b 03		 mov	 eax, DWORD PTR [ebx]

; 139  :     _Ty _Tmp = _STD move(_Left);

  00332	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H

; 140  :     _Left    = _STD move(_Right);

  00337	89 06		 mov	 DWORD PTR [esi], eax

; 459  :         swap(second, _Right.second); // intentional ADL

  00339	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 141  :     _Right   = _STD move(_Tmp);

  0033c	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  00340	8b f0		 mov	 esi, eax
  00342	f3 a5		 rep movsd
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00344	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00349	8b f2		 mov	 esi, edx
  0034b	8b f8		 mov	 edi, eax
  0034d	f3 a5		 rep movsd
  0034f	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00354	8d b5 64 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$6[ebp]
  0035a	8b fa		 mov	 edi, edx
  0035c	f3 a5		 rep movsd
  0035e	eb 03		 jmp	 SHORT $LN32@Partition_
$LN226@Partition_:
  00360	89 55 f8	 mov	 DWORD PTR __Left$1$[ebp], edx
$LN32@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8330 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  00363	8b 55 fc	 mov	 edx, DWORD PTR __Plast$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00366	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$3[ebp]
  0036c	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8330 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  00370	81 ea 94 00 00
	00		 sub	 edx, 148		; 00000094H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00376	8b 75 f8	 mov	 esi, DWORD PTR __Left$1$[ebp]
  00379	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8330 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  0037e	89 55 fc	 mov	 DWORD PTR __Plast$1$[ebp], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  00381	8b 02		 mov	 eax, DWORD PTR [edx]
  00383	89 03		 mov	 DWORD PTR [ebx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8331 :         } else {

  00385	8b 45 14	 mov	 eax, DWORD PTR __Gfirst$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  00388	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  0038c	f3 a5		 rep movsd
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  0038e	8b 7d f8	 mov	 edi, DWORD PTR __Left$1$[ebp]
  00391	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00394	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00399	f3 a5		 rep movsd
  0039b	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  003a0	8d b5 64 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$3[ebp]
  003a6	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  003a9	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8331 :         } else {

  003ab	8b 75 f4	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  003ae	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  003b1	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  003b4	e9 87 fd ff ff	 jmp	 $LL8@Partition_
$LN30@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  003b9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]

; 459  :         swap(second, _Right.second); // intentional ADL

  003bd	8d 56 04	 lea	 edx, DWORD PTR [esi+4]

; 140  :     _Left    = _STD move(_Right);

  003c0	8b 06		 mov	 eax, DWORD PTR [esi]

; 139  :     _Ty _Tmp = _STD move(_Left);

  003c2	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$4[ebp]

; 140  :     _Left    = _STD move(_Right);

  003c8	8b 4d 14	 mov	 ecx, DWORD PTR __Gfirst$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8332 :             swap(*_Gfirst, *--_Glast); // intentional ADL

  003cb	89 75 f4	 mov	 DWORD PTR __Glast$1$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  003ce	89 01		 mov	 DWORD PTR [ecx], eax

; 459  :         swap(second, _Right.second); // intentional ADL

  003d0	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 141  :     _Right   = _STD move(_Tmp);

  003d3	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 139  :     _Ty _Tmp = _STD move(_Left);

  003d7	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  003dc	8b f0		 mov	 esi, eax
  003de	f3 a5		 rep movsd
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  003e0	8b f8		 mov	 edi, eax
  003e2	8b f2		 mov	 esi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8333 :             ++_Gfirst;

  003e4	8b 45 14	 mov	 eax, DWORD PTR __Gfirst$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  003e7	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  003ec	f3 a5		 rep movsd
  003ee	8b fa		 mov	 edi, edx
  003f0	8d b5 64 ff ff
	ff		 lea	 esi, DWORD PTR __Tmp$4[ebp]
  003f6	8b 55 fc	 mov	 edx, DWORD PTR __Plast$1$[ebp]
  003f9	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  003fe	f3 a5		 rep movsd
  00400	8b 75 f4	 mov	 esi, DWORD PTR __Glast$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8333 :             ++_Gfirst;

  00403	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00408	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0040b	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  0040e	e9 26 fd ff ff	 jmp	 $LN256@Partition_
$LN196@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00413	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8313 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00416	5f		 pop	 edi
  00417	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00418	89 18		 mov	 DWORD PTR [eax], ebx
  0041a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8313 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  0041d	5b		 pop	 ebx

; 8334 :         }
; 8335 :     }
; 8336 : }

  0041e	8b e5		 mov	 esp, ebp
  00420	5d		 pop	 ebp
  00421	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ENDP ; std::_Partition_by_median_guess_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
;	COMDAT ??$_Make_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -164						; size = 148
tv542 = -16						; size = 4
tv550 = -12						; size = 4
__Bottom$1$ = -8					; size = 4
__Hole$1$ = -4						; size = 4
__First$ = 8						; size = 4
__Idx$1$ = 8						; size = 4
__Last$ = 12						; size = 4
__Max_sequence_non_leaf$1$ = 12				; size = 4
__Pred$ = 16						; size = 1
??$_Make_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z PROC ; std::_Make_heap_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 121  : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H

; 122  :     // make [_First, _Last) into a heap
; 123  :     using _Diff   = _Iter_diff_t<_RanIt>;
; 124  :     _Diff _Bottom = _Last - _First;

  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0000c	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00011	53		 push	 ebx
  00012	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00015	2b cb		 sub	 ecx, ebx
  00017	f7 e9		 imul	 ecx
  00019	03 d1		 add	 edx, ecx
  0001b	c1 fa 07	 sar	 edx, 7
  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00023	03 c2		 add	 eax, edx

; 125  :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00025	8b d0		 mov	 edx, eax
  00027	89 45 f8	 mov	 DWORD PTR __Bottom$1$[ebp], eax
  0002a	d1 fa		 sar	 edx, 1
  0002c	85 d2		 test	 edx, edx
  0002e	0f 8e 3b 01 00
	00		 jle	 $LN3@Make_heap_

; 122  :     // make [_First, _Last) into a heap
; 123  :     using _Diff   = _Iter_diff_t<_RanIt>;
; 124  :     _Diff _Bottom = _Last - _First;

  00034	48		 dec	 eax
  00035	89 45 f4	 mov	 DWORD PTR tv550[ebp], eax
  00038	d1 f8		 sar	 eax, 1
  0003a	89 45 0c	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], eax
  0003d	69 c2 94 00 00
	00		 imul	 eax, edx, 148
  00043	56		 push	 esi
  00044	57		 push	 edi
  00045	03 c3		 add	 eax, ebx
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@Make_heap_:

; 126  :         // reheap top half, bottom to top
; 127  :         --_Hole;

  00050	2d 94 00 00 00	 sub	 eax, 148		; 00000094H

; 128  :         _Iter_value_t<_RanIt> _Val(_STD move(*(_First + _Hole)));

  00055	8d bd 5c ff ff
	ff		 lea	 edi, DWORD PTR __Val$1[ebp]
  0005b	4a		 dec	 edx
  0005c	89 45 f0	 mov	 DWORD PTR tv542[ebp], eax
  0005f	8b f0		 mov	 esi, eax
  00061	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H

; 64   :     _Diff _Idx       = _Hole;

  00066	8b c2		 mov	 eax, edx

; 126  :         // reheap top half, bottom to top
; 127  :         --_Hole;

  00068	89 55 fc	 mov	 DWORD PTR __Hole$1$[ebp], edx

; 128  :         _Iter_value_t<_RanIt> _Val(_STD move(*(_First + _Hole)));

  0006b	f3 a5		 rep movsd

; 129  :         _STD _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  0006d	8b fa		 mov	 edi, edx

; 69   :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0006f	3b 55 0c	 cmp	 edx, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  00072	7d 58		 jge	 SHORT $LN8@Make_heap_
$LL7@Make_heap_:

; 70   :         _Idx = 2 * _Idx + 2;

  00074	8d 14 00	 lea	 edx, DWORD PTR [eax+eax]

; 71   :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  00077	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  0007a	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
  00080	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00083	69 c0 94 00 00
	00		 imul	 eax, eax, 148

; 74   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00089	f3 0f 10 04 18	 movss	 xmm0, DWORD PTR [eax+ebx]
  0008e	33 c0		 xor	 eax, eax
  00090	0f 2f 04 19	 comiss	 xmm0, DWORD PTR [ecx+ebx]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00094	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 74   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00099	0f 96 c0	 setbe	 al
  0009c	69 ff 94 00 00
	00		 imul	 edi, edi, 148
  000a2	40		 inc	 eax
  000a3	03 fb		 add	 edi, ebx
  000a5	03 c2		 add	 eax, edx
  000a7	69 f0 94 00 00
	00		 imul	 esi, eax, 148
  000ad	89 45 08	 mov	 DWORD PTR __Idx$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  000b0	8b 04 1e	 mov	 eax, DWORD PTR [esi+ebx]
  000b3	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  000b5	83 c7 04	 add	 edi, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 75   :         _Hole             = _Idx;

  000b8	8b 45 08	 mov	 eax, DWORD PTR __Idx$1$[ebp]
  000bb	03 f3		 add	 esi, ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  000bd	83 c6 04	 add	 esi, 4
  000c0	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 75   :         _Hole             = _Idx;

  000c2	8b f8		 mov	 edi, eax
  000c4	3b 45 0c	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  000c7	7c ab		 jl	 SHORT $LL7@Make_heap_
  000c9	8b 55 fc	 mov	 edx, DWORD PTR __Hole$1$[ebp]
$LN8@Make_heap_:

; 76   :     }
; 77   : 
; 78   :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  000cc	3b 7d 0c	 cmp	 edi, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  000cf	75 33		 jne	 SHORT $LN10@Make_heap_
  000d1	8b 45 f8	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
  000d4	a8 01		 test	 al, 1
  000d6	75 2c		 jne	 SHORT $LN10@Make_heap_

; 79   :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  000d8	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
  000de	69 ff 94 00 00
	00		 imul	 edi, edi, 148
  000e4	03 fb		 add	 edi, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  000e6	8b 84 19 6c ff
	ff ff		 mov	 eax, DWORD PTR [ecx+ebx-148]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  000ed	8d b1 70 ff ff
	ff		 lea	 esi, DWORD PTR [ecx-144]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  000f3	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  000f5	03 f3		 add	 esi, ebx
  000f7	83 c7 04	 add	 edi, 4
  000fa	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  000ff	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 80   :         _Hole             = _Bottom - 1;

  00101	8b 7d f4	 mov	 edi, DWORD PTR tv550[ebp]
$LN10@Make_heap_:

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00104	f3 0f 10 8d 5c
	ff ff ff	 movss	 xmm1, DWORD PTR __Val$1[ebp]
  0010c	3b d7		 cmp	 edx, edi
  0010e	7d 36		 jge	 SHORT $LN61@Make_heap_
$LL30@Make_heap_:

; 26   :     for (_Diff _Idx                                                          = (_Hole - 1) >> 1; // shift for codegen

  00110	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00113	d1 f8		 sar	 eax, 1

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00115	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0011b	f3 0f 10 04 19	 movss	 xmm0, DWORD PTR [ecx+ebx]
  00120	0f 2f c8	 comiss	 xmm1, xmm0
  00123	76 21		 jbe	 SHORT $LN61@Make_heap_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 29   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00125	69 ff 94 00 00
	00		 imul	 edi, edi, 148
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  0012b	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 29   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0012e	03 fb		 add	 edi, ebx
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00130	03 f1		 add	 esi, ecx
  00132	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00137	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  0013b	83 c7 04	 add	 edi, 4
  0013e	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 30   :         _Hole             = _Idx;

  00140	8b f8		 mov	 edi, eax
  00142	3b d0		 cmp	 edx, eax
  00144	7c ca		 jl	 SHORT $LL30@Make_heap_
$LN61@Make_heap_:

; 125  :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00146	8b 45 f0	 mov	 eax, DWORD PTR tv542[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00149	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR __Val$1[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 33   :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0014f	69 ff 94 00 00
	00		 imul	 edi, edi, 148
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00155	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 33   :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0015a	03 fb		 add	 edi, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  0015c	f3 0f 11 0f	 movss	 DWORD PTR [edi], xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00160	83 c7 04	 add	 edi, 4
  00163	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 125  :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00165	85 d2		 test	 edx, edx
  00167	0f 8f e3 fe ff
	ff		 jg	 $LL4@Make_heap_
  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
$LN3@Make_heap_:
  0016f	5b		 pop	 ebx

; 130  :     }
; 131  : }

  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c3		 ret	 0
??$_Make_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ENDP ; std::_Make_heap_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z PROC ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 2032 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2033 :     char* const _First_ch = reinterpret_cast<char*>(_STD _To_address(_First));
; 2034 :     char* const _Last_ch  = reinterpret_cast<char*>(_STD _To_address(_Last));
; 2035 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 2036 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2037 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z ENDP ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -156						; size = 148
__Val$2 = -156						; size = 148
__Mid$3 = -8						; size = 8
__First$ = 8						; size = 4
__Mid$1$ = 8						; size = 4
$T4 = 8							; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z PROC ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 8339 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00009	53		 push	 ebx

; 8340 :     // order [_First, _Last)
; 8341 :     for (;;) {
; 8342 :         if (_Last - _First <= _ISORT_MAX) { // small

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  00012	8b c7		 mov	 eax, edi
  00014	2b c3		 sub	 eax, ebx
  00016	3d 14 13 00 00	 cmp	 eax, 4884		; 00001314H
  0001b	0f 8c 99 00 00
	00		 jl	 $LN75@Sort_unche
  00021	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  00024	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
$LL4@Sort_unche:

; 8343 :             _STD _Insertion_sort_unchecked(_First, _Last, _Pred);
; 8344 :             return;
; 8345 :         }
; 8346 : 
; 8347 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00027	50		 push	 eax
  00028	57		 push	 edi
  00029	53		 push	 ebx
  0002a	85 f6		 test	 esi, esi
  0002c	0f 8e 11 01 00
	00		 jle	 $LN76@Sort_unche

; 8349 :             _STD _Sort_heap_unchecked(_First, _Last, _Pred);
; 8350 :             return;
; 8351 :         }
; 8352 : 
; 8353 :         // divide and conquer by quicksort
; 8354 :         auto _Mid = _STD _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  00032	8d 45 f8	 lea	 eax, DWORD PTR __Mid$3[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 8355 : 
; 8356 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions

  0003b	8b c6		 mov	 eax, esi

; 8357 : 
; 8358 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  0003d	8b cf		 mov	 ecx, edi
  0003f	2b 4d fc	 sub	 ecx, DWORD PTR __Mid$3[ebp+4]
  00042	83 c4 10	 add	 esp, 16			; 00000010H
  00045	c1 f8 02	 sar	 eax, 2
  00048	d1 fe		 sar	 esi, 1
  0004a	03 f0		 add	 esi, eax
  0004c	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00051	f7 e9		 imul	 ecx
  00053	89 75 10	 mov	 DWORD PTR __Ideal$[ebp], esi
  00056	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0005b	03 d1		 add	 edx, ecx
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR __Mid$3[ebp]
  00060	c1 fa 07	 sar	 edx, 7
  00063	2b cb		 sub	 ecx, ebx
  00065	8b f2		 mov	 esi, edx
  00067	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0006a	03 f2		 add	 esi, edx
  0006c	f7 e9		 imul	 ecx
  0006e	03 d1		 add	 edx, ecx
  00070	c1 fa 07	 sar	 edx, 7
  00073	8b c2		 mov	 eax, edx
  00075	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00078	03 c2		 add	 eax, edx
  0007a	3b c6		 cmp	 eax, esi
  0007c	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  0007f	8b 75 10	 mov	 esi, DWORD PTR __Ideal$[ebp]
  00082	50		 push	 eax
  00083	56		 push	 esi
  00084	7d 0f		 jge	 SHORT $LN7@Sort_unche

; 8359 :             _STD _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  00086	8b 45 f8	 mov	 eax, DWORD PTR __Mid$3[ebp]
  00089	50		 push	 eax
  0008a	53		 push	 ebx
  0008b	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 8360 :             _First = _Mid.second;

  00090	8b 5d fc	 mov	 ebx, DWORD PTR __Mid$3[ebp+4]

; 8361 :         } else { // loop on first half

  00093	eb 10		 jmp	 SHORT $LN109@Sort_unche
$LN7@Sort_unche:

; 8362 :             _STD _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  00095	8b 45 fc	 mov	 eax, DWORD PTR __Mid$3[ebp+4]
  00098	57		 push	 edi
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 8363 :             _Last = _Mid.first;

  0009f	8b 7d f8	 mov	 edi, DWORD PTR __Mid$3[ebp]
  000a2	89 7d 0c	 mov	 DWORD PTR __Last$[ebp], edi
$LN109@Sort_unche:

; 8340 :     // order [_First, _Last)
; 8341 :     for (;;) {
; 8342 :         if (_Last - _First <= _ISORT_MAX) { // small

  000a5	8b c7		 mov	 eax, edi
  000a7	83 c4 10	 add	 esp, 16			; 00000010H
  000aa	2b c3		 sub	 eax, ebx
  000ac	3d 14 13 00 00	 cmp	 eax, 4884		; 00001314H
  000b1	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  000b4	0f 8d 6d ff ff
	ff		 jge	 $LL4@Sort_unche
$LN75@Sort_unche:

; 8213 :     if (_First != _Last) {

  000ba	3b df		 cmp	 ebx, edi
  000bc	0f 84 8a 01 00
	00		 je	 $LN12@Sort_unche

; 8214 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  000c2	8d 83 94 00 00
	00		 lea	 eax, DWORD PTR [ebx+148]
  000c8	89 45 08	 mov	 DWORD PTR __Mid$1$[ebp], eax
  000cb	3b c7		 cmp	 eax, edi
  000cd	0f 84 79 01 00
	00		 je	 $LN12@Sort_unche
  000d3	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL13@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000e0	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8216 :             _Iter_value_t<_BidIt> _Val(_STD move(*_Mid));

  000e4	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR __Val$1[ebp]
  000ea	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  000ef	8b f0		 mov	 esi, eax
  000f1	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000f3	f3 0f 10 8d 64
	ff ff ff	 movss	 xmm1, DWORD PTR __Val$1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8215 :             _BidIt _Hole = _Mid;

  000fb	8b d0		 mov	 edx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000fd	0f 2f c1	 comiss	 xmm0, xmm1
  00100	0f 86 fa 00 00
	00		 jbe	 $LL18@Sort_unche
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5210 :     while (_First != _Last) {

  00106	3b c3		 cmp	 eax, ebx
  00108	74 2d		 je	 SHORT $LN30@Sort_unche
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8219 :                 _STD _Move_backward_unchecked(_First, _Mid, ++_Hole);

  0010a	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
  0010d	0f 1f 00	 npad	 3
$LL107@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00110	8b 82 68 ff ff
	ff		 mov	 eax, DWORD PTR [edx-152]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5211 :         *--_Dest = _STD move(*--_Last);

  00116	8b fa		 mov	 edi, edx
  00118	81 ea 94 00 00
	00		 sub	 edx, 148		; 00000094H
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  0011e	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00123	8b f2		 mov	 esi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00125	89 82 90 00 00
	00		 mov	 DWORD PTR [edx+144], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5210 :     while (_First != _Last) {

  0012b	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  0012e	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5210 :     while (_First != _Last) {

  00130	3b c3		 cmp	 eax, ebx
  00132	75 dc		 jne	 SHORT $LL107@Sort_unche
  00134	8b 45 08	 mov	 eax, DWORD PTR __Mid$1$[ebp]
$LN30@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00137	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  0013b	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8221 :             } else { // look for insertion point after first

  0013e	e9 eb 00 00 00	 jmp	 $LN110@Sort_unche
$LN76@Sort_unche:

; 8348 :             _STD _Make_heap_unchecked(_First, _Last, _Pred);

  00143	e8 00 00 00 00	 call	 ??$_Make_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Make_heap_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >

; 7118 :     for (; _Last - _First >= 2; --_Last) {

  00148	2b fb		 sub	 edi, ebx

; 8348 :             _STD _Make_heap_unchecked(_First, _Last, _Pred);

  0014a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7118 :     for (; _Last - _First >= 2; --_Last) {

  0014d	89 7d 0c	 mov	 DWORD PTR __Last$[ebp], edi
  00150	81 ff 28 01 00
	00		 cmp	 edi, 296		; 00000128H
  00156	0f 8c f0 00 00
	00		 jl	 $LN12@Sort_unche
  0015c	0f 1f 40 00	 npad	 4
$LL58@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 100  :     if (2 <= _Last - _First) {

  00160	b8 4d 91 cf ba	 mov	 eax, -1160801971	; bacf914dH
  00165	8d b7 6c ff ff
	ff		 lea	 esi, DWORD PTR [edi-148]
  0016b	f7 e7		 mul	 edi
  0016d	8b c7		 mov	 eax, edi
  0016f	89 75 08	 mov	 DWORD PTR $T4[ebp], esi
  00172	2b c2		 sub	 eax, edx
  00174	d1 e8		 shr	 eax, 1
  00176	03 c2		 add	 eax, edx
  00178	c1 e8 07	 shr	 eax, 7
  0017b	83 f8 02	 cmp	 eax, 2
  0017e	7c 5c		 jl	 SHORT $LN95@Sort_unche
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00180	8b 03		 mov	 eax, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  00182	8d b7 6c ff ff
	ff		 lea	 esi, DWORD PTR [edi-148]

; 93   :     _STD _Pop_heap_hole_by_index(

  00188	ff 75 14	 push	 DWORD PTR __Pred$[ebp]

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  0018b	03 f3		 add	 esi, ebx
  0018d	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR __Val$2[ebp]
  00193	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00198	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  0019a	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  0019d	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  001a0	8b 7d 08	 mov	 edi, DWORD PTR $T4[ebp]
  001a3	03 fe		 add	 edi, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  001a5	89 84 19 6c ff
	ff ff		 mov	 DWORD PTR [ecx+ebx-148], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 93   :     _STD _Pop_heap_hole_by_index(

  001ac	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR __Val$2[ebp]
  001b2	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  001b3	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 93   :     _STD _Pop_heap_hole_by_index(

  001b8	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  001bd	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 93   :     _STD _Pop_heap_hole_by_index(

  001bf	8b 75 08	 mov	 esi, DWORD PTR $T4[ebp]
  001c2	f7 ee		 imul	 esi
  001c4	03 d6		 add	 edx, esi
  001c6	c1 fa 07	 sar	 edx, 7
  001c9	8b c2		 mov	 eax, edx
  001cb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001ce	03 c2		 add	 eax, edx
  001d0	50		 push	 eax
  001d1	6a 00		 push	 0
  001d3	53		 push	 ebx
  001d4	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
  001d9	83 c4 14	 add	 esp, 20			; 00000014H
$LN95@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7118 :     for (; _Last - _First >= 2; --_Last) {

  001dc	8b fe		 mov	 edi, esi
  001de	89 75 0c	 mov	 DWORD PTR __Last$[ebp], esi
  001e1	81 ff 28 01 00
	00		 cmp	 edi, 296		; 00000128H
  001e7	0f 8d 73 ff ff
	ff		 jge	 $LL58@Sort_unche

; 8364 :         }
; 8365 :     }
; 8366 : }

  001ed	5f		 pop	 edi
  001ee	5e		 pop	 esi
  001ef	5b		 pop	 ebx
  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	c3		 ret	 0
  001f4	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL18@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00200	f3 0f 10 80 6c
	ff ff ff	 movss	 xmm0, DWORD PTR [eax-148]
  00208	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8222 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  0020b	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 525  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00210	0f 2f c1	 comiss	 xmm0, xmm1
  00213	76 12		 jbe	 SHORT $LN94@Sort_unche

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  00215	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00219	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  0021c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8222 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00221	8b d0		 mov	 edx, eax
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 109  : 		memcpy(v,rhs.v,sizeof(v));

  00223	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8222 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00225	eb d9		 jmp	 SHORT $LL18@Sort_unche
$LN94@Sort_unche:
  00227	8b 45 08	 mov	 eax, DWORD PTR __Mid$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 365  :         first  = _STD forward<_Ty1>(_Right.first);

  0022a	f3 0f 11 0a	 movss	 DWORD PTR [edx], xmm1
$LN110@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8214 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  0022e	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00233	8d b5 68 ff ff
	ff		 lea	 esi, DWORD PTR __Val$1[ebp+4]
  00239	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0023e	89 45 08	 mov	 DWORD PTR __Mid$1$[ebp], eax
  00241	f3 a5		 rep movsd
  00243	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00246	0f 85 94 fe ff
	ff		 jne	 $LL13@Sort_unche
$LN12@Sort_unche:
  0024c	5f		 pop	 edi

; 8364 :         }
; 8365 :     }
; 8366 : }

  0024d	5e		 pop	 esi
  0024e	5b		 pop	 ebx
  0024f	8b e5		 mov	 esp, ebp
  00251	5d		 pop	 ebp
  00252	c3		 ret	 0
??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ENDP ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>, COMDAT

; 2064 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2065 :     // value-initialize all elements in [_UFirst, _UFirst + _Count)
; 2066 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 2067 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 2068 :         return _STD _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __UFirst$[ebp], ecx

; 2069 :     } else {
; 2070 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 2071 :         for (; 0 < _Count; --_Count) {
; 2072 :             _Backout._Emplace_back();
; 2073 :         }
; 2074 : 
; 2075 :         return _Backout._Release();
; 2076 :     }
; 2077 : }

  00012	5d		 pop	 ebp

; 2065 :     // value-initialize all elements in [_UFirst, _UFirst + _Count)
; 2066 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 2067 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 2068 :         return _STD _Zero_range(_UFirst, _UFirst + _Count);

  00013	e9 00 00 00 00	 jmp	 ??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>
??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z PROC ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 1928 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1929 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1930 :     _STD _Adl_verify_range(_First, _Last);
; 1931 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1933 :     auto _UDest       = _STD _Get_unwrapped_n(_Dest, _STD _Idl_distance<_InIt>(_UFirst, _ULast));
; 1934 :     _STD _Seek_wrapped(_Dest, _STD _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));
; 1935 :     return _Dest;
; 1936 : }

  00003	5d		 pop	 ebp

; 1915 :             return _STD _Copy_memmove(_First, _Last, _Dest);

  00004	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ENDP ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv652 = -8						; size = 4
tv650 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 09 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 c7 00 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 f8	 mov	 DWORD PTR tv652[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b4	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b7	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b9	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	53		 push	 ebx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>
  000c3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c6	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c8	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	85 c0		 test	 eax, eax
  000e0	74 2c		 je	 SHORT $LN72@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN83@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 2a		 ja	 SHORT $LN80@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00102	8b c2		 mov	 eax, edx
$LN83@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
$LN72@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
  00113	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00116	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00118	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR tv652[ebp]
  0011e	03 cf		 add	 ecx, edi

; 903  :     }

  00120	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z
_TEXT	SEGMENT
__Newsize$1$ = -16					; size = 4
_this$1$ = -12						; size = 4
__Whereoff$1$ = -8					; size = 4
tv644 = -8						; size = 4
tv645 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Emplace_reallocate<std::pair<float,TFlyVertexSet> >, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00008	8b 75 08	 mov	 esi, DWORD PTR __Whereptr$[ebp]
  0000b	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00010	57		 push	 edi
  00011	8b f9		 mov	 edi, ecx
  00013	89 7d f4	 mov	 DWORD PTR _this$1$[ebp], edi
  00016	2b 37		 sub	 esi, DWORD PTR [edi]

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001b	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0001d	f7 ee		 imul	 esi
  0001f	03 d6		 add	 edx, esi
  00021	c1 fa 07	 sar	 edx, 7
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx
  0002b	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002e	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00033	f7 e9		 imul	 ecx
  00035	03 d1		 add	 edx, ecx
  00037	c1 fa 07	 sar	 edx, 7
  0003a	8b c2		 mov	 eax, edx
  0003c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003f	03 c2		 add	 eax, edx

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  00041	3d 91 cf ba 01	 cmp	 eax, 29020049		; 01bacf91H
  00046	0f 84 42 01 00
	00		 je	 $LN131@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004c	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0004f	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00052	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00054	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00059	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0005b	b8 91 cf ba 01	 mov	 eax, 29020049		; 01bacf91H

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00060	89 5d f0	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00063	03 d1		 add	 edx, ecx
  00065	c1 fa 07	 sar	 edx, 7
  00068	8b ca		 mov	 ecx, edx
  0006a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0006d	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006f	8b d1		 mov	 edx, ecx
  00071	d1 ea		 shr	 edx, 1
  00073	2b c2		 sub	 eax, edx
  00075	3b c8		 cmp	 ecx, eax
  00077	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00079	b8 d4 ff ff ff	 mov	 eax, -44		; ffffffd4H
  0007e	c7 45 fc d4 ff
	ff ff		 mov	 DWORD PTR tv645[ebp], -44 ; ffffffd4H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	eb 3e		 jmp	 SHORT $LN129@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0008d	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00090	8b cb		 mov	 ecx, ebx
  00092	3b c3		 cmp	 eax, ebx
  00094	0f 43 c8	 cmovae	 ecx, eax
  00097	81 f9 91 cf ba
	01		 cmp	 ecx, 29020049		; 01bacf91H
  0009d	0f 87 f0 00 00
	00		 ja	 $LN132@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  000a3	69 f1 94 00 00
	00		 imul	 esi, ecx, 148

; 986  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000a9	8b c6		 mov	 eax, esi

; 122  :     return _Count * _Ty_size;

  000ab	89 75 fc	 mov	 DWORD PTR tv645[ebp], esi

; 227  :     if (_Bytes == 0) {

  000ae	85 c0		 test	 eax, eax
  000b0	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  000b2	33 db		 xor	 ebx, ebx
  000b4	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000b6	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bb	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c3	eb 06		 jmp	 SHORT $LN129@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN129@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000cb	8b d8		 mov	 ebx, eax
  000cd	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  000d0	69 45 f8 94 00
	00 00		 imul	 eax, DWORD PTR __Whereoff$1$[ebp], 148
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d7	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  000dc	8b 75 0c	 mov	 esi, DWORD PTR _<_Val_0>$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000df	03 c3		 add	 eax, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000e1	8b f8		 mov	 edi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000e3	89 45 f8	 mov	 DWORD PTR tv644[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000e6	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000e8	8b 7d f4	 mov	 edi, DWORD PTR _this$1$[ebp]
  000eb	8b 75 08	 mov	 esi, DWORD PTR __Whereptr$[ebp]
  000ee	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000f1	8b 07		 mov	 eax, DWORD PTR [edi]
  000f3	3b f1		 cmp	 esi, ecx
  000f5	75 04		 jne	 SHORT $LN3@Emplace_re
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000f7	8b d3		 mov	 edx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000f9	eb 19		 jmp	 SHORT $LN58@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000fb	53		 push	 ebx
  000fc	56		 push	 esi
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00@Z ; std::_Copy_memmove<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00103	8b 55 f8	 mov	 edx, DWORD PTR tv644[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00106	83 c4 0c	 add	 esp, 12			; 0000000cH
  00109	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0010c	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  0010e	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
$LN58@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  00114	52		 push	 edx
  00115	51		 push	 ecx
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PAU10@00@Z ; std::_Copy_memmove<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet> *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0011c	8b 37		 mov	 esi, DWORD PTR [edi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00121	85 f6		 test	 esi, esi
  00123	74 42		 je	 SHORT $LN80@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00125	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00128	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  0012d	2b ce		 sub	 ecx, esi
  0012f	f7 e9		 imul	 ecx
  00131	03 d1		 add	 edx, ecx
  00133	c1 fa 07	 sar	 edx, 7
  00136	8b c2		 mov	 eax, edx
  00138	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0013b	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0013d	69 c8 94 00 00
	00		 imul	 ecx, eax, 148

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00143	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00149	72 12		 jb	 SHORT $LN91@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0014b	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0014e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00151	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00153	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00156	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00159	77 2e		 ja	 SHORT $LN88@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0015b	8b f2		 mov	 esi, edx
$LN91@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0015d	51		 push	 ecx
  0015e	56		 push	 esi
  0015f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00164	83 c4 08	 add	 esp, 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00167	69 4d f0 94 00
	00 00		 imul	 ecx, DWORD PTR __Newsize$1$[ebp], 148

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  0016e	8b 45 f8	 mov	 eax, DWORD PTR tv644[ebp]

; 2060 :         _Myfirst = _Newvec;

  00171	89 1f		 mov	 DWORD PTR [edi], ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00173	03 cb		 add	 ecx, ebx
  00175	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00178	8b 4d fc	 mov	 ecx, DWORD PTR tv645[ebp]
  0017b	03 cb		 add	 ecx, ebx
  0017d	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 903  :     }

  00180	5f		 pop	 edi
  00181	5e		 pop	 esi
  00182	5b		 pop	 ebx
  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c2 08 00	 ret	 8
$LN88@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00189	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN131@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  0018e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlength
$LN132@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00193	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN128@Emplace_re:
  00198	cc		 int	 3
??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Emplace_reallocate<std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 56		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	03 d1		 add	 edx, ecx
  00018	c1 fa 07	 sar	 edx, 7
  0001b	8b c2		 mov	 eax, edx
  0001d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00020	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00022	69 c8 94 00 00
	00		 imul	 ecx, eax, 148

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00030	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00033	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00036	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00038	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0003b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003e	77 23		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00040	8b f2		 mov	 esi, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00042	51		 push	 ecx
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00049	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004f	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00052	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  00059	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN5@vector:
  00060	5f		 pop	 edi

; 820  :     }

  00061	5e		 pop	 esi
  00062	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00068	cc		 int	 3
??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
;	COMDAT ??0TFlyVertex@@QAE@XZ
_TEXT	SEGMENT
??0TFlyVertex@@QAE@XZ PROC				; TFlyVertex::TFlyVertex, COMDAT
; _this$ = ecx

; 92   : 	TFlyVertex(){};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0TFlyVertex@@QAE@XZ ENDP				; TFlyVertex::TFlyVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CFlyTrace::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A ; CFlyTrace::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ ; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CFlyTrace::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
;	COMDAT ??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CFlyTrace::ms_kPool'', COMDAT

; 8    : CDynamicPool<CFlyTrace>		CFlyTrace::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CFlyTrace::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CFlyTrace::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z PROC		; CDynamicPool<CFlyTrace>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ ; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z ENDP		; CDynamicPool<CFlyTrace>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ PROC		; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCFlyTrace@@@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN8@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN27@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN27@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2082 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN8@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN37@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN56@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN56@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2082 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN37@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN53@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN67@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ ENDP		; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCFlyTrace@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFlyTrace@@UAEPAXI@Z PROC				; CFlyTrace::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CFlyTrace@@UAE@XZ	; CFlyTrace::~CFlyTrace
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCFlyTrace@@UAEPAXI@Z ENDP				; CFlyTrace::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?Delete@CFlyTrace@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkInst$ = 8						; size = 4
_pkData$ = 8						; size = 4
?Delete@CFlyTrace@@SAXPAV1@@Z PROC			; CFlyTrace::Delete, COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 22   : 	pkInst->Destroy();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkInst$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Destroy@CFlyTrace@@QAEXXZ ; CFlyTrace::Destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 23   : 	ms_kPool.Free(pkInst);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 24   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>
  00039	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 24   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CFlyTrace@@SAXPAV1@@Z ENDP			; CFlyTrace::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?New@CFlyTrace@@SAPAV1@XZ
_TEXT	SEGMENT
_pkNewData$2 = -16					; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?New@CFlyTrace@@SAPAV1@XZ PROC				; CFlyTrace::New, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CFlyTrace@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00024	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20
  0002a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16, ecx
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 64   : 			if (m_kVct_pkFree.empty())

  00030	0f 85 84 00 00
	00		 jne	 $LN4@New

; 66   : 				T* pkNewData=new T;

  00036	6a 28		 push	 40			; 00000028H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN6@New
  0004e	8b c8		 mov	 ecx, eax
  00050	e8 00 00 00 00	 call	 ??0CFlyTrace@@QAE@XZ	; CFlyTrace::CFlyTrace
  00055	8b f0		 mov	 esi, eax
  00057	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  00059	33 f6		 xor	 esi, esi
$LN7@New:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0005b	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 66   : 				T* pkNewData=new T;

  00060	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	89 75 f0	 mov	 DWORD PTR _pkNewData$2[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0006a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+12
  00070	74 21		 je	 SHORT $LN15@New

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00072	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 17   : 	return ms_kPool.Alloc();

  00074	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  00076	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  0007d	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 18   : }

  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN15@New:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00093	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$2[ebp]
  00096	51		 push	 ecx
  00097	50		 push	 eax
  00098	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+4
  0009d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  000a2	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 17   : 	return ms_kPool.Alloc();

  000a8	8b c6		 mov	 eax, esi

; 18   : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5e		 pop	 esi
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
$LN4@New:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  000ba	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1744 :         --_Mylast;

  000bd	83 c1 fc	 add	 ecx, -4			; fffffffcH
  000c0	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 18   : }

  000c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d0	59		 pop	 ecx
  000d1	5e		 pop	 esi
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CFlyTrace@@SAPAV1@XZ$0:
  00000	6a 28		 push	 40			; 00000028H
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?New@CFlyTrace@@SAPAV1@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CFlyTrace@@SAPAV1@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CFlyTrace@@SAPAV1@XZ ENDP				; CFlyTrace::New
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?DestroySystem@CFlyTrace@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CFlyTrace@@SAXXZ PROC			; CFlyTrace::DestroySystem, COMDAT

; 11   : {

  00000	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+4
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 11   : {

  00007	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8
  0000e	3b f7		 cmp	 esi, edi
  00010	74 29		 je	 SHORT $LN12@DestroySys
$LL6@DestroySys:

; 111  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN4@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN4@DestroySys:

; 50   : 			for (auto v : m_kVct_pkData)

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL6@DestroySys
  00025	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8
  0002b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	3b f7		 cmp	 esi, edi
  00033	74 06		 je	 SHORT $LN12@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00035	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+8, esi
$LN12@DestroySys:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0003b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20
  00048	74 05		 je	 SHORT $LN16@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0004a	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+20, eax
$LN16@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 13   : }

  0004f	c3		 ret	 0
?DestroySystem@CFlyTrace@@SAXXZ ENDP			; CFlyTrace::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy, COMDAT
; _this$ = ecx

; 1671 :     void _Tidy() noexcept { // free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 959  :         return _Mysize() == 0;

  00003	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00006	85 c9		 test	 ecx, ecx

; 1672 :         _Orphan_all();
; 1673 : 
; 1674 :         while (!empty()) {

  00008	74 15		 je	 SHORT $LN76@Tidy
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Tidy:

; 1513 :         if (--_Mysize() == 0) {

  00010	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00013	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00016	8b c8		 mov	 ecx, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 f4		 jne	 SHORT $LL2@Tidy

; 1514 :             _Myoff() = 0;

  0001c	89 47 0c	 mov	 DWORD PTR [edi+12], eax
$LN76@Tidy:

; 1675 :             pop_back();
; 1676 :         }
; 1677 : 
; 1678 :         if (_Map() != nullptr) {

  0001f	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00023	74 61		 je	 SHORT $LN25@Tidy
  00025	56		 push	 esi

; 1655 :         for (auto _Block = _Map_distance(); _Block > 0;) { // free storage for a block and destroy pointer

  00026	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00029	85 f6		 test	 esi, esi
  0002b	7e 1d		 jle	 SHORT $LN73@Tidy
  0002d	0f 1f 00	 npad	 3
$LL23@Tidy:

; 1656 :             --_Block;
; 1657 :             auto& _Block_ptr = _Map()[_Block];
; 1658 :             if (_Block_ptr) { // free block

  00030	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00033	4e		 dec	 esi
  00034	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00037	85 c0		 test	 eax, eax
  00039	74 0b		 je	 SHORT $LN21@Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003b	6a 10		 push	 16			; 00000010H
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00043	83 c4 08	 add	 esp, 8
$LN21@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1655 :         for (auto _Block = _Map_distance(); _Block > 0;) { // free storage for a block and destroy pointer

  00046	85 f6		 test	 esi, esi
  00048	7f e6		 jg	 SHORT $LL23@Tidy
$LN73@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00050	c1 e1 02	 shl	 ecx, 2
  00053	5e		 pop	 esi

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00054	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005a	72 12		 jb	 SHORT $LN63@Tidy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00062	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00064	83 c0 fc	 add	 eax, -4			; fffffffcH
  00067	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006a	77 1c		 ja	 SHORT $LN60@Tidy

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006c	8b c2		 mov	 eax, edx
$LN63@Tidy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0006e	51		 push	 ecx
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00075	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1667 :         _Map()     = nullptr;

  00078	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1668 :         _Mapsize() = 0;

  0007f	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN25@Tidy:
  00086	5f		 pop	 edi

; 1683 :     }

  00087	c3		 ret	 0
$LN60@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@Tidy:
  0008d	cc		 int	 3
?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
__Myptr$1$ = -8						; size = 4
tv433 = -4						; size = 4
__Count$ = 8						; size = 4
$T1 = 8							; size = 4
?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap, COMDAT
; _this$ = ecx

; 1603 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1604 :         static_assert(_Minimum_map_size > 1, "The _Xlen() test should always be performed.");
; 1605 : 
; 1606 :         _Alpty _Almap(_Getal());
; 1607 :         size_type _Newsize = _Mapsize() > 0 ? _Mapsize() : 1;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	be 01 00 00 00	 mov	 esi, 1
  00012	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00015	85 c9		 test	 ecx, ecx
  00017	0f 45 f1	 cmovne	 esi, ecx
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Growmap:

; 1608 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _Minimum_map_size) {

  00020	8b c6		 mov	 eax, esi
  00022	2b c1		 sub	 eax, ecx
  00024	3b c2		 cmp	 eax, edx
  00026	72 05		 jb	 SHORT $LN6@Growmap
  00028	83 fe 08	 cmp	 esi, 8
  0002b	73 13		 jae	 SHORT $LN3@Growmap
$LN6@Growmap:

; 1609 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1610 :             if (max_size() / _Block_size - _Newsize < _Newsize) {

  0002d	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH
  00032	2b c6		 sub	 eax, esi
  00034	3b c6		 cmp	 eax, esi
  00036	0f 82 10 01 00
	00		 jb	 $LN55@Growmap

; 1612 :             }
; 1613 : 
; 1614 :             _Newsize *= 2;

  0003c	03 f6		 add	 esi, esi

; 1615 :         }

  0003e	eb e0		 jmp	 SHORT $LL2@Growmap
$LN3@Growmap:

; 1616 : 
; 1617 :         size_type _Allocsize = _Newsize;
; 1618 : 
; 1619 :         const auto _Myboff  = static_cast<size_type>(_Myoff() / _Block_size);

  00040	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00043	89 45 08	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00046	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0004c	0f 87 ff 00 00
	00		 ja	 $LN80@Growmap

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00052	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]
  00059	53		 push	 ebx

; 227  :     if (_Bytes == 0) {

  0005a	85 c0		 test	 eax, eax
  0005c	75 04		 jne	 SHORT $LN23@Growmap

; 228  :         return nullptr;

  0005e	33 db		 xor	 ebx, ebx
  00060	eb 19		 jmp	 SHORT $LN22@Growmap
$LN23@Growmap:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00062	50		 push	 eax
  00063	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00068	72 07		 jb	 SHORT $LN24@Growmap

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006f	eb 05		 jmp	 SHORT $LN78@Growmap
$LN24@Growmap:

; 136  :         return ::operator new(_Bytes);

  00071	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN78@Growmap:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1622 :         _Mapptr _Myptr      = _Newmap + _Map_off;

  00076	8b d8		 mov	 ebx, eax
  00078	83 c4 04	 add	 esp, 4
$LN22@Growmap:
  0007b	8b 55 08	 mov	 edx, DWORD PTR $T1[ebp]
  0007e	c1 e2 02	 shl	 edx, 2
  00081	89 55 fc	 mov	 DWORD PTR tv433[ebp], edx
  00084	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  00087	89 45 f8	 mov	 DWORD PTR __Myptr$1$[ebp], eax

; 1623 :         _STL_ASSERT(_Allocsize >= _Newsize, "_Allocsize >= _Newsize");
; 1624 :         while (_Newsize <= _Allocsize / 2) {

  0008a	8b c6		 mov	 eax, esi
  0008c	d1 e8		 shr	 eax, 1
  0008e	3b f0		 cmp	 esi, eax
  00090	77 06		 ja	 SHORT $LN5@Growmap
$LL4@Growmap:

; 1625 :             _Newsize *= 2;

  00092	03 f6		 add	 esi, esi
  00094	3b f0		 cmp	 esi, eax
  00096	76 fa		 jbe	 SHORT $LL4@Growmap
$LN5@Growmap:

; 1626 :         }
; 1627 : 
; 1628 :         _Count = _Newsize - _Mapsize();

  00098	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0009b	2b f0		 sub	 esi, eax

; 1629 : 
; 1630 :         const auto _Map_count = static_cast<_Map_difference_type>(_Count);
; 1631 : 
; 1632 :         _Myptr = _STD uninitialized_copy(_Map() + _Map_off, _Map() + _Map_distance(), _Myptr); // copy initial to end

  0009d	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000a0	ff 75 f8	 push	 DWORD PTR __Myptr$1$[ebp]
  000a3	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000a6	50		 push	 eax
  000a7	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
  000b0	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1633 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000b6	50		 push	 eax
  000b7	39 75 08	 cmp	 DWORD PTR $T1[ebp], esi
  000ba	77 22		 ja	 SHORT $LN8@Growmap

; 1634 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Map_off, _Myptr); // copy rest of old

  000bc	8b 45 fc	 mov	 eax, DWORD PTR tv433[ebp]
  000bf	03 c1		 add	 eax, ecx
  000c1	50		 push	 eax
  000c2	51		 push	 ecx
  000c3	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>

; 1635 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  000c8	8b ce		 mov	 ecx, esi
  000ca	2b 4d 08	 sub	 ecx, DWORD PTR $T1[ebp]
  000cd	51		 push	 ecx
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>

; 1636 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new
; 1637 :         } else { // increment not greater than offset of initial block

  000d4	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  000d7	83 c4 14	 add	 esp, 20			; 00000014H
  000da	8b cb		 mov	 ecx, ebx
  000dc	eb 24		 jmp	 SHORT $LN9@Growmap
$LN8@Growmap:

; 1638 :             _STD uninitialized_copy(_Map(), _Map() + _Map_count, _Myptr); // copy more old

  000de	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000e1	50		 push	 eax
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>

; 1639 :             _Myptr = _STD uninitialized_copy(_Map() + _Map_count, _Map() + _Map_off, _Newmap); // copy rest of old

  000e8	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000eb	8b 45 fc	 mov	 eax, DWORD PTR tv433[ebp]
  000ee	03 c1		 add	 eax, ecx
  000f0	53		 push	 ebx
  000f1	50		 push	 eax
  000f2	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>

; 1640 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  000fb	8b c8		 mov	 ecx, eax
  000fd	83 c4 18	 add	 esp, 24			; 00000018H
  00100	8b c6		 mov	 eax, esi
$LN9@Growmap:

; 1641 :         }
; 1642 : 
; 1643 :         if (_Map() != nullptr) {

  00102	50		 push	 eax
  00103	51		 push	 ecx
  00104	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
  00109	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0010c	83 c4 08	 add	 esp, 8
  0010f	85 c0		 test	 eax, eax
  00111	74 2a		 je	 SHORT $LN38@Growmap
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00113	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00116	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00119	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011f	72 12		 jb	 SHORT $LN49@Growmap

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00121	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00124	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00127	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00129	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012f	77 25		 ja	 SHORT $LN46@Growmap

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00131	8b c2		 mov	 eax, edx
$LN49@Growmap:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00133	51		 push	 ecx
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0013a	83 c4 08	 add	 esp, 8
$LN38@Growmap:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1649 :         _Mapsize() += _Count;

  0013d	01 77 08	 add	 DWORD PTR [edi+8], esi
  00140	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00143	5b		 pop	 ebx

; 1650 :     }

  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c2 04 00	 ret	 4
$LN55@Growmap:

; 1611 :                 _Xlen(); // result too long

  0014c	e8 00 00 00 00	 call	 ?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@CAXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
$LN80@Growmap:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00151	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN46@Growmap:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00156	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@Growmap:
  0015b	cc		 int	 3
?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@CAXXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen, COMDAT

; 1596 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@CAXXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?__Initialize@CFlyTrace@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CFlyTrace@@IAEXXZ PROC			; CFlyTrace::__Initialize, COMDAT
; _this$ = ecx

; 48   : 	m_bRectShape=false;

  00000	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0

; 49   : 	m_dwColor=0;

  00004	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 50   : 	m_fSize=0.0f;

  0000b	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 51   : 	m_fTailLength=0.0f;

  00012	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 52   : }

  00019	c3		 ret	 0
?__Initialize@CFlyTrace@@IAEXXZ ENDP			; CFlyTrace::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?Render@CFlyTrace@@QAEXXZ
_TEXT	SEGMENT
$T11 = -544						; size = 148
_E$12 = -396						; size = 12
tv3986 = -384						; size = 4
_B$2$sroa$2230$1$ = -380				; size = 4
_B$2$sroa$2231$1$ = -376				; size = 4
_s$ = -372						; size = 4
_pCurrentCamera$1$ = -368				; size = 4
_F$ = -364						; size = 12
$T13 = -352						; size = 1
_E$3$ = -352						; size = 4
_rate1$1$ = -348					; size = 4
$T14 = -348						; size = 4
$T1$sroa$2235$1$ = -344					; size = 4
_VSVector$ = -340					; size = 12
_this$GSCopy$1$ = -328					; size = 4
_it1$$sroa$2232$1$ = -324				; size = 4
_it2$$sroa$2233$1$ = -320				; size = 4
tv2177 = -316						; size = 4
tv2179 = -316						; size = 4
tv2196 = -316						; size = 4
tv2198 = -316						; size = 4
_E$1$ = -316						; size = 4
_matWorld$ = -312					; size = 64
_c$15 = -248						; size = 12
_m$ = -236						; size = 64
_U$16 = -172						; size = 12
_v$17 = -160						; size = 144
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Render@CFlyTrace@@QAEXXZ PROC				; CFlyTrace::Render, COMDAT
; _this$ = ecx

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@CFlyTrace@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 14 02 00
	00		 sub	 esp, 532		; 00000214H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d b8 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx

; 118  : 	if (m_TimePositionDeque.size()<=1)

  00033	83 79 24 01	 cmp	 DWORD PTR [ecx+36], 1
  00037	0f 86 d3 0b 00
	00		 jbe	 $LN156@Render
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0003d	c7 85 ac fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _VSVector$[ebp], 0
  00047	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _VSVector$[ebp+4], 0
  00051	c7 85 b4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _VSVector$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 123  : 	STATEMANAGER.SaveRenderState(D3DRS_ZFUNC,D3DCMP_LESS);

  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00061	6a 02		 push	 2
  00063	6a 17		 push	 23			; 00000017H
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006c	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 129  : 	STATEMANAGER.SaveTransform(D3DTS_WORLD, &matWorld);

  00071	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00077	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _matWorld$[ebp]
  0007d	50		 push	 eax
  0007e	68 00 01 00 00	 push	 256			; 00000100H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00083	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _matWorld$[ebp+56], 0
  0008d	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _matWorld$[ebp+52], 0
  00097	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _matWorld$[ebp+48], 0
  000a1	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _matWorld$[ebp+44], 0
  000ab	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _matWorld$[ebp+36], 0
  000b5	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _matWorld$[ebp+32], 0
  000bf	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _matWorld$[ebp+28], 0
  000c9	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _matWorld$[ebp+24], 0
  000d3	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _matWorld$[ebp+16], 0
  000dd	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _matWorld$[ebp+12], 0
  000e7	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _matWorld$[ebp+8], 0
  000f1	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _matWorld$[ebp+4], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000fb	c7 85 04 ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _matWorld$[ebp+60], 1065353216 ; 3f800000H
  00105	c7 85 f0 fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _matWorld$[ebp+40], 1065353216 ; 3f800000H
  0010f	c7 85 dc fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _matWorld$[ebp+20], 1065353216 ; 3f800000H
  00119	c7 85 c8 fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR _matWorld$[ebp], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 129  : 	STATEMANAGER.SaveTransform(D3DTS_WORLD, &matWorld);

  00123	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 130  : 	STATEMANAGER.SaveVertexShader(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012e	68 42 01 00 00	 push	 322			; 00000142H
  00133	e8 00 00 00 00	 call	 ?SaveVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SaveVertexShader

; 131  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

  00138	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0013e	6a 01		 push	 1
  00140	6a 16		 push	 22			; 00000016H
  00142	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 132  : 
; 133  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  00147	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0014d	6a 01		 push	 1
  0014f	6a 1b		 push	 27			; 0000001bH
  00151	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 134  : 	STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  00156	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0015c	6a 05		 push	 5
  0015e	6a 13		 push	 19			; 00000013H
  00160	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 135  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);

  00165	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0016b	6a 02		 push	 2
  0016d	6a 14		 push	 20			; 00000014H
  0016f	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 136  : 
; 137  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, TRUE);

  00174	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0017a	6a 01		 push	 1
  0017c	6a 0f		 push	 15			; 0000000fH
  0017e	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 138  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  00183	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00189	6a 05		 push	 5
  0018b	6a 19		 push	 25			; 00000019H
  0018d	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 139  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAREF, 0x00000000);

  00192	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00198	6a 00		 push	 0
  0019a	6a 18		 push	 24			; 00000018H
  0019c	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 140  : 
; 141  : 	STATEMANAGER.SaveRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD );

  001a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001a7	6a 01		 push	 1
  001a9	68 ab 00 00 00	 push	 171			; 000000abH
  001ae	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 142  : 	//STATEMANAGER.SaveRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD );
; 143  : 
; 144  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_DIFFUSE);

  001b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b9	6a 00		 push	 0
  001bb	6a 02		 push	 2
  001bd	6a 00		 push	 0
  001bf	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 145  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_TEXTURE);

  001c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001ca	6a 02		 push	 2
  001cc	6a 03		 push	 3
  001ce	6a 00		 push	 0
  001d0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 146  : 	//STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, /*(m_bUseTexture)?D3DTOP_SELECTARG2:*/D3DTOP_SELECTARG2);
; 147  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);

  001d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001db	6a 02		 push	 2
  001dd	6a 01		 push	 1
  001df	6a 00		 push	 0
  001e1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 148  : 
; 149  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_DIFFUSE);

  001e6	6a 00		 push	 0
  001e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001ee	6a 05		 push	 5
  001f0	6a 00		 push	 0
  001f2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 150  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_TEXTURE);

  001f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001fd	6a 02		 push	 2
  001ff	6a 06		 push	 6
  00201	6a 00		 push	 0
  00203	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 151  : 	//STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
; 152  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, /*(m_bUseTexture)?D3DTOP_SELECTARG2:*/D3DTOP_SELECTARG1);

  00208	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0020e	6a 02		 push	 2
  00210	6a 04		 push	 4
  00212	6a 00		 push	 0
  00214	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 153  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);

  00219	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0021f	6a 01		 push	 1
  00221	6a 01		 push	 1
  00223	6a 01		 push	 1
  00225	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 154  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  0022a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00230	6a 01		 push	 1
  00232	6a 04		 push	 4
  00234	6a 01		 push	 1
  00236	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 155  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  0023b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00241	6a 00		 push	 0
  00243	68 89 00 00 00	 push	 137			; 00000089H
  00248	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 156  : 	STATEMANAGER.SetTexture(0, NULL);

  0024d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00253	6a 00		 push	 0
  00255	6a 00		 push	 0
  00257	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 157  : 	STATEMANAGER.SetTexture(1, NULL);

  0025c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00262	6a 00		 push	 0
  00264	6a 01		 push	 1
  00266	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 158  : 
; 159  : 
; 160  : 	D3DXMATRIX m;
; 161  : 	CScreen s;s.UpdateViewMatrix();

  0026b	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00271	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  00276	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  0027c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00280	e8 00 00 00 00	 call	 ?UpdateViewMatrix@CGraphicBase@@QAEXXZ ; CGraphicBase::UpdateViewMatrix

; 162  : 	CCamera * pCurrentCamera = CCameraManager::Instance().GetCurrentCamera();

  00285	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0028b	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  00290	89 85 90 fe ff
	ff		 mov	 DWORD PTR _pCurrentCamera$1$[ebp], eax

; 163  : 	if (!pCurrentCamera)

  00296	85 c0		 test	 eax, eax
  00298	0f 84 18 09 00
	00		 je	 $LN30@Render
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 252  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  0029e	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  002a4	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+56], 0
  002ae	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+52], 0
  002b8	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+48], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 252  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  002c2	8b 7a 20	 mov	 edi, DWORD PTR [edx+32]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1297 :             _Myproxy = _Parent->_Myproxy;

  002c5	8b 72 14	 mov	 esi, DWORD PTR [edx+20]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  002c8	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+44], 0
  002d2	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+28], 0
  002dc	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+24], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 278  :         ++_Myoff;

  002e6	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  002e9	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+16], 0
  002f3	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+12], 0
  002fd	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+8], 0
  00307	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$[ebp+4], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00311	c7 85 50 ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _m$[ebp+60], 1065353216 ; 3f800000H
  0031b	c7 85 28 ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _m$[ebp+20], 1065353216 ; 3f800000H
  00325	c7 85 14 ff ff
	ff 00 00 80 3f	 mov	 DWORD PTR _m$[ebp], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 168  : 	D3DXVECTOR3 F(pCurrentCamera->GetView());

  0032f	f3 0f 7e 40 54	 movq	 xmm0, QWORD PTR [eax+84]
  00334	8b 40 5c	 mov	 eax, DWORD PTR [eax+92]
  00337	66 0f d6 85 94
	fe ff ff	 movq	 QWORD PTR _F$[ebp], xmm0

; 169  : 	m._31 = F.x;

  0033f	f3 0f 10 bd 94
	fe ff ff	 movss	 xmm7, DWORD PTR _F$[ebp]
  00347	89 85 9c fe ff
	ff		 mov	 DWORD PTR _F$[ebp+8], eax

; 170  : 	m._32 = F.y;
; 171  : 	m._33 = F.z;

  0034d	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR _F$[ebp+8]
  00355	f3 0f 11 bd 34
	ff ff ff	 movss	 DWORD PTR _m$[ebp+32], xmm7
  0035d	f3 0f 10 bd 98
	fe ff ff	 movss	 xmm7, DWORD PTR _F$[ebp+4]
  00365	f3 0f 11 bd 38
	ff ff ff	 movss	 DWORD PTR _m$[ebp+36], xmm7
  0036d	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _m$[ebp+40], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1297 :             _Myproxy = _Parent->_Myproxy;

  00375	89 b5 a8 fe ff
	ff		 mov	 DWORD PTR $T1$sroa$2235$1$[ebp], esi
$LN692@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 899  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  0037b	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0037e	03 42 24	 add	 eax, DWORD PTR [edx+36]
  00381	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@3f000000
  00389	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  00391	89 8d c0 fe ff
	ff		 mov	 DWORD PTR _it2$$sroa$2233$1$[ebp], ecx
  00397	89 bd bc fe ff
	ff		 mov	 DWORD PTR _it1$$sroa$2232$1$[ebp], edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 180  : 	{

  0039d	3b c8		 cmp	 ecx, eax
  0039f	0f 84 0b 07 00
	00		 je	 $LN3@Render
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  003a5	85 f6		 test	 esi, esi
  003a7	74 04		 je	 SHORT $LN332@Render
  003a9	8b 06		 mov	 eax, DWORD PTR [esi]
  003ab	eb 02		 jmp	 SHORT $LN333@Render
$LN332@Render:
  003ad	33 c0		 xor	 eax, eax
$LN333@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  003af	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 181  : 		const D3DXVECTOR3& rkOld=it1->second;

  003b2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  003b5	49		 dec	 ecx
  003b6	23 cf		 and	 ecx, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 181  : 		const D3DXVECTOR3& rkOld=it1->second;

  003b8	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  003bb	85 f6		 test	 esi, esi
  003bd	74 04		 je	 SHORT $LN352@Render
  003bf	8b 06		 mov	 eax, DWORD PTR [esi]
  003c1	eb 02		 jmp	 SHORT $LN353@Render
$LN352@Render:
  003c3	33 c0		 xor	 eax, eax
$LN353@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  003c5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 182  : 		const D3DXVECTOR3& rkNew=it2->second;

  003c8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  003cb	49		 dec	 ecx
  003cc	23 8d c0 fe ff
	ff		 and	 ecx, DWORD PTR _it2$$sroa$2233$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 182  : 		const D3DXVECTOR3& rkNew=it2->second;

  003d2	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003d5	f3 0f 10 68 08	 movss	 xmm5, DWORD PTR [eax+8]
  003da	f3 0f 10 70 0c	 movss	 xmm6, DWORD PTR [eax+12]
  003df	f3 0f 5c 6a 08	 subss	 xmm5, DWORD PTR [edx+8]
  003e4	f3 0f 5c 72 0c	 subss	 xmm6, DWORD PTR [edx+12]
  003e9	f3 0f 10 58 04	 movss	 xmm3, DWORD PTR [eax+4]
  003ee	f3 0f 5c 5a 04	 subss	 xmm3, DWORD PTR [edx+4]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  003f3	0f 28 d5	 movaps	 xmm2, xmm5
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003f6	f3 0f 11 ad 88
	fe ff ff	 movss	 DWORD PTR _B$2$sroa$2231$1$[ebp], xmm5
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  003fe	0f 28 c6	 movaps	 xmm0, xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00401	f3 0f 11 b5 84
	fe ff ff	 movss	 DWORD PTR _B$2$sroa$2230$1$[ebp], xmm6
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  00409	0f 54 d1	 andps	 xmm2, xmm1
  0040c	0f 54 c1	 andps	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 185  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  0040f	0f 2f d0	 comiss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00412	f3 0f 11 9d 80
	fe ff ff	 movss	 DWORD PTR tv3986[ebp], xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 185  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  0041a	76 05		 jbe	 SHORT $LN22@Render
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  0041c	0f 28 e2	 movaps	 xmm4, xmm2
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 185  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  0041f	eb 03		 jmp	 SHORT $LN23@Render
$LN22@Render:
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  00421	0f 28 e0	 movaps	 xmm4, xmm0
$LN23@Render:
  00424	0f 28 cb	 movaps	 xmm1, xmm3
  00427	0f 54 0d 00 00
	00 00		 andps	 xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 185  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  0042e	0f 2f cc	 comiss	 xmm1, xmm4
  00431	77 0d		 ja	 SHORT $LN25@Render
  00433	0f 2f d0	 comiss	 xmm2, xmm0
  00436	76 05		 jbe	 SHORT $LN24@Render
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  00438	0f 28 ca	 movaps	 xmm1, xmm2
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 185  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  0043b	eb 03		 jmp	 SHORT $LN25@Render
$LN24@Render:
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  0043d	0f 28 c8	 movaps	 xmm1, xmm0
$LN25@Render:
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 185  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  00440	f3 0f 59 cf	 mulss	 xmm1, xmm7
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00444	85 f6		 test	 esi, esi
  00446	74 04		 je	 SHORT $LN231@Render
  00448	8b 06		 mov	 eax, DWORD PTR [esi]
  0044a	eb 02		 jmp	 SHORT $LN232@Render
$LN231@Render:
  0044c	33 c0		 xor	 eax, eax
$LN232@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0044e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 186  : 		Vector3d c(it1->second.x+B.x*0.5f,

  00451	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00454	49		 dec	 ecx
  00455	23 cf		 and	 ecx, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 186  : 		Vector3d c(it1->second.x+B.x*0.5f,

  00457	f3 0f 59 df	 mulss	 xmm3, xmm7
  0045b	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0045e	f3 0f 58 58 04	 addss	 xmm3, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00463	85 f6		 test	 esi, esi
  00465	74 04		 je	 SHORT $LN251@Render
  00467	8b 06		 mov	 eax, DWORD PTR [esi]
  00469	eb 02		 jmp	 SHORT $LN252@Render
$LN251@Render:
  0046b	33 c0		 xor	 eax, eax
$LN252@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0046d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 186  : 		Vector3d c(it1->second.x+B.x*0.5f,

  00470	0f 28 d5	 movaps	 xmm2, xmm5
  00473	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00476	49		 dec	 ecx
  00477	23 cf		 and	 ecx, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 186  : 		Vector3d c(it1->second.x+B.x*0.5f,

  00479	f3 0f 59 d7	 mulss	 xmm2, xmm7
  0047d	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00480	f3 0f 58 50 08	 addss	 xmm2, DWORD PTR [eax+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00485	85 f6		 test	 esi, esi
  00487	74 04		 je	 SHORT $LN290@Render
  00489	8b 06		 mov	 eax, DWORD PTR [esi]
  0048b	eb 02		 jmp	 SHORT $LN291@Render
$LN290@Render:
  0048d	33 c0		 xor	 eax, eax
$LN291@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0048f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 186  : 		Vector3d c(it1->second.x+B.x*0.5f,

  00492	0f 28 c6	 movaps	 xmm0, xmm6
  00495	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00498	49		 dec	 ecx
  00499	23 cf		 and	 ecx, edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 186  : 		Vector3d c(it1->second.x+B.x*0.5f,

  0049b	f3 0f 59 c7	 mulss	 xmm0, xmm7

; 190  : 		if (frustum.ViewVolumeTest(c, radius)==VS_OUTSIDE)

  0049f	51		 push	 ecx
  004a0	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  004a5	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  004a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  004ad	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  004b2	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _c$15[ebp]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 37   : 		x = a;

  004b8	f3 0f 11 9d 08
	ff ff ff	 movss	 DWORD PTR _c$15[ebp], xmm3
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 190  : 		if (frustum.ViewVolumeTest(c, radius)==VS_OUTSIDE)

  004c0	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 38   : 		y = b;

  004c1	f3 0f 11 95 0c
	ff ff ff	 movss	 DWORD PTR _c$15[ebp+4], xmm2

; 39   : 		z = c;

  004c9	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _c$15[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 190  : 		if (frustum.ViewVolumeTest(c, radius)==VS_OUTSIDE)

  004d1	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  004d6	83 f8 02	 cmp	 eax, 2
  004d9	0f 84 be 05 00
	00		 je	 $LN2@Render
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  004df	85 f6		 test	 esi, esi
  004e1	74 04		 je	 SHORT $LN429@Render
  004e3	8b 06		 mov	 eax, DWORD PTR [esi]
  004e5	eb 02		 jmp	 SHORT $LN430@Render
$LN429@Render:
  004e7	33 c0		 xor	 eax, eax
$LN430@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  004e9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 451  :         return pointer_traits<pointer>::pointer_to(**this);

  004ec	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  004ef	49		 dec	 ecx
  004f0	23 cf		 and	 ecx, edi

; 451  :         return pointer_traits<pointer>::pointer_to(**this);

  004f2	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 193  : 		float rate1 = (1-(CTimer::Instance().GetCurrentSecond()-it1->first)/m_fTailLength);

  004f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  004fb	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  004ff	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR tv2177[ebp], xmm0
  00507	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  0050c	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00512	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0051a	d8 a5 c4 fe ff
	ff		 fsub	 DWORD PTR tv2177[ebp]
  00520	d9 9d c4 fe ff
	ff		 fstp	 DWORD PTR tv2179[ebp]
  00526	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR tv2179[ebp]
  0052e	f3 0f 5e 41 10	 divss	 xmm0, DWORD PTR [ecx+16]
  00533	f3 0f 5c c8	 subss	 xmm1, xmm0
  00537	f3 0f 11 8d a4
	fe ff ff	 movss	 DWORD PTR _rate1$1$[ebp], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0053f	85 f6		 test	 esi, esi
  00541	74 04		 je	 SHORT $LN449@Render
  00543	8b 06		 mov	 eax, DWORD PTR [esi]
  00545	eb 02		 jmp	 SHORT $LN450@Render
$LN449@Render:
  00547	33 c0		 xor	 eax, eax
$LN450@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00549	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 451  :         return pointer_traits<pointer>::pointer_to(**this);

  0054c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0054f	49		 dec	 ecx
  00550	23 8d c0 fe ff
	ff		 and	 ecx, DWORD PTR _it2$$sroa$2233$1$[ebp]

; 451  :         return pointer_traits<pointer>::pointer_to(**this);

  00556	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 194  : 		float rate2 = (1-(CTimer::Instance().GetCurrentSecond()-it2->first)/m_fTailLength);

  00559	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0055f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00563	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR tv2196[ebp], xmm0
  0056b	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00570	d8 a5 c4 fe ff
	ff		 fsub	 DWORD PTR tv2196[ebp]
  00576	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0057c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000

; 195  : 		float size1 = m_fSize;
; 196  : 		float size2 = m_fSize;
; 197  : 		if (!m_bRectShape)

  00584	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  00588	d9 9d c4 fe ff
	ff		 fstp	 DWORD PTR tv2198[ebp]
  0058e	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR tv2198[ebp]
  00596	f3 0f 5e 40 10	 divss	 xmm0, DWORD PTR [eax+16]
  0059b	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [eax+12]
  005a0	f3 0f 5c d8	 subss	 xmm3, xmm0
  005a4	0f 28 d1	 movaps	 xmm2, xmm1
  005a7	75 0c		 jne	 SHORT $LN20@Render

; 198  : 		{
; 199  : 			size1 *= rate1;

  005a9	f3 0f 59 8d a4
	fe ff ff	 mulss	 xmm1, DWORD PTR _rate1$1$[ebp]

; 200  : 			size2 *= rate2;

  005b1	f3 0f 59 d3	 mulss	 xmm2, xmm3
$LN20@Render:

; 93   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  005b5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 201  : 		}
; 202  : 		TFlyVertex v[6] =
; 203  : 		{
; 204  : 			TFlyVertex(D3DXVECTOR3(0.0f,size1,0.0f), m_dwColor,D3DXVECTOR2(0.0f,0.0f)),
; 205  : 			TFlyVertex(D3DXVECTOR3(-size1,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.0f,0.5f)),

  005b8	0f 28 c1	 movaps	 xmm0, xmm1
  005bb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000

; 93   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  005c2	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _v$17[ebp+24], xmm0

; 206  : 			TFlyVertex(D3DXVECTOR3(size1,0.0f,0.0f), m_dwColor,D3DXVECTOR2(0.5f,0.0f)),
; 207  : 			TFlyVertex(D3DXVECTOR3(-size2,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.5f,1.0f)),

  005ca	0f 28 c2	 movaps	 xmm0, xmm2
  005cd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000

; 93   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  005d4	89 85 6c ff ff
	ff		 mov	 DWORD PTR _v$17[ebp+12], eax
  005da	89 45 84	 mov	 DWORD PTR _v$17[ebp+36], eax
  005dd	89 45 9c	 mov	 DWORD PTR _v$17[ebp+60], eax
  005e0	89 45 b4	 mov	 DWORD PTR _v$17[ebp+84], eax
  005e3	89 45 cc	 mov	 DWORD PTR _v$17[ebp+108], eax
  005e6	89 45 e4	 mov	 DWORD PTR _v$17[ebp+132], eax

; 208  : 			TFlyVertex(D3DXVECTOR3(size2,0.0f,0.0f), m_dwColor,D3DXVECTOR2(1.0f,0.5f)),
; 209  : 			TFlyVertex(D3DXVECTOR3(0.0f,-size2,0.0f),m_dwColor,D3DXVECTOR2(1.0f,1.0f)),
; 210  : 
; 211  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 212  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 213  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 214  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 215  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f), ((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 216  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 217  : 
; 218  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 219  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 220  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 221  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 222  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 223  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),*/
; 224  : 
; 225  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 226  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 227  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 228  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 229  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 230  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 231  : 		};
; 232  : 
; 233  : 
; 234  : 		D3DXVECTOR3 E(M._41,M._42,M._43);
; 235  : 		E = pCurrentCamera->GetEye();

  005e9	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _pCurrentCamera$1$[ebp]

; 93   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  005ef	f3 0f 11 45 a8	 movss	 DWORD PTR _v$17[ebp+72], xmm0
  005f4	f3 0f 11 45 dc	 movss	 DWORD PTR _v$17[ebp+124], xmm0
  005f9	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v$17[ebp], 0

; 208  : 			TFlyVertex(D3DXVECTOR3(size2,0.0f,0.0f), m_dwColor,D3DXVECTOR2(1.0f,0.5f)),
; 209  : 			TFlyVertex(D3DXVECTOR3(0.0f,-size2,0.0f),m_dwColor,D3DXVECTOR2(1.0f,1.0f)),
; 210  : 
; 211  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 212  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 213  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 214  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 215  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f), ((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 216  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 217  : 
; 218  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 219  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 220  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 221  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 222  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 223  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),*/
; 224  : 
; 225  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 226  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 227  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 228  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 229  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 230  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 231  : 		};
; 232  : 
; 233  : 
; 234  : 		D3DXVECTOR3 E(M._41,M._42,M._43);
; 235  : 		E = pCurrentCamera->GetEye();

  00603	f3 0f 7e 40 30	 movq	 xmm0, QWORD PTR [eax+48]
  00608	8b 40 38	 mov	 eax, DWORD PTR [eax+56]

; 93   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  0060b	f3 0f 11 8d 64
	ff ff ff	 movss	 DWORD PTR _v$17[ebp+4], xmm1
  00613	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v$17[ebp+8], 0
  0061d	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v$17[ebp+16], 0
  00627	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v$17[ebp+20], 0
  00631	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v$17[ebp+28], 0
  0063b	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _v$17[ebp+32], 0
  00642	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _v$17[ebp+40], 0
  00649	c7 45 8c 00 00
	00 3f		 mov	 DWORD PTR _v$17[ebp+44], 1056964608 ; 3f000000H
  00650	f3 0f 11 4d 90	 movss	 DWORD PTR _v$17[ebp+48], xmm1
  00655	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _v$17[ebp+52], 0
  0065c	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _v$17[ebp+56], 0
  00663	c7 45 a0 00 00
	00 3f		 mov	 DWORD PTR _v$17[ebp+64], 1056964608 ; 3f000000H
  0066a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _v$17[ebp+68], 0
  00671	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _v$17[ebp+76], 0
  00678	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _v$17[ebp+80], 0
  0067f	c7 45 b8 00 00
	00 3f		 mov	 DWORD PTR _v$17[ebp+88], 1056964608 ; 3f000000H
  00686	c7 45 bc 00 00
	80 3f		 mov	 DWORD PTR _v$17[ebp+92], 1065353216 ; 3f800000H
  0068d	f3 0f 11 55 c0	 movss	 DWORD PTR _v$17[ebp+96], xmm2
  00692	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _v$17[ebp+100], 0
  00699	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _v$17[ebp+104], 0
  006a0	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR _v$17[ebp+112], 1065353216 ; 3f800000H
  006a7	c7 45 d4 00 00
	00 3f		 mov	 DWORD PTR _v$17[ebp+116], 1056964608 ; 3f000000H
  006ae	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _v$17[ebp+120], 0
  006b5	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _v$17[ebp+128], 0
  006bc	c7 45 e8 00 00
	80 3f		 mov	 DWORD PTR _v$17[ebp+136], 1065353216 ; 3f800000H
  006c3	c7 45 ec 00 00
	80 3f		 mov	 DWORD PTR _v$17[ebp+140], 1065353216 ; 3f800000H

; 208  : 			TFlyVertex(D3DXVECTOR3(size2,0.0f,0.0f), m_dwColor,D3DXVECTOR2(1.0f,0.5f)),
; 209  : 			TFlyVertex(D3DXVECTOR3(0.0f,-size2,0.0f),m_dwColor,D3DXVECTOR2(1.0f,1.0f)),
; 210  : 
; 211  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 212  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 213  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 214  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 215  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f), ((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 216  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 217  : 
; 218  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 219  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 220  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 221  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 222  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 223  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),*/
; 224  : 
; 225  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 226  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 227  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 228  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 229  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 230  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 231  : 		};
; 232  : 
; 233  : 
; 234  : 		D3DXVECTOR3 E(M._41,M._42,M._43);
; 235  : 		E = pCurrentCamera->GetEye();

  006ca	66 0f d6 85 74
	fe ff ff	 movq	 QWORD PTR _E$12[ebp], xmm0
  006d2	89 85 7c fe ff
	ff		 mov	 DWORD PTR _E$12[ebp+8], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  006d8	85 f6		 test	 esi, esi
  006da	74 04		 je	 SHORT $LN374@Render
  006dc	8b 06		 mov	 eax, DWORD PTR [esi]
  006de	eb 02		 jmp	 SHORT $LN375@Render
$LN374@Render:
  006e0	33 c0		 xor	 eax, eax
$LN375@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  006e2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 236  : 		E-=it1->second;

  006e5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  006e8	49		 dec	 ecx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 214  :     y -= v.y;

  006e9	f3 0f 10 8d 78
	fe ff ff	 movss	 xmm1, DWORD PTR _E$12[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  006f1	23 cf		 and	 ecx, edi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 215  :     z -= v.z;

  006f3	f3 0f 10 bd 7c
	fe ff ff	 movss	 xmm7, DWORD PTR _E$12[ebp+8]
  006fb	f3 0f 10 b5 74
	fe ff ff	 movss	 xmm6, DWORD PTR _E$12[ebp]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00703	f3 0f 10 a5 80
	fe ff ff	 movss	 xmm4, DWORD PTR tv3986[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 236  : 		E-=it1->second;

  0070b	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 214  :     y -= v.y;

  0070e	f3 0f 5c 48 08	 subss	 xmm1, DWORD PTR [eax+8]

; 215  :     z -= v.z;

  00713	f3 0f 5c 78 0c	 subss	 xmm7, DWORD PTR [eax+12]
  00718	f3 0f 5c 70 04	 subss	 xmm6, DWORD PTR [eax+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 243  : 		D3DXVec3Normalize(&U,&U);

  0071d	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _U$16[ebp]
  00723	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00724	0f 28 c1	 movaps	 xmm0, xmm1

; 214  :     y -= v.y;

  00727	f3 0f 11 8d a4
	fe ff ff	 movss	 DWORD PTR $T14[ebp], xmm1

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0072f	f3 0f 59 85 84
	fe ff ff	 mulss	 xmm0, DWORD PTR _B$2$sroa$2230$1$[ebp]

; 215  :     z -= v.z;

  00737	0f 28 df	 movaps	 xmm3, xmm7
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 243  : 		D3DXVec3Normalize(&U,&U);

  0073a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 215  :     z -= v.z;

  0073b	f3 0f 59 9d 88
	fe ff ff	 mulss	 xmm3, DWORD PTR _B$2$sroa$2231$1$[ebp]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00743	0f 28 d6	 movaps	 xmm2, xmm6
  00746	f3 0f 59 95 84
	fe ff ff	 mulss	 xmm2, DWORD PTR _B$2$sroa$2230$1$[ebp]
  0074e	f3 0f 5c d8	 subss	 xmm3, xmm0

; 213  :     x -= v.x;

  00752	f3 0f 11 b5 c4
	fe ff ff	 movss	 DWORD PTR _E$1$[ebp], xmm6

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0075a	0f 28 c4	 movaps	 xmm0, xmm4

; 215  :     z -= v.z;

  0075d	f3 0f 11 bd a0
	fe ff ff	 movss	 DWORD PTR _E$3$[ebp], xmm7

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00765	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00769	f3 0f 59 e1	 mulss	 xmm4, xmm1
  0076d	f3 0f 5c d0	 subss	 xmm2, xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00771	0f 28 c6	 movaps	 xmm0, xmm6
  00774	f3 0f 59 85 88
	fe ff ff	 mulss	 xmm0, DWORD PTR _B$2$sroa$2231$1$[ebp]
  0077c	f3 0f 5c e0	 subss	 xmm4, xmm0

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00780	0f 28 c2	 movaps	 xmm0, xmm2
  00783	f3 0f 59 85 9c
	fe ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp+8]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0078b	f3 0f 59 95 94
	fe ff ff	 mulss	 xmm2, DWORD PTR _F$[ebp]

; 1281 :     *pOut = v;

  00793	0f 28 cc	 movaps	 xmm1, xmm4

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00796	f3 0f 59 a5 94
	fe ff ff	 mulss	 xmm4, DWORD PTR _F$[ebp]

; 1281 :     *pOut = v;

  0079e	f3 0f 59 8d 98
	fe ff ff	 mulss	 xmm1, DWORD PTR _F$[ebp+4]

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  007a6	f3 0f 5c c8	 subss	 xmm1, xmm0
  007aa	0f 28 c3	 movaps	 xmm0, xmm3
  007ad	f3 0f 59 85 9c
	fe ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp+8]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  007b5	f3 0f 59 9d 98
	fe ff ff	 mulss	 xmm3, DWORD PTR _F$[ebp+4]
  007bd	f3 0f 5c c4	 subss	 xmm0, xmm4

; 1280 : 
; 1281 :     *pOut = v;

  007c1	f3 0f 11 8d 54
	ff ff ff	 movss	 DWORD PTR _U$16[ebp], xmm1
  007c9	f3 0f 5c d3	 subss	 xmm2, xmm3
  007cd	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _U$16[ebp+4], xmm0
  007d5	f3 0f 11 95 5c
	ff ff ff	 movss	 DWORD PTR _U$16[ebp+8], xmm2
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 243  : 		D3DXVec3Normalize(&U,&U);

  007dd	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  007e2	f3 0f 10 ad 5c
	ff ff ff	 movss	 xmm5, DWORD PTR _U$16[ebp+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  007ea	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR _v$17[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  007f0	f3 0f 10 9d 58
	ff ff ff	 movss	 xmm3, DWORD PTR _U$16[ebp+4]
  007f8	0f 28 f5	 movaps	 xmm6, xmm5
  007fb	f3 0f 59 b5 98
	fe ff ff	 mulss	 xmm6, DWORD PTR _F$[ebp+4]
  00803	0f 28 c3	 movaps	 xmm0, xmm3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00806	be 06 00 00 00	 mov	 esi, 6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0080b	f3 0f 59 85 9c
	fe ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp+8]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00813	0f 28 d3	 movaps	 xmm2, xmm3
  00816	f3 0f 10 8d 54
	ff ff ff	 movss	 xmm1, DWORD PTR _U$16[ebp]
  0081e	f3 0f 59 95 94
	fe ff ff	 mulss	 xmm2, DWORD PTR _F$[ebp]
  00826	0f 28 e1	 movaps	 xmm4, xmm1
  00829	f3 0f 59 a5 9c
	fe ff ff	 mulss	 xmm4, DWORD PTR _F$[ebp+8]
  00831	f3 0f 5c f0	 subss	 xmm6, xmm0
  00835	0f 28 c5	 movaps	 xmm0, xmm5
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 247  : 		m._21 = U.x;

  00838	f3 0f 11 8d 24
	ff ff ff	 movss	 DWORD PTR _m$[ebp+16], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00840	f3 0f 59 85 94
	fe ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 248  : 		m._22 = U.y;

  00848	f3 0f 11 9d 28
	ff ff ff	 movss	 DWORD PTR _m$[ebp+20], xmm3

; 249  : 		m._23 = U.z;

  00850	f3 0f 11 ad 2c
	ff ff ff	 movss	 DWORD PTR _m$[ebp+24], xmm5
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00858	f3 0f 5c e0	 subss	 xmm4, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 250  : 		m._11 = R.x;

  0085c	f3 0f 11 b5 14
	ff ff ff	 movss	 DWORD PTR _m$[ebp], xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00864	0f 28 c1	 movaps	 xmm0, xmm1
  00867	f3 0f 59 85 98
	fe ff ff	 mulss	 xmm0, DWORD PTR _F$[ebp+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 251  : 		m._12 = R.y;

  0086f	f3 0f 11 a5 18
	ff ff ff	 movss	 DWORD PTR _m$[ebp+4], xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00877	f3 0f 5c d0	 subss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 252  : 		m._13 = R.z;

  0087b	f3 0f 11 95 1c
	ff ff ff	 movss	 DWORD PTR _m$[ebp+8], xmm2
$LL7@Render:

; 253  : 		int i;
; 254  : 		for(i=0;i<6;i++)
; 255  : 			D3DXVec3TransformNormal(&v[i].p,&v[i].p,&m);

  00883	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR _m$[ebp]
  00889	50		 push	 eax
  0088a	57		 push	 edi
  0088b	57		 push	 edi
  0088c	e8 00 00 00 00	 call	 _D3DXVec3TransformNormal@12
  00891	83 c7 18	 add	 edi, 24			; 00000018H
  00894	83 ee 01	 sub	 esi, 1
  00897	75 ea		 jne	 SHORT $LL7@Render
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00899	8b b5 a8 fe ff
	ff		 mov	 esi, DWORD PTR $T1$sroa$2235$1$[ebp]
  0089f	85 f6		 test	 esi, esi
  008a1	74 04		 je	 SHORT $LN126@Render
  008a3	8b 06		 mov	 eax, DWORD PTR [esi]
  008a5	eb 02		 jmp	 SHORT $LN127@Render
$LN126@Render:
  008a7	33 c0		 xor	 eax, eax
$LN127@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  008a9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 257  : 			v[i].p += it1->second;

  008ac	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  008af	49		 dec	 ecx
  008b0	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _it1$$sroa$2232$1$[ebp]
  008b6	23 ca		 and	 ecx, edx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  008b8	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _v$17[ebp]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 257  : 			v[i].p += it1->second;

  008c0	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  008c3	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  008c8	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _v$17[ebp], xmm0

; 205  :     y += v.y;

  008d0	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _v$17[ebp+4]
  008d8	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  008dd	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _v$17[ebp+4], xmm0

; 206  :     z += v.z;

  008e5	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _v$17[ebp+8]
  008ed	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  008f2	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _v$17[ebp+8], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  008fa	85 f6		 test	 esi, esi
  008fc	74 04		 je	 SHORT $LN678@Render
  008fe	8b 06		 mov	 eax, DWORD PTR [esi]
  00900	eb 02		 jmp	 SHORT $LN679@Render
$LN678@Render:
  00902	33 c0		 xor	 eax, eax
$LN679@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00904	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 257  : 			v[i].p += it1->second;

  00907	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0090a	49		 dec	 ecx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  0090b	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _v$17[ebp+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00913	23 ca		 and	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 257  : 			v[i].p += it1->second;

  00915	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00918	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0091d	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _v$17[ebp+24], xmm0

; 205  :     y += v.y;

  00925	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _v$17[ebp+28]
  0092d	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00932	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _v$17[ebp+28], xmm0

; 206  :     z += v.z;

  0093a	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _v$17[ebp+32]
  0093f	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  00944	f3 0f 11 45 80	 movss	 DWORD PTR _v$17[ebp+32], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00949	85 f6		 test	 esi, esi
  0094b	74 04		 je	 SHORT $LN681@Render
  0094d	8b 06		 mov	 eax, DWORD PTR [esi]
  0094f	eb 02		 jmp	 SHORT $LN682@Render
$LN681@Render:
  00951	33 c0		 xor	 eax, eax
$LN682@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00953	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00956	bf 03 00 00 00	 mov	 edi, 3
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 257  : 			v[i].p += it1->second;

  0095b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0095e	49		 dec	 ecx
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  0095f	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _v$17[ebp+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00964	23 ca		 and	 ecx, edx
  00966	8d 55 b0	 lea	 edx, DWORD PTR _v$17[ebp+80]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 257  : 			v[i].p += it1->second;

  00969	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  0096c	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00971	f3 0f 11 45 90	 movss	 DWORD PTR _v$17[ebp+48], xmm0

; 205  :     y += v.y;

  00976	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _v$17[ebp+52]
  0097b	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00980	f3 0f 11 45 94	 movss	 DWORD PTR _v$17[ebp+52], xmm0

; 206  :     z += v.z;

  00985	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _v$17[ebp+56]
  0098a	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  0098f	f3 0f 11 45 98	 movss	 DWORD PTR _v$17[ebp+56], xmm0
$LL13@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00994	85 f6		 test	 esi, esi
  00996	74 04		 je	 SHORT $LN80@Render
  00998	8b 06		 mov	 eax, DWORD PTR [esi]
  0099a	eb 02		 jmp	 SHORT $LN81@Render
$LN80@Render:
  0099c	33 c0		 xor	 eax, eax
$LN81@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0099e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 259  : 			v[i].p += it2->second;

  009a1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  009a4	49		 dec	 ecx
  009a5	23 8d c0 fe ff
	ff		 and	 ecx, DWORD PTR _it2$$sroa$2233$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  009ab	f3 0f 10 42 f8	 movss	 xmm0, DWORD PTR [edx-8]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 259  : 			v[i].p += it2->second;

  009b0	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  009b3	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  009b8	f3 0f 11 42 f8	 movss	 DWORD PTR [edx-8], xmm0

; 205  :     y += v.y;

  009bd	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  009c2	f3 0f 58 42 fc	 addss	 xmm0, DWORD PTR [edx-4]
  009c7	f3 0f 11 42 fc	 movss	 DWORD PTR [edx-4], xmm0

; 206  :     z += v.z;

  009cc	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  009d1	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  009d5	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 258  : 		for(;i<6;i++)

  009d9	83 c2 18	 add	 edx, 24			; 00000018H
  009dc	83 ef 01	 sub	 edi, 1
  009df	75 b3		 jne	 SHORT $LL13@Render
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  009e1	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR _pCurrentCamera$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  009e7	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR _v$17[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  009ed	f3 0f 10 8d c4
	fe ff ff	 movss	 xmm1, DWORD PTR _E$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  009f5	8d bd e4 fd ff
	ff		 lea	 edi, DWORD PTR $T11[ebp+4]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  009fb	f3 0f 10 85 a4
	fe ff ff	 movss	 xmm0, DWORD PTR $T14[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00a03	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00a08	f3 0f 59 40 58	 mulss	 xmm0, DWORD PTR [eax+88]
  00a0d	f3 0f 59 48 54	 mulss	 xmm1, DWORD PTR [eax+84]
  00a12	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a16	f3 0f 10 8d a0
	fe ff ff	 movss	 xmm1, DWORD PTR _E$3$[ebp]
  00a1e	f3 0f 59 48 5c	 mulss	 xmm1, DWORD PTR [eax+92]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00a23	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _VSVector$[ebp+4]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00a29	f3 0f 58 c1	 addss	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 263  : 		VSVector.push_back(std::make_pair(-D3DXVec3Dot(&E,&pCurrentCamera->GetView()),TFlyVertexSet(v)));

  00a2d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00a34	f3 0f 11 85 e0
	fd ff ff	 movss	 DWORD PTR $T11[ebp], xmm0
  00a3c	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00a3e	3b 85 b4 fe ff
	ff		 cmp	 eax, DWORD PTR _VSVector$[ebp+8]
  00a44	74 38		 je	 SHORT $LN108@Render
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 278  :         ++_Myoff;

  00a46	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 506  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00a4c	8d b5 e0 fd ff
	ff		 lea	 esi, DWORD PTR $T11[ebp]
  00a52	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00a57	8b f8		 mov	 edi, eax
  00a59	f3 a5		 rep movsd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 278  :         ++_Myoff;

  00a5b	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _it2$$sroa$2233$1$[ebp]
  00a61	8b bd bc fe ff
	ff		 mov	 edi, DWORD PTR _it1$$sroa$2232$1$[ebp]
  00a67	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  00a68	81 85 b0 fe ff
	ff 94 00 00 00	 add	 DWORD PTR _VSVector$[ebp+4], 148 ; 00000094H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 278  :         ++_Myoff;

  00a72	47		 inc	 edi
  00a73	8b b5 a8 fe ff
	ff		 mov	 esi, DWORD PTR $T1$sroa$2235$1$[ebp]
  00a79	e9 fd f8 ff ff	 jmp	 $LN692@Render
$LN108@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00a7e	8d 8d e0 fd ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00a84	51		 push	 ecx
  00a85	50		 push	 eax
  00a86	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _VSVector$[ebp]
  00a8c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Emplace_reallocate<std::pair<float,TFlyVertexSet> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 278  :         ++_Myoff;

  00a91	8b bd bc fe ff
	ff		 mov	 edi, DWORD PTR _it1$$sroa$2232$1$[ebp]
  00a97	8b b5 a8 fe ff
	ff		 mov	 esi, DWORD PTR $T1$sroa$2235$1$[ebp]
$LN2@Render:
  00a9d	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _it2$$sroa$2233$1$[ebp]
  00aa3	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
  00aa9	41		 inc	 ecx
  00aaa	47		 inc	 edi
  00aab	e9 cb f8 ff ff	 jmp	 $LN692@Render
$LN3@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8373 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  00ab0	8b bd b0 fe ff
	ff		 mov	 edi, DWORD PTR _VSVector$[ebp+4]
  00ab6	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00abb	8b b5 ac fe ff
	ff		 mov	 esi, DWORD PTR _VSVector$[ebp]
  00ac1	8b cf		 mov	 ecx, edi
  00ac3	2b ce		 sub	 ecx, esi
  00ac5	c6 85 a0 fe ff
	ff 00		 mov	 BYTE PTR $T13[ebp], 0
  00acc	ff b5 a0 fe ff
	ff		 push	 DWORD PTR $T13[ebp]
  00ad2	f7 e9		 imul	 ecx
  00ad4	03 d1		 add	 edx, ecx
  00ad6	c1 fa 07	 sar	 edx, 7
  00ad9	8b c2		 mov	 eax, edx
  00adb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00ade	03 c2		 add	 eax, edx
  00ae0	50		 push	 eax
  00ae1	57		 push	 edi
  00ae2	56		 push	 esi
  00ae3	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00ae8	8b b5 ac fe ff
	ff		 mov	 esi, DWORD PTR _VSVector$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8373 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  00aee	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00af1	3b b5 b0 fe ff
	ff		 cmp	 esi, DWORD PTR _VSVector$[ebp+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 270  : 	for(TFlyVertexSetVector::iterator it = VSVector.begin();it!=VSVector.end();++it)

  00af7	74 2a		 je	 SHORT $LN15@Render
  00af9	0f 1f 80 00 00
	00 00		 npad	 7
$LL16@Render:

; 271  : 	{
; 272  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 4, it->second.v, sizeof(TVertex));

  00b00	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b06	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00b09	6a 18		 push	 24			; 00000018H
  00b0b	50		 push	 eax
  00b0c	6a 04		 push	 4
  00b0e	6a 05		 push	 5
  00b10	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  00b15	81 c6 94 00 00
	00		 add	 esi, 148		; 00000094H

; 166  :         return _Ptr == _Right._Ptr;

  00b1b	3b b5 b0 fe ff
	ff		 cmp	 esi, DWORD PTR _VSVector$[ebp+4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 270  : 	for(TFlyVertexSetVector::iterator it = VSVector.begin();it!=VSVector.end();++it)

  00b21	75 dd		 jne	 SHORT $LL16@Render
$LN15@Render:

; 273  : 	}
; 274  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  00b23	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b29	6a 14		 push	 20			; 00000014H
  00b2b	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 275  : 	STATEMANAGER.RestoreRenderState(D3DRS_SRCBLEND);

  00b30	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b36	6a 13		 push	 19			; 00000013H
  00b38	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 276  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE);

  00b3d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b43	6a 1b		 push	 27			; 0000001bH
  00b45	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 277  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE);

  00b4a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b50	6a 16		 push	 22			; 00000016H
  00b52	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 278  : 	STATEMANAGER.RestoreVertexShader();

  00b57	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b5d	e8 00 00 00 00	 call	 ?RestoreVertexShader@CStateManager@@QAEXXZ ; CStateManager::RestoreVertexShader

; 279  : 	STATEMANAGER.RestoreTransform(D3DTS_WORLD);

  00b62	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b68	68 00 01 00 00	 push	 256			; 00000100H
  00b6d	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 280  : 	//STATEMANAGER.RestoreRenderState(D3DRS_ZWRITEENABLE);
; 281  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZFUNC);

  00b72	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b78	6a 17		 push	 23			; 00000017H
  00b7a	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 282  : 	STATEMANAGER.RestoreRenderState(D3DRS_BLENDOP);

  00b7f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b85	68 ab 00 00 00	 push	 171			; 000000abH
  00b8a	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 283  : 
; 284  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE);

  00b8f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00b95	6a 0f		 push	 15			; 0000000fH
  00b97	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 285  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAFUNC);

  00b9c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00ba2	6a 19		 push	 25			; 00000019H
  00ba4	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 286  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAREF);

  00ba9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00baf	6a 18		 push	 24			; 00000018H
  00bb1	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
$LN30@Render:

; 288  : }

  00bb6	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00bbc	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00bc1	8b b5 ac fe ff
	ff		 mov	 esi, DWORD PTR _VSVector$[ebp]
  00bc7	85 f6		 test	 esi, esi
  00bc9	74 45		 je	 SHORT $LN156@Render

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00bcb	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _VSVector$[ebp+8]
  00bd1	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  00bd6	2b ce		 sub	 ecx, esi
  00bd8	f7 e9		 imul	 ecx
  00bda	03 d1		 add	 edx, ecx
  00bdc	c1 fa 07	 sar	 edx, 7
  00bdf	8b c2		 mov	 eax, edx
  00be1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00be4	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00be6	69 c8 94 00 00
	00		 imul	 ecx, eax, 148
  00bec	8b c6		 mov	 eax, esi

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00bee	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00bf4	72 10		 jb	 SHORT $LN175@Render

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00bf6	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  00bf9	83 c1 23	 add	 ecx, 35			; 00000023H
  00bfc	2b c6		 sub	 eax, esi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00bfe	83 c0 fc	 add	 eax, -4			; fffffffcH
  00c01	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00c04	77 25		 ja	 SHORT $LN694@Render
$LN175@Render:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00c06	51		 push	 ecx
  00c07	56		 push	 esi
  00c08	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00c0d	83 c4 08	 add	 esp, 8
$LN156@Render:
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 288  : }

  00c10	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00c13	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00c1a	59		 pop	 ecx
  00c1b	5f		 pop	 edi
  00c1c	5e		 pop	 esi
  00c1d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00c20	33 cd		 xor	 ecx, ebp
  00c22	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00c27	8b e5		 mov	 esp, ebp
  00c29	5d		 pop	 ebp
  00c2a	c3		 ret	 0
$LN694@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00c2b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN690@Render:
  00c30	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _VSVector$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$1:
  0000b	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?Render@CFlyTrace@@QAEXXZ:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a e0 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-544]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@CFlyTrace@@QAEXXZ
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@CFlyTrace@@QAEXXZ ENDP				; CFlyTrace::Render
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?Update@CFlyTrace@@QAEXXZ
_TEXT	SEGMENT
?Update@CFlyTrace@@QAEXXZ PROC				; CFlyTrace::Update, COMDAT
; _this$ = ecx

; 82   : 
; 83   : }

  00000	c2 00 00	 ret	 0
?Update@CFlyTrace@@QAEXXZ ENDP				; CFlyTrace::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
tv538 = -4						; size = 4
_v3Position$ = 8					; size = 4
__Block$1$ = 8						; size = 4
tv567 = 8						; size = 4
?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z PROC ; CFlyTrace::UpdateNewPosition, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 63   : 	m_TimePositionDeque.push_front(TTimePosition(CTimer::Instance().GetCurrentSecond(),v3Position));

  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0000f	57		 push	 edi
  00010	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00015	8b 45 08	 mov	 eax, DWORD PTR _v3Position$[ebp]
  00018	d9 5d ec	 fstp	 DWORD PTR $T1[ebp]
  0001b	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0001f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00022	89 45 f8	 mov	 DWORD PTR $T1[ebp+12], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1149 :         if (_Myoff() % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00025	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00028	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00029	66 0f d6 45 f0	 movq	 QWORD PTR $T1[ebp+4], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1149 :         if (_Myoff() % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  0002e	39 46 1c	 cmp	 DWORD PTR [esi+28], eax
  00031	77 0a		 ja	 SHORT $LN11@UpdateNewP

; 1150 :             _Growmap(1);

  00033	6a 01		 push	 1
  00035	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00038	e8 00 00 00 00	 call	 ?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
$LN11@UpdateNewP:

; 1151 :         }
; 1152 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  0003d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00040	53		 push	 ebx
  00041	8d 58 ff	 lea	 ebx, DWORD PTR [eax-1]
  00044	23 5e 20	 and	 ebx, DWORD PTR [esi+32]

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00047	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]

; 1152 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  0004a	89 5e 20	 mov	 DWORD PTR [esi+32], ebx

; 1153 :         const auto _Newoff = static_cast<size_type>((_Myoff() != 0 ? _Myoff() : _Mapsize() * _Block_size) - 1);

  0004d	0f 44 d8	 cmove	 ebx, eax

; 1154 :         const auto _Block  = _Getblock(_Newoff);
; 1155 :         if (_Map()[_Block] == nullptr) {

  00050	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00053	4b		 dec	 ebx

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00054	23 cb		 and	 ecx, ebx
  00056	89 4d 08	 mov	 DWORD PTR __Block$1$[ebp], ecx

; 1155 :         if (_Map()[_Block] == nullptr) {

  00059	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  0005d	75 13		 jne	 SHORT $LN12@UpdateNewP
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0005f	6a 10		 push	 16			; 00000010H
  00061	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1156 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00066	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00069	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1156 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  0006c	8b 55 08	 mov	 edx, DWORD PTR __Block$1$[ebp]
  0006f	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN12@UpdateNewP:

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00072	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]

; 578  :         return _STD _Unfancy(_Map[_Block] + _Block_off);

  00075	8b 46 18	 mov	 eax, DWORD PTR [esi+24]

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00078	49		 dec	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00079	0f 10 45 ec	 movups	 xmm0, XMMWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0007d	23 cb		 and	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0007f	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00082	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1162 :         ++_Mysize();

  00085	ff 46 24	 inc	 DWORD PTR [esi+36]
  00088	89 5e 20	 mov	 DWORD PTR [esi+32], ebx

; 959  :         return _Mysize() == 0;

  0008b	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0008e	5b		 pop	 ebx
  0008f	85 c9		 test	 ecx, ecx
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 64   : 	while(!m_TimePositionDeque.empty() && m_TimePositionDeque.back().first+m_fTailLength<CTimer::Instance().GetCurrentSecond())

  00091	74 4b		 je	 SHORT $LN3@UpdateNewP
$LL2@UpdateNewP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00093	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 64   : 	while(!m_TimePositionDeque.empty() && m_TimePositionDeque.back().first+m_fTailLength<CTimer::Instance().GetCurrentSecond())

  00096	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0009b	48		 dec	 eax
  0009c	03 c8		 add	 ecx, eax
  0009e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000a1	48		 dec	 eax
  000a2	23 c8		 and	 ecx, eax

; 1118 :         return _Subscript(_Mysize() - 1);

  000a4	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a7	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 64   : 	while(!m_TimePositionDeque.empty() && m_TimePositionDeque.back().first+m_fTailLength<CTimer::Instance().GetCurrentSecond())

  000aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  000b0	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  000b4	f3 0f 11 45 fc	 movss	 DWORD PTR tv538[ebp], xmm0
  000b9	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  000be	d9 5d 08	 fstp	 DWORD PTR tv567[ebp]
  000c1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv567[ebp]
  000c6	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR tv538[ebp]
  000ca	76 12		 jbe	 SHORT $LN3@UpdateNewP
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1513 :         if (--_Mysize() == 0) {

  000cc	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  000cf	83 e9 01	 sub	 ecx, 1
  000d2	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  000d5	75 bc		 jne	 SHORT $LL2@UpdateNewP

; 1514 :             _Myoff() = 0;

  000d7	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN3@UpdateNewP:
  000de	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 68   : }

  000df	5e		 pop	 esi
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CFlyTrace::UpdateNewPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z
_TEXT	SEGMENT
_rFlyingAttachData$ = 8					; size = 4
?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z PROC ; CFlyTrace::Create, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   : 	//assert(rFlyingAttachData.bHasTail);
; 73   : 	m_dwColor = rFlyingAttachData.dwTailColor;

  00003	8b 55 08	 mov	 edx, DWORD PTR _rFlyingAttachData$[ebp]
  00006	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00009	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 74   : 	m_fTailLength = rFlyingAttachData.fTailLength;

  0000c	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0000f	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 75   : 	m_fSize = rFlyingAttachData.fTailSize;

  00012	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00015	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 76   : 	m_bRectShape = rFlyingAttachData.bRectShape;

  00018	8a 42 30	 mov	 al, BYTE PTR [edx+48]
  0001b	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 77   : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z ENDP ; CFlyTrace::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
;	COMDAT ?Destroy@CFlyTrace@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CFlyTrace@@QAEXXZ PROC				; CFlyTrace::Destroy, COMDAT
; _this$ = ecx

; 55   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 56   : 	m_TimePositionDeque.clear();

  00003	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1577 :         _Tidy();

  00006	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 58   : 	__Initialize();

  0000b	8b ce		 mov	 ecx, esi
  0000d	5e		 pop	 esi
  0000e	e9 00 00 00 00	 jmp	 ?__Initialize@CFlyTrace@@IAEXXZ ; CFlyTrace::__Initialize
?Destroy@CFlyTrace@@QAEXXZ ENDP				; CFlyTrace::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
;	COMDAT ??1CFlyTrace@@UAE@XZ
_TEXT	SEGMENT
??1CFlyTrace@@UAE@XZ PROC				; CFlyTrace::~CFlyTrace, COMDAT
; _this$ = ecx

; 41   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CFlyTrace@@6B@

; 42   : 	Destroy();

  0000a	e8 00 00 00 00	 call	 ?Destroy@CFlyTrace@@QAEXXZ ; CFlyTrace::Destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 762  :         _Tidy();

  0000f	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00017	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001a	6a 08		 push	 8
  0001c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 43   : }

  0002c	8b cf		 mov	 ecx, edi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??1CFlyTrace@@UAE@XZ ENDP				; CFlyTrace::~CFlyTrace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp
;	COMDAT ??0CFlyTrace@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFlyTrace@@QAE@XZ PROC				; CFlyTrace::CFlyTrace, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CFlyTrace@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  0002f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CFlyTrace@@6B@
  00035	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00038	6a 08		 push	 8
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 27   : {

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1231 :     _Container_proxy* _Myproxy = nullptr;

  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 556  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00047	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0004e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00055	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0005c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00063	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00068	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 28   : 	__Initialize();

  0006b	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1201 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  0006d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1218 :         _Myproxy            = _New_proxy;

  00074	89 06		 mov	 DWORD PTR [esi], eax

; 1219 :         _New_proxy->_Mycont = this;

  00076	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\GameLib\FlyTrace.cpp

; 28   : 	__Initialize();

  00078	e8 00 00 00 00	 call	 ?__Initialize@CFlyTrace@@IAEXXZ ; CFlyTrace::__Initialize

; 29   : 
; 30   : 	/*
; 31   : 	// Code for texture
; 32   : 	CGraphicImage * pImage = (CGraphicImage *)CResourceManager::Instance().GetResourcePointer("d:/ray.jpg");
; 33   : 	m_ImageInstance.SetImagePointer(pImage);
; 34   : 
; 35   : 	CGraphicTexture * pTexture = m_ImageInstance.GetTexturePointer();
; 36   : 	m_lpTexture = pTexture->GetD3DTexture();
; 37   : 	*/
; 38   : }

  0007d	8b c7		 mov	 eax, edi
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFlyTrace@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CFlyTrace@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CFlyTrace@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CFlyTrace@@QAE@XZ ENDP				; CFlyTrace::CFlyTrace
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
